
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eed8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800efe8  0800efe8  0000ffe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faa8  0800faa8  00011230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800faa8  0800faa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fab0  0800fab0  00011230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fab0  0800fab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fab4  0800fab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800fab8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000230  0800fce8  00011230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800fce8  00011884  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b08d  00000000  00000000  00011259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c99  00000000  00000000  0002c2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00030f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001508  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cefc  00000000  00000000  00033f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f76  00000000  00000000  00050e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a019  00000000  00000000  00072dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cdd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008328  00000000  00000000  0010ce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00115140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800efd0 	.word	0x0800efd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800efd0 	.word	0x0800efd0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b98c 	b.w	80013b4 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	9d08      	ldr	r5, [sp, #32]
 80010ba:	468e      	mov	lr, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d14a      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	d962      	bls.n	8001190 <__udivmoddi4+0xdc>
 80010ca:	fab2 f682 	clz	r6, r2
 80010ce:	b14e      	cbz	r6, 80010e4 <__udivmoddi4+0x30>
 80010d0:	f1c6 0320 	rsb	r3, r6, #32
 80010d4:	fa01 f806 	lsl.w	r8, r1, r6
 80010d8:	fa20 f303 	lsr.w	r3, r0, r3
 80010dc:	40b7      	lsls	r7, r6
 80010de:	ea43 0808 	orr.w	r8, r3, r8
 80010e2:	40b4      	lsls	r4, r6
 80010e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80010f4:	fb01 f20c 	mul.w	r2, r1, ip
 80010f8:	0c23      	lsrs	r3, r4, #16
 80010fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010fe:	429a      	cmp	r2, r3
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x62>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f101 30ff 	add.w	r0, r1, #4294967295
 8001108:	f080 80eb 	bcs.w	80012e2 <__udivmoddi4+0x22e>
 800110c:	429a      	cmp	r2, r3
 800110e:	f240 80e8 	bls.w	80012e2 <__udivmoddi4+0x22e>
 8001112:	3902      	subs	r1, #2
 8001114:	443b      	add	r3, r7
 8001116:	1a9a      	subs	r2, r3, r2
 8001118:	fbb2 f0fe 	udiv	r0, r2, lr
 800111c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001120:	fb00 fc0c 	mul.w	ip, r0, ip
 8001124:	b2a3      	uxth	r3, r4
 8001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800112a:	459c      	cmp	ip, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	f080 80d7 	bcs.w	80012e6 <__udivmoddi4+0x232>
 8001138:	459c      	cmp	ip, r3
 800113a:	f240 80d4 	bls.w	80012e6 <__udivmoddi4+0x232>
 800113e:	443b      	add	r3, r7
 8001140:	3802      	subs	r0, #2
 8001142:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001146:	2100      	movs	r1, #0
 8001148:	eba3 030c 	sub.w	r3, r3, ip
 800114c:	b11d      	cbz	r5, 8001156 <__udivmoddi4+0xa2>
 800114e:	2200      	movs	r2, #0
 8001150:	40f3      	lsrs	r3, r6
 8001152:	e9c5 3200 	strd	r3, r2, [r5]
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d905      	bls.n	800116a <__udivmoddi4+0xb6>
 800115e:	b10d      	cbz	r5, 8001164 <__udivmoddi4+0xb0>
 8001160:	e9c5 0100 	strd	r0, r1, [r5]
 8001164:	2100      	movs	r1, #0
 8001166:	4608      	mov	r0, r1
 8001168:	e7f5      	b.n	8001156 <__udivmoddi4+0xa2>
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d146      	bne.n	8001200 <__udivmoddi4+0x14c>
 8001172:	4573      	cmp	r3, lr
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0xc8>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 8108 	bhi.w	800138c <__udivmoddi4+0x2d8>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001182:	2001      	movs	r0, #1
 8001184:	4690      	mov	r8, r2
 8001186:	2d00      	cmp	r5, #0
 8001188:	d0e5      	beq.n	8001156 <__udivmoddi4+0xa2>
 800118a:	e9c5 4800 	strd	r4, r8, [r5]
 800118e:	e7e2      	b.n	8001156 <__udivmoddi4+0xa2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	f000 8091 	beq.w	80012b8 <__udivmoddi4+0x204>
 8001196:	fab2 f682 	clz	r6, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	f040 80a5 	bne.w	80012ea <__udivmoddi4+0x236>
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	2101      	movs	r1, #1
 80011a4:	0c03      	lsrs	r3, r0, #16
 80011a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	b2bc      	uxth	r4, r7
 80011ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80011b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	fb04 f20c 	mul.w	r2, r4, ip
 80011be:	429a      	cmp	r2, r3
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x11e>
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x11c>
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f200 80e3 	bhi.w	8001396 <__udivmoddi4+0x2e2>
 80011d0:	46c4      	mov	ip, r8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80011d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80011dc:	fb02 f404 	mul.w	r4, r2, r4
 80011e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d907      	bls.n	80011f8 <__udivmoddi4+0x144>
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x142>
 80011f0:	429c      	cmp	r4, r3
 80011f2:	f200 80cd 	bhi.w	8001390 <__udivmoddi4+0x2dc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011fe:	e7a5      	b.n	800114c <__udivmoddi4+0x98>
 8001200:	f1c1 0620 	rsb	r6, r1, #32
 8001204:	408b      	lsls	r3, r1
 8001206:	fa22 f706 	lsr.w	r7, r2, r6
 800120a:	431f      	orrs	r7, r3
 800120c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001210:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001214:	fbba f8f9 	udiv	r8, sl, r9
 8001218:	fa0e fe01 	lsl.w	lr, lr, r1
 800121c:	fa20 f306 	lsr.w	r3, r0, r6
 8001220:	fb09 aa18 	mls	sl, r9, r8, sl
 8001224:	fa1f fc87 	uxth.w	ip, r7
 8001228:	ea43 030e 	orr.w	r3, r3, lr
 800122c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001230:	fb08 f00c 	mul.w	r0, r8, ip
 8001234:	0c1c      	lsrs	r4, r3, #16
 8001236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800123a:	42a0      	cmp	r0, r4
 800123c:	fa02 f201 	lsl.w	r2, r2, r1
 8001240:	d90a      	bls.n	8001258 <__udivmoddi4+0x1a4>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f108 3aff 	add.w	sl, r8, #4294967295
 8001248:	f080 809e 	bcs.w	8001388 <__udivmoddi4+0x2d4>
 800124c:	42a0      	cmp	r0, r4
 800124e:	f240 809b 	bls.w	8001388 <__udivmoddi4+0x2d4>
 8001252:	f1a8 0802 	sub.w	r8, r8, #2
 8001256:	443c      	add	r4, r7
 8001258:	1a24      	subs	r4, r4, r0
 800125a:	b298      	uxth	r0, r3
 800125c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001260:	fb09 4413 	mls	r4, r9, r3, r4
 8001264:	fb03 fc0c 	mul.w	ip, r3, ip
 8001268:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800126c:	45a4      	cmp	ip, r4
 800126e:	d909      	bls.n	8001284 <__udivmoddi4+0x1d0>
 8001270:	193c      	adds	r4, r7, r4
 8001272:	f103 30ff 	add.w	r0, r3, #4294967295
 8001276:	f080 8085 	bcs.w	8001384 <__udivmoddi4+0x2d0>
 800127a:	45a4      	cmp	ip, r4
 800127c:	f240 8082 	bls.w	8001384 <__udivmoddi4+0x2d0>
 8001280:	3b02      	subs	r3, #2
 8001282:	443c      	add	r4, r7
 8001284:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001288:	eba4 040c 	sub.w	r4, r4, ip
 800128c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001290:	4564      	cmp	r4, ip
 8001292:	4643      	mov	r3, r8
 8001294:	46e1      	mov	r9, ip
 8001296:	d364      	bcc.n	8001362 <__udivmoddi4+0x2ae>
 8001298:	d061      	beq.n	800135e <__udivmoddi4+0x2aa>
 800129a:	b15d      	cbz	r5, 80012b4 <__udivmoddi4+0x200>
 800129c:	ebbe 0203 	subs.w	r2, lr, r3
 80012a0:	eb64 0409 	sbc.w	r4, r4, r9
 80012a4:	fa04 f606 	lsl.w	r6, r4, r6
 80012a8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	40cc      	lsrs	r4, r1
 80012b0:	e9c5 6400 	strd	r6, r4, [r5]
 80012b4:	2100      	movs	r1, #0
 80012b6:	e74e      	b.n	8001156 <__udivmoddi4+0xa2>
 80012b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80012bc:	0c01      	lsrs	r1, r0, #16
 80012be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012c2:	b280      	uxth	r0, r0
 80012c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012c8:	463b      	mov	r3, r7
 80012ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80012ce:	4638      	mov	r0, r7
 80012d0:	463c      	mov	r4, r7
 80012d2:	46b8      	mov	r8, r7
 80012d4:	46be      	mov	lr, r7
 80012d6:	2620      	movs	r6, #32
 80012d8:	eba2 0208 	sub.w	r2, r2, r8
 80012dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e0:	e765      	b.n	80011ae <__udivmoddi4+0xfa>
 80012e2:	4601      	mov	r1, r0
 80012e4:	e717      	b.n	8001116 <__udivmoddi4+0x62>
 80012e6:	4610      	mov	r0, r2
 80012e8:	e72b      	b.n	8001142 <__udivmoddi4+0x8e>
 80012ea:	f1c6 0120 	rsb	r1, r6, #32
 80012ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80012f2:	40b7      	lsls	r7, r6
 80012f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	ea41 010e 	orr.w	r1, r1, lr
 8001300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001304:	fbbc f8fe 	udiv	r8, ip, lr
 8001308:	b2bc      	uxth	r4, r7
 800130a:	fb0e cc18 	mls	ip, lr, r8, ip
 800130e:	fb08 f904 	mul.w	r9, r8, r4
 8001312:	0c0a      	lsrs	r2, r1, #16
 8001314:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001318:	40b0      	lsls	r0, r6
 800131a:	4591      	cmp	r9, r2
 800131c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001320:	b280      	uxth	r0, r0
 8001322:	d93e      	bls.n	80013a2 <__udivmoddi4+0x2ee>
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	f108 3cff 	add.w	ip, r8, #4294967295
 800132a:	d201      	bcs.n	8001330 <__udivmoddi4+0x27c>
 800132c:	4591      	cmp	r9, r2
 800132e:	d81f      	bhi.n	8001370 <__udivmoddi4+0x2bc>
 8001330:	eba2 0209 	sub.w	r2, r2, r9
 8001334:	fbb2 f9fe 	udiv	r9, r2, lr
 8001338:	fb09 f804 	mul.w	r8, r9, r4
 800133c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001340:	b28a      	uxth	r2, r1
 8001342:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001346:	4542      	cmp	r2, r8
 8001348:	d229      	bcs.n	800139e <__udivmoddi4+0x2ea>
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001350:	d2c2      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001352:	4542      	cmp	r2, r8
 8001354:	d2c0      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001356:	f1a9 0102 	sub.w	r1, r9, #2
 800135a:	443a      	add	r2, r7
 800135c:	e7bc      	b.n	80012d8 <__udivmoddi4+0x224>
 800135e:	45c6      	cmp	lr, r8
 8001360:	d29b      	bcs.n	800129a <__udivmoddi4+0x1e6>
 8001362:	ebb8 0302 	subs.w	r3, r8, r2
 8001366:	eb6c 0c07 	sbc.w	ip, ip, r7
 800136a:	3801      	subs	r0, #1
 800136c:	46e1      	mov	r9, ip
 800136e:	e794      	b.n	800129a <__udivmoddi4+0x1e6>
 8001370:	eba7 0909 	sub.w	r9, r7, r9
 8001374:	444a      	add	r2, r9
 8001376:	fbb2 f9fe 	udiv	r9, r2, lr
 800137a:	f1a8 0c02 	sub.w	ip, r8, #2
 800137e:	fb09 f804 	mul.w	r8, r9, r4
 8001382:	e7db      	b.n	800133c <__udivmoddi4+0x288>
 8001384:	4603      	mov	r3, r0
 8001386:	e77d      	b.n	8001284 <__udivmoddi4+0x1d0>
 8001388:	46d0      	mov	r8, sl
 800138a:	e765      	b.n	8001258 <__udivmoddi4+0x1a4>
 800138c:	4608      	mov	r0, r1
 800138e:	e6fa      	b.n	8001186 <__udivmoddi4+0xd2>
 8001390:	443b      	add	r3, r7
 8001392:	3a02      	subs	r2, #2
 8001394:	e730      	b.n	80011f8 <__udivmoddi4+0x144>
 8001396:	f1ac 0c02 	sub.w	ip, ip, #2
 800139a:	443b      	add	r3, r7
 800139c:	e719      	b.n	80011d2 <__udivmoddi4+0x11e>
 800139e:	4649      	mov	r1, r9
 80013a0:	e79a      	b.n	80012d8 <__udivmoddi4+0x224>
 80013a2:	eba2 0209 	sub.w	r2, r2, r9
 80013a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80013aa:	46c4      	mov	ip, r8
 80013ac:	fb09 f804 	mul.w	r8, r9, r4
 80013b0:	e7c4      	b.n	800133c <__udivmoddi4+0x288>
 80013b2:	bf00      	nop

080013b4 <__aeabi_idiv0>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013d8:	2304      	movs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fa8a 	bl	8006900 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	76fb      	strb	r3, [r7, #27]
 80013f4:	e01c      	b.n	8001430 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 ffcc 	bl	8006398 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f005 f89f 	bl	800654c <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f005 f9a0 	bl	8006758 <HAL_ADC_GetValue>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f865 	bl	80064f4 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	3301      	adds	r3, #1
 800142e:	76fb      	strb	r3, [r7, #27]
 8001430:	7efa      	ldrb	r2, [r7, #27]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_ui2f>
 800143e:	4604      	mov	r4, r0
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbe4 	bl	8000c10 <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fce7 	bl	8000e20 <__aeabi_fdiv>
 8001452:	4603      	mov	r3, r0
 8001454:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <ReadAverageVoltage+0xc0>)
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <ReadAverageVoltage+0xc4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000254 	.word	0x20000254
 8001478:	40533333 	.word	0x40533333
 800147c:	457ff000 	.word	0x457ff000

08001480 <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <ACS712_Init+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800148e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001492:	f004 fe85 	bl	80061a0 <HAL_Delay>
    ACS712_CalibrateZero();
 8001496:	f000 f807 	bl	80014a8 <ACS712_CalibrateZero>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000254 	.word	0x20000254

080014a8 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 80014ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b2:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	e00d      	b.n	80014dc <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff ff78 	bl	80013b8 <ReadAverageVoltage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff faeb 	bl	8000aa8 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	3301      	adds	r3, #1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ed      	bcc.n	80014c0 <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb92 	bl	8000c10 <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fc95 	bl	8000e20 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <ACS712_CalibrateZero+0x60>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000258 	.word	0x20000258

0800150c <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 8001512:	210a      	movs	r1, #10
 8001514:	2007      	movs	r0, #7
 8001516:	f7ff ff4f 	bl	80013b8 <ReadAverageVoltage>
 800151a:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <ACS712_ReadCurrent+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff fabe 	bl	8000aa4 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <ACS712_ReadCurrent+0x88>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc77 	bl	8000e20 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <ACS712_ReadCurrent+0x8c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd58 	bl	8000ff4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <ACS712_ReadCurrent+0x94>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 8001560:	4910      	ldr	r1, [pc, #64]	@ (80015a4 <ACS712_ReadCurrent+0x98>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fba8 	bl	8000cb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fa9b 	bl	8000aa8 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001578:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <ACS712_ReadCurrent+0x90>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <ACS712_ReadCurrent+0x9c>)
 8001580:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000258 	.word	0x20000258
 8001594:	3d872b02 	.word	0x3d872b02
 8001598:	3cf5c28f 	.word	0x3cf5c28f
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	3f333333 	.word	0x3f333333
 80015a4:	3e99999a 	.word	0x3e99999a
 80015a8:	2000024c 	.word	0x2000024c

080015ac <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 80015b2:	2105      	movs	r1, #5
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff feff 	bl	80013b8 <ReadAverageVoltage>
 80015ba:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <Voltage_ReadInput+0x5c>)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Voltage_ReadInput+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4910      	ldr	r1, [pc, #64]	@ (8001610 <Voltage_ReadInput+0x64>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb72 	bl	8000cb8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <Voltage_ReadInput+0x68>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff fb6c 	bl	8000cb8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fa5f 	bl	8000aa8 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <Voltage_ReadInput+0x6c>)
 80015f8:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <Voltage_ReadInput+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	3f58f2fb 	.word	0x3f58f2fb
 800160c:	20000260 	.word	0x20000260
 8001610:	3f333333 	.word	0x3f333333
 8001614:	3e99999a 	.word	0x3e99999a
 8001618:	20000250 	.word	0x20000250

0800161c <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 8001620:	f7ff ff74 	bl	800150c <ACS712_ReadCurrent>
 8001624:	4603      	mov	r3, r0
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <ACS712_Update+0x1c>)
 8001628:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 800162a:	f7ff ffbf 	bl	80015ac <Voltage_ReadInput>
 800162e:	4603      	mov	r3, r0
 8001630:	4a02      	ldr	r2, [pc, #8]	@ (800163c <ACS712_Update+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250

08001640 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800165e:	2306      	movs	r3, #6
 8001660:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f005 f949 	bl	8006900 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <readChannelVoltage+0x3a>
        return 0.0f;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e029      	b.n	80016ce <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f004 fe8c 	bl	8006398 <HAL_ADC_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <readChannelVoltage+0x4c>
        return 0.0f;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e020      	b.n	80016ce <readChannelVoltage+0x8e>

    float v = 0.0f;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001692:	210a      	movs	r1, #10
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f004 ff59 	bl	800654c <HAL_ADC_PollForConversion>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f005 f859 	bl	8006758 <HAL_ADC_GetValue>
 80016a6:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_ui2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <readChannelVoltage+0x98>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb00 	bl	8000cb8 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <readChannelVoltage+0x9c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbaf 	bl	8000e20 <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 ff14 	bl	80064f4 <HAL_ADC_Stop>
    return v;
 80016cc:	69fb      	ldr	r3, [r7, #28]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40533333 	.word	0x40533333
 80016dc:	457ff000 	.word	0x457ff000

080016e0 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f005 fa9d 	bl	8006c28 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Init+0x18>
        Error_Handler();
 80016f4:	f001 f98e 	bl	8002a14 <Error_Handler>
    }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800171a:	e154      	b.n	80019c6 <ADC_ReadAllChannels+0x2c6>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001720:	4ab7      	ldr	r2, [pc, #732]	@ (8001a00 <ADC_ReadAllChannels+0x300>)
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff89 	bl	8001640 <readChannelVoltage>
 800172e:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8001730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001734:	4ab3      	ldr	r2, [pc, #716]	@ (8001a04 <ADC_ReadAllChannels+0x304>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc4e 	bl	8000fe0 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 800174a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800174e:	49ad      	ldr	r1, [pc, #692]	@ (8001a04 <ADC_ReadAllChannels+0x304>)
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001756:	e01a      	b.n	800178e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8001758:	49ab      	ldr	r1, [pc, #684]	@ (8001a08 <ADC_ReadAllChannels+0x308>)
 800175a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175c:	f7ff faac 	bl	8000cb8 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	461d      	mov	r5, r3
 8001764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001768:	4aa6      	ldr	r2, [pc, #664]	@ (8001a04 <ADC_ReadAllChannels+0x304>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	49a7      	ldr	r1, [pc, #668]	@ (8001a0c <ADC_ReadAllChannels+0x30c>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faa1 	bl	8000cb8 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff f992 	bl	8000aa8 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b9e      	ldr	r3, [pc, #632]	@ (8001a04 <ADC_ReadAllChannels+0x304>)
 800178a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 800178e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001792:	4a9c      	ldr	r2, [pc, #624]	@ (8001a04 <ADC_ReadAllChannels+0x304>)
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 800179a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800179e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017a0:	f7ff fc28 	bl	8000ff4 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 80017c0:	4993      	ldr	r1, [pc, #588]	@ (8001a10 <ADC_ReadAllChannels+0x310>)
 80017c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4992      	ldr	r1, [pc, #584]	@ (8001a14 <ADC_ReadAllChannels+0x314>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb27 	bl	8000e20 <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc33 	bl	8001044 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 80017e8:	2301      	movs	r3, #1
 80017ea:	461c      	mov	r4, r3
 80017ec:	498a      	ldr	r1, [pc, #552]	@ (8001a18 <ADC_ReadAllChannels+0x318>)
 80017ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f0:	f7ff fc14 	bl	800101c <__aeabi_fcmpge>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <ADC_ReadAllChannels+0xfe>
 80017fa:	2300      	movs	r3, #0
 80017fc:	461c      	mov	r4, r3
 80017fe:	b2e2      	uxtb	r2, r4
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	4611      	mov	r1, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001814:	4981      	ldr	r1, [pc, #516]	@ (8001a1c <ADC_ReadAllChannels+0x31c>)
 8001816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001820:	4a7f      	ldr	r2, [pc, #508]	@ (8001a20 <ADC_ReadAllChannels+0x320>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4619      	mov	r1, r3
 8001828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001834:	497b      	ldr	r1, [pc, #492]	@ (8001a24 <ADC_ReadAllChannels+0x324>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fbfa 	bl	8001030 <__aeabi_fcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	4974      	ldr	r1, [pc, #464]	@ (8001a20 <ADC_ReadAllChannels+0x320>)
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4a73      	ldr	r2, [pc, #460]	@ (8001a28 <ADC_ReadAllChannels+0x328>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d165      	bne.n	800192c <ADC_ReadAllChannels+0x22c>
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f7ff fbd9 	bl	800101c <__aeabi_fcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05d      	beq.n	800192c <ADC_ReadAllChannels+0x22c>
            s_level_flags[i] = 1;
 8001870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001874:	4a6c      	ldr	r2, [pc, #432]	@ (8001a28 <ADC_ReadAllChannels+0x328>)
 8001876:	2101      	movs	r1, #1
 8001878:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 800187a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187e:	2b04      	cmp	r3, #4
 8001880:	d82a      	bhi.n	80018d8 <ADC_ReadAllChannels+0x1d8>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ADC_ReadAllChannels+0x188>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018c1 	.word	0x080018c1
 8001898:	080018cd 	.word	0x080018cd
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 800189c:	4a63      	ldr	r2, [pc, #396]	@ (8001a2c <ADC_ReadAllChannels+0x32c>)
 800189e:	2110      	movs	r1, #16
 80018a0:	4863      	ldr	r0, [pc, #396]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018a2:	f00b f9b5 	bl	800cc10 <sniprintf>
 80018a6:	e01b      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 80018a8:	4a62      	ldr	r2, [pc, #392]	@ (8001a34 <ADC_ReadAllChannels+0x334>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4860      	ldr	r0, [pc, #384]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018ae:	f00b f9af 	bl	800cc10 <sniprintf>
 80018b2:	e015      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 80018b4:	4a60      	ldr	r2, [pc, #384]	@ (8001a38 <ADC_ReadAllChannels+0x338>)
 80018b6:	2110      	movs	r1, #16
 80018b8:	485d      	ldr	r0, [pc, #372]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018ba:	f00b f9a9 	bl	800cc10 <sniprintf>
 80018be:	e00f      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 80018c0:	4a5e      	ldr	r2, [pc, #376]	@ (8001a3c <ADC_ReadAllChannels+0x33c>)
 80018c2:	2110      	movs	r1, #16
 80018c4:	485a      	ldr	r0, [pc, #360]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018c6:	f00b f9a3 	bl	800cc10 <sniprintf>
 80018ca:	e009      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 80018cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a40 <ADC_ReadAllChannels+0x340>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	4857      	ldr	r0, [pc, #348]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018d2:	f00b f99d 	bl	800cc10 <sniprintf>
 80018d6:	e003      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 80018d8:	4b55      	ldr	r3, [pc, #340]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	bf00      	nop
            }
//            motorStatus = 1;
            s_low_counts[i] = 0;
 80018e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 80018ea:	4b51      	ldr	r3, [pc, #324]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d02e      	beq.n	8001950 <ADC_ReadAllChannels+0x250>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc34 	bl	8000164 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f1c3 021f 	rsb	r2, r3, #31
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	494a      	ldr	r1, [pc, #296]	@ (8001a30 <ADC_ReadAllChannels+0x330>)
 8001908:	4618      	mov	r0, r3
 800190a:	f00b fabe 	bl	800ce8a <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fc26 	bl	8000164 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	f1c3 021f 	rsb	r2, r3, #31
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4949      	ldr	r1, [pc, #292]	@ (8001a48 <ADC_ReadAllChannels+0x348>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b fab0 	bl	800ce8a <strncat>
            if (dataPacketTx[0]) {
 800192a:	e011      	b.n	8001950 <ADC_ReadAllChannels+0x250>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 800192c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001930:	4a3d      	ldr	r2, [pc, #244]	@ (8001a28 <ADC_ReadAllChannels+0x328>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <ADC_ReadAllChannels+0x250>
 8001938:	4944      	ldr	r1, [pc, #272]	@ (8001a4c <ADC_ReadAllChannels+0x34c>)
 800193a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800193c:	f7ff fb5a 	bl	8000ff4 <__aeabi_fcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <ADC_ReadAllChannels+0x250>
            s_level_flags[i] = 0;
 8001946:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800194a:	4a37      	ldr	r2, [pc, #220]	@ (8001a28 <ADC_ReadAllChannels+0x328>)
 800194c:	2100      	movs	r1, #0
 800194e:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001950:	4934      	ldr	r1, [pc, #208]	@ (8001a24 <ADC_ReadAllChannels+0x324>)
 8001952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001954:	f7ff fb4e 	bl	8000ff4 <__aeabi_fcmplt>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00e      	beq.n	800197c <ADC_ReadAllChannels+0x27c>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 800195e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001962:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	2bff      	cmp	r3, #255	@ 0xff
 8001968:	d00d      	beq.n	8001986 <ADC_ReadAllChannels+0x286>
 800196a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800196e:	4a35      	ldr	r2, [pc, #212]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 8001970:	5cd2      	ldrb	r2, [r2, r3]
 8001972:	3201      	adds	r2, #1
 8001974:	b2d1      	uxtb	r1, r2
 8001976:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 8001978:	54d1      	strb	r1, [r2, r3]
 800197a:	e004      	b.n	8001986 <ADC_ReadAllChannels+0x286>
        } else {
            s_low_counts[i] = 0;
 800197c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001980:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 8001982:	2100      	movs	r1, #0
 8001984:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 8001986:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <ADC_ReadAllChannels+0x350>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f083 0301 	eor.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d012      	beq.n	80019bc <ADC_ReadAllChannels+0x2bc>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <ADC_ReadAllChannels+0x354>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10d      	bne.n	80019bc <ADC_ReadAllChannels+0x2bc>
 80019a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019a4:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d907      	bls.n	80019bc <ADC_ReadAllChannels+0x2bc>
                motorStatus = 0;
 80019ac:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <ADC_ReadAllChannels+0x354>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 80019b2:	2206      	movs	r2, #6
 80019b4:	2100      	movs	r1, #0
 80019b6:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <ADC_ReadAllChannels+0x344>)
 80019b8:	f00b fa52 	bl	800ce60 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 80019bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019c0:	3301      	adds	r3, #1
 80019c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80019c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	f67f aea6 	bls.w	800171c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 80019d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00e      	beq.n	80019f6 <ADC_ReadAllChannels+0x2f6>
 80019d8:	7a3b      	ldrb	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <ADC_ReadAllChannels+0x2f6>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fbbe 	bl	8000164 <strlen>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fc09 	bl	8002208 <LoRa_SendPacket>
    }
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800f638 	.word	0x0800f638
 8001a04:	2000027c 	.word	0x2000027c
 8001a08:	3e99999a 	.word	0x3e99999a
 8001a0c:	3f333333 	.word	0x3f333333
 8001a10:	457ff000 	.word	0x457ff000
 8001a14:	40533333 	.word	0x40533333
 8001a18:	404ccccd 	.word	0x404ccccd
 8001a1c:	20000264 	.word	0x20000264
 8001a20:	200002a4 	.word	0x200002a4
 8001a24:	3d4ccccd 	.word	0x3d4ccccd
 8001a28:	20000294 	.word	0x20000294
 8001a2c:	0800efe8 	.word	0x0800efe8
 8001a30:	200002bc 	.word	0x200002bc
 8001a34:	0800eff0 	.word	0x0800eff0
 8001a38:	0800eff8 	.word	0x0800eff8
 8001a3c:	0800f000 	.word	0x0800f000
 8001a40:	0800f008 	.word	0x0800f008
 8001a44:	2000029c 	.word	0x2000029c
 8001a48:	0800f010 	.word	0x0800f010
 8001a4c:	3f666666 	.word	0x3f666666
 8001a50:	2000057b 	.word	0x2000057b
 8001a54:	20000570 	.word	0x20000570

08001a58 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001a58:	b490      	push	{r4, r7}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	717b      	strb	r3, [r7, #5]
 8001a72:	4613      	mov	r3, r2
 8001a74:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	f023 030f 	bic.w	r3, r3, #15
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001a8e:	793b      	ldrb	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <map_nibble_ctrl+0x40>
 8001a94:	2208      	movs	r2, #8
 8001a96:	e000      	b.n	8001a9a <map_nibble_ctrl+0x42>
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001aa4:	797b      	ldrb	r3, [r7, #5]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <map_nibble_ctrl+0x56>
 8001aaa:	2204      	movs	r2, #4
 8001aac:	e000      	b.n	8001ab0 <map_nibble_ctrl+0x58>
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	b25a      	sxtb	r2, r3
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	73fb      	strb	r3, [r7, #15]
    return b;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc90      	pop	{r4, r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <expander_write>:

static void expander_write(uint8_t data)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001aea:	1dfa      	adds	r2, r7, #7
 8001aec:	2364      	movs	r3, #100	@ 0x64
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	214e      	movs	r1, #78	@ 0x4e
 8001af4:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <expander_write+0x24>)
 8001af6:	f005 fe1f 	bl	8007738 <HAL_I2C_Master_Transmit>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000350 	.word	0x20000350

08001b08 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ffe0 	bl	8001ae0 <expander_write>
    HAL_Delay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f004 fb3d 	bl	80061a0 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffd6 	bl	8001ae0 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f004 fb33 	bl	80061a0 <HAL_Delay>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	71bb      	strb	r3, [r7, #6]
 8001b50:	4613      	mov	r3, r2
 8001b52:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	79b9      	ldrb	r1, [r7, #6]
 8001b58:	79f8      	ldrb	r0, [r7, #7]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f7ff ff7c 	bl	8001a58 <map_nibble_ctrl>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffba 	bl	8001ae0 <expander_write>
    pulse_enable(x);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ffca 	bl	8001b08 <pulse_enable>
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001b82:	2308      	movs	r3, #8
 8001b84:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffa9 	bl	8001ae0 <expander_write>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f023 030f 	bic.w	r3, r3, #15
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ffc8 	bl	8001b42 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffc0 	bl	8001b42 <write4bits>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2101      	movs	r1, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ffae 	bl	8001b42 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffa6 	bl	8001b42 <write4bits>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <lcd_clear>:

void lcd_clear(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff ffc7 	bl	8001b96 <lcd_send_cmd>
    HAL_Delay(2);
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f004 fac9 	bl	80061a0 <HAL_Delay>
    lcd_send_cmd(0x80);
 8001c0e:	2080      	movs	r0, #128	@ 0x80
 8001c10:	f7ff ffc1 	bl	8001b96 <lcd_send_cmd>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	4613      	mov	r3, r2
 8001c26:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d901      	bls.n	8001c32 <lcd_put_cur+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <lcd_put_cur+0x40>)
 8001c36:	5cd2      	ldrb	r2, [r2, r3]
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ffa4 	bl	8001b96 <lcd_send_cmd>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0800f650 	.word	0x0800f650

08001c5c <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001c64:	e006      	b.n	8001c74 <lcd_send_string+0x18>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ffab 	bl	8001bca <lcd_send_data>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f4      	bne.n	8001c66 <lcd_send_string+0xa>
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <lcd_init>:

void lcd_init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001c8a:	2032      	movs	r0, #50	@ 0x32
 8001c8c:	f004 fa88 	bl	80061a0 <HAL_Delay>
    lcd_backlight_on();
 8001c90:	f7ff ff74 	bl	8001b7c <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2100      	movs	r1, #0
 8001c98:	2030      	movs	r0, #48	@ 0x30
 8001c9a:	f7ff ff52 	bl	8001b42 <write4bits>
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f004 fa7e 	bl	80061a0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2030      	movs	r0, #48	@ 0x30
 8001caa:	f7ff ff4a 	bl	8001b42 <write4bits>
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f004 fa76 	bl	80061a0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2030      	movs	r0, #48	@ 0x30
 8001cba:	f7ff ff42 	bl	8001b42 <write4bits>
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f004 fa6e 	bl	80061a0 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f7ff ff3a 	bl	8001b42 <write4bits>
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f004 fa66 	bl	80061a0 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001cd4:	2028      	movs	r0, #40	@ 0x28
 8001cd6:	f7ff ff5e 	bl	8001b96 <lcd_send_cmd>
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f004 fa60 	bl	80061a0 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001ce0:	2008      	movs	r0, #8
 8001ce2:	f7ff ff58 	bl	8001b96 <lcd_send_cmd>
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f004 fa5a 	bl	80061a0 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001cec:	f7ff ff87 	bl	8001bfe <lcd_clear>
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f004 fa55 	bl	80061a0 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001cf6:	2006      	movs	r0, #6
 8001cf8:	f7ff ff4d 	bl	8001b96 <lcd_send_cmd>
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f004 fa4f 	bl	80061a0 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001d02:	200c      	movs	r0, #12
 8001d04:	f7ff ff47 	bl	8001b96 <lcd_send_cmd>
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f004 fa49 	bl	80061a0 <HAL_Delay>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	f004 fa39 	bl	800618c <HAL_GetTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <led_write+0x30>)
 8001d34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <led_write+0x34>)
 8001d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d40:	79ba      	ldrb	r2, [r7, #6]
 8001d42:	4619      	mov	r1, r3
 8001d44:	f005 fb83 	bl	800744e <HAL_GPIO_WritePin>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000010 	.word	0x20000010

08001d58 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2101      	movs	r1, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ffda 	bl	8001d20 <led_write>
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffcc 	bl	8001d20 <led_write>
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <LED_Init>:

void LED_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001d96:	2210      	movs	r2, #16
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4815      	ldr	r0, [pc, #84]	@ (8001df0 <LED_Init+0x60>)
 8001d9c:	f00b f860 	bl	800ce60 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8001da0:	2204      	movs	r2, #4
 8001da2:	2100      	movs	r1, #0
 8001da4:	4813      	ldr	r0, [pc, #76]	@ (8001df4 <LED_Init+0x64>)
 8001da6:	f00b f85b 	bl	800ce60 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001daa:	2210      	movs	r2, #16
 8001dac:	2100      	movs	r1, #0
 8001dae:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <LED_Init+0x68>)
 8001db0:	f00b f856 	bl	800ce60 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	e012      	b.n	8001de0 <LED_Init+0x50>
        led_off((LedColor)i);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ffd8 	bl	8001d74 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <LED_Init+0x60>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <LED_Init+0x60>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	dde9      	ble.n	8001dba <LED_Init+0x2a>
    }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200002cc 	.word	0x200002cc
 8001df4:	200002dc 	.word	0x200002dc
 8001df8:	200002e0 	.word	0x200002e0

08001dfc <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001e02:	f7ff ff86 	bl	8001d12 <now_ms>
 8001e06:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	e064      	b.n	8001ed8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001e0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ee8 <LED_Task+0xec>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <LED_Task+0x24>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d00b      	beq.n	8001e36 <LED_Task+0x3a>
 8001e1e:	e015      	b.n	8001e4c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001e20:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <LED_Task+0xf0>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ffa0 	bl	8001d74 <led_off>
            break;
 8001e34:	e04d      	b.n	8001ed2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001e36:	4a2d      	ldr	r2, [pc, #180]	@ (8001eec <LED_Task+0xf0>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff87 	bl	8001d58 <led_on>
            break;
 8001e4a:	e042      	b.n	8001ed2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001e4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <LED_Task+0xec>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	885b      	ldrh	r3, [r3, #2]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <LED_Task+0x6c>
 8001e5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <LED_Task+0xec>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e66:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001e68:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <LED_Task+0xf4>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dc2b      	bgt.n	8001ed0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <LED_Task+0xf0>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <LED_Task+0xf0>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	460a      	mov	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001e96:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <LED_Task+0xf0>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <LED_Task+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff56 	bl	8001d58 <led_on>
 8001eac:	e004      	b.n	8001eb8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff5e 	bl	8001d74 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <LED_Task+0xec>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	885b      	ldrh	r3, [r3, #2]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	441a      	add	r2, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	@ (8001ef0 <LED_Task+0xf4>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001ed0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	dd97      	ble.n	8001e0e <LED_Task+0x12>
        }
    }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200002cc 	.word	0x200002cc
 8001eec:	200002dc 	.word	0x200002dc
 8001ef0:	200002e0 	.word	0x200002e0

08001ef4 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	e00d      	b.n	8001f1c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <LED_ClearAllIntents+0x3c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2100      	movs	r1, #0
 8001f06:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <LED_ClearAllIntents+0x3c>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	ddee      	ble.n	8001f00 <LED_ClearAllIntents+0xc>
    }
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200002cc 	.word	0x200002cc

08001f34 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	71bb      	strb	r3, [r7, #6]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d80b      	bhi.n	8001f64 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4908      	ldr	r1, [pc, #32]	@ (8001f70 <LED_SetIntent+0x3c>)
 8001f50:	79ba      	ldrb	r2, [r7, #6]
 8001f52:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <LED_SetIntent+0x3c>)
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	88ba      	ldrh	r2, [r7, #4]
 8001f60:	805a      	strh	r2, [r3, #2]
 8001f62:	e000      	b.n	8001f66 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f64:	bf00      	nop
}
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200002cc 	.word	0x200002cc

08001f74 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	733b      	strb	r3, [r7, #12]
 8001f9a:	79bb      	ldrb	r3, [r7, #6]
 8001f9c:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa4:	480a      	ldr	r0, [pc, #40]	@ (8001fd0 <LoRa_WriteReg+0x50>)
 8001fa6:	f005 fa52 	bl	800744e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001faa:	f107 010c 	add.w	r1, r7, #12
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <LoRa_WriteReg+0x54>)
 8001fb6:	f008 f9d9 	bl	800a36c <HAL_SPI_Transmit>
    NSS_HIGH();
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc0:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <LoRa_WriteReg+0x50>)
 8001fc2:	f005 fa44 	bl	800744e <HAL_GPIO_WritePin>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	200003b8 	.word	0x200003b8

08001fd8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ff6:	480f      	ldr	r0, [pc, #60]	@ (8002034 <LoRa_ReadReg+0x5c>)
 8001ff8:	f005 fa29 	bl	800744e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001ffc:	f107 010f 	add.w	r1, r7, #15
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	2201      	movs	r2, #1
 8002006:	480c      	ldr	r0, [pc, #48]	@ (8002038 <LoRa_ReadReg+0x60>)
 8002008:	f008 f9b0 	bl	800a36c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800200c:	f107 010e 	add.w	r1, r7, #14
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	2201      	movs	r2, #1
 8002016:	4808      	ldr	r0, [pc, #32]	@ (8002038 <LoRa_ReadReg+0x60>)
 8002018:	f008 faec 	bl	800a5f4 <HAL_SPI_Receive>
    NSS_HIGH();
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002022:	4804      	ldr	r0, [pc, #16]	@ (8002034 <LoRa_ReadReg+0x5c>)
 8002024:	f005 fa13 	bl	800744e <HAL_GPIO_WritePin>
    return rx;
 8002028:	7bbb      	ldrb	r3, [r7, #14]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40010800 	.word	0x40010800
 8002038:	200003b8 	.word	0x200003b8

0800203c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002052:	b2db      	uxtb	r3, r3
 8002054:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800205c:	480e      	ldr	r0, [pc, #56]	@ (8002098 <LoRa_WriteBuffer+0x5c>)
 800205e:	f005 f9f6 	bl	800744e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8002062:	f107 010f 	add.w	r1, r7, #15
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	2201      	movs	r2, #1
 800206c:	480b      	ldr	r0, [pc, #44]	@ (800209c <LoRa_WriteBuffer+0x60>)
 800206e:	f008 f97d 	bl	800a36c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	b29a      	uxth	r2, r3
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	4807      	ldr	r0, [pc, #28]	@ (800209c <LoRa_WriteBuffer+0x60>)
 800207e:	f008 f975 	bl	800a36c <HAL_SPI_Transmit>
    NSS_HIGH();
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <LoRa_WriteBuffer+0x5c>)
 800208a:	f005 f9e0 	bl	800744e <HAL_GPIO_WritePin>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40010800 	.word	0x40010800
 800209c:	200003b8 	.word	0x200003b8

080020a0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2140      	movs	r1, #64	@ 0x40
 80020a8:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <LoRa_Reset+0x28>)
 80020aa:	f005 f9d0 	bl	800744e <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020ae:	2002      	movs	r0, #2
 80020b0:	f004 f876 	bl	80061a0 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <LoRa_Reset+0x28>)
 80020ba:	f005 f9c8 	bl	800744e <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020be:	2002      	movs	r0, #2
 80020c0:	f004 f86e 	bl	80061a0 <HAL_Delay>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010c00 	.word	0x40010c00

080020cc <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	2000      	movs	r0, #0
 80020d8:	460a      	mov	r2, r1
 80020da:	4603      	mov	r3, r0
 80020dc:	0b55      	lsrs	r5, r2, #13
 80020de:	04d4      	lsls	r4, r2, #19
 80020e0:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <LoRa_SetFrequency+0x78>)
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe ffcb 	bl	8001084 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 80020f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	0c02      	lsrs	r2, r0, #16
 8002104:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002108:	0c0b      	lsrs	r3, r1, #16
 800210a:	b2d3      	uxtb	r3, r2
 800210c:	4619      	mov	r1, r3
 800210e:	2006      	movs	r0, #6
 8002110:	f7ff ff36 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	0a02      	lsrs	r2, r0, #8
 8002122:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002126:	0a0b      	lsrs	r3, r1, #8
 8002128:	b2d3      	uxtb	r3, r2
 800212a:	4619      	mov	r1, r3
 800212c:	2007      	movs	r0, #7
 800212e:	f7ff ff27 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8002132:	7a3b      	ldrb	r3, [r7, #8]
 8002134:	4619      	mov	r1, r3
 8002136:	2008      	movs	r0, #8
 8002138:	f7ff ff22 	bl	8001f80 <LoRa_WriteReg>
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bdb0      	pop	{r4, r5, r7, pc}
 8002144:	01e84800 	.word	0x01e84800

08002148 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800214c:	f7ff ffa8 	bl	80020a0 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8002150:	2100      	movs	r1, #0
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff ff14 	bl	8001f80 <LoRa_WriteReg>
    HAL_Delay(2);
 8002158:	2002      	movs	r0, #2
 800215a:	f004 f821 	bl	80061a0 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff ff0d 	bl	8001f80 <LoRa_WriteReg>
    HAL_Delay(2);
 8002166:	2002      	movs	r0, #2
 8002168:	f004 f81a 	bl	80061a0 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 800216c:	4819      	ldr	r0, [pc, #100]	@ (80021d4 <LoRa_Init+0x8c>)
 800216e:	f7ff ffad 	bl	80020cc <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8002172:	218f      	movs	r1, #143	@ 0x8f
 8002174:	2009      	movs	r0, #9
 8002176:	f7ff ff03 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800217a:	2187      	movs	r1, #135	@ 0x87
 800217c:	204d      	movs	r0, #77	@ 0x4d
 800217e:	f7ff feff 	bl	8001f80 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002182:	2123      	movs	r1, #35	@ 0x23
 8002184:	200c      	movs	r0, #12
 8002186:	f7ff fefb 	bl	8001f80 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800218a:	2172      	movs	r1, #114	@ 0x72
 800218c:	201d      	movs	r0, #29
 800218e:	f7ff fef7 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8002192:	2174      	movs	r1, #116	@ 0x74
 8002194:	201e      	movs	r0, #30
 8002196:	f7ff fef3 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800219a:	2104      	movs	r1, #4
 800219c:	2026      	movs	r0, #38	@ 0x26
 800219e:	f7ff feef 	bl	8001f80 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2020      	movs	r0, #32
 80021a6:	f7ff feeb 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80021aa:	2108      	movs	r1, #8
 80021ac:	2021      	movs	r0, #33	@ 0x21
 80021ae:	f7ff fee7 	bl	8001f80 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 80021b2:	2122      	movs	r1, #34	@ 0x22
 80021b4:	2039      	movs	r0, #57	@ 0x39
 80021b6:	f7ff fee3 	bl	8001f80 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 80021ba:	2100      	movs	r1, #0
 80021bc:	2040      	movs	r0, #64	@ 0x40
 80021be:	f7ff fedf 	bl	8001f80 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80021c2:	21ff      	movs	r1, #255	@ 0xff
 80021c4:	2012      	movs	r0, #18
 80021c6:	f7ff fedb 	bl	8001f80 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 80021ca:	f000 f80d 	bl	80021e8 <LoRa_SetRxContinuous>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	19cf0e40 	.word	0x19cf0e40

080021d8 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
 80021dc:	2181      	movs	r1, #129	@ 0x81
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fece 	bl	8001f80 <LoRa_WriteReg>
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	2185      	movs	r1, #133	@ 0x85
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fec6 	bl	8001f80 <LoRa_WriteReg>
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2183      	movs	r1, #131	@ 0x83
 80021fe:	2001      	movs	r0, #1
 8002200:	f7ff febe 	bl	8001f80 <LoRa_WriteReg>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002214:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <LoRa_SendPacket+0x98>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d03c      	beq.n	8002296 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 800221c:	f7ff ffdc 	bl	80021d8 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 8002220:	2100      	movs	r1, #0
 8002222:	200e      	movs	r0, #14
 8002224:	f7ff feac 	bl	8001f80 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8002228:	2100      	movs	r1, #0
 800222a:	200d      	movs	r0, #13
 800222c:	f7ff fea8 	bl	8001f80 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	461a      	mov	r2, r3
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff ff00 	bl	800203c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	4619      	mov	r1, r3
 8002240:	2022      	movs	r0, #34	@ 0x22
 8002242:	f7ff fe9d 	bl	8001f80 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002246:	21ff      	movs	r1, #255	@ 0xff
 8002248:	2012      	movs	r0, #18
 800224a:	f7ff fe99 	bl	8001f80 <LoRa_WriteReg>

    LoRa_SetTx();
 800224e:	f7ff ffd3 	bl	80021f8 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 8002252:	f003 ff9b 	bl	800618c <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002258:	e00e      	b.n	8002278 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 800225a:	f003 ff97 	bl	800618c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002268:	d906      	bls.n	8002278 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 800226a:	21ff      	movs	r1, #255	@ 0xff
 800226c:	2012      	movs	r0, #18
 800226e:	f7ff fe87 	bl	8001f80 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 8002272:	f7ff ffb9 	bl	80021e8 <LoRa_SetRxContinuous>
            return;
 8002276:	e00f      	b.n	8002298 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002278:	2012      	movs	r0, #18
 800227a:	f7ff fead 	bl	8001fd8 <LoRa_ReadReg>
 800227e:	4603      	mov	r3, r0
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0e8      	beq.n	800225a <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 8002288:	2108      	movs	r1, #8
 800228a:	2012      	movs	r0, #18
 800228c:	f7ff fe78 	bl	8001f80 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 8002290:	f7ff ffaa 	bl	80021e8 <LoRa_SetRxContinuous>
 8002294:	e000      	b.n	8002298 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002296:	bf00      	nop
}
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000018 	.word	0x20000018

080022a4 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4803      	ldr	r0, [pc, #12]	@ (80022bc <Debug_Print+0x18>)
 80022b0:	f003 fc58 	bl	8005b64 <UART_TransmitString>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000458 	.word	0x20000458

080022c0 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <HAL_ADC_ConvCpltCallback+0x8c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d138      	bne.n	8002344 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e02e      	b.n	8002336 <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 80022d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_ADC_ConvCpltCallback+0x90>)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fc95 	bl	8000c10 <__aeabi_i2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	491a      	ldr	r1, [pc, #104]	@ (8002354 <HAL_ADC_ConvCpltCallback+0x94>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fce4 	bl	8000cb8 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4919      	ldr	r1, [pc, #100]	@ (8002358 <HAL_ADC_ConvCpltCallback+0x98>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fd93 	bl	8000e20 <__aeabi_fdiv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	4916      	ldr	r1, [pc, #88]	@ (8002360 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fcd5 	bl	8000cb8 <__aeabi_fmul>
 800230e:	4603      	mov	r3, r0
 8002310:	461c      	mov	r4, r3
 8002312:	4914      	ldr	r1, [pc, #80]	@ (8002364 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002314:	68b8      	ldr	r0, [r7, #8]
 8002316:	f7fe fccf 	bl	8000cb8 <__aeabi_fmul>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	4620      	mov	r0, r4
 8002320:	f7fe fbc2 	bl	8000aa8 <__addsf3>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	4a0c      	ldr	r2, [pc, #48]	@ (800235c <HAL_ADC_ConvCpltCallback+0x9c>)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b06      	cmp	r3, #6
 800233a:	ddcd      	ble.n	80022d8 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 800233c:	4b07      	ldr	r3, [pc, #28]	@ (800235c <HAL_ADC_ConvCpltCallback+0x9c>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002342:	6013      	str	r3, [r2, #0]
    }
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}
 800234c:	40012400 	.word	0x40012400
 8002350:	200002f0 	.word	0x200002f0
 8002354:	40533333 	.word	0x40533333
 8002358:	457ff000 	.word	0x457ff000
 800235c:	20000300 	.word	0x20000300
 8002360:	3f666666 	.word	0x3f666666
 8002364:	3dcccccd 	.word	0x3dcccccd
 8002368:	2000031c 	.word	0x2000031c

0800236c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002372:	f003 feb3 	bl	80060dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002376:	f000 f891 	bl	800249c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800237a:	f000 facd 	bl	8002918 <MX_GPIO_Init>
  MX_ADC1_Init();
 800237e:	f000 f8e9 	bl	8002554 <MX_ADC1_Init>
  MX_RTC_Init();
 8002382:	f000 f9b7 	bl	80026f4 <MX_RTC_Init>
  MX_SPI1_Init();
 8002386:	f000 fa19 	bl	80027bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800238a:	f000 fa9b 	bl	80028c4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800238e:	f000 f983 	bl	8002698 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002392:	f000 fa49 	bl	8002828 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8002396:	4838      	ldr	r0, [pc, #224]	@ (8002478 <main+0x10c>)
 8002398:	f008 fd48 	bl	800ae2c <HAL_TIM_Base_Start>
  RF_Init();
 800239c:	f001 fb96 	bl	8003acc <RF_Init>
  lcd_init();
 80023a0:	f7ff fc71 	bl	8001c86 <lcd_init>
  ADC_Init(&hadc1);
 80023a4:	4835      	ldr	r0, [pc, #212]	@ (800247c <main+0x110>)
 80023a6:	f7ff f99b 	bl	80016e0 <ADC_Init>
  LoRa_Init();
 80023aa:	f7ff fecd 	bl	8002148 <LoRa_Init>
  Screen_Init();
 80023ae:	f002 fb31 	bl	8004a14 <Screen_Init>
  UART_Init();
 80023b2:	f003 fbad 	bl	8005b10 <UART_Init>
  Switches_Init();
 80023b6:	f003 fa8b 	bl	80058d0 <Switches_Init>
  Relay_Init();
 80023ba:	f001 fad7 	bl	800396c <Relay_Init>
  LED_Init();
 80023be:	f7ff fce7 	bl	8001d90 <LED_Init>


  ACS712_Init(&hadc1);
 80023c2:	482e      	ldr	r0, [pc, #184]	@ (800247c <main+0x110>)
 80023c4:	f7ff f85c 	bl	8001480 <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 80023c8:	f001 fc1c 	bl	8003c04 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 80023cc:	f001 fc6a 	bl	8003ca4 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 80023d0:	482b      	ldr	r0, [pc, #172]	@ (8002480 <main+0x114>)
 80023d2:	f7ff ff67 	bl	80022a4 <Debug_Print>
  ModelHandle_ResetAll();
 80023d6:	f000 fb6b 	bl	8002ab0 <ModelHandle_ResetAll>
  uint8_t lastSecond = 255;
 80023da:	23ff      	movs	r3, #255	@ 0xff
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 80023de:	f7ff f91d 	bl	800161c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 80023e2:	2118      	movs	r1, #24
 80023e4:	4827      	ldr	r0, [pc, #156]	@ (8002484 <main+0x118>)
 80023e6:	f001 fbb2 	bl	8003b4e <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 80023ea:	f002 ffa3 	bl	8005334 <Screen_HandleSwitches>
      Screen_Update();
 80023ee:	f002 f8a5 	bl	800453c <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 80023f2:	4925      	ldr	r1, [pc, #148]	@ (8002488 <main+0x11c>)
 80023f4:	4821      	ldr	r0, [pc, #132]	@ (800247c <main+0x110>)
 80023f6:	f7ff f983 	bl	8001700 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 80023fa:	f001 fc53 	bl	8003ca4 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 80023fe:	4b23      	ldr	r3, [pc, #140]	@ (800248c <main+0x120>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d025      	beq.n	8002454 <main+0xe8>
          lastSecond = time.seconds;
 8002408:	4b20      	ldr	r3, [pc, #128]	@ (800248c <main+0x120>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	71fb      	strb	r3, [r7, #7]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800240e:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <main+0x120>)
 8002410:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 8002412:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002414:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <main+0x120>)
 8002416:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002418:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 800241a:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <main+0x120>)
 800241c:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800241e:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 8002420:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <main+0x120>)
 8002422:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 8002424:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <main+0x120>)
 8002428:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 800242a:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 800242c:	4b17      	ldr	r3, [pc, #92]	@ (800248c <main+0x120>)
 800242e:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 8002430:	461d      	mov	r5, r3
                   time.dayofweek);
 8002432:	4b16      	ldr	r3, [pc, #88]	@ (800248c <main+0x120>)
 8002434:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 8002436:	9305      	str	r3, [sp, #20]
 8002438:	9504      	str	r5, [sp, #16]
 800243a:	9403      	str	r4, [sp, #12]
 800243c:	9002      	str	r0, [sp, #8]
 800243e:	9101      	str	r1, [sp, #4]
 8002440:	9200      	str	r2, [sp, #0]
 8002442:	4633      	mov	r3, r6
 8002444:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <main+0x124>)
 8002446:	2164      	movs	r1, #100	@ 0x64
 8002448:	4812      	ldr	r0, [pc, #72]	@ (8002494 <main+0x128>)
 800244a:	f00a fbe1 	bl	800cc10 <sniprintf>
          Debug_Print(dbg);
 800244e:	4811      	ldr	r0, [pc, #68]	@ (8002494 <main+0x128>)
 8002450:	f7ff ff28 	bl	80022a4 <Debug_Print>

      /* UART command handling */
//      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
//          printf("Got: %s\r\n", receivedUartPacket);
//      }
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8002454:	2140      	movs	r1, #64	@ 0x40
 8002456:	4810      	ldr	r0, [pc, #64]	@ (8002498 <main+0x12c>)
 8002458:	f003 fc30 	bl	8005cbc <UART_GetReceivedPacket>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <main+0xfc>
          UART_HandleCommand(receivedUartPacket);
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <main+0x12c>)
 8002464:	f003 fcc6 	bl	8005df4 <UART_HandleCommand>
      }


      /* Other tasks */
      ModelHandle_Process();
 8002468:	f001 fa4e 	bl	8003908 <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 800246c:	f7ff fcc6 	bl	8001dfc <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 8002470:	2014      	movs	r0, #20
 8002472:	f003 fe95 	bl	80061a0 <HAL_Delay>
  {
 8002476:	e7b2      	b.n	80023de <main+0x72>
 8002478:	20000410 	.word	0x20000410
 800247c:	20000320 	.word	0x20000320
 8002480:	0800f02c 	.word	0x0800f02c
 8002484:	001af5f8 	.word	0x001af5f8
 8002488:	200004a0 	.word	0x200004a0
 800248c:	20000604 	.word	0x20000604
 8002490:	0800f044 	.word	0x0800f044
 8002494:	2000050c 	.word	0x2000050c
 8002498:	200004cc 	.word	0x200004cc

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b094      	sub	sp, #80	@ 0x50
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024a6:	2228      	movs	r2, #40	@ 0x28
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00a fcd8 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024cc:	230a      	movs	r3, #10
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d0:	2301      	movs	r3, #1
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d4:	2310      	movs	r3, #16
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024d8:	2301      	movs	r3, #1
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024dc:	2302      	movs	r3, #2
 80024de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024e4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80024e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ee:	4618      	mov	r0, r3
 80024f0:	f006 fafe 	bl	8008af0 <HAL_RCC_OscConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80024fa:	f000 fa8b 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fe:	230f      	movs	r3, #15
 8002500:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800250a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f006 fd6a 	bl	8008ff4 <HAL_RCC_ClockConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002526:	f000 fa75 	bl	8002a14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800252a:	2303      	movs	r3, #3
 800252c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800252e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002532:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002534:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002538:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	4618      	mov	r0, r3
 800253e:	f006 fee7 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002548:	f000 fa64 	bl	8002a14 <Error_Handler>
  }
}
 800254c:	bf00      	nop
 800254e:	3750      	adds	r7, #80	@ 0x50
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002564:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002566:	4a4b      	ldr	r2, [pc, #300]	@ (8002694 <MX_ADC1_Init+0x140>)
 8002568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800256a:	4b49      	ldr	r3, [pc, #292]	@ (8002690 <MX_ADC1_Init+0x13c>)
 800256c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002570:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002574:	2200      	movs	r2, #0
 8002576:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002578:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <MX_ADC1_Init+0x13c>)
 800257a:	2200      	movs	r2, #0
 800257c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002580:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002586:	4b42      	ldr	r3, [pc, #264]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800258c:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <MX_ADC1_Init+0x13c>)
 800258e:	2208      	movs	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002592:	483f      	ldr	r0, [pc, #252]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002594:	f003 fe28 	bl	80061e8 <HAL_ADC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800259e:	f000 fa39 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4837      	ldr	r0, [pc, #220]	@ (8002690 <MX_ADC1_Init+0x13c>)
 80025b4:	f004 f9a4 	bl	8006900 <HAL_ADC_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80025be:	f000 fa29 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4830      	ldr	r0, [pc, #192]	@ (8002690 <MX_ADC1_Init+0x13c>)
 80025d0:	f004 f996 	bl	8006900 <HAL_ADC_ConfigChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80025da:	f000 fa1b 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025de:	2302      	movs	r3, #2
 80025e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025e2:	2303      	movs	r3, #3
 80025e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4829      	ldr	r0, [pc, #164]	@ (8002690 <MX_ADC1_Init+0x13c>)
 80025ec:	f004 f988 	bl	8006900 <HAL_ADC_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80025f6:	f000 fa0d 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80025fa:	2303      	movs	r3, #3
 80025fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025fe:	2304      	movs	r3, #4
 8002600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4822      	ldr	r0, [pc, #136]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002608:	f004 f97a 	bl	8006900 <HAL_ADC_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002612:	f000 f9ff 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002616:	2304      	movs	r3, #4
 8002618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800261a:	2305      	movs	r3, #5
 800261c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	481b      	ldr	r0, [pc, #108]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002624:	f004 f96c 	bl	8006900 <HAL_ADC_ConfigChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800262e:	f000 f9f1 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002632:	2305      	movs	r3, #5
 8002634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002636:	2306      	movs	r3, #6
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4814      	ldr	r0, [pc, #80]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002640:	f004 f95e 	bl	8006900 <HAL_ADC_ConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800264a:	f000 f9e3 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800264e:	2307      	movs	r3, #7
 8002650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002652:	2307      	movs	r3, #7
 8002654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4619      	mov	r1, r3
 800265a:	480d      	ldr	r0, [pc, #52]	@ (8002690 <MX_ADC1_Init+0x13c>)
 800265c:	f004 f950 	bl	8006900 <HAL_ADC_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002666:	f000 f9d5 	bl	8002a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800266a:	2306      	movs	r3, #6
 800266c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800266e:	2308      	movs	r3, #8
 8002670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4806      	ldr	r0, [pc, #24]	@ (8002690 <MX_ADC1_Init+0x13c>)
 8002678:	f004 f942 	bl	8006900 <HAL_ADC_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002682:	f000 f9c7 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000320 	.word	0x20000320
 8002694:	40012400 	.word	0x40012400

08002698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <MX_I2C2_Init+0x50>)
 800269e:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <MX_I2C2_Init+0x54>)
 80026a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026a2:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026a4:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <MX_I2C2_Init+0x58>)
 80026a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	@ (80026e8 <MX_I2C2_Init+0x50>)
 80026d6:	f004 feeb 	bl	80074b0 <HAL_I2C_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026e0:	f000 f998 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000350 	.word	0x20000350
 80026ec:	40005800 	.word	0x40005800
 80026f0:	000186a0 	.word	0x000186a0

080026f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
//
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	2100      	movs	r1, #0
 8002700:	460a      	mov	r2, r1
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	460a      	mov	r2, r1
 8002706:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800270c:	463b      	mov	r3, r7
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
//
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002714:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <MX_RTC_Init+0xc0>)
 8002716:	4a28      	ldr	r2, [pc, #160]	@ (80027b8 <MX_RTC_Init+0xc4>)
 8002718:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <MX_RTC_Init+0xc0>)
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <MX_RTC_Init+0xc0>)
 8002724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002728:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800272a:	4822      	ldr	r0, [pc, #136]	@ (80027b4 <MX_RTC_Init+0xc0>)
 800272c:	f006 ff5c 	bl	80095e8 <HAL_RTC_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002736:	f000 f96d 	bl	8002a14 <Error_Handler>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 800273a:	2313      	movs	r3, #19
 800273c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800273e:	2300      	movs	r3, #0
 8002740:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8002742:	2300      	movs	r3, #0
 8002744:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	4819      	ldr	r0, [pc, #100]	@ (80027b4 <MX_RTC_Init+0xc0>)
 8002750:	f006 ffd6 	bl	8009700 <HAL_RTC_SetTime>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800275a:	f000 f95b 	bl	8002a14 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800275e:	2301      	movs	r3, #1
 8002760:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002762:	2301      	movs	r3, #1
 8002764:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8002766:	2301      	movs	r3, #1
 8002768:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800276a:	2300      	movs	r3, #0
 800276c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	2201      	movs	r2, #1
 8002774:	4619      	mov	r1, r3
 8002776:	480f      	ldr	r0, [pc, #60]	@ (80027b4 <MX_RTC_Init+0xc0>)
 8002778:	f007 f932 	bl	80099e0 <HAL_RTC_SetDate>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002782:	f000 f947 	bl	8002a14 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8002786:	2313      	movs	r3, #19
 8002788:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800278a:	2300      	movs	r3, #0
 800278c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800278e:	2300      	movs	r3, #0
 8002790:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002796:	463b      	mov	r3, r7
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_RTC_Init+0xc0>)
 800279e:	f007 f9d5 	bl	8009b4c <HAL_RTC_SetAlarm_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80027a8:	f000 f934 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200003a4 	.word	0x200003a4
 80027b8:	40002800 	.word	0x40002800

080027bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027c2:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <MX_SPI1_Init+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027f0:	2218      	movs	r2, #24
 80027f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <MX_SPI1_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002800:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <MX_SPI1_Init+0x64>)
 8002808:	220a      	movs	r2, #10
 800280a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	@ (8002820 <MX_SPI1_Init+0x64>)
 800280e:	f007 fd29 	bl	800a264 <HAL_SPI_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002818:	f000 f8fc 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200003b8 	.word	0x200003b8
 8002824:	40013000 	.word	0x40013000

08002828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	463b      	mov	r3, r7
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002846:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <MX_TIM3_Init+0x98>)
 8002848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <MX_TIM3_Init+0x94>)
 800284c:	2200      	movs	r2, #0
 800284e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002850:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800285c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285e:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002864:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800286a:	4814      	ldr	r0, [pc, #80]	@ (80028bc <MX_TIM3_Init+0x94>)
 800286c:	f008 fa8f 	bl	800ad8e <HAL_TIM_Base_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002876:	f000 f8cd 	bl	8002a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	@ (80028bc <MX_TIM3_Init+0x94>)
 8002888:	f008 fb1a 	bl	800aec0 <HAL_TIM_ConfigClockSource>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002892:	f000 f8bf 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800289e:	463b      	mov	r3, r7
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	@ (80028bc <MX_TIM3_Init+0x94>)
 80028a4:	f008 fcd8 	bl	800b258 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028ae:	f000 f8b1 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000410 	.word	0x20000410
 80028c0:	40000400 	.word	0x40000400

080028c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	@ (8002914 <MX_USART1_UART_Init+0x50>)
 80028cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_USART1_UART_Init+0x4c>)
 80028fc:	f008 fd0a 	bl	800b314 <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002906:	f000 f885 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000458 	.word	0x20000458
 8002914:	40013800 	.word	0x40013800

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <MX_GPIO_Init+0xec>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <MX_GPIO_Init+0xec>)
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <MX_GPIO_Init+0xec>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <MX_GPIO_Init+0xec>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a2e      	ldr	r2, [pc, #184]	@ (8002a04 <MX_GPIO_Init+0xec>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <MX_GPIO_Init+0xec>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <MX_GPIO_Init+0xec>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <MX_GPIO_Init+0xec>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <MX_GPIO_Init+0xec>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002974:	2200      	movs	r2, #0
 8002976:	f240 3147 	movw	r1, #839	@ 0x347
 800297a:	4823      	ldr	r0, [pc, #140]	@ (8002a08 <MX_GPIO_Init+0xf0>)
 800297c:	f004 fd67 	bl	800744e <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002986:	4821      	ldr	r0, [pc, #132]	@ (8002a0c <MX_GPIO_Init+0xf4>)
 8002988:	f004 fd61 	bl	800744e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 800298c:	f240 3347 	movw	r3, #839	@ 0x347
 8002990:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2302      	movs	r3, #2
 800299c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	4818      	ldr	r0, [pc, #96]	@ (8002a08 <MX_GPIO_Init+0xf0>)
 80029a6:	f004 fbb7 	bl	8007118 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80029aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80029ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <MX_GPIO_Init+0xf8>)
 80029b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	4619      	mov	r1, r3
 80029be:	4812      	ldr	r0, [pc, #72]	@ (8002a08 <MX_GPIO_Init+0xf0>)
 80029c0:	f004 fbaa 	bl	8007118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80029c4:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80029c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	4619      	mov	r1, r3
 80029dc:	480b      	ldr	r0, [pc, #44]	@ (8002a0c <MX_GPIO_Init+0xf4>)
 80029de:	f004 fb9b 	bl	8007118 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4619      	mov	r1, r3
 80029f4:	4804      	ldr	r0, [pc, #16]	@ (8002a08 <MX_GPIO_Init+0xf0>)
 80029f6:	f004 fb8f 	bl	8007118 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80029fa:	bf00      	nop
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010c00 	.word	0x40010c00
 8002a0c:	40010800 	.word	0x40010800
 8002a10:	10310000 	.word	0x10310000

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <Error_Handler+0x8>

08002a20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a24:	f3bf 8f4f 	dsb	sy
}
 8002a28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <__NVIC_SystemReset+0x24>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a32:	4904      	ldr	r1, [pc, #16]	@ (8002a44 <__NVIC_SystemReset+0x24>)
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__NVIC_SystemReset+0x28>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3a:	f3bf 8f4f 	dsb	sy
}
 8002a3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <__NVIC_SystemReset+0x20>
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	05fa0004 	.word	0x05fa0004

08002a4c <now_ms>:
static uint32_t dryStopDeadline  = 0;

/* =========================
   Utilities
   ========================= */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	f003 fb9c 	bl	800618c <HAL_GetTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <clear_all_modes>:

static inline void clear_all_modes(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
    manualActive    = false;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <clear_all_modes+0x38>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <clear_all_modes+0x3c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <clear_all_modes+0x40>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <clear_all_modes+0x44>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <clear_all_modes+0x48>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    semiAutoActive  = false;
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <clear_all_modes+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    manualOverride  = false;
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <clear_all_modes+0x50>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000571 	.word	0x20000571
 8002a98:	20000572 	.word	0x20000572
 8002a9c:	20000573 	.word	0x20000573
 8002aa0:	20000574 	.word	0x20000574
 8002aa4:	20000575 	.word	0x20000575
 8002aa8:	20000576 	.word	0x20000576
 8002aac:	2000057b 	.word	0x2000057b

08002ab0 <ModelHandle_ResetAll>:

void ModelHandle_ResetAll(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    clear_all_modes();
 8002ab4:	f7ff ffd2 	bl	8002a5c <clear_all_modes>

    // Clear protections & timers
    senseDryRun = senseOverLoad = senseOverUnderVolt = senseMaxRunReached = false;
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <ModelHandle_ResetAll+0x68>)
 8002abc:	4611      	mov	r1, r2
 8002abe:	7019      	strb	r1, [r3, #0]
 8002ac0:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <ModelHandle_ResetAll+0x6c>)
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	7019      	strb	r1, [r3, #0]
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <ModelHandle_ResetAll+0x70>)
 8002ac8:	4611      	mov	r1, r2
 8002aca:	7019      	strb	r1, [r3, #0]
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <ModelHandle_ResetAll+0x74>)
 8002ace:	701a      	strb	r2, [r3, #0]
    maxRunTimerArmed = false;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <ModelHandle_ResetAll+0x78>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
    maxRunStartTick  = 0;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <ModelHandle_ResetAll+0x7c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    dryTimerArmed    = false;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <ModelHandle_ResetAll+0x80>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    dryStopDeadline  = 0;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <ModelHandle_ResetAll+0x84>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

    // Ensure ALL relays OFF (safety first at boot/reset)
    Relay_Set(1, false);
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2001      	movs	r0, #1
 8002aec:	f000 ff88 	bl	8003a00 <Relay_Set>
    Relay_Set(2, false);
 8002af0:	2100      	movs	r1, #0
 8002af2:	2002      	movs	r0, #2
 8002af4:	f000 ff84 	bl	8003a00 <Relay_Set>
    Relay_Set(3, false);
 8002af8:	2100      	movs	r1, #0
 8002afa:	2003      	movs	r0, #3
 8002afc:	f000 ff80 	bl	8003a00 <Relay_Set>
    motorStatus = 0;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <ModelHandle_ResetAll+0x88>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]

    LED_ClearAllIntents();
 8002b06:	f7ff f9f5 	bl	8001ef4 <LED_ClearAllIntents>
    LED_ApplyIntents();
 8002b0a:	f7ff fa33 	bl	8001f74 <LED_ApplyIntents>
    printf("Model Reset: All modes OFF, motor OFF\r\n");
 8002b0e:	480b      	ldr	r0, [pc, #44]	@ (8002b3c <ModelHandle_ResetAll+0x8c>)
 8002b10:	f00a f876 	bl	800cc00 <puts>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2000057a 	.word	0x2000057a
 8002b1c:	20000579 	.word	0x20000579
 8002b20:	20000578 	.word	0x20000578
 8002b24:	20000577 	.word	0x20000577
 8002b28:	2000057c 	.word	0x2000057c
 8002b2c:	20000580 	.word	0x20000580
 8002b30:	20000584 	.word	0x20000584
 8002b34:	20000588 	.word	0x20000588
 8002b38:	20000570 	.word	0x20000570
 8002b3c:	0800f078 	.word	0x0800f078

08002b40 <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002b56:	fb02 f103 	mul.w	r1, r2, r3
 8002b5a:	79ba      	ldrb	r2, [r7, #6]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <motor_apply>:

/* =========================
   Motor Control
   ========================= */
static inline void motor_apply(bool on)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f000 ff3e 	bl	8003a00 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <motor_apply+0x1e>
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	e000      	b.n	8002b90 <motor_apply+0x20>
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <motor_apply+0x64>)
 8002b92:	701a      	strb	r2, [r3, #0]

    if (on) {
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00f      	beq.n	8002bba <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <motor_apply+0x68>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d011      	beq.n	8002bcc <motor_apply+0x5c>
            maxRunTimerArmed = true;
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <motor_apply+0x68>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002bae:	f7ff ff4d 	bl	8002a4c <now_ms>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <motor_apply+0x6c>)
 8002bb6:	6013      	str	r3, [r2, #0]
        maxRunTimerArmed = false;
        // When motor turns OFF, cancel pending dry timer
        dryTimerArmed = false;
        dryStopDeadline = 0;
    }
}
 8002bb8:	e008      	b.n	8002bcc <motor_apply+0x5c>
        maxRunTimerArmed = false;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <motor_apply+0x68>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
        dryTimerArmed = false;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <motor_apply+0x70>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
        dryStopDeadline = 0;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <motor_apply+0x74>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000570 	.word	0x20000570
 8002bd8:	2000057c 	.word	0x2000057c
 8002bdc:	20000580 	.word	0x20000580
 8002be0:	20000584 	.word	0x20000584
 8002be4:	20000588 	.word	0x20000588

08002be8 <start_motor>:

static inline void start_motor(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    motor_apply(true);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff ffbf 	bl	8002b70 <motor_apply>
    printf("Relay1 -> %s\r\n", Relay_Get(1) ? "ON" : "OFF");
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 ff28 	bl	8003a48 <Relay_Get>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <start_motor+0x1a>
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <start_motor+0x28>)
 8002c00:	e000      	b.n	8002c04 <start_motor+0x1c>
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <start_motor+0x2c>)
 8002c04:	4619      	mov	r1, r3
 8002c06:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <start_motor+0x30>)
 8002c08:	f009 ff92 	bl	800cb30 <iprintf>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	0800f0a0 	.word	0x0800f0a0
 8002c14:	0800f0a4 	.word	0x0800f0a4
 8002c18:	0800f0a8 	.word	0x0800f0a8

08002c1c <stop_motor_keep_modes>:
static inline void stop_motor_keep_modes(void)  { motor_apply(false); }
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff ffa5 	bl	8002b70 <motor_apply>
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <ModelHandle_StopAllModesAndMotor>:

/* Hard OFF: stop and clear every mode flag (used for terminal OFF or external OFF) */
void ModelHandle_StopAllModesAndMotor(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    clear_all_modes();
 8002c30:	f7ff ff14 	bl	8002a5c <clear_all_modes>
    stop_motor_keep_modes();
 8002c34:	f7ff fff2 	bl	8002c1c <stop_motor_keep_modes>
    printf("ALL MODES OFF + MOTOR OFF\r\n");
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <ModelHandle_StopAllModesAndMotor+0x18>)
 8002c3a:	f009 ffe1 	bl	800cc00 <puts>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800f0b8 	.word	0x0800f0b8

08002c48 <isTankFull>:

/* =========================
   Tank Check (4/5 submerged)
   ========================= */
static bool isTankFull(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	e012      	b.n	8002c7e <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002c58:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <isTankFull+0x50>)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	490d      	ldr	r1, [pc, #52]	@ (8002c9c <isTankFull+0x54>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f9c4 	bl	8000ff4 <__aeabi_fcmplt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <isTankFull+0x30>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3301      	adds	r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	dde9      	ble.n	8002c58 <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	bfcc      	ite	gt
 8002c8a:	2301      	movgt	r3, #1
 8002c8c:	2300      	movle	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200004a0 	.word	0x200004a0
 8002c9c:	3dcccccd 	.word	0x3dcccccd

08002ca0 <ModelHandle_TriggerAuxBurst>:

/* ===== Aux burst public API ===== */
void ModelHandle_TriggerAuxBurst(uint16_t seconds)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
    if (seconds == 0) seconds = 1;
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <ModelHandle_TriggerAuxBurst+0x14>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	80fb      	strh	r3, [r7, #6]
    Relay_Set(2, true);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f000 fea2 	bl	8003a00 <Relay_Set>
    Relay_Set(3, true);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	f000 fe9e 	bl	8003a00 <Relay_Set>
    auxBurstActive     = true;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <ModelHandle_TriggerAuxBurst+0x48>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
    auxBurstDeadlineMs = HAL_GetTick() + ((uint32_t)seconds * 1000UL);
 8002cca:	f003 fa5f 	bl	800618c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <ModelHandle_TriggerAuxBurst+0x4c>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000590 	.word	0x20000590
 8002cec:	20000594 	.word	0x20000594

08002cf0 <dry_raw_is_dry>:

/* =========================
   DRY helpers (shared)
   ========================= */
static inline bool dry_raw_is_dry(void)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
    float v = adcData.voltages[0];
 8002cf6:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <dry_raw_is_dry+0x2c>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	607b      	str	r3, [r7, #4]
    if (DRY_ACTIVE_LOW) return (v < DRY_THRESHOLD_V);
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	461c      	mov	r4, r3
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <dry_raw_is_dry+0x30>)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe f976 	bl	8000ff4 <__aeabi_fcmplt>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <dry_raw_is_dry+0x22>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	461c      	mov	r4, r3
 8002d12:	b2e3      	uxtb	r3, r4
    else                return (v > DRY_THRESHOLD_V);
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}
 8002d1c:	200004a0 	.word	0x200004a0
 8002d20:	3dcccccd 	.word	0x3dcccccd

08002d24 <ModelHandle_ToggleManual>:

/* =========================
   Manual Mode
   ========================= */
void ModelHandle_ToggleManual(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
    // toggling manual should dominate and clear other modes
    bool will_on = !manualActive;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <ModelHandle_ToggleManual+0x5c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f083 0301 	eor.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	71fb      	strb	r3, [r7, #7]

    if (will_on) {
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <ModelHandle_ToggleManual+0x48>
        clear_all_modes();
 8002d50:	f7ff fe84 	bl	8002a5c <clear_all_modes>
        manualOverride = true;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <ModelHandle_ToggleManual+0x60>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
        manualActive   = true;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <ModelHandle_ToggleManual+0x5c>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
        start_motor();
 8002d60:	f7ff ff42 	bl	8002be8 <start_motor>
        printf("Manual ON\r\n");
 8002d64:	4808      	ldr	r0, [pc, #32]	@ (8002d88 <ModelHandle_ToggleManual+0x64>)
 8002d66:	f009 ff4b 	bl	800cc00 <puts>
    } else {
        ModelHandle_StopAllModesAndMotor(); // OFF should clear everything
        printf("Manual OFF\r\n");
    }
}
 8002d6a:	e004      	b.n	8002d76 <ModelHandle_ToggleManual+0x52>
        ModelHandle_StopAllModesAndMotor(); // OFF should clear everything
 8002d6c:	f7ff ff5e 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        printf("Manual OFF\r\n");
 8002d70:	4806      	ldr	r0, [pc, #24]	@ (8002d8c <ModelHandle_ToggleManual+0x68>)
 8002d72:	f009 ff45 	bl	800cc00 <puts>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000571 	.word	0x20000571
 8002d84:	2000057b 	.word	0x2000057b
 8002d88:	0800f0d4 	.word	0x0800f0d4
 8002d8c:	0800f0e0 	.word	0x0800f0e0

08002d90 <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
    printf("Manual Long Press → System Reset\r\n");
 8002d94:	4803      	ldr	r0, [pc, #12]	@ (8002da4 <ModelHandle_ManualLongPress+0x14>)
 8002d96:	f009 ff33 	bl	800cc00 <puts>
    HAL_Delay(100);
 8002d9a:	2064      	movs	r0, #100	@ 0x64
 8002d9c:	f003 fa00 	bl	80061a0 <HAL_Delay>
    NVIC_SystemReset();
 8002da0:	f7ff fe3e 	bl	8002a20 <__NVIC_SystemReset>
 8002da4:	0800f0ec 	.word	0x0800f0ec

08002da8 <ModelHandle_StopCountdown>:
static uint32_t cd_run_seconds      = 0;
static bool     cd_in_rest          = false;
static const uint32_t CD_REST_MS    = 3000;

void ModelHandle_StopCountdown(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
    stop_motor_keep_modes();
 8002dac:	f7ff ff36 	bl	8002c1c <stop_motor_keep_modes>
    countdownActive        = false;
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <ModelHandle_StopCountdown+0x30>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    countdownMode          = false;
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <ModelHandle_StopCountdown+0x34>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    countdownRemainingRuns = 0;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <ModelHandle_StopCountdown+0x38>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
    cd_run_seconds         = 0;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <ModelHandle_StopCountdown+0x3c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    cd_in_rest             = false;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <ModelHandle_StopCountdown+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    countdownDuration      = 0;
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <ModelHandle_StopCountdown+0x44>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000572 	.word	0x20000572
 8002ddc:	20000019 	.word	0x20000019
 8002de0:	200005d4 	.word	0x200005d4
 8002de4:	200005e0 	.word	0x200005e0
 8002de8:	200005e4 	.word	0x200005e4
 8002dec:	2000058c 	.word	0x2000058c

08002df0 <countdown_start_one_run>:
static void countdown_start_one_run(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    cd_deadline_ms    = now_ms() + (cd_run_seconds * 1000UL);
 8002df4:	f7ff fe2a 	bl	8002a4c <now_ms>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <countdown_start_one_run+0x34>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <countdown_start_one_run+0x38>)
 8002e0a:	6013      	str	r3, [r2, #0]
    countdownDuration = cd_run_seconds;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <countdown_start_one_run+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a06      	ldr	r2, [pc, #24]	@ (8002e2c <countdown_start_one_run+0x3c>)
 8002e12:	6013      	str	r3, [r2, #0]
    cd_in_rest        = false;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <countdown_start_one_run+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
    start_motor();
 8002e1a:	f7ff fee5 	bl	8002be8 <start_motor>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200005e0 	.word	0x200005e0
 8002e28:	200005d8 	.word	0x200005d8
 8002e2c:	2000058c 	.word	0x2000058c
 8002e30:	200005e4 	.word	0x200005e4

08002e34 <ModelHandle_StartCountdown>:
void ModelHandle_StartCountdown(uint32_t seconds_per_run, uint16_t repeats)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
    if (seconds_per_run == 0 || repeats == 0) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <ModelHandle_StartCountdown+0x18>
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <ModelHandle_StartCountdown+0x1e>
        ModelHandle_StopCountdown();
 8002e4c:	f7ff ffac 	bl	8002da8 <ModelHandle_StopCountdown>
        return;
 8002e50:	e012      	b.n	8002e78 <ModelHandle_StartCountdown+0x44>
    }

    clear_all_modes();
 8002e52:	f7ff fe03 	bl	8002a5c <clear_all_modes>
    countdownMode          = true;
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <ModelHandle_StartCountdown+0x4c>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
    countdownActive        = true;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <ModelHandle_StartCountdown+0x50>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    cd_run_seconds         = seconds_per_run;
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <ModelHandle_StartCountdown+0x54>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]
    countdownRemainingRuns = repeats;
 8002e68:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <ModelHandle_StartCountdown+0x58>)
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	8013      	strh	r3, [r2, #0]
    cd_in_rest             = false;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <ModelHandle_StartCountdown+0x5c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]

    countdown_start_one_run();
 8002e74:	f7ff ffbc 	bl	8002df0 <countdown_start_one_run>
}
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000019 	.word	0x20000019
 8002e84:	20000572 	.word	0x20000572
 8002e88:	200005e0 	.word	0x200005e0
 8002e8c:	200005d4 	.word	0x200005d4
 8002e90:	200005e4 	.word	0x200005e4

08002e94 <countdown_tick>:
static void countdown_tick(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8002e9a:	4b33      	ldr	r3, [pc, #204]	@ (8002f68 <countdown_tick+0xd4>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d156      	bne.n	8002f58 <countdown_tick+0xc4>
    uint32_t now = now_ms();
 8002eaa:	f7ff fdcf 	bl	8002a4c <now_ms>
 8002eae:	6078      	str	r0, [r7, #4]

    if (cd_in_rest) {
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f6c <countdown_tick+0xd8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <countdown_tick+0x46>
        if ((int32_t)(cd_rest_deadline_ms - now) <= 0) {
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <countdown_tick+0xdc>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dc4b      	bgt.n	8002f5c <countdown_tick+0xc8>
            if (countdownRemainingRuns > 0) {
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <countdown_tick+0xe0>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <countdown_tick+0x40>
                countdown_start_one_run();
 8002ece:	f7ff ff8f 	bl	8002df0 <countdown_start_one_run>
            } else {
                ModelHandle_StopCountdown();
            }
        }
        return;
 8002ed2:	e043      	b.n	8002f5c <countdown_tick+0xc8>
                ModelHandle_StopCountdown();
 8002ed4:	f7ff ff68 	bl	8002da8 <ModelHandle_StopCountdown>
        return;
 8002ed8:	e040      	b.n	8002f5c <countdown_tick+0xc8>
    }

    if ((int32_t)(cd_deadline_ms - now) > 0) {
 8002eda:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <countdown_tick+0xe4>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dd15      	ble.n	8002f12 <countdown_tick+0x7e>
        uint32_t rem_ms = cd_deadline_ms - now;
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <countdown_tick+0xe4>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	603b      	str	r3, [r7, #0]
        countdownDuration = (rem_ms + 999U) / 1000U;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002ef6:	4a21      	ldr	r2, [pc, #132]	@ (8002f7c <countdown_tick+0xe8>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <countdown_tick+0xec>)
 8002f00:	6013      	str	r3, [r2, #0]

        if (isTankFull()) {
 8002f02:	f7ff fea1 	bl	8002c48 <isTankFull>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d029      	beq.n	8002f60 <countdown_tick+0xcc>
            ModelHandle_StopAllModesAndMotor(); // terminal condition -> clear all modes
 8002f0c:	f7ff fe8e 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        }
        return;
 8002f10:	e026      	b.n	8002f60 <countdown_tick+0xcc>
    }

    stop_motor_keep_modes();
 8002f12:	f7ff fe83 	bl	8002c1c <stop_motor_keep_modes>
    if (countdownRemainingRuns > 0) countdownRemainingRuns--;
 8002f16:	4b17      	ldr	r3, [pc, #92]	@ (8002f74 <countdown_tick+0xe0>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <countdown_tick+0x9a>
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <countdown_tick+0xe0>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <countdown_tick+0xe0>)
 8002f2c:	801a      	strh	r2, [r3, #0]
    if (countdownRemainingRuns == 0) {
 8002f2e:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <countdown_tick+0xe0>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <countdown_tick+0xaa>
        ModelHandle_StopCountdown();
 8002f38:	f7ff ff36 	bl	8002da8 <ModelHandle_StopCountdown>
        return;
 8002f3c:	e011      	b.n	8002f62 <countdown_tick+0xce>
    }

    cd_in_rest          = true;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <countdown_tick+0xd8>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
    cd_rest_deadline_ms = now + CD_REST_MS;
 8002f44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a08      	ldr	r2, [pc, #32]	@ (8002f70 <countdown_tick+0xdc>)
 8002f4e:	6013      	str	r3, [r2, #0]
    countdownDuration   = 0;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <countdown_tick+0xec>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e004      	b.n	8002f62 <countdown_tick+0xce>
    if (!countdownActive) return;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <countdown_tick+0xce>
        return;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <countdown_tick+0xce>
        return;
 8002f60:	bf00      	nop
}
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000572 	.word	0x20000572
 8002f6c:	200005e4 	.word	0x200005e4
 8002f70:	200005dc 	.word	0x200005dc
 8002f74:	200005d4 	.word	0x200005d4
 8002f78:	200005d8 	.word	0x200005d8
 8002f7c:	10624dd3 	.word	0x10624dd3
 8002f80:	2000058c 	.word	0x2000058c

08002f84 <twist_arm_priming>:
        twist_dry_cnt = 0;
    }
    return (twist_dry_cnt >= 3);
}
static inline void twist_arm_priming(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
    if (TWIST_PRIME_SECONDS > 0) {
        twist_priming        = true;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <twist_arm_priming+0x20>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
        twist_prime_deadline = now_ms() + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 8002f8e:	f7ff fd5d 	bl	8002a4c <now_ms>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002f98:	3308      	adds	r3, #8
 8002f9a:	4a03      	ldr	r2, [pc, #12]	@ (8002fa8 <twist_arm_priming+0x24>)
 8002f9c:	6013      	str	r3, [r2, #0]
    } else {
        twist_priming        = false;
        twist_prime_deadline = 0;
    }
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200005ed 	.word	0x200005ed
 8002fa8:	200005f0 	.word	0x200005f0

08002fac <ModelHandle_StartTwist>:

void ModelHandle_StartTwist(uint16_t on_s, uint16_t off_s)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	80fb      	strh	r3, [r7, #6]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	80bb      	strh	r3, [r7, #4]
    clear_all_modes();
 8002fbc:	f7ff fd4e 	bl	8002a5c <clear_all_modes>
    if (on_s == 0)  on_s  = 1;
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <ModelHandle_StartTwist+0x1e>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	80fb      	strh	r3, [r7, #6]
    if (off_s == 0) off_s = 1;
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <ModelHandle_StartTwist+0x28>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	80bb      	strh	r3, [r7, #4]

    twistSettings.onDurationSeconds  = on_s;
 8002fd4:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <ModelHandle_StartTwist+0x74>)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	8053      	strh	r3, [r2, #2]
    twistSettings.offDurationSeconds = off_s;
 8002fda:	4a11      	ldr	r2, [pc, #68]	@ (8003020 <ModelHandle_StartTwist+0x74>)
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	8093      	strh	r3, [r2, #4]
    twistSettings.twistActive  = true;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <ModelHandle_StartTwist+0x74>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
    twistActive                = true;
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <ModelHandle_StartTwist+0x78>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
    twist_on_phase       = false;
 8002fec:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <ModelHandle_StartTwist+0x7c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
    twist_phase_deadline = now_ms() + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8002ff2:	f7ff fd2b 	bl	8002a4c <now_ms>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <ModelHandle_StartTwist+0x74>)
 8002ffa:	889b      	ldrh	r3, [r3, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	4a08      	ldr	r2, [pc, #32]	@ (800302c <ModelHandle_StartTwist+0x80>)
 800300a:	6013      	str	r3, [r2, #0]
    twist_dry_cnt        = 0;
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <ModelHandle_StartTwist+0x84>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    // Do NOT arm priming here; it's armed when ON actually starts.

    twist_arm_priming();
 8003012:	f7ff ffb7 	bl	8002f84 <twist_arm_priming>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000024 	.word	0x20000024
 8003024:	20000573 	.word	0x20000573
 8003028:	200005e5 	.word	0x200005e5
 800302c:	200005e8 	.word	0x200005e8
 8003030:	200005ec 	.word	0x200005ec

08003034 <ModelHandle_StopTwist>:

void ModelHandle_StopTwist(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
    twistSettings.twistActive = false;
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <ModelHandle_StopTwist+0x24>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
    twistActive = false;
 800303e:	4b07      	ldr	r3, [pc, #28]	@ (800305c <ModelHandle_StopTwist+0x28>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    twist_priming  = false;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <ModelHandle_StopTwist+0x2c>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
    twist_dry_cnt  = 0;
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <ModelHandle_StopTwist+0x30>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
    stop_motor_keep_modes();
 8003050:	f7ff fde4 	bl	8002c1c <stop_motor_keep_modes>
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000024 	.word	0x20000024
 800305c:	20000573 	.word	0x20000573
 8003060:	200005ed 	.word	0x200005ed
 8003064:	200005ec 	.word	0x200005ec

08003068 <twist_tick>:
// Call this from your main scheduler at ~10–100ms rate
// Call ~every 10–100 ms from your main loop/scheduler
void twist_tick(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
    // 0) Inert unless explicitly enabled by the user
    if (!twistSettings.twistActive) {
 800306e:	4b63      	ldr	r3, [pc, #396]	@ (80031fc <twist_tick+0x194>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	f083 0301 	eor.w	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 80b8 	bne.w	80031ee <twist_tick+0x186>
        // Defensive: never force motor here—other modes own it.
        return;
    }

    uint32_t tnow = now_ms();
 800307e:	f7ff fce5 	bl	8002a4c <now_ms>
 8003082:	6078      	str	r0, [r7, #4]

    // 1) Global safety gates (if your project uses these flags)
    //    If any protection is latched, keep Twist "enabled" but stop driving the motor.
    if (senseOverLoad || senseOverUnderVolt || senseMaxRunReached) {
 8003084:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <twist_tick+0x198>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <twist_tick+0x3a>
 800308e:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <twist_tick+0x19c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <twist_tick+0x3a>
 8003098:	4b5b      	ldr	r3, [pc, #364]	@ (8003208 <twist_tick+0x1a0>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <twist_tick+0x40>
        stop_motor_keep_modes();   // do not clear modes; just stop motor output
 80030a2:	f7ff fdbb 	bl	8002c1c <stop_motor_keep_modes>
        return;
 80030a6:	e0a5      	b.n	80031f4 <twist_tick+0x18c>
    }

    // 2) Priming window logic:
    //    When we first enter an ON phase we allow a short "prime" even if the sensor reads dry,
    //    to build initial pressure. This DOES NOT move the phase deadline.
    if (twist_priming) {
 80030a8:	4b58      	ldr	r3, [pc, #352]	@ (800320c <twist_tick+0x1a4>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d014      	beq.n	80030da <twist_tick+0x72>
        if ((int32_t)(twist_prime_deadline - tnow) > 0) {
 80030b0:	4b57      	ldr	r3, [pc, #348]	@ (8003210 <twist_tick+0x1a8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dd0b      	ble.n	80030d4 <twist_tick+0x6c>
            if (!Motor_GetStatus()) start_motor();   // stay ON during priming
 80030bc:	f000 fc14 	bl	80038e8 <Motor_GetStatus>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8092 	beq.w	80031f2 <twist_tick+0x18a>
 80030ce:	f7ff fd8b 	bl	8002be8 <start_motor>
            return;                                  // do not touch phase deadline
 80030d2:	e08e      	b.n	80031f2 <twist_tick+0x18a>
        } else {
            twist_priming = false;                   // priming finished
 80030d4:	4b4d      	ldr	r3, [pc, #308]	@ (800320c <twist_tick+0x1a4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]

    // 3) While in ON phase, you may optionally gate on "dry" (if your design wants this).
    //    We DON’T toggle the motor from ADC elsewhere; we only *observe* a dry flag here.
    //    If you don’t want dry handling in Twist, you can remove this block.
#if defined(DRY_STOP_DELAY_SECONDS) && (DRY_STOP_DELAY_SECONDS > 0)
    if (twist_on_phase) {
 80030da:	4b4e      	ldr	r3, [pc, #312]	@ (8003214 <twist_tick+0x1ac>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02a      	beq.n	8003138 <twist_tick+0xd0>
        // If a dry condition is being signaled by the sensing layer, count it.
        if (senseDryRun) {
 80030e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003218 <twist_tick+0x1b0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <twist_tick+0x9a>
            if (twist_dry_cnt < 0xFF) twist_dry_cnt++;
 80030ec:	4b4b      	ldr	r3, [pc, #300]	@ (800321c <twist_tick+0x1b4>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2bff      	cmp	r3, #255	@ 0xff
 80030f2:	d009      	beq.n	8003108 <twist_tick+0xa0>
 80030f4:	4b49      	ldr	r3, [pc, #292]	@ (800321c <twist_tick+0x1b4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b47      	ldr	r3, [pc, #284]	@ (800321c <twist_tick+0x1b4>)
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e002      	b.n	8003108 <twist_tick+0xa0>
        } else {
            twist_dry_cnt = 0;
 8003102:	4b46      	ldr	r3, [pc, #280]	@ (800321c <twist_tick+0x1b4>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
        }

        // If dry persisted long enough, end the ON phase early and jump to OFF.
        if (twist_dry_cnt >= (uint8_t)DRY_STOP_DELAY_SECONDS) {
 8003108:	4b44      	ldr	r3, [pc, #272]	@ (800321c <twist_tick+0x1b4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b1d      	cmp	r3, #29
 800310e:	d913      	bls.n	8003138 <twist_tick+0xd0>
            stop_motor_keep_modes();
 8003110:	f7ff fd84 	bl	8002c1c <stop_motor_keep_modes>
            twist_on_phase       = false;
 8003114:	4b3f      	ldr	r3, [pc, #252]	@ (8003214 <twist_tick+0x1ac>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
            twist_dry_cnt        = 0;
 800311a:	4b40      	ldr	r3, [pc, #256]	@ (800321c <twist_tick+0x1b4>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003120:	4b36      	ldr	r3, [pc, #216]	@ (80031fc <twist_tick+0x194>)
 8003122:	889b      	ldrh	r3, [r3, #4]
 8003124:	461a      	mov	r2, r3
 8003126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	4a3b      	ldr	r2, [pc, #236]	@ (8003220 <twist_tick+0x1b8>)
 8003134:	6013      	str	r3, [r2, #0]
            return;
 8003136:	e05d      	b.n	80031f4 <twist_tick+0x18c>
        }
    }
#endif

    // 4) Phase timing: flip when deadline elapses (signed compare prevents wrap issues).
    if ((int32_t)(twist_phase_deadline - tnow) <= 0) {
 8003138:	4b39      	ldr	r3, [pc, #228]	@ (8003220 <twist_tick+0x1b8>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	dc3d      	bgt.n	80031c0 <twist_tick+0x158>
        twist_on_phase = !twist_on_phase;
 8003144:	4b33      	ldr	r3, [pc, #204]	@ (8003214 <twist_tick+0x1ac>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f083 0301 	eor.w	r3, r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <twist_tick+0x1ac>)
 8003160:	701a      	strb	r2, [r3, #0]

        if (twist_on_phase) {
 8003162:	4b2c      	ldr	r3, [pc, #176]	@ (8003214 <twist_tick+0x1ac>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <twist_tick+0x136>
            // Entering ON phase
            twist_dry_cnt        = 0;
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <twist_tick+0x1b4>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
            start_motor();
 8003170:	f7ff fd3a 	bl	8002be8 <start_motor>
            twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 8003174:	4b21      	ldr	r3, [pc, #132]	@ (80031fc <twist_tick+0x194>)
 8003176:	885b      	ldrh	r3, [r3, #2]
 8003178:	461a      	mov	r2, r3
 800317a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <twist_tick+0x1b8>)
 8003188:	6013      	str	r3, [r2, #0]

            // Arm priming exactly when ON begins (once per ON phase).
#if defined(TWIST_PRIME_SECONDS) && (TWIST_PRIME_SECONDS > 0)
            twist_priming        = true;
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <twist_tick+0x1a4>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
            twist_prime_deadline = tnow + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8003196:	3308      	adds	r3, #8
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <twist_tick+0x1a8>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e02a      	b.n	80031f4 <twist_tick+0x18c>
#endif
        } else {
            // Entering OFF phase
            stop_motor_keep_modes();
 800319e:	f7ff fd3d 	bl	8002c1c <stop_motor_keep_modes>
            twist_dry_cnt        = 0;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <twist_tick+0x1b4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 80031a8:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <twist_tick+0x194>)
 80031aa:	889b      	ldrh	r3, [r3, #4]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b2:	fb03 f202 	mul.w	r2, r3, r2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <twist_tick+0x1b8>)
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e019      	b.n	80031f4 <twist_tick+0x18c>
        }
    } else {
        // 5) Maintain current phase outputs until the deadline arrives
        if (twist_on_phase) {
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <twist_tick+0x1ac>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <twist_tick+0x176>
            if (!Motor_GetStatus()) start_motor();
 80031c8:	f000 fb8e 	bl	80038e8 <Motor_GetStatus>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f083 0301 	eor.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <twist_tick+0x18c>
 80031d8:	f7ff fd06 	bl	8002be8 <start_motor>
 80031dc:	e00a      	b.n	80031f4 <twist_tick+0x18c>
        } else {
            if (Motor_GetStatus())  stop_motor_keep_modes();
 80031de:	f000 fb83 	bl	80038e8 <Motor_GetStatus>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <twist_tick+0x18c>
 80031e8:	f7ff fd18 	bl	8002c1c <stop_motor_keep_modes>
 80031ec:	e002      	b.n	80031f4 <twist_tick+0x18c>
        return;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <twist_tick+0x18c>
            return;                                  // do not touch phase deadline
 80031f2:	bf00      	nop
        }
    }
}
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000024 	.word	0x20000024
 8003200:	20000578 	.word	0x20000578
 8003204:	20000579 	.word	0x20000579
 8003208:	2000057a 	.word	0x2000057a
 800320c:	200005ed 	.word	0x200005ed
 8003210:	200005f0 	.word	0x200005f0
 8003214:	200005e5 	.word	0x200005e5
 8003218:	20000577 	.word	0x20000577
 800321c:	200005ec 	.word	0x200005ec
 8003220:	200005e8 	.word	0x200005e8

08003224 <ModelHandle_StartSearch>:
static SearchState search_state = SEARCH_GAP_WAIT;
static uint32_t    search_deadline_ms = 0;
static uint8_t     search_dry_cnt = 0;

void ModelHandle_StartSearch(uint16_t gap_s, uint16_t probe_s)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	460a      	mov	r2, r1
 800322e:	80fb      	strh	r3, [r7, #6]
 8003230:	4613      	mov	r3, r2
 8003232:	80bb      	strh	r3, [r7, #4]
    clear_all_modes();
 8003234:	f7ff fc12 	bl	8002a5c <clear_all_modes>

    if (gap_s   == 0) gap_s   = 5;
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <ModelHandle_StartSearch+0x1e>
 800323e:	2305      	movs	r3, #5
 8003240:	80fb      	strh	r3, [r7, #6]
    if (probe_s == 0) probe_s = 3;
 8003242:	88bb      	ldrh	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <ModelHandle_StartSearch+0x28>
 8003248:	2303      	movs	r3, #3
 800324a:	80bb      	strh	r3, [r7, #4]

    searchSettings.testingGapSeconds = gap_s;
 800324c:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <ModelHandle_StartSearch+0x74>)
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	8053      	strh	r3, [r2, #2]
    searchSettings.dryRunTimeSeconds = probe_s;
 8003252:	4a11      	ldr	r2, [pc, #68]	@ (8003298 <ModelHandle_StartSearch+0x74>)
 8003254:	88bb      	ldrh	r3, [r7, #4]
 8003256:	8093      	strh	r3, [r2, #4]

    searchSettings.searchActive = true;
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <ModelHandle_StartSearch+0x74>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
    searchActive = true;
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <ModelHandle_StartSearch+0x78>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]

    stop_motor_keep_modes();
 8003264:	f7ff fcda 	bl	8002c1c <stop_motor_keep_modes>
    search_state       = SEARCH_GAP_WAIT;
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <ModelHandle_StartSearch+0x7c>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
    search_deadline_ms = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800326e:	f7ff fbed 	bl	8002a4c <now_ms>
 8003272:	4602      	mov	r2, r0
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <ModelHandle_StartSearch+0x74>)
 8003276:	885b      	ldrh	r3, [r3, #2]
 8003278:	4619      	mov	r1, r3
 800327a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <ModelHandle_StartSearch+0x80>)
 8003286:	6013      	str	r3, [r2, #0]
    search_dry_cnt     = 0;
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <ModelHandle_StartSearch+0x84>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	2000001c 	.word	0x2000001c
 800329c:	20000574 	.word	0x20000574
 80032a0:	200005f4 	.word	0x200005f4
 80032a4:	200005f8 	.word	0x200005f8
 80032a8:	200005fc 	.word	0x200005fc

080032ac <ModelHandle_StopSearch>:
void ModelHandle_StopSearch(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
    searchSettings.searchActive = false;
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <ModelHandle_StopSearch+0x20>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
    searchActive = false;
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <ModelHandle_StopSearch+0x24>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
    search_state = SEARCH_GAP_WAIT;
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <ModelHandle_StopSearch+0x28>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
    stop_motor_keep_modes();
 80032c2:	f7ff fcab 	bl	8002c1c <stop_motor_keep_modes>
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000001c 	.word	0x2000001c
 80032d0:	20000574 	.word	0x20000574
 80032d4:	200005f4 	.word	0x200005f4

080032d8 <isDryDebounced_RUN>:
static inline bool isDryDebounced_RUN(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
    if (dry_raw_is_dry()) {
 80032dc:	f7ff fd08 	bl	8002cf0 <dry_raw_is_dry>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <isDryDebounced_RUN+0x24>
        if (search_dry_cnt < 255) search_dry_cnt++;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <isDryDebounced_RUN+0x3c>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2bff      	cmp	r3, #255	@ 0xff
 80032ec:	d009      	beq.n	8003302 <isDryDebounced_RUN+0x2a>
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <isDryDebounced_RUN+0x3c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <isDryDebounced_RUN+0x3c>)
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e002      	b.n	8003302 <isDryDebounced_RUN+0x2a>
    } else {
        search_dry_cnt = 0;
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <isDryDebounced_RUN+0x3c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
    }
    return (search_dry_cnt >= 3);
 8003302:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <isDryDebounced_RUN+0x3c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	bf8c      	ite	hi
 800330a:	2301      	movhi	r3, #1
 800330c:	2300      	movls	r3, #0
 800330e:	b2db      	uxtb	r3, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200005fc 	.word	0x200005fc

08003318 <search_tick>:
static void search_tick(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 800331e:	4b44      	ldr	r3, [pc, #272]	@ (8003430 <search_tick+0x118>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f083 0301 	eor.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <search_tick+0x1c>
 800332c:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <search_tick+0x11c>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e07a      	b.n	800342a <search_tick+0x112>
    searchActive = true;
 8003334:	4b3f      	ldr	r3, [pc, #252]	@ (8003434 <search_tick+0x11c>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]

    uint32_t nowt = now_ms();
 800333a:	f7ff fb87 	bl	8002a4c <now_ms>
 800333e:	6078      	str	r0, [r7, #4]

    if (isTankFull()) {
 8003340:	f7ff fc82 	bl	8002c48 <isTankFull>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <search_tick+0x38>
        ModelHandle_StopAllModesAndMotor();
 800334a:	f7ff fc6f 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        return;
 800334e:	e06c      	b.n	800342a <search_tick+0x112>
    }

    switch (search_state)
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <search_tick+0x120>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d050      	beq.n	80033fa <search_tick+0xe2>
 8003358:	2b02      	cmp	r3, #2
 800335a:	dc66      	bgt.n	800342a <search_tick+0x112>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <search_tick+0x4e>
 8003360:	2b01      	cmp	r3, #1
 8003362:	d021      	beq.n	80033a8 <search_tick+0x90>
 8003364:	e061      	b.n	800342a <search_tick+0x112>
    {
        case SEARCH_GAP_WAIT:
            if (Motor_GetStatus()) stop_motor_keep_modes();
 8003366:	f000 fabf 	bl	80038e8 <Motor_GetStatus>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <search_tick+0x5c>
 8003370:	f7ff fc54 	bl	8002c1c <stop_motor_keep_modes>
            if ((int32_t)(search_deadline_ms - nowt) <= 0) {
 8003374:	4b31      	ldr	r3, [pc, #196]	@ (800343c <search_tick+0x124>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	dc4f      	bgt.n	8003420 <search_tick+0x108>
                start_motor(); // probe ON
 8003380:	f7ff fc32 	bl	8002be8 <start_motor>
                search_state       = SEARCH_PROBE;
 8003384:	4b2c      	ldr	r3, [pc, #176]	@ (8003438 <search_tick+0x120>)
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = nowt + (uint32_t)searchSettings.dryRunTimeSeconds * 1000UL;
 800338a:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <search_tick+0x118>)
 800338c:	889b      	ldrh	r3, [r3, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003394:	fb03 f202 	mul.w	r2, r3, r2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	4a27      	ldr	r2, [pc, #156]	@ (800343c <search_tick+0x124>)
 800339e:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 80033a0:	4b27      	ldr	r3, [pc, #156]	@ (8003440 <search_tick+0x128>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80033a6:	e03b      	b.n	8003420 <search_tick+0x108>

        case SEARCH_PROBE:
            if (!dry_raw_is_dry()) {
 80033a8:	f7ff fca2 	bl	8002cf0 <dry_raw_is_dry>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <search_tick+0xb4>
                // Water detected → RUN
                search_state       = SEARCH_RUN;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <search_tick+0x120>)
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = 0;
 80033be:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <search_tick+0x124>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
                search_dry_cnt     = 0;
 80033c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <search_tick+0x128>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
                break;
 80033ca:	e02e      	b.n	800342a <search_tick+0x112>
            }
            if ((int32_t)(search_deadline_ms - nowt) <= 0) {
 80033cc:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <search_tick+0x124>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dc25      	bgt.n	8003424 <search_tick+0x10c>
                // Still dry after probe
                stop_motor_keep_modes();
 80033d8:	f7ff fc20 	bl	8002c1c <stop_motor_keep_modes>
                search_state       = SEARCH_GAP_WAIT;
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <search_tick+0x120>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = nowt + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 80033e2:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <search_tick+0x118>)
 80033e4:	885b      	ldrh	r3, [r3, #2]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ec:	fb03 f202 	mul.w	r2, r3, r2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a11      	ldr	r2, [pc, #68]	@ (800343c <search_tick+0x124>)
 80033f6:	6013      	str	r3, [r2, #0]
            }
            break;
 80033f8:	e014      	b.n	8003424 <search_tick+0x10c>

        case SEARCH_RUN:
            if (isDryDebounced_RUN()) {
 80033fa:	f7ff ff6d 	bl	80032d8 <isDryDebounced_RUN>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <search_tick+0xf2>
                ModelHandle_StopAllModesAndMotor(); // terminal dry -> clear modes
 8003404:	f7ff fc12 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
                break;
 8003408:	e00f      	b.n	800342a <search_tick+0x112>
            }
            if (!Motor_GetStatus()) start_motor(); // keep asserted
 800340a:	f000 fa6d 	bl	80038e8 <Motor_GetStatus>
 800340e:	4603      	mov	r3, r0
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <search_tick+0x110>
 800341a:	f7ff fbe5 	bl	8002be8 <start_motor>
            break;
 800341e:	e003      	b.n	8003428 <search_tick+0x110>
            break;
 8003420:	bf00      	nop
 8003422:	e002      	b.n	800342a <search_tick+0x112>
            break;
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <search_tick+0x112>
            break;
 8003428:	bf00      	nop
    }
}
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	2000001c 	.word	0x2000001c
 8003434:	20000574 	.word	0x20000574
 8003438:	200005f4 	.word	0x200005f4
 800343c:	200005f8 	.word	0x200005f8
 8003440:	200005fc 	.word	0x200005fc

08003444 <seconds_since_midnight>:

/* =======================
   TIMER (RTC based)
   ======================= */
static uint32_t seconds_since_midnight(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
    RTC_GetTimeDate();
 8003448:	f000 fc2c 	bl	8003ca4 <RTC_GetTimeDate>
    return ((uint32_t)time.hour * 3600UL) +
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <seconds_since_midnight+0x30>)
 800344e:	789b      	ldrb	r3, [r3, #2]
 8003450:	461a      	mov	r2, r3
 8003452:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003456:	fb03 f202 	mul.w	r2, r3, r2
           ((uint32_t)time.minutes * 60UL) +
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <seconds_since_midnight+0x30>)
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	4619      	mov	r1, r3
 8003460:	460b      	mov	r3, r1
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a5b      	subs	r3, r3, r1
 8003466:	009b      	lsls	r3, r3, #2
    return ((uint32_t)time.hour * 3600UL) +
 8003468:	4413      	add	r3, r2
           (uint32_t)time.seconds;
 800346a:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <seconds_since_midnight+0x30>)
 800346c:	7812      	ldrb	r2, [r2, #0]
           ((uint32_t)time.minutes * 60UL) +
 800346e:	4413      	add	r3, r2
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000604 	.word	0x20000604

08003478 <timer_tick>:
static void timer_tick(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
    /* NEW: Timer yields to all other active modes */
    if (manualOverride && manualActive) { timerActive = false; return; }
 800347e:	4b58      	ldr	r3, [pc, #352]	@ (80035e0 <timer_tick+0x168>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <timer_tick+0x22>
 8003488:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <timer_tick+0x16c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <timer_tick+0x22>
 8003492:	4b55      	ldr	r3, [pc, #340]	@ (80035e8 <timer_tick+0x170>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e09f      	b.n	80035da <timer_tick+0x162>
    if (countdownActive || twistSettings.twistActive ||
 800349a:	4b54      	ldr	r3, [pc, #336]	@ (80035ec <timer_tick+0x174>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10c      	bne.n	80034be <timer_tick+0x46>
 80034a4:	4b52      	ldr	r3, [pc, #328]	@ (80035f0 <timer_tick+0x178>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <timer_tick+0x46>
        searchSettings.searchActive || semiAutoActive) {
 80034ac:	4b51      	ldr	r3, [pc, #324]	@ (80035f4 <timer_tick+0x17c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
    if (countdownActive || twistSettings.twistActive ||
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <timer_tick+0x46>
        searchSettings.searchActive || semiAutoActive) {
 80034b4:	4b50      	ldr	r3, [pc, #320]	@ (80035f8 <timer_tick+0x180>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <timer_tick+0x4e>
        timerActive = false;
 80034be:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <timer_tick+0x170>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
        return;
 80034c4:	e089      	b.n	80035da <timer_tick+0x162>
    }

    timerActive = false;
 80034c6:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <timer_tick+0x170>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 80034cc:	f7ff ffba 	bl	8003444 <seconds_since_midnight>
 80034d0:	60b8      	str	r0, [r7, #8]

    static uint32_t timerRetryDeadline = 0;
    bool anySlotActive = false;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < 3; i++) {
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e06c      	b.n	80035b6 <timer_tick+0x13e>
        TimerSlot* s = &timerSlots[i];
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a45      	ldr	r2, [pc, #276]	@ (80035fc <timer_tick+0x184>)
 80034e8:	4413      	add	r3, r2
 80034ea:	607b      	str	r3, [r7, #4]
        if (!s->active) continue;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d159      	bne.n	80035ae <timer_tick+0x136>
        anySlotActive = true;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d812      	bhi.n	8003530 <timer_tick+0xb8>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d306      	bcc.n	8003522 <timer_tick+0xaa>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d201      	bcs.n	8003522 <timer_tick+0xaa>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <timer_tick+0xac>
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e011      	b.n	8003554 <timer_tick+0xdc>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d204      	bcs.n	8003544 <timer_tick+0xcc>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d201      	bcs.n	8003548 <timer_tick+0xd0>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <timer_tick+0xd2>
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
        }

        if (inWindow) {
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02a      	beq.n	80035b0 <timer_tick+0x138>
            timerActive = true;
 800355a:	4b23      	ldr	r3, [pc, #140]	@ (80035e8 <timer_tick+0x170>)
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]

            if (now_ms() < timerRetryDeadline) return;
 8003560:	f7ff fa74 	bl	8002a4c <now_ms>
 8003564:	4602      	mov	r2, r0
 8003566:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <timer_tick+0x188>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d332      	bcc.n	80035d4 <timer_tick+0x15c>

            if (dry_raw_is_dry()) {
 800356e:	f7ff fbbf 	bl	8002cf0 <dry_raw_is_dry>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00f      	beq.n	8003598 <timer_tick+0x120>
                stop_motor_keep_modes();
 8003578:	f7ff fb50 	bl	8002c1c <stop_motor_keep_modes>
                timerRetryDeadline = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800357c:	f7ff fa66 	bl	8002a4c <now_ms>
 8003580:	4602      	mov	r2, r0
 8003582:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <timer_tick+0x17c>)
 8003584:	885b      	ldrh	r3, [r3, #2]
 8003586:	4619      	mov	r1, r3
 8003588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <timer_tick+0x188>)
 8003594:	6013      	str	r3, [r2, #0]
                return;
 8003596:	e020      	b.n	80035da <timer_tick+0x162>
            }

            if (isTankFull()) {
 8003598:	f7ff fb56 	bl	8002c48 <isTankFull>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <timer_tick+0x130>
                ModelHandle_StopAllModesAndMotor(); // terminal -> clear
 80035a2:	f7ff fb43 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
                return;
 80035a6:	e018      	b.n	80035da <timer_tick+0x162>
            }

            start_motor();
 80035a8:	f7ff fb1e 	bl	8002be8 <start_motor>
            return;
 80035ac:	e015      	b.n	80035da <timer_tick+0x162>
        if (!s->active) continue;
 80035ae:	bf00      	nop
    for (int i = 0; i < 3; i++) {
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	dd8f      	ble.n	80034dc <timer_tick+0x64>
        }
    }

    if (!anySlotActive) return; // do not touch motor if no timers configured
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <timer_tick+0x160>

    // Outside any window -> ensure OFF (but keep timers configured)
    stop_motor_keep_modes();
 80035c8:	f7ff fb28 	bl	8002c1c <stop_motor_keep_modes>
    timerRetryDeadline = 0;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <timer_tick+0x188>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e002      	b.n	80035da <timer_tick+0x162>
            if (now_ms() < timerRetryDeadline) return;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <timer_tick+0x162>
    if (!anySlotActive) return; // do not touch motor if no timers configured
 80035d8:	bf00      	nop
}
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	2000057b 	.word	0x2000057b
 80035e4:	20000571 	.word	0x20000571
 80035e8:	20000575 	.word	0x20000575
 80035ec:	20000572 	.word	0x20000572
 80035f0:	20000024 	.word	0x20000024
 80035f4:	2000001c 	.word	0x2000001c
 80035f8:	20000576 	.word	0x20000576
 80035fc:	20000598 	.word	0x20000598
 8003600:	20000600 	.word	0x20000600

08003604 <ModelHandle_StartSemiAuto>:

/* =======================
   SEMI-AUTO
   ======================= */
void ModelHandle_StartSemiAuto(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
    clear_all_modes();
 8003608:	f7ff fa28 	bl	8002a5c <clear_all_modes>
    semiAutoActive = true;
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <ModelHandle_StartSemiAuto+0x38>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 8003612:	f7ff fb19 	bl	8002c48 <isTankFull>
 8003616:	4603      	mov	r3, r0
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <ModelHandle_StartSemiAuto+0x2a>
        start_motor();
 8003622:	f7ff fae1 	bl	8002be8 <start_motor>
        printf("Semi-Auto Started\r\n");
 8003626:	4806      	ldr	r0, [pc, #24]	@ (8003640 <ModelHandle_StartSemiAuto+0x3c>)
 8003628:	f009 faea 	bl	800cc00 <puts>
    } else {
        ModelHandle_StopAllModesAndMotor();
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 800362c:	e004      	b.n	8003638 <ModelHandle_StartSemiAuto+0x34>
        ModelHandle_StopAllModesAndMotor();
 800362e:	f7ff fafd 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        printf("Semi-Auto Not Started: Already Full\r\n");
 8003632:	4804      	ldr	r0, [pc, #16]	@ (8003644 <ModelHandle_StartSemiAuto+0x40>)
 8003634:	f009 fae4 	bl	800cc00 <puts>
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000576 	.word	0x20000576
 8003640:	0800f110 	.word	0x0800f110
 8003644:	0800f124 	.word	0x0800f124

08003648 <semi_auto_tick>:
    semiAutoActive   = false;
    ModelHandle_StopAllModesAndMotor();
    printf("Semi-Auto Stopped\r\n");
}
static void semi_auto_tick(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <semi_auto_tick+0x4c>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f083 0301 	eor.w	r3, r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <semi_auto_tick+0x46>

    // Only complete on full; keep asserting motor otherwise
    if (isTankFull()) {
 800365c:	f7ff faf4 	bl	8002c48 <isTankFull>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <semi_auto_tick+0x30>
        semiAutoActive = false;
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <semi_auto_tick+0x4c>)
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
        ModelHandle_StopAllModesAndMotor();
 800366c:	f7ff fade 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        printf("Semi-Auto Complete: Tank Full\r\n");
 8003670:	4809      	ldr	r0, [pc, #36]	@ (8003698 <semi_auto_tick+0x50>)
 8003672:	f009 fac5 	bl	800cc00 <puts>
        return;
 8003676:	e00b      	b.n	8003690 <semi_auto_tick+0x48>
    }

    // Keep motor ON during semi-auto (protections may still cut it)
    if (!Motor_GetStatus()) start_motor();
 8003678:	f000 f936 	bl	80038e8 <Motor_GetStatus>
 800367c:	4603      	mov	r3, r0
 800367e:	f083 0301 	eor.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <semi_auto_tick+0x48>
 8003688:	f7ff faae 	bl	8002be8 <start_motor>
 800368c:	e000      	b.n	8003690 <semi_auto_tick+0x48>
    if (!semiAutoActive) return;
 800368e:	bf00      	nop
}
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000576 	.word	0x20000576
 8003698:	0800f160 	.word	0x0800f160

0800369c <protections_tick>:

/* =======================
   PROTECTIONS
   ======================= */
static void protections_tick(void)
{
 800369c:	b598      	push	{r3, r4, r7, lr}
 800369e:	af00      	add	r7, sp, #0
    /* Manual override → only hard protections */
    if (manualOverride && manualActive) {
 80036a0:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <protections_tick+0x12c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02a      	beq.n	8003700 <protections_tick+0x64>
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <protections_tick+0x130>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d025      	beq.n	8003700 <protections_tick+0x64>
        if (senseOverLoad && motorStatus == 1U) ModelHandle_StopAllModesAndMotor();
 80036b4:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <protections_tick+0x134>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <protections_tick+0x30>
 80036be:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <protections_tick+0x138>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <protections_tick+0x30>
 80036c8:	f7ff fab0 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        if (senseOverUnderVolt) ModelHandle_StopAllModesAndMotor();
 80036cc:	4b42      	ldr	r3, [pc, #264]	@ (80037d8 <protections_tick+0x13c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <protections_tick+0x3e>
 80036d6:	f7ff faa9 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80036da:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <protections_tick+0x140>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06f      	beq.n	80037c2 <protections_tick+0x126>
 80036e2:	f7ff f9b3 	bl	8002a4c <now_ms>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <protections_tick+0x144>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	4a3d      	ldr	r2, [pc, #244]	@ (80037e4 <protections_tick+0x148>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d366      	bcc.n	80037c2 <protections_tick+0x126>
            ModelHandle_StopAllModesAndMotor();
 80036f4:	f7ff fa9a 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
            senseMaxRunReached = true;
 80036f8:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <protections_tick+0x14c>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
        }
        return;
 80036fe:	e060      	b.n	80037c2 <protections_tick+0x126>
    }

    /* DRY-RUN: delayed stop */
    if (motorStatus == 1U) {
 8003700:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <protections_tick+0x138>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12f      	bne.n	800376a <protections_tick+0xce>
        if (dry_raw_is_dry()) {
 800370a:	f7ff faf1 	bl	8002cf0 <dry_raw_is_dry>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <protections_tick+0xba>
            senseDryRun = true; // show on UI while counting
 8003714:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <protections_tick+0x150>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
            if (!dryTimerArmed) {
 800371a:	4b35      	ldr	r3, [pc, #212]	@ (80037f0 <protections_tick+0x154>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <protections_tick+0xa4>
                dryTimerArmed   = true;
 8003728:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <protections_tick+0x154>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
                dryStopDeadline = now_ms() + (uint32_t)DRY_STOP_DELAY_SECONDS * 1000UL;
 800372e:	f7ff f98d 	bl	8002a4c <now_ms>
 8003732:	4603      	mov	r3, r0
 8003734:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8003738:	3330      	adds	r3, #48	@ 0x30
 800373a:	4a2e      	ldr	r2, [pc, #184]	@ (80037f4 <protections_tick+0x158>)
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01a      	b.n	8003776 <protections_tick+0xda>
            } else {
                if ((int32_t)(dryStopDeadline - now_ms()) <= 0) {
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <protections_tick+0x158>)
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	f7ff f982 	bl	8002a4c <now_ms>
 8003748:	4603      	mov	r3, r0
 800374a:	1ae3      	subs	r3, r4, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	dc12      	bgt.n	8003776 <protections_tick+0xda>
                    ModelHandle_StopAllModesAndMotor();
 8003750:	f7ff fa6c 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
 8003754:	e00f      	b.n	8003776 <protections_tick+0xda>
                    // Keep flag true until user action clears (or water returns and motor restarts)
                }
            }
        } else {
            // water found => cancel dry timer & flag
            dryTimerArmed   = false;
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <protections_tick+0x154>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
            dryStopDeadline = 0;
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <protections_tick+0x158>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
            senseDryRun     = false;
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <protections_tick+0x150>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e005      	b.n	8003776 <protections_tick+0xda>
        }
    } else {
        // motor is off; reset dry timing
        dryTimerArmed   = false;
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <protections_tick+0x154>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
        dryStopDeadline = 0;
 8003770:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <protections_tick+0x158>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
        // keep senseDryRun as-is for UI; it will clear on next water detection
    }

    /* Other protections -> hard clear */
    if (senseOverLoad && motorStatus == 1U) ModelHandle_StopAllModesAndMotor();
 8003776:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <protections_tick+0x134>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <protections_tick+0xf2>
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <protections_tick+0x138>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <protections_tick+0xf2>
 800378a:	f7ff fa4f 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
    if (senseOverUnderVolt) ModelHandle_StopAllModesAndMotor();
 800378e:	4b12      	ldr	r3, [pc, #72]	@ (80037d8 <protections_tick+0x13c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <protections_tick+0x100>
 8003798:	f7ff fa48 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 800379c:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <protections_tick+0x140>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00f      	beq.n	80037c4 <protections_tick+0x128>
 80037a4:	f7ff f952 	bl	8002a4c <now_ms>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <protections_tick+0x144>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	4a0c      	ldr	r2, [pc, #48]	@ (80037e4 <protections_tick+0x148>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d306      	bcc.n	80037c4 <protections_tick+0x128>
        ModelHandle_StopAllModesAndMotor();
 80037b6:	f7ff fa39 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
        senseMaxRunReached = true;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <protections_tick+0x14c>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <protections_tick+0x128>
        return;
 80037c2:	bf00      	nop
    }
}
 80037c4:	bd98      	pop	{r3, r4, r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000057b 	.word	0x2000057b
 80037cc:	20000571 	.word	0x20000571
 80037d0:	20000578 	.word	0x20000578
 80037d4:	20000570 	.word	0x20000570
 80037d8:	20000579 	.word	0x20000579
 80037dc:	2000057c 	.word	0x2000057c
 80037e0:	20000580 	.word	0x20000580
 80037e4:	006ddd00 	.word	0x006ddd00
 80037e8:	2000057a 	.word	0x2000057a
 80037ec:	20000577 	.word	0x20000577
 80037f0:	20000584 	.word	0x20000584
 80037f4:	20000588 	.word	0x20000588

080037f8 <leds_from_model>:

/* =======================
   LEDs
   ======================= */
static void leds_from_model(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 80037fc:	f7fe fb7a 	bl	8001ef4 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <leds_from_model+0x90>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d104      	bne.n	8003814 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2101      	movs	r1, #1
 800380e:	2000      	movs	r0, #0
 8003810:	f7fe fb90 	bl	8001f34 <LED_SetIntent>
    }
    if (countdownActive) {
 8003814:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <leds_from_model+0x94>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 800381e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003822:	2102      	movs	r1, #2
 8003824:	2000      	movs	r0, #0
 8003826:	f7fe fb85 	bl	8001f34 <LED_SetIntent>
    }
    if (senseDryRun) {
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <leds_from_model+0x98>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	2001      	movs	r0, #1
 800383a:	f7fe fb7b 	bl	8001f34 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <leds_from_model+0x9c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8003848:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800384c:	2102      	movs	r1, #2
 800384e:	2001      	movs	r0, #1
 8003850:	f7fe fb70 	bl	8001f34 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <leds_from_model+0xa0>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 800385e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003862:	2102      	movs	r1, #2
 8003864:	2002      	movs	r0, #2
 8003866:	f7fe fb65 	bl	8001f34 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 800386a:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <leds_from_model+0xa4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8003874:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003878:	2102      	movs	r1, #2
 800387a:	2003      	movs	r0, #3
 800387c:	f7fe fb5a 	bl	8001f34 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8003880:	f7fe fb78 	bl	8001f74 <LED_ApplyIntents>
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000570 	.word	0x20000570
 800388c:	20000572 	.word	0x20000572
 8003890:	20000577 	.word	0x20000577
 8003894:	2000057a 	.word	0x2000057a
 8003898:	20000578 	.word	0x20000578
 800389c:	20000579 	.word	0x20000579

080038a0 <ModelHandle_SetMotor>:

/* =======================
   Public Motor APIs
   ======================= */
void ModelHandle_SetMotor(bool on)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
    if (on) {
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <ModelHandle_SetMotor+0x20>
        clear_all_modes();         // turning ON directly should not have stray modes
 80038b0:	f7ff f8d4 	bl	8002a5c <clear_all_modes>
        manualOverride = true;
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <ModelHandle_SetMotor+0x2c>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
        start_motor();
 80038ba:	f7ff f995 	bl	8002be8 <start_motor>
    } else {
        ModelHandle_StopAllModesAndMotor();
    }
}
 80038be:	e001      	b.n	80038c4 <ModelHandle_SetMotor+0x24>
        ModelHandle_StopAllModesAndMotor();
 80038c0:	f7ff f9b4 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	2000057b 	.word	0x2000057b

080038d0 <ModelHandle_ClearManualOverride>:
void ModelHandle_ClearManualOverride(void) { manualOverride = false; }
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <ModelHandle_ClearManualOverride+0x14>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000057b 	.word	0x2000057b

080038e8 <Motor_GetStatus>:
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <Motor_GetStatus+0x1c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000570 	.word	0x20000570

08003908 <ModelHandle_Process>:

/* =======================
   Main pump
   ======================= */
void ModelHandle_Process(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
    /* keep your original order of tickers */
    countdown_tick();
 800390e:	f7ff fac1 	bl	8002e94 <countdown_tick>
    twist_tick();     // critical for Twist mode
 8003912:	f7ff fba9 	bl	8003068 <twist_tick>
    search_tick();
 8003916:	f7ff fcff 	bl	8003318 <search_tick>
    timer_tick();
 800391a:	f7ff fdad 	bl	8003478 <timer_tick>
    semi_auto_tick();
 800391e:	f7ff fe93 	bl	8003648 <semi_auto_tick>

    /* --- Aux Burst auto-OFF (Relays 2 & 3) --- */
    if (auxBurstActive) {
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <ModelHandle_Process+0x5c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d013      	beq.n	8003952 <ModelHandle_Process+0x4a>
        uint32_t nowt = HAL_GetTick();
 800392a:	f002 fc2f 	bl	800618c <HAL_GetTick>
 800392e:	6078      	str	r0, [r7, #4]
        if ((int32_t)(auxBurstDeadlineMs - nowt) <= 0) {
 8003930:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <ModelHandle_Process+0x60>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	dc0a      	bgt.n	8003952 <ModelHandle_Process+0x4a>
            Relay_Set(2, false);
 800393c:	2100      	movs	r1, #0
 800393e:	2002      	movs	r0, #2
 8003940:	f000 f85e 	bl	8003a00 <Relay_Set>
            Relay_Set(3, false);
 8003944:	2100      	movs	r1, #0
 8003946:	2003      	movs	r0, #3
 8003948:	f000 f85a 	bl	8003a00 <Relay_Set>
            auxBurstActive = false;
 800394c:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <ModelHandle_Process+0x5c>)
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
        }
    }

    protections_tick();
 8003952:	f7ff fea3 	bl	800369c <protections_tick>
    leds_from_model();
 8003956:	f7ff ff4f 	bl	80037f8 <leds_from_model>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000590 	.word	0x20000590
 8003968:	20000594 	.word	0x20000594

0800396c <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800397e:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <Relay_Init+0x8c>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <Relay_Init+0x8c>)
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	6193      	str	r3, [r2, #24]
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <Relay_Init+0x8c>)
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003996:	2301      	movs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2302      	movs	r3, #2
 80039a0:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e01e      	b.n	80039e6 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 80039a8:	4a14      	ldr	r2, [pc, #80]	@ (80039fc <Relay_Init+0x90>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	889b      	ldrh	r3, [r3, #4]
 80039b2:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 80039b4:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <Relay_Init+0x90>)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039bc:	1d3a      	adds	r2, r7, #4
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fba9 	bl	8007118 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 80039c6:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <Relay_Init+0x90>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80039ce:	4a0b      	ldr	r2, [pc, #44]	@ (80039fc <Relay_Init+0x90>)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	889b      	ldrh	r3, [r3, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	4619      	mov	r1, r3
 80039dc:	f003 fd37 	bl	800744e <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3301      	adds	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	dddd      	ble.n	80039a8 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800f654 	.word	0x0800f654

08003a00 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	71fb      	strb	r3, [r7, #7]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <Relay_Set+0x3c>
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d80f      	bhi.n	8003a3c <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <Relay_Set+0x44>)
 8003a22:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4a06      	ldr	r2, [pc, #24]	@ (8003a44 <Relay_Set+0x44>)
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003a32:	79ba      	ldrb	r2, [r7, #6]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f003 fd0a 	bl	800744e <HAL_GPIO_WritePin>
 8003a3a:	e000      	b.n	8003a3e <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003a3c:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	0800f654 	.word	0x0800f654

08003a48 <Relay_Get>:

bool Relay_Get(uint8_t relay_no)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return false;
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <Relay_Get+0x16>
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d901      	bls.n	8003a62 <Relay_Get+0x1a>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e016      	b.n	8003a90 <Relay_Get+0x48>

    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	4a0c      	ldr	r2, [pc, #48]	@ (8003a98 <Relay_Get+0x50>)
 8003a68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
                                       relays[relay_no - 1].pin);
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4909      	ldr	r1, [pc, #36]	@ (8003a98 <Relay_Get+0x50>)
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f003 fcd0 	bl	8007420 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]

    return (s == RELAY_ACTIVE_STATE);
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	0800f654 	.word	0x0800f654

08003a9c <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003aa4:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <rf_delay_us+0x2c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8003aac:	bf00      	nop
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <rf_delay_us+0x2c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d8f9      	bhi.n	8003aae <rf_delay_us+0x12>
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000410 	.word	0x20000410

08003acc <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	@ 0x80
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <RF_Init+0x14>)
 8003ad6:	f003 fcba 	bl	800744e <HAL_GPIO_WritePin>
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40010c00 	.word	0x40010c00

08003ae4 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 8003aee:	2201      	movs	r2, #1
 8003af0:	2180      	movs	r1, #128	@ 0x80
 8003af2:	4809      	ldr	r0, [pc, #36]	@ (8003b18 <send_high_low+0x34>)
 8003af4:	f003 fcab 	bl	800744e <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ffcf 	bl	8003a9c <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	4805      	ldr	r0, [pc, #20]	@ (8003b18 <send_high_low+0x34>)
 8003b04:	f003 fca3 	bl	800744e <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f7ff ffc7 	bl	8003a9c <rf_delay_us>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40010c00 	.word	0x40010c00

08003b1c <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 8003b2c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003b30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003b34:	f7ff ffd6 	bl	8003ae4 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 8003b38:	e005      	b.n	8003b46 <send_bit+0x2a>
        send_high_low(900, 300);
 8003b3a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003b3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8003b42:	f7ff ffcf 	bl	8003ae4 <send_high_low>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e031      	b.n	8003bc4 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 8003b60:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 8003b64:	f240 1013 	movw	r0, #275	@ 0x113
 8003b68:	f7ff ffbc 	bl	8003ae4 <send_high_low>
        rf_delay_us(1000);
 8003b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b70:	f7ff ff94 	bl	8003a9c <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	72fb      	strb	r3, [r7, #11]
 8003b7c:	e011      	b.n	8003ba2 <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 8003b7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ffc3 	bl	8003b1c <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003b96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	72fb      	strb	r3, [r7, #11]
 8003ba2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dae9      	bge.n	8003b7e <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 8003baa:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003bae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003bb2:	f7ff ff97 	bl	8003ae4 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 8003bb6:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003bba:	f7ff ff6f 	bl	8003a9c <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	ddca      	ble.n	8003b60 <RF_SendCode+0x12>
    }
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	0092      	lsls	r2, r2, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 8003c0a:	2332      	movs	r3, #50	@ 0x32
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	21d0      	movs	r1, #208	@ 0xd0
 8003c10:	4822      	ldr	r0, [pc, #136]	@ (8003c9c <RTC_Init+0x98>)
 8003c12:	f004 f9fd 	bl	8008010 <HAL_I2C_IsDeviceReady>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 8003c1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <RTC_Init+0x9c>)
 8003c1e:	22d0      	movs	r2, #208	@ 0xd0
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e010      	b.n	8003c46 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8003c24:	2332      	movs	r3, #50	@ 0x32
 8003c26:	2202      	movs	r2, #2
 8003c28:	21ae      	movs	r1, #174	@ 0xae
 8003c2a:	481c      	ldr	r0, [pc, #112]	@ (8003c9c <RTC_Init+0x98>)
 8003c2c:	f004 f9f0 	bl	8008010 <HAL_I2C_IsDeviceReady>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <RTC_Init+0x9c>)
 8003c38:	22ae      	movs	r2, #174	@ 0xae
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	e003      	b.n	8003c46 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 8003c3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ca0 <RTC_Init+0x9c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	801a      	strh	r2, [r3, #0]
 8003c44:	e027      	b.n	8003c96 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003c46:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <RTC_Init+0x9c>)
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	2301      	movs	r3, #1
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	480f      	ldr	r0, [pc, #60]	@ (8003c9c <RTC_Init+0x98>)
 8003c5e:	f003 ff63 	bl	8007b28 <HAL_I2C_Mem_Read>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	b25b      	sxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da12      	bge.n	8003c96 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <RTC_Init+0x9c>)
 8003c7c:	8819      	ldrh	r1, [r3, #0]
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	2301      	movs	r3, #1
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <RTC_Init+0x98>)
 8003c92:	f003 fe4f 	bl	8007934 <HAL_I2C_Mem_Write>
        }
    }
}
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000350 	.word	0x20000350
 8003ca0:	2000060c 	.word	0x2000060c

08003ca4 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 8003caa:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <RTC_GetTimeDate+0x130>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8089 	beq.w	8003dc6 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8003cb4:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <RTC_GetTimeDate+0x130>)
 8003cb6:	8819      	ldrh	r1, [r3, #0]
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	2307      	movs	r3, #7
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4843      	ldr	r0, [pc, #268]	@ (8003dd8 <RTC_GetTimeDate+0x134>)
 8003ccc:	f003 ff2c 	bl	8007b28 <HAL_I2C_Mem_Read>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d179      	bne.n	8003dca <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8003cd6:	793b      	ldrb	r3, [r7, #4]
 8003cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff78 	bl	8003bd4 <bcd2dec>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003cea:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 8003cec:	797b      	ldrb	r3, [r7, #5]
 8003cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff6d 	bl	8003bd4 <bcd2dec>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b37      	ldr	r3, [pc, #220]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d00:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8003d02:	79bb      	ldrb	r3, [r7, #6]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d025      	beq.n	8003d58 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 8003d0c:	79bb      	ldrb	r3, [r7, #6]
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff5d 	bl	8003bd4 <bcd2dec>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 8003d1e:	79bb      	ldrb	r3, [r7, #6]
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d108      	bne.n	8003d42 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8003d30:	7bbb      	ldrb	r3, [r7, #14]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <RTC_GetTimeDate+0x96>
 8003d36:	220c      	movs	r2, #12
 8003d38:	e000      	b.n	8003d3c <RTC_GetTimeDate+0x98>
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d3e:	709a      	strb	r2, [r3, #2]
 8003d40:	e015      	b.n	8003d6e <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <RTC_GetTimeDate+0xac>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e000      	b.n	8003d52 <RTC_GetTimeDate+0xae>
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d54:	7093      	strb	r3, [r2, #2]
 8003d56:	e00a      	b.n	8003d6e <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 8003d58:	79bb      	ldrb	r3, [r7, #6]
 8003d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff37 	bl	8003bd4 <bcd2dec>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d6c:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff2c 	bl	8003bd4 <bcd2dec>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d82:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8003d84:	7a3b      	ldrb	r3, [r7, #8]
 8003d86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff21 	bl	8003bd4 <bcd2dec>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003d98:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 8003d9a:	7a7b      	ldrb	r3, [r7, #9]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff16 	bl	8003bd4 <bcd2dec>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003dae:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 8003db0:	7abb      	ldrb	r3, [r7, #10]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff0e 	bl	8003bd4 <bcd2dec>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <RTC_GetTimeDate+0x138>)
 8003dc2:	80da      	strh	r2, [r3, #6]
 8003dc4:	e002      	b.n	8003dcc <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <RTC_GetTimeDate+0x128>
        return;
 8003dca:	bf00      	nop
}
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000060c 	.word	0x2000060c
 8003dd8:	20000350 	.word	0x20000350
 8003ddc:	20000604 	.word	0x20000604

08003de0 <lcd_line>:
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;
static uint16_t edit_countdown_rep = 1;   // NEW

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 8003dec:	f107 000c 	add.w	r0, r7, #12
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <lcd_line+0x38>)
 8003df4:	2111      	movs	r1, #17
 8003df6:	f008 ff0b 	bl	800cc10 <sniprintf>
    lcd_put_cur(row, 0);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd ff0a 	bl	8001c18 <lcd_put_cur>
    lcd_send_string(ln);
 8003e04:	f107 030c 	add.w	r3, r7, #12
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fd ff27 	bl	8001c5c <lcd_send_string>
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	0800f27c 	.word	0x0800f27c

08003e1c <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ffda 	bl	8003de0 <lcd_line>
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7ff ffce 	bl	8003de0 <lcd_line>
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	f002 f99c 	bl	800618c <HAL_GetTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4a02      	ldr	r2, [pc, #8]	@ (8003e60 <refreshInactivityTimer+0x14>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000061c 	.word	0x2000061c

08003e64 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <goto_menu_top+0x18>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <goto_menu_top+0x1c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	20000624 	.word	0x20000624
 8003e80:	20000628 	.word	0x20000628

08003e84 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	70fb      	strb	r3, [r7, #3]
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	dc20      	bgt.n	8003eda <format_menu_line+0x56>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	db1d      	blt.n	8003eda <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <format_menu_line+0x24>
 8003ea4:	233e      	movs	r3, #62	@ 0x3e
 8003ea6:	e000      	b.n	8003eaa <format_menu_line+0x26>
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 8003eae:	4a10      	ldr	r2, [pc, #64]	@ (8003ef0 <format_menu_line+0x6c>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	f107 0014 	add.w	r0, r7, #20
 8003eba:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <format_menu_line+0x70>)
 8003ebc:	2110      	movs	r1, #16
 8003ebe:	f008 fea7 	bl	800cc10 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8003ec2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <format_menu_line+0x74>)
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f008 fe9c 	bl	800cc10 <sniprintf>
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003ed8:	e005      	b.n	8003ee6 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 8003eda:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <format_menu_line+0x78>)
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f008 fe96 	bl	800cc10 <sniprintf>
    }
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	@ 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000002c 	.word	0x2000002c
 8003ef4:	0800f288 	.word	0x0800f288
 8003ef8:	0800f294 	.word	0x0800f294
 8003efc:	0800f29c 	.word	0x0800f29c

08003f00 <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
    lcd_clear();
 8003f04:	f7fd fe7b 	bl	8001bfe <lcd_clear>
    lcd_line0("  Welcome to ");
 8003f08:	4803      	ldr	r0, [pc, #12]	@ (8003f18 <show_welcome+0x18>)
 8003f0a:	f7ff ff87 	bl	8003e1c <lcd_line0>
    lcd_line1("   HELONIX   ");
 8003f0e:	4803      	ldr	r0, [pc, #12]	@ (8003f1c <show_welcome+0x1c>)
 8003f10:	f7ff ff90 	bl	8003e34 <lcd_line1>
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	0800f2b0 	.word	0x0800f2b0
 8003f1c:	0800f2c0 	.word	0x0800f2c0

08003f20 <show_dash>:

static void show_dash(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b092      	sub	sp, #72	@ 0x48
 8003f24:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 8003f26:	f7ff fcdf 	bl	80038e8 <Motor_GetStatus>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <show_dash+0x14>
 8003f30:	4b44      	ldr	r3, [pc, #272]	@ (8004044 <show_dash+0x124>)
 8003f32:	e000      	b.n	8003f36 <show_dash+0x16>
 8003f34:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <show_dash+0x128>)
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 8003f38:	4b44      	ldr	r3, [pc, #272]	@ (800404c <show_dash+0x12c>)
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 8003f3c:	4b44      	ldr	r3, [pc, #272]	@ (8004050 <show_dash+0x130>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <show_dash+0x2c>
 8003f46:	4b43      	ldr	r3, [pc, #268]	@ (8004054 <show_dash+0x134>)
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4a:	e026      	b.n	8003f9a <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 8003f4c:	4b42      	ldr	r3, [pc, #264]	@ (8004058 <show_dash+0x138>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <show_dash+0x3c>
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <show_dash+0x13c>)
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5a:	e01e      	b.n	8003f9a <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 8003f5c:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <show_dash+0x140>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <show_dash+0x4c>
 8003f66:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <show_dash+0x144>)
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6a:	e016      	b.n	8003f9a <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <show_dash+0x148>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <show_dash+0x5c>
 8003f76:	4b3d      	ldr	r3, [pc, #244]	@ (800406c <show_dash+0x14c>)
 8003f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7a:	e00e      	b.n	8003f9a <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 8003f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004070 <show_dash+0x150>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <show_dash+0x6c>
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <show_dash+0x154>)
 8003f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8a:	e006      	b.n	8003f9a <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <show_dash+0x158>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <show_dash+0x7a>
 8003f96:	4b39      	ldr	r3, [pc, #228]	@ (800407c <show_dash+0x15c>)
 8003f98:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 8003f9a:	f107 0018 	add.w	r0, r7, #24
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	4a36      	ldr	r2, [pc, #216]	@ (8004080 <show_dash+0x160>)
 8003fa6:	2111      	movs	r1, #17
 8003fa8:	f008 fe32 	bl	800cc10 <sniprintf>

    int submergedCount = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	e012      	b.n	8003fdc <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8003fb6:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <show_dash+0x164>)
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fba:	3302      	adds	r3, #2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4931      	ldr	r1, [pc, #196]	@ (8004088 <show_dash+0x168>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd f815 	bl	8000ff4 <__aeabi_fcmplt>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <show_dash+0xb6>
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd8:	3301      	adds	r3, #1
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	dde9      	ble.n	8003fb6 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d817      	bhi.n	8004018 <show_dash+0xf8>
 8003fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <show_dash+0xd0>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004001 	.word	0x08004001
 8003ff4:	08004007 	.word	0x08004007
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004013 	.word	0x08004013
        case 0:  level = "EMPTY"; break;
 8004000:	4b22      	ldr	r3, [pc, #136]	@ (800408c <show_dash+0x16c>)
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
 8004004:	e00b      	b.n	800401e <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8004006:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <show_dash+0x170>)
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
 800400a:	e008      	b.n	800401e <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <show_dash+0x174>)
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004010:	e005      	b.n	800401e <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 8004012:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <show_dash+0x178>)
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
 8004016:	e002      	b.n	800401e <show_dash+0xfe>
        default: level = "FULL";  break;
 8004018:	4b20      	ldr	r3, [pc, #128]	@ (800409c <show_dash+0x17c>)
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
 800401c:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 800401e:	1d38      	adds	r0, r7, #4
 8004020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004022:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <show_dash+0x180>)
 8004024:	2111      	movs	r1, #17
 8004026:	f008 fdf3 	bl	800cc10 <sniprintf>

    lcd_line0(line0);
 800402a:	f107 0318 	add.w	r3, r7, #24
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fef4 	bl	8003e1c <lcd_line0>
    lcd_line1(line1);
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fefc 	bl	8003e34 <lcd_line1>
}
 800403c:	bf00      	nop
 800403e:	3740      	adds	r7, #64	@ 0x40
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	0800f2d0 	.word	0x0800f2d0
 8004048:	0800f2d4 	.word	0x0800f2d4
 800404c:	0800f2d8 	.word	0x0800f2d8
 8004050:	20000571 	.word	0x20000571
 8004054:	0800f2e0 	.word	0x0800f2e0
 8004058:	20000576 	.word	0x20000576
 800405c:	0800f2e8 	.word	0x0800f2e8
 8004060:	20000575 	.word	0x20000575
 8004064:	0800f2f4 	.word	0x0800f2f4
 8004068:	20000574 	.word	0x20000574
 800406c:	0800f2fc 	.word	0x0800f2fc
 8004070:	20000572 	.word	0x20000572
 8004074:	0800f304 	.word	0x0800f304
 8004078:	20000573 	.word	0x20000573
 800407c:	0800f30c 	.word	0x0800f30c
 8004080:	0800f314 	.word	0x0800f314
 8004084:	200004a0 	.word	0x200004a0
 8004088:	3dcccccd 	.word	0x3dcccccd
 800408c:	0800f31c 	.word	0x0800f31c
 8004090:	0800f324 	.word	0x0800f324
 8004094:	0800f328 	.word	0x0800f328
 8004098:	0800f330 	.word	0x0800f330
 800409c:	0800f334 	.word	0x0800f334
 80040a0:	0800f33c 	.word	0x0800f33c

080040a4 <show_menu>:

static void show_menu(void){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 80040aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <show_menu+0xb0>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004158 <show_menu+0xb4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	da04      	bge.n	80040c0 <show_menu+0x1c>
 80040b6:	4b27      	ldr	r3, [pc, #156]	@ (8004154 <show_menu+0xb0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <show_menu+0xb4>)
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00b      	b.n	80040d8 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 80040c0:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <show_menu+0xb4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	4b23      	ldr	r3, [pc, #140]	@ (8004154 <show_menu+0xb0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	da04      	bge.n	80040d8 <show_menu+0x34>
 80040ce:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <show_menu+0xb0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a20      	ldr	r2, [pc, #128]	@ (8004158 <show_menu+0xb4>)
 80040d6:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 80040d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <show_menu+0xb4>)
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <show_menu+0xb0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <show_menu+0xb4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d105      	bne.n	80040f4 <show_menu+0x50>
 80040e8:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <show_menu+0xb8>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <show_menu+0x50>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <show_menu+0x52>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f107 0014 	add.w	r0, r7, #20
 8004100:	460a      	mov	r2, r1
 8004102:	2111      	movs	r1, #17
 8004104:	f7ff febe 	bl	8003e84 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8004108:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <show_menu+0xb4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <show_menu+0xb4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <show_menu+0xb0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d105      	bne.n	8004128 <show_menu+0x84>
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <show_menu+0xb8>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <show_menu+0x84>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <show_menu+0x86>
 8004128:	2300      	movs	r3, #0
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4638      	mov	r0, r7
 8004132:	460a      	mov	r2, r1
 8004134:	2111      	movs	r1, #17
 8004136:	f7ff fea5 	bl	8003e84 <format_menu_line>
    lcd_line0(line0);
 800413a:	f107 0314 	add.w	r3, r7, #20
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fe6c 	bl	8003e1c <lcd_line0>
    lcd_line1(line1);
 8004144:	463b      	mov	r3, r7
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fe74 	bl	8003e34 <lcd_line1>
}
 800414c:	bf00      	nop
 800414e:	3728      	adds	r7, #40	@ 0x28
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000624 	.word	0x20000624
 8004158:	20000628 	.word	0x20000628
 800415c:	2000002b 	.word	0x2000002b

08004160 <show_manual>:

static void show_manual(void){
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	@ 0x28
 8004164:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <show_manual+0x54>)
 800416c:	2111      	movs	r1, #17
 800416e:	4618      	mov	r0, r3
 8004170:	f008 fd4e 	bl	800cc10 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8004174:	f7ff fbb8 	bl	80038e8 <Motor_GetStatus>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <show_manual+0x2c>
 800417e:	463b      	mov	r3, r7
 8004180:	4a0d      	ldr	r2, [pc, #52]	@ (80041b8 <show_manual+0x58>)
 8004182:	2111      	movs	r1, #17
 8004184:	4618      	mov	r0, r3
 8004186:	f008 fd43 	bl	800cc10 <sniprintf>
 800418a:	e005      	b.n	8004198 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 800418c:	463b      	mov	r3, r7
 800418e:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <show_manual+0x5c>)
 8004190:	2111      	movs	r1, #17
 8004192:	4618      	mov	r0, r3
 8004194:	f008 fd3c 	bl	800cc10 <sniprintf>
    lcd_line0(line0);
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fe3d 	bl	8003e1c <lcd_line0>
    lcd_line1(line1);
 80041a2:	463b      	mov	r3, r7
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe45 	bl	8003e34 <lcd_line1>
}
 80041aa:	bf00      	nop
 80041ac:	3728      	adds	r7, #40	@ 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	0800f220 	.word	0x0800f220
 80041b8:	0800f348 	.word	0x0800f348
 80041bc:	0800f358 	.word	0x0800f358

080041c0 <show_semi_auto>:

static void show_semi_auto(void){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	@ 0x28
 80041c4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <show_semi_auto+0x50>)
 80041cc:	2111      	movs	r1, #17
 80041ce:	4618      	mov	r0, r3
 80041d0:	f008 fd1e 	bl	800cc10 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 80041d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <show_semi_auto+0x54>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d006      	beq.n	80041ea <show_semi_auto+0x2a>
 80041dc:	463b      	mov	r3, r7
 80041de:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <show_semi_auto+0x58>)
 80041e0:	2111      	movs	r1, #17
 80041e2:	4618      	mov	r0, r3
 80041e4:	f008 fd14 	bl	800cc10 <sniprintf>
 80041e8:	e005      	b.n	80041f6 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 80041ea:	463b      	mov	r3, r7
 80041ec:	4a0b      	ldr	r2, [pc, #44]	@ (800421c <show_semi_auto+0x5c>)
 80041ee:	2111      	movs	r1, #17
 80041f0:	4618      	mov	r0, r3
 80041f2:	f008 fd0d 	bl	800cc10 <sniprintf>
    lcd_line0(line0);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fe0e 	bl	8003e1c <lcd_line0>
    lcd_line1(line1);
 8004200:	463b      	mov	r3, r7
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe16 	bl	8003e34 <lcd_line1>
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	0800f22c 	.word	0x0800f22c
 8004214:	20000620 	.word	0x20000620
 8004218:	0800f368 	.word	0x0800f368
 800421c:	0800f378 	.word	0x0800f378

08004220 <show_timer>:

static void show_timer(void){
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	@ 0x30
 8004224:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8004226:	4b13      	ldr	r3, [pc, #76]	@ (8004274 <show_timer+0x54>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <show_timer+0x58>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f107 0014 	add.w	r0, r7, #20
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	4a10      	ldr	r2, [pc, #64]	@ (800427c <show_timer+0x5c>)
 800423a:	2111      	movs	r1, #17
 800423c:	f008 fce8 	bl	800cc10 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8004240:	4b0f      	ldr	r3, [pc, #60]	@ (8004280 <show_timer+0x60>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <show_timer+0x64>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	4638      	mov	r0, r7
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <show_timer+0x68>)
 8004252:	2111      	movs	r1, #17
 8004254:	f008 fcdc 	bl	800cc10 <sniprintf>
    lcd_line0(l0);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fddd 	bl	8003e1c <lcd_line0>
    lcd_line1(l1);
 8004262:	463b      	mov	r3, r7
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fde5 	bl	8003e34 <lcd_line1>
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000048 	.word	0x20000048
 8004278:	20000049 	.word	0x20000049
 800427c:	0800f388 	.word	0x0800f388
 8004280:	2000004a 	.word	0x2000004a
 8004284:	2000004b 	.word	0x2000004b
 8004288:	0800f398 	.word	0x0800f398

0800428c <show_search>:

static void show_search(void){
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	@ 0x30
 8004290:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
             searchSettings.searchActive ? "ON " : "OFF",
 8004292:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <show_search+0x60>)
 8004294:	781b      	ldrb	r3, [r3, #0]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <show_search+0x12>
 800429a:	4b15      	ldr	r3, [pc, #84]	@ (80042f0 <show_search+0x64>)
 800429c:	e000      	b.n	80042a0 <show_search+0x14>
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <show_search+0x68>)
             (unsigned)searchSettings.testingGapSeconds,
 80042a0:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <show_search+0x60>)
 80042a2:	8852      	ldrh	r2, [r2, #2]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80042a4:	4611      	mov	r1, r2
             (unsigned)searchSettings.dryRunTimeSeconds);
 80042a6:	4a11      	ldr	r2, [pc, #68]	@ (80042ec <show_search+0x60>)
 80042a8:	8892      	ldrh	r2, [r2, #4]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80042aa:	f107 0014 	add.w	r0, r7, #20
 80042ae:	9201      	str	r2, [sp, #4]
 80042b0:	9100      	str	r1, [sp, #0]
 80042b2:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <show_search+0x6c>)
 80042b4:	2111      	movs	r1, #17
 80042b6:	f008 fcab 	bl	800cc10 <sniprintf>
    snprintf(l1,sizeof(l1),">%s   Edit",
             searchSettings.searchActive ? "Stop" : "Enable");
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <show_search+0x60>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <show_search+0x3a>
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <show_search+0x70>)
 80042c4:	e000      	b.n	80042c8 <show_search+0x3c>
 80042c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <show_search+0x74>)
 80042c8:	4638      	mov	r0, r7
 80042ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004304 <show_search+0x78>)
 80042cc:	2111      	movs	r1, #17
 80042ce:	f008 fc9f 	bl	800cc10 <sniprintf>
    lcd_line0(l0);
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fda0 	bl	8003e1c <lcd_line0>
    lcd_line1(l1);
 80042dc:	463b      	mov	r3, r7
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fda8 	bl	8003e34 <lcd_line1>
}
 80042e4:	bf00      	nop
 80042e6:	3728      	adds	r7, #40	@ 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000001c 	.word	0x2000001c
 80042f0:	0800f2d0 	.word	0x0800f2d0
 80042f4:	0800f2d4 	.word	0x0800f2d4
 80042f8:	0800f3ac 	.word	0x0800f3ac
 80042fc:	0800f3bc 	.word	0x0800f3bc
 8004300:	0800f3c4 	.word	0x0800f3c4
 8004304:	0800f3cc 	.word	0x0800f3cc

08004308 <show_countdown>:

static void show_countdown(void){
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	@ 0x40
 800430c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    extern volatile uint16_t countdownRemainingRuns;
    if (countdownActive) {
 800430e:	4b24      	ldr	r3, [pc, #144]	@ (80043a0 <show_countdown+0x98>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d029      	beq.n	800436c <show_countdown+0x64>
        uint32_t sec = countdownDuration;
 8004318:	4b22      	ldr	r3, [pc, #136]	@ (80043a4 <show_countdown+0x9c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	4a21      	ldr	r2, [pc, #132]	@ (80043a8 <show_countdown+0xa0>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s   = sec%60;
 800432a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800432c:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <show_countdown+0xa0>)
 800432e:	fba3 1302 	umull	r1, r3, r3, r2
 8004332:	0959      	lsrs	r1, r3, #5
 8004334:	460b      	mov	r3, r1
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a5b      	subs	r3, r3, r1
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Run %02u %02d:%02d",
 8004340:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <show_countdown+0xa4>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4619      	mov	r1, r3
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800434c:	f107 0018 	add.w	r0, r7, #24
 8004350:	9201      	str	r2, [sp, #4]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	460b      	mov	r3, r1
 8004356:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <show_countdown+0xa8>)
 8004358:	2111      	movs	r1, #17
 800435a:	f008 fc59 	bl	800cc10 <sniprintf>
                 (unsigned)countdownRemainingRuns,(int)min,(int)s);
        snprintf(l1,sizeof(l1),">Stop     Back");
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <show_countdown+0xac>)
 8004362:	2111      	movs	r1, #17
 8004364:	4618      	mov	r0, r3
 8004366:	f008 fc53 	bl	800cc10 <sniprintf>
 800436a:	e00c      	b.n	8004386 <show_countdown+0x7e>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	4a11      	ldr	r2, [pc, #68]	@ (80043b8 <show_countdown+0xb0>)
 8004372:	2111      	movs	r1, #17
 8004374:	4618      	mov	r0, r3
 8004376:	f008 fc4b 	bl	800cc10 <sniprintf>
        snprintf(l1,sizeof(l1),">Set Start Back");
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	4a0f      	ldr	r2, [pc, #60]	@ (80043bc <show_countdown+0xb4>)
 800437e:	2111      	movs	r1, #17
 8004380:	4618      	mov	r0, r3
 8004382:	f008 fc45 	bl	800cc10 <sniprintf>
    }
    lcd_line0(l0);
 8004386:	f107 0318 	add.w	r3, r7, #24
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd46 	bl	8003e1c <lcd_line0>
    lcd_line1(l1);
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fd4e 	bl	8003e34 <lcd_line1>
}
 8004398:	bf00      	nop
 800439a:	3738      	adds	r7, #56	@ 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000572 	.word	0x20000572
 80043a4:	2000058c 	.word	0x2000058c
 80043a8:	88888889 	.word	0x88888889
 80043ac:	200005d4 	.word	0x200005d4
 80043b0:	0800f3d8 	.word	0x0800f3d8
 80043b4:	0800f348 	.word	0x0800f348
 80043b8:	0800f3ec 	.word	0x0800f3ec
 80043bc:	0800f3fc 	.word	0x0800f3fc

080043c0 <show_twist>:


static void show_twist(void){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	@ 0x38
 80043c4:	af02      	add	r7, sp, #8
    char l0[17], l1[17];

    const char* status = twistSettings.twistActive ? "ON " : "OFF";
 80043c6:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <show_twist+0x64>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <show_twist+0x12>
 80043ce:	4b16      	ldr	r3, [pc, #88]	@ (8004428 <show_twist+0x68>)
 80043d0:	e000      	b.n	80043d4 <show_twist+0x14>
 80043d2:	4b16      	ldr	r3, [pc, #88]	@ (800442c <show_twist+0x6c>)
 80043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
             (int)twistSettings.onDurationSeconds,
 80043d6:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <show_twist+0x64>)
 80043d8:	885b      	ldrh	r3, [r3, #2]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 80043da:	461a      	mov	r2, r3
             (int)twistSettings.offDurationSeconds);
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <show_twist+0x64>)
 80043de:	889b      	ldrh	r3, [r3, #4]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 80043e0:	f107 0018 	add.w	r0, r7, #24
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	9200      	str	r2, [sp, #0]
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <show_twist+0x70>)
 80043ec:	2111      	movs	r1, #17
 80043ee:	f008 fc0f 	bl	800cc10 <sniprintf>

    // primary action on SELECT is Enable/Stop; UP/DOWN goes to edit
    snprintf(l1,sizeof(l1),">%s   Edit",
             twistSettings.twistActive ? "Stop" : "Enable");
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <show_twist+0x64>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <show_twist+0x3e>
 80043fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <show_twist+0x74>)
 80043fc:	e000      	b.n	8004400 <show_twist+0x40>
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <show_twist+0x78>)
 8004400:	1d38      	adds	r0, r7, #4
 8004402:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <show_twist+0x7c>)
 8004404:	2111      	movs	r1, #17
 8004406:	f008 fc03 	bl	800cc10 <sniprintf>

    lcd_line0(l0);
 800440a:	f107 0318 	add.w	r3, r7, #24
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fd04 	bl	8003e1c <lcd_line0>
    lcd_line1(l1);
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fd0c 	bl	8003e34 <lcd_line1>
}
 800441c:	bf00      	nop
 800441e:	3730      	adds	r7, #48	@ 0x30
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000024 	.word	0x20000024
 8004428:	0800f2d0 	.word	0x0800f2d0
 800442c:	0800f2d4 	.word	0x0800f2d4
 8004430:	0800f40c 	.word	0x0800f40c
 8004434:	0800f3bc 	.word	0x0800f3bc
 8004438:	0800f3c4 	.word	0x0800f3c4
 800443c:	0800f3cc 	.word	0x0800f3cc

08004440 <apply_search_settings>:


/* ===== Apply functions ===== */
static void apply_search_settings(void){
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <apply_search_settings+0x1c>)
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <apply_search_settings+0x20>)
 800444a:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <apply_search_settings+0x24>)
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <apply_search_settings+0x20>)
 8004452:	809a      	strh	r2, [r3, #4]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	2000004c 	.word	0x2000004c
 8004460:	2000001c 	.word	0x2000001c
 8004464:	2000004e 	.word	0x2000004e

08004468 <apply_twist_settings>:

static void apply_twist_settings(void){
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <apply_twist_settings+0x1c>)
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <apply_twist_settings+0x20>)
 8004472:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <apply_twist_settings+0x24>)
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	4b03      	ldr	r3, [pc, #12]	@ (8004488 <apply_twist_settings+0x20>)
 800447a:	809a      	strh	r2, [r3, #4]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000050 	.word	0x20000050
 8004488:	20000024 	.word	0x20000024
 800448c:	20000052 	.word	0x20000052

08004490 <apply_countdown_settings>:

static void apply_countdown_settings(void){
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
    // kept for compatibility if other code depends on countdownDuration mirror
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <apply_countdown_settings+0x20>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <apply_countdown_settings+0x24>)
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	20000054 	.word	0x20000054
 80044b4:	2000058c 	.word	0x2000058c

080044b8 <enable_semi_auto>:

static void enable_semi_auto(void){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 80044bc:	f7ff fa08 	bl	80038d0 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 80044c0:	f7ff f8a0 	bl	8003604 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 80044c4:	4b02      	ldr	r3, [pc, #8]	@ (80044d0 <enable_semi_auto+0x18>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000620 	.word	0x20000620

080044d4 <disable_semi_auto>:
static void disable_semi_auto(void){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 80044d8:	2000      	movs	r0, #0
 80044da:	f7ff f9e1 	bl	80038a0 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 80044de:	4b02      	ldr	r3, [pc, #8]	@ (80044e8 <disable_semi_auto+0x14>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000620 	.word	0x20000620

080044ec <apply_timer_settings>:

static void apply_timer_settings(void){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 80044f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <apply_timer_settings+0x3c>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <apply_timer_settings+0x40>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004530 <apply_timer_settings+0x44>)
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fb1d 	bl	8002b40 <ModelHandle_TimeToSeconds>
 8004506:	4603      	mov	r3, r0
 8004508:	4a07      	ldr	r2, [pc, #28]	@ (8004528 <apply_timer_settings+0x3c>)
 800450a:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 800450c:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <apply_timer_settings+0x48>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	4a09      	ldr	r2, [pc, #36]	@ (8004538 <apply_timer_settings+0x4c>)
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fb12 	bl	8002b40 <ModelHandle_TimeToSeconds>
 800451c:	4603      	mov	r3, r0
 800451e:	4a02      	ldr	r2, [pc, #8]	@ (8004528 <apply_timer_settings+0x3c>)
 8004520:	6093      	str	r3, [r2, #8]
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000598 	.word	0x20000598
 800452c:	20000048 	.word	0x20000048
 8004530:	20000049 	.word	0x20000049
 8004534:	2000004a 	.word	0x2000004a
 8004538:	2000004b 	.word	0x2000004b

0800453c <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 800453c:	b580      	push	{r7, lr}
 800453e:	b0f0      	sub	sp, #448	@ 0x1c0
 8004540:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8004542:	f001 fe23 	bl	800618c <HAL_GetTick>
 8004546:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

    bool cursorBlinkActive = false;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
    switch (ui) {
 8004550:	4bb9      	ldr	r3, [pc, #740]	@ (8004838 <Screen_Update+0x2fc>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b13      	cmp	r3, #19
 8004556:	bf8c      	ite	hi
 8004558:	2201      	movhi	r2, #1
 800455a:	2200      	movls	r2, #0
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	2a00      	cmp	r2, #0
 8004560:	d10f      	bne.n	8004582 <Screen_Update+0x46>
 8004562:	4ab6      	ldr	r2, [pc, #728]	@ (800483c <Screen_Update+0x300>)
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <Screen_Update+0x46>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP:   // NEW: blink on repeats editor
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            break;
 8004580:	e006      	b.n	8004590 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            cursorVisible = true;
 8004588:	4bad      	ldr	r3, [pc, #692]	@ (8004840 <Screen_Update+0x304>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
            break;
 800458e:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8004590:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01e      	beq.n	80045d6 <Screen_Update+0x9a>
 8004598:	4baa      	ldr	r3, [pc, #680]	@ (8004844 <Screen_Update+0x308>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d315      	bcc.n	80045d6 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 80045aa:	4ba5      	ldr	r3, [pc, #660]	@ (8004840 <Screen_Update+0x304>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004840 <Screen_Update+0x304>)
 80045c6:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 80045c8:	4a9e      	ldr	r2, [pc, #632]	@ (8004844 <Screen_Update+0x308>)
 80045ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80045ce:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 80045d0:	4b9d      	ldr	r3, [pc, #628]	@ (8004848 <Screen_Update+0x30c>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 80045d6:	4b98      	ldr	r3, [pc, #608]	@ (8004838 <Screen_Update+0x2fc>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d112      	bne.n	8004604 <Screen_Update+0xc8>
 80045de:	4b9b      	ldr	r3, [pc, #620]	@ (800484c <Screen_Update+0x310>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d309      	bcc.n	8004604 <Screen_Update+0xc8>
        ui = UI_DASH;
 80045f0:	4b91      	ldr	r3, [pc, #580]	@ (8004838 <Screen_Update+0x2fc>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 80045f6:	4a95      	ldr	r2, [pc, #596]	@ (800484c <Screen_Update+0x310>)
 80045f8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80045fc:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 80045fe:	4b92      	ldr	r3, [pc, #584]	@ (8004848 <Screen_Update+0x30c>)
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8004604:	4b8c      	ldr	r3, [pc, #560]	@ (8004838 <Screen_Update+0x2fc>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <Screen_Update+0xf6>
 800460c:	4b8a      	ldr	r3, [pc, #552]	@ (8004838 <Screen_Update+0x2fc>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00e      	beq.n	8004632 <Screen_Update+0xf6>
 8004614:	4b8e      	ldr	r3, [pc, #568]	@ (8004850 <Screen_Update+0x314>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8004622:	4293      	cmp	r3, r2
 8004624:	d305      	bcc.n	8004632 <Screen_Update+0xf6>
        ui = UI_DASH;
 8004626:	4b84      	ldr	r3, [pc, #528]	@ (8004838 <Screen_Update+0x2fc>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 800462c:	4b86      	ldr	r3, [pc, #536]	@ (8004848 <Screen_Update+0x30c>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8004632:	4b81      	ldr	r3, [pc, #516]	@ (8004838 <Screen_Update+0x2fc>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d10e      	bne.n	8004658 <Screen_Update+0x11c>
 800463a:	4b84      	ldr	r3, [pc, #528]	@ (800484c <Screen_Update+0x310>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004648:	d306      	bcc.n	8004658 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 800464a:	4b7f      	ldr	r3, [pc, #508]	@ (8004848 <Screen_Update+0x30c>)
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8004650:	4a7e      	ldr	r2, [pc, #504]	@ (800484c <Screen_Update+0x310>)
 8004652:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8004656:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 8004658:	4b7b      	ldr	r3, [pc, #492]	@ (8004848 <Screen_Update+0x30c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <Screen_Update+0x132>
 8004660:	4b75      	ldr	r3, [pc, #468]	@ (8004838 <Screen_Update+0x2fc>)
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	4b7b      	ldr	r3, [pc, #492]	@ (8004854 <Screen_Update+0x318>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	f000 81ab 	beq.w	80049c4 <Screen_Update+0x488>
        bool fullRedraw = (ui != last_ui);
 800466e:	4b72      	ldr	r3, [pc, #456]	@ (8004838 <Screen_Update+0x2fc>)
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	4b78      	ldr	r3, [pc, #480]	@ (8004854 <Screen_Update+0x318>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
        last_ui = ui;
 8004682:	4b6d      	ldr	r3, [pc, #436]	@ (8004838 <Screen_Update+0x2fc>)
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	4b73      	ldr	r3, [pc, #460]	@ (8004854 <Screen_Update+0x318>)
 8004688:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 800468a:	4b6f      	ldr	r3, [pc, #444]	@ (8004848 <Screen_Update+0x30c>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 8004690:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <Screen_Update+0x160>
 8004698:	f7fd fab1 	bl	8001bfe <lcd_clear>

        switch (ui) {
 800469c:	4b66      	ldr	r3, [pc, #408]	@ (8004838 <Screen_Update+0x2fc>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b13      	cmp	r3, #19
 80046a2:	f200 8188 	bhi.w	80049b6 <Screen_Update+0x47a>
 80046a6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <Screen_Update+0x170>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	08004703 	.word	0x08004703
 80046b4:	08004709 	.word	0x08004709
 80046b8:	0800470f 	.word	0x0800470f
 80046bc:	08004715 	.word	0x08004715
 80046c0:	0800471b 	.word	0x0800471b
 80046c4:	08004733 	.word	0x08004733
 80046c8:	08004767 	.word	0x08004767
 80046cc:	0800479b 	.word	0x0800479b
 80046d0:	080047cf 	.word	0x080047cf
 80046d4:	08004721 	.word	0x08004721
 80046d8:	08004803 	.word	0x08004803
 80046dc:	08004885 	.word	0x08004885
 80046e0:	08004727 	.word	0x08004727
 80046e4:	080048b9 	.word	0x080048b9
 80046e8:	080048ed 	.word	0x080048ed
 80046ec:	08004921 	.word	0x08004921
 80046f0:	0800472d 	.word	0x0800472d
 80046f4:	08004953 	.word	0x08004953
 80046f8:	08004987 	.word	0x08004987
            case UI_WELCOME: show_welcome(); break;
 80046fc:	f7ff fc00 	bl	8003f00 <show_welcome>
 8004700:	e160      	b.n	80049c4 <Screen_Update+0x488>
            case UI_DASH: show_dash(); break;
 8004702:	f7ff fc0d 	bl	8003f20 <show_dash>
 8004706:	e15d      	b.n	80049c4 <Screen_Update+0x488>
            case UI_MENU: show_menu(); break;
 8004708:	f7ff fccc 	bl	80040a4 <show_menu>
 800470c:	e15a      	b.n	80049c4 <Screen_Update+0x488>
            case UI_MANUAL: show_manual(); break;
 800470e:	f7ff fd27 	bl	8004160 <show_manual>
 8004712:	e157      	b.n	80049c4 <Screen_Update+0x488>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8004714:	f7ff fd54 	bl	80041c0 <show_semi_auto>
 8004718:	e154      	b.n	80049c4 <Screen_Update+0x488>
            case UI_TIMER: show_timer(); break;
 800471a:	f7ff fd81 	bl	8004220 <show_timer>
 800471e:	e151      	b.n	80049c4 <Screen_Update+0x488>
            case UI_SEARCH: show_search(); break;
 8004720:	f7ff fdb4 	bl	800428c <show_search>
 8004724:	e14e      	b.n	80049c4 <Screen_Update+0x488>
            case UI_COUNTDOWN: show_countdown(); break;
 8004726:	f7ff fdef 	bl	8004308 <show_countdown>
 800472a:	e14b      	b.n	80049c4 <Screen_Update+0x488>
            case UI_TWIST: show_twist(); break;
 800472c:	f7ff fe48 	bl	80043c0 <show_twist>
 8004730:	e148      	b.n	80049c4 <Screen_Update+0x488>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 8004732:	4b49      	ldr	r3, [pc, #292]	@ (8004858 <Screen_Update+0x31c>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800473a:	4a48      	ldr	r2, [pc, #288]	@ (800485c <Screen_Update+0x320>)
 800473c:	2111      	movs	r1, #17
 800473e:	f008 fa67 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004742:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004746:	4a46      	ldr	r2, [pc, #280]	@ (8004860 <Screen_Update+0x324>)
 8004748:	2111      	movs	r1, #17
 800474a:	4618      	mov	r0, r3
 800474c:	f008 fa60 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004750:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fb61 	bl	8003e1c <lcd_line0>
 800475a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fb68 	bl	8003e34 <lcd_line1>
 8004764:	e12e      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 8004766:	4b3f      	ldr	r3, [pc, #252]	@ (8004864 <Screen_Update+0x328>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800476e:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <Screen_Update+0x32c>)
 8004770:	2111      	movs	r1, #17
 8004772:	f008 fa4d 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004776:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800477a:	4a39      	ldr	r2, [pc, #228]	@ (8004860 <Screen_Update+0x324>)
 800477c:	2111      	movs	r1, #17
 800477e:	4618      	mov	r0, r3
 8004780:	f008 fa46 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004784:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fb47 	bl	8003e1c <lcd_line0>
 800478e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fb4e 	bl	8003e34 <lcd_line1>
 8004798:	e114      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 800479a:	4b34      	ldr	r3, [pc, #208]	@ (800486c <Screen_Update+0x330>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80047a2:	4a33      	ldr	r2, [pc, #204]	@ (8004870 <Screen_Update+0x334>)
 80047a4:	2111      	movs	r1, #17
 80047a6:	f008 fa33 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80047aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004860 <Screen_Update+0x324>)
 80047b0:	2111      	movs	r1, #17
 80047b2:	4618      	mov	r0, r3
 80047b4:	f008 fa2c 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80047b8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fb2d 	bl	8003e1c <lcd_line0>
 80047c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fb34 	bl	8003e34 <lcd_line1>
 80047cc:	e0fa      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 80047ce:	4b29      	ldr	r3, [pc, #164]	@ (8004874 <Screen_Update+0x338>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80047d6:	4a28      	ldr	r2, [pc, #160]	@ (8004878 <Screen_Update+0x33c>)
 80047d8:	2111      	movs	r1, #17
 80047da:	f008 fa19 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80047de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <Screen_Update+0x324>)
 80047e4:	2111      	movs	r1, #17
 80047e6:	4618      	mov	r0, r3
 80047e8:	f008 fa12 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80047ec:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fb13 	bl	8003e1c <lcd_line0>
 80047f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fb1a 	bl	8003e34 <lcd_line1>
 8004800:	e0e0      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 8004802:	4b1e      	ldr	r3, [pc, #120]	@ (800487c <Screen_Update+0x340>)
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800480a:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <Screen_Update+0x344>)
 800480c:	2111      	movs	r1, #17
 800480e:	f008 f9ff 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004812:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8004816:	4a12      	ldr	r2, [pc, #72]	@ (8004860 <Screen_Update+0x324>)
 8004818:	2111      	movs	r1, #17
 800481a:	4618      	mov	r0, r3
 800481c:	f008 f9f8 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004820:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff faf9 	bl	8003e1c <lcd_line0>
 800482a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fb00 	bl	8003e34 <lcd_line1>
 8004834:	e0c6      	b.n	80049c4 <Screen_Update+0x488>
 8004836:	bf00      	nop
 8004838:	20000614 	.word	0x20000614
 800483c:	000cdbc4 	.word	0x000cdbc4
 8004840:	2000002b 	.word	0x2000002b
 8004844:	20000618 	.word	0x20000618
 8004848:	20000615 	.word	0x20000615
 800484c:	20000610 	.word	0x20000610
 8004850:	2000061c 	.word	0x2000061c
 8004854:	2000002a 	.word	0x2000002a
 8004858:	20000048 	.word	0x20000048
 800485c:	0800f41c 	.word	0x0800f41c
 8004860:	0800f430 	.word	0x0800f430
 8004864:	20000049 	.word	0x20000049
 8004868:	0800f444 	.word	0x0800f444
 800486c:	2000004a 	.word	0x2000004a
 8004870:	0800f458 	.word	0x0800f458
 8004874:	2000004b 	.word	0x2000004b
 8004878:	0800f46c 	.word	0x0800f46c
 800487c:	2000004c 	.word	0x2000004c
 8004880:	0800f480 	.word	0x0800f480
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 8004884:	4b52      	ldr	r3, [pc, #328]	@ (80049d0 <Screen_Update+0x494>)
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800488c:	4a51      	ldr	r2, [pc, #324]	@ (80049d4 <Screen_Update+0x498>)
 800488e:	2111      	movs	r1, #17
 8004890:	f008 f9be 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004894:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8004898:	4a4f      	ldr	r2, [pc, #316]	@ (80049d8 <Screen_Update+0x49c>)
 800489a:	2111      	movs	r1, #17
 800489c:	4618      	mov	r0, r3
 800489e:	f008 f9b7 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80048a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fab8 	bl	8003e1c <lcd_line0>
 80048ac:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fabf 	bl	8003e34 <lcd_line1>
 80048b6:	e085      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3u", edit_countdown_min);
 80048b8:	4b48      	ldr	r3, [pc, #288]	@ (80049dc <Screen_Update+0x4a0>)
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 80048c0:	4a47      	ldr	r2, [pc, #284]	@ (80049e0 <Screen_Update+0x4a4>)
 80048c2:	2111      	movs	r1, #17
 80048c4:	f008 f9a4 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelNext");
 80048c8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80048cc:	4a45      	ldr	r2, [pc, #276]	@ (80049e4 <Screen_Update+0x4a8>)
 80048ce:	2111      	movs	r1, #17
 80048d0:	4618      	mov	r0, r3
 80048d2:	f008 f99d 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80048d6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fa9e 	bl	8003e1c <lcd_line0>
 80048e0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff faa5 	bl	8003e34 <lcd_line1>
 80048ea:	e06b      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_REP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Reps: %3u", edit_countdown_rep);
 80048ec:	4b3e      	ldr	r3, [pc, #248]	@ (80049e8 <Screen_Update+0x4ac>)
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80048f4:	4a3d      	ldr	r2, [pc, #244]	@ (80049ec <Screen_Update+0x4b0>)
 80048f6:	2111      	movs	r1, #17
 80048f8:	f008 f98a 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- Start");
 80048fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004900:	4a3b      	ldr	r2, [pc, #236]	@ (80049f0 <Screen_Update+0x4b4>)
 8004902:	2111      	movs	r1, #17
 8004904:	4618      	mov	r0, r3
 8004906:	f008 f983 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800490a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa84 	bl	8003e1c <lcd_line0>
 8004914:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fa8b 	bl	8003e34 <lcd_line1>
 800491e:	e051      	b.n	80049c4 <Screen_Update+0x488>
            }

            case UI_COUNTDOWN_TOGGLE: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Countdown Setup");
 8004920:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004924:	4a33      	ldr	r2, [pc, #204]	@ (80049f4 <Screen_Update+0x4b8>)
 8004926:	2111      	movs	r1, #17
 8004928:	4618      	mov	r0, r3
 800492a:	f008 f971 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Enable   Edit");
 800492e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004932:	4a31      	ldr	r2, [pc, #196]	@ (80049f8 <Screen_Update+0x4bc>)
 8004934:	2111      	movs	r1, #17
 8004936:	4618      	mov	r0, r3
 8004938:	f008 f96a 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1);
 800493c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fa6b 	bl	8003e1c <lcd_line0>
 8004946:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fa72 	bl	8003e34 <lcd_line1>
                break;
 8004950:	e038      	b.n	80049c4 <Screen_Update+0x488>
            }

            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 8004952:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <Screen_Update+0x4c0>)
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800495a:	4a29      	ldr	r2, [pc, #164]	@ (8004a00 <Screen_Update+0x4c4>)
 800495c:	2111      	movs	r1, #17
 800495e:	f008 f957 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004966:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <Screen_Update+0x49c>)
 8004968:	2111      	movs	r1, #17
 800496a:	4618      	mov	r0, r3
 800496c:	f008 f950 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004970:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fa51 	bl	8003e1c <lcd_line0>
 800497a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fa58 	bl	8003e34 <lcd_line1>
 8004984:	e01e      	b.n	80049c4 <Screen_Update+0x488>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 8004986:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <Screen_Update+0x4c8>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f107 0014 	add.w	r0, r7, #20
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <Screen_Update+0x4cc>)
 8004990:	2111      	movs	r1, #17
 8004992:	f008 f93d 	bl	800cc10 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004996:	463b      	mov	r3, r7
 8004998:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <Screen_Update+0x49c>)
 800499a:	2111      	movs	r1, #17
 800499c:	4618      	mov	r0, r3
 800499e:	f008 f937 	bl	800cc10 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80049a2:	f107 0314 	add.w	r3, r7, #20
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fa38 	bl	8003e1c <lcd_line0>
 80049ac:	463b      	mov	r3, r7
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fa40 	bl	8003e34 <lcd_line1>
 80049b4:	e006      	b.n	80049c4 <Screen_Update+0x488>
            }
            default:
                lcd_line0("Not Implemented");
 80049b6:	4815      	ldr	r0, [pc, #84]	@ (8004a0c <Screen_Update+0x4d0>)
 80049b8:	f7ff fa30 	bl	8003e1c <lcd_line0>
                lcd_line1("                ");
 80049bc:	4814      	ldr	r0, [pc, #80]	@ (8004a10 <Screen_Update+0x4d4>)
 80049be:	f7ff fa39 	bl	8003e34 <lcd_line1>
                break;
 80049c2:	bf00      	nop
        }
    }
}
 80049c4:	bf00      	nop
 80049c6:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	2000004e 	.word	0x2000004e
 80049d4:	0800f490 	.word	0x0800f490
 80049d8:	0800f430 	.word	0x0800f430
 80049dc:	20000054 	.word	0x20000054
 80049e0:	0800f4a0 	.word	0x0800f4a0
 80049e4:	0800f4b0 	.word	0x0800f4b0
 80049e8:	20000056 	.word	0x20000056
 80049ec:	0800f4c0 	.word	0x0800f4c0
 80049f0:	0800f4d0 	.word	0x0800f4d0
 80049f4:	0800f4e0 	.word	0x0800f4e0
 80049f8:	0800f4f0 	.word	0x0800f4f0
 80049fc:	20000050 	.word	0x20000050
 8004a00:	0800f500 	.word	0x0800f500
 8004a04:	20000052 	.word	0x20000052
 8004a08:	0800f510 	.word	0x0800f510
 8004a0c:	0800f520 	.word	0x0800f520
 8004a10:	0800f29c 	.word	0x0800f29c

08004a14 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
    lcd_init();
 8004a18:	f7fd f935 	bl	8001c86 <lcd_init>
    ui = UI_WELCOME;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a90 <Screen_Init+0x7c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <Screen_Init+0x80>)
 8004a24:	2214      	movs	r2, #20
 8004a26:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <Screen_Init+0x84>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8004a2e:	f001 fbad 	bl	800618c <HAL_GetTick>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <Screen_Init+0x88>)
 8004a36:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8004a38:	f7ff fa08 	bl	8003e4c <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <Screen_Init+0x8c>)
 8004a3e:	885a      	ldrh	r2, [r3, #2]
 8004a40:	4b18      	ldr	r3, [pc, #96]	@ (8004aa4 <Screen_Init+0x90>)
 8004a42:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <Screen_Init+0x8c>)
 8004a46:	889a      	ldrh	r2, [r3, #4]
 8004a48:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <Screen_Init+0x94>)
 8004a4a:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s   = twistSettings.onDurationSeconds;
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <Screen_Init+0x98>)
 8004a4e:	885a      	ldrh	r2, [r3, #2]
 8004a50:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <Screen_Init+0x9c>)
 8004a52:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s  = twistSettings.offDurationSeconds;
 8004a54:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <Screen_Init+0x98>)
 8004a56:	889a      	ldrh	r2, [r3, #4]
 8004a58:	4b16      	ldr	r3, [pc, #88]	@ (8004ab4 <Screen_Init+0xa0>)
 8004a5a:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8004a5c:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <Screen_Init+0xa4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <Screen_Init+0xa8>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ac0 <Screen_Init+0xac>)
 8004a6c:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_min == 0) edit_countdown_min = 5; // sane default
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <Screen_Init+0xac>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <Screen_Init+0x68>
 8004a76:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <Screen_Init+0xac>)
 8004a78:	2205      	movs	r2, #5
 8004a7a:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <Screen_Init+0xb0>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <Screen_Init+0x76>
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <Screen_Init+0xb0>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	801a      	strh	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000614 	.word	0x20000614
 8004a94:	2000002a 	.word	0x2000002a
 8004a98:	20000615 	.word	0x20000615
 8004a9c:	20000610 	.word	0x20000610
 8004aa0:	2000001c 	.word	0x2000001c
 8004aa4:	2000004c 	.word	0x2000004c
 8004aa8:	2000004e 	.word	0x2000004e
 8004aac:	20000024 	.word	0x20000024
 8004ab0:	20000050 	.word	0x20000050
 8004ab4:	20000052 	.word	0x20000052
 8004ab8:	2000058c 	.word	0x2000058c
 8004abc:	88888889 	.word	0x88888889
 8004ac0:	20000054 	.word	0x20000054
 8004ac4:	20000056 	.word	0x20000056

08004ac8 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004ace:	f7ff f9bd 	bl	8003e4c <refreshInactivityTimer>

    switch (ui){
 8004ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d00 <menu_select+0x238>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b13      	cmp	r3, #19
 8004ad8:	f200 8109 	bhi.w	8004cee <menu_select+0x226>
 8004adc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <menu_select+0x1c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b35 	.word	0x08004b35
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004b49 	.word	0x08004b49
 8004af0:	08004bb7 	.word	0x08004bb7
 8004af4:	08004bc3 	.word	0x08004bc3
 8004af8:	08004be3 	.word	0x08004be3
 8004afc:	08004beb 	.word	0x08004beb
 8004b00:	08004bf3 	.word	0x08004bf3
 8004b04:	08004bfb 	.word	0x08004bfb
 8004b08:	08004c03 	.word	0x08004c03
 8004b0c:	08004c0f 	.word	0x08004c0f
 8004b10:	08004c17 	.word	0x08004c17
 8004b14:	08004c1f 	.word	0x08004c1f
 8004b18:	08004c2b 	.word	0x08004c2b
 8004b1c:	08004c49 	.word	0x08004c49
 8004b20:	08004c51 	.word	0x08004c51
 8004b24:	08004c59 	.word	0x08004c59
 8004b28:	08004c99 	.word	0x08004c99
 8004b2c:	08004cc1 	.word	0x08004cc1
 8004b30:	08004cc9 	.word	0x08004cc9
        case UI_WELCOME: ui = UI_DASH; break;
 8004b34:	4b72      	ldr	r3, [pc, #456]	@ (8004d00 <menu_select+0x238>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e0d9      	b.n	8004cf0 <menu_select+0x228>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8004b3c:	4b70      	ldr	r3, [pc, #448]	@ (8004d00 <menu_select+0x238>)
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	f7ff f98f 	bl	8003e64 <goto_menu_top>
 8004b46:	e0d3      	b.n	8004cf0 <menu_select+0x228>

        case UI_MENU:
            switch (menu_idx){
 8004b48:	4b6e      	ldr	r3, [pc, #440]	@ (8004d04 <menu_select+0x23c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b06      	cmp	r3, #6
 8004b4e:	d82d      	bhi.n	8004bac <menu_select+0xe4>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <menu_select+0x90>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004b9d 	.word	0x08004b9d
 8004b70:	08004ba5 	.word	0x08004ba5
                case 0: ui = UI_MANUAL; break;
 8004b74:	4b62      	ldr	r3, [pc, #392]	@ (8004d00 <menu_select+0x238>)
 8004b76:	2203      	movs	r2, #3
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e01b      	b.n	8004bb4 <menu_select+0xec>
                case 1: ui = UI_SEMI_AUTO; break;
 8004b7c:	4b60      	ldr	r3, [pc, #384]	@ (8004d00 <menu_select+0x238>)
 8004b7e:	2204      	movs	r2, #4
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e017      	b.n	8004bb4 <menu_select+0xec>
                case 2: ui = UI_TIMER; break;
 8004b84:	4b5e      	ldr	r3, [pc, #376]	@ (8004d00 <menu_select+0x238>)
 8004b86:	2205      	movs	r2, #5
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e013      	b.n	8004bb4 <menu_select+0xec>
                case 3: ui = UI_SEARCH; break;
 8004b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004d00 <menu_select+0x238>)
 8004b8e:	220a      	movs	r2, #10
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e00f      	b.n	8004bb4 <menu_select+0xec>
                case 4: ui = UI_COUNTDOWN; break;
 8004b94:	4b5a      	ldr	r3, [pc, #360]	@ (8004d00 <menu_select+0x238>)
 8004b96:	220d      	movs	r2, #13
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e00b      	b.n	8004bb4 <menu_select+0xec>
                case 5: ui = UI_TWIST; break;
 8004b9c:	4b58      	ldr	r3, [pc, #352]	@ (8004d00 <menu_select+0x238>)
 8004b9e:	2211      	movs	r2, #17
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e007      	b.n	8004bb4 <menu_select+0xec>
                case 6: ui = UI_DASH; break;
 8004ba4:	4b56      	ldr	r3, [pc, #344]	@ (8004d00 <menu_select+0x238>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e003      	b.n	8004bb4 <menu_select+0xec>
                default: ui = UI_DASH; break;
 8004bac:	4b54      	ldr	r3, [pc, #336]	@ (8004d00 <menu_select+0x238>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	bf00      	nop
            }
            break;
 8004bb4:	e09c      	b.n	8004cf0 <menu_select+0x228>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004bb6:	f7fe f8b5 	bl	8002d24 <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004bba:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <menu_select+0x240>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
            break;
 8004bc0:	e096      	b.n	8004cf0 <menu_select+0x228>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 8004bc2:	4b52      	ldr	r3, [pc, #328]	@ (8004d0c <menu_select+0x244>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	f083 0301 	eor.w	r3, r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <menu_select+0x10e>
 8004bd0:	f7ff fc72 	bl	80044b8 <enable_semi_auto>
 8004bd4:	e001      	b.n	8004bda <menu_select+0x112>
            else disable_semi_auto();
 8004bd6:	f7ff fc7d 	bl	80044d4 <disable_semi_auto>
            ui = UI_DASH;
 8004bda:	4b49      	ldr	r3, [pc, #292]	@ (8004d00 <menu_select+0x238>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
            break;
 8004be0:	e086      	b.n	8004cf0 <menu_select+0x228>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 8004be2:	4b47      	ldr	r3, [pc, #284]	@ (8004d00 <menu_select+0x238>)
 8004be4:	2206      	movs	r2, #6
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e082      	b.n	8004cf0 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004bea:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <menu_select+0x238>)
 8004bec:	2207      	movs	r2, #7
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e07e      	b.n	8004cf0 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8004bf2:	4b43      	ldr	r3, [pc, #268]	@ (8004d00 <menu_select+0x238>)
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e07a      	b.n	8004cf0 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8004bfa:	4b41      	ldr	r3, [pc, #260]	@ (8004d00 <menu_select+0x238>)
 8004bfc:	2209      	movs	r2, #9
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e076      	b.n	8004cf0 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 8004c02:	f7ff fc73 	bl	80044ec <apply_timer_settings>
            ui = UI_TIMER;
 8004c06:	4b3e      	ldr	r3, [pc, #248]	@ (8004d00 <menu_select+0x238>)
 8004c08:	2205      	movs	r2, #5
 8004c0a:	701a      	strb	r2, [r3, #0]
            break;
 8004c0c:	e070      	b.n	8004cf0 <menu_select+0x228>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8004c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d00 <menu_select+0x238>)
 8004c10:	220b      	movs	r2, #11
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	e06c      	b.n	8004cf0 <menu_select+0x228>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 8004c16:	4b3a      	ldr	r3, [pc, #232]	@ (8004d00 <menu_select+0x238>)
 8004c18:	220c      	movs	r2, #12
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e068      	b.n	8004cf0 <menu_select+0x228>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8004c1e:	f7ff fc0f 	bl	8004440 <apply_search_settings>
            ui = UI_SEARCH; break;
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <menu_select+0x238>)
 8004c24:	220a      	movs	r2, #10
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	e062      	b.n	8004cf0 <menu_select+0x228>

        case UI_COUNTDOWN:
            if (countdownActive) {
 8004c2a:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <menu_select+0x248>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <menu_select+0x178>
                ModelHandle_StopCountdown();
 8004c34:	f7fe f8b8 	bl	8002da8 <ModelHandle_StopCountdown>
                screenNeedsRefresh = true;
 8004c38:	4b33      	ldr	r3, [pc, #204]	@ (8004d08 <menu_select+0x240>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8004c3e:	e057      	b.n	8004cf0 <menu_select+0x228>
                ui = UI_COUNTDOWN_EDIT_MIN;
 8004c40:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <menu_select+0x238>)
 8004c42:	220e      	movs	r2, #14
 8004c44:	701a      	strb	r2, [r3, #0]
            break;
 8004c46:	e053      	b.n	8004cf0 <menu_select+0x228>


        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN_EDIT_REP;
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <menu_select+0x238>)
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	701a      	strb	r2, [r3, #0]
            break;
 8004c4e:	e04f      	b.n	8004cf0 <menu_select+0x228>

        case UI_COUNTDOWN_EDIT_REP:
            // after repeats, go to enable/edit screen
            ui = UI_COUNTDOWN_TOGGLE;
 8004c50:	4b2b      	ldr	r3, [pc, #172]	@ (8004d00 <menu_select+0x238>)
 8004c52:	2210      	movs	r2, #16
 8004c54:	701a      	strb	r2, [r3, #0]
            break;
 8004c56:	e04b      	b.n	8004cf0 <menu_select+0x228>

        case UI_COUNTDOWN_TOGGLE:
            // Enable or Edit based on menu index
            // For simplicity, SELECT always means "Enable"
            {
                uint32_t seconds = (uint32_t)edit_countdown_min * 60u;
 8004c58:	4b2e      	ldr	r3, [pc, #184]	@ (8004d14 <menu_select+0x24c>)
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	607b      	str	r3, [r7, #4]
                if (seconds == 0) seconds = 60;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <menu_select+0x1aa>
 8004c6e:	233c      	movs	r3, #60	@ 0x3c
 8004c70:	607b      	str	r3, [r7, #4]
                if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004c72:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <menu_select+0x250>)
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <menu_select+0x1b8>
 8004c7a:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <menu_select+0x250>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	801a      	strh	r2, [r3, #0]
                apply_countdown_settings();
 8004c80:	f7ff fc06 	bl	8004490 <apply_countdown_settings>
                ModelHandle_StartCountdown(seconds, (uint16_t)edit_countdown_rep);
 8004c84:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <menu_select+0x250>)
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe f8d2 	bl	8002e34 <ModelHandle_StartCountdown>
                ui = UI_COUNTDOWN;
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <menu_select+0x238>)
 8004c92:	220d      	movs	r2, #13
 8004c94:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004c96:	e02b      	b.n	8004cf0 <menu_select+0x228>


        case UI_TWIST:
            // SELECT toggles enable/stop; UP/DOWN will switch to edit states
            if (twistSettings.twistActive) {
 8004c98:	4b20      	ldr	r3, [pc, #128]	@ (8004d1c <menu_select+0x254>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <menu_select+0x1de>
                ModelHandle_StopTwist();
 8004ca0:	f7fe f9c8 	bl	8003034 <ModelHandle_StopTwist>
 8004ca4:	e008      	b.n	8004cb8 <menu_select+0x1f0>
            } else {
                // use current edit buffers (or the applied values) to start
                ModelHandle_StartTwist(edit_twist_on_s, edit_twist_off_s);
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <menu_select+0x258>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <menu_select+0x25c>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe f97a 	bl	8002fac <ModelHandle_StartTwist>
            }
            screenNeedsRefresh = true;
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <menu_select+0x240>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
            break;
 8004cbe:	e017      	b.n	8004cf0 <menu_select+0x228>

        case UI_TWIST_EDIT_ON:      ui = UI_TWIST_EDIT_OFF; break;
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <menu_select+0x238>)
 8004cc2:	2213      	movs	r2, #19
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e013      	b.n	8004cf0 <menu_select+0x228>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();   // writes into twistSettings
 8004cc8:	f7ff fbce 	bl	8004468 <apply_twist_settings>
            // If active, apply live (optional, keeps running with new values)
            if (twistSettings.twistActive) {
 8004ccc:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <menu_select+0x254>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <menu_select+0x21e>
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004cd4:	4b11      	ldr	r3, [pc, #68]	@ (8004d1c <menu_select+0x254>)
 8004cd6:	885b      	ldrh	r3, [r3, #2]
 8004cd8:	461a      	mov	r2, r3
                                       twistSettings.offDurationSeconds);
 8004cda:	4b10      	ldr	r3, [pc, #64]	@ (8004d1c <menu_select+0x254>)
 8004cdc:	889b      	ldrh	r3, [r3, #4]
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe f963 	bl	8002fac <ModelHandle_StartTwist>
            }
            ui = UI_TWIST; break;
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <menu_select+0x238>)
 8004ce8:	2211      	movs	r2, #17
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e000      	b.n	8004cf0 <menu_select+0x228>


        default: break;
 8004cee:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <menu_select+0x240>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000614 	.word	0x20000614
 8004d04:	20000624 	.word	0x20000624
 8004d08:	20000615 	.word	0x20000615
 8004d0c:	20000620 	.word	0x20000620
 8004d10:	20000572 	.word	0x20000572
 8004d14:	20000054 	.word	0x20000054
 8004d18:	20000056 	.word	0x20000056
 8004d1c:	20000024 	.word	0x20000024
 8004d20:	20000050 	.word	0x20000050
 8004d24:	20000052 	.word	0x20000052

08004d28 <menu_reset>:

static void menu_reset(void){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004d2c:	f7ff f88e 	bl	8003e4c <refreshInactivityTimer>

    switch (ui) {
 8004d30:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <menu_reset+0xb0>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	2b12      	cmp	r3, #18
 8004d38:	d844      	bhi.n	8004dc4 <menu_reset+0x9c>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <menu_reset+0x18>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d8d 	.word	0x08004d8d
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d8d 	.word	0x08004d8d
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004da5 	.word	0x08004da5
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004db5 	.word	0x08004db5
 8004d7c:	08004dc5 	.word	0x08004dc5
 8004d80:	08004d8d 	.word	0x08004d8d
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004dbd 	.word	0x08004dbd
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <menu_reset+0xb0>)
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e01b      	b.n	8004dcc <menu_reset+0xa4>
        case UI_MENU: ui = UI_DASH; break;
 8004d94:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <menu_reset+0xb0>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e017      	b.n	8004dcc <menu_reset+0xa4>
        case UI_DASH: ui = UI_WELCOME; break;
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <menu_reset+0xb0>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e013      	b.n	8004dcc <menu_reset+0xa4>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <menu_reset+0xb0>)
 8004da6:	2205      	movs	r2, #5
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e00f      	b.n	8004dcc <menu_reset+0xa4>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <menu_reset+0xb0>)
 8004dae:	220a      	movs	r2, #10
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e00b      	b.n	8004dcc <menu_reset+0xa4>
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP: ui = UI_COUNTDOWN; break;  // NEW: back from repeats editor
 8004db4:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <menu_reset+0xb0>)
 8004db6:	220d      	movs	r2, #13
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e007      	b.n	8004dcc <menu_reset+0xa4>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <menu_reset+0xb0>)
 8004dbe:	2211      	movs	r2, #17
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <menu_reset+0xa4>
        default: ui = UI_MENU; break;
 8004dc4:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <menu_reset+0xb0>)
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <menu_reset+0xb4>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000614 	.word	0x20000614
 8004ddc:	20000615 	.word	0x20000615

08004de0 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_NONE) return;
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8288 	beq.w	8005302 <Screen_HandleButton+0x522>

    /* Quick RESET → manual toggle (your existing behavior) */
    if (b == BTN_RESET) {
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d102      	bne.n	8004dfe <Screen_HandleButton+0x1e>
        ModelHandle_ToggleManual();
 8004df8:	f7fd ff94 	bl	8002d24 <ModelHandle_ToggleManual>
        return;
 8004dfc:	e282      	b.n	8005304 <Screen_HandleButton+0x524>
    }

    /* =======================
       UP key
       ======================= */
    if (b == BTN_UP) {
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	f040 80bf 	bne.w	8004f84 <Screen_HandleButton+0x1a4>
        switch (ui) {
 8004e06:	4b9e      	ldr	r3, [pc, #632]	@ (8005080 <Screen_HandleButton+0x2a0>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	3b02      	subs	r3, #2
 8004e0c:	2b11      	cmp	r3, #17
 8004e0e:	f200 80a6 	bhi.w	8004f5e <Screen_HandleButton+0x17e>
 8004e12:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <Screen_HandleButton+0x38>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004f5f 	.word	0x08004f5f
 8004e20:	08004f5f 	.word	0x08004f5f
 8004e24:	08004f5f 	.word	0x08004f5f
 8004e28:	08004e75 	.word	0x08004e75
 8004e2c:	08004e8b 	.word	0x08004e8b
 8004e30:	08004ea1 	.word	0x08004ea1
 8004e34:	08004eb7 	.word	0x08004eb7
 8004e38:	08004ecd 	.word	0x08004ecd
 8004e3c:	08004edb 	.word	0x08004edb
 8004e40:	08004ee9 	.word	0x08004ee9
 8004e44:	08004f5f 	.word	0x08004f5f
 8004e48:	08004ef7 	.word	0x08004ef7
 8004e4c:	08004f05 	.word	0x08004f05
 8004e50:	08004f13 	.word	0x08004f13
 8004e54:	08004f21 	.word	0x08004f21
 8004e58:	08004f2f 	.word	0x08004f2f
 8004e5c:	08004f47 	.word	0x08004f47
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004e60:	4b88      	ldr	r3, [pc, #544]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd7c      	ble.n	8004f62 <Screen_HandleButton+0x182>
 8004e68:	4b86      	ldr	r3, [pc, #536]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a85      	ldr	r2, [pc, #532]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e076      	b.n	8004f62 <Screen_HandleButton+0x182>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004e74:	4b84      	ldr	r3, [pc, #528]	@ (8005088 <Screen_HandleButton+0x2a8>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b16      	cmp	r3, #22
 8004e7a:	d874      	bhi.n	8004f66 <Screen_HandleButton+0x186>
 8004e7c:	4b82      	ldr	r3, [pc, #520]	@ (8005088 <Screen_HandleButton+0x2a8>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4b80      	ldr	r3, [pc, #512]	@ (8005088 <Screen_HandleButton+0x2a8>)
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	e06d      	b.n	8004f66 <Screen_HandleButton+0x186>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004e8a:	4b80      	ldr	r3, [pc, #512]	@ (800508c <Screen_HandleButton+0x2ac>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b3a      	cmp	r3, #58	@ 0x3a
 8004e90:	d86b      	bhi.n	8004f6a <Screen_HandleButton+0x18a>
 8004e92:	4b7e      	ldr	r3, [pc, #504]	@ (800508c <Screen_HandleButton+0x2ac>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4b7c      	ldr	r3, [pc, #496]	@ (800508c <Screen_HandleButton+0x2ac>)
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e064      	b.n	8004f6a <Screen_HandleButton+0x18a>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b16      	cmp	r3, #22
 8004ea6:	d862      	bhi.n	8004f6e <Screen_HandleButton+0x18e>
 8004ea8:	4b79      	ldr	r3, [pc, #484]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	4b77      	ldr	r3, [pc, #476]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e05b      	b.n	8004f6e <Screen_HandleButton+0x18e>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004eb6:	4b77      	ldr	r3, [pc, #476]	@ (8005094 <Screen_HandleButton+0x2b4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b3a      	cmp	r3, #58	@ 0x3a
 8004ebc:	d859      	bhi.n	8004f72 <Screen_HandleButton+0x192>
 8004ebe:	4b75      	ldr	r3, [pc, #468]	@ (8005094 <Screen_HandleButton+0x2b4>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4b73      	ldr	r3, [pc, #460]	@ (8005094 <Screen_HandleButton+0x2b4>)
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e052      	b.n	8004f72 <Screen_HandleButton+0x192>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 8004ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8005080 <Screen_HandleButton+0x2a0>)
 8004ece:	220b      	movs	r2, #11
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	4b71      	ldr	r3, [pc, #452]	@ (8005098 <Screen_HandleButton+0x2b8>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e214      	b.n	8005304 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   edit_search_gap_s += 5;  break;
 8004eda:	4b70      	ldr	r3, [pc, #448]	@ (800509c <Screen_HandleButton+0x2bc>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	3305      	adds	r3, #5
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800509c <Screen_HandleButton+0x2bc>)
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e049      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_SEARCH_EDIT_DRY:   edit_search_dry_s += 1;  break;
 8004ee8:	4b6d      	ldr	r3, [pc, #436]	@ (80050a0 <Screen_HandleButton+0x2c0>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80050a0 <Screen_HandleButton+0x2c0>)
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e042      	b.n	8004f7c <Screen_HandleButton+0x19c>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80050a4 <Screen_HandleButton+0x2c4>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	4b69      	ldr	r3, [pc, #420]	@ (80050a4 <Screen_HandleButton+0x2c4>)
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e03b      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_EDIT_REP: edit_countdown_rep++; break;
 8004f04:	4b68      	ldr	r3, [pc, #416]	@ (80050a8 <Screen_HandleButton+0x2c8>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	4b66      	ldr	r3, [pc, #408]	@ (80050a8 <Screen_HandleButton+0x2c8>)
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e034      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_TOGGLE:   ui = UI_COUNTDOWN_EDIT_MIN; screenNeedsRefresh = true; return;
 8004f12:	4b5b      	ldr	r3, [pc, #364]	@ (8005080 <Screen_HandleButton+0x2a0>)
 8004f14:	220e      	movs	r2, #14
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	4b5f      	ldr	r3, [pc, #380]	@ (8005098 <Screen_HandleButton+0x2b8>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e1f1      	b.n	8005304 <Screen_HandleButton+0x524>

            /* Twist edits */
            case UI_TWIST:             ui = UI_TWIST_EDIT_ON; screenNeedsRefresh = true; return;
 8004f20:	4b57      	ldr	r3, [pc, #348]	@ (8005080 <Screen_HandleButton+0x2a0>)
 8004f22:	2212      	movs	r2, #18
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	4b5c      	ldr	r3, [pc, #368]	@ (8005098 <Screen_HandleButton+0x2b8>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e1ea      	b.n	8005304 <Screen_HandleButton+0x524>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80050ac <Screen_HandleButton+0x2cc>)
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004f36:	d21e      	bcs.n	8004f76 <Screen_HandleButton+0x196>
 8004f38:	4b5c      	ldr	r3, [pc, #368]	@ (80050ac <Screen_HandleButton+0x2cc>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <Screen_HandleButton+0x2cc>)
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e017      	b.n	8004f76 <Screen_HandleButton+0x196>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004f46:	4b5a      	ldr	r3, [pc, #360]	@ (80050b0 <Screen_HandleButton+0x2d0>)
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004f4e:	d214      	bcs.n	8004f7a <Screen_HandleButton+0x19a>
 8004f50:	4b57      	ldr	r3, [pc, #348]	@ (80050b0 <Screen_HandleButton+0x2d0>)
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	4b55      	ldr	r3, [pc, #340]	@ (80050b0 <Screen_HandleButton+0x2d0>)
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e00d      	b.n	8004f7a <Screen_HandleButton+0x19a>

            default: break;
 8004f5e:	bf00      	nop
 8004f60:	e00c      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004f62:	bf00      	nop
 8004f64:	e00a      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004f66:	bf00      	nop
 8004f68:	e008      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004f6a:	bf00      	nop
 8004f6c:	e006      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004f6e:	bf00      	nop
 8004f70:	e004      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004f72:	bf00      	nop
 8004f74:	e002      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004f7a:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8004f7c:	4b46      	ldr	r3, [pc, #280]	@ (8005098 <Screen_HandleButton+0x2b8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
        return;
 8004f82:	e1bf      	b.n	8005304 <Screen_HandleButton+0x524>
    }

    /* =======================
       DOWN key
       ======================= */
    if (b == BTN_DOWN) {
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	f040 80e6 	bne.w	8005158 <Screen_HandleButton+0x378>
        switch (ui) {
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005080 <Screen_HandleButton+0x2a0>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	3b02      	subs	r3, #2
 8004f92:	2b11      	cmp	r3, #17
 8004f94:	f200 80c5 	bhi.w	8005122 <Screen_HandleButton+0x342>
 8004f98:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <Screen_HandleButton+0x1c0>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08005123 	.word	0x08005123
 8004fa8:	08005123 	.word	0x08005123
 8004fac:	08005123 	.word	0x08005123
 8004fb0:	08004fff 	.word	0x08004fff
 8004fb4:	08005017 	.word	0x08005017
 8004fb8:	0800502f 	.word	0x0800502f
 8004fbc:	08005045 	.word	0x08005045
 8004fc0:	0800505b 	.word	0x0800505b
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	080050b5 	.word	0x080050b5
 8004fcc:	08005123 	.word	0x08005123
 8004fd0:	080050cb 	.word	0x080050cb
 8004fd4:	080050e1 	.word	0x080050e1
 8004fd8:	08005123 	.word	0x08005123
 8004fdc:	08005123 	.word	0x08005123
 8004fe0:	080050f7 	.word	0x080050f7
 8004fe4:	0800510d 	.word	0x0800510d
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8004fe8:	4b26      	ldr	r3, [pc, #152]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	f300 809a 	bgt.w	8005126 <Screen_HandleButton+0x346>
 8004ff2:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	4a22      	ldr	r2, [pc, #136]	@ (8005084 <Screen_HandleButton+0x2a4>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e093      	b.n	8005126 <Screen_HandleButton+0x346>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 8004ffe:	4b22      	ldr	r3, [pc, #136]	@ (8005088 <Screen_HandleButton+0x2a8>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8091 	beq.w	800512a <Screen_HandleButton+0x34a>
 8005008:	4b1f      	ldr	r3, [pc, #124]	@ (8005088 <Screen_HandleButton+0x2a8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	3b01      	subs	r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4b1d      	ldr	r3, [pc, #116]	@ (8005088 <Screen_HandleButton+0x2a8>)
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e089      	b.n	800512a <Screen_HandleButton+0x34a>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 8005016:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <Screen_HandleButton+0x2ac>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8087 	beq.w	800512e <Screen_HandleButton+0x34e>
 8005020:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <Screen_HandleButton+0x2ac>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	3b01      	subs	r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b18      	ldr	r3, [pc, #96]	@ (800508c <Screen_HandleButton+0x2ac>)
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e07f      	b.n	800512e <Screen_HandleButton+0x34e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d07d      	beq.n	8005132 <Screen_HandleButton+0x352>
 8005036:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <Screen_HandleButton+0x2b0>)
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e076      	b.n	8005132 <Screen_HandleButton+0x352>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8005044:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <Screen_HandleButton+0x2b4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d074      	beq.n	8005136 <Screen_HandleButton+0x356>
 800504c:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <Screen_HandleButton+0x2b4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	3b01      	subs	r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <Screen_HandleButton+0x2b4>)
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e06d      	b.n	8005136 <Screen_HandleButton+0x356>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <Screen_HandleButton+0x2a0>)
 800505c:	220b      	movs	r2, #11
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <Screen_HandleButton+0x2b8>)
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e14d      	b.n	8005304 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <Screen_HandleButton+0x2bc>)
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d964      	bls.n	800513a <Screen_HandleButton+0x35a>
 8005070:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <Screen_HandleButton+0x2bc>)
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	3b05      	subs	r3, #5
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b08      	ldr	r3, [pc, #32]	@ (800509c <Screen_HandleButton+0x2bc>)
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e05d      	b.n	800513a <Screen_HandleButton+0x35a>
 800507e:	bf00      	nop
 8005080:	20000614 	.word	0x20000614
 8005084:	20000624 	.word	0x20000624
 8005088:	20000048 	.word	0x20000048
 800508c:	20000049 	.word	0x20000049
 8005090:	2000004a 	.word	0x2000004a
 8005094:	2000004b 	.word	0x2000004b
 8005098:	20000615 	.word	0x20000615
 800509c:	2000004c 	.word	0x2000004c
 80050a0:	2000004e 	.word	0x2000004e
 80050a4:	20000054 	.word	0x20000054
 80050a8:	20000056 	.word	0x20000056
 80050ac:	20000050 	.word	0x20000050
 80050b0:	20000052 	.word	0x20000052
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 80050b4:	4b95      	ldr	r3, [pc, #596]	@ (800530c <Screen_HandleButton+0x52c>)
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d940      	bls.n	800513e <Screen_HandleButton+0x35e>
 80050bc:	4b93      	ldr	r3, [pc, #588]	@ (800530c <Screen_HandleButton+0x52c>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	4b91      	ldr	r3, [pc, #580]	@ (800530c <Screen_HandleButton+0x52c>)
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e039      	b.n	800513e <Screen_HandleButton+0x35e>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 80050ca:	4b91      	ldr	r3, [pc, #580]	@ (8005310 <Screen_HandleButton+0x530>)
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d937      	bls.n	8005142 <Screen_HandleButton+0x362>
 80050d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005310 <Screen_HandleButton+0x530>)
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	4b8d      	ldr	r3, [pc, #564]	@ (8005310 <Screen_HandleButton+0x530>)
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e030      	b.n	8005142 <Screen_HandleButton+0x362>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 80050e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005314 <Screen_HandleButton+0x534>)
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d92e      	bls.n	8005146 <Screen_HandleButton+0x366>
 80050e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005314 <Screen_HandleButton+0x534>)
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	4b88      	ldr	r3, [pc, #544]	@ (8005314 <Screen_HandleButton+0x534>)
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e027      	b.n	8005146 <Screen_HandleButton+0x366>

            /* Twist edits */
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 80050f6:	4b88      	ldr	r3, [pc, #544]	@ (8005318 <Screen_HandleButton+0x538>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d925      	bls.n	800514a <Screen_HandleButton+0x36a>
 80050fe:	4b86      	ldr	r3, [pc, #536]	@ (8005318 <Screen_HandleButton+0x538>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	4b84      	ldr	r3, [pc, #528]	@ (8005318 <Screen_HandleButton+0x538>)
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e01e      	b.n	800514a <Screen_HandleButton+0x36a>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800510c:	4b83      	ldr	r3, [pc, #524]	@ (800531c <Screen_HandleButton+0x53c>)
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d91c      	bls.n	800514e <Screen_HandleButton+0x36e>
 8005114:	4b81      	ldr	r3, [pc, #516]	@ (800531c <Screen_HandleButton+0x53c>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	4b7f      	ldr	r3, [pc, #508]	@ (800531c <Screen_HandleButton+0x53c>)
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	e015      	b.n	800514e <Screen_HandleButton+0x36e>

            default: break;
 8005122:	bf00      	nop
 8005124:	e014      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8005126:	bf00      	nop
 8005128:	e012      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 800512a:	bf00      	nop
 800512c:	e010      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 800512e:	bf00      	nop
 8005130:	e00e      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8005132:	bf00      	nop
 8005134:	e00c      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8005136:	bf00      	nop
 8005138:	e00a      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 800513a:	bf00      	nop
 800513c:	e008      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 800513e:	bf00      	nop
 8005140:	e006      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800514e:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8005150:	4b73      	ldr	r3, [pc, #460]	@ (8005320 <Screen_HandleButton+0x540>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
        return;
 8005156:	e0d5      	b.n	8005304 <Screen_HandleButton+0x524>
    }

    /* =======================
       SELECT key
       ======================= */
    if (b == BTN_SELECT) {
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	2b02      	cmp	r3, #2
 800515c:	f040 80d2 	bne.w	8005304 <Screen_HandleButton+0x524>
        switch (ui) {
 8005160:	4b70      	ldr	r3, [pc, #448]	@ (8005324 <Screen_HandleButton+0x544>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	3b0a      	subs	r3, #10
 8005166:	2b09      	cmp	r3, #9
 8005168:	f200 80c8 	bhi.w	80052fc <Screen_HandleButton+0x51c>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <Screen_HandleButton+0x394>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	0800519d 	.word	0x0800519d
 8005178:	080051df 	.word	0x080051df
 800517c:	080051ed 	.word	0x080051ed
 8005180:	080052fd 	.word	0x080052fd
 8005184:	080052fd 	.word	0x080052fd
 8005188:	080052fd 	.word	0x080052fd
 800518c:	080052fd 	.word	0x080052fd
 8005190:	08005241 	.word	0x08005241
 8005194:	08005283 	.word	0x08005283
 8005198:	08005291 	.word	0x08005291

            /* ---- Search main: Enable/Stop ---- */
            case UI_SEARCH:
                if (searchSettings.searchActive) {
 800519c:	4b62      	ldr	r3, [pc, #392]	@ (8005328 <Screen_HandleButton+0x548>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <Screen_HandleButton+0x3ca>
                    ModelHandle_StopSearch();
 80051a4:	f7fe f882 	bl	80032ac <ModelHandle_StopSearch>
 80051a8:	e015      	b.n	80051d6 <Screen_HandleButton+0x3f6>
                } else {
                    uint16_t gap_s   = (uint16_t)edit_search_gap_s;  if (gap_s   == 0) gap_s   = 5;
 80051aa:	4b60      	ldr	r3, [pc, #384]	@ (800532c <Screen_HandleButton+0x54c>)
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	81fb      	strh	r3, [r7, #14]
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <Screen_HandleButton+0x3da>
 80051b6:	2305      	movs	r3, #5
 80051b8:	81fb      	strh	r3, [r7, #14]
                    uint16_t probe_s = (uint16_t)edit_search_dry_s;  if (probe_s == 0) probe_s = 3;
 80051ba:	4b54      	ldr	r3, [pc, #336]	@ (800530c <Screen_HandleButton+0x52c>)
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	81bb      	strh	r3, [r7, #12]
 80051c0:	89bb      	ldrh	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <Screen_HandleButton+0x3ea>
 80051c6:	2303      	movs	r3, #3
 80051c8:	81bb      	strh	r3, [r7, #12]
                    ModelHandle_StartSearch(gap_s, probe_s);
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	89ba      	ldrh	r2, [r7, #12]
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe f827 	bl	8003224 <ModelHandle_StartSearch>
                }
                screenNeedsRefresh = true;
 80051d6:	4b52      	ldr	r3, [pc, #328]	@ (8005320 <Screen_HandleButton+0x540>)
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
                return;
 80051dc:	e092      	b.n	8005304 <Screen_HandleButton+0x524>

            /* ---- Search edit flow ---- */
            case UI_SEARCH_EDIT_GAP:
                ui = UI_SEARCH_EDIT_DRY;
 80051de:	4b51      	ldr	r3, [pc, #324]	@ (8005324 <Screen_HandleButton+0x544>)
 80051e0:	220c      	movs	r2, #12
 80051e2:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 80051e4:	4b4e      	ldr	r3, [pc, #312]	@ (8005320 <Screen_HandleButton+0x540>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
                return;
 80051ea:	e08b      	b.n	8005304 <Screen_HandleButton+0x524>

            case UI_SEARCH_EDIT_DRY:
                if (edit_search_gap_s < 1) edit_search_gap_s = 1;
 80051ec:	4b4f      	ldr	r3, [pc, #316]	@ (800532c <Screen_HandleButton+0x54c>)
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <Screen_HandleButton+0x41a>
 80051f4:	4b4d      	ldr	r3, [pc, #308]	@ (800532c <Screen_HandleButton+0x54c>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	801a      	strh	r2, [r3, #0]
                if (edit_search_dry_s < 1) edit_search_dry_s = 1;
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <Screen_HandleButton+0x52c>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <Screen_HandleButton+0x428>
 8005202:	4b42      	ldr	r3, [pc, #264]	@ (800530c <Screen_HandleButton+0x52c>)
 8005204:	2201      	movs	r2, #1
 8005206:	801a      	strh	r2, [r3, #0]

                searchSettings.testingGapSeconds = (uint16_t)edit_search_gap_s;
 8005208:	4b48      	ldr	r3, [pc, #288]	@ (800532c <Screen_HandleButton+0x54c>)
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	4b46      	ldr	r3, [pc, #280]	@ (8005328 <Screen_HandleButton+0x548>)
 800520e:	805a      	strh	r2, [r3, #2]
                searchSettings.dryRunTimeSeconds = (uint16_t)edit_search_dry_s;
 8005210:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <Screen_HandleButton+0x52c>)
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	4b44      	ldr	r3, [pc, #272]	@ (8005328 <Screen_HandleButton+0x548>)
 8005216:	809a      	strh	r2, [r3, #4]

                if (searchSettings.searchActive) {
 8005218:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <Screen_HandleButton+0x548>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <Screen_HandleButton+0x452>
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 8005220:	4b41      	ldr	r3, [pc, #260]	@ (8005328 <Screen_HandleButton+0x548>)
 8005222:	885b      	ldrh	r3, [r3, #2]
 8005224:	461a      	mov	r2, r3
                                            (uint16_t)searchSettings.dryRunTimeSeconds);
 8005226:	4b40      	ldr	r3, [pc, #256]	@ (8005328 <Screen_HandleButton+0x548>)
 8005228:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f7fd fff9 	bl	8003224 <ModelHandle_StartSearch>
                }
                ui = UI_SEARCH;
 8005232:	4b3c      	ldr	r3, [pc, #240]	@ (8005324 <Screen_HandleButton+0x544>)
 8005234:	220a      	movs	r2, #10
 8005236:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005238:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <Screen_HandleButton+0x540>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
                return;
 800523e:	e061      	b.n	8005304 <Screen_HandleButton+0x524>

            /* ---- Twist main: Enable/Stop ---- */
            case UI_TWIST:
                if (twistSettings.twistActive) {
 8005240:	4b3b      	ldr	r3, [pc, #236]	@ (8005330 <Screen_HandleButton+0x550>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <Screen_HandleButton+0x46e>
                    ModelHandle_StopTwist();
 8005248:	f7fd fef4 	bl	8003034 <ModelHandle_StopTwist>
 800524c:	e015      	b.n	800527a <Screen_HandleButton+0x49a>
                } else {
                    uint16_t on_s  = (uint16_t)edit_twist_on_s;  if (on_s  == 0) on_s  = 1;
 800524e:	4b32      	ldr	r3, [pc, #200]	@ (8005318 <Screen_HandleButton+0x538>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	817b      	strh	r3, [r7, #10]
 8005254:	897b      	ldrh	r3, [r7, #10]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <Screen_HandleButton+0x47e>
 800525a:	2301      	movs	r3, #1
 800525c:	817b      	strh	r3, [r7, #10]
                    uint16_t off_s = (uint16_t)edit_twist_off_s; if (off_s == 0) off_s = 1;
 800525e:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <Screen_HandleButton+0x53c>)
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	813b      	strh	r3, [r7, #8]
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <Screen_HandleButton+0x48e>
 800526a:	2301      	movs	r3, #1
 800526c:	813b      	strh	r3, [r7, #8]
                    ModelHandle_StartTwist(on_s, off_s);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	893a      	ldrh	r2, [r7, #8]
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f7fd fe99 	bl	8002fac <ModelHandle_StartTwist>
                }
                screenNeedsRefresh = true;
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <Screen_HandleButton+0x540>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
                return;
 8005280:	e040      	b.n	8005304 <Screen_HandleButton+0x524>

            /* ---- Twist edit ---- */
            case UI_TWIST_EDIT_ON:
                ui = UI_TWIST_EDIT_OFF;
 8005282:	4b28      	ldr	r3, [pc, #160]	@ (8005324 <Screen_HandleButton+0x544>)
 8005284:	2213      	movs	r2, #19
 8005286:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005288:	4b25      	ldr	r3, [pc, #148]	@ (8005320 <Screen_HandleButton+0x540>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
                return;
 800528e:	e039      	b.n	8005304 <Screen_HandleButton+0x524>

            case UI_TWIST_EDIT_OFF:
                if (edit_twist_off_s < 1)   edit_twist_off_s = 1;
 8005290:	4b22      	ldr	r3, [pc, #136]	@ (800531c <Screen_HandleButton+0x53c>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <Screen_HandleButton+0x4be>
 8005298:	4b20      	ldr	r3, [pc, #128]	@ (800531c <Screen_HandleButton+0x53c>)
 800529a:	2201      	movs	r2, #1
 800529c:	801a      	strh	r2, [r3, #0]
                if (edit_twist_off_s > 600) edit_twist_off_s = 600;
 800529e:	4b1f      	ldr	r3, [pc, #124]	@ (800531c <Screen_HandleButton+0x53c>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80052a6:	d903      	bls.n	80052b0 <Screen_HandleButton+0x4d0>
 80052a8:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <Screen_HandleButton+0x53c>)
 80052aa:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80052ae:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  < 1)   edit_twist_on_s  = 1;
 80052b0:	4b19      	ldr	r3, [pc, #100]	@ (8005318 <Screen_HandleButton+0x538>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <Screen_HandleButton+0x4de>
 80052b8:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <Screen_HandleButton+0x538>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  > 600) edit_twist_on_s  = 600;
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <Screen_HandleButton+0x538>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80052c6:	d903      	bls.n	80052d0 <Screen_HandleButton+0x4f0>
 80052c8:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <Screen_HandleButton+0x538>)
 80052ca:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80052ce:	801a      	strh	r2, [r3, #0]

                apply_twist_settings(); // copies edit_* to twistSettings
 80052d0:	f7ff f8ca 	bl	8004468 <apply_twist_settings>

                if (twistSettings.twistActive) {
 80052d4:	4b16      	ldr	r3, [pc, #88]	@ (8005330 <Screen_HandleButton+0x550>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <Screen_HandleButton+0x50e>
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 80052dc:	4b14      	ldr	r3, [pc, #80]	@ (8005330 <Screen_HandleButton+0x550>)
 80052de:	885b      	ldrh	r3, [r3, #2]
 80052e0:	461a      	mov	r2, r3
                                           (uint16_t)twistSettings.offDurationSeconds);
 80052e2:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <Screen_HandleButton+0x550>)
 80052e4:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fd fe5f 	bl	8002fac <ModelHandle_StartTwist>
                }
                ui = UI_TWIST;
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <Screen_HandleButton+0x544>)
 80052f0:	2211      	movs	r2, #17
 80052f2:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 80052f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <Screen_HandleButton+0x540>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
                return;
 80052fa:	e003      	b.n	8005304 <Screen_HandleButton+0x524>

            /* ---- Others: keep your existing flow ---- */
            default:
                menu_select();
 80052fc:	f7ff fbe4 	bl	8004ac8 <menu_select>
                return;
 8005300:	e000      	b.n	8005304 <Screen_HandleButton+0x524>
    if (b == BTN_NONE) return;
 8005302:	bf00      	nop
        }
    }
}
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2000004e 	.word	0x2000004e
 8005310:	20000054 	.word	0x20000054
 8005314:	20000056 	.word	0x20000056
 8005318:	20000050 	.word	0x20000050
 800531c:	20000052 	.word	0x20000052
 8005320:	20000615 	.word	0x20000615
 8005324:	20000614 	.word	0x20000614
 8005328:	2000001c 	.word	0x2000001c
 800532c:	2000004c 	.word	0x2000004c
 8005330:	20000024 	.word	0x20000024

08005334 <Screen_HandleSwitches>:
/* ===== Switch polling with long-press detection ===== */
/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN,   LED4_Pin}  // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e0b3      	b.n	80054a8 <Screen_HandleSwitches+0x174>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8005340:	495e      	ldr	r1, [pc, #376]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	495a      	ldr	r1, [pc, #360]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3304      	adds	r3, #4
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	f002 f85c 	bl	8007420 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	72fb      	strb	r3, [r7, #11]

        // edge: press started
        if (pressed && prev[i]) {
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d012      	beq.n	80053a0 <Screen_HandleSwitches+0x6c>
 800537a:	4a51      	ldr	r2, [pc, #324]	@ (80054c0 <Screen_HandleSwitches+0x18c>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 8005386:	4a4e      	ldr	r2, [pc, #312]	@ (80054c0 <Screen_HandleSwitches+0x18c>)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 8005390:	f000 fefc 	bl	800618c <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	494b      	ldr	r1, [pc, #300]	@ (80054c4 <Screen_HandleSwitches+0x190>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800539e:	e080      	b.n	80054a2 <Screen_HandleSwitches+0x16e>
        }
        // edge: released
        else if (!pressed && !prev[i]) {
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	f083 0301 	eor.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d07a      	beq.n	80054a2 <Screen_HandleSwitches+0x16e>
 80053ac:	4a44      	ldr	r2, [pc, #272]	@ (80054c0 <Screen_HandleSwitches+0x18c>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f083 0301 	eor.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d071      	beq.n	80054a2 <Screen_HandleSwitches+0x16e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 80053be:	f000 fee5 	bl	800618c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	493f      	ldr	r1, [pc, #252]	@ (80054c4 <Screen_HandleSwitches+0x190>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 80053d0:	4a3b      	ldr	r2, [pc, #236]	@ (80054c0 <Screen_HandleSwitches+0x18c>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]

            /* ---- SW3 special: >=5s => "Summer Save" burst (R2+R3 ON for 30s) ---- */
            if (i == 2 && pressDuration >= 3000UL) {
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d12c      	bne.n	800543a <Screen_HandleSwitches+0x106>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d927      	bls.n	800543a <Screen_HandleSwitches+0x106>
                ModelHandle_TriggerAuxBurst(30);
 80053ea:	201e      	movs	r0, #30
 80053ec:	f7fd fc58 	bl	8002ca0 <ModelHandle_TriggerAuxBurst>

                // Quick LCD notice
                lcd_clear();
 80053f0:	f7fc fc05 	bl	8001bfe <lcd_clear>
                lcd_put_cur(0, 0);
 80053f4:	2100      	movs	r1, #0
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7fc fc0e 	bl	8001c18 <lcd_put_cur>
                lcd_send_string("Summer Save 30s");
 80053fc:	4832      	ldr	r0, [pc, #200]	@ (80054c8 <Screen_HandleSwitches+0x194>)
 80053fe:	f7fc fc2d 	bl	8001c5c <lcd_send_string>
                lcd_put_cur(1, 0);
 8005402:	2100      	movs	r1, #0
 8005404:	2001      	movs	r0, #1
 8005406:	f7fc fc07 	bl	8001c18 <lcd_put_cur>
                lcd_send_string("Relays 2&3 ON");
 800540a:	4830      	ldr	r0, [pc, #192]	@ (80054cc <Screen_HandleSwitches+0x198>)
 800540c:	f7fc fc26 	bl	8001c5c <lcd_send_string>

                // optional LED feedback
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8005410:	492a      	ldr	r1, [pc, #168]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	4926      	ldr	r1, [pc, #152]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	3308      	adds	r3, #8
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	f002 f823 	bl	800747e <HAL_GPIO_TogglePin>
 8005438:	e033      	b.n	80054a2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- SW1 ≥2s = manual long-press/restart (kept as-is) ---- */
            else if (i == 0 && pressDuration > 2000UL) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <Screen_HandleSwitches+0x11a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005446:	d902      	bls.n	800544e <Screen_HandleSwitches+0x11a>
                ModelHandle_ManualLongPress();
 8005448:	f7fd fca2 	bl	8002d90 <ModelHandle_ManualLongPress>
 800544c:	e029      	b.n	80054a2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- SW4 ≥2s = Back/menu reset (kept as-is) ---- */
            else if (i == 3 && pressDuration > 2000UL) {
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d106      	bne.n	8005462 <Screen_HandleSwitches+0x12e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800545a:	d902      	bls.n	8005462 <Screen_HandleSwitches+0x12e>
                menu_reset();
 800545c:	f7ff fc64 	bl	8004d28 <menu_reset>
 8005460:	e01f      	b.n	80054a2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- Short press → normal handling ---- */
            else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8005462:	4916      	ldr	r1, [pc, #88]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4613      	mov	r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	4912      	ldr	r1, [pc, #72]	@ (80054bc <Screen_HandleSwitches+0x188>)
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3308      	adds	r3, #8
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	f001 fffa 	bl	800747e <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 800548a:	490c      	ldr	r1, [pc, #48]	@ (80054bc <Screen_HandleSwitches+0x188>)
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3306      	adds	r3, #6
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fc9f 	bl	8004de0 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	f77f af48 	ble.w	8005340 <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	0800f66c 	.word	0x0800f66c
 80054c0:	20000058 	.word	0x20000058
 80054c4:	2000062c 	.word	0x2000062c
 80054c8:	0800f530 	.word	0x0800f530
 80054cc:	0800f540 	.word	0x0800f540

080054d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <HAL_MspInit+0x5c>)
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	4a14      	ldr	r2, [pc, #80]	@ (800552c <HAL_MspInit+0x5c>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	6193      	str	r3, [r2, #24]
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <HAL_MspInit+0x5c>)
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b0f      	ldr	r3, [pc, #60]	@ (800552c <HAL_MspInit+0x5c>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4a0e      	ldr	r2, [pc, #56]	@ (800552c <HAL_MspInit+0x5c>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	61d3      	str	r3, [r2, #28]
 80054fa:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <HAL_MspInit+0x5c>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005506:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <HAL_MspInit+0x60>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	4a04      	ldr	r2, [pc, #16]	@ (8005530 <HAL_MspInit+0x60>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	40021000 	.word	0x40021000
 8005530:	40010000 	.word	0x40010000

08005534 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 0310 	add.w	r3, r7, #16
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <HAL_ADC_MspInit+0x7c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d129      	bne.n	80055a8 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005554:	4b17      	ldr	r3, [pc, #92]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 800555a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800555e:	6193      	str	r3, [r2, #24]
 8005560:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	4a10      	ldr	r2, [pc, #64]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 8005572:	f043 0304 	orr.w	r3, r3, #4
 8005576:	6193      	str	r3, [r2, #24]
 8005578:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <HAL_ADC_MspInit+0x80>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005584:	23ff      	movs	r3, #255	@ 0xff
 8005586:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005588:	2303      	movs	r3, #3
 800558a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	f107 0310 	add.w	r3, r7, #16
 8005590:	4619      	mov	r1, r3
 8005592:	4809      	ldr	r0, [pc, #36]	@ (80055b8 <HAL_ADC_MspInit+0x84>)
 8005594:	f001 fdc0 	bl	8007118 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005598:	2200      	movs	r2, #0
 800559a:	2100      	movs	r1, #0
 800559c:	2012      	movs	r0, #18
 800559e:	f001 fcd2 	bl	8006f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80055a2:	2012      	movs	r0, #18
 80055a4:	f001 fceb 	bl	8006f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80055a8:	bf00      	nop
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012400 	.word	0x40012400
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40010800 	.word	0x40010800

080055bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c4:	f107 0310 	add.w	r3, r7, #16
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <HAL_I2C_MspInit+0x74>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d124      	bne.n	8005626 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055dc:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4a14      	ldr	r2, [pc, #80]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 80055e2:	f043 0308 	orr.w	r3, r3, #8
 80055e6:	6193      	str	r3, [r2, #24]
 80055e8:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80055f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80055f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055fa:	2312      	movs	r3, #18
 80055fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	4619      	mov	r1, r3
 8005608:	480b      	ldr	r0, [pc, #44]	@ (8005638 <HAL_I2C_MspInit+0x7c>)
 800560a:	f001 fd85 	bl	8007118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800560e:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 8005614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005618:	61d3      	str	r3, [r2, #28]
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_I2C_MspInit+0x78>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8005626:	bf00      	nop
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40005800 	.word	0x40005800
 8005634:	40021000 	.word	0x40021000
 8005638:	40010c00 	.word	0x40010c00

0800563c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <HAL_RTC_MspInit+0x4c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d118      	bne.n	8005680 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800564e:	f003 fa43 	bl	8008ad8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005652:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <HAL_RTC_MspInit+0x50>)
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4a0d      	ldr	r2, [pc, #52]	@ (800568c <HAL_RTC_MspInit+0x50>)
 8005658:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800565c:	61d3      	str	r3, [r2, #28]
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <HAL_RTC_MspInit+0x50>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RTC_MspInit+0x54>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005670:	2200      	movs	r2, #0
 8005672:	2100      	movs	r1, #0
 8005674:	2029      	movs	r0, #41	@ 0x29
 8005676:	f001 fc66 	bl	8006f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800567a:	2029      	movs	r0, #41	@ 0x29
 800567c:	f001 fc7f 	bl	8006f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40002800 	.word	0x40002800
 800568c:	40021000 	.word	0x40021000
 8005690:	4242043c 	.word	0x4242043c

08005694 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	@ 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a22      	ldr	r2, [pc, #136]	@ (8005738 <HAL_SPI_MspInit+0xa4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d13d      	bne.n	8005730 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056b4:	4b21      	ldr	r3, [pc, #132]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	4a20      	ldr	r2, [pc, #128]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056be:	6193      	str	r3, [r2, #24]
 80056c0:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	4a1a      	ldr	r2, [pc, #104]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056d2:	f043 0308 	orr.w	r3, r3, #8
 80056d6:	6193      	str	r3, [r2, #24]
 80056d8:	4b18      	ldr	r3, [pc, #96]	@ (800573c <HAL_SPI_MspInit+0xa8>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80056e4:	2328      	movs	r3, #40	@ 0x28
 80056e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e8:	2302      	movs	r3, #2
 80056ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ec:	2303      	movs	r3, #3
 80056ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f0:	f107 0314 	add.w	r3, r7, #20
 80056f4:	4619      	mov	r1, r3
 80056f6:	4812      	ldr	r0, [pc, #72]	@ (8005740 <HAL_SPI_MspInit+0xac>)
 80056f8:	f001 fd0e 	bl	8007118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80056fc:	2310      	movs	r3, #16
 80056fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4619      	mov	r1, r3
 800570e:	480c      	ldr	r0, [pc, #48]	@ (8005740 <HAL_SPI_MspInit+0xac>)
 8005710:	f001 fd02 	bl	8007118 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_SPI_MspInit+0xb0>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
 800572a:	4a06      	ldr	r2, [pc, #24]	@ (8005744 <HAL_SPI_MspInit+0xb0>)
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005730:	bf00      	nop
 8005732:	3728      	adds	r7, #40	@ 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40013000 	.word	0x40013000
 800573c:	40021000 	.word	0x40021000
 8005740:	40010c00 	.word	0x40010c00
 8005744:	40010000 	.word	0x40010000

08005748 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a09      	ldr	r2, [pc, #36]	@ (800577c <HAL_TIM_Base_MspInit+0x34>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10b      	bne.n	8005772 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <HAL_TIM_Base_MspInit+0x38>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <HAL_TIM_Base_MspInit+0x38>)
 8005760:	f043 0302 	orr.w	r3, r3, #2
 8005764:	61d3      	str	r3, [r2, #28]
 8005766:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_TIM_Base_MspInit+0x38>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40000400 	.word	0x40000400
 8005780:	40021000 	.word	0x40021000

08005784 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a20      	ldr	r2, [pc, #128]	@ (8005820 <HAL_UART_MspInit+0x9c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d139      	bne.n	8005818 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ae:	6193      	str	r3, [r2, #24]
 80057b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057bc:	4b19      	ldr	r3, [pc, #100]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6193      	str	r3, [r2, #24]
 80057c8:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <HAL_UART_MspInit+0xa0>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057da:	2302      	movs	r3, #2
 80057dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057de:	2303      	movs	r3, #3
 80057e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e2:	f107 0310 	add.w	r3, r7, #16
 80057e6:	4619      	mov	r1, r3
 80057e8:	480f      	ldr	r0, [pc, #60]	@ (8005828 <HAL_UART_MspInit+0xa4>)
 80057ea:	f001 fc95 	bl	8007118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80057ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	4619      	mov	r1, r3
 8005802:	4809      	ldr	r0, [pc, #36]	@ (8005828 <HAL_UART_MspInit+0xa4>)
 8005804:	f001 fc88 	bl	8007118 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005808:	2200      	movs	r2, #0
 800580a:	2100      	movs	r1, #0
 800580c:	2025      	movs	r0, #37	@ 0x25
 800580e:	f001 fb9a 	bl	8006f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005812:	2025      	movs	r0, #37	@ 0x25
 8005814:	f001 fbb3 	bl	8006f7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005818:	bf00      	nop
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40013800 	.word	0x40013800
 8005824:	40021000 	.word	0x40021000
 8005828:	40010800 	.word	0x40010800

0800582c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <NMI_Handler+0x4>

08005834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <HardFault_Handler+0x4>

0800583c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <MemManage_Handler+0x4>

08005844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <BusFault_Handler+0x4>

0800584c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <UsageFault_Handler+0x4>

08005854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800587c:	f000 fc74 	bl	8006168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}

08005884 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005888:	4802      	ldr	r0, [pc, #8]	@ (8005894 <ADC1_2_IRQHandler+0x10>)
 800588a:	f000 ff71 	bl	8006770 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000320 	.word	0x20000320

08005898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800589c:	4802      	ldr	r0, [pc, #8]	@ (80058a8 <USART1_IRQHandler+0x10>)
 800589e:	f005 fe39 	bl	800b514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000458 	.word	0x20000458

080058ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80058b0:	4802      	ldr	r0, [pc, #8]	@ (80058bc <RTC_Alarm_IRQHandler+0x10>)
 80058b2:	f004 fa03 	bl	8009cbc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200003a4 	.word	0x200003a4

080058c0 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	f000 fc62 	bl	800618c <HAL_GetTick>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4618      	mov	r0, r3
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058e2:	4b20      	ldr	r3, [pc, #128]	@ (8005964 <Switches_Init+0x94>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <Switches_Init+0x94>)
 80058e8:	f043 0308 	orr.w	r3, r3, #8
 80058ec:	6193      	str	r3, [r2, #24]
 80058ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005964 <Switches_Init+0x94>)
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058fe:	2301      	movs	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8005902:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005906:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4816      	ldr	r0, [pc, #88]	@ (8005968 <Switches_Init+0x98>)
 800590e:	f001 fc03 	bl	8007118 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e01d      	b.n	8005954 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <Switches_Init+0x9c>)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8005922:	4a13      	ldr	r2, [pc, #76]	@ (8005970 <Switches_Init+0xa0>)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 800592c:	f7ff ffc8 	bl	80058c0 <now_ms>
 8005930:	4602      	mov	r2, r0
 8005932:	4910      	ldr	r1, [pc, #64]	@ (8005974 <Switches_Init+0xa4>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 800593a:	4a0f      	ldr	r2, [pc, #60]	@ (8005978 <Switches_Init+0xa8>)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2100      	movs	r1, #0
 8005940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8005944:	4a0d      	ldr	r2, [pc, #52]	@ (800597c <Switches_Init+0xac>)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3301      	adds	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b03      	cmp	r3, #3
 8005958:	ddde      	ble.n	8005918 <Switches_Init+0x48>
    }
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	40010c00 	.word	0x40010c00
 800596c:	2000063c 	.word	0x2000063c
 8005970:	20000650 	.word	0x20000650
 8005974:	20000640 	.word	0x20000640
 8005978:	20000654 	.word	0x20000654
 800597c:	20000664 	.word	0x20000664

08005980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return 1;
 8005984:	2301      	movs	r3, #1
}
 8005986:	4618      	mov	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <_kill>:

int _kill(int pid, int sig)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005998:	f007 fb44 	bl	800d024 <__errno>
 800599c:	4603      	mov	r3, r0
 800599e:	2216      	movs	r2, #22
 80059a0:	601a      	str	r2, [r3, #0]
  return -1;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_exit>:

void _exit (int status)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059b6:	f04f 31ff 	mov.w	r1, #4294967295
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ffe7 	bl	800598e <_kill>
  while (1) {}    /* Make sure we hang here */
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <_exit+0x12>

080059c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e00a      	b.n	80059ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059d6:	f3af 8000 	nop.w
 80059da:	4601      	mov	r1, r0
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	60ba      	str	r2, [r7, #8]
 80059e2:	b2ca      	uxtb	r2, r1
 80059e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	3301      	adds	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	dbf0      	blt.n	80059d6 <_read+0x12>
  }

  return len;
 80059f4:	687b      	ldr	r3, [r7, #4]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	e009      	b.n	8005a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	60ba      	str	r2, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	dbf1      	blt.n	8005a10 <_write+0x12>
  }
  return len;
 8005a2c:	687b      	ldr	r3, [r7, #4]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_close>:

int _close(int file)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <_isatty>:

int _isatty(int file)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a72:	2301      	movs	r3, #1
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
	...

08005a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005aa0:	4a14      	ldr	r2, [pc, #80]	@ (8005af4 <_sbrk+0x5c>)
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <_sbrk+0x60>)
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005aac:	4b13      	ldr	r3, [pc, #76]	@ (8005afc <_sbrk+0x64>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ab4:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <_sbrk+0x64>)
 8005ab6:	4a12      	ldr	r2, [pc, #72]	@ (8005b00 <_sbrk+0x68>)
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005aba:	4b10      	ldr	r3, [pc, #64]	@ (8005afc <_sbrk+0x64>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d207      	bcs.n	8005ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ac8:	f007 faac 	bl	800d024 <__errno>
 8005acc:	4603      	mov	r3, r0
 8005ace:	220c      	movs	r2, #12
 8005ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad6:	e009      	b.n	8005aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ad8:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <_sbrk+0x64>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ade:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <_sbrk+0x64>)
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	4a05      	ldr	r2, [pc, #20]	@ (8005afc <_sbrk+0x64>)
 8005ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20005000 	.word	0x20005000
 8005af8:	00000400 	.word	0x00000400
 8005afc:	20000668 	.word	0x20000668
 8005b00:	20000888 	.word	0x20000888

08005b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <UART_Init>:
static uint16_t rxIndex = 0;
static volatile bool packetReady = false;
static volatile bool inPacket = false;

void UART_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8005b14:	2240      	movs	r2, #64	@ 0x40
 8005b16:	2100      	movs	r1, #0
 8005b18:	480b      	ldr	r0, [pc, #44]	@ (8005b48 <UART_Init+0x38>)
 8005b1a:	f007 f9a1 	bl	800ce60 <memset>
    memset(rxReadyBuffer, 0, sizeof(rxReadyBuffer));
 8005b1e:	2240      	movs	r2, #64	@ 0x40
 8005b20:	2100      	movs	r1, #0
 8005b22:	480a      	ldr	r0, [pc, #40]	@ (8005b4c <UART_Init+0x3c>)
 8005b24:	f007 f99c 	bl	800ce60 <memset>
    rxIndex = 0;
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <UART_Init+0x40>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8005b2e:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <UART_Init+0x44>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
    inPacket = false;
 8005b34:	4b08      	ldr	r3, [pc, #32]	@ (8005b58 <UART_Init+0x48>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4907      	ldr	r1, [pc, #28]	@ (8005b5c <UART_Init+0x4c>)
 8005b3e:	4808      	ldr	r0, [pc, #32]	@ (8005b60 <UART_Init+0x50>)
 8005b40:	f005 fcc3 	bl	800b4ca <HAL_UART_Receive_IT>
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000670 	.word	0x20000670
 8005b4c:	200006b0 	.word	0x200006b0
 8005b50:	200006f0 	.word	0x200006f0
 8005b54:	200006f2 	.word	0x200006f2
 8005b58:	200006f3 	.word	0x200006f3
 8005b5c:	2000066c 	.word	0x2000066c
 8005b60:	20000458 	.word	0x20000458

08005b64 <UART_TransmitString>:

void UART_TransmitString(UART_HandleTypeDef *huart, const char *s)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
    if (s) HAL_UART_Transmit(huart, (uint8_t*)s, strlen(s), 100);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <UART_TransmitString+0x24>
 8005b74:	6838      	ldr	r0, [r7, #0]
 8005b76:	f7fa faf5 	bl	8000164 <strlen>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	2364      	movs	r3, #100	@ 0x64
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f005 fc16 	bl	800b3b4 <HAL_UART_Transmit>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_TransmitPacket>:

void UART_TransmitPacket(const char *payload)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    // uses a small static buffer instead of stack
    static char out[64];
    if (!payload) return;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00f      	beq.n	8005bbe <UART_TransmitPacket+0x2e>
    size_t len = snprintf(out, sizeof(out), "@%s#\r\n", payload);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a09      	ldr	r2, [pc, #36]	@ (8005bc8 <UART_TransmitPacket+0x38>)
 8005ba2:	2140      	movs	r1, #64	@ 0x40
 8005ba4:	4809      	ldr	r0, [pc, #36]	@ (8005bcc <UART_TransmitPacket+0x3c>)
 8005ba6:	f007 f833 	bl	800cc10 <sniprintf>
 8005baa:	4603      	mov	r3, r0
 8005bac:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*)out, len, 100);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	2364      	movs	r3, #100	@ 0x64
 8005bb4:	4905      	ldr	r1, [pc, #20]	@ (8005bcc <UART_TransmitPacket+0x3c>)
 8005bb6:	4806      	ldr	r0, [pc, #24]	@ (8005bd0 <UART_TransmitPacket+0x40>)
 8005bb8:	f005 fbfc 	bl	800b3b4 <HAL_UART_Transmit>
 8005bbc:	e000      	b.n	8005bc0 <UART_TransmitPacket+0x30>
    if (!payload) return;
 8005bbe:	bf00      	nop
}
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	0800f550 	.word	0x0800f550
 8005bcc:	200006f4 	.word	0x200006f4
 8005bd0:	20000458 	.word	0x20000458

08005bd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    if (huart->Instance != USART1) return;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c9c <HAL_UART_RxCpltCallback+0xc8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d156      	bne.n	8005c94 <HAL_UART_RxCpltCallback+0xc0>

    uint8_t b = rxByte;
 8005be6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <HAL_UART_RxCpltCallback+0xcc>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	73fb      	strb	r3, [r7, #15]

    if (!packetReady)
 8005bec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <HAL_UART_RxCpltCallback+0xd0>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f083 0301 	eor.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d045      	beq.n	8005c88 <HAL_UART_RxCpltCallback+0xb4>
    {
        if (b == UART_START_MARKER) {
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_RxCpltCallback+0x3c>
            inPacket = true;
 8005c02:	4b29      	ldr	r3, [pc, #164]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;
 8005c08:	4b28      	ldr	r3, [pc, #160]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e03b      	b.n	8005c88 <HAL_UART_RxCpltCallback+0xb4>
        }
        else if (inPacket && b == UART_END_MARKER) {
 8005c10:	4b25      	ldr	r3, [pc, #148]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d017      	beq.n	8005c4a <HAL_UART_RxCpltCallback+0x76>
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b23      	cmp	r3, #35	@ 0x23
 8005c1e:	d114      	bne.n	8005c4a <HAL_UART_RxCpltCallback+0x76>
            rxBuffer[rxIndex] = '\0';
 8005c20:	4b22      	ldr	r3, [pc, #136]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b22      	ldr	r3, [pc, #136]	@ (8005cb0 <HAL_UART_RxCpltCallback+0xdc>)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]
            strncpy(rxReadyBuffer, rxBuffer, sizeof(rxReadyBuffer) - 1);
 8005c2c:	223f      	movs	r2, #63	@ 0x3f
 8005c2e:	4920      	ldr	r1, [pc, #128]	@ (8005cb0 <HAL_UART_RxCpltCallback+0xdc>)
 8005c30:	4820      	ldr	r0, [pc, #128]	@ (8005cb4 <HAL_UART_RxCpltCallback+0xe0>)
 8005c32:	f007 f93d 	bl	800ceb0 <strncpy>
            packetReady = true;
 8005c36:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <HAL_UART_RxCpltCallback+0xd0>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
            inPacket = false;
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;
 8005c42:	4b1a      	ldr	r3, [pc, #104]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e01e      	b.n	8005c88 <HAL_UART_RxCpltCallback+0xb4>
        }
        else if (inPacket && rxIndex < (sizeof(rxBuffer) - 2)) {
 8005c4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00e      	beq.n	8005c72 <HAL_UART_RxCpltCallback+0x9e>
 8005c54:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b3d      	cmp	r3, #61	@ 0x3d
 8005c5a:	d80a      	bhi.n	8005c72 <HAL_UART_RxCpltCallback+0x9e>
            rxBuffer[rxIndex++] = b;
 8005c5c:	4b13      	ldr	r3, [pc, #76]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	b291      	uxth	r1, r2
 8005c64:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c66:	8011      	strh	r1, [r2, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <HAL_UART_RxCpltCallback+0xdc>)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	5453      	strb	r3, [r2, r1]
 8005c70:	e00a      	b.n	8005c88 <HAL_UART_RxCpltCallback+0xb4>
        }
        else if (inPacket) {
 8005c72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_RxCpltCallback+0xb4>
            // overflow → reset
            inPacket = false;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <HAL_UART_RxCpltCallback+0xd4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;
 8005c82:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <HAL_UART_RxCpltCallback+0xd8>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	801a      	strh	r2, [r3, #0]
        }
    }

    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4905      	ldr	r1, [pc, #20]	@ (8005ca0 <HAL_UART_RxCpltCallback+0xcc>)
 8005c8c:	480a      	ldr	r0, [pc, #40]	@ (8005cb8 <HAL_UART_RxCpltCallback+0xe4>)
 8005c8e:	f005 fc1c 	bl	800b4ca <HAL_UART_Receive_IT>
 8005c92:	e000      	b.n	8005c96 <HAL_UART_RxCpltCallback+0xc2>
    if (huart->Instance != USART1) return;
 8005c94:	bf00      	nop
}
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40013800 	.word	0x40013800
 8005ca0:	2000066c 	.word	0x2000066c
 8005ca4:	200006f2 	.word	0x200006f2
 8005ca8:	200006f3 	.word	0x200006f3
 8005cac:	200006f0 	.word	0x200006f0
 8005cb0:	20000670 	.word	0x20000670
 8005cb4:	200006b0 	.word	0x200006b0
 8005cb8:	20000458 	.word	0x20000458

08005cbc <UART_GetReceivedPacket>:

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
    if (!packetReady) return false;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <UART_GetReceivedPacket+0x50>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f083 0301 	eor.w	r3, r3, #1
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_GetReceivedPacket+0x1e>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e014      	b.n	8005d04 <UART_GetReceivedPacket+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8005cda:	b672      	cpsid	i
}
 8005cdc:	bf00      	nop
    __disable_irq();
    strncpy(buffer, rxReadyBuffer, buffer_size - 1);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	490a      	ldr	r1, [pc, #40]	@ (8005d10 <UART_GetReceivedPacket+0x54>)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f007 f8e2 	bl	800ceb0 <strncpy>
    buffer[buffer_size - 1] = '\0';
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
    packetReady = false;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	@ (8005d0c <UART_GetReceivedPacket+0x50>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005cfe:	b662      	cpsie	i
}
 8005d00:	bf00      	nop
    __enable_irq();
    return true;
 8005d02:	2301      	movs	r3, #1
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	200006f2 	.word	0x200006f2
 8005d10:	200006b0 	.word	0x200006b0

08005d14 <ack>:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

static inline void ack(const char *msg)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	@ 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    char small[40];
    snprintf(small, sizeof(small), "ACK:%s", msg);
 8005d1c:	f107 0008 	add.w	r0, r7, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a06      	ldr	r2, [pc, #24]	@ (8005d3c <ack+0x28>)
 8005d24:	2128      	movs	r1, #40	@ 0x28
 8005d26:	f006 ff73 	bl	800cc10 <sniprintf>
    UART_TransmitPacket(small);
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff ff2e 	bl	8005b90 <UART_TransmitPacket>
}
 8005d34:	bf00      	nop
 8005d36:	3730      	adds	r7, #48	@ 0x30
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	0800f558 	.word	0x0800f558

08005d40 <err>:
static inline void err(const char *msg)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08c      	sub	sp, #48	@ 0x30
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    char small[40];
    snprintf(small, sizeof(small), "ERR:%s", msg);
 8005d48:	f107 0008 	add.w	r0, r7, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a06      	ldr	r2, [pc, #24]	@ (8005d68 <err+0x28>)
 8005d50:	2128      	movs	r1, #40	@ 0x28
 8005d52:	f006 ff5d 	bl	800cc10 <sniprintf>
    UART_TransmitPacket(small);
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff ff18 	bl	8005b90 <UART_TransmitPacket>
}
 8005d60:	bf00      	nop
 8005d62:	3730      	adds	r7, #48	@ 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	0800f560 	.word	0x0800f560

08005d6c <UART_SendStatusPacket>:
void UART_SendStatusPacket(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b092      	sub	sp, #72	@ 0x48
 8005d70:	af02      	add	r7, sp, #8
    extern ADC_Data adcData;
    int submerged = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < 5; i++) {
 8005d76:	2300      	movs	r3, #0
 8005d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d7a:	e012      	b.n	8005da2 <UART_SendStatusPacket+0x36>
        if (adcData.voltages[i] < 0.1f) submerged++;
 8005d7c:	4a17      	ldr	r2, [pc, #92]	@ (8005ddc <UART_SendStatusPacket+0x70>)
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	3302      	adds	r3, #2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4915      	ldr	r1, [pc, #84]	@ (8005de0 <UART_SendStatusPacket+0x74>)
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fb f932 	bl	8000ff4 <__aeabi_fcmplt>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <UART_SendStatusPacket+0x30>
 8005d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d98:	3301      	adds	r3, #1
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < 5; i++) {
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	3301      	adds	r3, #1
 8005da0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	dde9      	ble.n	8005d7c <UART_SendStatusPacket+0x10>
    }

    const char *motor = motorStatus ? "ON" : "OFF";
 8005da8:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <UART_SendStatusPacket+0x78>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <UART_SendStatusPacket+0x4a>
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <UART_SendStatusPacket+0x7c>)
 8005db4:	e000      	b.n	8005db8 <UART_SendStatusPacket+0x4c>
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <UART_SendStatusPacket+0x80>)
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34
    char buf[48];
    snprintf(buf, sizeof(buf), "STATUS:MOTOR:%s:LEVEL:%d", motor, submerged);
 8005dba:	1d38      	adds	r0, r7, #4
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8005df0 <UART_SendStatusPacket+0x84>)
 8005dc4:	2130      	movs	r1, #48	@ 0x30
 8005dc6:	f006 ff23 	bl	800cc10 <sniprintf>
    UART_TransmitPacket(buf);
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fedf 	bl	8005b90 <UART_TransmitPacket>
}
 8005dd2:	bf00      	nop
 8005dd4:	3740      	adds	r7, #64	@ 0x40
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200004a0 	.word	0x200004a0
 8005de0:	3dcccccd 	.word	0x3dcccccd
 8005de4:	20000570 	.word	0x20000570
 8005de8:	0800f568 	.word	0x0800f568
 8005dec:	0800f56c 	.word	0x0800f56c
 8005df0:	0800f570 	.word	0x0800f570

08005df4 <UART_HandleCommand>:

void UART_HandleCommand(const char *pkt)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b09b      	sub	sp, #108	@ 0x6c
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    if (!pkt || pkt[0] == '\0') return;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8113 	beq.w	800602a <UART_HandleCommand+0x236>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 810e 	beq.w	800602a <UART_HandleCommand+0x236>

    char cmd[UART_RX_BUFFER_SIZE];
    strncpy(cmd, pkt, sizeof(cmd) - 1);
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	223f      	movs	r2, #63	@ 0x3f
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f007 f84a 	bl	800ceb0 <strncpy>
    cmd[sizeof(cmd) - 1] = '\0';
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (cmd[0] == '@') memmove(cmd, cmd + 1, strlen(cmd));
 8005e22:	7b3b      	ldrb	r3, [r7, #12]
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d10e      	bne.n	8005e46 <UART_HandleCommand+0x52>
 8005e28:	f107 040c 	add.w	r4, r7, #12
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa f996 	bl	8000164 <strlen>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f107 030c 	add.w	r3, r7, #12
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f006 fff3 	bl	800ce2c <memmove>
    char *end = strchr(cmd, '#');
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	2123      	movs	r1, #35	@ 0x23
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f007 f80f 	bl	800ce70 <strchr>
 8005e52:	6638      	str	r0, [r7, #96]	@ 0x60
    if (end) *end = '\0';
 8005e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <UART_HandleCommand+0x6c>
 8005e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]

    char *t = strtok(cmd, ":");
 8005e60:	f107 030c 	add.w	r3, r7, #12
 8005e64:	4976      	ldr	r1, [pc, #472]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f007 f836 	bl	800ced8 <strtok>
 8005e6c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!t) return;
 8005e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80dc 	beq.w	800602e <UART_HandleCommand+0x23a>

    if (!strcmp(t, "PING")) { ack("PONG"); return; }
 8005e76:	4973      	ldr	r1, [pc, #460]	@ (8006044 <UART_HandleCommand+0x250>)
 8005e78:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005e7a:	f7fa f969 	bl	8000150 <strcmp>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <UART_HandleCommand+0x98>
 8005e84:	4870      	ldr	r0, [pc, #448]	@ (8006048 <UART_HandleCommand+0x254>)
 8005e86:	f7ff ff45 	bl	8005d14 <ack>
 8005e8a:	e0d5      	b.n	8006038 <UART_HandleCommand+0x244>

    if (!strcmp(t, "MANUAL")) {
 8005e8c:	496f      	ldr	r1, [pc, #444]	@ (800604c <UART_HandleCommand+0x258>)
 8005e8e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005e90:	f7fa f95e 	bl	8000150 <strcmp>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d129      	bne.n	8005eee <UART_HandleCommand+0xfa>
        char *s = strtok(NULL, ":");
 8005e9a:	4969      	ldr	r1, [pc, #420]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f007 f81b 	bl	800ced8 <strtok>
 8005ea2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (!s) { err("PARAM"); return; }
 8005ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <UART_HandleCommand+0xbe>
 8005eaa:	4869      	ldr	r0, [pc, #420]	@ (8006050 <UART_HandleCommand+0x25c>)
 8005eac:	f7ff ff48 	bl	8005d40 <err>
 8005eb0:	e0c2      	b.n	8006038 <UART_HandleCommand+0x244>
        if (!strcmp(s, "ON"))  { ModelHandle_ToggleManual(); ack("MANUAL_ON"); }
 8005eb2:	4968      	ldr	r1, [pc, #416]	@ (8006054 <UART_HandleCommand+0x260>)
 8005eb4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005eb6:	f7fa f94b 	bl	8000150 <strcmp>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <UART_HandleCommand+0xd8>
 8005ec0:	f7fc ff30 	bl	8002d24 <ModelHandle_ToggleManual>
 8005ec4:	4864      	ldr	r0, [pc, #400]	@ (8006058 <UART_HandleCommand+0x264>)
 8005ec6:	f7ff ff25 	bl	8005d14 <ack>
        else if (!strcmp(s, "OFF")) { ModelHandle_StopAllModesAndMotor(); ack("MANUAL_OFF"); }
        else err("FORMAT");
        return;
 8005eca:	e0b5      	b.n	8006038 <UART_HandleCommand+0x244>
        else if (!strcmp(s, "OFF")) { ModelHandle_StopAllModesAndMotor(); ack("MANUAL_OFF"); }
 8005ecc:	4963      	ldr	r1, [pc, #396]	@ (800605c <UART_HandleCommand+0x268>)
 8005ece:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005ed0:	f7fa f93e 	bl	8000150 <strcmp>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <UART_HandleCommand+0xf2>
 8005eda:	f7fc fea7 	bl	8002c2c <ModelHandle_StopAllModesAndMotor>
 8005ede:	4860      	ldr	r0, [pc, #384]	@ (8006060 <UART_HandleCommand+0x26c>)
 8005ee0:	f7ff ff18 	bl	8005d14 <ack>
        return;
 8005ee4:	e0a8      	b.n	8006038 <UART_HandleCommand+0x244>
        else err("FORMAT");
 8005ee6:	485f      	ldr	r0, [pc, #380]	@ (8006064 <UART_HandleCommand+0x270>)
 8005ee8:	f7ff ff2a 	bl	8005d40 <err>
        return;
 8005eec:	e0a4      	b.n	8006038 <UART_HandleCommand+0x244>
    }

    if (!strcmp(t, "TWIST")) {
 8005eee:	495e      	ldr	r1, [pc, #376]	@ (8006068 <UART_HandleCommand+0x274>)
 8005ef0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005ef2:	f7fa f92d 	bl	8000150 <strcmp>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d141      	bne.n	8005f80 <UART_HandleCommand+0x18c>
        char *sub = strtok(NULL, ":");
 8005efc:	4950      	ldr	r1, [pc, #320]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005efe:	2000      	movs	r0, #0
 8005f00:	f006 ffea 	bl	800ced8 <strtok>
 8005f04:	6578      	str	r0, [r7, #84]	@ 0x54
        if (sub && !strcmp(sub, "SET")) {
 8005f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d029      	beq.n	8005f60 <UART_HandleCommand+0x16c>
 8005f0c:	4957      	ldr	r1, [pc, #348]	@ (800606c <UART_HandleCommand+0x278>)
 8005f0e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005f10:	f7fa f91e 	bl	8000150 <strcmp>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d122      	bne.n	8005f60 <UART_HandleCommand+0x16c>
            uint16_t on = atoi(strtok(NULL, ":"));
 8005f1a:	4949      	ldr	r1, [pc, #292]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f006 ffdb 	bl	800ced8 <strtok>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f006 f85f 	bl	800bfe8 <atoi>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            uint16_t off = atoi(strtok(NULL, ":"));
 8005f30:	4943      	ldr	r1, [pc, #268]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005f32:	2000      	movs	r0, #0
 8005f34:	f006 ffd0 	bl	800ced8 <strtok>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f006 f854 	bl	800bfe8 <atoi>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            ModelHandle_StartTwist(on, off);
 8005f46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005f4a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fd f82b 	bl	8002fac <ModelHandle_StartTwist>
            ack("TWIST_SET");
 8005f56:	4846      	ldr	r0, [pc, #280]	@ (8006070 <UART_HandleCommand+0x27c>)
 8005f58:	f7ff fedc 	bl	8005d14 <ack>
        if (sub && !strcmp(sub, "SET")) {
 8005f5c:	bf00      	nop
        } else if (sub && !strcmp(sub, "STOP")) {
            ModelHandle_StopTwist();
            ack("TWIST_STOP");
        }
        return;
 8005f5e:	e068      	b.n	8006032 <UART_HandleCommand+0x23e>
        } else if (sub && !strcmp(sub, "STOP")) {
 8005f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d065      	beq.n	8006032 <UART_HandleCommand+0x23e>
 8005f66:	4943      	ldr	r1, [pc, #268]	@ (8006074 <UART_HandleCommand+0x280>)
 8005f68:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005f6a:	f7fa f8f1 	bl	8000150 <strcmp>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d15e      	bne.n	8006032 <UART_HandleCommand+0x23e>
            ModelHandle_StopTwist();
 8005f74:	f7fd f85e 	bl	8003034 <ModelHandle_StopTwist>
            ack("TWIST_STOP");
 8005f78:	483f      	ldr	r0, [pc, #252]	@ (8006078 <UART_HandleCommand+0x284>)
 8005f7a:	f7ff fecb 	bl	8005d14 <ack>
        return;
 8005f7e:	e058      	b.n	8006032 <UART_HandleCommand+0x23e>
    }

    if (!strcmp(t, "COUNTDOWN")) {
 8005f80:	493e      	ldr	r1, [pc, #248]	@ (800607c <UART_HandleCommand+0x288>)
 8005f82:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005f84:	f7fa f8e4 	bl	8000150 <strcmp>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d13f      	bne.n	800600e <UART_HandleCommand+0x21a>
        char *s = strtok(NULL, ":");
 8005f8e:	492c      	ldr	r1, [pc, #176]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005f90:	2000      	movs	r0, #0
 8005f92:	f006 ffa1 	bl	800ced8 <strtok>
 8005f96:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (s && !strcmp(s, "ON")) {
 8005f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d027      	beq.n	8005fee <UART_HandleCommand+0x1fa>
 8005f9e:	492d      	ldr	r1, [pc, #180]	@ (8006054 <UART_HandleCommand+0x260>)
 8005fa0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005fa2:	f7fa f8d5 	bl	8000150 <strcmp>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d120      	bne.n	8005fee <UART_HandleCommand+0x1fa>
            uint16_t min = atoi(strtok(NULL, ":"));
 8005fac:	4924      	ldr	r1, [pc, #144]	@ (8006040 <UART_HandleCommand+0x24c>)
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f006 ff92 	bl	800ced8 <strtok>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f006 f816 	bl	800bfe8 <atoi>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            if (min == 0) min = 1;
 8005fc2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <UART_HandleCommand+0x1dc>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            ModelHandle_StartCountdown(min * 60, 1);
 8005fd0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fc ff28 	bl	8002e34 <ModelHandle_StartCountdown>
            ack("COUNTDOWN_ON");
 8005fe4:	4826      	ldr	r0, [pc, #152]	@ (8006080 <UART_HandleCommand+0x28c>)
 8005fe6:	f7ff fe95 	bl	8005d14 <ack>
        if (s && !strcmp(s, "ON")) {
 8005fea:	bf00      	nop
        } else if (s && !strcmp(s, "OFF")) {
            ModelHandle_StopCountdown();
            ack("COUNTDOWN_OFF");
        }
        return;
 8005fec:	e023      	b.n	8006036 <UART_HandleCommand+0x242>
        } else if (s && !strcmp(s, "OFF")) {
 8005fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d020      	beq.n	8006036 <UART_HandleCommand+0x242>
 8005ff4:	4919      	ldr	r1, [pc, #100]	@ (800605c <UART_HandleCommand+0x268>)
 8005ff6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005ff8:	f7fa f8aa 	bl	8000150 <strcmp>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d119      	bne.n	8006036 <UART_HandleCommand+0x242>
            ModelHandle_StopCountdown();
 8006002:	f7fc fed1 	bl	8002da8 <ModelHandle_StopCountdown>
            ack("COUNTDOWN_OFF");
 8006006:	481f      	ldr	r0, [pc, #124]	@ (8006084 <UART_HandleCommand+0x290>)
 8006008:	f7ff fe84 	bl	8005d14 <ack>
        return;
 800600c:	e013      	b.n	8006036 <UART_HandleCommand+0x242>
    }

    if (!strcmp(t, "STATUS")) {
 800600e:	491e      	ldr	r1, [pc, #120]	@ (8006088 <UART_HandleCommand+0x294>)
 8006010:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006012:	f7fa f89d 	bl	8000150 <strcmp>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <UART_HandleCommand+0x22e>
        UART_SendStatusPacket();
 800601c:	f7ff fea6 	bl	8005d6c <UART_SendStatusPacket>
        return;
 8006020:	e00a      	b.n	8006038 <UART_HandleCommand+0x244>
    }

    err("UNKNOWN");
 8006022:	481a      	ldr	r0, [pc, #104]	@ (800608c <UART_HandleCommand+0x298>)
 8006024:	f7ff fe8c 	bl	8005d40 <err>
 8006028:	e006      	b.n	8006038 <UART_HandleCommand+0x244>
    if (!pkt || pkt[0] == '\0') return;
 800602a:	bf00      	nop
 800602c:	e004      	b.n	8006038 <UART_HandleCommand+0x244>
    if (!t) return;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <UART_HandleCommand+0x244>
        return;
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <UART_HandleCommand+0x244>
        return;
 8006036:	bf00      	nop
}
 8006038:	376c      	adds	r7, #108	@ 0x6c
 800603a:	46bd      	mov	sp, r7
 800603c:	bd90      	pop	{r4, r7, pc}
 800603e:	bf00      	nop
 8006040:	0800f58c 	.word	0x0800f58c
 8006044:	0800f590 	.word	0x0800f590
 8006048:	0800f598 	.word	0x0800f598
 800604c:	0800f5a0 	.word	0x0800f5a0
 8006050:	0800f5a8 	.word	0x0800f5a8
 8006054:	0800f568 	.word	0x0800f568
 8006058:	0800f5b0 	.word	0x0800f5b0
 800605c:	0800f56c 	.word	0x0800f56c
 8006060:	0800f5bc 	.word	0x0800f5bc
 8006064:	0800f5c8 	.word	0x0800f5c8
 8006068:	0800f5d0 	.word	0x0800f5d0
 800606c:	0800f5d8 	.word	0x0800f5d8
 8006070:	0800f5dc 	.word	0x0800f5dc
 8006074:	0800f5e8 	.word	0x0800f5e8
 8006078:	0800f5f0 	.word	0x0800f5f0
 800607c:	0800f5fc 	.word	0x0800f5fc
 8006080:	0800f608 	.word	0x0800f608
 8006084:	0800f618 	.word	0x0800f618
 8006088:	0800f628 	.word	0x0800f628
 800608c:	0800f630 	.word	0x0800f630

08006090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006090:	f7ff fd38 	bl	8005b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006094:	480b      	ldr	r0, [pc, #44]	@ (80060c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006096:	490c      	ldr	r1, [pc, #48]	@ (80060c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006098:	4a0c      	ldr	r2, [pc, #48]	@ (80060cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800609a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800609c:	e002      	b.n	80060a4 <LoopCopyDataInit>

0800609e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800609e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060a2:	3304      	adds	r3, #4

080060a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060a8:	d3f9      	bcc.n	800609e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060aa:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80060ac:	4c09      	ldr	r4, [pc, #36]	@ (80060d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060b0:	e001      	b.n	80060b6 <LoopFillZerobss>

080060b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060b4:	3204      	adds	r2, #4

080060b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060b8:	d3fb      	bcc.n	80060b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80060ba:	f006 ffb9 	bl	800d030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060be:	f7fc f955 	bl	800236c <main>
  bx lr
 80060c2:	4770      	bx	lr
  ldr r0, =_sdata
 80060c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060c8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80060cc:	0800fab8 	.word	0x0800fab8
  ldr r2, =_sbss
 80060d0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80060d4:	20000884 	.word	0x20000884

080060d8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060d8:	e7fe      	b.n	80060d8 <CAN1_RX1_IRQHandler>
	...

080060dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060e0:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <HAL_Init+0x28>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a07      	ldr	r2, [pc, #28]	@ (8006104 <HAL_Init+0x28>)
 80060e6:	f043 0310 	orr.w	r3, r3, #16
 80060ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060ec:	2003      	movs	r0, #3
 80060ee:	f000 ff1f 	bl	8006f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060f2:	2000      	movs	r0, #0
 80060f4:	f000 f808 	bl	8006108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060f8:	f7ff f9ea 	bl	80054d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40022000 	.word	0x40022000

08006108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006110:	4b12      	ldr	r3, [pc, #72]	@ (800615c <HAL_InitTick+0x54>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <HAL_InitTick+0x58>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	4619      	mov	r1, r3
 800611a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800611e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ff37 	bl	8006f9a <HAL_SYSTICK_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e00e      	b.n	8006154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b0f      	cmp	r3, #15
 800613a:	d80a      	bhi.n	8006152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800613c:	2200      	movs	r2, #0
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	f000 feff 	bl	8006f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006148:	4a06      	ldr	r2, [pc, #24]	@ (8006164 <HAL_InitTick+0x5c>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000005c 	.word	0x2000005c
 8006160:	20000064 	.word	0x20000064
 8006164:	20000060 	.word	0x20000060

08006168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_IncTick+0x1c>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <HAL_IncTick+0x20>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4413      	add	r3, r2
 8006178:	4a03      	ldr	r2, [pc, #12]	@ (8006188 <HAL_IncTick+0x20>)
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	20000064 	.word	0x20000064
 8006188:	20000734 	.word	0x20000734

0800618c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return uwTick;
 8006190:	4b02      	ldr	r3, [pc, #8]	@ (800619c <HAL_GetTick+0x10>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	20000734 	.word	0x20000734

080061a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061a8:	f7ff fff0 	bl	800618c <HAL_GetTick>
 80061ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d005      	beq.n	80061c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <HAL_Delay+0x44>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061c6:	bf00      	nop
 80061c8:	f7ff ffe0 	bl	800618c <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d8f7      	bhi.n	80061c8 <HAL_Delay+0x28>
  {
  }
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000064 	.word	0x20000064

080061e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e0be      	b.n	8006388 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff f984 	bl	8005534 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fcb9 	bl	8006ba4 <ADC_ConversionStop_Disable>
 8006232:	4603      	mov	r3, r0
 8006234:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8099 	bne.w	8006376 <HAL_ADC_Init+0x18e>
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8095 	bne.w	8006376 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006254:	f023 0302 	bic.w	r3, r3, #2
 8006258:	f043 0202 	orr.w	r2, r3, #2
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006268:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7b1b      	ldrb	r3, [r3, #12]
 800626e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006270:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4313      	orrs	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006280:	d003      	beq.n	800628a <HAL_ADC_Init+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d102      	bne.n	8006290 <HAL_ADC_Init+0xa8>
 800628a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800628e:	e000      	b.n	8006292 <HAL_ADC_Init+0xaa>
 8006290:	2300      	movs	r3, #0
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7d1b      	ldrb	r3, [r3, #20]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d119      	bne.n	80062d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7b1b      	ldrb	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	035a      	lsls	r2, r3, #13
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e00b      	b.n	80062d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	f043 0201 	orr.w	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	4b28      	ldr	r3, [pc, #160]	@ (8006390 <HAL_ADC_Init+0x1a8>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006304:	d003      	beq.n	800630e <HAL_ADC_Init+0x126>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d104      	bne.n	8006318 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	3b01      	subs	r3, #1
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	430a      	orrs	r2, r1
 800632a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	4b18      	ldr	r3, [pc, #96]	@ (8006394 <HAL_ADC_Init+0x1ac>)
 8006334:	4013      	ands	r3, r2
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d10b      	bne.n	8006354 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006352:	e018      	b.n	8006386 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f023 0312 	bic.w	r3, r3, #18
 800635c:	f043 0210 	orr.w	r2, r3, #16
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	f043 0201 	orr.w	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006374:	e007      	b.n	8006386 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	f043 0210 	orr.w	r2, r3, #16
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	ffe1f7fd 	.word	0xffe1f7fd
 8006394:	ff1f0efe 	.word	0xff1f0efe

08006398 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_ADC_Start+0x1a>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e098      	b.n	80064e4 <HAL_ADC_Start+0x14c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb98 	bl	8006af0 <ADC_Enable>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 8087 	bne.w	80064da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a41      	ldr	r2, [pc, #260]	@ (80064ec <HAL_ADC_Start+0x154>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d105      	bne.n	80063f6 <HAL_ADC_Start+0x5e>
 80063ea:	4b41      	ldr	r3, [pc, #260]	@ (80064f0 <HAL_ADC_Start+0x158>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d115      	bne.n	8006422 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800640c:	2b00      	cmp	r3, #0
 800640e:	d026      	beq.n	800645e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006418:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006420:	e01d      	b.n	800645e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2f      	ldr	r2, [pc, #188]	@ (80064f0 <HAL_ADC_Start+0x158>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_ADC_Start+0xaa>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2b      	ldr	r2, [pc, #172]	@ (80064ec <HAL_ADC_Start+0x154>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <HAL_ADC_Start+0xc6>
 8006442:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <HAL_ADC_Start+0x158>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006456:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	f023 0206 	bic.w	r2, r3, #6
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006476:	e002      	b.n	800647e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f06f 0202 	mvn.w	r2, #2
 800648e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800649a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800649e:	d113      	bne.n	80064c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80064a4:	4a11      	ldr	r2, [pc, #68]	@ (80064ec <HAL_ADC_Start+0x154>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d105      	bne.n	80064b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80064aa:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <HAL_ADC_Start+0x158>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d108      	bne.n	80064c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80064c4:	609a      	str	r2, [r3, #8]
 80064c6:	e00c      	b.n	80064e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	e003      	b.n	80064e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40012800 	.word	0x40012800
 80064f0:	40012400 	.word	0x40012400

080064f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_ADC_Stop+0x1a>
 800650a:	2302      	movs	r3, #2
 800650c:	e01a      	b.n	8006544 <HAL_ADC_Stop+0x50>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb44 	bl	8006ba4 <ADC_ConversionStop_Disable>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	f043 0201 	orr.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006562:	f7ff fe13 	bl	800618c <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e0d3      	b.n	8006736 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d131      	bne.n	8006600 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d12a      	bne.n	8006600 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80065aa:	e021      	b.n	80065f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d01d      	beq.n	80065f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_ADC_PollForConversion+0x7e>
 80065ba:	f7ff fde7 	bl	800618c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d212      	bcs.n	80065f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	f043 0204 	orr.w	r2, r3, #4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0a2      	b.n	8006736 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0d6      	beq.n	80065ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80065fe:	e070      	b.n	80066e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006600:	4b4f      	ldr	r3, [pc, #316]	@ (8006740 <HAL_ADC_PollForConversion+0x1f4>)
 8006602:	681c      	ldr	r4, [r3, #0]
 8006604:	2002      	movs	r0, #2
 8006606:	f002 ff39 	bl	800947c <HAL_RCCEx_GetPeriphCLKFreq>
 800660a:	4603      	mov	r3, r0
 800660c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6919      	ldr	r1, [r3, #16]
 8006616:	4b4b      	ldr	r3, [pc, #300]	@ (8006744 <HAL_ADC_PollForConversion+0x1f8>)
 8006618:	400b      	ands	r3, r1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d118      	bne.n	8006650 <HAL_ADC_PollForConversion+0x104>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68d9      	ldr	r1, [r3, #12]
 8006624:	4b48      	ldr	r3, [pc, #288]	@ (8006748 <HAL_ADC_PollForConversion+0x1fc>)
 8006626:	400b      	ands	r3, r1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d111      	bne.n	8006650 <HAL_ADC_PollForConversion+0x104>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6919      	ldr	r1, [r3, #16]
 8006632:	4b46      	ldr	r3, [pc, #280]	@ (800674c <HAL_ADC_PollForConversion+0x200>)
 8006634:	400b      	ands	r3, r1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d108      	bne.n	800664c <HAL_ADC_PollForConversion+0x100>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68d9      	ldr	r1, [r3, #12]
 8006640:	4b43      	ldr	r3, [pc, #268]	@ (8006750 <HAL_ADC_PollForConversion+0x204>)
 8006642:	400b      	ands	r3, r1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_ADC_PollForConversion+0x100>
 8006648:	2314      	movs	r3, #20
 800664a:	e020      	b.n	800668e <HAL_ADC_PollForConversion+0x142>
 800664c:	2329      	movs	r3, #41	@ 0x29
 800664e:	e01e      	b.n	800668e <HAL_ADC_PollForConversion+0x142>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6919      	ldr	r1, [r3, #16]
 8006656:	4b3d      	ldr	r3, [pc, #244]	@ (800674c <HAL_ADC_PollForConversion+0x200>)
 8006658:	400b      	ands	r3, r1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_ADC_PollForConversion+0x120>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68d9      	ldr	r1, [r3, #12]
 8006664:	4b3a      	ldr	r3, [pc, #232]	@ (8006750 <HAL_ADC_PollForConversion+0x204>)
 8006666:	400b      	ands	r3, r1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <HAL_ADC_PollForConversion+0x13c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6919      	ldr	r1, [r3, #16]
 8006672:	4b38      	ldr	r3, [pc, #224]	@ (8006754 <HAL_ADC_PollForConversion+0x208>)
 8006674:	400b      	ands	r3, r1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <HAL_ADC_PollForConversion+0x140>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	4b34      	ldr	r3, [pc, #208]	@ (8006754 <HAL_ADC_PollForConversion+0x208>)
 8006682:	400b      	ands	r3, r1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_ADC_PollForConversion+0x140>
 8006688:	2354      	movs	r3, #84	@ 0x54
 800668a:	e000      	b.n	800668e <HAL_ADC_PollForConversion+0x142>
 800668c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006694:	e021      	b.n	80066da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d01a      	beq.n	80066d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_ADC_PollForConversion+0x168>
 80066a4:	f7ff fd72 	bl	800618c <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d20f      	bcs.n	80066d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d90b      	bls.n	80066d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f043 0204 	orr.w	r2, r3, #4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e030      	b.n	8006736 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3301      	adds	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d8d9      	bhi.n	8006696 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f06f 0212 	mvn.w	r2, #18
 80066ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006702:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006706:	d115      	bne.n	8006734 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800670c:	2b00      	cmp	r3, #0
 800670e:	d111      	bne.n	8006734 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	f043 0201 	orr.w	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bd90      	pop	{r4, r7, pc}
 800673e:	bf00      	nop
 8006740:	2000005c 	.word	0x2000005c
 8006744:	24924924 	.word	0x24924924
 8006748:	00924924 	.word	0x00924924
 800674c:	12492492 	.word	0x12492492
 8006750:	00492492 	.word	0x00492492
 8006754:	00249249 	.word	0x00249249

08006758 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d03e      	beq.n	8006810 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d039      	beq.n	8006810 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80067be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80067c2:	d11d      	bne.n	8006800 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d119      	bne.n	8006800 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0220 	bic.w	r2, r2, #32
 80067da:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb fd5d 	bl	80022c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f06f 0212 	mvn.w	r2, #18
 800680e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d04d      	beq.n	80068b6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d048      	beq.n	80068b6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006846:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800684a:	d012      	beq.n	8006872 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006856:	2b00      	cmp	r3, #0
 8006858:	d125      	bne.n	80068a6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006864:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006868:	d11d      	bne.n	80068a6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800686e:	2b00      	cmp	r3, #0
 8006870:	d119      	bne.n	80068a6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006880:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	f043 0201 	orr.w	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa6c 	bl	8006d84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 020c 	mvn.w	r2, #12
 80068b4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f809 	bl	80068ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0201 	mvn.w	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x20>
 800691c:	2302      	movs	r3, #2
 800691e:	e0dc      	b.n	8006ada <HAL_ADC_ConfigChannel+0x1da>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b06      	cmp	r3, #6
 800692e:	d81c      	bhi.n	800696a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	3b05      	subs	r3, #5
 8006942:	221f      	movs	r2, #31
 8006944:	fa02 f303 	lsl.w	r3, r2, r3
 8006948:	43db      	mvns	r3, r3
 800694a:	4019      	ands	r1, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	3b05      	subs	r3, #5
 800695c:	fa00 f203 	lsl.w	r2, r0, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	635a      	str	r2, [r3, #52]	@ 0x34
 8006968:	e03c      	b.n	80069e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b0c      	cmp	r3, #12
 8006970:	d81c      	bhi.n	80069ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	3b23      	subs	r3, #35	@ 0x23
 8006984:	221f      	movs	r2, #31
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	4019      	ands	r1, r3
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	3b23      	subs	r3, #35	@ 0x23
 800699e:	fa00 f203 	lsl.w	r2, r0, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80069aa:	e01b      	b.n	80069e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	3b41      	subs	r3, #65	@ 0x41
 80069be:	221f      	movs	r2, #31
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	4019      	ands	r1, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	3b41      	subs	r3, #65	@ 0x41
 80069d8:	fa00 f203 	lsl.w	r2, r0, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	d91c      	bls.n	8006a26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68d9      	ldr	r1, [r3, #12]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4413      	add	r3, r2
 80069fc:	3b1e      	subs	r3, #30
 80069fe:	2207      	movs	r2, #7
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	4019      	ands	r1, r3
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6898      	ldr	r0, [r3, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	3b1e      	subs	r3, #30
 8006a18:	fa00 f203 	lsl.w	r2, r0, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	60da      	str	r2, [r3, #12]
 8006a24:	e019      	b.n	8006a5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6919      	ldr	r1, [r3, #16]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	2207      	movs	r2, #7
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	4019      	ands	r1, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6898      	ldr	r0, [r3, #8]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b10      	cmp	r3, #16
 8006a60:	d003      	beq.n	8006a6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006a66:	2b11      	cmp	r3, #17
 8006a68:	d132      	bne.n	8006ad0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <HAL_ADC_ConfigChannel+0x1e4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d125      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d126      	bne.n	8006ad0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006a90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d11a      	bne.n	8006ad0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a9a:	4b13      	ldr	r3, [pc, #76]	@ (8006ae8 <HAL_ADC_ConfigChannel+0x1e8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	@ (8006aec <HAL_ADC_ConfigChannel+0x1ec>)
 8006aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa4:	0c9a      	lsrs	r2, r3, #18
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ab0:	e002      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f9      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x1b2>
 8006abe:	e007      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	40012400 	.word	0x40012400
 8006ae8:	2000005c 	.word	0x2000005c
 8006aec:	431bde83 	.word	0x431bde83

08006af0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d040      	beq.n	8006b90 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b9c <ADC_Enable+0xac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba0 <ADC_Enable+0xb0>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	0c9b      	lsrs	r3, r3, #18
 8006b2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006b2c:	e002      	b.n	8006b34 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f9      	bne.n	8006b2e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b3a:	f7ff fb27 	bl	800618c <HAL_GetTick>
 8006b3e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006b40:	e01f      	b.n	8006b82 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b42:	f7ff fb23 	bl	800618c <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d918      	bls.n	8006b82 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d011      	beq.n	8006b82 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	f043 0210 	orr.w	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	f043 0201 	orr.w	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e007      	b.n	8006b92 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d1d8      	bne.n	8006b42 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000005c 	.word	0x2000005c
 8006ba0:	431bde83 	.word	0x431bde83

08006ba4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d12e      	bne.n	8006c1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bce:	f7ff fadd 	bl	800618c <HAL_GetTick>
 8006bd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006bd4:	e01b      	b.n	8006c0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006bd6:	f7ff fad9 	bl	800618c <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d914      	bls.n	8006c0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10d      	bne.n	8006c0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	f043 0210 	orr.w	r2, r3, #16
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	f043 0201 	orr.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e007      	b.n	8006c1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d0dc      	beq.n	8006bd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_ADCEx_Calibration_Start+0x1e>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e097      	b.n	8006d76 <HAL_ADCEx_Calibration_Start+0x14e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff ffa8 	bl	8006ba4 <ADC_ConversionStop_Disable>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff49 	bl	8006af0 <ADC_Enable>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 8081 	bne.w	8006d6c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006c72:	f023 0302 	bic.w	r3, r3, #2
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006c7e:	4b40      	ldr	r3, [pc, #256]	@ (8006d80 <HAL_ADCEx_Calibration_Start+0x158>)
 8006c80:	681c      	ldr	r4, [r3, #0]
 8006c82:	2002      	movs	r0, #2
 8006c84:	f002 fbfa 	bl	800947c <HAL_RCCEx_GetPeriphCLKFreq>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8006c8e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8006c90:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8006c92:	e002      	b.n	8006c9a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f9      	bne.n	8006c94 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0208 	orr.w	r2, r2, #8
 8006cae:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006cb0:	f7ff fa6c 	bl	800618c <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006cb6:	e01b      	b.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006cb8:	f7ff fa68 	bl	800618c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b0a      	cmp	r3, #10
 8006cc4:	d914      	bls.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f023 0312 	bic.w	r3, r3, #18
 8006cdc:	f043 0210 	orr.w	r2, r3, #16
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e042      	b.n	8006d76 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1dc      	bne.n	8006cb8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0204 	orr.w	r2, r2, #4
 8006d0c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006d0e:	f7ff fa3d 	bl	800618c <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006d14:	e01b      	b.n	8006d4e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006d16:	f7ff fa39 	bl	800618c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b0a      	cmp	r3, #10
 8006d22:	d914      	bls.n	8006d4e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00d      	beq.n	8006d4e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	f023 0312 	bic.w	r3, r3, #18
 8006d3a:	f043 0210 	orr.w	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e013      	b.n	8006d76 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1dc      	bne.n	8006d16 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	f043 0201 	orr.w	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd90      	pop	{r4, r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000005c 	.word	0x2000005c

08006d84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
	...

08006d98 <__NVIC_SetPriorityGrouping>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da8:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <__NVIC_SetPriorityGrouping+0x44>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006db4:	4013      	ands	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dca:	4a04      	ldr	r2, [pc, #16]	@ (8006ddc <__NVIC_SetPriorityGrouping+0x44>)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	60d3      	str	r3, [r2, #12]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	e000ed00 	.word	0xe000ed00

08006de0 <__NVIC_GetPriorityGrouping>:
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006de4:	4b04      	ldr	r3, [pc, #16]	@ (8006df8 <__NVIC_GetPriorityGrouping+0x18>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	f003 0307 	and.w	r3, r3, #7
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000ed00 	.word	0xe000ed00

08006dfc <__NVIC_EnableIRQ>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	db0b      	blt.n	8006e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	f003 021f 	and.w	r2, r3, #31
 8006e14:	4906      	ldr	r1, [pc, #24]	@ (8006e30 <__NVIC_EnableIRQ+0x34>)
 8006e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	e000e100 	.word	0xe000e100

08006e34 <__NVIC_SetPriority>:
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db0a      	blt.n	8006e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	490c      	ldr	r1, [pc, #48]	@ (8006e80 <__NVIC_SetPriority+0x4c>)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	0112      	lsls	r2, r2, #4
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	440b      	add	r3, r1
 8006e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e5c:	e00a      	b.n	8006e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	4908      	ldr	r1, [pc, #32]	@ (8006e84 <__NVIC_SetPriority+0x50>)
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	3b04      	subs	r3, #4
 8006e6c:	0112      	lsls	r2, r2, #4
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	440b      	add	r3, r1
 8006e72:	761a      	strb	r2, [r3, #24]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	e000e100 	.word	0xe000e100
 8006e84:	e000ed00 	.word	0xe000ed00

08006e88 <NVIC_EncodePriority>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b089      	sub	sp, #36	@ 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	bf28      	it	cs
 8006ea6:	2304      	movcs	r3, #4
 8006ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d902      	bls.n	8006eb8 <NVIC_EncodePriority+0x30>
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	3b03      	subs	r3, #3
 8006eb6:	e000      	b.n	8006eba <NVIC_EncodePriority+0x32>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	43da      	mvns	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	401a      	ands	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eda:	43d9      	mvns	r1, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee0:	4313      	orrs	r3, r2
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3724      	adds	r7, #36	@ 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006efc:	d301      	bcc.n	8006f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006efe:	2301      	movs	r3, #1
 8006f00:	e00f      	b.n	8006f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f02:	4a0a      	ldr	r2, [pc, #40]	@ (8006f2c <SysTick_Config+0x40>)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f0a:	210f      	movs	r1, #15
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	f7ff ff90 	bl	8006e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <SysTick_Config+0x40>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f1a:	4b04      	ldr	r3, [pc, #16]	@ (8006f2c <SysTick_Config+0x40>)
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	e000e010 	.word	0xe000e010

08006f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff ff2d 	bl	8006d98 <__NVIC_SetPriorityGrouping>
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b086      	sub	sp, #24
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f58:	f7ff ff42 	bl	8006de0 <__NVIC_GetPriorityGrouping>
 8006f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	6978      	ldr	r0, [r7, #20]
 8006f64:	f7ff ff90 	bl	8006e88 <NVIC_EncodePriority>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff ff5f 	bl	8006e34 <__NVIC_SetPriority>
}
 8006f76:	bf00      	nop
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	4603      	mov	r3, r0
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ff35 	bl	8006dfc <__NVIC_EnableIRQ>
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff ffa2 	bl	8006eec <SysTick_Config>
 8006fa8:	4603      	mov	r3, r0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d008      	beq.n	8006fdc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e020      	b.n	800701e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 020e 	bic.w	r2, r2, #14
 8006fea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f202 	lsl.w	r2, r1, r2
 800700a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d005      	beq.n	800704c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2204      	movs	r2, #4
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e051      	b.n	80070f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 020e 	bic.w	r2, r2, #14
 800705a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <HAL_DMA_Abort_IT+0xd4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d029      	beq.n	80070ca <HAL_DMA_Abort_IT+0xa2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a21      	ldr	r2, [pc, #132]	@ (8007100 <HAL_DMA_Abort_IT+0xd8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d022      	beq.n	80070c6 <HAL_DMA_Abort_IT+0x9e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1f      	ldr	r2, [pc, #124]	@ (8007104 <HAL_DMA_Abort_IT+0xdc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01a      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x98>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1e      	ldr	r2, [pc, #120]	@ (8007108 <HAL_DMA_Abort_IT+0xe0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d012      	beq.n	80070ba <HAL_DMA_Abort_IT+0x92>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <HAL_DMA_Abort_IT+0xe4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00a      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x8c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007110 <HAL_DMA_Abort_IT+0xe8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d102      	bne.n	80070ae <HAL_DMA_Abort_IT+0x86>
 80070a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80070ac:	e00e      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070b2:	e00b      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80070b8:	e008      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070be:	e005      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070c4:	e002      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070c6:	2310      	movs	r3, #16
 80070c8:	e000      	b.n	80070cc <HAL_DMA_Abort_IT+0xa4>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4a11      	ldr	r2, [pc, #68]	@ (8007114 <HAL_DMA_Abort_IT+0xec>)
 80070ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
    } 
  }
  return status;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40020008 	.word	0x40020008
 8007100:	4002001c 	.word	0x4002001c
 8007104:	40020030 	.word	0x40020030
 8007108:	40020044 	.word	0x40020044
 800710c:	40020058 	.word	0x40020058
 8007110:	4002006c 	.word	0x4002006c
 8007114:	40020000 	.word	0x40020000

08007118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007118:	b480      	push	{r7}
 800711a:	b08b      	sub	sp, #44	@ 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007126:	2300      	movs	r3, #0
 8007128:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800712a:	e169      	b.n	8007400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800712c:	2201      	movs	r2, #1
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	429a      	cmp	r2, r3
 8007146:	f040 8158 	bne.w	80073fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4a9a      	ldr	r2, [pc, #616]	@ (80073b8 <HAL_GPIO_Init+0x2a0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d05e      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
 8007154:	4a98      	ldr	r2, [pc, #608]	@ (80073b8 <HAL_GPIO_Init+0x2a0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d875      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 800715a:	4a98      	ldr	r2, [pc, #608]	@ (80073bc <HAL_GPIO_Init+0x2a4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d058      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
 8007160:	4a96      	ldr	r2, [pc, #600]	@ (80073bc <HAL_GPIO_Init+0x2a4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d86f      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 8007166:	4a96      	ldr	r2, [pc, #600]	@ (80073c0 <HAL_GPIO_Init+0x2a8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d052      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
 800716c:	4a94      	ldr	r2, [pc, #592]	@ (80073c0 <HAL_GPIO_Init+0x2a8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d869      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 8007172:	4a94      	ldr	r2, [pc, #592]	@ (80073c4 <HAL_GPIO_Init+0x2ac>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d04c      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
 8007178:	4a92      	ldr	r2, [pc, #584]	@ (80073c4 <HAL_GPIO_Init+0x2ac>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d863      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 800717e:	4a92      	ldr	r2, [pc, #584]	@ (80073c8 <HAL_GPIO_Init+0x2b0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d046      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
 8007184:	4a90      	ldr	r2, [pc, #576]	@ (80073c8 <HAL_GPIO_Init+0x2b0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d85d      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 800718a:	2b12      	cmp	r3, #18
 800718c:	d82a      	bhi.n	80071e4 <HAL_GPIO_Init+0xcc>
 800718e:	2b12      	cmp	r3, #18
 8007190:	d859      	bhi.n	8007246 <HAL_GPIO_Init+0x12e>
 8007192:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_GPIO_Init+0x80>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	08007213 	.word	0x08007213
 800719c:	080071ed 	.word	0x080071ed
 80071a0:	080071ff 	.word	0x080071ff
 80071a4:	08007241 	.word	0x08007241
 80071a8:	08007247 	.word	0x08007247
 80071ac:	08007247 	.word	0x08007247
 80071b0:	08007247 	.word	0x08007247
 80071b4:	08007247 	.word	0x08007247
 80071b8:	08007247 	.word	0x08007247
 80071bc:	08007247 	.word	0x08007247
 80071c0:	08007247 	.word	0x08007247
 80071c4:	08007247 	.word	0x08007247
 80071c8:	08007247 	.word	0x08007247
 80071cc:	08007247 	.word	0x08007247
 80071d0:	08007247 	.word	0x08007247
 80071d4:	08007247 	.word	0x08007247
 80071d8:	08007247 	.word	0x08007247
 80071dc:	080071f5 	.word	0x080071f5
 80071e0:	08007209 	.word	0x08007209
 80071e4:	4a79      	ldr	r2, [pc, #484]	@ (80073cc <HAL_GPIO_Init+0x2b4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80071ea:	e02c      	b.n	8007246 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	623b      	str	r3, [r7, #32]
          break;
 80071f2:	e029      	b.n	8007248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	3304      	adds	r3, #4
 80071fa:	623b      	str	r3, [r7, #32]
          break;
 80071fc:	e024      	b.n	8007248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	3308      	adds	r3, #8
 8007204:	623b      	str	r3, [r7, #32]
          break;
 8007206:	e01f      	b.n	8007248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	330c      	adds	r3, #12
 800720e:	623b      	str	r3, [r7, #32]
          break;
 8007210:	e01a      	b.n	8007248 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800721a:	2304      	movs	r3, #4
 800721c:	623b      	str	r3, [r7, #32]
          break;
 800721e:	e013      	b.n	8007248 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d105      	bne.n	8007234 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007228:	2308      	movs	r3, #8
 800722a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	611a      	str	r2, [r3, #16]
          break;
 8007232:	e009      	b.n	8007248 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007234:	2308      	movs	r3, #8
 8007236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	615a      	str	r2, [r3, #20]
          break;
 800723e:	e003      	b.n	8007248 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007240:	2300      	movs	r3, #0
 8007242:	623b      	str	r3, [r7, #32]
          break;
 8007244:	e000      	b.n	8007248 <HAL_GPIO_Init+0x130>
          break;
 8007246:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2bff      	cmp	r3, #255	@ 0xff
 800724c:	d801      	bhi.n	8007252 <HAL_GPIO_Init+0x13a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	e001      	b.n	8007256 <HAL_GPIO_Init+0x13e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2bff      	cmp	r3, #255	@ 0xff
 800725c:	d802      	bhi.n	8007264 <HAL_GPIO_Init+0x14c>
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	e002      	b.n	800726a <HAL_GPIO_Init+0x152>
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	3b08      	subs	r3, #8
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	210f      	movs	r1, #15
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	6a39      	ldr	r1, [r7, #32]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	fa01 f303 	lsl.w	r3, r1, r3
 8007284:	431a      	orrs	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80b1 	beq.w	80073fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007298:	4b4d      	ldr	r3, [pc, #308]	@ (80073d0 <HAL_GPIO_Init+0x2b8>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	4a4c      	ldr	r2, [pc, #304]	@ (80073d0 <HAL_GPIO_Init+0x2b8>)
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	6193      	str	r3, [r2, #24]
 80072a4:	4b4a      	ldr	r3, [pc, #296]	@ (80073d0 <HAL_GPIO_Init+0x2b8>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80072b0:	4a48      	ldr	r2, [pc, #288]	@ (80073d4 <HAL_GPIO_Init+0x2bc>)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	089b      	lsrs	r3, r3, #2
 80072b6:	3302      	adds	r3, #2
 80072b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	220f      	movs	r2, #15
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4013      	ands	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a40      	ldr	r2, [pc, #256]	@ (80073d8 <HAL_GPIO_Init+0x2c0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <HAL_GPIO_Init+0x1ec>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a3f      	ldr	r2, [pc, #252]	@ (80073dc <HAL_GPIO_Init+0x2c4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00d      	beq.n	8007300 <HAL_GPIO_Init+0x1e8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a3e      	ldr	r2, [pc, #248]	@ (80073e0 <HAL_GPIO_Init+0x2c8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d007      	beq.n	80072fc <HAL_GPIO_Init+0x1e4>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a3d      	ldr	r2, [pc, #244]	@ (80073e4 <HAL_GPIO_Init+0x2cc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_GPIO_Init+0x1e0>
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <HAL_GPIO_Init+0x1ee>
 80072f8:	2304      	movs	r3, #4
 80072fa:	e004      	b.n	8007306 <HAL_GPIO_Init+0x1ee>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e002      	b.n	8007306 <HAL_GPIO_Init+0x1ee>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <HAL_GPIO_Init+0x1ee>
 8007304:	2300      	movs	r3, #0
 8007306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007308:	f002 0203 	and.w	r2, r2, #3
 800730c:	0092      	lsls	r2, r2, #2
 800730e:	4093      	lsls	r3, r2
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007316:	492f      	ldr	r1, [pc, #188]	@ (80073d4 <HAL_GPIO_Init+0x2bc>)
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	3302      	adds	r3, #2
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007330:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	492c      	ldr	r1, [pc, #176]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	608b      	str	r3, [r1, #8]
 800733c:	e006      	b.n	800734c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800733e:	4b2a      	ldr	r3, [pc, #168]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	43db      	mvns	r3, r3
 8007346:	4928      	ldr	r1, [pc, #160]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007348:	4013      	ands	r3, r2
 800734a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007358:	4b23      	ldr	r3, [pc, #140]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	4922      	ldr	r1, [pc, #136]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	4313      	orrs	r3, r2
 8007362:	60cb      	str	r3, [r1, #12]
 8007364:	e006      	b.n	8007374 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007366:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	43db      	mvns	r3, r3
 800736e:	491e      	ldr	r1, [pc, #120]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007370:	4013      	ands	r3, r2
 8007372:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007380:	4b19      	ldr	r3, [pc, #100]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	4918      	ldr	r1, [pc, #96]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	4313      	orrs	r3, r2
 800738a:	604b      	str	r3, [r1, #4]
 800738c:	e006      	b.n	800739c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800738e:	4b16      	ldr	r3, [pc, #88]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	43db      	mvns	r3, r3
 8007396:	4914      	ldr	r1, [pc, #80]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 8007398:	4013      	ands	r3, r2
 800739a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d021      	beq.n	80073ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80073a8:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	490e      	ldr	r1, [pc, #56]	@ (80073e8 <HAL_GPIO_Init+0x2d0>)
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	600b      	str	r3, [r1, #0]
 80073b4:	e021      	b.n	80073fa <HAL_GPIO_Init+0x2e2>
 80073b6:	bf00      	nop
 80073b8:	10320000 	.word	0x10320000
 80073bc:	10310000 	.word	0x10310000
 80073c0:	10220000 	.word	0x10220000
 80073c4:	10210000 	.word	0x10210000
 80073c8:	10120000 	.word	0x10120000
 80073cc:	10110000 	.word	0x10110000
 80073d0:	40021000 	.word	0x40021000
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010800 	.word	0x40010800
 80073dc:	40010c00 	.word	0x40010c00
 80073e0:	40011000 	.word	0x40011000
 80073e4:	40011400 	.word	0x40011400
 80073e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80073ec:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <HAL_GPIO_Init+0x304>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	43db      	mvns	r3, r3
 80073f4:	4909      	ldr	r1, [pc, #36]	@ (800741c <HAL_GPIO_Init+0x304>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	3301      	adds	r3, #1
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	fa22 f303 	lsr.w	r3, r2, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	f47f ae8e 	bne.w	800712c <HAL_GPIO_Init+0x14>
  }
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	372c      	adds	r7, #44	@ 0x2c
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr
 800741c:	40010400 	.word	0x40010400

08007420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	887b      	ldrh	r3, [r7, #2]
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	e001      	b.n	8007442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	807b      	strh	r3, [r7, #2]
 800745a:	4613      	mov	r3, r2
 800745c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800745e:	787b      	ldrb	r3, [r7, #1]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007464:	887a      	ldrh	r2, [r7, #2]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800746a:	e003      	b.n	8007474 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800746c:	887b      	ldrh	r3, [r7, #2]
 800746e:	041a      	lsls	r2, r3, #16
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	611a      	str	r2, [r3, #16]
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007490:	887a      	ldrh	r2, [r7, #2]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4013      	ands	r3, r2
 8007496:	041a      	lsls	r2, r3, #16
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	43d9      	mvns	r1, r3
 800749c:	887b      	ldrh	r3, [r7, #2]
 800749e:	400b      	ands	r3, r1
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e12b      	b.n	800771a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fe f870 	bl	80055bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2224      	movs	r2, #36	@ 0x24
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007514:	f001 feb6 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 8007518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	4a81      	ldr	r2, [pc, #516]	@ (8007724 <HAL_I2C_Init+0x274>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d807      	bhi.n	8007534 <HAL_I2C_Init+0x84>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4a80      	ldr	r2, [pc, #512]	@ (8007728 <HAL_I2C_Init+0x278>)
 8007528:	4293      	cmp	r3, r2
 800752a:	bf94      	ite	ls
 800752c:	2301      	movls	r3, #1
 800752e:	2300      	movhi	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e006      	b.n	8007542 <HAL_I2C_Init+0x92>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a7d      	ldr	r2, [pc, #500]	@ (800772c <HAL_I2C_Init+0x27c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	bf94      	ite	ls
 800753c:	2301      	movls	r3, #1
 800753e:	2300      	movhi	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e0e7      	b.n	800771a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a78      	ldr	r2, [pc, #480]	@ (8007730 <HAL_I2C_Init+0x280>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	0c9b      	lsrs	r3, r3, #18
 8007554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4a6a      	ldr	r2, [pc, #424]	@ (8007724 <HAL_I2C_Init+0x274>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d802      	bhi.n	8007584 <HAL_I2C_Init+0xd4>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	3301      	adds	r3, #1
 8007582:	e009      	b.n	8007598 <HAL_I2C_Init+0xe8>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	4a69      	ldr	r2, [pc, #420]	@ (8007734 <HAL_I2C_Init+0x284>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	099b      	lsrs	r3, r3, #6
 8007596:	3301      	adds	r3, #1
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	430b      	orrs	r3, r1
 800759e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80075aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	495c      	ldr	r1, [pc, #368]	@ (8007724 <HAL_I2C_Init+0x274>)
 80075b4:	428b      	cmp	r3, r1
 80075b6:	d819      	bhi.n	80075ec <HAL_I2C_Init+0x13c>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	1e59      	subs	r1, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80075cc:	400b      	ands	r3, r1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_I2C_Init+0x138>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1e59      	subs	r1, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80075e0:	3301      	adds	r3, #1
 80075e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e6:	e051      	b.n	800768c <HAL_I2C_Init+0x1dc>
 80075e8:	2304      	movs	r3, #4
 80075ea:	e04f      	b.n	800768c <HAL_I2C_Init+0x1dc>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d111      	bne.n	8007618 <HAL_I2C_Init+0x168>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	1e58      	subs	r0, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	440b      	add	r3, r1
 8007602:	fbb0 f3f3 	udiv	r3, r0, r3
 8007606:	3301      	adds	r3, #1
 8007608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf0c      	ite	eq
 8007610:	2301      	moveq	r3, #1
 8007612:	2300      	movne	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	e012      	b.n	800763e <HAL_I2C_Init+0x18e>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1e58      	subs	r0, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6859      	ldr	r1, [r3, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	0099      	lsls	r1, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	fbb0 f3f3 	udiv	r3, r0, r3
 800762e:	3301      	adds	r3, #1
 8007630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007634:	2b00      	cmp	r3, #0
 8007636:	bf0c      	ite	eq
 8007638:	2301      	moveq	r3, #1
 800763a:	2300      	movne	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_I2C_Init+0x196>
 8007642:	2301      	movs	r3, #1
 8007644:	e022      	b.n	800768c <HAL_I2C_Init+0x1dc>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10e      	bne.n	800766c <HAL_I2C_Init+0x1bc>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1e58      	subs	r0, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6859      	ldr	r1, [r3, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	440b      	add	r3, r1
 800765c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007660:	3301      	adds	r3, #1
 8007662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766a:	e00f      	b.n	800768c <HAL_I2C_Init+0x1dc>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1e58      	subs	r0, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6859      	ldr	r1, [r3, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	0099      	lsls	r1, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007682:	3301      	adds	r3, #1
 8007684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	6809      	ldr	r1, [r1, #0]
 8007690:	4313      	orrs	r3, r2
 8007692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80076ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6911      	ldr	r1, [r2, #16]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68d2      	ldr	r2, [r2, #12]
 80076c6:	4311      	orrs	r1, r2
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695a      	ldr	r2, [r3, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	000186a0 	.word	0x000186a0
 8007728:	001e847f 	.word	0x001e847f
 800772c:	003d08ff 	.word	0x003d08ff
 8007730:	431bde83 	.word	0x431bde83
 8007734:	10624dd3 	.word	0x10624dd3

08007738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	461a      	mov	r2, r3
 8007744:	460b      	mov	r3, r1
 8007746:	817b      	strh	r3, [r7, #10]
 8007748:	4613      	mov	r3, r2
 800774a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800774c:	f7fe fd1e 	bl	800618c <HAL_GetTick>
 8007750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b20      	cmp	r3, #32
 800775c:	f040 80e0 	bne.w	8007920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2319      	movs	r3, #25
 8007766:	2201      	movs	r2, #1
 8007768:	4970      	ldr	r1, [pc, #448]	@ (800792c <HAL_I2C_Master_Transmit+0x1f4>)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 ff7e 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007776:	2302      	movs	r3, #2
 8007778:	e0d3      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_I2C_Master_Transmit+0x50>
 8007784:	2302      	movs	r3, #2
 8007786:	e0cc      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d007      	beq.n	80077ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2221      	movs	r2, #33	@ 0x21
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2210      	movs	r2, #16
 80077ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	893a      	ldrh	r2, [r7, #8]
 80077de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4a50      	ldr	r2, [pc, #320]	@ (8007930 <HAL_I2C_Master_Transmit+0x1f8>)
 80077ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077f0:	8979      	ldrh	r1, [r7, #10]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fd38 	bl	800826c <I2C_MasterRequestWrite>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e08d      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800781c:	e066      	b.n	80078ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	6a39      	ldr	r1, [r7, #32]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f001 f83c 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007832:	2b04      	cmp	r3, #4
 8007834:	d107      	bne.n	8007846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e06b      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b04      	cmp	r3, #4
 8007886:	d11b      	bne.n	80078c0 <HAL_I2C_Master_Transmit+0x188>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	6a39      	ldr	r1, [r7, #32]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f001 f833 	bl	8008930 <I2C_WaitOnBTFFlagUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d107      	bne.n	80078e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e01a      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d194      	bne.n	800781e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e000      	b.n	8007922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	00100002 	.word	0x00100002
 8007930:	ffff0000 	.word	0xffff0000

08007934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af02      	add	r7, sp, #8
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	4608      	mov	r0, r1
 800793e:	4611      	mov	r1, r2
 8007940:	461a      	mov	r2, r3
 8007942:	4603      	mov	r3, r0
 8007944:	817b      	strh	r3, [r7, #10]
 8007946:	460b      	mov	r3, r1
 8007948:	813b      	strh	r3, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800794e:	f7fe fc1d 	bl	800618c <HAL_GetTick>
 8007952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b20      	cmp	r3, #32
 800795e:	f040 80d9 	bne.w	8007b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	2319      	movs	r3, #25
 8007968:	2201      	movs	r2, #1
 800796a:	496d      	ldr	r1, [pc, #436]	@ (8007b20 <HAL_I2C_Mem_Write+0x1ec>)
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fe7d 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007978:	2302      	movs	r3, #2
 800797a:	e0cc      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_I2C_Mem_Write+0x56>
 8007986:	2302      	movs	r3, #2
 8007988:	e0c5      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b01      	cmp	r3, #1
 800799e:	d007      	beq.n	80079b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2221      	movs	r2, #33	@ 0x21
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2240      	movs	r2, #64	@ 0x40
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4a4d      	ldr	r2, [pc, #308]	@ (8007b24 <HAL_I2C_Mem_Write+0x1f0>)
 80079f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079f2:	88f8      	ldrh	r0, [r7, #6]
 80079f4:	893a      	ldrh	r2, [r7, #8]
 80079f6:	8979      	ldrh	r1, [r7, #10]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4603      	mov	r3, r0
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fcb4 	bl	8008370 <I2C_RequestMemoryWrite>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d052      	beq.n	8007ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e081      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 ff42 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d107      	bne.n	8007a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e06b      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_I2C_Mem_Write+0x180>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d017      	beq.n	8007ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1aa      	bne.n	8007a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 ff35 	bl	8008930 <I2C_WaitOnBTFFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00d      	beq.n	8007ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d107      	bne.n	8007ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e016      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e000      	b.n	8007b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	00100002 	.word	0x00100002
 8007b24:	ffff0000 	.word	0xffff0000

08007b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08c      	sub	sp, #48	@ 0x30
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	817b      	strh	r3, [r7, #10]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	813b      	strh	r3, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fe fb21 	bl	800618c <HAL_GetTick>
 8007b4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f040 8250 	bne.w	8007ffa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2319      	movs	r3, #25
 8007b60:	2201      	movs	r2, #1
 8007b62:	4982      	ldr	r1, [pc, #520]	@ (8007d6c <HAL_I2C_Mem_Read+0x244>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fd81 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e243      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_I2C_Mem_Read+0x5a>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e23c      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d007      	beq.n	8007ba8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2222      	movs	r2, #34	@ 0x22
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a62      	ldr	r2, [pc, #392]	@ (8007d70 <HAL_I2C_Mem_Read+0x248>)
 8007be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bea:	88f8      	ldrh	r0, [r7, #6]
 8007bec:	893a      	ldrh	r2, [r7, #8]
 8007bee:	8979      	ldrh	r1, [r7, #10]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fc4e 	bl	800849c <I2C_RequestMemoryRead>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e1f8      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d113      	bne.n	8007c3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e1cc      	b.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d11e      	bne.n	8007c80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c52:	b672      	cpsid	i
}
 8007c54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007c7c:	b662      	cpsie	i
}
 8007c7e:	e035      	b.n	8007cec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d11e      	bne.n	8007cc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c98:	b672      	cpsid	i
}
 8007c9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007cc2:	b662      	cpsie	i
}
 8007cc4:	e012      	b.n	8007cec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007cd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007cec:	e172      	b.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	f200 811f 	bhi.w	8007f36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d123      	bne.n	8007d48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fe5b 	bl	80089c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e173      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d46:	e145      	b.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d152      	bne.n	8007df6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	2200      	movs	r2, #0
 8007d58:	4906      	ldr	r1, [pc, #24]	@ (8007d74 <HAL_I2C_Mem_Read+0x24c>)
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fc86 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e148      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
 8007d6a:	bf00      	nop
 8007d6c:	00100002 	.word	0x00100002
 8007d70:	ffff0000 	.word	0xffff0000
 8007d74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007d78:	b672      	cpsid	i
}
 8007d7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007dbe:	b662      	cpsie	i
}
 8007dc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007df4:	e0ee      	b.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4981      	ldr	r1, [pc, #516]	@ (8008004 <HAL_I2C_Mem_Read+0x4dc>)
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fc33 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e0f5      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e20:	b672      	cpsid	i
}
 8007e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e56:	4b6c      	ldr	r3, [pc, #432]	@ (8008008 <HAL_I2C_Mem_Read+0x4e0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800800c <HAL_I2C_Mem_Read+0x4e4>)
 8007e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e62:	0a1a      	lsrs	r2, r3, #8
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	00da      	lsls	r2, r3, #3
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d118      	bne.n	8007eae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e96:	f043 0220 	orr.w	r2, r3, #32
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007e9e:	b662      	cpsie	i
}
 8007ea0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e0a6      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d1d9      	bne.n	8007e70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007efe:	b662      	cpsie	i
}
 8007f00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f34:	e04e      	b.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fd40 	bl	80089c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e058      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d124      	bne.n	8007fd4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d107      	bne.n	8007fa2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fa0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f ae88 	bne.w	8007cee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e000      	b.n	8007ffc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8007ffa:	2302      	movs	r3, #2
  }
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3728      	adds	r7, #40	@ 0x28
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	00010004 	.word	0x00010004
 8008008:	2000005c 	.word	0x2000005c
 800800c:	14f8b589 	.word	0x14f8b589

08008010 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	@ 0x28
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	460b      	mov	r3, r1
 800801e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008020:	f7fe f8b4 	bl	800618c <HAL_GetTick>
 8008024:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b20      	cmp	r3, #32
 8008034:	f040 8111 	bne.w	800825a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2319      	movs	r3, #25
 800803e:	2201      	movs	r2, #1
 8008040:	4988      	ldr	r1, [pc, #544]	@ (8008264 <HAL_I2C_IsDeviceReady+0x254>)
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fb12 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
 8008050:	e104      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_I2C_IsDeviceReady+0x50>
 800805c:	2302      	movs	r3, #2
 800805e:	e0fd      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b01      	cmp	r3, #1
 8008074:	d007      	beq.n	8008086 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0201 	orr.w	r2, r2, #1
 8008084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008094:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2224      	movs	r2, #36	@ 0x24
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4a70      	ldr	r2, [pc, #448]	@ (8008268 <HAL_I2C_IsDeviceReady+0x258>)
 80080a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fad0 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e0:	d103      	bne.n	80080ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e0b6      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080ee:	897b      	ldrh	r3, [r7, #10]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80080fe:	f7fe f845 	bl	800618c <HAL_GetTick>
 8008102:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008128:	bf0c      	ite	eq
 800812a:	2301      	moveq	r3, #1
 800812c:	2300      	movne	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008132:	e025      	b.n	8008180 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008134:	f7fe f82a 	bl	800618c <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d302      	bcc.n	800814a <HAL_I2C_IsDeviceReady+0x13a>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22a0      	movs	r2, #160	@ 0xa0
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2ba0      	cmp	r3, #160	@ 0xa0
 800818a:	d005      	beq.n	8008198 <HAL_I2C_IsDeviceReady+0x188>
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <HAL_I2C_IsDeviceReady+0x188>
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0cd      	beq.n	8008134 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d129      	bne.n	8008202 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	613b      	str	r3, [r7, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	2319      	movs	r3, #25
 80081da:	2201      	movs	r2, #1
 80081dc:	4921      	ldr	r1, [pc, #132]	@ (8008264 <HAL_I2C_IsDeviceReady+0x254>)
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fa44 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e036      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e02c      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008210:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800821a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	2319      	movs	r3, #25
 8008222:	2201      	movs	r2, #1
 8008224:	490f      	ldr	r1, [pc, #60]	@ (8008264 <HAL_I2C_IsDeviceReady+0x254>)
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fa20 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e012      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	3301      	adds	r3, #1
 800823a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	f4ff af32 	bcc.w	80080aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800825a:	2302      	movs	r3, #2
  }
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	00100002 	.word	0x00100002
 8008268:	ffff0000 	.word	0xffff0000

0800826c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	460b      	mov	r3, r1
 800827a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008280:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b08      	cmp	r3, #8
 8008286:	d006      	beq.n	8008296 <I2C_MasterRequestWrite+0x2a>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d003      	beq.n	8008296 <I2C_MasterRequestWrite+0x2a>
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008294:	d108      	bne.n	80082a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	e00b      	b.n	80082c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	2b12      	cmp	r3, #18
 80082ae:	d107      	bne.n	80082c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f9cd 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e6:	d103      	bne.n	80082f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e035      	b.n	8008360 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fc:	d108      	bne.n	8008310 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082fe:	897b      	ldrh	r3, [r7, #10]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800830c:	611a      	str	r2, [r3, #16]
 800830e:	e01b      	b.n	8008348 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008310:	897b      	ldrh	r3, [r7, #10]
 8008312:	11db      	asrs	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 0306 	and.w	r3, r3, #6
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f063 030f 	orn	r3, r3, #15
 8008320:	b2da      	uxtb	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	490e      	ldr	r1, [pc, #56]	@ (8008368 <I2C_MasterRequestWrite+0xfc>)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fa16 	bl	8008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e010      	b.n	8008360 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800833e:	897b      	ldrh	r3, [r7, #10]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4907      	ldr	r1, [pc, #28]	@ (800836c <I2C_MasterRequestWrite+0x100>)
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa06 	bl	8008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	00010008 	.word	0x00010008
 800836c:	00010002 	.word	0x00010002

08008370 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	461a      	mov	r2, r3
 800837e:	4603      	mov	r3, r0
 8008380:	817b      	strh	r3, [r7, #10]
 8008382:	460b      	mov	r3, r1
 8008384:	813b      	strh	r3, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008398:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f960 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00d      	beq.n	80083ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c0:	d103      	bne.n	80083ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e05f      	b.n	800848e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083ce:	897b      	ldrh	r3, [r7, #10]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	6a3a      	ldr	r2, [r7, #32]
 80083e2:	492d      	ldr	r1, [pc, #180]	@ (8008498 <I2C_RequestMemoryWrite+0x128>)
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f9bb 	bl	8008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e04c      	b.n	800848e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800840a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840c:	6a39      	ldr	r1, [r7, #32]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fa46 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00d      	beq.n	8008436 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841e:	2b04      	cmp	r3, #4
 8008420:	d107      	bne.n	8008432 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008430:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e02b      	b.n	800848e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d105      	bne.n	8008448 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800843c:	893b      	ldrh	r3, [r7, #8]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	611a      	str	r2, [r3, #16]
 8008446:	e021      	b.n	800848c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008448:	893b      	ldrh	r3, [r7, #8]
 800844a:	0a1b      	lsrs	r3, r3, #8
 800844c:	b29b      	uxth	r3, r3
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008458:	6a39      	ldr	r1, [r7, #32]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fa20 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00d      	beq.n	8008482 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846a:	2b04      	cmp	r3, #4
 800846c:	d107      	bne.n	800847e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800847c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e005      	b.n	800848e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	00010002 	.word	0x00010002

0800849c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	461a      	mov	r2, r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	817b      	strh	r3, [r7, #10]
 80084ae:	460b      	mov	r3, r1
 80084b0:	813b      	strh	r3, [r7, #8]
 80084b2:	4613      	mov	r3, r2
 80084b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80084c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	2200      	movs	r2, #0
 80084de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f8c2 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fc:	d103      	bne.n	8008506 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008504:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e0aa      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800850a:	897b      	ldrh	r3, [r7, #10]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008518:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	6a3a      	ldr	r2, [r7, #32]
 800851e:	4952      	ldr	r1, [pc, #328]	@ (8008668 <I2C_RequestMemoryRead+0x1cc>)
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f91d 	bl	8008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e097      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008548:	6a39      	ldr	r1, [r7, #32]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f9a8 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	2b04      	cmp	r3, #4
 800855c:	d107      	bne.n	800856e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800856c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e076      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d105      	bne.n	8008584 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008578:	893b      	ldrh	r3, [r7, #8]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	611a      	str	r2, [r3, #16]
 8008582:	e021      	b.n	80085c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008584:	893b      	ldrh	r3, [r7, #8]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008594:	6a39      	ldr	r1, [r7, #32]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f982 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00d      	beq.n	80085be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d107      	bne.n	80085ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e050      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085be:	893b      	ldrh	r3, [r7, #8]
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ca:	6a39      	ldr	r1, [r7, #32]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f967 	bl	80088a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00d      	beq.n	80085f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d107      	bne.n	80085f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e035      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008602:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	2200      	movs	r2, #0
 800860c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f82b 	bl	800866c <I2C_WaitOnFlagUntilTimeout>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862a:	d103      	bne.n	8008634 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e013      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008638:	897b      	ldrh	r3, [r7, #10]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	6a3a      	ldr	r2, [r7, #32]
 800864c:	4906      	ldr	r1, [pc, #24]	@ (8008668 <I2C_RequestMemoryRead+0x1cc>)
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f886 	bl	8008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	00010002 	.word	0x00010002

0800866c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800867c:	e048      	b.n	8008710 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d044      	beq.n	8008710 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7fd fd81 	bl	800618c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d139      	bne.n	8008710 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10d      	bne.n	80086c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	43da      	mvns	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4013      	ands	r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	e00c      	b.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	43da      	mvns	r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4013      	ands	r3, r2
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d116      	bne.n	8008710 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fc:	f043 0220 	orr.w	r2, r3, #32
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e023      	b.n	8008758 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	0c1b      	lsrs	r3, r3, #16
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b01      	cmp	r3, #1
 8008718:	d10d      	bne.n	8008736 <I2C_WaitOnFlagUntilTimeout+0xca>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	43da      	mvns	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4013      	ands	r3, r2
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	bf0c      	ite	eq
 800872c:	2301      	moveq	r3, #1
 800872e:	2300      	movne	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	e00c      	b.n	8008750 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	43da      	mvns	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4013      	ands	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	bf0c      	ite	eq
 8008748:	2301      	moveq	r3, #1
 800874a:	2300      	movne	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	429a      	cmp	r2, r3
 8008754:	d093      	beq.n	800867e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800876e:	e071      	b.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800877a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800877e:	d123      	bne.n	80087c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800878e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b4:	f043 0204 	orr.w	r2, r3, #4
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e067      	b.n	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d041      	beq.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d0:	f7fd fcdc 	bl	800618c <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d302      	bcc.n	80087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d136      	bne.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10c      	bne.n	800880a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	43da      	mvns	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4013      	ands	r3, r2
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bf14      	ite	ne
 8008802:	2301      	movne	r3, #1
 8008804:	2300      	moveq	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	e00b      	b.n	8008822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	43da      	mvns	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4013      	ands	r3, r2
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2301      	movne	r3, #1
 800881e:	2300      	moveq	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d016      	beq.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e021      	b.n	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	0c1b      	lsrs	r3, r3, #16
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d10c      	bne.n	8008878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	43da      	mvns	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4013      	ands	r3, r2
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	bf14      	ite	ne
 8008870:	2301      	movne	r3, #1
 8008872:	2300      	moveq	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	e00b      	b.n	8008890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	43da      	mvns	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4013      	ands	r3, r2
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	bf14      	ite	ne
 800888a:	2301      	movne	r3, #1
 800888c:	2300      	moveq	r3, #0
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f af6d 	bne.w	8008770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088ac:	e034      	b.n	8008918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 f8e3 	bl	8008a7a <I2C_IsAcknowledgeFailed>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e034      	b.n	8008928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d028      	beq.n	8008918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c6:	f7fd fc61 	bl	800618c <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d302      	bcc.n	80088dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11d      	bne.n	8008918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e6:	2b80      	cmp	r3, #128	@ 0x80
 80088e8:	d016      	beq.n	8008918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008904:	f043 0220 	orr.w	r2, r3, #32
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e007      	b.n	8008928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008922:	2b80      	cmp	r3, #128	@ 0x80
 8008924:	d1c3      	bne.n	80088ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800893c:	e034      	b.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f89b 	bl	8008a7a <I2C_IsAcknowledgeFailed>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e034      	b.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d028      	beq.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008956:	f7fd fc19 	bl	800618c <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11d      	bne.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b04      	cmp	r3, #4
 8008978:	d016      	beq.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	f043 0220 	orr.w	r2, r3, #32
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e007      	b.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d1c3      	bne.n	800893e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089cc:	e049      	b.n	8008a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d119      	bne.n	8008a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f06f 0210 	mvn.w	r2, #16
 80089e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e030      	b.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a10:	f7fd fbbc 	bl	800618c <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d302      	bcc.n	8008a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11d      	bne.n	8008a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a30:	2b40      	cmp	r3, #64	@ 0x40
 8008a32:	d016      	beq.n	8008a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4e:	f043 0220 	orr.w	r2, r3, #32
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e007      	b.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6c:	2b40      	cmp	r3, #64	@ 0x40
 8008a6e:	d1ae      	bne.n	80089ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a90:	d11b      	bne.n	8008aca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab6:	f043 0204 	orr.w	r2, r3, #4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
	...

08008ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <HAL_PWR_EnableBkUpAccess+0x14>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	420e0020 	.word	0x420e0020

08008af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e272      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8087 	beq.w	8008c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b10:	4b92      	ldr	r3, [pc, #584]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 030c 	and.w	r3, r3, #12
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d00c      	beq.n	8008b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f003 030c 	and.w	r3, r3, #12
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d112      	bne.n	8008b4e <HAL_RCC_OscConfig+0x5e>
 8008b28:	4b8c      	ldr	r3, [pc, #560]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d10b      	bne.n	8008b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b36:	4b89      	ldr	r3, [pc, #548]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d06c      	beq.n	8008c1c <HAL_RCC_OscConfig+0x12c>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d168      	bne.n	8008c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e24c      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b56:	d106      	bne.n	8008b66 <HAL_RCC_OscConfig+0x76>
 8008b58:	4b80      	ldr	r3, [pc, #512]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a7f      	ldr	r2, [pc, #508]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	e02e      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10c      	bne.n	8008b88 <HAL_RCC_OscConfig+0x98>
 8008b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a7a      	ldr	r2, [pc, #488]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	4b78      	ldr	r3, [pc, #480]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a77      	ldr	r2, [pc, #476]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	e01d      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b90:	d10c      	bne.n	8008bac <HAL_RCC_OscConfig+0xbc>
 8008b92:	4b72      	ldr	r3, [pc, #456]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a71      	ldr	r2, [pc, #452]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e00b      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008bac:	4b6b      	ldr	r3, [pc, #428]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b68      	ldr	r3, [pc, #416]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a67      	ldr	r2, [pc, #412]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d013      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7fd fade 	bl	800618c <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fd fada 	bl	800618c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	@ 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e200      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be6:	4b5d      	ldr	r3, [pc, #372]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCC_OscConfig+0xe4>
 8008bf2:	e014      	b.n	8008c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fd faca 	bl	800618c <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fd fac6 	bl	800618c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	@ 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e1ec      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0e:	4b53      	ldr	r3, [pc, #332]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0x10c>
 8008c1a:	e000      	b.n	8008c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d063      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c36:	4b49      	ldr	r3, [pc, #292]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d11c      	bne.n	8008c7c <HAL_RCC_OscConfig+0x18c>
 8008c42:	4b46      	ldr	r3, [pc, #280]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d116      	bne.n	8008c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4e:	4b43      	ldr	r3, [pc, #268]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_RCC_OscConfig+0x176>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e1c0      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c66:	4b3d      	ldr	r3, [pc, #244]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4939      	ldr	r1, [pc, #228]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7a:	e03a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d020      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c84:	4b36      	ldr	r3, [pc, #216]	@ (8008d60 <HAL_RCC_OscConfig+0x270>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c8a:	f7fd fa7f 	bl	800618c <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c92:	f7fd fa7b 	bl	800618c <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e1a1      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4927      	ldr	r1, [pc, #156]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCC_OscConfig+0x270>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ccc:	f7fd fa5e 	bl	800618c <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd4:	f7fd fa5a 	bl	800618c <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e180      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03a      	beq.n	8008d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d019      	beq.n	8008d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d06:	4b17      	ldr	r3, [pc, #92]	@ (8008d64 <HAL_RCC_OscConfig+0x274>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d0c:	f7fd fa3e 	bl	800618c <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d14:	f7fd fa3a 	bl	800618c <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e160      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008d32:	2001      	movs	r0, #1
 8008d34:	f000 face 	bl	80092d4 <RCC_Delay>
 8008d38:	e01c      	b.n	8008d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <HAL_RCC_OscConfig+0x274>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d40:	f7fd fa24 	bl	800618c <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d46:	e00f      	b.n	8008d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d48:	f7fd fa20 	bl	800618c <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d908      	bls.n	8008d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e146      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
 8008d5a:	bf00      	nop
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	42420000 	.word	0x42420000
 8008d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d68:	4b92      	ldr	r3, [pc, #584]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e9      	bne.n	8008d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a6 	beq.w	8008ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d86:	4b8b      	ldr	r3, [pc, #556]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d92:	4b88      	ldr	r3, [pc, #544]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	4a87      	ldr	r2, [pc, #540]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d9c:	61d3      	str	r3, [r2, #28]
 8008d9e:	4b85      	ldr	r3, [pc, #532]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da6:	60bb      	str	r3, [r7, #8]
 8008da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dae:	4b82      	ldr	r3, [pc, #520]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d118      	bne.n	8008dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dba:	4b7f      	ldr	r3, [pc, #508]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dc6:	f7fd f9e1 	bl	800618c <HAL_GetTick>
 8008dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dcc:	e008      	b.n	8008de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dce:	f7fd f9dd 	bl	800618c <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b64      	cmp	r3, #100	@ 0x64
 8008dda:	d901      	bls.n	8008de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e103      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de0:	4b75      	ldr	r3, [pc, #468]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0f0      	beq.n	8008dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d106      	bne.n	8008e02 <HAL_RCC_OscConfig+0x312>
 8008df4:	4b6f      	ldr	r3, [pc, #444]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	4a6e      	ldr	r2, [pc, #440]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	6213      	str	r3, [r2, #32]
 8008e00:	e02d      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCC_OscConfig+0x334>
 8008e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4a69      	ldr	r2, [pc, #420]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e10:	f023 0301 	bic.w	r3, r3, #1
 8008e14:	6213      	str	r3, [r2, #32]
 8008e16:	4b67      	ldr	r3, [pc, #412]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	4a66      	ldr	r2, [pc, #408]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e1c:	f023 0304 	bic.w	r3, r3, #4
 8008e20:	6213      	str	r3, [r2, #32]
 8008e22:	e01c      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	d10c      	bne.n	8008e46 <HAL_RCC_OscConfig+0x356>
 8008e2c:	4b61      	ldr	r3, [pc, #388]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	4a60      	ldr	r2, [pc, #384]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e32:	f043 0304 	orr.w	r3, r3, #4
 8008e36:	6213      	str	r3, [r2, #32]
 8008e38:	4b5e      	ldr	r3, [pc, #376]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	6213      	str	r3, [r2, #32]
 8008e44:	e00b      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e46:	4b5b      	ldr	r3, [pc, #364]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	6213      	str	r3, [r2, #32]
 8008e52:	4b58      	ldr	r3, [pc, #352]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	4a57      	ldr	r2, [pc, #348]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e58:	f023 0304 	bic.w	r3, r3, #4
 8008e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d015      	beq.n	8008e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e66:	f7fd f991 	bl	800618c <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6c:	e00a      	b.n	8008e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6e:	f7fd f98d 	bl	800618c <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e0b1      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e84:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0ee      	beq.n	8008e6e <HAL_RCC_OscConfig+0x37e>
 8008e90:	e014      	b.n	8008ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e92:	f7fd f97b 	bl	800618c <HAL_GetTick>
 8008e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e98:	e00a      	b.n	8008eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9a:	f7fd f977 	bl	800618c <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e09b      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb0:	4b40      	ldr	r3, [pc, #256]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ee      	bne.n	8008e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d105      	bne.n	8008ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8087 	beq.w	8008fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ed8:	4b36      	ldr	r3, [pc, #216]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f003 030c 	and.w	r3, r3, #12
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d061      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d146      	bne.n	8008f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eec:	4b33      	ldr	r3, [pc, #204]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef2:	f7fd f94b 	bl	800618c <HAL_GetTick>
 8008ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008efa:	f7fd f947 	bl	800618c <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e06d      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f0c:	4b29      	ldr	r3, [pc, #164]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f0      	bne.n	8008efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f20:	d108      	bne.n	8008f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f22:	4b24      	ldr	r3, [pc, #144]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	4921      	ldr	r1, [pc, #132]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f34:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a19      	ldr	r1, [r3, #32]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	430b      	orrs	r3, r1
 8008f46:	491b      	ldr	r1, [pc, #108]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f52:	f7fd f91b 	bl	800618c <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f58:	e008      	b.n	8008f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5a:	f7fd f917 	bl	800618c <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e03d      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f6c:	4b11      	ldr	r3, [pc, #68]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f0      	beq.n	8008f5a <HAL_RCC_OscConfig+0x46a>
 8008f78:	e035      	b.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7a:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f80:	f7fd f904 	bl	800618c <HAL_GetTick>
 8008f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f88:	f7fd f900 	bl	800618c <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e026      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f9a:	4b06      	ldr	r3, [pc, #24]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1f0      	bne.n	8008f88 <HAL_RCC_OscConfig+0x498>
 8008fa6:	e01e      	b.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d107      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e019      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	40007000 	.word	0x40007000
 8008fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <HAL_RCC_OscConfig+0x500>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d001      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40021000 	.word	0x40021000

08008ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0d0      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009008:	4b6a      	ldr	r3, [pc, #424]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d910      	bls.n	8009038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009016:	4b67      	ldr	r3, [pc, #412]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f023 0207 	bic.w	r2, r3, #7
 800901e:	4965      	ldr	r1, [pc, #404]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	4313      	orrs	r3, r2
 8009024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009026:	4b63      	ldr	r3, [pc, #396]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e0b8      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d020      	beq.n	8009086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009050:	4b59      	ldr	r3, [pc, #356]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4a58      	ldr	r2, [pc, #352]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800905a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009068:	4b53      	ldr	r3, [pc, #332]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a52      	ldr	r2, [pc, #328]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800906e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009074:	4b50      	ldr	r3, [pc, #320]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	494d      	ldr	r1, [pc, #308]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009082:	4313      	orrs	r3, r2
 8009084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d040      	beq.n	8009114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d107      	bne.n	80090aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	4b47      	ldr	r3, [pc, #284]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d115      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e07f      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d107      	bne.n	80090c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090b2:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e073      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090c2:	4b3d      	ldr	r3, [pc, #244]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e06b      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090d2:	4b39      	ldr	r3, [pc, #228]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f023 0203 	bic.w	r2, r3, #3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	4936      	ldr	r1, [pc, #216]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090e4:	f7fd f852 	bl	800618c <HAL_GetTick>
 80090e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ea:	e00a      	b.n	8009102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ec:	f7fd f84e 	bl	800618c <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e053      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009102:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f003 020c 	and.w	r2, r3, #12
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	429a      	cmp	r2, r3
 8009112:	d1eb      	bne.n	80090ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009114:	4b27      	ldr	r3, [pc, #156]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d210      	bcs.n	8009144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009122:	4b24      	ldr	r3, [pc, #144]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f023 0207 	bic.w	r2, r3, #7
 800912a:	4922      	ldr	r1, [pc, #136]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4313      	orrs	r3, r2
 8009130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009132:	4b20      	ldr	r3, [pc, #128]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d001      	beq.n	8009144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e032      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d008      	beq.n	8009162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009150:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4916      	ldr	r1, [pc, #88]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800915e:	4313      	orrs	r3, r2
 8009160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800916e:	4b12      	ldr	r3, [pc, #72]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	490e      	ldr	r1, [pc, #56]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800917e:	4313      	orrs	r3, r2
 8009180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009182:	f000 f821 	bl	80091c8 <HAL_RCC_GetSysClockFreq>
 8009186:	4602      	mov	r2, r0
 8009188:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	490a      	ldr	r1, [pc, #40]	@ (80091bc <HAL_RCC_ClockConfig+0x1c8>)
 8009194:	5ccb      	ldrb	r3, [r1, r3]
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	4a09      	ldr	r2, [pc, #36]	@ (80091c0 <HAL_RCC_ClockConfig+0x1cc>)
 800919c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <HAL_RCC_ClockConfig+0x1d0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fc ffb0 	bl	8006108 <HAL_InitTick>

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40022000 	.word	0x40022000
 80091b8:	40021000 	.word	0x40021000
 80091bc:	0800f69c 	.word	0x0800f69c
 80091c0:	2000005c 	.word	0x2000005c
 80091c4:	20000060 	.word	0x20000060

080091c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	2300      	movs	r3, #0
 80091dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80091e2:	4b1e      	ldr	r3, [pc, #120]	@ (800925c <HAL_RCC_GetSysClockFreq+0x94>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d002      	beq.n	80091f8 <HAL_RCC_GetSysClockFreq+0x30>
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d003      	beq.n	80091fe <HAL_RCC_GetSysClockFreq+0x36>
 80091f6:	e027      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091f8:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x98>)
 80091fa:	613b      	str	r3, [r7, #16]
      break;
 80091fc:	e027      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	0c9b      	lsrs	r3, r3, #18
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	4a17      	ldr	r2, [pc, #92]	@ (8009264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009208:	5cd3      	ldrb	r3, [r2, r3]
 800920a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009216:	4b11      	ldr	r3, [pc, #68]	@ (800925c <HAL_RCC_GetSysClockFreq+0x94>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	0c5b      	lsrs	r3, r3, #17
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	4a11      	ldr	r2, [pc, #68]	@ (8009268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009222:	5cd3      	ldrb	r3, [r2, r3]
 8009224:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a0d      	ldr	r2, [pc, #52]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x98>)
 800922a:	fb03 f202 	mul.w	r2, r3, r2
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	fbb2 f3f3 	udiv	r3, r2, r3
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e004      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a0c      	ldr	r2, [pc, #48]	@ (800926c <HAL_RCC_GetSysClockFreq+0xa4>)
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	613b      	str	r3, [r7, #16]
      break;
 8009246:	e002      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009248:	4b05      	ldr	r3, [pc, #20]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x98>)
 800924a:	613b      	str	r3, [r7, #16]
      break;
 800924c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800924e:	693b      	ldr	r3, [r7, #16]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40021000 	.word	0x40021000
 8009260:	007a1200 	.word	0x007a1200
 8009264:	0800f6b4 	.word	0x0800f6b4
 8009268:	0800f6c4 	.word	0x0800f6c4
 800926c:	003d0900 	.word	0x003d0900

08009270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009274:	4b02      	ldr	r3, [pc, #8]	@ (8009280 <HAL_RCC_GetHCLKFreq+0x10>)
 8009276:	681b      	ldr	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	2000005c 	.word	0x2000005c

08009284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009288:	f7ff fff2 	bl	8009270 <HAL_RCC_GetHCLKFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	4903      	ldr	r1, [pc, #12]	@ (80092a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40021000 	.word	0x40021000
 80092a8:	0800f6ac 	.word	0x0800f6ac

080092ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092b0:	f7ff ffde 	bl	8009270 <HAL_RCC_GetHCLKFreq>
 80092b4:	4602      	mov	r2, r0
 80092b6:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	0adb      	lsrs	r3, r3, #11
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	4903      	ldr	r1, [pc, #12]	@ (80092d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c2:	5ccb      	ldrb	r3, [r1, r3]
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40021000 	.word	0x40021000
 80092d0:	0800f6ac 	.word	0x0800f6ac

080092d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80092dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <RCC_Delay+0x34>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a0a      	ldr	r2, [pc, #40]	@ (800930c <RCC_Delay+0x38>)
 80092e2:	fba2 2303 	umull	r2, r3, r2, r3
 80092e6:	0a5b      	lsrs	r3, r3, #9
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80092f0:	bf00      	nop
  }
  while (Delay --);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1e5a      	subs	r2, r3, #1
 80092f6:	60fa      	str	r2, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f9      	bne.n	80092f0 <RCC_Delay+0x1c>
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr
 8009308:	2000005c 	.word	0x2000005c
 800930c:	10624dd3 	.word	0x10624dd3

08009310 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d07d      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009330:	4b4f      	ldr	r3, [pc, #316]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10d      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800933c:	4b4c      	ldr	r3, [pc, #304]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	4a4b      	ldr	r2, [pc, #300]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009346:	61d3      	str	r3, [r2, #28]
 8009348:	4b49      	ldr	r3, [pc, #292]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009354:	2301      	movs	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009358:	4b46      	ldr	r3, [pc, #280]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009360:	2b00      	cmp	r3, #0
 8009362:	d118      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009364:	4b43      	ldr	r3, [pc, #268]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a42      	ldr	r2, [pc, #264]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800936a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800936e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009370:	f7fc ff0c 	bl	800618c <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009376:	e008      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009378:	f7fc ff08 	bl	800618c <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b64      	cmp	r3, #100	@ 0x64
 8009384:	d901      	bls.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e06d      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800938a:	4b3a      	ldr	r3, [pc, #232]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f0      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009396:	4b36      	ldr	r3, [pc, #216]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800939e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d02e      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d027      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093be:	4b2e      	ldr	r3, [pc, #184]	@ (8009478 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093c4:	4b2c      	ldr	r3, [pc, #176]	@ (8009478 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80093ca:	4a29      	ldr	r2, [pc, #164]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d014      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093da:	f7fc fed7 	bl	800618c <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093e0:	e00a      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f7fc fed3 	bl	800618c <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e036      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ee      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009404:	4b1a      	ldr	r3, [pc, #104]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4917      	ldr	r1, [pc, #92]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009412:	4313      	orrs	r3, r2
 8009414:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d105      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800941c:	4b14      	ldr	r3, [pc, #80]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	4a13      	ldr	r2, [pc, #76]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009426:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009434:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	490b      	ldr	r1, [pc, #44]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009442:	4313      	orrs	r3, r2
 8009444:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0310 	and.w	r3, r3, #16
 800944e:	2b00      	cmp	r3, #0
 8009450:	d008      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009452:	4b07      	ldr	r3, [pc, #28]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	4904      	ldr	r1, [pc, #16]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009460:	4313      	orrs	r3, r2
 8009462:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40021000 	.word	0x40021000
 8009474:	40007000 	.word	0x40007000
 8009478:	42420440 	.word	0x42420440

0800947c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	2300      	movs	r3, #0
 800948a:	61fb      	str	r3, [r7, #28]
 800948c:	2300      	movs	r3, #0
 800948e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b10      	cmp	r3, #16
 800949c:	d00a      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	f200 808a 	bhi.w	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d045      	beq.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d075      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80094b2:	e082      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80094b4:	4b46      	ldr	r3, [pc, #280]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80094ba:	4b45      	ldr	r3, [pc, #276]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d07b      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	0c9b      	lsrs	r3, r3, #18
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	4a41      	ldr	r2, [pc, #260]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80094d0:	5cd3      	ldrb	r3, [r2, r3]
 80094d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d015      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80094de:	4b3c      	ldr	r3, [pc, #240]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	0c5b      	lsrs	r3, r3, #17
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	4a3b      	ldr	r2, [pc, #236]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80094ea:	5cd3      	ldrb	r3, [r2, r3]
 80094ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00d      	beq.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80094f8:	4a38      	ldr	r2, [pc, #224]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	fb02 f303 	mul.w	r3, r2, r3
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	e004      	b.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	4a34      	ldr	r2, [pc, #208]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009514:	4b2e      	ldr	r3, [pc, #184]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800951c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009520:	d102      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	61bb      	str	r3, [r7, #24]
      break;
 8009526:	e04a      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	4a2d      	ldr	r2, [pc, #180]	@ (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800952e:	fba2 2303 	umull	r2, r3, r2, r3
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	61bb      	str	r3, [r7, #24]
      break;
 8009536:	e042      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8009538:	4b25      	ldr	r3, [pc, #148]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009548:	d108      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8009554:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	e01f      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009566:	d109      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009568:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8009574:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	e00f      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009586:	d11c      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009588:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d016      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8009594:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8009598:	61bb      	str	r3, [r7, #24]
      break;
 800959a:	e012      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800959c:	e011      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800959e:	f7ff fe85 	bl	80092ac <HAL_RCC_GetPCLK2Freq>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4b0a      	ldr	r3, [pc, #40]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	0b9b      	lsrs	r3, r3, #14
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	3301      	adds	r3, #1
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b6:	61bb      	str	r3, [r7, #24]
      break;
 80095b8:	e004      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80095c2:	bf00      	nop
    }
  }
  return (frequency);
 80095c4:	69bb      	ldr	r3, [r7, #24]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	40021000 	.word	0x40021000
 80095d4:	0800f6c8 	.word	0x0800f6c8
 80095d8:	0800f6d8 	.word	0x0800f6d8
 80095dc:	007a1200 	.word	0x007a1200
 80095e0:	003d0900 	.word	0x003d0900
 80095e4:	aaaaaaab 	.word	0xaaaaaaab

080095e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e07a      	b.n	80096f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7c5b      	ldrb	r3, [r3, #17]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d105      	bne.n	8009614 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fc f814 	bl	800563c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fb81 	bl	8009d22 <HAL_RTC_WaitForSynchro>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2204      	movs	r2, #4
 800962a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e061      	b.n	80096f4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fc3a 	bl	8009eaa <RTC_EnterInitMode>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2204      	movs	r2, #4
 8009640:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e056      	b.n	80096f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0207 	bic.w	r2, r2, #7
 8009654:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800965e:	4b27      	ldr	r3, [pc, #156]	@ (80096fc <HAL_RTC_Init+0x114>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009662:	4a26      	ldr	r2, [pc, #152]	@ (80096fc <HAL_RTC_Init+0x114>)
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800966a:	4b24      	ldr	r3, [pc, #144]	@ (80096fc <HAL_RTC_Init+0x114>)
 800966c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	4921      	ldr	r1, [pc, #132]	@ (80096fc <HAL_RTC_Init+0x114>)
 8009678:	4313      	orrs	r3, r2
 800967a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d003      	beq.n	800968e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	e00e      	b.n	80096ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800968e:	2001      	movs	r0, #1
 8009690:	f7ff fef4 	bl	800947c <HAL_RCCEx_GetPeriphCLKFreq>
 8009694:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2204      	movs	r2, #4
 80096a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e026      	b.n	80096f4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0c1a      	lsrs	r2, r3, #16
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f002 020f 	and.w	r2, r2, #15
 80096b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	b292      	uxth	r2, r2
 80096c2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fc18 	bl	8009efa <RTC_ExitInitMode>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2204      	movs	r2, #4
 80096d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e00c      	b.n	80096f4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80096f2:	2300      	movs	r3, #0
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40006c00 	.word	0x40006c00

08009700 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009700:	b590      	push	{r4, r7, lr}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <HAL_RTC_SetTime+0x20>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e080      	b.n	8009826 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	7c1b      	ldrb	r3, [r3, #16]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d101      	bne.n	8009730 <HAL_RTC_SetTime+0x30>
 800972c:	2302      	movs	r3, #2
 800972e:	e07a      	b.n	8009826 <HAL_RTC_SetTime+0x126>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2201      	movs	r2, #1
 8009734:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2202      	movs	r2, #2
 800973a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d113      	bne.n	800976a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800974c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	785b      	ldrb	r3, [r3, #1]
 8009754:	4619      	mov	r1, r3
 8009756:	460b      	mov	r3, r1
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	1a5b      	subs	r3, r3, r1
 800975c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800975e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009764:	4413      	add	r3, r2
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e01e      	b.n	80097a8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fc08 	bl	8009f84 <RTC_Bcd2ToByte>
 8009774:	4603      	mov	r3, r0
 8009776:	461a      	mov	r2, r3
 8009778:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800977c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fbfd 	bl	8009f84 <RTC_Bcd2ToByte>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	4613      	mov	r3, r2
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009796:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	789b      	ldrb	r3, [r3, #2]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fbf1 	bl	8009f84 <RTC_Bcd2ToByte>
 80097a2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80097a4:	4423      	add	r3, r4
 80097a6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80097a8:	6979      	ldr	r1, [r7, #20]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fb16 	bl	8009ddc <RTC_WriteTimeCounter>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d007      	beq.n	80097c6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2204      	movs	r2, #4
 80097ba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e02f      	b.n	8009826 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0205 	bic.w	r2, r2, #5
 80097d4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 fb27 	bl	8009e2a <RTC_ReadAlarmCounter>
 80097dc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d018      	beq.n	8009818 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d214      	bcs.n	8009818 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80097f4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80097f8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80097fa:	6939      	ldr	r1, [r7, #16]
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fb2d 	bl	8009e5c <RTC_WriteAlarmCounter>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2204      	movs	r2, #4
 800980c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e006      	b.n	8009826 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009824:	2300      	movs	r3, #0
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	bd90      	pop	{r4, r7, pc}
	...

08009830 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	2300      	movs	r3, #0
 800984a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <HAL_RTC_GetTime+0x28>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e0b5      	b.n	80099c8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f003 0304 	and.w	r3, r3, #4
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e0ac      	b.n	80099c8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 fa84 	bl	8009d7c <RTC_ReadTimeCounter>
 8009874:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4a55      	ldr	r2, [pc, #340]	@ (80099d0 <HAL_RTC_GetTime+0x1a0>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0adb      	lsrs	r3, r3, #11
 8009880:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	4b52      	ldr	r3, [pc, #328]	@ (80099d0 <HAL_RTC_GetTime+0x1a0>)
 8009886:	fba3 1302 	umull	r1, r3, r3, r2
 800988a:	0adb      	lsrs	r3, r3, #11
 800988c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009890:	fb01 f303 	mul.w	r3, r1, r3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	4a4f      	ldr	r2, [pc, #316]	@ (80099d4 <HAL_RTC_GetTime+0x1a4>)
 8009898:	fba2 2303 	umull	r2, r3, r2, r3
 800989c:	095b      	lsrs	r3, r3, #5
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	4a4a      	ldr	r2, [pc, #296]	@ (80099d0 <HAL_RTC_GetTime+0x1a0>)
 80098a8:	fba2 1203 	umull	r1, r2, r2, r3
 80098ac:	0ad2      	lsrs	r2, r2, #11
 80098ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80098b2:	fb01 f202 	mul.w	r2, r1, r2
 80098b6:	1a9a      	subs	r2, r3, r2
 80098b8:	4b46      	ldr	r3, [pc, #280]	@ (80099d4 <HAL_RTC_GetTime+0x1a4>)
 80098ba:	fba3 1302 	umull	r1, r3, r3, r2
 80098be:	0959      	lsrs	r1, r3, #5
 80098c0:	460b      	mov	r3, r1
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	1a5b      	subs	r3, r3, r1
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	1ad1      	subs	r1, r2, r3
 80098ca:	b2ca      	uxtb	r2, r1
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2b17      	cmp	r3, #23
 80098d4:	d955      	bls.n	8009982 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	4a3f      	ldr	r2, [pc, #252]	@ (80099d8 <HAL_RTC_GetTime+0x1a8>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	091b      	lsrs	r3, r3, #4
 80098e0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80098e2:	6939      	ldr	r1, [r7, #16]
 80098e4:	4b3c      	ldr	r3, [pc, #240]	@ (80099d8 <HAL_RTC_GetTime+0x1a8>)
 80098e6:	fba3 2301 	umull	r2, r3, r3, r1
 80098ea:	091a      	lsrs	r2, r3, #4
 80098ec:	4613      	mov	r3, r2
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	4413      	add	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	1aca      	subs	r2, r1, r3
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fa94 	bl	8009e2a <RTC_ReadAlarmCounter>
 8009902:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d008      	beq.n	800991e <HAL_RTC_GetTime+0xee>
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	429a      	cmp	r2, r3
 8009912:	d904      	bls.n	800991e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	e002      	b.n	8009924 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800991e:	f04f 33ff 	mov.w	r3, #4294967295
 8009922:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	4a2d      	ldr	r2, [pc, #180]	@ (80099dc <HAL_RTC_GetTime+0x1ac>)
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009932:	69b9      	ldr	r1, [r7, #24]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fa51 	bl	8009ddc <RTC_WriteTimeCounter>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e041      	b.n	80099c8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d00c      	beq.n	8009966 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	4413      	add	r3, r2
 8009952:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009954:	69f9      	ldr	r1, [r7, #28]
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fa80 	bl	8009e5c <RTC_WriteAlarmCounter>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e030      	b.n	80099c8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009966:	69f9      	ldr	r1, [r7, #28]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 fa77 	bl	8009e5c <RTC_WriteAlarmCounter>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e027      	b.n	80099c8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009978:	6979      	ldr	r1, [r7, #20]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fb1f 	bl	8009fbe <RTC_DateUpdate>
 8009980:	e003      	b.n	800998a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01a      	beq.n	80099c6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fad8 	bl	8009f4a <RTC_ByteToBcd2>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 facf 	bl	8009f4a <RTC_ByteToBcd2>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	789b      	ldrb	r3, [r3, #2]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fac6 	bl	8009f4a <RTC_ByteToBcd2>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3720      	adds	r7, #32
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	91a2b3c5 	.word	0x91a2b3c5
 80099d4:	88888889 	.word	0x88888889
 80099d8:	aaaaaaab 	.word	0xaaaaaaab
 80099dc:	00015180 	.word	0x00015180

080099e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61fb      	str	r3, [r7, #28]
 80099f0:	2300      	movs	r3, #0
 80099f2:	61bb      	str	r3, [r7, #24]
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_RTC_SetDate+0x24>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e097      	b.n	8009b38 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	7c1b      	ldrb	r3, [r3, #16]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <HAL_RTC_SetDate+0x34>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e091      	b.n	8009b38 <HAL_RTC_SetDate+0x158>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	78da      	ldrb	r2, [r3, #3]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	785a      	ldrb	r2, [r3, #1]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	789a      	ldrb	r2, [r3, #2]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	739a      	strb	r2, [r3, #14]
 8009a3e:	e01a      	b.n	8009a76 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	78db      	ldrb	r3, [r3, #3]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fa9d 	bl	8009f84 <RTC_Bcd2ToByte>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fa94 	bl	8009f84 <RTC_Bcd2ToByte>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	789b      	ldrb	r3, [r3, #2]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 fa8b 	bl	8009f84 <RTC_Bcd2ToByte>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	7bdb      	ldrb	r3, [r3, #15]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	7b59      	ldrb	r1, [r3, #13]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	7b9b      	ldrb	r3, [r3, #14]
 8009a84:	461a      	mov	r2, r3
 8009a86:	f000 fb75 	bl	800a174 <RTC_WeekDayNum>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	7b1a      	ldrb	r2, [r3, #12]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f96e 	bl	8009d7c <RTC_ReadTimeCounter>
 8009aa0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	4a26      	ldr	r2, [pc, #152]	@ (8009b40 <HAL_RTC_SetDate+0x160>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	0adb      	lsrs	r3, r3, #11
 8009aac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b18      	cmp	r3, #24
 8009ab2:	d93a      	bls.n	8009b2a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	4a23      	ldr	r2, [pc, #140]	@ (8009b44 <HAL_RTC_SetDate+0x164>)
 8009ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8009abc:	091b      	lsrs	r3, r3, #4
 8009abe:	4a22      	ldr	r2, [pc, #136]	@ (8009b48 <HAL_RTC_SetDate+0x168>)
 8009ac0:	fb02 f303 	mul.w	r3, r2, r3
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009aca:	69f9      	ldr	r1, [r7, #28]
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f985 	bl	8009ddc <RTC_WriteTimeCounter>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2204      	movs	r2, #4
 8009adc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e027      	b.n	8009b38 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f99e 	bl	8009e2a <RTC_ReadAlarmCounter>
 8009aee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d018      	beq.n	8009b2a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d214      	bcs.n	8009b2a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8009b06:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8009b0a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009b0c:	69b9      	ldr	r1, [r7, #24]
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f9a4 	bl	8009e5c <RTC_WriteAlarmCounter>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e006      	b.n	8009b38 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3720      	adds	r7, #32
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	91a2b3c5 	.word	0x91a2b3c5
 8009b44:	aaaaaaab 	.word	0xaaaaaaab
 8009b48:	00015180 	.word	0x00015180

08009b4c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b089      	sub	sp, #36	@ 0x24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8009b5c:	f107 0314 	add.w	r3, r7, #20
 8009b60:	2100      	movs	r1, #0
 8009b62:	460a      	mov	r2, r1
 8009b64:	801a      	strh	r2, [r3, #0]
 8009b66:	460a      	mov	r2, r1
 8009b68:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <HAL_RTC_SetAlarm_IT+0x2a>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e099      	b.n	8009cae <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	7c1b      	ldrb	r3, [r3, #16]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_RTC_SetAlarm_IT+0x3a>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e093      	b.n	8009cae <HAL_RTC_SetAlarm_IT+0x162>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8009b92:	f107 0314 	add.w	r3, r7, #20
 8009b96:	2200      	movs	r2, #0
 8009b98:	4619      	mov	r1, r3
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fe48 	bl	8009830 <HAL_RTC_GetTime>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e081      	b.n	8009cae <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009baa:	7d3b      	ldrb	r3, [r7, #20]
 8009bac:	461a      	mov	r2, r3
 8009bae:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8009bb2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8009bb6:	7d7b      	ldrb	r3, [r7, #21]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	460b      	mov	r3, r1
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	1a5b      	subs	r3, r3, r1
 8009bc0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009bc2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8009bc4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009bc6:	4413      	add	r3, r2
 8009bc8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d113      	bne.n	8009bf8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8009bda:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	4619      	mov	r1, r3
 8009be4:	460b      	mov	r3, r1
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	1a5b      	subs	r3, r3, r1
 8009bea:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009bec:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009bf2:	4413      	add	r3, r2
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	e01e      	b.n	8009c36 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f9c1 	bl	8009f84 <RTC_Bcd2ToByte>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8009c0a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f9b6 	bl	8009f84 <RTC_Bcd2ToByte>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009c24:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	789b      	ldrb	r3, [r3, #2]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f9aa 	bl	8009f84 <RTC_Bcd2ToByte>
 8009c30:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009c32:	4423      	add	r3, r4
 8009c34:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d205      	bcs.n	8009c4a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8009c44:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8009c48:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009c4a:	69f9      	ldr	r1, [r7, #28]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f905 	bl	8009e5c <RTC_WriteAlarmCounter>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e022      	b.n	8009cae <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0202 	bic.w	r2, r2, #2
 8009c76:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0202 	orr.w	r2, r2, #2
 8009c86:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009c88:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009cb8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c92:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009c94:	4b08      	ldr	r3, [pc, #32]	@ (8009cb8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	4a07      	ldr	r2, [pc, #28]	@ (8009cb8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c9e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009cac:	2300      	movs	r3, #0
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3724      	adds	r7, #36	@ 0x24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	40010400 	.word	0x40010400

08009cbc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d011      	beq.n	8009cf6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f815 	bl	8009d10 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0202 	bic.w	r2, r2, #2
 8009cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009cf6:	4b05      	ldr	r3, [pc, #20]	@ (8009d0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009cf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009cfc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	745a      	strb	r2, [r3, #17]
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	40010400 	.word	0x40010400

08009d10 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bc80      	pop	{r7}
 8009d20:	4770      	bx	lr

08009d22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e01d      	b.n	8009d74 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0208 	bic.w	r2, r2, #8
 8009d46:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009d48:	f7fc fa20 	bl	800618c <HAL_GetTick>
 8009d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009d4e:	e009      	b.n	8009d64 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009d50:	f7fc fa1c 	bl	800618c <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d5e:	d901      	bls.n	8009d64 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e007      	b.n	8009d74 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0ee      	beq.n	8009d50 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	827b      	strh	r3, [r7, #18]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	823b      	strh	r3, [r7, #16]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8009dac:	8a7a      	ldrh	r2, [r7, #18]
 8009dae:	8a3b      	ldrh	r3, [r7, #16]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d008      	beq.n	8009dc6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009db4:	8a3b      	ldrh	r3, [r7, #16]
 8009db6:	041a      	lsls	r2, r3, #16
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	e004      	b.n	8009dd0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009dc6:	8a7b      	ldrh	r3, [r7, #18]
 8009dc8:	041a      	lsls	r2, r3, #16
 8009dca:	89fb      	ldrh	r3, [r7, #14]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8009dd0:	697b      	ldr	r3, [r7, #20]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr

08009ddc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f85d 	bl	8009eaa <RTC_EnterInitMode>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	73fb      	strb	r3, [r7, #15]
 8009dfa:	e011      	b.n	8009e20 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	0c12      	lsrs	r2, r2, #16
 8009e04:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	b292      	uxth	r2, r2
 8009e0e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f872 	bl	8009efa <RTC_ExitInitMode>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	81fb      	strh	r3, [r7, #14]
 8009e36:	2300      	movs	r3, #0
 8009e38:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e48:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8009e4a:	89fb      	ldrh	r3, [r7, #14]
 8009e4c:	041a      	lsls	r2, r3, #16
 8009e4e:	89bb      	ldrh	r3, [r7, #12]
 8009e50:	4313      	orrs	r3, r2
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bc80      	pop	{r7}
 8009e5a:	4770      	bx	lr

08009e5c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f81d 	bl	8009eaa <RTC_EnterInitMode>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]
 8009e7a:	e011      	b.n	8009ea0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	0c12      	lsrs	r2, r2, #16
 8009e84:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	b292      	uxth	r2, r2
 8009e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f832 	bl	8009efa <RTC_ExitInitMode>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009eb6:	f7fc f969 	bl	800618c <HAL_GetTick>
 8009eba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009ebc:	e009      	b.n	8009ed2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009ebe:	f7fc f965 	bl	800618c <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ecc:	d901      	bls.n	8009ed2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00f      	b.n	8009ef2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0ee      	beq.n	8009ebe <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0210 	orr.w	r2, r2, #16
 8009eee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f022 0210 	bic.w	r2, r2, #16
 8009f14:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009f16:	f7fc f939 	bl	800618c <HAL_GetTick>
 8009f1a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009f1c:	e009      	b.n	8009f32 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009f1e:	f7fc f935 	bl	800618c <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f2c:	d901      	bls.n	8009f32 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e007      	b.n	8009f42 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f003 0320 	and.w	r3, r3, #32
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0ee      	beq.n	8009f1e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	4603      	mov	r3, r0
 8009f52:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8009f58:	e005      	b.n	8009f66 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	3b0a      	subs	r3, #10
 8009f64:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	2b09      	cmp	r3, #9
 8009f6a:	d8f6      	bhi.n	8009f5a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	b2db      	uxtb	r3, r3
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bc80      	pop	{r7}
 8009f82:	4770      	bx	lr

08009f84 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	091b      	lsrs	r3, r3, #4
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	b2db      	uxtb	r3, r3
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bc80      	pop	{r7}
 8009fbc:	4770      	bx	lr

08009fbe <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7bdb      	ldrb	r3, [r3, #15]
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	7b5b      	ldrb	r3, [r3, #13]
 8009fe2:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7b9b      	ldrb	r3, [r3, #14]
 8009fe8:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009fea:	2300      	movs	r3, #0
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	e06f      	b.n	800a0d0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d011      	beq.n	800a01a <RTC_DateUpdate+0x5c>
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d00e      	beq.n	800a01a <RTC_DateUpdate+0x5c>
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d00b      	beq.n	800a01a <RTC_DateUpdate+0x5c>
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b07      	cmp	r3, #7
 800a006:	d008      	beq.n	800a01a <RTC_DateUpdate+0x5c>
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	2b08      	cmp	r3, #8
 800a00c:	d005      	beq.n	800a01a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b0a      	cmp	r3, #10
 800a012:	d002      	beq.n	800a01a <RTC_DateUpdate+0x5c>
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b0c      	cmp	r3, #12
 800a018:	d117      	bne.n	800a04a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b1e      	cmp	r3, #30
 800a01e:	d803      	bhi.n	800a028 <RTC_DateUpdate+0x6a>
      {
        day++;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a026:	e050      	b.n	800a0ca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2b0c      	cmp	r3, #12
 800a02c:	d005      	beq.n	800a03a <RTC_DateUpdate+0x7c>
        {
          month++;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3301      	adds	r3, #1
 800a032:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a034:	2301      	movs	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a038:	e047      	b.n	800a0ca <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800a03a:	2301      	movs	r3, #1
 800a03c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a03e:	2301      	movs	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
          year++;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	3301      	adds	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800a048:	e03f      	b.n	800a0ca <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d008      	beq.n	800a062 <RTC_DateUpdate+0xa4>
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b06      	cmp	r3, #6
 800a054:	d005      	beq.n	800a062 <RTC_DateUpdate+0xa4>
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b09      	cmp	r3, #9
 800a05a:	d002      	beq.n	800a062 <RTC_DateUpdate+0xa4>
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b0b      	cmp	r3, #11
 800a060:	d10c      	bne.n	800a07c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b1d      	cmp	r3, #29
 800a066:	d803      	bhi.n	800a070 <RTC_DateUpdate+0xb2>
      {
        day++;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a06e:	e02c      	b.n	800a0ca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	3301      	adds	r3, #1
 800a074:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a076:	2301      	movs	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a07a:	e026      	b.n	800a0ca <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d123      	bne.n	800a0ca <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b1b      	cmp	r3, #27
 800a086:	d803      	bhi.n	800a090 <RTC_DateUpdate+0xd2>
      {
        day++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e01c      	b.n	800a0ca <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b1c      	cmp	r3, #28
 800a094:	d111      	bne.n	800a0ba <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f838 	bl	800a110 <RTC_IsLeapYear>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <RTC_DateUpdate+0xf0>
        {
          day++;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	e00d      	b.n	800a0ca <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e007      	b.n	800a0ca <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b1d      	cmp	r3, #29
 800a0be:	d104      	bne.n	800a0ca <RTC_DateUpdate+0x10c>
      {
        month++;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d38b      	bcc.n	8009ff0 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	f000 f83a 	bl	800a174 <RTC_WeekDayNum>
 800a100:	4603      	mov	r3, r0
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	731a      	strb	r2, [r3, #12]
}
 800a108:	bf00      	nop
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	f003 0303 	and.w	r3, r3, #3
 800a120:	b29b      	uxth	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	e01d      	b.n	800a166 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	4a10      	ldr	r2, [pc, #64]	@ (800a170 <RTC_IsLeapYear+0x60>)
 800a12e:	fba2 1203 	umull	r1, r2, r2, r3
 800a132:	0952      	lsrs	r2, r2, #5
 800a134:	2164      	movs	r1, #100	@ 0x64
 800a136:	fb01 f202 	mul.w	r2, r1, r2
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800a142:	2301      	movs	r3, #1
 800a144:	e00f      	b.n	800a166 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	4a09      	ldr	r2, [pc, #36]	@ (800a170 <RTC_IsLeapYear+0x60>)
 800a14a:	fba2 1203 	umull	r1, r2, r2, r3
 800a14e:	09d2      	lsrs	r2, r2, #7
 800a150:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a154:	fb01 f202 	mul.w	r2, r1, r2
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800a164:	2300      	movs	r3, #0
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr
 800a170:	51eb851f 	.word	0x51eb851f

0800a174 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
 800a180:	4613      	mov	r3, r2
 800a182:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60bb      	str	r3, [r7, #8]
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800a192:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d82d      	bhi.n	800a1f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	4613      	mov	r3, r2
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	4413      	add	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	4a2c      	ldr	r2, [pc, #176]	@ (800a258 <RTC_WeekDayNum+0xe4>)
 800a1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ac:	085a      	lsrs	r2, r3, #1
 800a1ae:	78bb      	ldrb	r3, [r7, #2]
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	441a      	add	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4926      	ldr	r1, [pc, #152]	@ (800a25c <RTC_WeekDayNum+0xe8>)
 800a1c4:	fba1 1303 	umull	r1, r3, r1, r3
 800a1c8:	095b      	lsrs	r3, r3, #5
 800a1ca:	1ad2      	subs	r2, r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	4922      	ldr	r1, [pc, #136]	@ (800a25c <RTC_WeekDayNum+0xe8>)
 800a1d2:	fba1 1303 	umull	r1, r3, r1, r3
 800a1d6:	09db      	lsrs	r3, r3, #7
 800a1d8:	4413      	add	r3, r2
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	4b20      	ldr	r3, [pc, #128]	@ (800a260 <RTC_WeekDayNum+0xec>)
 800a1de:	fba3 1302 	umull	r1, r3, r3, r2
 800a1e2:	1ad1      	subs	r1, r2, r3
 800a1e4:	0849      	lsrs	r1, r1, #1
 800a1e6:	440b      	add	r3, r1
 800a1e8:	0899      	lsrs	r1, r3, #2
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	1a5b      	subs	r3, r3, r1
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e029      	b.n	800a24a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a1f6:	78fa      	ldrb	r2, [r7, #3]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	005b      	lsls	r3, r3, #1
 800a1fc:	4413      	add	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	4a15      	ldr	r2, [pc, #84]	@ (800a258 <RTC_WeekDayNum+0xe4>)
 800a204:	fba2 2303 	umull	r2, r3, r2, r3
 800a208:	085a      	lsrs	r2, r3, #1
 800a20a:	78bb      	ldrb	r3, [r7, #2]
 800a20c:	441a      	add	r2, r3
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	441a      	add	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	089b      	lsrs	r3, r3, #2
 800a216:	441a      	add	r2, r3
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4910      	ldr	r1, [pc, #64]	@ (800a25c <RTC_WeekDayNum+0xe8>)
 800a21c:	fba1 1303 	umull	r1, r3, r1, r3
 800a220:	095b      	lsrs	r3, r3, #5
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	490d      	ldr	r1, [pc, #52]	@ (800a25c <RTC_WeekDayNum+0xe8>)
 800a228:	fba1 1303 	umull	r1, r3, r1, r3
 800a22c:	09db      	lsrs	r3, r3, #7
 800a22e:	4413      	add	r3, r2
 800a230:	1c9a      	adds	r2, r3, #2
 800a232:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <RTC_WeekDayNum+0xec>)
 800a234:	fba3 1302 	umull	r1, r3, r3, r2
 800a238:	1ad1      	subs	r1, r2, r3
 800a23a:	0849      	lsrs	r1, r1, #1
 800a23c:	440b      	add	r3, r1
 800a23e:	0899      	lsrs	r1, r3, #2
 800a240:	460b      	mov	r3, r1
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	1a5b      	subs	r3, r3, r1
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	b2db      	uxtb	r3, r3
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr
 800a258:	38e38e39 	.word	0x38e38e39
 800a25c:	51eb851f 	.word	0x51eb851f
 800a260:	24924925 	.word	0x24924925

0800a264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e076      	b.n	800a364 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d108      	bne.n	800a290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a286:	d009      	beq.n	800a29c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	61da      	str	r2, [r3, #28]
 800a28e:	e005      	b.n	800a29c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fb f9ec 	bl	8005694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a320:	ea42 0103 	orr.w	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a328:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	0c1a      	lsrs	r2, r3, #16
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f002 0204 	and.w	r2, r2, #4
 800a342:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	69da      	ldr	r2, [r3, #28]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a352:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a37c:	f7fb ff06 	bl	800618c <HAL_GetTick>
 800a380:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d001      	beq.n	800a396 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a392:	2302      	movs	r3, #2
 800a394:	e12a      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <HAL_SPI_Transmit+0x36>
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e122      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_SPI_Transmit+0x48>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e11b      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	88fa      	ldrh	r2, [r7, #6]
 800a3d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	88fa      	ldrh	r2, [r7, #6]
 800a3da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a402:	d10f      	bne.n	800a424 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a412:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a422:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42e:	2b40      	cmp	r3, #64	@ 0x40
 800a430:	d007      	beq.n	800a442 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a44a:	d152      	bne.n	800a4f2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <HAL_SPI_Transmit+0xee>
 800a454:	8b7b      	ldrh	r3, [r7, #26]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d145      	bne.n	800a4e6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a45e:	881a      	ldrh	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a46a:	1c9a      	adds	r2, r3, #2
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a474:	b29b      	uxth	r3, r3
 800a476:	3b01      	subs	r3, #1
 800a478:	b29a      	uxth	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a47e:	e032      	b.n	800a4e6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d112      	bne.n	800a4b4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a492:	881a      	ldrh	r2, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a49e:	1c9a      	adds	r2, r3, #2
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a4b2:	e018      	b.n	800a4e6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4b4:	f7fb fe6a 	bl	800618c <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d803      	bhi.n	800a4cc <HAL_SPI_Transmit+0x160>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ca:	d102      	bne.n	800a4d2 <HAL_SPI_Transmit+0x166>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e082      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1c7      	bne.n	800a480 <HAL_SPI_Transmit+0x114>
 800a4f0:	e053      	b.n	800a59a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <HAL_SPI_Transmit+0x194>
 800a4fa:	8b7b      	ldrh	r3, [r7, #26]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d147      	bne.n	800a590 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	330c      	adds	r3, #12
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	b29a      	uxth	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a526:	e033      	b.n	800a590 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b02      	cmp	r3, #2
 800a534:	d113      	bne.n	800a55e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	330c      	adds	r3, #12
 800a540:	7812      	ldrb	r2, [r2, #0]
 800a542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a55c:	e018      	b.n	800a590 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a55e:	f7fb fe15 	bl	800618c <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d803      	bhi.n	800a576 <HAL_SPI_Transmit+0x20a>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a574:	d102      	bne.n	800a57c <HAL_SPI_Transmit+0x210>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d109      	bne.n	800a590 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e02d      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a594:	b29b      	uxth	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1c6      	bne.n	800a528 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 fbc4 	bl	800ad2c <SPI_EndRxTxTransaction>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
  }
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	4613      	mov	r3, r2
 800a602:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d001      	beq.n	800a614 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a610:	2302      	movs	r3, #2
 800a612:	e104      	b.n	800a81e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a61c:	d112      	bne.n	800a644 <HAL_SPI_Receive+0x50>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10e      	bne.n	800a644 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2204      	movs	r2, #4
 800a62a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a62e:	88fa      	ldrh	r2, [r7, #6]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f8f3 	bl	800a826 <HAL_SPI_TransmitReceive>
 800a640:	4603      	mov	r3, r0
 800a642:	e0ec      	b.n	800a81e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a644:	f7fb fda2 	bl	800618c <HAL_GetTick>
 800a648:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <HAL_SPI_Receive+0x62>
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e0e1      	b.n	800a81e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_SPI_Receive+0x74>
 800a664:	2302      	movs	r3, #2
 800a666:	e0da      	b.n	800a81e <HAL_SPI_Receive+0x22a>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2204      	movs	r2, #4
 800a674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	88fa      	ldrh	r2, [r7, #6]
 800a688:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6b6:	d10f      	bne.n	800a6d8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a6d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d007      	beq.n	800a6f6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d170      	bne.n	800a7e0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a6fe:	e035      	b.n	800a76c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d115      	bne.n	800a73a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f103 020c 	add.w	r2, r3, #12
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3b01      	subs	r3, #1
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a738:	e018      	b.n	800a76c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a73a:	f7fb fd27 	bl	800618c <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d803      	bhi.n	800a752 <HAL_SPI_Receive+0x15e>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a750:	d102      	bne.n	800a758 <HAL_SPI_Receive+0x164>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a768:	2303      	movs	r3, #3
 800a76a:	e058      	b.n	800a81e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a770:	b29b      	uxth	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1c4      	bne.n	800a700 <HAL_SPI_Receive+0x10c>
 800a776:	e038      	b.n	800a7ea <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b01      	cmp	r3, #1
 800a784:	d113      	bne.n	800a7ae <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a790:	b292      	uxth	r2, r2
 800a792:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a798:	1c9a      	adds	r2, r3, #2
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a7ac:	e018      	b.n	800a7e0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7ae:	f7fb fced 	bl	800618c <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d803      	bhi.n	800a7c6 <HAL_SPI_Receive+0x1d2>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d102      	bne.n	800a7cc <HAL_SPI_Receive+0x1d8>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e01e      	b.n	800a81e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1c6      	bne.n	800a778 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 fa4a 	bl	800ac88 <SPI_EndRxTransaction>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800a81c:	2300      	movs	r3, #0
  }
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b08a      	sub	sp, #40	@ 0x28
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a834:	2301      	movs	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a838:	f7fb fca8 	bl	800618c <HAL_GetTick>
 800a83c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a844:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a84c:	887b      	ldrh	r3, [r7, #2]
 800a84e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a850:	7ffb      	ldrb	r3, [r7, #31]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d00c      	beq.n	800a870 <HAL_SPI_TransmitReceive+0x4a>
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a85c:	d106      	bne.n	800a86c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <HAL_SPI_TransmitReceive+0x46>
 800a866:	7ffb      	ldrb	r3, [r7, #31]
 800a868:	2b04      	cmp	r3, #4
 800a86a:	d001      	beq.n	800a870 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a86c:	2302      	movs	r3, #2
 800a86e:	e17f      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <HAL_SPI_TransmitReceive+0x5c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <HAL_SPI_TransmitReceive+0x5c>
 800a87c:	887b      	ldrh	r3, [r7, #2]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e174      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_SPI_TransmitReceive+0x6e>
 800a890:	2302      	movs	r3, #2
 800a892:	e16d      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d003      	beq.n	800a8b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	887a      	ldrh	r2, [r7, #2]
 800a8c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	887a      	ldrh	r2, [r7, #2]
 800a8c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	887a      	ldrh	r2, [r7, #2]
 800a8d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	887a      	ldrh	r2, [r7, #2]
 800a8d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b40      	cmp	r3, #64	@ 0x40
 800a8f2:	d007      	beq.n	800a904 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a90c:	d17e      	bne.n	800aa0c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <HAL_SPI_TransmitReceive+0xf6>
 800a916:	8afb      	ldrh	r3, [r7, #22]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d16c      	bne.n	800a9f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	881a      	ldrh	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92c:	1c9a      	adds	r2, r3, #2
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a936:	b29b      	uxth	r3, r3
 800a938:	3b01      	subs	r3, #1
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a940:	e059      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d11b      	bne.n	800a988 <HAL_SPI_TransmitReceive+0x162>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a954:	b29b      	uxth	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <HAL_SPI_TransmitReceive+0x162>
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d113      	bne.n	800a988 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a964:	881a      	ldrh	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a970:	1c9a      	adds	r2, r3, #2
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b01      	cmp	r3, #1
 800a994:	d119      	bne.n	800a9ca <HAL_SPI_TransmitReceive+0x1a4>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d014      	beq.n	800a9ca <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	1c9a      	adds	r2, r3, #2
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9ca:	f7fb fbdf 	bl	800618c <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d80d      	bhi.n	800a9f6 <HAL_SPI_TransmitReceive+0x1d0>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e0:	d009      	beq.n	800a9f6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e0bc      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1a0      	bne.n	800a942 <HAL_SPI_TransmitReceive+0x11c>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d19b      	bne.n	800a942 <HAL_SPI_TransmitReceive+0x11c>
 800aa0a:	e082      	b.n	800ab12 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <HAL_SPI_TransmitReceive+0x1f4>
 800aa14:	8afb      	ldrh	r3, [r7, #22]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d171      	bne.n	800aafe <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	330c      	adds	r3, #12
 800aa24:	7812      	ldrb	r2, [r2, #0]
 800aa26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa40:	e05d      	b.n	800aafe <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d11c      	bne.n	800aa8a <HAL_SPI_TransmitReceive+0x264>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d017      	beq.n	800aa8a <HAL_SPI_TransmitReceive+0x264>
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d114      	bne.n	800aa8a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	330c      	adds	r3, #12
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d119      	bne.n	800aacc <HAL_SPI_TransmitReceive+0x2a6>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d014      	beq.n	800aacc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68da      	ldr	r2, [r3, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aac8:	2301      	movs	r3, #1
 800aaca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aacc:	f7fb fb5e 	bl	800618c <HAL_GetTick>
 800aad0:	4602      	mov	r2, r0
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad8:	429a      	cmp	r2, r3
 800aada:	d803      	bhi.n	800aae4 <HAL_SPI_TransmitReceive+0x2be>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d102      	bne.n	800aaea <HAL_SPI_TransmitReceive+0x2c4>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d109      	bne.n	800aafe <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e038      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d19c      	bne.n	800aa42 <HAL_SPI_TransmitReceive+0x21c>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d197      	bne.n	800aa42 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab12:	6a3a      	ldr	r2, [r7, #32]
 800ab14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f908 	bl	800ad2c <SPI_EndRxTxTransaction>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d008      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2220      	movs	r2, #32
 800ab26:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e01d      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	613b      	str	r3, [r7, #16]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	613b      	str	r3, [r7, #16]
 800ab50:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
  }
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3728      	adds	r7, #40	@ 0x28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	603b      	str	r3, [r7, #0]
 800ab84:	4613      	mov	r3, r2
 800ab86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab88:	f7fb fb00 	bl	800618c <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	4413      	add	r3, r2
 800ab96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab98:	f7fb faf8 	bl	800618c <HAL_GetTick>
 800ab9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab9e:	4b39      	ldr	r3, [pc, #228]	@ (800ac84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	015b      	lsls	r3, r3, #5
 800aba4:	0d1b      	lsrs	r3, r3, #20
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	fb02 f303 	mul.w	r3, r2, r3
 800abac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abae:	e054      	b.n	800ac5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb6:	d050      	beq.n	800ac5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800abb8:	f7fb fae8 	bl	800618c <HAL_GetTick>
 800abbc:	4602      	mov	r2, r0
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d902      	bls.n	800abce <SPI_WaitFlagStateUntilTimeout+0x56>
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d13d      	bne.n	800ac4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685a      	ldr	r2, [r3, #4]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800abdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abe6:	d111      	bne.n	800ac0c <SPI_WaitFlagStateUntilTimeout+0x94>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abf0:	d004      	beq.n	800abfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfa:	d107      	bne.n	800ac0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac14:	d10f      	bne.n	800ac36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ac34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e017      	b.n	800ac7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689a      	ldr	r2, [r3, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4013      	ands	r3, r2
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	bf0c      	ite	eq
 800ac6a:	2301      	moveq	r3, #1
 800ac6c:	2300      	movne	r3, #0
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d19b      	bne.n	800abb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3720      	adds	r7, #32
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	2000005c 	.word	0x2000005c

0800ac88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac9c:	d111      	bne.n	800acc2 <SPI_EndRxTransaction+0x3a>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aca6:	d004      	beq.n	800acb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acb0:	d107      	bne.n	800acc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acc0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800acca:	d117      	bne.n	800acfc <SPI_EndRxTransaction+0x74>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acd4:	d112      	bne.n	800acfc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2200      	movs	r2, #0
 800acde:	2101      	movs	r1, #1
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff ff49 	bl	800ab78 <SPI_WaitFlagStateUntilTimeout>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01a      	beq.n	800ad22 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf0:	f043 0220 	orr.w	r2, r3, #32
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e013      	b.n	800ad24 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2200      	movs	r2, #0
 800ad04:	2180      	movs	r1, #128	@ 0x80
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff ff36 	bl	800ab78 <SPI_WaitFlagStateUntilTimeout>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad16:	f043 0220 	orr.w	r2, r3, #32
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e000      	b.n	800ad24 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	2102      	movs	r1, #2
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff ff18 	bl	800ab78 <SPI_WaitFlagStateUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d007      	beq.n	800ad5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad52:	f043 0220 	orr.w	r2, r3, #32
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e013      	b.n	800ad86 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2200      	movs	r2, #0
 800ad66:	2180      	movs	r1, #128	@ 0x80
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7ff ff05 	bl	800ab78 <SPI_WaitFlagStateUntilTimeout>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d007      	beq.n	800ad84 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad78:	f043 0220 	orr.w	r2, r3, #32
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e000      	b.n	800ad86 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e041      	b.n	800ae24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fa fcc7 	bl	8005748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 f93f 	bl	800b050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d001      	beq.n	800ae44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e032      	b.n	800aeaa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2202      	movs	r2, #2
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a18      	ldr	r2, [pc, #96]	@ (800aeb4 <HAL_TIM_Base_Start+0x88>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00e      	beq.n	800ae74 <HAL_TIM_Base_Start+0x48>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae5e:	d009      	beq.n	800ae74 <HAL_TIM_Base_Start+0x48>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a14      	ldr	r2, [pc, #80]	@ (800aeb8 <HAL_TIM_Base_Start+0x8c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <HAL_TIM_Base_Start+0x48>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a13      	ldr	r2, [pc, #76]	@ (800aebc <HAL_TIM_Base_Start+0x90>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d111      	bne.n	800ae98 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b06      	cmp	r3, #6
 800ae84:	d010      	beq.n	800aea8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f042 0201 	orr.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae96:	e007      	b.n	800aea8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr
 800aeb4:	40012c00 	.word	0x40012c00
 800aeb8:	40000400 	.word	0x40000400
 800aebc:	40000800 	.word	0x40000800

0800aec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <HAL_TIM_ConfigClockSource+0x1c>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e0b4      	b.n	800b046 <HAL_TIM_ConfigClockSource+0x186>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aefa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af14:	d03e      	beq.n	800af94 <HAL_TIM_ConfigClockSource+0xd4>
 800af16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af1a:	f200 8087 	bhi.w	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af22:	f000 8086 	beq.w	800b032 <HAL_TIM_ConfigClockSource+0x172>
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af2a:	d87f      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af2c:	2b70      	cmp	r3, #112	@ 0x70
 800af2e:	d01a      	beq.n	800af66 <HAL_TIM_ConfigClockSource+0xa6>
 800af30:	2b70      	cmp	r3, #112	@ 0x70
 800af32:	d87b      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af34:	2b60      	cmp	r3, #96	@ 0x60
 800af36:	d050      	beq.n	800afda <HAL_TIM_ConfigClockSource+0x11a>
 800af38:	2b60      	cmp	r3, #96	@ 0x60
 800af3a:	d877      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af3c:	2b50      	cmp	r3, #80	@ 0x50
 800af3e:	d03c      	beq.n	800afba <HAL_TIM_ConfigClockSource+0xfa>
 800af40:	2b50      	cmp	r3, #80	@ 0x50
 800af42:	d873      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af44:	2b40      	cmp	r3, #64	@ 0x40
 800af46:	d058      	beq.n	800affa <HAL_TIM_ConfigClockSource+0x13a>
 800af48:	2b40      	cmp	r3, #64	@ 0x40
 800af4a:	d86f      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af4c:	2b30      	cmp	r3, #48	@ 0x30
 800af4e:	d064      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x15a>
 800af50:	2b30      	cmp	r3, #48	@ 0x30
 800af52:	d86b      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af54:	2b20      	cmp	r3, #32
 800af56:	d060      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x15a>
 800af58:	2b20      	cmp	r3, #32
 800af5a:	d867      	bhi.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d05c      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x15a>
 800af60:	2b10      	cmp	r3, #16
 800af62:	d05a      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x15a>
 800af64:	e062      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af76:	f000 f950 	bl	800b21a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	609a      	str	r2, [r3, #8]
      break;
 800af92:	e04f      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afa4:	f000 f939 	bl	800b21a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689a      	ldr	r2, [r3, #8]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800afb6:	609a      	str	r2, [r3, #8]
      break;
 800afb8:	e03c      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afc6:	461a      	mov	r2, r3
 800afc8:	f000 f8b0 	bl	800b12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2150      	movs	r1, #80	@ 0x50
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 f907 	bl	800b1e6 <TIM_ITRx_SetConfig>
      break;
 800afd8:	e02c      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afe6:	461a      	mov	r2, r3
 800afe8:	f000 f8ce 	bl	800b188 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2160      	movs	r1, #96	@ 0x60
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f8f7 	bl	800b1e6 <TIM_ITRx_SetConfig>
      break;
 800aff8:	e01c      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b006:	461a      	mov	r2, r3
 800b008:	f000 f890 	bl	800b12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2140      	movs	r1, #64	@ 0x40
 800b012:	4618      	mov	r0, r3
 800b014:	f000 f8e7 	bl	800b1e6 <TIM_ITRx_SetConfig>
      break;
 800b018:	e00c      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f000 f8de 	bl	800b1e6 <TIM_ITRx_SetConfig>
      break;
 800b02a:	e003      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	73fb      	strb	r3, [r7, #15]
      break;
 800b030:	e000      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b044:	7bfb      	ldrb	r3, [r7, #15]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a2f      	ldr	r2, [pc, #188]	@ (800b120 <TIM_Base_SetConfig+0xd0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00b      	beq.n	800b080 <TIM_Base_SetConfig+0x30>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06e:	d007      	beq.n	800b080 <TIM_Base_SetConfig+0x30>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a2c      	ldr	r2, [pc, #176]	@ (800b124 <TIM_Base_SetConfig+0xd4>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_Base_SetConfig+0x30>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a2b      	ldr	r2, [pc, #172]	@ (800b128 <TIM_Base_SetConfig+0xd8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d108      	bne.n	800b092 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a22      	ldr	r2, [pc, #136]	@ (800b120 <TIM_Base_SetConfig+0xd0>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d00b      	beq.n	800b0b2 <TIM_Base_SetConfig+0x62>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a0:	d007      	beq.n	800b0b2 <TIM_Base_SetConfig+0x62>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b124 <TIM_Base_SetConfig+0xd4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d003      	beq.n	800b0b2 <TIM_Base_SetConfig+0x62>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a1e      	ldr	r2, [pc, #120]	@ (800b128 <TIM_Base_SetConfig+0xd8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d108      	bne.n	800b0c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	689a      	ldr	r2, [r3, #8]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b120 <TIM_Base_SetConfig+0xd0>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d103      	bne.n	800b0f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d005      	beq.n	800b116 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f023 0201 	bic.w	r2, r3, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	611a      	str	r2, [r3, #16]
  }
}
 800b116:	bf00      	nop
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bc80      	pop	{r7}
 800b11e:	4770      	bx	lr
 800b120:	40012c00 	.word	0x40012c00
 800b124:	40000400 	.word	0x40000400
 800b128:	40000800 	.word	0x40000800

0800b12c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	f023 0201 	bic.w	r2, r3, #1
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	011b      	lsls	r3, r3, #4
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	4313      	orrs	r3, r2
 800b160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f023 030a 	bic.w	r3, r3, #10
 800b168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	4313      	orrs	r3, r2
 800b170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	621a      	str	r2, [r3, #32]
}
 800b17e:	bf00      	nop
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	bc80      	pop	{r7}
 800b186:	4770      	bx	lr

0800b188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f023 0210 	bic.w	r2, r3, #16
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b1b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	031b      	lsls	r3, r3, #12
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b1c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	011b      	lsls	r3, r3, #4
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	621a      	str	r2, [r3, #32]
}
 800b1dc:	bf00      	nop
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bc80      	pop	{r7}
 800b1e4:	4770      	bx	lr

0800b1e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	f043 0307 	orr.w	r3, r3, #7
 800b208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	609a      	str	r2, [r3, #8]
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b087      	sub	sp, #28
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b234:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	021a      	lsls	r2, r3, #8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	431a      	orrs	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	4313      	orrs	r3, r2
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	4313      	orrs	r3, r2
 800b246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	609a      	str	r2, [r3, #8]
}
 800b24e:	bf00      	nop
 800b250:	371c      	adds	r7, #28
 800b252:	46bd      	mov	sp, r7
 800b254:	bc80      	pop	{r7}
 800b256:	4770      	bx	lr

0800b258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e046      	b.n	800b2fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a16      	ldr	r2, [pc, #88]	@ (800b308 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d00e      	beq.n	800b2d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2bc:	d009      	beq.n	800b2d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a12      	ldr	r2, [pc, #72]	@ (800b30c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d004      	beq.n	800b2d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a10      	ldr	r2, [pc, #64]	@ (800b310 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d10c      	bne.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr
 800b308:	40012c00 	.word	0x40012c00
 800b30c:	40000400 	.word	0x40000400
 800b310:	40000800 	.word	0x40000800

0800b314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e042      	b.n	800b3ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fa fa22 	bl	8005784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2224      	movs	r2, #36	@ 0x24
 800b344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fdb7 	bl	800becc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b36c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695a      	ldr	r2, [r3, #20]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b37c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68da      	ldr	r2, [r3, #12]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b38c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	@ 0x28
 800b3b8:	af02      	add	r7, sp, #8
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	603b      	str	r3, [r7, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d175      	bne.n	800b4c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_UART_Transmit+0x2c>
 800b3da:	88fb      	ldrh	r3, [r7, #6]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e06e      	b.n	800b4c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2221      	movs	r2, #33	@ 0x21
 800b3ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3f2:	f7fa fecb 	bl	800618c <HAL_GetTick>
 800b3f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	88fa      	ldrh	r2, [r7, #6]
 800b3fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	88fa      	ldrh	r2, [r7, #6]
 800b402:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b40c:	d108      	bne.n	800b420 <HAL_UART_Transmit+0x6c>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d104      	bne.n	800b420 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	61bb      	str	r3, [r7, #24]
 800b41e:	e003      	b.n	800b428 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b424:	2300      	movs	r3, #0
 800b426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b428:	e02e      	b.n	800b488 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2200      	movs	r2, #0
 800b432:	2180      	movs	r1, #128	@ 0x80
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 fb1c 	bl	800ba72 <UART_WaitOnFlagUntilTimeout>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2220      	movs	r2, #32
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e03a      	b.n	800b4c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10b      	bne.n	800b46a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	3302      	adds	r3, #2
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	e007      	b.n	800b47a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	781a      	ldrb	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	3301      	adds	r3, #1
 800b478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b01      	subs	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1cb      	bne.n	800b42a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2200      	movs	r2, #0
 800b49a:	2140      	movs	r1, #64	@ 0x40
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 fae8 	bl	800ba72 <UART_WaitOnFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d005      	beq.n	800b4b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e006      	b.n	800b4c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e000      	b.n	800b4c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b4c0:	2302      	movs	r3, #2
  }
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b20      	cmp	r3, #32
 800b4e2:	d112      	bne.n	800b50a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <HAL_UART_Receive_IT+0x26>
 800b4ea:	88fb      	ldrh	r3, [r7, #6]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e00b      	b.n	800b50c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fb0f 	bl	800bb24 <UART_Start_Receive_IT>
 800b506:	4603      	mov	r3, r0
 800b508:	e000      	b.n	800b50c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b50a:	2302      	movs	r3, #2
  }
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b0ba      	sub	sp, #232	@ 0xe8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b540:	2300      	movs	r3, #0
 800b542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b54a:	f003 030f 	and.w	r3, r3, #15
 800b54e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10f      	bne.n	800b57a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <HAL_UART_IRQHandler+0x66>
 800b566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fbec 	bl	800bd50 <UART_Receive_IT>
      return;
 800b578:	e25b      	b.n	800ba32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b57a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 80de 	beq.w	800b740 <HAL_UART_IRQHandler+0x22c>
 800b584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b594:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 80d1 	beq.w	800b740 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00b      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xae>
 800b5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ba:	f043 0201 	orr.w	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5c6:	f003 0304 	and.w	r3, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_UART_IRQHandler+0xd2>
 800b5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5de:	f043 0202 	orr.w	r2, r3, #2
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00b      	beq.n	800b60a <HAL_UART_IRQHandler+0xf6>
 800b5f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d005      	beq.n	800b60a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b602:	f043 0204 	orr.w	r2, r3, #4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d011      	beq.n	800b63a <HAL_UART_IRQHandler+0x126>
 800b616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d105      	bne.n	800b62e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d005      	beq.n	800b63a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b632:	f043 0208 	orr.w	r2, r3, #8
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 81f2 	beq.w	800ba28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b648:	f003 0320 	and.w	r3, r3, #32
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d008      	beq.n	800b662 <HAL_UART_IRQHandler+0x14e>
 800b650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fb77 	bl	800bd50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bf14      	ite	ne
 800b670:	2301      	movne	r3, #1
 800b672:	2300      	moveq	r3, #0
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b67e:	f003 0308 	and.w	r3, r3, #8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d103      	bne.n	800b68e <HAL_UART_IRQHandler+0x17a>
 800b686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d04f      	beq.n	800b72e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa81 	bl	800bb96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d041      	beq.n	800b726 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3314      	adds	r3, #20
 800b6a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b6b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b6ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b6d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b6da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b6e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1d9      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d013      	beq.n	800b71e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6fa:	4a7e      	ldr	r2, [pc, #504]	@ (800b8f4 <HAL_UART_IRQHandler+0x3e0>)
 800b6fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b702:	4618      	mov	r0, r3
 800b704:	f7fb fc90 	bl	8007028 <HAL_DMA_Abort_IT>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d016      	beq.n	800b73c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b71c:	e00e      	b.n	800b73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f993 	bl	800ba4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b724:	e00a      	b.n	800b73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f98f 	bl	800ba4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b72c:	e006      	b.n	800b73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f98b 	bl	800ba4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b73a:	e175      	b.n	800ba28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b73c:	bf00      	nop
    return;
 800b73e:	e173      	b.n	800ba28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b744:	2b01      	cmp	r3, #1
 800b746:	f040 814f 	bne.w	800b9e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8148 	beq.w	800b9e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b75c:	f003 0310 	and.w	r3, r3, #16
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 8141 	beq.w	800b9e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b766:	2300      	movs	r3, #0
 800b768:	60bb      	str	r3, [r7, #8]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	60bb      	str	r3, [r7, #8]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	60bb      	str	r3, [r7, #8]
 800b77a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 80b6 	beq.w	800b8f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8145 	beq.w	800ba2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	f080 813e 	bcs.w	800ba2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	2b20      	cmp	r3, #32
 800b7c0:	f000 8088 	beq.w	800b8d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	330c      	adds	r3, #12
 800b7ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7d2:	e853 3f00 	ldrex	r3, [r3]
 800b7d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b7da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b7f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b7f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b7fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1d9      	bne.n	800b7c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3314      	adds	r3, #20
 800b816:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3314      	adds	r3, #20
 800b830:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b834:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b838:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b83c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b840:	e841 2300 	strex	r3, r2, [r1]
 800b844:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1e1      	bne.n	800b810 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3314      	adds	r3, #20
 800b852:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b856:	e853 3f00 	ldrex	r3, [r3]
 800b85a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b85c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b85e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3314      	adds	r3, #20
 800b86c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b870:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b872:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b876:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e3      	bne.n	800b84c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2220      	movs	r2, #32
 800b888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	330c      	adds	r3, #12
 800b898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8a4:	f023 0310 	bic.w	r3, r3, #16
 800b8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b8b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b8b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e3      	bne.n	800b892 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fb fb6f 	bl	8006fb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f8b6 	bl	800ba5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8f0:	e09c      	b.n	800ba2c <HAL_UART_IRQHandler+0x518>
 800b8f2:	bf00      	nop
 800b8f4:	0800bc5b 	.word	0x0800bc5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b900:	b29b      	uxth	r3, r3
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 808e 	beq.w	800ba30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 8089 	beq.w	800ba30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	330c      	adds	r3, #12
 800b924:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b942:	647a      	str	r2, [r7, #68]	@ 0x44
 800b944:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e3      	bne.n	800b91e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3314      	adds	r3, #20
 800b95c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	623b      	str	r3, [r7, #32]
   return(result);
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	f023 0301 	bic.w	r3, r3, #1
 800b96c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b97a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b982:	e841 2300 	strex	r3, r2, [r1]
 800b986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1e3      	bne.n	800b956 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	330c      	adds	r3, #12
 800b9a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	e853 3f00 	ldrex	r3, [r3]
 800b9aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0310 	bic.w	r3, r3, #16
 800b9b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	330c      	adds	r3, #12
 800b9bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b9c0:	61fa      	str	r2, [r7, #28]
 800b9c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c4:	69b9      	ldr	r1, [r7, #24]
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	e841 2300 	strex	r3, r2, [r1]
 800b9cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1e3      	bne.n	800b99c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f83b 	bl	800ba5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9e6:	e023      	b.n	800ba30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d009      	beq.n	800ba08 <HAL_UART_IRQHandler+0x4f4>
 800b9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f93e 	bl	800bc82 <UART_Transmit_IT>
    return;
 800ba06:	e014      	b.n	800ba32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00e      	beq.n	800ba32 <HAL_UART_IRQHandler+0x51e>
 800ba14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d008      	beq.n	800ba32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f97d 	bl	800bd20 <UART_EndTransmit_IT>
    return;
 800ba26:	e004      	b.n	800ba32 <HAL_UART_IRQHandler+0x51e>
    return;
 800ba28:	bf00      	nop
 800ba2a:	e002      	b.n	800ba32 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba2c:	bf00      	nop
 800ba2e:	e000      	b.n	800ba32 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba30:	bf00      	nop
  }
}
 800ba32:	37e8      	adds	r7, #232	@ 0xe8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bc80      	pop	{r7}
 800ba48:	4770      	bx	lr

0800ba4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr

0800ba72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	603b      	str	r3, [r7, #0]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba82:	e03b      	b.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8a:	d037      	beq.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba8c:	f7fa fb7e 	bl	800618c <HAL_GetTick>
 800ba90:	4602      	mov	r2, r0
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	6a3a      	ldr	r2, [r7, #32]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d302      	bcc.n	800baa2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e03a      	b.n	800bb1c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d023      	beq.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2b80      	cmp	r3, #128	@ 0x80
 800bab8:	d020      	beq.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	2b40      	cmp	r3, #64	@ 0x40
 800babe:	d01d      	beq.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b08      	cmp	r3, #8
 800bacc:	d116      	bne.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	617b      	str	r3, [r7, #20]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f856 	bl	800bb96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2208      	movs	r2, #8
 800baee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e00f      	b.n	800bb1c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	4013      	ands	r3, r2
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	bf0c      	ite	eq
 800bb0c:	2301      	moveq	r3, #1
 800bb0e:	2300      	movne	r3, #0
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	461a      	mov	r2, r3
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d0b4      	beq.n	800ba84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	88fa      	ldrh	r2, [r7, #6]
 800bb3c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	88fa      	ldrh	r2, [r7, #6]
 800bb42:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2222      	movs	r2, #34	@ 0x22
 800bb4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d007      	beq.n	800bb6a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68da      	ldr	r2, [r3, #12]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	695a      	ldr	r2, [r3, #20]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f042 0220 	orr.w	r2, r2, #32
 800bb88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bc80      	pop	{r7}
 800bb94:	4770      	bx	lr

0800bb96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b095      	sub	sp, #84	@ 0x54
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	330c      	adds	r3, #12
 800bba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba8:	e853 3f00 	ldrex	r3, [r3]
 800bbac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	330c      	adds	r3, #12
 800bbbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbbe:	643a      	str	r2, [r7, #64]	@ 0x40
 800bbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbc6:	e841 2300 	strex	r3, r2, [r1]
 800bbca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1e5      	bne.n	800bb9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3314      	adds	r3, #20
 800bbd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	e853 3f00 	ldrex	r3, [r3]
 800bbe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	f023 0301 	bic.w	r3, r3, #1
 800bbe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e5      	bne.n	800bbd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d119      	bne.n	800bc42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	330c      	adds	r3, #12
 800bc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f023 0310 	bic.w	r3, r3, #16
 800bc24:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	330c      	adds	r3, #12
 800bc2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc2e:	61ba      	str	r2, [r7, #24]
 800bc30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6979      	ldr	r1, [r7, #20]
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e5      	bne.n	800bc0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bc50:	bf00      	nop
 800bc52:	3754      	adds	r7, #84	@ 0x54
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bc80      	pop	{r7}
 800bc58:	4770      	bx	lr

0800bc5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7ff fee8 	bl	800ba4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b21      	cmp	r3, #33	@ 0x21
 800bc94:	d13e      	bne.n	800bd14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc9e:	d114      	bne.n	800bcca <UART_Transmit_IT+0x48>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d110      	bne.n	800bcca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	1c9a      	adds	r2, r3, #2
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	621a      	str	r2, [r3, #32]
 800bcc8:	e008      	b.n	800bcdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	1c59      	adds	r1, r3, #1
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	6211      	str	r1, [r2, #32]
 800bcd4:	781a      	ldrb	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	3b01      	subs	r3, #1
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4619      	mov	r1, r3
 800bcea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10f      	bne.n	800bd10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bcfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	e000      	b.n	800bd16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd14:	2302      	movs	r3, #2
  }
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bc80      	pop	{r7}
 800bd1e:	4770      	bx	lr

0800bd20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fe79 	bl	800ba38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08c      	sub	sp, #48	@ 0x30
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b22      	cmp	r3, #34	@ 0x22
 800bd62:	f040 80ae 	bne.w	800bec2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd6e:	d117      	bne.n	800bda0 <UART_Receive_IT+0x50>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d113      	bne.n	800bda0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd98:	1c9a      	adds	r2, r3, #2
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd9e:	e026      	b.n	800bdee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdb2:	d007      	beq.n	800bdc4 <UART_Receive_IT+0x74>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <UART_Receive_IT+0x82>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	e008      	b.n	800bde4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d15d      	bne.n	800bebe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68da      	ldr	r2, [r3, #12]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0220 	bic.w	r2, r2, #32
 800be10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68da      	ldr	r2, [r3, #12]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	695a      	ldr	r2, [r3, #20]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0201 	bic.w	r2, r2, #1
 800be30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2220      	movs	r2, #32
 800be36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be44:	2b01      	cmp	r3, #1
 800be46:	d135      	bne.n	800beb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	330c      	adds	r3, #12
 800be54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	613b      	str	r3, [r7, #16]
   return(result);
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f023 0310 	bic.w	r3, r3, #16
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	330c      	adds	r3, #12
 800be6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be6e:	623a      	str	r2, [r7, #32]
 800be70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	69f9      	ldr	r1, [r7, #28]
 800be74:	6a3a      	ldr	r2, [r7, #32]
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	61bb      	str	r3, [r7, #24]
   return(result);
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e5      	bne.n	800be4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b10      	cmp	r3, #16
 800be8e:	d10a      	bne.n	800bea6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be90:	2300      	movs	r3, #0
 800be92:	60fb      	str	r3, [r7, #12]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7ff fdd5 	bl	800ba5c <HAL_UARTEx_RxEventCallback>
 800beb2:	e002      	b.n	800beba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7f9 fe8d 	bl	8005bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	e002      	b.n	800bec4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e000      	b.n	800bec4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bec2:	2302      	movs	r3, #2
  }
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3730      	adds	r7, #48	@ 0x30
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	689a      	ldr	r2, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	431a      	orrs	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800bf06:	f023 030c 	bic.w	r3, r3, #12
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6812      	ldr	r2, [r2, #0]
 800bf0e:	68b9      	ldr	r1, [r7, #8]
 800bf10:	430b      	orrs	r3, r1
 800bf12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a2c      	ldr	r2, [pc, #176]	@ (800bfe0 <UART_SetConfig+0x114>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d103      	bne.n	800bf3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf34:	f7fd f9ba 	bl	80092ac <HAL_RCC_GetPCLK2Freq>
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	e002      	b.n	800bf42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf3c:	f7fd f9a2 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 800bf40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	4613      	mov	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	009a      	lsls	r2, r3, #2
 800bf4c:	441a      	add	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf58:	4a22      	ldr	r2, [pc, #136]	@ (800bfe4 <UART_SetConfig+0x118>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	095b      	lsrs	r3, r3, #5
 800bf60:	0119      	lsls	r1, r3, #4
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	009a      	lsls	r2, r3, #2
 800bf6c:	441a      	add	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf78:	4b1a      	ldr	r3, [pc, #104]	@ (800bfe4 <UART_SetConfig+0x118>)
 800bf7a:	fba3 0302 	umull	r0, r3, r3, r2
 800bf7e:	095b      	lsrs	r3, r3, #5
 800bf80:	2064      	movs	r0, #100	@ 0x64
 800bf82:	fb00 f303 	mul.w	r3, r0, r3
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	011b      	lsls	r3, r3, #4
 800bf8a:	3332      	adds	r3, #50	@ 0x32
 800bf8c:	4a15      	ldr	r2, [pc, #84]	@ (800bfe4 <UART_SetConfig+0x118>)
 800bf8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf92:	095b      	lsrs	r3, r3, #5
 800bf94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf98:	4419      	add	r1, r3
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009a      	lsls	r2, r3, #2
 800bfa4:	441a      	add	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe4 <UART_SetConfig+0x118>)
 800bfb2:	fba3 0302 	umull	r0, r3, r3, r2
 800bfb6:	095b      	lsrs	r3, r3, #5
 800bfb8:	2064      	movs	r0, #100	@ 0x64
 800bfba:	fb00 f303 	mul.w	r3, r0, r3
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	3332      	adds	r3, #50	@ 0x32
 800bfc4:	4a07      	ldr	r2, [pc, #28]	@ (800bfe4 <UART_SetConfig+0x118>)
 800bfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	f003 020f 	and.w	r2, r3, #15
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	440a      	add	r2, r1
 800bfd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bfd8:	bf00      	nop
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	40013800 	.word	0x40013800
 800bfe4:	51eb851f 	.word	0x51eb851f

0800bfe8 <atoi>:
 800bfe8:	220a      	movs	r2, #10
 800bfea:	2100      	movs	r1, #0
 800bfec:	f000 b87a 	b.w	800c0e4 <strtol>

0800bff0 <_strtol_l.isra.0>:
 800bff0:	2b24      	cmp	r3, #36	@ 0x24
 800bff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff6:	4686      	mov	lr, r0
 800bff8:	4690      	mov	r8, r2
 800bffa:	d801      	bhi.n	800c000 <_strtol_l.isra.0+0x10>
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d106      	bne.n	800c00e <_strtol_l.isra.0+0x1e>
 800c000:	f001 f810 	bl	800d024 <__errno>
 800c004:	2316      	movs	r3, #22
 800c006:	6003      	str	r3, [r0, #0]
 800c008:	2000      	movs	r0, #0
 800c00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00e:	460d      	mov	r5, r1
 800c010:	4833      	ldr	r0, [pc, #204]	@ (800c0e0 <_strtol_l.isra.0+0xf0>)
 800c012:	462a      	mov	r2, r5
 800c014:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c018:	5d06      	ldrb	r6, [r0, r4]
 800c01a:	f016 0608 	ands.w	r6, r6, #8
 800c01e:	d1f8      	bne.n	800c012 <_strtol_l.isra.0+0x22>
 800c020:	2c2d      	cmp	r4, #45	@ 0x2d
 800c022:	d110      	bne.n	800c046 <_strtol_l.isra.0+0x56>
 800c024:	2601      	movs	r6, #1
 800c026:	782c      	ldrb	r4, [r5, #0]
 800c028:	1c95      	adds	r5, r2, #2
 800c02a:	f033 0210 	bics.w	r2, r3, #16
 800c02e:	d115      	bne.n	800c05c <_strtol_l.isra.0+0x6c>
 800c030:	2c30      	cmp	r4, #48	@ 0x30
 800c032:	d10d      	bne.n	800c050 <_strtol_l.isra.0+0x60>
 800c034:	782a      	ldrb	r2, [r5, #0]
 800c036:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c03a:	2a58      	cmp	r2, #88	@ 0x58
 800c03c:	d108      	bne.n	800c050 <_strtol_l.isra.0+0x60>
 800c03e:	786c      	ldrb	r4, [r5, #1]
 800c040:	3502      	adds	r5, #2
 800c042:	2310      	movs	r3, #16
 800c044:	e00a      	b.n	800c05c <_strtol_l.isra.0+0x6c>
 800c046:	2c2b      	cmp	r4, #43	@ 0x2b
 800c048:	bf04      	itt	eq
 800c04a:	782c      	ldrbeq	r4, [r5, #0]
 800c04c:	1c95      	addeq	r5, r2, #2
 800c04e:	e7ec      	b.n	800c02a <_strtol_l.isra.0+0x3a>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f6      	bne.n	800c042 <_strtol_l.isra.0+0x52>
 800c054:	2c30      	cmp	r4, #48	@ 0x30
 800c056:	bf14      	ite	ne
 800c058:	230a      	movne	r3, #10
 800c05a:	2308      	moveq	r3, #8
 800c05c:	2200      	movs	r2, #0
 800c05e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c062:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c066:	fbbc f9f3 	udiv	r9, ip, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c070:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c074:	2f09      	cmp	r7, #9
 800c076:	d80f      	bhi.n	800c098 <_strtol_l.isra.0+0xa8>
 800c078:	463c      	mov	r4, r7
 800c07a:	42a3      	cmp	r3, r4
 800c07c:	dd1b      	ble.n	800c0b6 <_strtol_l.isra.0+0xc6>
 800c07e:	1c57      	adds	r7, r2, #1
 800c080:	d007      	beq.n	800c092 <_strtol_l.isra.0+0xa2>
 800c082:	4581      	cmp	r9, r0
 800c084:	d314      	bcc.n	800c0b0 <_strtol_l.isra.0+0xc0>
 800c086:	d101      	bne.n	800c08c <_strtol_l.isra.0+0x9c>
 800c088:	45a2      	cmp	sl, r4
 800c08a:	db11      	blt.n	800c0b0 <_strtol_l.isra.0+0xc0>
 800c08c:	2201      	movs	r2, #1
 800c08e:	fb00 4003 	mla	r0, r0, r3, r4
 800c092:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c096:	e7eb      	b.n	800c070 <_strtol_l.isra.0+0x80>
 800c098:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c09c:	2f19      	cmp	r7, #25
 800c09e:	d801      	bhi.n	800c0a4 <_strtol_l.isra.0+0xb4>
 800c0a0:	3c37      	subs	r4, #55	@ 0x37
 800c0a2:	e7ea      	b.n	800c07a <_strtol_l.isra.0+0x8a>
 800c0a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0a8:	2f19      	cmp	r7, #25
 800c0aa:	d804      	bhi.n	800c0b6 <_strtol_l.isra.0+0xc6>
 800c0ac:	3c57      	subs	r4, #87	@ 0x57
 800c0ae:	e7e4      	b.n	800c07a <_strtol_l.isra.0+0x8a>
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	e7ed      	b.n	800c092 <_strtol_l.isra.0+0xa2>
 800c0b6:	1c53      	adds	r3, r2, #1
 800c0b8:	d108      	bne.n	800c0cc <_strtol_l.isra.0+0xdc>
 800c0ba:	2322      	movs	r3, #34	@ 0x22
 800c0bc:	4660      	mov	r0, ip
 800c0be:	f8ce 3000 	str.w	r3, [lr]
 800c0c2:	f1b8 0f00 	cmp.w	r8, #0
 800c0c6:	d0a0      	beq.n	800c00a <_strtol_l.isra.0+0x1a>
 800c0c8:	1e69      	subs	r1, r5, #1
 800c0ca:	e006      	b.n	800c0da <_strtol_l.isra.0+0xea>
 800c0cc:	b106      	cbz	r6, 800c0d0 <_strtol_l.isra.0+0xe0>
 800c0ce:	4240      	negs	r0, r0
 800c0d0:	f1b8 0f00 	cmp.w	r8, #0
 800c0d4:	d099      	beq.n	800c00a <_strtol_l.isra.0+0x1a>
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	d1f6      	bne.n	800c0c8 <_strtol_l.isra.0+0xd8>
 800c0da:	f8c8 1000 	str.w	r1, [r8]
 800c0de:	e794      	b.n	800c00a <_strtol_l.isra.0+0x1a>
 800c0e0:	0800f6db 	.word	0x0800f6db

0800c0e4 <strtol>:
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	460a      	mov	r2, r1
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	4802      	ldr	r0, [pc, #8]	@ (800c0f4 <strtol+0x10>)
 800c0ec:	6800      	ldr	r0, [r0, #0]
 800c0ee:	f7ff bf7f 	b.w	800bff0 <_strtol_l.isra.0>
 800c0f2:	bf00      	nop
 800c0f4:	20000074 	.word	0x20000074

0800c0f8 <__cvt>:
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fe:	461d      	mov	r5, r3
 800c100:	bfbb      	ittet	lt
 800c102:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800c106:	461d      	movlt	r5, r3
 800c108:	2300      	movge	r3, #0
 800c10a:	232d      	movlt	r3, #45	@ 0x2d
 800c10c:	b088      	sub	sp, #32
 800c10e:	4614      	mov	r4, r2
 800c110:	bfb8      	it	lt
 800c112:	4614      	movlt	r4, r2
 800c114:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c116:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c118:	7013      	strb	r3, [r2, #0]
 800c11a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c11c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c120:	f023 0820 	bic.w	r8, r3, #32
 800c124:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c128:	d005      	beq.n	800c136 <__cvt+0x3e>
 800c12a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c12e:	d100      	bne.n	800c132 <__cvt+0x3a>
 800c130:	3601      	adds	r6, #1
 800c132:	2302      	movs	r3, #2
 800c134:	e000      	b.n	800c138 <__cvt+0x40>
 800c136:	2303      	movs	r3, #3
 800c138:	aa07      	add	r2, sp, #28
 800c13a:	9204      	str	r2, [sp, #16]
 800c13c:	aa06      	add	r2, sp, #24
 800c13e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c142:	e9cd 3600 	strd	r3, r6, [sp]
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	f001 f84d 	bl	800d1e8 <_dtoa_r>
 800c14e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c152:	4607      	mov	r7, r0
 800c154:	d119      	bne.n	800c18a <__cvt+0x92>
 800c156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c158:	07db      	lsls	r3, r3, #31
 800c15a:	d50e      	bpl.n	800c17a <__cvt+0x82>
 800c15c:	eb00 0906 	add.w	r9, r0, r6
 800c160:	2200      	movs	r2, #0
 800c162:	2300      	movs	r3, #0
 800c164:	4620      	mov	r0, r4
 800c166:	4629      	mov	r1, r5
 800c168:	f7f4 fc28 	bl	80009bc <__aeabi_dcmpeq>
 800c16c:	b108      	cbz	r0, 800c172 <__cvt+0x7a>
 800c16e:	f8cd 901c 	str.w	r9, [sp, #28]
 800c172:	2230      	movs	r2, #48	@ 0x30
 800c174:	9b07      	ldr	r3, [sp, #28]
 800c176:	454b      	cmp	r3, r9
 800c178:	d31e      	bcc.n	800c1b8 <__cvt+0xc0>
 800c17a:	4638      	mov	r0, r7
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c180:	1bdb      	subs	r3, r3, r7
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	b008      	add	sp, #32
 800c186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c18e:	eb00 0906 	add.w	r9, r0, r6
 800c192:	d1e5      	bne.n	800c160 <__cvt+0x68>
 800c194:	7803      	ldrb	r3, [r0, #0]
 800c196:	2b30      	cmp	r3, #48	@ 0x30
 800c198:	d10a      	bne.n	800c1b0 <__cvt+0xb8>
 800c19a:	2200      	movs	r2, #0
 800c19c:	2300      	movs	r3, #0
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 fc0b 	bl	80009bc <__aeabi_dcmpeq>
 800c1a6:	b918      	cbnz	r0, 800c1b0 <__cvt+0xb8>
 800c1a8:	f1c6 0601 	rsb	r6, r6, #1
 800c1ac:	f8ca 6000 	str.w	r6, [sl]
 800c1b0:	f8da 3000 	ldr.w	r3, [sl]
 800c1b4:	4499      	add	r9, r3
 800c1b6:	e7d3      	b.n	800c160 <__cvt+0x68>
 800c1b8:	1c59      	adds	r1, r3, #1
 800c1ba:	9107      	str	r1, [sp, #28]
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e7d9      	b.n	800c174 <__cvt+0x7c>

0800c1c0 <__exponent>:
 800c1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	bfb6      	itet	lt
 800c1c6:	232d      	movlt	r3, #45	@ 0x2d
 800c1c8:	232b      	movge	r3, #43	@ 0x2b
 800c1ca:	4249      	neglt	r1, r1
 800c1cc:	2909      	cmp	r1, #9
 800c1ce:	7002      	strb	r2, [r0, #0]
 800c1d0:	7043      	strb	r3, [r0, #1]
 800c1d2:	dd29      	ble.n	800c228 <__exponent+0x68>
 800c1d4:	f10d 0307 	add.w	r3, sp, #7
 800c1d8:	461d      	mov	r5, r3
 800c1da:	270a      	movs	r7, #10
 800c1dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	fb07 1416 	mls	r4, r7, r6, r1
 800c1e6:	3430      	adds	r4, #48	@ 0x30
 800c1e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	2c63      	cmp	r4, #99	@ 0x63
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1f6:	dcf1      	bgt.n	800c1dc <__exponent+0x1c>
 800c1f8:	3130      	adds	r1, #48	@ 0x30
 800c1fa:	1e94      	subs	r4, r2, #2
 800c1fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c200:	4623      	mov	r3, r4
 800c202:	1c41      	adds	r1, r0, #1
 800c204:	42ab      	cmp	r3, r5
 800c206:	d30a      	bcc.n	800c21e <__exponent+0x5e>
 800c208:	f10d 0309 	add.w	r3, sp, #9
 800c20c:	1a9b      	subs	r3, r3, r2
 800c20e:	42ac      	cmp	r4, r5
 800c210:	bf88      	it	hi
 800c212:	2300      	movhi	r3, #0
 800c214:	3302      	adds	r3, #2
 800c216:	4403      	add	r3, r0
 800c218:	1a18      	subs	r0, r3, r0
 800c21a:	b003      	add	sp, #12
 800c21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c21e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c222:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c226:	e7ed      	b.n	800c204 <__exponent+0x44>
 800c228:	2330      	movs	r3, #48	@ 0x30
 800c22a:	3130      	adds	r1, #48	@ 0x30
 800c22c:	7083      	strb	r3, [r0, #2]
 800c22e:	70c1      	strb	r1, [r0, #3]
 800c230:	1d03      	adds	r3, r0, #4
 800c232:	e7f1      	b.n	800c218 <__exponent+0x58>

0800c234 <_printf_float>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	b091      	sub	sp, #68	@ 0x44
 800c23a:	460c      	mov	r4, r1
 800c23c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800c240:	4616      	mov	r6, r2
 800c242:	461f      	mov	r7, r3
 800c244:	4605      	mov	r5, r0
 800c246:	f000 fea3 	bl	800cf90 <_localeconv_r>
 800c24a:	6803      	ldr	r3, [r0, #0]
 800c24c:	4618      	mov	r0, r3
 800c24e:	9308      	str	r3, [sp, #32]
 800c250:	f7f3 ff88 	bl	8000164 <strlen>
 800c254:	2300      	movs	r3, #0
 800c256:	930e      	str	r3, [sp, #56]	@ 0x38
 800c258:	f8d8 3000 	ldr.w	r3, [r8]
 800c25c:	9009      	str	r0, [sp, #36]	@ 0x24
 800c25e:	3307      	adds	r3, #7
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	f103 0208 	add.w	r2, r3, #8
 800c268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c26c:	f8d4 b000 	ldr.w	fp, [r4]
 800c270:	f8c8 2000 	str.w	r2, [r8]
 800c274:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c27c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c27e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c282:	f04f 32ff 	mov.w	r2, #4294967295
 800c286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c28a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c28e:	4b9c      	ldr	r3, [pc, #624]	@ (800c500 <_printf_float+0x2cc>)
 800c290:	f7f4 fbc6 	bl	8000a20 <__aeabi_dcmpun>
 800c294:	bb70      	cbnz	r0, 800c2f4 <_printf_float+0xc0>
 800c296:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c29a:	f04f 32ff 	mov.w	r2, #4294967295
 800c29e:	4b98      	ldr	r3, [pc, #608]	@ (800c500 <_printf_float+0x2cc>)
 800c2a0:	f7f4 fba0 	bl	80009e4 <__aeabi_dcmple>
 800c2a4:	bb30      	cbnz	r0, 800c2f4 <_printf_float+0xc0>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f4 fb8f 	bl	80009d0 <__aeabi_dcmplt>
 800c2b2:	b110      	cbz	r0, 800c2ba <_printf_float+0x86>
 800c2b4:	232d      	movs	r3, #45	@ 0x2d
 800c2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2ba:	4a92      	ldr	r2, [pc, #584]	@ (800c504 <_printf_float+0x2d0>)
 800c2bc:	4b92      	ldr	r3, [pc, #584]	@ (800c508 <_printf_float+0x2d4>)
 800c2be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2c2:	bf8c      	ite	hi
 800c2c4:	4690      	movhi	r8, r2
 800c2c6:	4698      	movls	r8, r3
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	6123      	str	r3, [r4, #16]
 800c2d0:	f02b 0304 	bic.w	r3, fp, #4
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	4633      	mov	r3, r6
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	9700      	str	r7, [sp, #0]
 800c2de:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c2e0:	f000 f9d4 	bl	800c68c <_printf_common>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f040 8090 	bne.w	800c40a <_printf_float+0x1d6>
 800c2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ee:	b011      	add	sp, #68	@ 0x44
 800c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	f7f4 fb90 	bl	8000a20 <__aeabi_dcmpun>
 800c300:	b148      	cbz	r0, 800c316 <_printf_float+0xe2>
 800c302:	464b      	mov	r3, r9
 800c304:	2b00      	cmp	r3, #0
 800c306:	bfb8      	it	lt
 800c308:	232d      	movlt	r3, #45	@ 0x2d
 800c30a:	4a80      	ldr	r2, [pc, #512]	@ (800c50c <_printf_float+0x2d8>)
 800c30c:	bfb8      	it	lt
 800c30e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c312:	4b7f      	ldr	r3, [pc, #508]	@ (800c510 <_printf_float+0x2dc>)
 800c314:	e7d3      	b.n	800c2be <_printf_float+0x8a>
 800c316:	6863      	ldr	r3, [r4, #4]
 800c318:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	d13f      	bne.n	800c3a0 <_printf_float+0x16c>
 800c320:	2306      	movs	r3, #6
 800c322:	6063      	str	r3, [r4, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	9206      	str	r2, [sp, #24]
 800c32e:	aa0e      	add	r2, sp, #56	@ 0x38
 800c330:	e9cd a204 	strd	sl, r2, [sp, #16]
 800c334:	aa0d      	add	r2, sp, #52	@ 0x34
 800c336:	9203      	str	r2, [sp, #12]
 800c338:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800c33c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c340:	6863      	ldr	r3, [r4, #4]
 800c342:	4642      	mov	r2, r8
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	4628      	mov	r0, r5
 800c348:	464b      	mov	r3, r9
 800c34a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c34c:	f7ff fed4 	bl	800c0f8 <__cvt>
 800c350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c352:	4680      	mov	r8, r0
 800c354:	2947      	cmp	r1, #71	@ 0x47
 800c356:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c358:	d128      	bne.n	800c3ac <_printf_float+0x178>
 800c35a:	1cc8      	adds	r0, r1, #3
 800c35c:	db02      	blt.n	800c364 <_printf_float+0x130>
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	4299      	cmp	r1, r3
 800c362:	dd40      	ble.n	800c3e6 <_printf_float+0x1b2>
 800c364:	f1aa 0a02 	sub.w	sl, sl, #2
 800c368:	fa5f fa8a 	uxtb.w	sl, sl
 800c36c:	4652      	mov	r2, sl
 800c36e:	3901      	subs	r1, #1
 800c370:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c374:	910d      	str	r1, [sp, #52]	@ 0x34
 800c376:	f7ff ff23 	bl	800c1c0 <__exponent>
 800c37a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c37c:	4681      	mov	r9, r0
 800c37e:	1813      	adds	r3, r2, r0
 800c380:	2a01      	cmp	r2, #1
 800c382:	6123      	str	r3, [r4, #16]
 800c384:	dc02      	bgt.n	800c38c <_printf_float+0x158>
 800c386:	6822      	ldr	r2, [r4, #0]
 800c388:	07d2      	lsls	r2, r2, #31
 800c38a:	d501      	bpl.n	800c390 <_printf_float+0x15c>
 800c38c:	3301      	adds	r3, #1
 800c38e:	6123      	str	r3, [r4, #16]
 800c390:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c394:	2b00      	cmp	r3, #0
 800c396:	d09e      	beq.n	800c2d6 <_printf_float+0xa2>
 800c398:	232d      	movs	r3, #45	@ 0x2d
 800c39a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c39e:	e79a      	b.n	800c2d6 <_printf_float+0xa2>
 800c3a0:	2947      	cmp	r1, #71	@ 0x47
 800c3a2:	d1bf      	bne.n	800c324 <_printf_float+0xf0>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1bd      	bne.n	800c324 <_printf_float+0xf0>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e7ba      	b.n	800c322 <_printf_float+0xee>
 800c3ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3b0:	d9dc      	bls.n	800c36c <_printf_float+0x138>
 800c3b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c3b6:	d118      	bne.n	800c3ea <_printf_float+0x1b6>
 800c3b8:	2900      	cmp	r1, #0
 800c3ba:	6863      	ldr	r3, [r4, #4]
 800c3bc:	dd0b      	ble.n	800c3d6 <_printf_float+0x1a2>
 800c3be:	6121      	str	r1, [r4, #16]
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_printf_float+0x194>
 800c3c2:	6822      	ldr	r2, [r4, #0]
 800c3c4:	07d0      	lsls	r0, r2, #31
 800c3c6:	d502      	bpl.n	800c3ce <_printf_float+0x19a>
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	440b      	add	r3, r1
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	f04f 0900 	mov.w	r9, #0
 800c3d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c3d4:	e7dc      	b.n	800c390 <_printf_float+0x15c>
 800c3d6:	b913      	cbnz	r3, 800c3de <_printf_float+0x1aa>
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	07d2      	lsls	r2, r2, #31
 800c3dc:	d501      	bpl.n	800c3e2 <_printf_float+0x1ae>
 800c3de:	3302      	adds	r3, #2
 800c3e0:	e7f4      	b.n	800c3cc <_printf_float+0x198>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e7f2      	b.n	800c3cc <_printf_float+0x198>
 800c3e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ec:	4299      	cmp	r1, r3
 800c3ee:	db05      	blt.n	800c3fc <_printf_float+0x1c8>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	6121      	str	r1, [r4, #16]
 800c3f4:	07d8      	lsls	r0, r3, #31
 800c3f6:	d5ea      	bpl.n	800c3ce <_printf_float+0x19a>
 800c3f8:	1c4b      	adds	r3, r1, #1
 800c3fa:	e7e7      	b.n	800c3cc <_printf_float+0x198>
 800c3fc:	2900      	cmp	r1, #0
 800c3fe:	bfcc      	ite	gt
 800c400:	2201      	movgt	r2, #1
 800c402:	f1c1 0202 	rsble	r2, r1, #2
 800c406:	4413      	add	r3, r2
 800c408:	e7e0      	b.n	800c3cc <_printf_float+0x198>
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	055a      	lsls	r2, r3, #21
 800c40e:	d407      	bmi.n	800c420 <_printf_float+0x1ec>
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	4642      	mov	r2, r8
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	47b8      	blx	r7
 800c41a:	3001      	adds	r0, #1
 800c41c:	d12b      	bne.n	800c476 <_printf_float+0x242>
 800c41e:	e764      	b.n	800c2ea <_printf_float+0xb6>
 800c420:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c424:	f240 80dc 	bls.w	800c5e0 <_printf_float+0x3ac>
 800c428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c42c:	2200      	movs	r2, #0
 800c42e:	2300      	movs	r3, #0
 800c430:	f7f4 fac4 	bl	80009bc <__aeabi_dcmpeq>
 800c434:	2800      	cmp	r0, #0
 800c436:	d033      	beq.n	800c4a0 <_printf_float+0x26c>
 800c438:	2301      	movs	r3, #1
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	4a35      	ldr	r2, [pc, #212]	@ (800c514 <_printf_float+0x2e0>)
 800c440:	47b8      	blx	r7
 800c442:	3001      	adds	r0, #1
 800c444:	f43f af51 	beq.w	800c2ea <_printf_float+0xb6>
 800c448:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800c44c:	4543      	cmp	r3, r8
 800c44e:	db02      	blt.n	800c456 <_printf_float+0x222>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	07d8      	lsls	r0, r3, #31
 800c454:	d50f      	bpl.n	800c476 <_printf_float+0x242>
 800c456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c45a:	4631      	mov	r1, r6
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b8      	blx	r7
 800c460:	3001      	adds	r0, #1
 800c462:	f43f af42 	beq.w	800c2ea <_printf_float+0xb6>
 800c466:	f04f 0900 	mov.w	r9, #0
 800c46a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c46e:	f104 0a1a 	add.w	sl, r4, #26
 800c472:	45c8      	cmp	r8, r9
 800c474:	dc09      	bgt.n	800c48a <_printf_float+0x256>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	079b      	lsls	r3, r3, #30
 800c47a:	f100 8102 	bmi.w	800c682 <_printf_float+0x44e>
 800c47e:	68e0      	ldr	r0, [r4, #12]
 800c480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c482:	4298      	cmp	r0, r3
 800c484:	bfb8      	it	lt
 800c486:	4618      	movlt	r0, r3
 800c488:	e731      	b.n	800c2ee <_printf_float+0xba>
 800c48a:	2301      	movs	r3, #1
 800c48c:	4652      	mov	r2, sl
 800c48e:	4631      	mov	r1, r6
 800c490:	4628      	mov	r0, r5
 800c492:	47b8      	blx	r7
 800c494:	3001      	adds	r0, #1
 800c496:	f43f af28 	beq.w	800c2ea <_printf_float+0xb6>
 800c49a:	f109 0901 	add.w	r9, r9, #1
 800c49e:	e7e8      	b.n	800c472 <_printf_float+0x23e>
 800c4a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dc38      	bgt.n	800c518 <_printf_float+0x2e4>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	4a19      	ldr	r2, [pc, #100]	@ (800c514 <_printf_float+0x2e0>)
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f af1a 	beq.w	800c2ea <_printf_float+0xb6>
 800c4b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800c4ba:	ea59 0303 	orrs.w	r3, r9, r3
 800c4be:	d102      	bne.n	800c4c6 <_printf_float+0x292>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	07d9      	lsls	r1, r3, #31
 800c4c4:	d5d7      	bpl.n	800c476 <_printf_float+0x242>
 800c4c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	47b8      	blx	r7
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	f43f af0a 	beq.w	800c2ea <_printf_float+0xb6>
 800c4d6:	f04f 0a00 	mov.w	sl, #0
 800c4da:	f104 0b1a 	add.w	fp, r4, #26
 800c4de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4e0:	425b      	negs	r3, r3
 800c4e2:	4553      	cmp	r3, sl
 800c4e4:	dc01      	bgt.n	800c4ea <_printf_float+0x2b6>
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	e793      	b.n	800c412 <_printf_float+0x1de>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	465a      	mov	r2, fp
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b8      	blx	r7
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	f43f aef8 	beq.w	800c2ea <_printf_float+0xb6>
 800c4fa:	f10a 0a01 	add.w	sl, sl, #1
 800c4fe:	e7ee      	b.n	800c4de <_printf_float+0x2aa>
 800c500:	7fefffff 	.word	0x7fefffff
 800c504:	0800f7df 	.word	0x0800f7df
 800c508:	0800f7db 	.word	0x0800f7db
 800c50c:	0800f7e7 	.word	0x0800f7e7
 800c510:	0800f7e3 	.word	0x0800f7e3
 800c514:	0800f7eb 	.word	0x0800f7eb
 800c518:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c51a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c51e:	4553      	cmp	r3, sl
 800c520:	bfa8      	it	ge
 800c522:	4653      	movge	r3, sl
 800c524:	2b00      	cmp	r3, #0
 800c526:	4699      	mov	r9, r3
 800c528:	dc36      	bgt.n	800c598 <_printf_float+0x364>
 800c52a:	f04f 0b00 	mov.w	fp, #0
 800c52e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c532:	f104 021a 	add.w	r2, r4, #26
 800c536:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c538:	930a      	str	r3, [sp, #40]	@ 0x28
 800c53a:	eba3 0309 	sub.w	r3, r3, r9
 800c53e:	455b      	cmp	r3, fp
 800c540:	dc31      	bgt.n	800c5a6 <_printf_float+0x372>
 800c542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c544:	459a      	cmp	sl, r3
 800c546:	dc3a      	bgt.n	800c5be <_printf_float+0x38a>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	07da      	lsls	r2, r3, #31
 800c54c:	d437      	bmi.n	800c5be <_printf_float+0x38a>
 800c54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c550:	ebaa 0903 	sub.w	r9, sl, r3
 800c554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c556:	ebaa 0303 	sub.w	r3, sl, r3
 800c55a:	4599      	cmp	r9, r3
 800c55c:	bfa8      	it	ge
 800c55e:	4699      	movge	r9, r3
 800c560:	f1b9 0f00 	cmp.w	r9, #0
 800c564:	dc33      	bgt.n	800c5ce <_printf_float+0x39a>
 800c566:	f04f 0800 	mov.w	r8, #0
 800c56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c56e:	f104 0b1a 	add.w	fp, r4, #26
 800c572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c574:	ebaa 0303 	sub.w	r3, sl, r3
 800c578:	eba3 0309 	sub.w	r3, r3, r9
 800c57c:	4543      	cmp	r3, r8
 800c57e:	f77f af7a 	ble.w	800c476 <_printf_float+0x242>
 800c582:	2301      	movs	r3, #1
 800c584:	465a      	mov	r2, fp
 800c586:	4631      	mov	r1, r6
 800c588:	4628      	mov	r0, r5
 800c58a:	47b8      	blx	r7
 800c58c:	3001      	adds	r0, #1
 800c58e:	f43f aeac 	beq.w	800c2ea <_printf_float+0xb6>
 800c592:	f108 0801 	add.w	r8, r8, #1
 800c596:	e7ec      	b.n	800c572 <_printf_float+0x33e>
 800c598:	4642      	mov	r2, r8
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d1c2      	bne.n	800c52a <_printf_float+0x2f6>
 800c5a4:	e6a1      	b.n	800c2ea <_printf_float+0xb6>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	920a      	str	r2, [sp, #40]	@ 0x28
 800c5ae:	47b8      	blx	r7
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	f43f ae9a 	beq.w	800c2ea <_printf_float+0xb6>
 800c5b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5b8:	f10b 0b01 	add.w	fp, fp, #1
 800c5bc:	e7bb      	b.n	800c536 <_printf_float+0x302>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	47b8      	blx	r7
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d1c0      	bne.n	800c54e <_printf_float+0x31a>
 800c5cc:	e68d      	b.n	800c2ea <_printf_float+0xb6>
 800c5ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5d0:	464b      	mov	r3, r9
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	4442      	add	r2, r8
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d1c3      	bne.n	800c566 <_printf_float+0x332>
 800c5de:	e684      	b.n	800c2ea <_printf_float+0xb6>
 800c5e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c5e4:	f1ba 0f01 	cmp.w	sl, #1
 800c5e8:	dc01      	bgt.n	800c5ee <_printf_float+0x3ba>
 800c5ea:	07db      	lsls	r3, r3, #31
 800c5ec:	d536      	bpl.n	800c65c <_printf_float+0x428>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f43f ae76 	beq.w	800c2ea <_printf_float+0xb6>
 800c5fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c602:	4631      	mov	r1, r6
 800c604:	4628      	mov	r0, r5
 800c606:	47b8      	blx	r7
 800c608:	3001      	adds	r0, #1
 800c60a:	f43f ae6e 	beq.w	800c2ea <_printf_float+0xb6>
 800c60e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c612:	2200      	movs	r2, #0
 800c614:	2300      	movs	r3, #0
 800c616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c61a:	f7f4 f9cf 	bl	80009bc <__aeabi_dcmpeq>
 800c61e:	b9c0      	cbnz	r0, 800c652 <_printf_float+0x41e>
 800c620:	4653      	mov	r3, sl
 800c622:	f108 0201 	add.w	r2, r8, #1
 800c626:	4631      	mov	r1, r6
 800c628:	4628      	mov	r0, r5
 800c62a:	47b8      	blx	r7
 800c62c:	3001      	adds	r0, #1
 800c62e:	d10c      	bne.n	800c64a <_printf_float+0x416>
 800c630:	e65b      	b.n	800c2ea <_printf_float+0xb6>
 800c632:	2301      	movs	r3, #1
 800c634:	465a      	mov	r2, fp
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	f43f ae54 	beq.w	800c2ea <_printf_float+0xb6>
 800c642:	f108 0801 	add.w	r8, r8, #1
 800c646:	45d0      	cmp	r8, sl
 800c648:	dbf3      	blt.n	800c632 <_printf_float+0x3fe>
 800c64a:	464b      	mov	r3, r9
 800c64c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c650:	e6e0      	b.n	800c414 <_printf_float+0x1e0>
 800c652:	f04f 0800 	mov.w	r8, #0
 800c656:	f104 0b1a 	add.w	fp, r4, #26
 800c65a:	e7f4      	b.n	800c646 <_printf_float+0x412>
 800c65c:	2301      	movs	r3, #1
 800c65e:	4642      	mov	r2, r8
 800c660:	e7e1      	b.n	800c626 <_printf_float+0x3f2>
 800c662:	2301      	movs	r3, #1
 800c664:	464a      	mov	r2, r9
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	f43f ae3c 	beq.w	800c2ea <_printf_float+0xb6>
 800c672:	f108 0801 	add.w	r8, r8, #1
 800c676:	68e3      	ldr	r3, [r4, #12]
 800c678:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c67a:	1a5b      	subs	r3, r3, r1
 800c67c:	4543      	cmp	r3, r8
 800c67e:	dcf0      	bgt.n	800c662 <_printf_float+0x42e>
 800c680:	e6fd      	b.n	800c47e <_printf_float+0x24a>
 800c682:	f04f 0800 	mov.w	r8, #0
 800c686:	f104 0919 	add.w	r9, r4, #25
 800c68a:	e7f4      	b.n	800c676 <_printf_float+0x442>

0800c68c <_printf_common>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	4616      	mov	r6, r2
 800c692:	4698      	mov	r8, r3
 800c694:	688a      	ldr	r2, [r1, #8]
 800c696:	690b      	ldr	r3, [r1, #16]
 800c698:	4607      	mov	r7, r0
 800c69a:	4293      	cmp	r3, r2
 800c69c:	bfb8      	it	lt
 800c69e:	4613      	movlt	r3, r2
 800c6a0:	6033      	str	r3, [r6, #0]
 800c6a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6ac:	b10a      	cbz	r2, 800c6b2 <_printf_common+0x26>
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	6033      	str	r3, [r6, #0]
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	0699      	lsls	r1, r3, #26
 800c6b6:	bf42      	ittt	mi
 800c6b8:	6833      	ldrmi	r3, [r6, #0]
 800c6ba:	3302      	addmi	r3, #2
 800c6bc:	6033      	strmi	r3, [r6, #0]
 800c6be:	6825      	ldr	r5, [r4, #0]
 800c6c0:	f015 0506 	ands.w	r5, r5, #6
 800c6c4:	d106      	bne.n	800c6d4 <_printf_common+0x48>
 800c6c6:	f104 0a19 	add.w	sl, r4, #25
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	6832      	ldr	r2, [r6, #0]
 800c6ce:	1a9b      	subs	r3, r3, r2
 800c6d0:	42ab      	cmp	r3, r5
 800c6d2:	dc2b      	bgt.n	800c72c <_printf_common+0xa0>
 800c6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6d8:	6822      	ldr	r2, [r4, #0]
 800c6da:	3b00      	subs	r3, #0
 800c6dc:	bf18      	it	ne
 800c6de:	2301      	movne	r3, #1
 800c6e0:	0692      	lsls	r2, r2, #26
 800c6e2:	d430      	bmi.n	800c746 <_printf_common+0xba>
 800c6e4:	4641      	mov	r1, r8
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6ec:	47c8      	blx	r9
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d023      	beq.n	800c73a <_printf_common+0xae>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	6922      	ldr	r2, [r4, #16]
 800c6f6:	f003 0306 	and.w	r3, r3, #6
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	bf14      	ite	ne
 800c6fe:	2500      	movne	r5, #0
 800c700:	6833      	ldreq	r3, [r6, #0]
 800c702:	f04f 0600 	mov.w	r6, #0
 800c706:	bf08      	it	eq
 800c708:	68e5      	ldreq	r5, [r4, #12]
 800c70a:	f104 041a 	add.w	r4, r4, #26
 800c70e:	bf08      	it	eq
 800c710:	1aed      	subeq	r5, r5, r3
 800c712:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c716:	bf08      	it	eq
 800c718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c71c:	4293      	cmp	r3, r2
 800c71e:	bfc4      	itt	gt
 800c720:	1a9b      	subgt	r3, r3, r2
 800c722:	18ed      	addgt	r5, r5, r3
 800c724:	42b5      	cmp	r5, r6
 800c726:	d11a      	bne.n	800c75e <_printf_common+0xd2>
 800c728:	2000      	movs	r0, #0
 800c72a:	e008      	b.n	800c73e <_printf_common+0xb2>
 800c72c:	2301      	movs	r3, #1
 800c72e:	4652      	mov	r2, sl
 800c730:	4641      	mov	r1, r8
 800c732:	4638      	mov	r0, r7
 800c734:	47c8      	blx	r9
 800c736:	3001      	adds	r0, #1
 800c738:	d103      	bne.n	800c742 <_printf_common+0xb6>
 800c73a:	f04f 30ff 	mov.w	r0, #4294967295
 800c73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c742:	3501      	adds	r5, #1
 800c744:	e7c1      	b.n	800c6ca <_printf_common+0x3e>
 800c746:	2030      	movs	r0, #48	@ 0x30
 800c748:	18e1      	adds	r1, r4, r3
 800c74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c754:	4422      	add	r2, r4
 800c756:	3302      	adds	r3, #2
 800c758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c75c:	e7c2      	b.n	800c6e4 <_printf_common+0x58>
 800c75e:	2301      	movs	r3, #1
 800c760:	4622      	mov	r2, r4
 800c762:	4641      	mov	r1, r8
 800c764:	4638      	mov	r0, r7
 800c766:	47c8      	blx	r9
 800c768:	3001      	adds	r0, #1
 800c76a:	d0e6      	beq.n	800c73a <_printf_common+0xae>
 800c76c:	3601      	adds	r6, #1
 800c76e:	e7d9      	b.n	800c724 <_printf_common+0x98>

0800c770 <_printf_i>:
 800c770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	7e0f      	ldrb	r7, [r1, #24]
 800c776:	4691      	mov	r9, r2
 800c778:	2f78      	cmp	r7, #120	@ 0x78
 800c77a:	4680      	mov	r8, r0
 800c77c:	460c      	mov	r4, r1
 800c77e:	469a      	mov	sl, r3
 800c780:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c786:	d807      	bhi.n	800c798 <_printf_i+0x28>
 800c788:	2f62      	cmp	r7, #98	@ 0x62
 800c78a:	d80a      	bhi.n	800c7a2 <_printf_i+0x32>
 800c78c:	2f00      	cmp	r7, #0
 800c78e:	f000 80d1 	beq.w	800c934 <_printf_i+0x1c4>
 800c792:	2f58      	cmp	r7, #88	@ 0x58
 800c794:	f000 80b8 	beq.w	800c908 <_printf_i+0x198>
 800c798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7a0:	e03a      	b.n	800c818 <_printf_i+0xa8>
 800c7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7a6:	2b15      	cmp	r3, #21
 800c7a8:	d8f6      	bhi.n	800c798 <_printf_i+0x28>
 800c7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c7b0 <_printf_i+0x40>)
 800c7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7b0:	0800c809 	.word	0x0800c809
 800c7b4:	0800c81d 	.word	0x0800c81d
 800c7b8:	0800c799 	.word	0x0800c799
 800c7bc:	0800c799 	.word	0x0800c799
 800c7c0:	0800c799 	.word	0x0800c799
 800c7c4:	0800c799 	.word	0x0800c799
 800c7c8:	0800c81d 	.word	0x0800c81d
 800c7cc:	0800c799 	.word	0x0800c799
 800c7d0:	0800c799 	.word	0x0800c799
 800c7d4:	0800c799 	.word	0x0800c799
 800c7d8:	0800c799 	.word	0x0800c799
 800c7dc:	0800c91b 	.word	0x0800c91b
 800c7e0:	0800c847 	.word	0x0800c847
 800c7e4:	0800c8d5 	.word	0x0800c8d5
 800c7e8:	0800c799 	.word	0x0800c799
 800c7ec:	0800c799 	.word	0x0800c799
 800c7f0:	0800c93d 	.word	0x0800c93d
 800c7f4:	0800c799 	.word	0x0800c799
 800c7f8:	0800c847 	.word	0x0800c847
 800c7fc:	0800c799 	.word	0x0800c799
 800c800:	0800c799 	.word	0x0800c799
 800c804:	0800c8dd 	.word	0x0800c8dd
 800c808:	6833      	ldr	r3, [r6, #0]
 800c80a:	1d1a      	adds	r2, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6032      	str	r2, [r6, #0]
 800c810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c818:	2301      	movs	r3, #1
 800c81a:	e09c      	b.n	800c956 <_printf_i+0x1e6>
 800c81c:	6833      	ldr	r3, [r6, #0]
 800c81e:	6820      	ldr	r0, [r4, #0]
 800c820:	1d19      	adds	r1, r3, #4
 800c822:	6031      	str	r1, [r6, #0]
 800c824:	0606      	lsls	r6, r0, #24
 800c826:	d501      	bpl.n	800c82c <_printf_i+0xbc>
 800c828:	681d      	ldr	r5, [r3, #0]
 800c82a:	e003      	b.n	800c834 <_printf_i+0xc4>
 800c82c:	0645      	lsls	r5, r0, #25
 800c82e:	d5fb      	bpl.n	800c828 <_printf_i+0xb8>
 800c830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c834:	2d00      	cmp	r5, #0
 800c836:	da03      	bge.n	800c840 <_printf_i+0xd0>
 800c838:	232d      	movs	r3, #45	@ 0x2d
 800c83a:	426d      	negs	r5, r5
 800c83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c840:	230a      	movs	r3, #10
 800c842:	4858      	ldr	r0, [pc, #352]	@ (800c9a4 <_printf_i+0x234>)
 800c844:	e011      	b.n	800c86a <_printf_i+0xfa>
 800c846:	6821      	ldr	r1, [r4, #0]
 800c848:	6833      	ldr	r3, [r6, #0]
 800c84a:	0608      	lsls	r0, r1, #24
 800c84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c850:	d402      	bmi.n	800c858 <_printf_i+0xe8>
 800c852:	0649      	lsls	r1, r1, #25
 800c854:	bf48      	it	mi
 800c856:	b2ad      	uxthmi	r5, r5
 800c858:	2f6f      	cmp	r7, #111	@ 0x6f
 800c85a:	6033      	str	r3, [r6, #0]
 800c85c:	bf14      	ite	ne
 800c85e:	230a      	movne	r3, #10
 800c860:	2308      	moveq	r3, #8
 800c862:	4850      	ldr	r0, [pc, #320]	@ (800c9a4 <_printf_i+0x234>)
 800c864:	2100      	movs	r1, #0
 800c866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c86a:	6866      	ldr	r6, [r4, #4]
 800c86c:	2e00      	cmp	r6, #0
 800c86e:	60a6      	str	r6, [r4, #8]
 800c870:	db05      	blt.n	800c87e <_printf_i+0x10e>
 800c872:	6821      	ldr	r1, [r4, #0]
 800c874:	432e      	orrs	r6, r5
 800c876:	f021 0104 	bic.w	r1, r1, #4
 800c87a:	6021      	str	r1, [r4, #0]
 800c87c:	d04b      	beq.n	800c916 <_printf_i+0x1a6>
 800c87e:	4616      	mov	r6, r2
 800c880:	fbb5 f1f3 	udiv	r1, r5, r3
 800c884:	fb03 5711 	mls	r7, r3, r1, r5
 800c888:	5dc7      	ldrb	r7, [r0, r7]
 800c88a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c88e:	462f      	mov	r7, r5
 800c890:	42bb      	cmp	r3, r7
 800c892:	460d      	mov	r5, r1
 800c894:	d9f4      	bls.n	800c880 <_printf_i+0x110>
 800c896:	2b08      	cmp	r3, #8
 800c898:	d10b      	bne.n	800c8b2 <_printf_i+0x142>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	07df      	lsls	r7, r3, #31
 800c89e:	d508      	bpl.n	800c8b2 <_printf_i+0x142>
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	6861      	ldr	r1, [r4, #4]
 800c8a4:	4299      	cmp	r1, r3
 800c8a6:	bfde      	ittt	le
 800c8a8:	2330      	movle	r3, #48	@ 0x30
 800c8aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8b2:	1b92      	subs	r2, r2, r6
 800c8b4:	6122      	str	r2, [r4, #16]
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	f8cd a000 	str.w	sl, [sp]
 800c8c0:	aa03      	add	r2, sp, #12
 800c8c2:	f7ff fee3 	bl	800c68c <_printf_common>
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d14a      	bne.n	800c960 <_printf_i+0x1f0>
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	b004      	add	sp, #16
 800c8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	f043 0320 	orr.w	r3, r3, #32
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	2778      	movs	r7, #120	@ 0x78
 800c8de:	4832      	ldr	r0, [pc, #200]	@ (800c9a8 <_printf_i+0x238>)
 800c8e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	6831      	ldr	r1, [r6, #0]
 800c8e8:	061f      	lsls	r7, r3, #24
 800c8ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8ee:	d402      	bmi.n	800c8f6 <_printf_i+0x186>
 800c8f0:	065f      	lsls	r7, r3, #25
 800c8f2:	bf48      	it	mi
 800c8f4:	b2ad      	uxthmi	r5, r5
 800c8f6:	6031      	str	r1, [r6, #0]
 800c8f8:	07d9      	lsls	r1, r3, #31
 800c8fa:	bf44      	itt	mi
 800c8fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c900:	6023      	strmi	r3, [r4, #0]
 800c902:	b11d      	cbz	r5, 800c90c <_printf_i+0x19c>
 800c904:	2310      	movs	r3, #16
 800c906:	e7ad      	b.n	800c864 <_printf_i+0xf4>
 800c908:	4826      	ldr	r0, [pc, #152]	@ (800c9a4 <_printf_i+0x234>)
 800c90a:	e7e9      	b.n	800c8e0 <_printf_i+0x170>
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	f023 0320 	bic.w	r3, r3, #32
 800c912:	6023      	str	r3, [r4, #0]
 800c914:	e7f6      	b.n	800c904 <_printf_i+0x194>
 800c916:	4616      	mov	r6, r2
 800c918:	e7bd      	b.n	800c896 <_printf_i+0x126>
 800c91a:	6833      	ldr	r3, [r6, #0]
 800c91c:	6825      	ldr	r5, [r4, #0]
 800c91e:	1d18      	adds	r0, r3, #4
 800c920:	6961      	ldr	r1, [r4, #20]
 800c922:	6030      	str	r0, [r6, #0]
 800c924:	062e      	lsls	r6, r5, #24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	d501      	bpl.n	800c92e <_printf_i+0x1be>
 800c92a:	6019      	str	r1, [r3, #0]
 800c92c:	e002      	b.n	800c934 <_printf_i+0x1c4>
 800c92e:	0668      	lsls	r0, r5, #25
 800c930:	d5fb      	bpl.n	800c92a <_printf_i+0x1ba>
 800c932:	8019      	strh	r1, [r3, #0]
 800c934:	2300      	movs	r3, #0
 800c936:	4616      	mov	r6, r2
 800c938:	6123      	str	r3, [r4, #16]
 800c93a:	e7bc      	b.n	800c8b6 <_printf_i+0x146>
 800c93c:	6833      	ldr	r3, [r6, #0]
 800c93e:	2100      	movs	r1, #0
 800c940:	1d1a      	adds	r2, r3, #4
 800c942:	6032      	str	r2, [r6, #0]
 800c944:	681e      	ldr	r6, [r3, #0]
 800c946:	6862      	ldr	r2, [r4, #4]
 800c948:	4630      	mov	r0, r6
 800c94a:	f000 fb98 	bl	800d07e <memchr>
 800c94e:	b108      	cbz	r0, 800c954 <_printf_i+0x1e4>
 800c950:	1b80      	subs	r0, r0, r6
 800c952:	6060      	str	r0, [r4, #4]
 800c954:	6863      	ldr	r3, [r4, #4]
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	2300      	movs	r3, #0
 800c95a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c95e:	e7aa      	b.n	800c8b6 <_printf_i+0x146>
 800c960:	4632      	mov	r2, r6
 800c962:	4649      	mov	r1, r9
 800c964:	4640      	mov	r0, r8
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	47d0      	blx	sl
 800c96a:	3001      	adds	r0, #1
 800c96c:	d0ad      	beq.n	800c8ca <_printf_i+0x15a>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	079b      	lsls	r3, r3, #30
 800c972:	d413      	bmi.n	800c99c <_printf_i+0x22c>
 800c974:	68e0      	ldr	r0, [r4, #12]
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	4298      	cmp	r0, r3
 800c97a:	bfb8      	it	lt
 800c97c:	4618      	movlt	r0, r3
 800c97e:	e7a6      	b.n	800c8ce <_printf_i+0x15e>
 800c980:	2301      	movs	r3, #1
 800c982:	4632      	mov	r2, r6
 800c984:	4649      	mov	r1, r9
 800c986:	4640      	mov	r0, r8
 800c988:	47d0      	blx	sl
 800c98a:	3001      	adds	r0, #1
 800c98c:	d09d      	beq.n	800c8ca <_printf_i+0x15a>
 800c98e:	3501      	adds	r5, #1
 800c990:	68e3      	ldr	r3, [r4, #12]
 800c992:	9903      	ldr	r1, [sp, #12]
 800c994:	1a5b      	subs	r3, r3, r1
 800c996:	42ab      	cmp	r3, r5
 800c998:	dcf2      	bgt.n	800c980 <_printf_i+0x210>
 800c99a:	e7eb      	b.n	800c974 <_printf_i+0x204>
 800c99c:	2500      	movs	r5, #0
 800c99e:	f104 0619 	add.w	r6, r4, #25
 800c9a2:	e7f5      	b.n	800c990 <_printf_i+0x220>
 800c9a4:	0800f7ed 	.word	0x0800f7ed
 800c9a8:	0800f7fe 	.word	0x0800f7fe

0800c9ac <std>:
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	b510      	push	{r4, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9ba:	6083      	str	r3, [r0, #8]
 800c9bc:	8181      	strh	r1, [r0, #12]
 800c9be:	6643      	str	r3, [r0, #100]	@ 0x64
 800c9c0:	81c2      	strh	r2, [r0, #14]
 800c9c2:	6183      	str	r3, [r0, #24]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	305c      	adds	r0, #92	@ 0x5c
 800c9ca:	f000 fa49 	bl	800ce60 <memset>
 800c9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800ca04 <std+0x58>)
 800c9d0:	6224      	str	r4, [r4, #32]
 800c9d2:	6263      	str	r3, [r4, #36]	@ 0x24
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800ca08 <std+0x5c>)
 800c9d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800ca0c <std+0x60>)
 800c9da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c9dc:	4b0c      	ldr	r3, [pc, #48]	@ (800ca10 <std+0x64>)
 800c9de:	6323      	str	r3, [r4, #48]	@ 0x30
 800c9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800ca14 <std+0x68>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	d006      	beq.n	800c9f4 <std+0x48>
 800c9e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c9ea:	4294      	cmp	r4, r2
 800c9ec:	d002      	beq.n	800c9f4 <std+0x48>
 800c9ee:	33d0      	adds	r3, #208	@ 0xd0
 800c9f0:	429c      	cmp	r4, r3
 800c9f2:	d105      	bne.n	800ca00 <std+0x54>
 800c9f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9fc:	f000 bb3c 	b.w	800d078 <__retarget_lock_init_recursive>
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	0800cc7d 	.word	0x0800cc7d
 800ca08:	0800cc9f 	.word	0x0800cc9f
 800ca0c:	0800ccd7 	.word	0x0800ccd7
 800ca10:	0800ccfb 	.word	0x0800ccfb
 800ca14:	20000738 	.word	0x20000738

0800ca18 <stdio_exit_handler>:
 800ca18:	4a02      	ldr	r2, [pc, #8]	@ (800ca24 <stdio_exit_handler+0xc>)
 800ca1a:	4903      	ldr	r1, [pc, #12]	@ (800ca28 <stdio_exit_handler+0x10>)
 800ca1c:	4803      	ldr	r0, [pc, #12]	@ (800ca2c <stdio_exit_handler+0x14>)
 800ca1e:	f000 b869 	b.w	800caf4 <_fwalk_sglue>
 800ca22:	bf00      	nop
 800ca24:	20000068 	.word	0x20000068
 800ca28:	0800ecb1 	.word	0x0800ecb1
 800ca2c:	20000078 	.word	0x20000078

0800ca30 <cleanup_stdio>:
 800ca30:	6841      	ldr	r1, [r0, #4]
 800ca32:	4b0c      	ldr	r3, [pc, #48]	@ (800ca64 <cleanup_stdio+0x34>)
 800ca34:	b510      	push	{r4, lr}
 800ca36:	4299      	cmp	r1, r3
 800ca38:	4604      	mov	r4, r0
 800ca3a:	d001      	beq.n	800ca40 <cleanup_stdio+0x10>
 800ca3c:	f002 f938 	bl	800ecb0 <_fflush_r>
 800ca40:	68a1      	ldr	r1, [r4, #8]
 800ca42:	4b09      	ldr	r3, [pc, #36]	@ (800ca68 <cleanup_stdio+0x38>)
 800ca44:	4299      	cmp	r1, r3
 800ca46:	d002      	beq.n	800ca4e <cleanup_stdio+0x1e>
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f002 f931 	bl	800ecb0 <_fflush_r>
 800ca4e:	68e1      	ldr	r1, [r4, #12]
 800ca50:	4b06      	ldr	r3, [pc, #24]	@ (800ca6c <cleanup_stdio+0x3c>)
 800ca52:	4299      	cmp	r1, r3
 800ca54:	d004      	beq.n	800ca60 <cleanup_stdio+0x30>
 800ca56:	4620      	mov	r0, r4
 800ca58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca5c:	f002 b928 	b.w	800ecb0 <_fflush_r>
 800ca60:	bd10      	pop	{r4, pc}
 800ca62:	bf00      	nop
 800ca64:	20000738 	.word	0x20000738
 800ca68:	200007a0 	.word	0x200007a0
 800ca6c:	20000808 	.word	0x20000808

0800ca70 <global_stdio_init.part.0>:
 800ca70:	b510      	push	{r4, lr}
 800ca72:	4b0b      	ldr	r3, [pc, #44]	@ (800caa0 <global_stdio_init.part.0+0x30>)
 800ca74:	4c0b      	ldr	r4, [pc, #44]	@ (800caa4 <global_stdio_init.part.0+0x34>)
 800ca76:	4a0c      	ldr	r2, [pc, #48]	@ (800caa8 <global_stdio_init.part.0+0x38>)
 800ca78:	4620      	mov	r0, r4
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	2104      	movs	r1, #4
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f7ff ff94 	bl	800c9ac <std>
 800ca84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca88:	2201      	movs	r2, #1
 800ca8a:	2109      	movs	r1, #9
 800ca8c:	f7ff ff8e 	bl	800c9ac <std>
 800ca90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca94:	2202      	movs	r2, #2
 800ca96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca9a:	2112      	movs	r1, #18
 800ca9c:	f7ff bf86 	b.w	800c9ac <std>
 800caa0:	20000870 	.word	0x20000870
 800caa4:	20000738 	.word	0x20000738
 800caa8:	0800ca19 	.word	0x0800ca19

0800caac <__sfp_lock_acquire>:
 800caac:	4801      	ldr	r0, [pc, #4]	@ (800cab4 <__sfp_lock_acquire+0x8>)
 800caae:	f000 bae4 	b.w	800d07a <__retarget_lock_acquire_recursive>
 800cab2:	bf00      	nop
 800cab4:	20000879 	.word	0x20000879

0800cab8 <__sfp_lock_release>:
 800cab8:	4801      	ldr	r0, [pc, #4]	@ (800cac0 <__sfp_lock_release+0x8>)
 800caba:	f000 badf 	b.w	800d07c <__retarget_lock_release_recursive>
 800cabe:	bf00      	nop
 800cac0:	20000879 	.word	0x20000879

0800cac4 <__sinit>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	4604      	mov	r4, r0
 800cac8:	f7ff fff0 	bl	800caac <__sfp_lock_acquire>
 800cacc:	6a23      	ldr	r3, [r4, #32]
 800cace:	b11b      	cbz	r3, 800cad8 <__sinit+0x14>
 800cad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cad4:	f7ff bff0 	b.w	800cab8 <__sfp_lock_release>
 800cad8:	4b04      	ldr	r3, [pc, #16]	@ (800caec <__sinit+0x28>)
 800cada:	6223      	str	r3, [r4, #32]
 800cadc:	4b04      	ldr	r3, [pc, #16]	@ (800caf0 <__sinit+0x2c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1f5      	bne.n	800cad0 <__sinit+0xc>
 800cae4:	f7ff ffc4 	bl	800ca70 <global_stdio_init.part.0>
 800cae8:	e7f2      	b.n	800cad0 <__sinit+0xc>
 800caea:	bf00      	nop
 800caec:	0800ca31 	.word	0x0800ca31
 800caf0:	20000870 	.word	0x20000870

0800caf4 <_fwalk_sglue>:
 800caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	4607      	mov	r7, r0
 800cafa:	4688      	mov	r8, r1
 800cafc:	4614      	mov	r4, r2
 800cafe:	2600      	movs	r6, #0
 800cb00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb04:	f1b9 0901 	subs.w	r9, r9, #1
 800cb08:	d505      	bpl.n	800cb16 <_fwalk_sglue+0x22>
 800cb0a:	6824      	ldr	r4, [r4, #0]
 800cb0c:	2c00      	cmp	r4, #0
 800cb0e:	d1f7      	bne.n	800cb00 <_fwalk_sglue+0xc>
 800cb10:	4630      	mov	r0, r6
 800cb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d907      	bls.n	800cb2c <_fwalk_sglue+0x38>
 800cb1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb20:	3301      	adds	r3, #1
 800cb22:	d003      	beq.n	800cb2c <_fwalk_sglue+0x38>
 800cb24:	4629      	mov	r1, r5
 800cb26:	4638      	mov	r0, r7
 800cb28:	47c0      	blx	r8
 800cb2a:	4306      	orrs	r6, r0
 800cb2c:	3568      	adds	r5, #104	@ 0x68
 800cb2e:	e7e9      	b.n	800cb04 <_fwalk_sglue+0x10>

0800cb30 <iprintf>:
 800cb30:	b40f      	push	{r0, r1, r2, r3}
 800cb32:	b507      	push	{r0, r1, r2, lr}
 800cb34:	4906      	ldr	r1, [pc, #24]	@ (800cb50 <iprintf+0x20>)
 800cb36:	ab04      	add	r3, sp, #16
 800cb38:	6808      	ldr	r0, [r1, #0]
 800cb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3e:	6881      	ldr	r1, [r0, #8]
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	f001 ff1d 	bl	800e980 <_vfiprintf_r>
 800cb46:	b003      	add	sp, #12
 800cb48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb4c:	b004      	add	sp, #16
 800cb4e:	4770      	bx	lr
 800cb50:	20000074 	.word	0x20000074

0800cb54 <_puts_r>:
 800cb54:	6a03      	ldr	r3, [r0, #32]
 800cb56:	b570      	push	{r4, r5, r6, lr}
 800cb58:	4605      	mov	r5, r0
 800cb5a:	460e      	mov	r6, r1
 800cb5c:	6884      	ldr	r4, [r0, #8]
 800cb5e:	b90b      	cbnz	r3, 800cb64 <_puts_r+0x10>
 800cb60:	f7ff ffb0 	bl	800cac4 <__sinit>
 800cb64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb66:	07db      	lsls	r3, r3, #31
 800cb68:	d405      	bmi.n	800cb76 <_puts_r+0x22>
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	0598      	lsls	r0, r3, #22
 800cb6e:	d402      	bmi.n	800cb76 <_puts_r+0x22>
 800cb70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb72:	f000 fa82 	bl	800d07a <__retarget_lock_acquire_recursive>
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	0719      	lsls	r1, r3, #28
 800cb7a:	d502      	bpl.n	800cb82 <_puts_r+0x2e>
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d135      	bne.n	800cbee <_puts_r+0x9a>
 800cb82:	4621      	mov	r1, r4
 800cb84:	4628      	mov	r0, r5
 800cb86:	f000 f8fb 	bl	800cd80 <__swsetup_r>
 800cb8a:	b380      	cbz	r0, 800cbee <_puts_r+0x9a>
 800cb8c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb92:	07da      	lsls	r2, r3, #31
 800cb94:	d405      	bmi.n	800cba2 <_puts_r+0x4e>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	059b      	lsls	r3, r3, #22
 800cb9a:	d402      	bmi.n	800cba2 <_puts_r+0x4e>
 800cb9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb9e:	f000 fa6d 	bl	800d07c <__retarget_lock_release_recursive>
 800cba2:	4628      	mov	r0, r5
 800cba4:	bd70      	pop	{r4, r5, r6, pc}
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da04      	bge.n	800cbb4 <_puts_r+0x60>
 800cbaa:	69a2      	ldr	r2, [r4, #24]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	dc17      	bgt.n	800cbe0 <_puts_r+0x8c>
 800cbb0:	290a      	cmp	r1, #10
 800cbb2:	d015      	beq.n	800cbe0 <_puts_r+0x8c>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	6022      	str	r2, [r4, #0]
 800cbba:	7019      	strb	r1, [r3, #0]
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	60a3      	str	r3, [r4, #8]
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	d1ed      	bne.n	800cba6 <_puts_r+0x52>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	da11      	bge.n	800cbf2 <_puts_r+0x9e>
 800cbce:	4622      	mov	r2, r4
 800cbd0:	210a      	movs	r1, #10
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 f895 	bl	800cd02 <__swbuf_r>
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d0d7      	beq.n	800cb8c <_puts_r+0x38>
 800cbdc:	250a      	movs	r5, #10
 800cbde:	e7d7      	b.n	800cb90 <_puts_r+0x3c>
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f000 f88d 	bl	800cd02 <__swbuf_r>
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d1e7      	bne.n	800cbbc <_puts_r+0x68>
 800cbec:	e7ce      	b.n	800cb8c <_puts_r+0x38>
 800cbee:	3e01      	subs	r6, #1
 800cbf0:	e7e4      	b.n	800cbbc <_puts_r+0x68>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	6022      	str	r2, [r4, #0]
 800cbf8:	220a      	movs	r2, #10
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	e7ee      	b.n	800cbdc <_puts_r+0x88>
	...

0800cc00 <puts>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	@ (800cc0c <puts+0xc>)
 800cc02:	4601      	mov	r1, r0
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f7ff bfa5 	b.w	800cb54 <_puts_r>
 800cc0a:	bf00      	nop
 800cc0c:	20000074 	.word	0x20000074

0800cc10 <sniprintf>:
 800cc10:	b40c      	push	{r2, r3}
 800cc12:	b530      	push	{r4, r5, lr}
 800cc14:	4b18      	ldr	r3, [pc, #96]	@ (800cc78 <sniprintf+0x68>)
 800cc16:	1e0c      	subs	r4, r1, #0
 800cc18:	681d      	ldr	r5, [r3, #0]
 800cc1a:	b09d      	sub	sp, #116	@ 0x74
 800cc1c:	da08      	bge.n	800cc30 <sniprintf+0x20>
 800cc1e:	238b      	movs	r3, #139	@ 0x8b
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	b01d      	add	sp, #116	@ 0x74
 800cc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc2c:	b002      	add	sp, #8
 800cc2e:	4770      	bx	lr
 800cc30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc38:	f04f 0300 	mov.w	r3, #0
 800cc3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cc3e:	bf0c      	ite	eq
 800cc40:	4623      	moveq	r3, r4
 800cc42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc46:	9304      	str	r3, [sp, #16]
 800cc48:	9307      	str	r3, [sp, #28]
 800cc4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc4e:	9002      	str	r0, [sp, #8]
 800cc50:	9006      	str	r0, [sp, #24]
 800cc52:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc56:	4628      	mov	r0, r5
 800cc58:	ab21      	add	r3, sp, #132	@ 0x84
 800cc5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cc5c:	a902      	add	r1, sp, #8
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	f001 fd6a 	bl	800e738 <_svfiprintf_r>
 800cc64:	1c43      	adds	r3, r0, #1
 800cc66:	bfbc      	itt	lt
 800cc68:	238b      	movlt	r3, #139	@ 0x8b
 800cc6a:	602b      	strlt	r3, [r5, #0]
 800cc6c:	2c00      	cmp	r4, #0
 800cc6e:	d0da      	beq.n	800cc26 <sniprintf+0x16>
 800cc70:	2200      	movs	r2, #0
 800cc72:	9b02      	ldr	r3, [sp, #8]
 800cc74:	701a      	strb	r2, [r3, #0]
 800cc76:	e7d6      	b.n	800cc26 <sniprintf+0x16>
 800cc78:	20000074 	.word	0x20000074

0800cc7c <__sread>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	460c      	mov	r4, r1
 800cc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc84:	f000 f9aa 	bl	800cfdc <_read_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	bfab      	itete	ge
 800cc8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc8e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc90:	181b      	addge	r3, r3, r0
 800cc92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc96:	bfac      	ite	ge
 800cc98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc9a:	81a3      	strhlt	r3, [r4, #12]
 800cc9c:	bd10      	pop	{r4, pc}

0800cc9e <__swrite>:
 800cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca2:	461f      	mov	r7, r3
 800cca4:	898b      	ldrh	r3, [r1, #12]
 800cca6:	4605      	mov	r5, r0
 800cca8:	05db      	lsls	r3, r3, #23
 800ccaa:	460c      	mov	r4, r1
 800ccac:	4616      	mov	r6, r2
 800ccae:	d505      	bpl.n	800ccbc <__swrite+0x1e>
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	f000 f97e 	bl	800cfb8 <_lseek_r>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	463b      	mov	r3, r7
 800ccca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd2:	f000 b995 	b.w	800d000 <_write_r>

0800ccd6 <__sseek>:
 800ccd6:	b510      	push	{r4, lr}
 800ccd8:	460c      	mov	r4, r1
 800ccda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccde:	f000 f96b 	bl	800cfb8 <_lseek_r>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	bf15      	itete	ne
 800cce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ccea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ccee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccf2:	81a3      	strheq	r3, [r4, #12]
 800ccf4:	bf18      	it	ne
 800ccf6:	81a3      	strhne	r3, [r4, #12]
 800ccf8:	bd10      	pop	{r4, pc}

0800ccfa <__sclose>:
 800ccfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfe:	f000 b94b 	b.w	800cf98 <_close_r>

0800cd02 <__swbuf_r>:
 800cd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd04:	460e      	mov	r6, r1
 800cd06:	4614      	mov	r4, r2
 800cd08:	4605      	mov	r5, r0
 800cd0a:	b118      	cbz	r0, 800cd14 <__swbuf_r+0x12>
 800cd0c:	6a03      	ldr	r3, [r0, #32]
 800cd0e:	b90b      	cbnz	r3, 800cd14 <__swbuf_r+0x12>
 800cd10:	f7ff fed8 	bl	800cac4 <__sinit>
 800cd14:	69a3      	ldr	r3, [r4, #24]
 800cd16:	60a3      	str	r3, [r4, #8]
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	071a      	lsls	r2, r3, #28
 800cd1c:	d501      	bpl.n	800cd22 <__swbuf_r+0x20>
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	b943      	cbnz	r3, 800cd34 <__swbuf_r+0x32>
 800cd22:	4621      	mov	r1, r4
 800cd24:	4628      	mov	r0, r5
 800cd26:	f000 f82b 	bl	800cd80 <__swsetup_r>
 800cd2a:	b118      	cbz	r0, 800cd34 <__swbuf_r+0x32>
 800cd2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd30:	4638      	mov	r0, r7
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd34:	6823      	ldr	r3, [r4, #0]
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	b2f6      	uxtb	r6, r6
 800cd3a:	1a98      	subs	r0, r3, r2
 800cd3c:	6963      	ldr	r3, [r4, #20]
 800cd3e:	4637      	mov	r7, r6
 800cd40:	4283      	cmp	r3, r0
 800cd42:	dc05      	bgt.n	800cd50 <__swbuf_r+0x4e>
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f001 ffb2 	bl	800ecb0 <_fflush_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d1ed      	bne.n	800cd2c <__swbuf_r+0x2a>
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	60a3      	str	r3, [r4, #8]
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	6022      	str	r2, [r4, #0]
 800cd5c:	701e      	strb	r6, [r3, #0]
 800cd5e:	6962      	ldr	r2, [r4, #20]
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d004      	beq.n	800cd70 <__swbuf_r+0x6e>
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	07db      	lsls	r3, r3, #31
 800cd6a:	d5e1      	bpl.n	800cd30 <__swbuf_r+0x2e>
 800cd6c:	2e0a      	cmp	r6, #10
 800cd6e:	d1df      	bne.n	800cd30 <__swbuf_r+0x2e>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f001 ff9c 	bl	800ecb0 <_fflush_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d0d9      	beq.n	800cd30 <__swbuf_r+0x2e>
 800cd7c:	e7d6      	b.n	800cd2c <__swbuf_r+0x2a>
	...

0800cd80 <__swsetup_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4b29      	ldr	r3, [pc, #164]	@ (800ce28 <__swsetup_r+0xa8>)
 800cd84:	4605      	mov	r5, r0
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	460c      	mov	r4, r1
 800cd8a:	b118      	cbz	r0, 800cd94 <__swsetup_r+0x14>
 800cd8c:	6a03      	ldr	r3, [r0, #32]
 800cd8e:	b90b      	cbnz	r3, 800cd94 <__swsetup_r+0x14>
 800cd90:	f7ff fe98 	bl	800cac4 <__sinit>
 800cd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd98:	0719      	lsls	r1, r3, #28
 800cd9a:	d422      	bmi.n	800cde2 <__swsetup_r+0x62>
 800cd9c:	06da      	lsls	r2, r3, #27
 800cd9e:	d407      	bmi.n	800cdb0 <__swsetup_r+0x30>
 800cda0:	2209      	movs	r2, #9
 800cda2:	602a      	str	r2, [r5, #0]
 800cda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdac:	81a3      	strh	r3, [r4, #12]
 800cdae:	e033      	b.n	800ce18 <__swsetup_r+0x98>
 800cdb0:	0758      	lsls	r0, r3, #29
 800cdb2:	d512      	bpl.n	800cdda <__swsetup_r+0x5a>
 800cdb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdb6:	b141      	cbz	r1, 800cdca <__swsetup_r+0x4a>
 800cdb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdbc:	4299      	cmp	r1, r3
 800cdbe:	d002      	beq.n	800cdc6 <__swsetup_r+0x46>
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 ffe5 	bl	800dd90 <_free_r>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	b94b      	cbnz	r3, 800cdfa <__swsetup_r+0x7a>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cdec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdf0:	d003      	beq.n	800cdfa <__swsetup_r+0x7a>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f001 ffba 	bl	800ed6e <__smakebuf_r>
 800cdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfe:	f013 0201 	ands.w	r2, r3, #1
 800ce02:	d00a      	beq.n	800ce1a <__swsetup_r+0x9a>
 800ce04:	2200      	movs	r2, #0
 800ce06:	60a2      	str	r2, [r4, #8]
 800ce08:	6962      	ldr	r2, [r4, #20]
 800ce0a:	4252      	negs	r2, r2
 800ce0c:	61a2      	str	r2, [r4, #24]
 800ce0e:	6922      	ldr	r2, [r4, #16]
 800ce10:	b942      	cbnz	r2, 800ce24 <__swsetup_r+0xa4>
 800ce12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce16:	d1c5      	bne.n	800cda4 <__swsetup_r+0x24>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	0799      	lsls	r1, r3, #30
 800ce1c:	bf58      	it	pl
 800ce1e:	6962      	ldrpl	r2, [r4, #20]
 800ce20:	60a2      	str	r2, [r4, #8]
 800ce22:	e7f4      	b.n	800ce0e <__swsetup_r+0x8e>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e7f7      	b.n	800ce18 <__swsetup_r+0x98>
 800ce28:	20000074 	.word	0x20000074

0800ce2c <memmove>:
 800ce2c:	4288      	cmp	r0, r1
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	eb01 0402 	add.w	r4, r1, r2
 800ce34:	d902      	bls.n	800ce3c <memmove+0x10>
 800ce36:	4284      	cmp	r4, r0
 800ce38:	4623      	mov	r3, r4
 800ce3a:	d807      	bhi.n	800ce4c <memmove+0x20>
 800ce3c:	1e43      	subs	r3, r0, #1
 800ce3e:	42a1      	cmp	r1, r4
 800ce40:	d008      	beq.n	800ce54 <memmove+0x28>
 800ce42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce4a:	e7f8      	b.n	800ce3e <memmove+0x12>
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4402      	add	r2, r0
 800ce50:	428a      	cmp	r2, r1
 800ce52:	d100      	bne.n	800ce56 <memmove+0x2a>
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce5e:	e7f7      	b.n	800ce50 <memmove+0x24>

0800ce60 <memset>:
 800ce60:	4603      	mov	r3, r0
 800ce62:	4402      	add	r2, r0
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <strchr>:
 800ce70:	4603      	mov	r3, r0
 800ce72:	b2c9      	uxtb	r1, r1
 800ce74:	4618      	mov	r0, r3
 800ce76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7a:	b112      	cbz	r2, 800ce82 <strchr+0x12>
 800ce7c:	428a      	cmp	r2, r1
 800ce7e:	d1f9      	bne.n	800ce74 <strchr+0x4>
 800ce80:	4770      	bx	lr
 800ce82:	2900      	cmp	r1, #0
 800ce84:	bf18      	it	ne
 800ce86:	2000      	movne	r0, #0
 800ce88:	4770      	bx	lr

0800ce8a <strncat>:
 800ce8a:	b530      	push	{r4, r5, lr}
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	7825      	ldrb	r5, [r4, #0]
 800ce90:	4623      	mov	r3, r4
 800ce92:	3401      	adds	r4, #1
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	d1fa      	bne.n	800ce8e <strncat+0x4>
 800ce98:	3a01      	subs	r2, #1
 800ce9a:	d304      	bcc.n	800cea6 <strncat+0x1c>
 800ce9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cea0:	f803 4b01 	strb.w	r4, [r3], #1
 800cea4:	b904      	cbnz	r4, 800cea8 <strncat+0x1e>
 800cea6:	bd30      	pop	{r4, r5, pc}
 800cea8:	2a00      	cmp	r2, #0
 800ceaa:	d1f5      	bne.n	800ce98 <strncat+0xe>
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	e7f3      	b.n	800ce98 <strncat+0xe>

0800ceb0 <strncpy>:
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	3901      	subs	r1, #1
 800ceb6:	b132      	cbz	r2, 800cec6 <strncpy+0x16>
 800ceb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cebc:	3a01      	subs	r2, #1
 800cebe:	f803 4b01 	strb.w	r4, [r3], #1
 800cec2:	2c00      	cmp	r4, #0
 800cec4:	d1f7      	bne.n	800ceb6 <strncpy+0x6>
 800cec6:	2100      	movs	r1, #0
 800cec8:	441a      	add	r2, r3
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d100      	bne.n	800ced0 <strncpy+0x20>
 800cece:	bd10      	pop	{r4, pc}
 800ced0:	f803 1b01 	strb.w	r1, [r3], #1
 800ced4:	e7f9      	b.n	800ceca <strncpy+0x1a>
	...

0800ced8 <strtok>:
 800ced8:	4b16      	ldr	r3, [pc, #88]	@ (800cf34 <strtok+0x5c>)
 800ceda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cede:	681f      	ldr	r7, [r3, #0]
 800cee0:	4605      	mov	r5, r0
 800cee2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cee4:	460e      	mov	r6, r1
 800cee6:	b9ec      	cbnz	r4, 800cf24 <strtok+0x4c>
 800cee8:	2050      	movs	r0, #80	@ 0x50
 800ceea:	f000 ff99 	bl	800de20 <malloc>
 800ceee:	4602      	mov	r2, r0
 800cef0:	6478      	str	r0, [r7, #68]	@ 0x44
 800cef2:	b920      	cbnz	r0, 800cefe <strtok+0x26>
 800cef4:	215b      	movs	r1, #91	@ 0x5b
 800cef6:	4b10      	ldr	r3, [pc, #64]	@ (800cf38 <strtok+0x60>)
 800cef8:	4810      	ldr	r0, [pc, #64]	@ (800cf3c <strtok+0x64>)
 800cefa:	f000 f8cf 	bl	800d09c <__assert_func>
 800cefe:	e9c0 4400 	strd	r4, r4, [r0]
 800cf02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cf06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cf0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cf0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cf12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cf16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cf1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cf1e:	6184      	str	r4, [r0, #24]
 800cf20:	7704      	strb	r4, [r0, #28]
 800cf22:	6244      	str	r4, [r0, #36]	@ 0x24
 800cf24:	4631      	mov	r1, r6
 800cf26:	4628      	mov	r0, r5
 800cf28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf30:	f000 b806 	b.w	800cf40 <__strtok_r>
 800cf34:	20000074 	.word	0x20000074
 800cf38:	0800f80f 	.word	0x0800f80f
 800cf3c:	0800f826 	.word	0x0800f826

0800cf40 <__strtok_r>:
 800cf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf42:	4604      	mov	r4, r0
 800cf44:	b908      	cbnz	r0, 800cf4a <__strtok_r+0xa>
 800cf46:	6814      	ldr	r4, [r2, #0]
 800cf48:	b144      	cbz	r4, 800cf5c <__strtok_r+0x1c>
 800cf4a:	460f      	mov	r7, r1
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cf52:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cf56:	b91e      	cbnz	r6, 800cf60 <__strtok_r+0x20>
 800cf58:	b965      	cbnz	r5, 800cf74 <__strtok_r+0x34>
 800cf5a:	6015      	str	r5, [r2, #0]
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e005      	b.n	800cf6c <__strtok_r+0x2c>
 800cf60:	42b5      	cmp	r5, r6
 800cf62:	d1f6      	bne.n	800cf52 <__strtok_r+0x12>
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1f0      	bne.n	800cf4a <__strtok_r+0xa>
 800cf68:	6014      	str	r4, [r2, #0]
 800cf6a:	7003      	strb	r3, [r0, #0]
 800cf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6e:	461c      	mov	r4, r3
 800cf70:	e00c      	b.n	800cf8c <__strtok_r+0x4c>
 800cf72:	b91d      	cbnz	r5, 800cf7c <__strtok_r+0x3c>
 800cf74:	460e      	mov	r6, r1
 800cf76:	4627      	mov	r7, r4
 800cf78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf7c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	d1f6      	bne.n	800cf72 <__strtok_r+0x32>
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0f2      	beq.n	800cf6e <__strtok_r+0x2e>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	703b      	strb	r3, [r7, #0]
 800cf8c:	6014      	str	r4, [r2, #0]
 800cf8e:	e7ed      	b.n	800cf6c <__strtok_r+0x2c>

0800cf90 <_localeconv_r>:
 800cf90:	4800      	ldr	r0, [pc, #0]	@ (800cf94 <_localeconv_r+0x4>)
 800cf92:	4770      	bx	lr
 800cf94:	200001b4 	.word	0x200001b4

0800cf98 <_close_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4d05      	ldr	r5, [pc, #20]	@ (800cfb4 <_close_r+0x1c>)
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	602b      	str	r3, [r5, #0]
 800cfa4:	f7f8 fd47 	bl	8005a36 <_close>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d102      	bne.n	800cfb2 <_close_r+0x1a>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	b103      	cbz	r3, 800cfb2 <_close_r+0x1a>
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	20000874 	.word	0x20000874

0800cfb8 <_lseek_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4d05      	ldr	r5, [pc, #20]	@ (800cfd8 <_lseek_r+0x20>)
 800cfc4:	602a      	str	r2, [r5, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	f7f8 fd59 	bl	8005a7e <_lseek>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d102      	bne.n	800cfd6 <_lseek_r+0x1e>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	b103      	cbz	r3, 800cfd6 <_lseek_r+0x1e>
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	20000874 	.word	0x20000874

0800cfdc <_read_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4d05      	ldr	r5, [pc, #20]	@ (800cffc <_read_r+0x20>)
 800cfe8:	602a      	str	r2, [r5, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f7f8 fcea 	bl	80059c4 <_read>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_read_r+0x1e>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_read_r+0x1e>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	20000874 	.word	0x20000874

0800d000 <_write_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	4611      	mov	r1, r2
 800d008:	2200      	movs	r2, #0
 800d00a:	4d05      	ldr	r5, [pc, #20]	@ (800d020 <_write_r+0x20>)
 800d00c:	602a      	str	r2, [r5, #0]
 800d00e:	461a      	mov	r2, r3
 800d010:	f7f8 fcf5 	bl	80059fe <_write>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_write_r+0x1e>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_write_r+0x1e>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	20000874 	.word	0x20000874

0800d024 <__errno>:
 800d024:	4b01      	ldr	r3, [pc, #4]	@ (800d02c <__errno+0x8>)
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	20000074 	.word	0x20000074

0800d030 <__libc_init_array>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	2600      	movs	r6, #0
 800d034:	4d0c      	ldr	r5, [pc, #48]	@ (800d068 <__libc_init_array+0x38>)
 800d036:	4c0d      	ldr	r4, [pc, #52]	@ (800d06c <__libc_init_array+0x3c>)
 800d038:	1b64      	subs	r4, r4, r5
 800d03a:	10a4      	asrs	r4, r4, #2
 800d03c:	42a6      	cmp	r6, r4
 800d03e:	d109      	bne.n	800d054 <__libc_init_array+0x24>
 800d040:	f001 ffc6 	bl	800efd0 <_init>
 800d044:	2600      	movs	r6, #0
 800d046:	4d0a      	ldr	r5, [pc, #40]	@ (800d070 <__libc_init_array+0x40>)
 800d048:	4c0a      	ldr	r4, [pc, #40]	@ (800d074 <__libc_init_array+0x44>)
 800d04a:	1b64      	subs	r4, r4, r5
 800d04c:	10a4      	asrs	r4, r4, #2
 800d04e:	42a6      	cmp	r6, r4
 800d050:	d105      	bne.n	800d05e <__libc_init_array+0x2e>
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	f855 3b04 	ldr.w	r3, [r5], #4
 800d058:	4798      	blx	r3
 800d05a:	3601      	adds	r6, #1
 800d05c:	e7ee      	b.n	800d03c <__libc_init_array+0xc>
 800d05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d062:	4798      	blx	r3
 800d064:	3601      	adds	r6, #1
 800d066:	e7f2      	b.n	800d04e <__libc_init_array+0x1e>
 800d068:	0800fab0 	.word	0x0800fab0
 800d06c:	0800fab0 	.word	0x0800fab0
 800d070:	0800fab0 	.word	0x0800fab0
 800d074:	0800fab4 	.word	0x0800fab4

0800d078 <__retarget_lock_init_recursive>:
 800d078:	4770      	bx	lr

0800d07a <__retarget_lock_acquire_recursive>:
 800d07a:	4770      	bx	lr

0800d07c <__retarget_lock_release_recursive>:
 800d07c:	4770      	bx	lr

0800d07e <memchr>:
 800d07e:	4603      	mov	r3, r0
 800d080:	b510      	push	{r4, lr}
 800d082:	b2c9      	uxtb	r1, r1
 800d084:	4402      	add	r2, r0
 800d086:	4293      	cmp	r3, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	d101      	bne.n	800d090 <memchr+0x12>
 800d08c:	2000      	movs	r0, #0
 800d08e:	e003      	b.n	800d098 <memchr+0x1a>
 800d090:	7804      	ldrb	r4, [r0, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	428c      	cmp	r4, r1
 800d096:	d1f6      	bne.n	800d086 <memchr+0x8>
 800d098:	bd10      	pop	{r4, pc}
	...

0800d09c <__assert_func>:
 800d09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d09e:	4614      	mov	r4, r2
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	4b09      	ldr	r3, [pc, #36]	@ (800d0c8 <__assert_func+0x2c>)
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68d8      	ldr	r0, [r3, #12]
 800d0aa:	b14c      	cbz	r4, 800d0c0 <__assert_func+0x24>
 800d0ac:	4b07      	ldr	r3, [pc, #28]	@ (800d0cc <__assert_func+0x30>)
 800d0ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0b2:	9100      	str	r1, [sp, #0]
 800d0b4:	462b      	mov	r3, r5
 800d0b6:	4906      	ldr	r1, [pc, #24]	@ (800d0d0 <__assert_func+0x34>)
 800d0b8:	f001 fe22 	bl	800ed00 <fiprintf>
 800d0bc:	f001 fed4 	bl	800ee68 <abort>
 800d0c0:	4b04      	ldr	r3, [pc, #16]	@ (800d0d4 <__assert_func+0x38>)
 800d0c2:	461c      	mov	r4, r3
 800d0c4:	e7f3      	b.n	800d0ae <__assert_func+0x12>
 800d0c6:	bf00      	nop
 800d0c8:	20000074 	.word	0x20000074
 800d0cc:	0800f880 	.word	0x0800f880
 800d0d0:	0800f88d 	.word	0x0800f88d
 800d0d4:	0800f8bb 	.word	0x0800f8bb

0800d0d8 <quorem>:
 800d0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	6903      	ldr	r3, [r0, #16]
 800d0de:	690c      	ldr	r4, [r1, #16]
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	db7e      	blt.n	800d1e4 <quorem+0x10c>
 800d0e6:	3c01      	subs	r4, #1
 800d0e8:	00a3      	lsls	r3, r4, #2
 800d0ea:	f100 0514 	add.w	r5, r0, #20
 800d0ee:	f101 0814 	add.w	r8, r1, #20
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d102:	3301      	adds	r3, #1
 800d104:	429a      	cmp	r2, r3
 800d106:	fbb2 f6f3 	udiv	r6, r2, r3
 800d10a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d10e:	d32e      	bcc.n	800d16e <quorem+0x96>
 800d110:	f04f 0a00 	mov.w	sl, #0
 800d114:	46c4      	mov	ip, r8
 800d116:	46ae      	mov	lr, r5
 800d118:	46d3      	mov	fp, sl
 800d11a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d11e:	b298      	uxth	r0, r3
 800d120:	fb06 a000 	mla	r0, r6, r0, sl
 800d124:	0c1b      	lsrs	r3, r3, #16
 800d126:	0c02      	lsrs	r2, r0, #16
 800d128:	fb06 2303 	mla	r3, r6, r3, r2
 800d12c:	f8de 2000 	ldr.w	r2, [lr]
 800d130:	b280      	uxth	r0, r0
 800d132:	b292      	uxth	r2, r2
 800d134:	1a12      	subs	r2, r2, r0
 800d136:	445a      	add	r2, fp
 800d138:	f8de 0000 	ldr.w	r0, [lr]
 800d13c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d140:	b29b      	uxth	r3, r3
 800d142:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d146:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d14a:	b292      	uxth	r2, r2
 800d14c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d150:	45e1      	cmp	r9, ip
 800d152:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d156:	f84e 2b04 	str.w	r2, [lr], #4
 800d15a:	d2de      	bcs.n	800d11a <quorem+0x42>
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	58eb      	ldr	r3, [r5, r3]
 800d160:	b92b      	cbnz	r3, 800d16e <quorem+0x96>
 800d162:	9b01      	ldr	r3, [sp, #4]
 800d164:	3b04      	subs	r3, #4
 800d166:	429d      	cmp	r5, r3
 800d168:	461a      	mov	r2, r3
 800d16a:	d32f      	bcc.n	800d1cc <quorem+0xf4>
 800d16c:	613c      	str	r4, [r7, #16]
 800d16e:	4638      	mov	r0, r7
 800d170:	f001 f97e 	bl	800e470 <__mcmp>
 800d174:	2800      	cmp	r0, #0
 800d176:	db25      	blt.n	800d1c4 <quorem+0xec>
 800d178:	4629      	mov	r1, r5
 800d17a:	2000      	movs	r0, #0
 800d17c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d180:	f8d1 c000 	ldr.w	ip, [r1]
 800d184:	fa1f fe82 	uxth.w	lr, r2
 800d188:	fa1f f38c 	uxth.w	r3, ip
 800d18c:	eba3 030e 	sub.w	r3, r3, lr
 800d190:	4403      	add	r3, r0
 800d192:	0c12      	lsrs	r2, r2, #16
 800d194:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d198:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1a2:	45c1      	cmp	r9, r8
 800d1a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1a8:	f841 3b04 	str.w	r3, [r1], #4
 800d1ac:	d2e6      	bcs.n	800d17c <quorem+0xa4>
 800d1ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1b6:	b922      	cbnz	r2, 800d1c2 <quorem+0xea>
 800d1b8:	3b04      	subs	r3, #4
 800d1ba:	429d      	cmp	r5, r3
 800d1bc:	461a      	mov	r2, r3
 800d1be:	d30b      	bcc.n	800d1d8 <quorem+0x100>
 800d1c0:	613c      	str	r4, [r7, #16]
 800d1c2:	3601      	adds	r6, #1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	b003      	add	sp, #12
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	6812      	ldr	r2, [r2, #0]
 800d1ce:	3b04      	subs	r3, #4
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	d1cb      	bne.n	800d16c <quorem+0x94>
 800d1d4:	3c01      	subs	r4, #1
 800d1d6:	e7c6      	b.n	800d166 <quorem+0x8e>
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	3b04      	subs	r3, #4
 800d1dc:	2a00      	cmp	r2, #0
 800d1de:	d1ef      	bne.n	800d1c0 <quorem+0xe8>
 800d1e0:	3c01      	subs	r4, #1
 800d1e2:	e7ea      	b.n	800d1ba <quorem+0xe2>
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	e7ee      	b.n	800d1c6 <quorem+0xee>

0800d1e8 <_dtoa_r>:
 800d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	69c7      	ldr	r7, [r0, #28]
 800d1f2:	b097      	sub	sp, #92	@ 0x5c
 800d1f4:	4681      	mov	r9, r0
 800d1f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d1fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800d1fc:	b97f      	cbnz	r7, 800d21e <_dtoa_r+0x36>
 800d1fe:	2010      	movs	r0, #16
 800d200:	f000 fe0e 	bl	800de20 <malloc>
 800d204:	4602      	mov	r2, r0
 800d206:	f8c9 001c 	str.w	r0, [r9, #28]
 800d20a:	b920      	cbnz	r0, 800d216 <_dtoa_r+0x2e>
 800d20c:	21ef      	movs	r1, #239	@ 0xef
 800d20e:	4bac      	ldr	r3, [pc, #688]	@ (800d4c0 <_dtoa_r+0x2d8>)
 800d210:	48ac      	ldr	r0, [pc, #688]	@ (800d4c4 <_dtoa_r+0x2dc>)
 800d212:	f7ff ff43 	bl	800d09c <__assert_func>
 800d216:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d21a:	6007      	str	r7, [r0, #0]
 800d21c:	60c7      	str	r7, [r0, #12]
 800d21e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d222:	6819      	ldr	r1, [r3, #0]
 800d224:	b159      	cbz	r1, 800d23e <_dtoa_r+0x56>
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	2301      	movs	r3, #1
 800d22a:	4093      	lsls	r3, r2
 800d22c:	604a      	str	r2, [r1, #4]
 800d22e:	608b      	str	r3, [r1, #8]
 800d230:	4648      	mov	r0, r9
 800d232:	f000 feeb 	bl	800e00c <_Bfree>
 800d236:	2200      	movs	r2, #0
 800d238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	1e2b      	subs	r3, r5, #0
 800d240:	bfaf      	iteee	ge
 800d242:	2300      	movge	r3, #0
 800d244:	2201      	movlt	r2, #1
 800d246:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d24a:	9307      	strlt	r3, [sp, #28]
 800d24c:	bfa8      	it	ge
 800d24e:	6033      	strge	r3, [r6, #0]
 800d250:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d254:	4b9c      	ldr	r3, [pc, #624]	@ (800d4c8 <_dtoa_r+0x2e0>)
 800d256:	bfb8      	it	lt
 800d258:	6032      	strlt	r2, [r6, #0]
 800d25a:	ea33 0308 	bics.w	r3, r3, r8
 800d25e:	d112      	bne.n	800d286 <_dtoa_r+0x9e>
 800d260:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d264:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d26c:	4323      	orrs	r3, r4
 800d26e:	f000 855e 	beq.w	800dd2e <_dtoa_r+0xb46>
 800d272:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d4cc <_dtoa_r+0x2e4>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 8560 	beq.w	800dd3e <_dtoa_r+0xb56>
 800d27e:	f10a 0303 	add.w	r3, sl, #3
 800d282:	f000 bd5a 	b.w	800dd3a <_dtoa_r+0xb52>
 800d286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d28a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d28e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d292:	2200      	movs	r2, #0
 800d294:	2300      	movs	r3, #0
 800d296:	f7f3 fb91 	bl	80009bc <__aeabi_dcmpeq>
 800d29a:	4607      	mov	r7, r0
 800d29c:	b158      	cbz	r0, 800d2b6 <_dtoa_r+0xce>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d2a2:	6013      	str	r3, [r2, #0]
 800d2a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d2a6:	b113      	cbz	r3, 800d2ae <_dtoa_r+0xc6>
 800d2a8:	4b89      	ldr	r3, [pc, #548]	@ (800d4d0 <_dtoa_r+0x2e8>)
 800d2aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800d4d4 <_dtoa_r+0x2ec>
 800d2b2:	f000 bd44 	b.w	800dd3e <_dtoa_r+0xb56>
 800d2b6:	ab14      	add	r3, sp, #80	@ 0x50
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	ab15      	add	r3, sp, #84	@ 0x54
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	4648      	mov	r0, r9
 800d2c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d2c4:	f001 f984 	bl	800e5d0 <__d2b>
 800d2c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800d2cc:	9003      	str	r0, [sp, #12]
 800d2ce:	2e00      	cmp	r6, #0
 800d2d0:	d078      	beq.n	800d3c4 <_dtoa_r+0x1dc>
 800d2d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2e8:	9712      	str	r7, [sp, #72]	@ 0x48
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4b7a      	ldr	r3, [pc, #488]	@ (800d4d8 <_dtoa_r+0x2f0>)
 800d2f0:	f7f2 ff44 	bl	800017c <__aeabi_dsub>
 800d2f4:	a36c      	add	r3, pc, #432	@ (adr r3, 800d4a8 <_dtoa_r+0x2c0>)
 800d2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fa:	f7f3 f8f7 	bl	80004ec <__aeabi_dmul>
 800d2fe:	a36c      	add	r3, pc, #432	@ (adr r3, 800d4b0 <_dtoa_r+0x2c8>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f7f2 ff3c 	bl	8000180 <__adddf3>
 800d308:	4604      	mov	r4, r0
 800d30a:	4630      	mov	r0, r6
 800d30c:	460d      	mov	r5, r1
 800d30e:	f7f3 f883 	bl	8000418 <__aeabi_i2d>
 800d312:	a369      	add	r3, pc, #420	@ (adr r3, 800d4b8 <_dtoa_r+0x2d0>)
 800d314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d318:	f7f3 f8e8 	bl	80004ec <__aeabi_dmul>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f2 ff2c 	bl	8000180 <__adddf3>
 800d328:	4604      	mov	r4, r0
 800d32a:	460d      	mov	r5, r1
 800d32c:	f7f3 fb8e 	bl	8000a4c <__aeabi_d2iz>
 800d330:	2200      	movs	r2, #0
 800d332:	4607      	mov	r7, r0
 800d334:	2300      	movs	r3, #0
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 fb49 	bl	80009d0 <__aeabi_dcmplt>
 800d33e:	b140      	cbz	r0, 800d352 <_dtoa_r+0x16a>
 800d340:	4638      	mov	r0, r7
 800d342:	f7f3 f869 	bl	8000418 <__aeabi_i2d>
 800d346:	4622      	mov	r2, r4
 800d348:	462b      	mov	r3, r5
 800d34a:	f7f3 fb37 	bl	80009bc <__aeabi_dcmpeq>
 800d34e:	b900      	cbnz	r0, 800d352 <_dtoa_r+0x16a>
 800d350:	3f01      	subs	r7, #1
 800d352:	2f16      	cmp	r7, #22
 800d354:	d854      	bhi.n	800d400 <_dtoa_r+0x218>
 800d356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d35a:	4b60      	ldr	r3, [pc, #384]	@ (800d4dc <_dtoa_r+0x2f4>)
 800d35c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	f7f3 fb34 	bl	80009d0 <__aeabi_dcmplt>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d04b      	beq.n	800d404 <_dtoa_r+0x21c>
 800d36c:	2300      	movs	r3, #0
 800d36e:	3f01      	subs	r7, #1
 800d370:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d372:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d374:	1b9b      	subs	r3, r3, r6
 800d376:	1e5a      	subs	r2, r3, #1
 800d378:	bf49      	itett	mi
 800d37a:	f1c3 0301 	rsbmi	r3, r3, #1
 800d37e:	2300      	movpl	r3, #0
 800d380:	9304      	strmi	r3, [sp, #16]
 800d382:	2300      	movmi	r3, #0
 800d384:	9209      	str	r2, [sp, #36]	@ 0x24
 800d386:	bf54      	ite	pl
 800d388:	9304      	strpl	r3, [sp, #16]
 800d38a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800d38c:	2f00      	cmp	r7, #0
 800d38e:	db3b      	blt.n	800d408 <_dtoa_r+0x220>
 800d390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d392:	970e      	str	r7, [sp, #56]	@ 0x38
 800d394:	443b      	add	r3, r7
 800d396:	9309      	str	r3, [sp, #36]	@ 0x24
 800d398:	2300      	movs	r3, #0
 800d39a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d39c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d39e:	2b09      	cmp	r3, #9
 800d3a0:	d865      	bhi.n	800d46e <_dtoa_r+0x286>
 800d3a2:	2b05      	cmp	r3, #5
 800d3a4:	bfc4      	itt	gt
 800d3a6:	3b04      	subgt	r3, #4
 800d3a8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800d3aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3ac:	bfc8      	it	gt
 800d3ae:	2400      	movgt	r4, #0
 800d3b0:	f1a3 0302 	sub.w	r3, r3, #2
 800d3b4:	bfd8      	it	le
 800d3b6:	2401      	movle	r4, #1
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d864      	bhi.n	800d486 <_dtoa_r+0x29e>
 800d3bc:	e8df f003 	tbb	[pc, r3]
 800d3c0:	2c385553 	.word	0x2c385553
 800d3c4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d3c8:	441e      	add	r6, r3
 800d3ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d3ce:	2b20      	cmp	r3, #32
 800d3d0:	bfc1      	itttt	gt
 800d3d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3d6:	fa08 f803 	lslgt.w	r8, r8, r3
 800d3da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3e2:	bfd6      	itet	le
 800d3e4:	f1c3 0320 	rsble	r3, r3, #32
 800d3e8:	ea48 0003 	orrgt.w	r0, r8, r3
 800d3ec:	fa04 f003 	lslle.w	r0, r4, r3
 800d3f0:	f7f3 f802 	bl	80003f8 <__aeabi_ui2d>
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3fa:	3e01      	subs	r6, #1
 800d3fc:	9212      	str	r2, [sp, #72]	@ 0x48
 800d3fe:	e774      	b.n	800d2ea <_dtoa_r+0x102>
 800d400:	2301      	movs	r3, #1
 800d402:	e7b5      	b.n	800d370 <_dtoa_r+0x188>
 800d404:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d406:	e7b4      	b.n	800d372 <_dtoa_r+0x18a>
 800d408:	9b04      	ldr	r3, [sp, #16]
 800d40a:	1bdb      	subs	r3, r3, r7
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	427b      	negs	r3, r7
 800d410:	930a      	str	r3, [sp, #40]	@ 0x28
 800d412:	2300      	movs	r3, #0
 800d414:	930e      	str	r3, [sp, #56]	@ 0x38
 800d416:	e7c1      	b.n	800d39c <_dtoa_r+0x1b4>
 800d418:	2301      	movs	r3, #1
 800d41a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d41c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d41e:	eb07 0b03 	add.w	fp, r7, r3
 800d422:	f10b 0301 	add.w	r3, fp, #1
 800d426:	2b01      	cmp	r3, #1
 800d428:	9308      	str	r3, [sp, #32]
 800d42a:	bfb8      	it	lt
 800d42c:	2301      	movlt	r3, #1
 800d42e:	e006      	b.n	800d43e <_dtoa_r+0x256>
 800d430:	2301      	movs	r3, #1
 800d432:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d434:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d436:	2b00      	cmp	r3, #0
 800d438:	dd28      	ble.n	800d48c <_dtoa_r+0x2a4>
 800d43a:	469b      	mov	fp, r3
 800d43c:	9308      	str	r3, [sp, #32]
 800d43e:	2100      	movs	r1, #0
 800d440:	2204      	movs	r2, #4
 800d442:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d446:	f102 0514 	add.w	r5, r2, #20
 800d44a:	429d      	cmp	r5, r3
 800d44c:	d926      	bls.n	800d49c <_dtoa_r+0x2b4>
 800d44e:	6041      	str	r1, [r0, #4]
 800d450:	4648      	mov	r0, r9
 800d452:	f000 fd9b 	bl	800df8c <_Balloc>
 800d456:	4682      	mov	sl, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	d143      	bne.n	800d4e4 <_dtoa_r+0x2fc>
 800d45c:	4602      	mov	r2, r0
 800d45e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d462:	4b1f      	ldr	r3, [pc, #124]	@ (800d4e0 <_dtoa_r+0x2f8>)
 800d464:	e6d4      	b.n	800d210 <_dtoa_r+0x28>
 800d466:	2300      	movs	r3, #0
 800d468:	e7e3      	b.n	800d432 <_dtoa_r+0x24a>
 800d46a:	2300      	movs	r3, #0
 800d46c:	e7d5      	b.n	800d41a <_dtoa_r+0x232>
 800d46e:	2401      	movs	r4, #1
 800d470:	2300      	movs	r3, #0
 800d472:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d474:	9320      	str	r3, [sp, #128]	@ 0x80
 800d476:	f04f 3bff 	mov.w	fp, #4294967295
 800d47a:	2200      	movs	r2, #0
 800d47c:	2312      	movs	r3, #18
 800d47e:	f8cd b020 	str.w	fp, [sp, #32]
 800d482:	9221      	str	r2, [sp, #132]	@ 0x84
 800d484:	e7db      	b.n	800d43e <_dtoa_r+0x256>
 800d486:	2301      	movs	r3, #1
 800d488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d48a:	e7f4      	b.n	800d476 <_dtoa_r+0x28e>
 800d48c:	f04f 0b01 	mov.w	fp, #1
 800d490:	465b      	mov	r3, fp
 800d492:	f8cd b020 	str.w	fp, [sp, #32]
 800d496:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800d49a:	e7d0      	b.n	800d43e <_dtoa_r+0x256>
 800d49c:	3101      	adds	r1, #1
 800d49e:	0052      	lsls	r2, r2, #1
 800d4a0:	e7d1      	b.n	800d446 <_dtoa_r+0x25e>
 800d4a2:	bf00      	nop
 800d4a4:	f3af 8000 	nop.w
 800d4a8:	636f4361 	.word	0x636f4361
 800d4ac:	3fd287a7 	.word	0x3fd287a7
 800d4b0:	8b60c8b3 	.word	0x8b60c8b3
 800d4b4:	3fc68a28 	.word	0x3fc68a28
 800d4b8:	509f79fb 	.word	0x509f79fb
 800d4bc:	3fd34413 	.word	0x3fd34413
 800d4c0:	0800f80f 	.word	0x0800f80f
 800d4c4:	0800f8c9 	.word	0x0800f8c9
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	0800f8c5 	.word	0x0800f8c5
 800d4d0:	0800f7ec 	.word	0x0800f7ec
 800d4d4:	0800f7eb 	.word	0x0800f7eb
 800d4d8:	3ff80000 	.word	0x3ff80000
 800d4dc:	0800f9e0 	.word	0x0800f9e0
 800d4e0:	0800f921 	.word	0x0800f921
 800d4e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4e8:	6018      	str	r0, [r3, #0]
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	2b0e      	cmp	r3, #14
 800d4ee:	f200 80a1 	bhi.w	800d634 <_dtoa_r+0x44c>
 800d4f2:	2c00      	cmp	r4, #0
 800d4f4:	f000 809e 	beq.w	800d634 <_dtoa_r+0x44c>
 800d4f8:	2f00      	cmp	r7, #0
 800d4fa:	dd33      	ble.n	800d564 <_dtoa_r+0x37c>
 800d4fc:	4b9c      	ldr	r3, [pc, #624]	@ (800d770 <_dtoa_r+0x588>)
 800d4fe:	f007 020f 	and.w	r2, r7, #15
 800d502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d506:	05f8      	lsls	r0, r7, #23
 800d508:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d50c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800d510:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d514:	d516      	bpl.n	800d544 <_dtoa_r+0x35c>
 800d516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d51a:	4b96      	ldr	r3, [pc, #600]	@ (800d774 <_dtoa_r+0x58c>)
 800d51c:	2603      	movs	r6, #3
 800d51e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d522:	f7f3 f90d 	bl	8000740 <__aeabi_ddiv>
 800d526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d52a:	f004 040f 	and.w	r4, r4, #15
 800d52e:	4d91      	ldr	r5, [pc, #580]	@ (800d774 <_dtoa_r+0x58c>)
 800d530:	b954      	cbnz	r4, 800d548 <_dtoa_r+0x360>
 800d532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d53a:	f7f3 f901 	bl	8000740 <__aeabi_ddiv>
 800d53e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d542:	e028      	b.n	800d596 <_dtoa_r+0x3ae>
 800d544:	2602      	movs	r6, #2
 800d546:	e7f2      	b.n	800d52e <_dtoa_r+0x346>
 800d548:	07e1      	lsls	r1, r4, #31
 800d54a:	d508      	bpl.n	800d55e <_dtoa_r+0x376>
 800d54c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d550:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d554:	f7f2 ffca 	bl	80004ec <__aeabi_dmul>
 800d558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d55c:	3601      	adds	r6, #1
 800d55e:	1064      	asrs	r4, r4, #1
 800d560:	3508      	adds	r5, #8
 800d562:	e7e5      	b.n	800d530 <_dtoa_r+0x348>
 800d564:	f000 80af 	beq.w	800d6c6 <_dtoa_r+0x4de>
 800d568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d56c:	427c      	negs	r4, r7
 800d56e:	4b80      	ldr	r3, [pc, #512]	@ (800d770 <_dtoa_r+0x588>)
 800d570:	f004 020f 	and.w	r2, r4, #15
 800d574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f2 ffb6 	bl	80004ec <__aeabi_dmul>
 800d580:	2602      	movs	r6, #2
 800d582:	2300      	movs	r3, #0
 800d584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d588:	4d7a      	ldr	r5, [pc, #488]	@ (800d774 <_dtoa_r+0x58c>)
 800d58a:	1124      	asrs	r4, r4, #4
 800d58c:	2c00      	cmp	r4, #0
 800d58e:	f040 808f 	bne.w	800d6b0 <_dtoa_r+0x4c8>
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1d3      	bne.n	800d53e <_dtoa_r+0x356>
 800d596:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d59a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 8094 	beq.w	800d6ca <_dtoa_r+0x4e2>
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	4b73      	ldr	r3, [pc, #460]	@ (800d778 <_dtoa_r+0x590>)
 800d5aa:	f7f3 fa11 	bl	80009d0 <__aeabi_dcmplt>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	f000 808b 	beq.w	800d6ca <_dtoa_r+0x4e2>
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 8087 	beq.w	800d6ca <_dtoa_r+0x4e2>
 800d5bc:	f1bb 0f00 	cmp.w	fp, #0
 800d5c0:	dd34      	ble.n	800d62c <_dtoa_r+0x444>
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4b6c      	ldr	r3, [pc, #432]	@ (800d77c <_dtoa_r+0x594>)
 800d5ca:	f7f2 ff8f 	bl	80004ec <__aeabi_dmul>
 800d5ce:	465c      	mov	r4, fp
 800d5d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800d5d8:	3601      	adds	r6, #1
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7f2 ff1c 	bl	8000418 <__aeabi_i2d>
 800d5e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5e4:	f7f2 ff82 	bl	80004ec <__aeabi_dmul>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	4b65      	ldr	r3, [pc, #404]	@ (800d780 <_dtoa_r+0x598>)
 800d5ec:	f7f2 fdc8 	bl	8000180 <__adddf3>
 800d5f0:	4605      	mov	r5, r0
 800d5f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	d16a      	bne.n	800d6d0 <_dtoa_r+0x4e8>
 800d5fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5fe:	2200      	movs	r2, #0
 800d600:	4b60      	ldr	r3, [pc, #384]	@ (800d784 <_dtoa_r+0x59c>)
 800d602:	f7f2 fdbb 	bl	800017c <__aeabi_dsub>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d60e:	462a      	mov	r2, r5
 800d610:	4633      	mov	r3, r6
 800d612:	f7f3 f9fb 	bl	8000a0c <__aeabi_dcmpgt>
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 8298 	bne.w	800db4c <_dtoa_r+0x964>
 800d61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d620:	462a      	mov	r2, r5
 800d622:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d626:	f7f3 f9d3 	bl	80009d0 <__aeabi_dcmplt>
 800d62a:	bb38      	cbnz	r0, 800d67c <_dtoa_r+0x494>
 800d62c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d630:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d634:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d636:	2b00      	cmp	r3, #0
 800d638:	f2c0 8157 	blt.w	800d8ea <_dtoa_r+0x702>
 800d63c:	2f0e      	cmp	r7, #14
 800d63e:	f300 8154 	bgt.w	800d8ea <_dtoa_r+0x702>
 800d642:	4b4b      	ldr	r3, [pc, #300]	@ (800d770 <_dtoa_r+0x588>)
 800d644:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d648:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d64c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d650:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d652:	2b00      	cmp	r3, #0
 800d654:	f280 80e5 	bge.w	800d822 <_dtoa_r+0x63a>
 800d658:	9b08      	ldr	r3, [sp, #32]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f300 80e1 	bgt.w	800d822 <_dtoa_r+0x63a>
 800d660:	d10c      	bne.n	800d67c <_dtoa_r+0x494>
 800d662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d666:	2200      	movs	r2, #0
 800d668:	4b46      	ldr	r3, [pc, #280]	@ (800d784 <_dtoa_r+0x59c>)
 800d66a:	f7f2 ff3f 	bl	80004ec <__aeabi_dmul>
 800d66e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d672:	f7f3 f9c1 	bl	80009f8 <__aeabi_dcmpge>
 800d676:	2800      	cmp	r0, #0
 800d678:	f000 8266 	beq.w	800db48 <_dtoa_r+0x960>
 800d67c:	2400      	movs	r4, #0
 800d67e:	4625      	mov	r5, r4
 800d680:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d682:	4656      	mov	r6, sl
 800d684:	ea6f 0803 	mvn.w	r8, r3
 800d688:	2700      	movs	r7, #0
 800d68a:	4621      	mov	r1, r4
 800d68c:	4648      	mov	r0, r9
 800d68e:	f000 fcbd 	bl	800e00c <_Bfree>
 800d692:	2d00      	cmp	r5, #0
 800d694:	f000 80bd 	beq.w	800d812 <_dtoa_r+0x62a>
 800d698:	b12f      	cbz	r7, 800d6a6 <_dtoa_r+0x4be>
 800d69a:	42af      	cmp	r7, r5
 800d69c:	d003      	beq.n	800d6a6 <_dtoa_r+0x4be>
 800d69e:	4639      	mov	r1, r7
 800d6a0:	4648      	mov	r0, r9
 800d6a2:	f000 fcb3 	bl	800e00c <_Bfree>
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	4648      	mov	r0, r9
 800d6aa:	f000 fcaf 	bl	800e00c <_Bfree>
 800d6ae:	e0b0      	b.n	800d812 <_dtoa_r+0x62a>
 800d6b0:	07e2      	lsls	r2, r4, #31
 800d6b2:	d505      	bpl.n	800d6c0 <_dtoa_r+0x4d8>
 800d6b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6b8:	f7f2 ff18 	bl	80004ec <__aeabi_dmul>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	3601      	adds	r6, #1
 800d6c0:	1064      	asrs	r4, r4, #1
 800d6c2:	3508      	adds	r5, #8
 800d6c4:	e762      	b.n	800d58c <_dtoa_r+0x3a4>
 800d6c6:	2602      	movs	r6, #2
 800d6c8:	e765      	b.n	800d596 <_dtoa_r+0x3ae>
 800d6ca:	46b8      	mov	r8, r7
 800d6cc:	9c08      	ldr	r4, [sp, #32]
 800d6ce:	e784      	b.n	800d5da <_dtoa_r+0x3f2>
 800d6d0:	4b27      	ldr	r3, [pc, #156]	@ (800d770 <_dtoa_r+0x588>)
 800d6d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6dc:	4454      	add	r4, sl
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	d054      	beq.n	800d78c <_dtoa_r+0x5a4>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	4928      	ldr	r1, [pc, #160]	@ (800d788 <_dtoa_r+0x5a0>)
 800d6e6:	f7f3 f82b 	bl	8000740 <__aeabi_ddiv>
 800d6ea:	4633      	mov	r3, r6
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	f7f2 fd45 	bl	800017c <__aeabi_dsub>
 800d6f2:	4656      	mov	r6, sl
 800d6f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6fc:	f7f3 f9a6 	bl	8000a4c <__aeabi_d2iz>
 800d700:	4605      	mov	r5, r0
 800d702:	f7f2 fe89 	bl	8000418 <__aeabi_i2d>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d70e:	f7f2 fd35 	bl	800017c <__aeabi_dsub>
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	3530      	adds	r5, #48	@ 0x30
 800d718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d71c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d720:	f806 5b01 	strb.w	r5, [r6], #1
 800d724:	f7f3 f954 	bl	80009d0 <__aeabi_dcmplt>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d172      	bne.n	800d812 <_dtoa_r+0x62a>
 800d72c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d730:	2000      	movs	r0, #0
 800d732:	4911      	ldr	r1, [pc, #68]	@ (800d778 <_dtoa_r+0x590>)
 800d734:	f7f2 fd22 	bl	800017c <__aeabi_dsub>
 800d738:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d73c:	f7f3 f948 	bl	80009d0 <__aeabi_dcmplt>
 800d740:	2800      	cmp	r0, #0
 800d742:	f040 80b4 	bne.w	800d8ae <_dtoa_r+0x6c6>
 800d746:	42a6      	cmp	r6, r4
 800d748:	f43f af70 	beq.w	800d62c <_dtoa_r+0x444>
 800d74c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d750:	2200      	movs	r2, #0
 800d752:	4b0a      	ldr	r3, [pc, #40]	@ (800d77c <_dtoa_r+0x594>)
 800d754:	f7f2 feca 	bl	80004ec <__aeabi_dmul>
 800d758:	2200      	movs	r2, #0
 800d75a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d75e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d762:	4b06      	ldr	r3, [pc, #24]	@ (800d77c <_dtoa_r+0x594>)
 800d764:	f7f2 fec2 	bl	80004ec <__aeabi_dmul>
 800d768:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d76c:	e7c4      	b.n	800d6f8 <_dtoa_r+0x510>
 800d76e:	bf00      	nop
 800d770:	0800f9e0 	.word	0x0800f9e0
 800d774:	0800f9b8 	.word	0x0800f9b8
 800d778:	3ff00000 	.word	0x3ff00000
 800d77c:	40240000 	.word	0x40240000
 800d780:	401c0000 	.word	0x401c0000
 800d784:	40140000 	.word	0x40140000
 800d788:	3fe00000 	.word	0x3fe00000
 800d78c:	4631      	mov	r1, r6
 800d78e:	4628      	mov	r0, r5
 800d790:	f7f2 feac 	bl	80004ec <__aeabi_dmul>
 800d794:	4656      	mov	r6, sl
 800d796:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d79a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d79c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7a0:	f7f3 f954 	bl	8000a4c <__aeabi_d2iz>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	f7f2 fe37 	bl	8000418 <__aeabi_i2d>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7b2:	f7f2 fce3 	bl	800017c <__aeabi_dsub>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	3530      	adds	r5, #48	@ 0x30
 800d7bc:	f806 5b01 	strb.w	r5, [r6], #1
 800d7c0:	42a6      	cmp	r6, r4
 800d7c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7c6:	f04f 0200 	mov.w	r2, #0
 800d7ca:	d124      	bne.n	800d816 <_dtoa_r+0x62e>
 800d7cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7d0:	4bae      	ldr	r3, [pc, #696]	@ (800da8c <_dtoa_r+0x8a4>)
 800d7d2:	f7f2 fcd5 	bl	8000180 <__adddf3>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	460b      	mov	r3, r1
 800d7da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7de:	f7f3 f915 	bl	8000a0c <__aeabi_dcmpgt>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d163      	bne.n	800d8ae <_dtoa_r+0x6c6>
 800d7e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	49a7      	ldr	r1, [pc, #668]	@ (800da8c <_dtoa_r+0x8a4>)
 800d7ee:	f7f2 fcc5 	bl	800017c <__aeabi_dsub>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7fa:	f7f3 f8e9 	bl	80009d0 <__aeabi_dcmplt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f43f af14 	beq.w	800d62c <_dtoa_r+0x444>
 800d804:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d806:	1e73      	subs	r3, r6, #1
 800d808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d80a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d80e:	2b30      	cmp	r3, #48	@ 0x30
 800d810:	d0f8      	beq.n	800d804 <_dtoa_r+0x61c>
 800d812:	4647      	mov	r7, r8
 800d814:	e03b      	b.n	800d88e <_dtoa_r+0x6a6>
 800d816:	4b9e      	ldr	r3, [pc, #632]	@ (800da90 <_dtoa_r+0x8a8>)
 800d818:	f7f2 fe68 	bl	80004ec <__aeabi_dmul>
 800d81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d820:	e7bc      	b.n	800d79c <_dtoa_r+0x5b4>
 800d822:	4656      	mov	r6, sl
 800d824:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 ff86 	bl	8000740 <__aeabi_ddiv>
 800d834:	f7f3 f90a 	bl	8000a4c <__aeabi_d2iz>
 800d838:	4680      	mov	r8, r0
 800d83a:	f7f2 fded 	bl	8000418 <__aeabi_i2d>
 800d83e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d842:	f7f2 fe53 	bl	80004ec <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4620      	mov	r0, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f2 fc95 	bl	800017c <__aeabi_dsub>
 800d852:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d856:	9d08      	ldr	r5, [sp, #32]
 800d858:	f806 4b01 	strb.w	r4, [r6], #1
 800d85c:	eba6 040a 	sub.w	r4, r6, sl
 800d860:	42a5      	cmp	r5, r4
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	d133      	bne.n	800d8d0 <_dtoa_r+0x6e8>
 800d868:	f7f2 fc8a 	bl	8000180 <__adddf3>
 800d86c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d870:	4604      	mov	r4, r0
 800d872:	460d      	mov	r5, r1
 800d874:	f7f3 f8ca 	bl	8000a0c <__aeabi_dcmpgt>
 800d878:	b9c0      	cbnz	r0, 800d8ac <_dtoa_r+0x6c4>
 800d87a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d87e:	4620      	mov	r0, r4
 800d880:	4629      	mov	r1, r5
 800d882:	f7f3 f89b 	bl	80009bc <__aeabi_dcmpeq>
 800d886:	b110      	cbz	r0, 800d88e <_dtoa_r+0x6a6>
 800d888:	f018 0f01 	tst.w	r8, #1
 800d88c:	d10e      	bne.n	800d8ac <_dtoa_r+0x6c4>
 800d88e:	4648      	mov	r0, r9
 800d890:	9903      	ldr	r1, [sp, #12]
 800d892:	f000 fbbb 	bl	800e00c <_Bfree>
 800d896:	2300      	movs	r3, #0
 800d898:	7033      	strb	r3, [r6, #0]
 800d89a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d89c:	3701      	adds	r7, #1
 800d89e:	601f      	str	r7, [r3, #0]
 800d8a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 824b 	beq.w	800dd3e <_dtoa_r+0xb56>
 800d8a8:	601e      	str	r6, [r3, #0]
 800d8aa:	e248      	b.n	800dd3e <_dtoa_r+0xb56>
 800d8ac:	46b8      	mov	r8, r7
 800d8ae:	4633      	mov	r3, r6
 800d8b0:	461e      	mov	r6, r3
 800d8b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8b6:	2a39      	cmp	r2, #57	@ 0x39
 800d8b8:	d106      	bne.n	800d8c8 <_dtoa_r+0x6e0>
 800d8ba:	459a      	cmp	sl, r3
 800d8bc:	d1f8      	bne.n	800d8b0 <_dtoa_r+0x6c8>
 800d8be:	2230      	movs	r2, #48	@ 0x30
 800d8c0:	f108 0801 	add.w	r8, r8, #1
 800d8c4:	f88a 2000 	strb.w	r2, [sl]
 800d8c8:	781a      	ldrb	r2, [r3, #0]
 800d8ca:	3201      	adds	r2, #1
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	e7a0      	b.n	800d812 <_dtoa_r+0x62a>
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	4b6f      	ldr	r3, [pc, #444]	@ (800da90 <_dtoa_r+0x8a8>)
 800d8d4:	f7f2 fe0a 	bl	80004ec <__aeabi_dmul>
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2300      	movs	r3, #0
 800d8dc:	4604      	mov	r4, r0
 800d8de:	460d      	mov	r5, r1
 800d8e0:	f7f3 f86c 	bl	80009bc <__aeabi_dcmpeq>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d09f      	beq.n	800d828 <_dtoa_r+0x640>
 800d8e8:	e7d1      	b.n	800d88e <_dtoa_r+0x6a6>
 800d8ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8ec:	2a00      	cmp	r2, #0
 800d8ee:	f000 80ea 	beq.w	800dac6 <_dtoa_r+0x8de>
 800d8f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8f4:	2a01      	cmp	r2, #1
 800d8f6:	f300 80cd 	bgt.w	800da94 <_dtoa_r+0x8ac>
 800d8fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d8fc:	2a00      	cmp	r2, #0
 800d8fe:	f000 80c1 	beq.w	800da84 <_dtoa_r+0x89c>
 800d902:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d906:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d908:	9e04      	ldr	r6, [sp, #16]
 800d90a:	9a04      	ldr	r2, [sp, #16]
 800d90c:	2101      	movs	r1, #1
 800d90e:	441a      	add	r2, r3
 800d910:	9204      	str	r2, [sp, #16]
 800d912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d914:	4648      	mov	r0, r9
 800d916:	441a      	add	r2, r3
 800d918:	9209      	str	r2, [sp, #36]	@ 0x24
 800d91a:	f000 fc2b 	bl	800e174 <__i2b>
 800d91e:	4605      	mov	r5, r0
 800d920:	b166      	cbz	r6, 800d93c <_dtoa_r+0x754>
 800d922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	dd09      	ble.n	800d93c <_dtoa_r+0x754>
 800d928:	42b3      	cmp	r3, r6
 800d92a:	bfa8      	it	ge
 800d92c:	4633      	movge	r3, r6
 800d92e:	9a04      	ldr	r2, [sp, #16]
 800d930:	1af6      	subs	r6, r6, r3
 800d932:	1ad2      	subs	r2, r2, r3
 800d934:	9204      	str	r2, [sp, #16]
 800d936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d93e:	b30b      	cbz	r3, 800d984 <_dtoa_r+0x79c>
 800d940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d942:	2b00      	cmp	r3, #0
 800d944:	f000 80c6 	beq.w	800dad4 <_dtoa_r+0x8ec>
 800d948:	2c00      	cmp	r4, #0
 800d94a:	f000 80c0 	beq.w	800dace <_dtoa_r+0x8e6>
 800d94e:	4629      	mov	r1, r5
 800d950:	4622      	mov	r2, r4
 800d952:	4648      	mov	r0, r9
 800d954:	f000 fcc6 	bl	800e2e4 <__pow5mult>
 800d958:	9a03      	ldr	r2, [sp, #12]
 800d95a:	4601      	mov	r1, r0
 800d95c:	4605      	mov	r5, r0
 800d95e:	4648      	mov	r0, r9
 800d960:	f000 fc1e 	bl	800e1a0 <__multiply>
 800d964:	9903      	ldr	r1, [sp, #12]
 800d966:	4680      	mov	r8, r0
 800d968:	4648      	mov	r0, r9
 800d96a:	f000 fb4f 	bl	800e00c <_Bfree>
 800d96e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d970:	1b1b      	subs	r3, r3, r4
 800d972:	930a      	str	r3, [sp, #40]	@ 0x28
 800d974:	f000 80b1 	beq.w	800dada <_dtoa_r+0x8f2>
 800d978:	4641      	mov	r1, r8
 800d97a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d97c:	4648      	mov	r0, r9
 800d97e:	f000 fcb1 	bl	800e2e4 <__pow5mult>
 800d982:	9003      	str	r0, [sp, #12]
 800d984:	2101      	movs	r1, #1
 800d986:	4648      	mov	r0, r9
 800d988:	f000 fbf4 	bl	800e174 <__i2b>
 800d98c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d98e:	4604      	mov	r4, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 81d8 	beq.w	800dd46 <_dtoa_r+0xb5e>
 800d996:	461a      	mov	r2, r3
 800d998:	4601      	mov	r1, r0
 800d99a:	4648      	mov	r0, r9
 800d99c:	f000 fca2 	bl	800e2e4 <__pow5mult>
 800d9a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	f300 809f 	bgt.w	800dae8 <_dtoa_r+0x900>
 800d9aa:	9b06      	ldr	r3, [sp, #24]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8097 	bne.w	800dae0 <_dtoa_r+0x8f8>
 800d9b2:	9b07      	ldr	r3, [sp, #28]
 800d9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f040 8093 	bne.w	800dae4 <_dtoa_r+0x8fc>
 800d9be:	9b07      	ldr	r3, [sp, #28]
 800d9c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9c4:	0d1b      	lsrs	r3, r3, #20
 800d9c6:	051b      	lsls	r3, r3, #20
 800d9c8:	b133      	cbz	r3, 800d9d8 <_dtoa_r+0x7f0>
 800d9ca:	9b04      	ldr	r3, [sp, #16]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	9304      	str	r3, [sp, #16]
 800d9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 81b8 	beq.w	800dd52 <_dtoa_r+0xb6a>
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9e8:	6918      	ldr	r0, [r3, #16]
 800d9ea:	f000 fb77 	bl	800e0dc <__hi0bits>
 800d9ee:	f1c0 0020 	rsb	r0, r0, #32
 800d9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f4:	4418      	add	r0, r3
 800d9f6:	f010 001f 	ands.w	r0, r0, #31
 800d9fa:	f000 8082 	beq.w	800db02 <_dtoa_r+0x91a>
 800d9fe:	f1c0 0320 	rsb	r3, r0, #32
 800da02:	2b04      	cmp	r3, #4
 800da04:	dd73      	ble.n	800daee <_dtoa_r+0x906>
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	f1c0 001c 	rsb	r0, r0, #28
 800da0c:	4403      	add	r3, r0
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da12:	4406      	add	r6, r0
 800da14:	4403      	add	r3, r0
 800da16:	9309      	str	r3, [sp, #36]	@ 0x24
 800da18:	9b04      	ldr	r3, [sp, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	dd05      	ble.n	800da2a <_dtoa_r+0x842>
 800da1e:	461a      	mov	r2, r3
 800da20:	4648      	mov	r0, r9
 800da22:	9903      	ldr	r1, [sp, #12]
 800da24:	f000 fcb8 	bl	800e398 <__lshift>
 800da28:	9003      	str	r0, [sp, #12]
 800da2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd05      	ble.n	800da3c <_dtoa_r+0x854>
 800da30:	4621      	mov	r1, r4
 800da32:	461a      	mov	r2, r3
 800da34:	4648      	mov	r0, r9
 800da36:	f000 fcaf 	bl	800e398 <__lshift>
 800da3a:	4604      	mov	r4, r0
 800da3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d061      	beq.n	800db06 <_dtoa_r+0x91e>
 800da42:	4621      	mov	r1, r4
 800da44:	9803      	ldr	r0, [sp, #12]
 800da46:	f000 fd13 	bl	800e470 <__mcmp>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	da5b      	bge.n	800db06 <_dtoa_r+0x91e>
 800da4e:	2300      	movs	r3, #0
 800da50:	220a      	movs	r2, #10
 800da52:	4648      	mov	r0, r9
 800da54:	9903      	ldr	r1, [sp, #12]
 800da56:	f000 fafb 	bl	800e050 <__multadd>
 800da5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da5c:	f107 38ff 	add.w	r8, r7, #4294967295
 800da60:	9003      	str	r0, [sp, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 8177 	beq.w	800dd56 <_dtoa_r+0xb6e>
 800da68:	4629      	mov	r1, r5
 800da6a:	2300      	movs	r3, #0
 800da6c:	220a      	movs	r2, #10
 800da6e:	4648      	mov	r0, r9
 800da70:	f000 faee 	bl	800e050 <__multadd>
 800da74:	f1bb 0f00 	cmp.w	fp, #0
 800da78:	4605      	mov	r5, r0
 800da7a:	dc6f      	bgt.n	800db5c <_dtoa_r+0x974>
 800da7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800da7e:	2b02      	cmp	r3, #2
 800da80:	dc49      	bgt.n	800db16 <_dtoa_r+0x92e>
 800da82:	e06b      	b.n	800db5c <_dtoa_r+0x974>
 800da84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da8a:	e73c      	b.n	800d906 <_dtoa_r+0x71e>
 800da8c:	3fe00000 	.word	0x3fe00000
 800da90:	40240000 	.word	0x40240000
 800da94:	9b08      	ldr	r3, [sp, #32]
 800da96:	1e5c      	subs	r4, r3, #1
 800da98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9a:	42a3      	cmp	r3, r4
 800da9c:	db09      	blt.n	800dab2 <_dtoa_r+0x8ca>
 800da9e:	1b1c      	subs	r4, r3, r4
 800daa0:	9b08      	ldr	r3, [sp, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f6bf af30 	bge.w	800d908 <_dtoa_r+0x720>
 800daa8:	9b04      	ldr	r3, [sp, #16]
 800daaa:	9a08      	ldr	r2, [sp, #32]
 800daac:	1a9e      	subs	r6, r3, r2
 800daae:	2300      	movs	r3, #0
 800dab0:	e72b      	b.n	800d90a <_dtoa_r+0x722>
 800dab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dab6:	1ae3      	subs	r3, r4, r3
 800dab8:	441a      	add	r2, r3
 800daba:	940a      	str	r4, [sp, #40]	@ 0x28
 800dabc:	9e04      	ldr	r6, [sp, #16]
 800dabe:	2400      	movs	r4, #0
 800dac0:	9b08      	ldr	r3, [sp, #32]
 800dac2:	920e      	str	r2, [sp, #56]	@ 0x38
 800dac4:	e721      	b.n	800d90a <_dtoa_r+0x722>
 800dac6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dac8:	9e04      	ldr	r6, [sp, #16]
 800daca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dacc:	e728      	b.n	800d920 <_dtoa_r+0x738>
 800dace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dad2:	e751      	b.n	800d978 <_dtoa_r+0x790>
 800dad4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dad6:	9903      	ldr	r1, [sp, #12]
 800dad8:	e750      	b.n	800d97c <_dtoa_r+0x794>
 800dada:	f8cd 800c 	str.w	r8, [sp, #12]
 800dade:	e751      	b.n	800d984 <_dtoa_r+0x79c>
 800dae0:	2300      	movs	r3, #0
 800dae2:	e779      	b.n	800d9d8 <_dtoa_r+0x7f0>
 800dae4:	9b06      	ldr	r3, [sp, #24]
 800dae6:	e777      	b.n	800d9d8 <_dtoa_r+0x7f0>
 800dae8:	2300      	movs	r3, #0
 800daea:	930a      	str	r3, [sp, #40]	@ 0x28
 800daec:	e779      	b.n	800d9e2 <_dtoa_r+0x7fa>
 800daee:	d093      	beq.n	800da18 <_dtoa_r+0x830>
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	331c      	adds	r3, #28
 800daf4:	441a      	add	r2, r3
 800daf6:	9204      	str	r2, [sp, #16]
 800daf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafa:	441e      	add	r6, r3
 800dafc:	441a      	add	r2, r3
 800dafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800db00:	e78a      	b.n	800da18 <_dtoa_r+0x830>
 800db02:	4603      	mov	r3, r0
 800db04:	e7f4      	b.n	800daf0 <_dtoa_r+0x908>
 800db06:	9b08      	ldr	r3, [sp, #32]
 800db08:	46b8      	mov	r8, r7
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dc20      	bgt.n	800db50 <_dtoa_r+0x968>
 800db0e:	469b      	mov	fp, r3
 800db10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800db12:	2b02      	cmp	r3, #2
 800db14:	dd1e      	ble.n	800db54 <_dtoa_r+0x96c>
 800db16:	f1bb 0f00 	cmp.w	fp, #0
 800db1a:	f47f adb1 	bne.w	800d680 <_dtoa_r+0x498>
 800db1e:	4621      	mov	r1, r4
 800db20:	465b      	mov	r3, fp
 800db22:	2205      	movs	r2, #5
 800db24:	4648      	mov	r0, r9
 800db26:	f000 fa93 	bl	800e050 <__multadd>
 800db2a:	4601      	mov	r1, r0
 800db2c:	4604      	mov	r4, r0
 800db2e:	9803      	ldr	r0, [sp, #12]
 800db30:	f000 fc9e 	bl	800e470 <__mcmp>
 800db34:	2800      	cmp	r0, #0
 800db36:	f77f ada3 	ble.w	800d680 <_dtoa_r+0x498>
 800db3a:	4656      	mov	r6, sl
 800db3c:	2331      	movs	r3, #49	@ 0x31
 800db3e:	f108 0801 	add.w	r8, r8, #1
 800db42:	f806 3b01 	strb.w	r3, [r6], #1
 800db46:	e59f      	b.n	800d688 <_dtoa_r+0x4a0>
 800db48:	46b8      	mov	r8, r7
 800db4a:	9c08      	ldr	r4, [sp, #32]
 800db4c:	4625      	mov	r5, r4
 800db4e:	e7f4      	b.n	800db3a <_dtoa_r+0x952>
 800db50:	f8dd b020 	ldr.w	fp, [sp, #32]
 800db54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 8101 	beq.w	800dd5e <_dtoa_r+0xb76>
 800db5c:	2e00      	cmp	r6, #0
 800db5e:	dd05      	ble.n	800db6c <_dtoa_r+0x984>
 800db60:	4629      	mov	r1, r5
 800db62:	4632      	mov	r2, r6
 800db64:	4648      	mov	r0, r9
 800db66:	f000 fc17 	bl	800e398 <__lshift>
 800db6a:	4605      	mov	r5, r0
 800db6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d05c      	beq.n	800dc2c <_dtoa_r+0xa44>
 800db72:	4648      	mov	r0, r9
 800db74:	6869      	ldr	r1, [r5, #4]
 800db76:	f000 fa09 	bl	800df8c <_Balloc>
 800db7a:	4606      	mov	r6, r0
 800db7c:	b928      	cbnz	r0, 800db8a <_dtoa_r+0x9a2>
 800db7e:	4602      	mov	r2, r0
 800db80:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db84:	4b80      	ldr	r3, [pc, #512]	@ (800dd88 <_dtoa_r+0xba0>)
 800db86:	f7ff bb43 	b.w	800d210 <_dtoa_r+0x28>
 800db8a:	692a      	ldr	r2, [r5, #16]
 800db8c:	f105 010c 	add.w	r1, r5, #12
 800db90:	3202      	adds	r2, #2
 800db92:	0092      	lsls	r2, r2, #2
 800db94:	300c      	adds	r0, #12
 800db96:	f001 f959 	bl	800ee4c <memcpy>
 800db9a:	2201      	movs	r2, #1
 800db9c:	4631      	mov	r1, r6
 800db9e:	4648      	mov	r0, r9
 800dba0:	f000 fbfa 	bl	800e398 <__lshift>
 800dba4:	462f      	mov	r7, r5
 800dba6:	4605      	mov	r5, r0
 800dba8:	f10a 0301 	add.w	r3, sl, #1
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	eb0a 030b 	add.w	r3, sl, fp
 800dbb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbb4:	9b06      	ldr	r3, [sp, #24]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	9803      	ldr	r0, [sp, #12]
 800dbc2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dbc6:	f7ff fa87 	bl	800d0d8 <quorem>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4639      	mov	r1, r7
 800dbce:	3330      	adds	r3, #48	@ 0x30
 800dbd0:	9006      	str	r0, [sp, #24]
 800dbd2:	9803      	ldr	r0, [sp, #12]
 800dbd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbd6:	f000 fc4b 	bl	800e470 <__mcmp>
 800dbda:	462a      	mov	r2, r5
 800dbdc:	9008      	str	r0, [sp, #32]
 800dbde:	4621      	mov	r1, r4
 800dbe0:	4648      	mov	r0, r9
 800dbe2:	f000 fc61 	bl	800e4a8 <__mdiff>
 800dbe6:	68c2      	ldr	r2, [r0, #12]
 800dbe8:	4606      	mov	r6, r0
 800dbea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbec:	bb02      	cbnz	r2, 800dc30 <_dtoa_r+0xa48>
 800dbee:	4601      	mov	r1, r0
 800dbf0:	9803      	ldr	r0, [sp, #12]
 800dbf2:	f000 fc3d 	bl	800e470 <__mcmp>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4648      	mov	r0, r9
 800dbfe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800dc02:	f000 fa03 	bl	800e00c <_Bfree>
 800dc06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dc08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc0a:	9e04      	ldr	r6, [sp, #16]
 800dc0c:	ea42 0103 	orr.w	r1, r2, r3
 800dc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc12:	4319      	orrs	r1, r3
 800dc14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc16:	d10d      	bne.n	800dc34 <_dtoa_r+0xa4c>
 800dc18:	2b39      	cmp	r3, #57	@ 0x39
 800dc1a:	d027      	beq.n	800dc6c <_dtoa_r+0xa84>
 800dc1c:	9a08      	ldr	r2, [sp, #32]
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	dd01      	ble.n	800dc26 <_dtoa_r+0xa3e>
 800dc22:	9b06      	ldr	r3, [sp, #24]
 800dc24:	3331      	adds	r3, #49	@ 0x31
 800dc26:	f88b 3000 	strb.w	r3, [fp]
 800dc2a:	e52e      	b.n	800d68a <_dtoa_r+0x4a2>
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	e7b9      	b.n	800dba4 <_dtoa_r+0x9bc>
 800dc30:	2201      	movs	r2, #1
 800dc32:	e7e2      	b.n	800dbfa <_dtoa_r+0xa12>
 800dc34:	9908      	ldr	r1, [sp, #32]
 800dc36:	2900      	cmp	r1, #0
 800dc38:	db04      	blt.n	800dc44 <_dtoa_r+0xa5c>
 800dc3a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800dc3c:	4301      	orrs	r1, r0
 800dc3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc40:	4301      	orrs	r1, r0
 800dc42:	d120      	bne.n	800dc86 <_dtoa_r+0xa9e>
 800dc44:	2a00      	cmp	r2, #0
 800dc46:	ddee      	ble.n	800dc26 <_dtoa_r+0xa3e>
 800dc48:	2201      	movs	r2, #1
 800dc4a:	9903      	ldr	r1, [sp, #12]
 800dc4c:	4648      	mov	r0, r9
 800dc4e:	9304      	str	r3, [sp, #16]
 800dc50:	f000 fba2 	bl	800e398 <__lshift>
 800dc54:	4621      	mov	r1, r4
 800dc56:	9003      	str	r0, [sp, #12]
 800dc58:	f000 fc0a 	bl	800e470 <__mcmp>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	dc02      	bgt.n	800dc68 <_dtoa_r+0xa80>
 800dc62:	d1e0      	bne.n	800dc26 <_dtoa_r+0xa3e>
 800dc64:	07da      	lsls	r2, r3, #31
 800dc66:	d5de      	bpl.n	800dc26 <_dtoa_r+0xa3e>
 800dc68:	2b39      	cmp	r3, #57	@ 0x39
 800dc6a:	d1da      	bne.n	800dc22 <_dtoa_r+0xa3a>
 800dc6c:	2339      	movs	r3, #57	@ 0x39
 800dc6e:	f88b 3000 	strb.w	r3, [fp]
 800dc72:	4633      	mov	r3, r6
 800dc74:	461e      	mov	r6, r3
 800dc76:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	2a39      	cmp	r2, #57	@ 0x39
 800dc7e:	d04e      	beq.n	800dd1e <_dtoa_r+0xb36>
 800dc80:	3201      	adds	r2, #1
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	e501      	b.n	800d68a <_dtoa_r+0x4a2>
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	dd03      	ble.n	800dc92 <_dtoa_r+0xaaa>
 800dc8a:	2b39      	cmp	r3, #57	@ 0x39
 800dc8c:	d0ee      	beq.n	800dc6c <_dtoa_r+0xa84>
 800dc8e:	3301      	adds	r3, #1
 800dc90:	e7c9      	b.n	800dc26 <_dtoa_r+0xa3e>
 800dc92:	9a04      	ldr	r2, [sp, #16]
 800dc94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc9a:	428a      	cmp	r2, r1
 800dc9c:	d028      	beq.n	800dcf0 <_dtoa_r+0xb08>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	220a      	movs	r2, #10
 800dca2:	9903      	ldr	r1, [sp, #12]
 800dca4:	4648      	mov	r0, r9
 800dca6:	f000 f9d3 	bl	800e050 <__multadd>
 800dcaa:	42af      	cmp	r7, r5
 800dcac:	9003      	str	r0, [sp, #12]
 800dcae:	f04f 0300 	mov.w	r3, #0
 800dcb2:	f04f 020a 	mov.w	r2, #10
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	4648      	mov	r0, r9
 800dcba:	d107      	bne.n	800dccc <_dtoa_r+0xae4>
 800dcbc:	f000 f9c8 	bl	800e050 <__multadd>
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	9b04      	ldr	r3, [sp, #16]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	e777      	b.n	800dbbc <_dtoa_r+0x9d4>
 800dccc:	f000 f9c0 	bl	800e050 <__multadd>
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	220a      	movs	r2, #10
 800dcd8:	4648      	mov	r0, r9
 800dcda:	f000 f9b9 	bl	800e050 <__multadd>
 800dcde:	4605      	mov	r5, r0
 800dce0:	e7f0      	b.n	800dcc4 <_dtoa_r+0xadc>
 800dce2:	f1bb 0f00 	cmp.w	fp, #0
 800dce6:	bfcc      	ite	gt
 800dce8:	465e      	movgt	r6, fp
 800dcea:	2601      	movle	r6, #1
 800dcec:	2700      	movs	r7, #0
 800dcee:	4456      	add	r6, sl
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	9903      	ldr	r1, [sp, #12]
 800dcf4:	4648      	mov	r0, r9
 800dcf6:	9304      	str	r3, [sp, #16]
 800dcf8:	f000 fb4e 	bl	800e398 <__lshift>
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	9003      	str	r0, [sp, #12]
 800dd00:	f000 fbb6 	bl	800e470 <__mcmp>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	dcb4      	bgt.n	800dc72 <_dtoa_r+0xa8a>
 800dd08:	d102      	bne.n	800dd10 <_dtoa_r+0xb28>
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	07db      	lsls	r3, r3, #31
 800dd0e:	d4b0      	bmi.n	800dc72 <_dtoa_r+0xa8a>
 800dd10:	4633      	mov	r3, r6
 800dd12:	461e      	mov	r6, r3
 800dd14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd18:	2a30      	cmp	r2, #48	@ 0x30
 800dd1a:	d0fa      	beq.n	800dd12 <_dtoa_r+0xb2a>
 800dd1c:	e4b5      	b.n	800d68a <_dtoa_r+0x4a2>
 800dd1e:	459a      	cmp	sl, r3
 800dd20:	d1a8      	bne.n	800dc74 <_dtoa_r+0xa8c>
 800dd22:	2331      	movs	r3, #49	@ 0x31
 800dd24:	f108 0801 	add.w	r8, r8, #1
 800dd28:	f88a 3000 	strb.w	r3, [sl]
 800dd2c:	e4ad      	b.n	800d68a <_dtoa_r+0x4a2>
 800dd2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dd30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dd8c <_dtoa_r+0xba4>
 800dd34:	b11b      	cbz	r3, 800dd3e <_dtoa_r+0xb56>
 800dd36:	f10a 0308 	add.w	r3, sl, #8
 800dd3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	4650      	mov	r0, sl
 800dd40:	b017      	add	sp, #92	@ 0x5c
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	f77f ae2e 	ble.w	800d9aa <_dtoa_r+0x7c2>
 800dd4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd50:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd52:	2001      	movs	r0, #1
 800dd54:	e64d      	b.n	800d9f2 <_dtoa_r+0x80a>
 800dd56:	f1bb 0f00 	cmp.w	fp, #0
 800dd5a:	f77f aed9 	ble.w	800db10 <_dtoa_r+0x928>
 800dd5e:	4656      	mov	r6, sl
 800dd60:	4621      	mov	r1, r4
 800dd62:	9803      	ldr	r0, [sp, #12]
 800dd64:	f7ff f9b8 	bl	800d0d8 <quorem>
 800dd68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dd6c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd70:	eba6 020a 	sub.w	r2, r6, sl
 800dd74:	4593      	cmp	fp, r2
 800dd76:	ddb4      	ble.n	800dce2 <_dtoa_r+0xafa>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	220a      	movs	r2, #10
 800dd7c:	4648      	mov	r0, r9
 800dd7e:	9903      	ldr	r1, [sp, #12]
 800dd80:	f000 f966 	bl	800e050 <__multadd>
 800dd84:	9003      	str	r0, [sp, #12]
 800dd86:	e7eb      	b.n	800dd60 <_dtoa_r+0xb78>
 800dd88:	0800f921 	.word	0x0800f921
 800dd8c:	0800f8bc 	.word	0x0800f8bc

0800dd90 <_free_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4605      	mov	r5, r0
 800dd94:	2900      	cmp	r1, #0
 800dd96:	d040      	beq.n	800de1a <_free_r+0x8a>
 800dd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd9c:	1f0c      	subs	r4, r1, #4
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bfb8      	it	lt
 800dda2:	18e4      	addlt	r4, r4, r3
 800dda4:	f000 f8e6 	bl	800df74 <__malloc_lock>
 800dda8:	4a1c      	ldr	r2, [pc, #112]	@ (800de1c <_free_r+0x8c>)
 800ddaa:	6813      	ldr	r3, [r2, #0]
 800ddac:	b933      	cbnz	r3, 800ddbc <_free_r+0x2c>
 800ddae:	6063      	str	r3, [r4, #4]
 800ddb0:	6014      	str	r4, [r2, #0]
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddb8:	f000 b8e2 	b.w	800df80 <__malloc_unlock>
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	d908      	bls.n	800ddd2 <_free_r+0x42>
 800ddc0:	6820      	ldr	r0, [r4, #0]
 800ddc2:	1821      	adds	r1, r4, r0
 800ddc4:	428b      	cmp	r3, r1
 800ddc6:	bf01      	itttt	eq
 800ddc8:	6819      	ldreq	r1, [r3, #0]
 800ddca:	685b      	ldreq	r3, [r3, #4]
 800ddcc:	1809      	addeq	r1, r1, r0
 800ddce:	6021      	streq	r1, [r4, #0]
 800ddd0:	e7ed      	b.n	800ddae <_free_r+0x1e>
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	b10b      	cbz	r3, 800dddc <_free_r+0x4c>
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d9fa      	bls.n	800ddd2 <_free_r+0x42>
 800dddc:	6811      	ldr	r1, [r2, #0]
 800ddde:	1850      	adds	r0, r2, r1
 800dde0:	42a0      	cmp	r0, r4
 800dde2:	d10b      	bne.n	800ddfc <_free_r+0x6c>
 800dde4:	6820      	ldr	r0, [r4, #0]
 800dde6:	4401      	add	r1, r0
 800dde8:	1850      	adds	r0, r2, r1
 800ddea:	4283      	cmp	r3, r0
 800ddec:	6011      	str	r1, [r2, #0]
 800ddee:	d1e0      	bne.n	800ddb2 <_free_r+0x22>
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	4408      	add	r0, r1
 800ddf6:	6010      	str	r0, [r2, #0]
 800ddf8:	6053      	str	r3, [r2, #4]
 800ddfa:	e7da      	b.n	800ddb2 <_free_r+0x22>
 800ddfc:	d902      	bls.n	800de04 <_free_r+0x74>
 800ddfe:	230c      	movs	r3, #12
 800de00:	602b      	str	r3, [r5, #0]
 800de02:	e7d6      	b.n	800ddb2 <_free_r+0x22>
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	1821      	adds	r1, r4, r0
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf01      	itttt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	1809      	addeq	r1, r1, r0
 800de12:	6021      	streq	r1, [r4, #0]
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	6054      	str	r4, [r2, #4]
 800de18:	e7cb      	b.n	800ddb2 <_free_r+0x22>
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	20000880 	.word	0x20000880

0800de20 <malloc>:
 800de20:	4b02      	ldr	r3, [pc, #8]	@ (800de2c <malloc+0xc>)
 800de22:	4601      	mov	r1, r0
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	f000 b825 	b.w	800de74 <_malloc_r>
 800de2a:	bf00      	nop
 800de2c:	20000074 	.word	0x20000074

0800de30 <sbrk_aligned>:
 800de30:	b570      	push	{r4, r5, r6, lr}
 800de32:	4e0f      	ldr	r6, [pc, #60]	@ (800de70 <sbrk_aligned+0x40>)
 800de34:	460c      	mov	r4, r1
 800de36:	6831      	ldr	r1, [r6, #0]
 800de38:	4605      	mov	r5, r0
 800de3a:	b911      	cbnz	r1, 800de42 <sbrk_aligned+0x12>
 800de3c:	f000 fff6 	bl	800ee2c <_sbrk_r>
 800de40:	6030      	str	r0, [r6, #0]
 800de42:	4621      	mov	r1, r4
 800de44:	4628      	mov	r0, r5
 800de46:	f000 fff1 	bl	800ee2c <_sbrk_r>
 800de4a:	1c43      	adds	r3, r0, #1
 800de4c:	d103      	bne.n	800de56 <sbrk_aligned+0x26>
 800de4e:	f04f 34ff 	mov.w	r4, #4294967295
 800de52:	4620      	mov	r0, r4
 800de54:	bd70      	pop	{r4, r5, r6, pc}
 800de56:	1cc4      	adds	r4, r0, #3
 800de58:	f024 0403 	bic.w	r4, r4, #3
 800de5c:	42a0      	cmp	r0, r4
 800de5e:	d0f8      	beq.n	800de52 <sbrk_aligned+0x22>
 800de60:	1a21      	subs	r1, r4, r0
 800de62:	4628      	mov	r0, r5
 800de64:	f000 ffe2 	bl	800ee2c <_sbrk_r>
 800de68:	3001      	adds	r0, #1
 800de6a:	d1f2      	bne.n	800de52 <sbrk_aligned+0x22>
 800de6c:	e7ef      	b.n	800de4e <sbrk_aligned+0x1e>
 800de6e:	bf00      	nop
 800de70:	2000087c 	.word	0x2000087c

0800de74 <_malloc_r>:
 800de74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de78:	1ccd      	adds	r5, r1, #3
 800de7a:	f025 0503 	bic.w	r5, r5, #3
 800de7e:	3508      	adds	r5, #8
 800de80:	2d0c      	cmp	r5, #12
 800de82:	bf38      	it	cc
 800de84:	250c      	movcc	r5, #12
 800de86:	2d00      	cmp	r5, #0
 800de88:	4606      	mov	r6, r0
 800de8a:	db01      	blt.n	800de90 <_malloc_r+0x1c>
 800de8c:	42a9      	cmp	r1, r5
 800de8e:	d904      	bls.n	800de9a <_malloc_r+0x26>
 800de90:	230c      	movs	r3, #12
 800de92:	6033      	str	r3, [r6, #0]
 800de94:	2000      	movs	r0, #0
 800de96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df70 <_malloc_r+0xfc>
 800de9e:	f000 f869 	bl	800df74 <__malloc_lock>
 800dea2:	f8d8 3000 	ldr.w	r3, [r8]
 800dea6:	461c      	mov	r4, r3
 800dea8:	bb44      	cbnz	r4, 800defc <_malloc_r+0x88>
 800deaa:	4629      	mov	r1, r5
 800deac:	4630      	mov	r0, r6
 800deae:	f7ff ffbf 	bl	800de30 <sbrk_aligned>
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	4604      	mov	r4, r0
 800deb6:	d158      	bne.n	800df6a <_malloc_r+0xf6>
 800deb8:	f8d8 4000 	ldr.w	r4, [r8]
 800debc:	4627      	mov	r7, r4
 800debe:	2f00      	cmp	r7, #0
 800dec0:	d143      	bne.n	800df4a <_malloc_r+0xd6>
 800dec2:	2c00      	cmp	r4, #0
 800dec4:	d04b      	beq.n	800df5e <_malloc_r+0xea>
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	4639      	mov	r1, r7
 800deca:	4630      	mov	r0, r6
 800decc:	eb04 0903 	add.w	r9, r4, r3
 800ded0:	f000 ffac 	bl	800ee2c <_sbrk_r>
 800ded4:	4581      	cmp	r9, r0
 800ded6:	d142      	bne.n	800df5e <_malloc_r+0xea>
 800ded8:	6821      	ldr	r1, [r4, #0]
 800deda:	4630      	mov	r0, r6
 800dedc:	1a6d      	subs	r5, r5, r1
 800dede:	4629      	mov	r1, r5
 800dee0:	f7ff ffa6 	bl	800de30 <sbrk_aligned>
 800dee4:	3001      	adds	r0, #1
 800dee6:	d03a      	beq.n	800df5e <_malloc_r+0xea>
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	442b      	add	r3, r5
 800deec:	6023      	str	r3, [r4, #0]
 800deee:	f8d8 3000 	ldr.w	r3, [r8]
 800def2:	685a      	ldr	r2, [r3, #4]
 800def4:	bb62      	cbnz	r2, 800df50 <_malloc_r+0xdc>
 800def6:	f8c8 7000 	str.w	r7, [r8]
 800defa:	e00f      	b.n	800df1c <_malloc_r+0xa8>
 800defc:	6822      	ldr	r2, [r4, #0]
 800defe:	1b52      	subs	r2, r2, r5
 800df00:	d420      	bmi.n	800df44 <_malloc_r+0xd0>
 800df02:	2a0b      	cmp	r2, #11
 800df04:	d917      	bls.n	800df36 <_malloc_r+0xc2>
 800df06:	1961      	adds	r1, r4, r5
 800df08:	42a3      	cmp	r3, r4
 800df0a:	6025      	str	r5, [r4, #0]
 800df0c:	bf18      	it	ne
 800df0e:	6059      	strne	r1, [r3, #4]
 800df10:	6863      	ldr	r3, [r4, #4]
 800df12:	bf08      	it	eq
 800df14:	f8c8 1000 	streq.w	r1, [r8]
 800df18:	5162      	str	r2, [r4, r5]
 800df1a:	604b      	str	r3, [r1, #4]
 800df1c:	4630      	mov	r0, r6
 800df1e:	f000 f82f 	bl	800df80 <__malloc_unlock>
 800df22:	f104 000b 	add.w	r0, r4, #11
 800df26:	1d23      	adds	r3, r4, #4
 800df28:	f020 0007 	bic.w	r0, r0, #7
 800df2c:	1ac2      	subs	r2, r0, r3
 800df2e:	bf1c      	itt	ne
 800df30:	1a1b      	subne	r3, r3, r0
 800df32:	50a3      	strne	r3, [r4, r2]
 800df34:	e7af      	b.n	800de96 <_malloc_r+0x22>
 800df36:	6862      	ldr	r2, [r4, #4]
 800df38:	42a3      	cmp	r3, r4
 800df3a:	bf0c      	ite	eq
 800df3c:	f8c8 2000 	streq.w	r2, [r8]
 800df40:	605a      	strne	r2, [r3, #4]
 800df42:	e7eb      	b.n	800df1c <_malloc_r+0xa8>
 800df44:	4623      	mov	r3, r4
 800df46:	6864      	ldr	r4, [r4, #4]
 800df48:	e7ae      	b.n	800dea8 <_malloc_r+0x34>
 800df4a:	463c      	mov	r4, r7
 800df4c:	687f      	ldr	r7, [r7, #4]
 800df4e:	e7b6      	b.n	800debe <_malloc_r+0x4a>
 800df50:	461a      	mov	r2, r3
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	42a3      	cmp	r3, r4
 800df56:	d1fb      	bne.n	800df50 <_malloc_r+0xdc>
 800df58:	2300      	movs	r3, #0
 800df5a:	6053      	str	r3, [r2, #4]
 800df5c:	e7de      	b.n	800df1c <_malloc_r+0xa8>
 800df5e:	230c      	movs	r3, #12
 800df60:	4630      	mov	r0, r6
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	f000 f80c 	bl	800df80 <__malloc_unlock>
 800df68:	e794      	b.n	800de94 <_malloc_r+0x20>
 800df6a:	6005      	str	r5, [r0, #0]
 800df6c:	e7d6      	b.n	800df1c <_malloc_r+0xa8>
 800df6e:	bf00      	nop
 800df70:	20000880 	.word	0x20000880

0800df74 <__malloc_lock>:
 800df74:	4801      	ldr	r0, [pc, #4]	@ (800df7c <__malloc_lock+0x8>)
 800df76:	f7ff b880 	b.w	800d07a <__retarget_lock_acquire_recursive>
 800df7a:	bf00      	nop
 800df7c:	20000878 	.word	0x20000878

0800df80 <__malloc_unlock>:
 800df80:	4801      	ldr	r0, [pc, #4]	@ (800df88 <__malloc_unlock+0x8>)
 800df82:	f7ff b87b 	b.w	800d07c <__retarget_lock_release_recursive>
 800df86:	bf00      	nop
 800df88:	20000878 	.word	0x20000878

0800df8c <_Balloc>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	69c6      	ldr	r6, [r0, #28]
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	b976      	cbnz	r6, 800dfb4 <_Balloc+0x28>
 800df96:	2010      	movs	r0, #16
 800df98:	f7ff ff42 	bl	800de20 <malloc>
 800df9c:	4602      	mov	r2, r0
 800df9e:	61e0      	str	r0, [r4, #28]
 800dfa0:	b920      	cbnz	r0, 800dfac <_Balloc+0x20>
 800dfa2:	216b      	movs	r1, #107	@ 0x6b
 800dfa4:	4b17      	ldr	r3, [pc, #92]	@ (800e004 <_Balloc+0x78>)
 800dfa6:	4818      	ldr	r0, [pc, #96]	@ (800e008 <_Balloc+0x7c>)
 800dfa8:	f7ff f878 	bl	800d09c <__assert_func>
 800dfac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfb0:	6006      	str	r6, [r0, #0]
 800dfb2:	60c6      	str	r6, [r0, #12]
 800dfb4:	69e6      	ldr	r6, [r4, #28]
 800dfb6:	68f3      	ldr	r3, [r6, #12]
 800dfb8:	b183      	cbz	r3, 800dfdc <_Balloc+0x50>
 800dfba:	69e3      	ldr	r3, [r4, #28]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfc2:	b9b8      	cbnz	r0, 800dff4 <_Balloc+0x68>
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	fa01 f605 	lsl.w	r6, r1, r5
 800dfca:	1d72      	adds	r2, r6, #5
 800dfcc:	4620      	mov	r0, r4
 800dfce:	0092      	lsls	r2, r2, #2
 800dfd0:	f000 ff51 	bl	800ee76 <_calloc_r>
 800dfd4:	b160      	cbz	r0, 800dff0 <_Balloc+0x64>
 800dfd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfda:	e00e      	b.n	800dffa <_Balloc+0x6e>
 800dfdc:	2221      	movs	r2, #33	@ 0x21
 800dfde:	2104      	movs	r1, #4
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 ff48 	bl	800ee76 <_calloc_r>
 800dfe6:	69e3      	ldr	r3, [r4, #28]
 800dfe8:	60f0      	str	r0, [r6, #12]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e4      	bne.n	800dfba <_Balloc+0x2e>
 800dff0:	2000      	movs	r0, #0
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	6802      	ldr	r2, [r0, #0]
 800dff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dffa:	2300      	movs	r3, #0
 800dffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e000:	e7f7      	b.n	800dff2 <_Balloc+0x66>
 800e002:	bf00      	nop
 800e004:	0800f80f 	.word	0x0800f80f
 800e008:	0800f932 	.word	0x0800f932

0800e00c <_Bfree>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	69c6      	ldr	r6, [r0, #28]
 800e010:	4605      	mov	r5, r0
 800e012:	460c      	mov	r4, r1
 800e014:	b976      	cbnz	r6, 800e034 <_Bfree+0x28>
 800e016:	2010      	movs	r0, #16
 800e018:	f7ff ff02 	bl	800de20 <malloc>
 800e01c:	4602      	mov	r2, r0
 800e01e:	61e8      	str	r0, [r5, #28]
 800e020:	b920      	cbnz	r0, 800e02c <_Bfree+0x20>
 800e022:	218f      	movs	r1, #143	@ 0x8f
 800e024:	4b08      	ldr	r3, [pc, #32]	@ (800e048 <_Bfree+0x3c>)
 800e026:	4809      	ldr	r0, [pc, #36]	@ (800e04c <_Bfree+0x40>)
 800e028:	f7ff f838 	bl	800d09c <__assert_func>
 800e02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e030:	6006      	str	r6, [r0, #0]
 800e032:	60c6      	str	r6, [r0, #12]
 800e034:	b13c      	cbz	r4, 800e046 <_Bfree+0x3a>
 800e036:	69eb      	ldr	r3, [r5, #28]
 800e038:	6862      	ldr	r2, [r4, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e040:	6021      	str	r1, [r4, #0]
 800e042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	0800f80f 	.word	0x0800f80f
 800e04c:	0800f932 	.word	0x0800f932

0800e050 <__multadd>:
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	4607      	mov	r7, r0
 800e056:	460c      	mov	r4, r1
 800e058:	461e      	mov	r6, r3
 800e05a:	2000      	movs	r0, #0
 800e05c:	690d      	ldr	r5, [r1, #16]
 800e05e:	f101 0c14 	add.w	ip, r1, #20
 800e062:	f8dc 3000 	ldr.w	r3, [ip]
 800e066:	3001      	adds	r0, #1
 800e068:	b299      	uxth	r1, r3
 800e06a:	fb02 6101 	mla	r1, r2, r1, r6
 800e06e:	0c1e      	lsrs	r6, r3, #16
 800e070:	0c0b      	lsrs	r3, r1, #16
 800e072:	fb02 3306 	mla	r3, r2, r6, r3
 800e076:	b289      	uxth	r1, r1
 800e078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e07c:	4285      	cmp	r5, r0
 800e07e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e082:	f84c 1b04 	str.w	r1, [ip], #4
 800e086:	dcec      	bgt.n	800e062 <__multadd+0x12>
 800e088:	b30e      	cbz	r6, 800e0ce <__multadd+0x7e>
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	42ab      	cmp	r3, r5
 800e08e:	dc19      	bgt.n	800e0c4 <__multadd+0x74>
 800e090:	6861      	ldr	r1, [r4, #4]
 800e092:	4638      	mov	r0, r7
 800e094:	3101      	adds	r1, #1
 800e096:	f7ff ff79 	bl	800df8c <_Balloc>
 800e09a:	4680      	mov	r8, r0
 800e09c:	b928      	cbnz	r0, 800e0aa <__multadd+0x5a>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	21ba      	movs	r1, #186	@ 0xba
 800e0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d4 <__multadd+0x84>)
 800e0a4:	480c      	ldr	r0, [pc, #48]	@ (800e0d8 <__multadd+0x88>)
 800e0a6:	f7fe fff9 	bl	800d09c <__assert_func>
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	f104 010c 	add.w	r1, r4, #12
 800e0b0:	3202      	adds	r2, #2
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	f000 fec9 	bl	800ee4c <memcpy>
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff ffa5 	bl	800e00c <_Bfree>
 800e0c2:	4644      	mov	r4, r8
 800e0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	615e      	str	r6, [r3, #20]
 800e0cc:	6125      	str	r5, [r4, #16]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	0800f921 	.word	0x0800f921
 800e0d8:	0800f932 	.word	0x0800f932

0800e0dc <__hi0bits>:
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e0e2:	bf3a      	itte	cc
 800e0e4:	0403      	lslcc	r3, r0, #16
 800e0e6:	2010      	movcc	r0, #16
 800e0e8:	2000      	movcs	r0, #0
 800e0ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0ee:	bf3c      	itt	cc
 800e0f0:	021b      	lslcc	r3, r3, #8
 800e0f2:	3008      	addcc	r0, #8
 800e0f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0f8:	bf3c      	itt	cc
 800e0fa:	011b      	lslcc	r3, r3, #4
 800e0fc:	3004      	addcc	r0, #4
 800e0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e102:	bf3c      	itt	cc
 800e104:	009b      	lslcc	r3, r3, #2
 800e106:	3002      	addcc	r0, #2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db05      	blt.n	800e118 <__hi0bits+0x3c>
 800e10c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e110:	f100 0001 	add.w	r0, r0, #1
 800e114:	bf08      	it	eq
 800e116:	2020      	moveq	r0, #32
 800e118:	4770      	bx	lr

0800e11a <__lo0bits>:
 800e11a:	6803      	ldr	r3, [r0, #0]
 800e11c:	4602      	mov	r2, r0
 800e11e:	f013 0007 	ands.w	r0, r3, #7
 800e122:	d00b      	beq.n	800e13c <__lo0bits+0x22>
 800e124:	07d9      	lsls	r1, r3, #31
 800e126:	d421      	bmi.n	800e16c <__lo0bits+0x52>
 800e128:	0798      	lsls	r0, r3, #30
 800e12a:	bf49      	itett	mi
 800e12c:	085b      	lsrmi	r3, r3, #1
 800e12e:	089b      	lsrpl	r3, r3, #2
 800e130:	2001      	movmi	r0, #1
 800e132:	6013      	strmi	r3, [r2, #0]
 800e134:	bf5c      	itt	pl
 800e136:	2002      	movpl	r0, #2
 800e138:	6013      	strpl	r3, [r2, #0]
 800e13a:	4770      	bx	lr
 800e13c:	b299      	uxth	r1, r3
 800e13e:	b909      	cbnz	r1, 800e144 <__lo0bits+0x2a>
 800e140:	2010      	movs	r0, #16
 800e142:	0c1b      	lsrs	r3, r3, #16
 800e144:	b2d9      	uxtb	r1, r3
 800e146:	b909      	cbnz	r1, 800e14c <__lo0bits+0x32>
 800e148:	3008      	adds	r0, #8
 800e14a:	0a1b      	lsrs	r3, r3, #8
 800e14c:	0719      	lsls	r1, r3, #28
 800e14e:	bf04      	itt	eq
 800e150:	091b      	lsreq	r3, r3, #4
 800e152:	3004      	addeq	r0, #4
 800e154:	0799      	lsls	r1, r3, #30
 800e156:	bf04      	itt	eq
 800e158:	089b      	lsreq	r3, r3, #2
 800e15a:	3002      	addeq	r0, #2
 800e15c:	07d9      	lsls	r1, r3, #31
 800e15e:	d403      	bmi.n	800e168 <__lo0bits+0x4e>
 800e160:	085b      	lsrs	r3, r3, #1
 800e162:	f100 0001 	add.w	r0, r0, #1
 800e166:	d003      	beq.n	800e170 <__lo0bits+0x56>
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	4770      	bx	lr
 800e16c:	2000      	movs	r0, #0
 800e16e:	4770      	bx	lr
 800e170:	2020      	movs	r0, #32
 800e172:	4770      	bx	lr

0800e174 <__i2b>:
 800e174:	b510      	push	{r4, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	2101      	movs	r1, #1
 800e17a:	f7ff ff07 	bl	800df8c <_Balloc>
 800e17e:	4602      	mov	r2, r0
 800e180:	b928      	cbnz	r0, 800e18e <__i2b+0x1a>
 800e182:	f240 1145 	movw	r1, #325	@ 0x145
 800e186:	4b04      	ldr	r3, [pc, #16]	@ (800e198 <__i2b+0x24>)
 800e188:	4804      	ldr	r0, [pc, #16]	@ (800e19c <__i2b+0x28>)
 800e18a:	f7fe ff87 	bl	800d09c <__assert_func>
 800e18e:	2301      	movs	r3, #1
 800e190:	6144      	str	r4, [r0, #20]
 800e192:	6103      	str	r3, [r0, #16]
 800e194:	bd10      	pop	{r4, pc}
 800e196:	bf00      	nop
 800e198:	0800f921 	.word	0x0800f921
 800e19c:	0800f932 	.word	0x0800f932

0800e1a0 <__multiply>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	4617      	mov	r7, r2
 800e1a6:	690a      	ldr	r2, [r1, #16]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	4689      	mov	r9, r1
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	bfa2      	ittt	ge
 800e1b0:	463b      	movge	r3, r7
 800e1b2:	460f      	movge	r7, r1
 800e1b4:	4699      	movge	r9, r3
 800e1b6:	693d      	ldr	r5, [r7, #16]
 800e1b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	eb05 060a 	add.w	r6, r5, sl
 800e1c4:	42b3      	cmp	r3, r6
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	bfb8      	it	lt
 800e1ca:	3101      	addlt	r1, #1
 800e1cc:	f7ff fede 	bl	800df8c <_Balloc>
 800e1d0:	b930      	cbnz	r0, 800e1e0 <__multiply+0x40>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e1d8:	4b40      	ldr	r3, [pc, #256]	@ (800e2dc <__multiply+0x13c>)
 800e1da:	4841      	ldr	r0, [pc, #260]	@ (800e2e0 <__multiply+0x140>)
 800e1dc:	f7fe ff5e 	bl	800d09c <__assert_func>
 800e1e0:	f100 0414 	add.w	r4, r0, #20
 800e1e4:	4623      	mov	r3, r4
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e1ec:	4573      	cmp	r3, lr
 800e1ee:	d320      	bcc.n	800e232 <__multiply+0x92>
 800e1f0:	f107 0814 	add.w	r8, r7, #20
 800e1f4:	f109 0114 	add.w	r1, r9, #20
 800e1f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e1fc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	1beb      	subs	r3, r5, r7
 800e204:	3b15      	subs	r3, #21
 800e206:	f023 0303 	bic.w	r3, r3, #3
 800e20a:	3304      	adds	r3, #4
 800e20c:	3715      	adds	r7, #21
 800e20e:	42bd      	cmp	r5, r7
 800e210:	bf38      	it	cc
 800e212:	2304      	movcc	r3, #4
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	9103      	str	r1, [sp, #12]
 800e21a:	428b      	cmp	r3, r1
 800e21c:	d80c      	bhi.n	800e238 <__multiply+0x98>
 800e21e:	2e00      	cmp	r6, #0
 800e220:	dd03      	ble.n	800e22a <__multiply+0x8a>
 800e222:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e226:	2b00      	cmp	r3, #0
 800e228:	d055      	beq.n	800e2d6 <__multiply+0x136>
 800e22a:	6106      	str	r6, [r0, #16]
 800e22c:	b005      	add	sp, #20
 800e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	f843 2b04 	str.w	r2, [r3], #4
 800e236:	e7d9      	b.n	800e1ec <__multiply+0x4c>
 800e238:	f8b1 a000 	ldrh.w	sl, [r1]
 800e23c:	f1ba 0f00 	cmp.w	sl, #0
 800e240:	d01f      	beq.n	800e282 <__multiply+0xe2>
 800e242:	46c4      	mov	ip, r8
 800e244:	46a1      	mov	r9, r4
 800e246:	2700      	movs	r7, #0
 800e248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e24c:	f8d9 3000 	ldr.w	r3, [r9]
 800e250:	fa1f fb82 	uxth.w	fp, r2
 800e254:	b29b      	uxth	r3, r3
 800e256:	fb0a 330b 	mla	r3, sl, fp, r3
 800e25a:	443b      	add	r3, r7
 800e25c:	f8d9 7000 	ldr.w	r7, [r9]
 800e260:	0c12      	lsrs	r2, r2, #16
 800e262:	0c3f      	lsrs	r7, r7, #16
 800e264:	fb0a 7202 	mla	r2, sl, r2, r7
 800e268:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e272:	4565      	cmp	r5, ip
 800e274:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e278:	f849 3b04 	str.w	r3, [r9], #4
 800e27c:	d8e4      	bhi.n	800e248 <__multiply+0xa8>
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	50e7      	str	r7, [r4, r3]
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	3104      	adds	r1, #4
 800e286:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e28a:	f1b9 0f00 	cmp.w	r9, #0
 800e28e:	d020      	beq.n	800e2d2 <__multiply+0x132>
 800e290:	4647      	mov	r7, r8
 800e292:	46a4      	mov	ip, r4
 800e294:	f04f 0a00 	mov.w	sl, #0
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	f8b7 b000 	ldrh.w	fp, [r7]
 800e29e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	fb09 220b 	mla	r2, r9, fp, r2
 800e2a8:	4452      	add	r2, sl
 800e2aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ae:	f84c 3b04 	str.w	r3, [ip], #4
 800e2b2:	f857 3b04 	ldr.w	r3, [r7], #4
 800e2b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2ba:	f8bc 3000 	ldrh.w	r3, [ip]
 800e2be:	42bd      	cmp	r5, r7
 800e2c0:	fb09 330a 	mla	r3, r9, sl, r3
 800e2c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2cc:	d8e5      	bhi.n	800e29a <__multiply+0xfa>
 800e2ce:	9a01      	ldr	r2, [sp, #4]
 800e2d0:	50a3      	str	r3, [r4, r2]
 800e2d2:	3404      	adds	r4, #4
 800e2d4:	e79f      	b.n	800e216 <__multiply+0x76>
 800e2d6:	3e01      	subs	r6, #1
 800e2d8:	e7a1      	b.n	800e21e <__multiply+0x7e>
 800e2da:	bf00      	nop
 800e2dc:	0800f921 	.word	0x0800f921
 800e2e0:	0800f932 	.word	0x0800f932

0800e2e4 <__pow5mult>:
 800e2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	f012 0203 	ands.w	r2, r2, #3
 800e2ee:	4607      	mov	r7, r0
 800e2f0:	460e      	mov	r6, r1
 800e2f2:	d007      	beq.n	800e304 <__pow5mult+0x20>
 800e2f4:	4c25      	ldr	r4, [pc, #148]	@ (800e38c <__pow5mult+0xa8>)
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2fe:	f7ff fea7 	bl	800e050 <__multadd>
 800e302:	4606      	mov	r6, r0
 800e304:	10ad      	asrs	r5, r5, #2
 800e306:	d03d      	beq.n	800e384 <__pow5mult+0xa0>
 800e308:	69fc      	ldr	r4, [r7, #28]
 800e30a:	b97c      	cbnz	r4, 800e32c <__pow5mult+0x48>
 800e30c:	2010      	movs	r0, #16
 800e30e:	f7ff fd87 	bl	800de20 <malloc>
 800e312:	4602      	mov	r2, r0
 800e314:	61f8      	str	r0, [r7, #28]
 800e316:	b928      	cbnz	r0, 800e324 <__pow5mult+0x40>
 800e318:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e31c:	4b1c      	ldr	r3, [pc, #112]	@ (800e390 <__pow5mult+0xac>)
 800e31e:	481d      	ldr	r0, [pc, #116]	@ (800e394 <__pow5mult+0xb0>)
 800e320:	f7fe febc 	bl	800d09c <__assert_func>
 800e324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e328:	6004      	str	r4, [r0, #0]
 800e32a:	60c4      	str	r4, [r0, #12]
 800e32c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e334:	b94c      	cbnz	r4, 800e34a <__pow5mult+0x66>
 800e336:	f240 2171 	movw	r1, #625	@ 0x271
 800e33a:	4638      	mov	r0, r7
 800e33c:	f7ff ff1a 	bl	800e174 <__i2b>
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	f8c8 0008 	str.w	r0, [r8, #8]
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	f04f 0900 	mov.w	r9, #0
 800e34e:	07eb      	lsls	r3, r5, #31
 800e350:	d50a      	bpl.n	800e368 <__pow5mult+0x84>
 800e352:	4631      	mov	r1, r6
 800e354:	4622      	mov	r2, r4
 800e356:	4638      	mov	r0, r7
 800e358:	f7ff ff22 	bl	800e1a0 <__multiply>
 800e35c:	4680      	mov	r8, r0
 800e35e:	4631      	mov	r1, r6
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fe53 	bl	800e00c <_Bfree>
 800e366:	4646      	mov	r6, r8
 800e368:	106d      	asrs	r5, r5, #1
 800e36a:	d00b      	beq.n	800e384 <__pow5mult+0xa0>
 800e36c:	6820      	ldr	r0, [r4, #0]
 800e36e:	b938      	cbnz	r0, 800e380 <__pow5mult+0x9c>
 800e370:	4622      	mov	r2, r4
 800e372:	4621      	mov	r1, r4
 800e374:	4638      	mov	r0, r7
 800e376:	f7ff ff13 	bl	800e1a0 <__multiply>
 800e37a:	6020      	str	r0, [r4, #0]
 800e37c:	f8c0 9000 	str.w	r9, [r0]
 800e380:	4604      	mov	r4, r0
 800e382:	e7e4      	b.n	800e34e <__pow5mult+0x6a>
 800e384:	4630      	mov	r0, r6
 800e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38a:	bf00      	nop
 800e38c:	0800f9a8 	.word	0x0800f9a8
 800e390:	0800f80f 	.word	0x0800f80f
 800e394:	0800f932 	.word	0x0800f932

0800e398 <__lshift>:
 800e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39c:	460c      	mov	r4, r1
 800e39e:	4607      	mov	r7, r0
 800e3a0:	4691      	mov	r9, r2
 800e3a2:	6923      	ldr	r3, [r4, #16]
 800e3a4:	6849      	ldr	r1, [r1, #4]
 800e3a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3aa:	68a3      	ldr	r3, [r4, #8]
 800e3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3b0:	f108 0601 	add.w	r6, r8, #1
 800e3b4:	42b3      	cmp	r3, r6
 800e3b6:	db0b      	blt.n	800e3d0 <__lshift+0x38>
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7ff fde7 	bl	800df8c <_Balloc>
 800e3be:	4605      	mov	r5, r0
 800e3c0:	b948      	cbnz	r0, 800e3d6 <__lshift+0x3e>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e3c8:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <__lshift+0xd0>)
 800e3ca:	4828      	ldr	r0, [pc, #160]	@ (800e46c <__lshift+0xd4>)
 800e3cc:	f7fe fe66 	bl	800d09c <__assert_func>
 800e3d0:	3101      	adds	r1, #1
 800e3d2:	005b      	lsls	r3, r3, #1
 800e3d4:	e7ee      	b.n	800e3b4 <__lshift+0x1c>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f100 0114 	add.w	r1, r0, #20
 800e3dc:	f100 0210 	add.w	r2, r0, #16
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	4553      	cmp	r3, sl
 800e3e4:	db33      	blt.n	800e44e <__lshift+0xb6>
 800e3e6:	6920      	ldr	r0, [r4, #16]
 800e3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3ec:	f104 0314 	add.w	r3, r4, #20
 800e3f0:	f019 091f 	ands.w	r9, r9, #31
 800e3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3fc:	d02b      	beq.n	800e456 <__lshift+0xbe>
 800e3fe:	468a      	mov	sl, r1
 800e400:	2200      	movs	r2, #0
 800e402:	f1c9 0e20 	rsb	lr, r9, #32
 800e406:	6818      	ldr	r0, [r3, #0]
 800e408:	fa00 f009 	lsl.w	r0, r0, r9
 800e40c:	4310      	orrs	r0, r2
 800e40e:	f84a 0b04 	str.w	r0, [sl], #4
 800e412:	f853 2b04 	ldr.w	r2, [r3], #4
 800e416:	459c      	cmp	ip, r3
 800e418:	fa22 f20e 	lsr.w	r2, r2, lr
 800e41c:	d8f3      	bhi.n	800e406 <__lshift+0x6e>
 800e41e:	ebac 0304 	sub.w	r3, ip, r4
 800e422:	3b15      	subs	r3, #21
 800e424:	f023 0303 	bic.w	r3, r3, #3
 800e428:	3304      	adds	r3, #4
 800e42a:	f104 0015 	add.w	r0, r4, #21
 800e42e:	4560      	cmp	r0, ip
 800e430:	bf88      	it	hi
 800e432:	2304      	movhi	r3, #4
 800e434:	50ca      	str	r2, [r1, r3]
 800e436:	b10a      	cbz	r2, 800e43c <__lshift+0xa4>
 800e438:	f108 0602 	add.w	r6, r8, #2
 800e43c:	3e01      	subs	r6, #1
 800e43e:	4638      	mov	r0, r7
 800e440:	4621      	mov	r1, r4
 800e442:	612e      	str	r6, [r5, #16]
 800e444:	f7ff fde2 	bl	800e00c <_Bfree>
 800e448:	4628      	mov	r0, r5
 800e44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e452:	3301      	adds	r3, #1
 800e454:	e7c5      	b.n	800e3e2 <__lshift+0x4a>
 800e456:	3904      	subs	r1, #4
 800e458:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45c:	459c      	cmp	ip, r3
 800e45e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e462:	d8f9      	bhi.n	800e458 <__lshift+0xc0>
 800e464:	e7ea      	b.n	800e43c <__lshift+0xa4>
 800e466:	bf00      	nop
 800e468:	0800f921 	.word	0x0800f921
 800e46c:	0800f932 	.word	0x0800f932

0800e470 <__mcmp>:
 800e470:	4603      	mov	r3, r0
 800e472:	690a      	ldr	r2, [r1, #16]
 800e474:	6900      	ldr	r0, [r0, #16]
 800e476:	b530      	push	{r4, r5, lr}
 800e478:	1a80      	subs	r0, r0, r2
 800e47a:	d10e      	bne.n	800e49a <__mcmp+0x2a>
 800e47c:	3314      	adds	r3, #20
 800e47e:	3114      	adds	r1, #20
 800e480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e490:	4295      	cmp	r5, r2
 800e492:	d003      	beq.n	800e49c <__mcmp+0x2c>
 800e494:	d205      	bcs.n	800e4a2 <__mcmp+0x32>
 800e496:	f04f 30ff 	mov.w	r0, #4294967295
 800e49a:	bd30      	pop	{r4, r5, pc}
 800e49c:	42a3      	cmp	r3, r4
 800e49e:	d3f3      	bcc.n	800e488 <__mcmp+0x18>
 800e4a0:	e7fb      	b.n	800e49a <__mcmp+0x2a>
 800e4a2:	2001      	movs	r0, #1
 800e4a4:	e7f9      	b.n	800e49a <__mcmp+0x2a>
	...

0800e4a8 <__mdiff>:
 800e4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4689      	mov	r9, r1
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	f7ff ffdb 	bl	800e470 <__mcmp>
 800e4ba:	1e05      	subs	r5, r0, #0
 800e4bc:	d112      	bne.n	800e4e4 <__mdiff+0x3c>
 800e4be:	4629      	mov	r1, r5
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7ff fd63 	bl	800df8c <_Balloc>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	b928      	cbnz	r0, 800e4d6 <__mdiff+0x2e>
 800e4ca:	f240 2137 	movw	r1, #567	@ 0x237
 800e4ce:	4b3e      	ldr	r3, [pc, #248]	@ (800e5c8 <__mdiff+0x120>)
 800e4d0:	483e      	ldr	r0, [pc, #248]	@ (800e5cc <__mdiff+0x124>)
 800e4d2:	f7fe fde3 	bl	800d09c <__assert_func>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4dc:	4610      	mov	r0, r2
 800e4de:	b003      	add	sp, #12
 800e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e4:	bfbc      	itt	lt
 800e4e6:	464b      	movlt	r3, r9
 800e4e8:	46a1      	movlt	r9, r4
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4f0:	bfba      	itte	lt
 800e4f2:	461c      	movlt	r4, r3
 800e4f4:	2501      	movlt	r5, #1
 800e4f6:	2500      	movge	r5, #0
 800e4f8:	f7ff fd48 	bl	800df8c <_Balloc>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	b918      	cbnz	r0, 800e508 <__mdiff+0x60>
 800e500:	f240 2145 	movw	r1, #581	@ 0x245
 800e504:	4b30      	ldr	r3, [pc, #192]	@ (800e5c8 <__mdiff+0x120>)
 800e506:	e7e3      	b.n	800e4d0 <__mdiff+0x28>
 800e508:	f100 0b14 	add.w	fp, r0, #20
 800e50c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e510:	f109 0310 	add.w	r3, r9, #16
 800e514:	60c5      	str	r5, [r0, #12]
 800e516:	f04f 0c00 	mov.w	ip, #0
 800e51a:	f109 0514 	add.w	r5, r9, #20
 800e51e:	46d9      	mov	r9, fp
 800e520:	6926      	ldr	r6, [r4, #16]
 800e522:	f104 0e14 	add.w	lr, r4, #20
 800e526:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e52a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e536:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e53a:	b281      	uxth	r1, r0
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	fa1f f38a 	uxth.w	r3, sl
 800e542:	1a5b      	subs	r3, r3, r1
 800e544:	0c00      	lsrs	r0, r0, #16
 800e546:	4463      	add	r3, ip
 800e548:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e54c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e550:	b29b      	uxth	r3, r3
 800e552:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e556:	4576      	cmp	r6, lr
 800e558:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e55c:	f849 3b04 	str.w	r3, [r9], #4
 800e560:	d8e6      	bhi.n	800e530 <__mdiff+0x88>
 800e562:	1b33      	subs	r3, r6, r4
 800e564:	3b15      	subs	r3, #21
 800e566:	f023 0303 	bic.w	r3, r3, #3
 800e56a:	3415      	adds	r4, #21
 800e56c:	3304      	adds	r3, #4
 800e56e:	42a6      	cmp	r6, r4
 800e570:	bf38      	it	cc
 800e572:	2304      	movcc	r3, #4
 800e574:	441d      	add	r5, r3
 800e576:	445b      	add	r3, fp
 800e578:	461e      	mov	r6, r3
 800e57a:	462c      	mov	r4, r5
 800e57c:	4544      	cmp	r4, r8
 800e57e:	d30e      	bcc.n	800e59e <__mdiff+0xf6>
 800e580:	f108 0103 	add.w	r1, r8, #3
 800e584:	1b49      	subs	r1, r1, r5
 800e586:	f021 0103 	bic.w	r1, r1, #3
 800e58a:	3d03      	subs	r5, #3
 800e58c:	45a8      	cmp	r8, r5
 800e58e:	bf38      	it	cc
 800e590:	2100      	movcc	r1, #0
 800e592:	440b      	add	r3, r1
 800e594:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e598:	b199      	cbz	r1, 800e5c2 <__mdiff+0x11a>
 800e59a:	6117      	str	r7, [r2, #16]
 800e59c:	e79e      	b.n	800e4dc <__mdiff+0x34>
 800e59e:	46e6      	mov	lr, ip
 800e5a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5a4:	fa1f fc81 	uxth.w	ip, r1
 800e5a8:	44f4      	add	ip, lr
 800e5aa:	0c08      	lsrs	r0, r1, #16
 800e5ac:	4471      	add	r1, lr
 800e5ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e5b2:	b289      	uxth	r1, r1
 800e5b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e5b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5bc:	f846 1b04 	str.w	r1, [r6], #4
 800e5c0:	e7dc      	b.n	800e57c <__mdiff+0xd4>
 800e5c2:	3f01      	subs	r7, #1
 800e5c4:	e7e6      	b.n	800e594 <__mdiff+0xec>
 800e5c6:	bf00      	nop
 800e5c8:	0800f921 	.word	0x0800f921
 800e5cc:	0800f932 	.word	0x0800f932

0800e5d0 <__d2b>:
 800e5d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	4690      	mov	r8, r2
 800e5d8:	4699      	mov	r9, r3
 800e5da:	9e08      	ldr	r6, [sp, #32]
 800e5dc:	f7ff fcd6 	bl	800df8c <_Balloc>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	b930      	cbnz	r0, 800e5f2 <__d2b+0x22>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5ea:	4b23      	ldr	r3, [pc, #140]	@ (800e678 <__d2b+0xa8>)
 800e5ec:	4823      	ldr	r0, [pc, #140]	@ (800e67c <__d2b+0xac>)
 800e5ee:	f7fe fd55 	bl	800d09c <__assert_func>
 800e5f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5fa:	b10d      	cbz	r5, 800e600 <__d2b+0x30>
 800e5fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	f1b8 0300 	subs.w	r3, r8, #0
 800e606:	d024      	beq.n	800e652 <__d2b+0x82>
 800e608:	4668      	mov	r0, sp
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	f7ff fd85 	bl	800e11a <__lo0bits>
 800e610:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e614:	b1d8      	cbz	r0, 800e64e <__d2b+0x7e>
 800e616:	f1c0 0320 	rsb	r3, r0, #32
 800e61a:	fa02 f303 	lsl.w	r3, r2, r3
 800e61e:	430b      	orrs	r3, r1
 800e620:	40c2      	lsrs	r2, r0
 800e622:	6163      	str	r3, [r4, #20]
 800e624:	9201      	str	r2, [sp, #4]
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	bf0c      	ite	eq
 800e62c:	2201      	moveq	r2, #1
 800e62e:	2202      	movne	r2, #2
 800e630:	61a3      	str	r3, [r4, #24]
 800e632:	6122      	str	r2, [r4, #16]
 800e634:	b1ad      	cbz	r5, 800e662 <__d2b+0x92>
 800e636:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e63a:	4405      	add	r5, r0
 800e63c:	6035      	str	r5, [r6, #0]
 800e63e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e644:	6018      	str	r0, [r3, #0]
 800e646:	4620      	mov	r0, r4
 800e648:	b002      	add	sp, #8
 800e64a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e64e:	6161      	str	r1, [r4, #20]
 800e650:	e7e9      	b.n	800e626 <__d2b+0x56>
 800e652:	a801      	add	r0, sp, #4
 800e654:	f7ff fd61 	bl	800e11a <__lo0bits>
 800e658:	9b01      	ldr	r3, [sp, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	6163      	str	r3, [r4, #20]
 800e65e:	3020      	adds	r0, #32
 800e660:	e7e7      	b.n	800e632 <__d2b+0x62>
 800e662:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e666:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e66a:	6030      	str	r0, [r6, #0]
 800e66c:	6918      	ldr	r0, [r3, #16]
 800e66e:	f7ff fd35 	bl	800e0dc <__hi0bits>
 800e672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e676:	e7e4      	b.n	800e642 <__d2b+0x72>
 800e678:	0800f921 	.word	0x0800f921
 800e67c:	0800f932 	.word	0x0800f932

0800e680 <__ssputs_r>:
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	461f      	mov	r7, r3
 800e686:	688e      	ldr	r6, [r1, #8]
 800e688:	4682      	mov	sl, r0
 800e68a:	42be      	cmp	r6, r7
 800e68c:	460c      	mov	r4, r1
 800e68e:	4690      	mov	r8, r2
 800e690:	680b      	ldr	r3, [r1, #0]
 800e692:	d82d      	bhi.n	800e6f0 <__ssputs_r+0x70>
 800e694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e69c:	d026      	beq.n	800e6ec <__ssputs_r+0x6c>
 800e69e:	6965      	ldr	r5, [r4, #20]
 800e6a0:	6909      	ldr	r1, [r1, #16]
 800e6a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6a6:	eba3 0901 	sub.w	r9, r3, r1
 800e6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6ae:	1c7b      	adds	r3, r7, #1
 800e6b0:	444b      	add	r3, r9
 800e6b2:	106d      	asrs	r5, r5, #1
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	bf38      	it	cc
 800e6b8:	461d      	movcc	r5, r3
 800e6ba:	0553      	lsls	r3, r2, #21
 800e6bc:	d527      	bpl.n	800e70e <__ssputs_r+0x8e>
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7ff fbd8 	bl	800de74 <_malloc_r>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	b360      	cbz	r0, 800e722 <__ssputs_r+0xa2>
 800e6c8:	464a      	mov	r2, r9
 800e6ca:	6921      	ldr	r1, [r4, #16]
 800e6cc:	f000 fbbe 	bl	800ee4c <memcpy>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6da:	81a3      	strh	r3, [r4, #12]
 800e6dc:	6126      	str	r6, [r4, #16]
 800e6de:	444e      	add	r6, r9
 800e6e0:	6026      	str	r6, [r4, #0]
 800e6e2:	463e      	mov	r6, r7
 800e6e4:	6165      	str	r5, [r4, #20]
 800e6e6:	eba5 0509 	sub.w	r5, r5, r9
 800e6ea:	60a5      	str	r5, [r4, #8]
 800e6ec:	42be      	cmp	r6, r7
 800e6ee:	d900      	bls.n	800e6f2 <__ssputs_r+0x72>
 800e6f0:	463e      	mov	r6, r7
 800e6f2:	4632      	mov	r2, r6
 800e6f4:	4641      	mov	r1, r8
 800e6f6:	6820      	ldr	r0, [r4, #0]
 800e6f8:	f7fe fb98 	bl	800ce2c <memmove>
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	68a3      	ldr	r3, [r4, #8]
 800e700:	1b9b      	subs	r3, r3, r6
 800e702:	60a3      	str	r3, [r4, #8]
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	4433      	add	r3, r6
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	462a      	mov	r2, r5
 800e710:	f000 fbd7 	bl	800eec2 <_realloc_r>
 800e714:	4606      	mov	r6, r0
 800e716:	2800      	cmp	r0, #0
 800e718:	d1e0      	bne.n	800e6dc <__ssputs_r+0x5c>
 800e71a:	4650      	mov	r0, sl
 800e71c:	6921      	ldr	r1, [r4, #16]
 800e71e:	f7ff fb37 	bl	800dd90 <_free_r>
 800e722:	230c      	movs	r3, #12
 800e724:	f8ca 3000 	str.w	r3, [sl]
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	f04f 30ff 	mov.w	r0, #4294967295
 800e72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	e7e9      	b.n	800e70a <__ssputs_r+0x8a>
	...

0800e738 <_svfiprintf_r>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4698      	mov	r8, r3
 800e73e:	898b      	ldrh	r3, [r1, #12]
 800e740:	4607      	mov	r7, r0
 800e742:	061b      	lsls	r3, r3, #24
 800e744:	460d      	mov	r5, r1
 800e746:	4614      	mov	r4, r2
 800e748:	b09d      	sub	sp, #116	@ 0x74
 800e74a:	d510      	bpl.n	800e76e <_svfiprintf_r+0x36>
 800e74c:	690b      	ldr	r3, [r1, #16]
 800e74e:	b973      	cbnz	r3, 800e76e <_svfiprintf_r+0x36>
 800e750:	2140      	movs	r1, #64	@ 0x40
 800e752:	f7ff fb8f 	bl	800de74 <_malloc_r>
 800e756:	6028      	str	r0, [r5, #0]
 800e758:	6128      	str	r0, [r5, #16]
 800e75a:	b930      	cbnz	r0, 800e76a <_svfiprintf_r+0x32>
 800e75c:	230c      	movs	r3, #12
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	b01d      	add	sp, #116	@ 0x74
 800e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76a:	2340      	movs	r3, #64	@ 0x40
 800e76c:	616b      	str	r3, [r5, #20]
 800e76e:	2300      	movs	r3, #0
 800e770:	9309      	str	r3, [sp, #36]	@ 0x24
 800e772:	2320      	movs	r3, #32
 800e774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e778:	2330      	movs	r3, #48	@ 0x30
 800e77a:	f04f 0901 	mov.w	r9, #1
 800e77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e782:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e91c <_svfiprintf_r+0x1e4>
 800e786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e78a:	4623      	mov	r3, r4
 800e78c:	469a      	mov	sl, r3
 800e78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e792:	b10a      	cbz	r2, 800e798 <_svfiprintf_r+0x60>
 800e794:	2a25      	cmp	r2, #37	@ 0x25
 800e796:	d1f9      	bne.n	800e78c <_svfiprintf_r+0x54>
 800e798:	ebba 0b04 	subs.w	fp, sl, r4
 800e79c:	d00b      	beq.n	800e7b6 <_svfiprintf_r+0x7e>
 800e79e:	465b      	mov	r3, fp
 800e7a0:	4622      	mov	r2, r4
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f7ff ff6b 	bl	800e680 <__ssputs_r>
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	f000 80a7 	beq.w	800e8fe <_svfiprintf_r+0x1c6>
 800e7b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7b2:	445a      	add	r2, fp
 800e7b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 809f 	beq.w	800e8fe <_svfiprintf_r+0x1c6>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ca:	f10a 0a01 	add.w	sl, sl, #1
 800e7ce:	9304      	str	r3, [sp, #16]
 800e7d0:	9307      	str	r3, [sp, #28]
 800e7d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7d8:	4654      	mov	r4, sl
 800e7da:	2205      	movs	r2, #5
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	484e      	ldr	r0, [pc, #312]	@ (800e91c <_svfiprintf_r+0x1e4>)
 800e7e2:	f7fe fc4c 	bl	800d07e <memchr>
 800e7e6:	9a04      	ldr	r2, [sp, #16]
 800e7e8:	b9d8      	cbnz	r0, 800e822 <_svfiprintf_r+0xea>
 800e7ea:	06d0      	lsls	r0, r2, #27
 800e7ec:	bf44      	itt	mi
 800e7ee:	2320      	movmi	r3, #32
 800e7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7f4:	0711      	lsls	r1, r2, #28
 800e7f6:	bf44      	itt	mi
 800e7f8:	232b      	movmi	r3, #43	@ 0x2b
 800e7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e802:	2b2a      	cmp	r3, #42	@ 0x2a
 800e804:	d015      	beq.n	800e832 <_svfiprintf_r+0xfa>
 800e806:	4654      	mov	r4, sl
 800e808:	2000      	movs	r0, #0
 800e80a:	f04f 0c0a 	mov.w	ip, #10
 800e80e:	9a07      	ldr	r2, [sp, #28]
 800e810:	4621      	mov	r1, r4
 800e812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e816:	3b30      	subs	r3, #48	@ 0x30
 800e818:	2b09      	cmp	r3, #9
 800e81a:	d94b      	bls.n	800e8b4 <_svfiprintf_r+0x17c>
 800e81c:	b1b0      	cbz	r0, 800e84c <_svfiprintf_r+0x114>
 800e81e:	9207      	str	r2, [sp, #28]
 800e820:	e014      	b.n	800e84c <_svfiprintf_r+0x114>
 800e822:	eba0 0308 	sub.w	r3, r0, r8
 800e826:	fa09 f303 	lsl.w	r3, r9, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	46a2      	mov	sl, r4
 800e82e:	9304      	str	r3, [sp, #16]
 800e830:	e7d2      	b.n	800e7d8 <_svfiprintf_r+0xa0>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	1d19      	adds	r1, r3, #4
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	9103      	str	r1, [sp, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bfbb      	ittet	lt
 800e83e:	425b      	neglt	r3, r3
 800e840:	f042 0202 	orrlt.w	r2, r2, #2
 800e844:	9307      	strge	r3, [sp, #28]
 800e846:	9307      	strlt	r3, [sp, #28]
 800e848:	bfb8      	it	lt
 800e84a:	9204      	strlt	r2, [sp, #16]
 800e84c:	7823      	ldrb	r3, [r4, #0]
 800e84e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e850:	d10a      	bne.n	800e868 <_svfiprintf_r+0x130>
 800e852:	7863      	ldrb	r3, [r4, #1]
 800e854:	2b2a      	cmp	r3, #42	@ 0x2a
 800e856:	d132      	bne.n	800e8be <_svfiprintf_r+0x186>
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	3402      	adds	r4, #2
 800e85c:	1d1a      	adds	r2, r3, #4
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	9203      	str	r2, [sp, #12]
 800e862:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e920 <_svfiprintf_r+0x1e8>
 800e86c:	2203      	movs	r2, #3
 800e86e:	4650      	mov	r0, sl
 800e870:	7821      	ldrb	r1, [r4, #0]
 800e872:	f7fe fc04 	bl	800d07e <memchr>
 800e876:	b138      	cbz	r0, 800e888 <_svfiprintf_r+0x150>
 800e878:	2240      	movs	r2, #64	@ 0x40
 800e87a:	9b04      	ldr	r3, [sp, #16]
 800e87c:	eba0 000a 	sub.w	r0, r0, sl
 800e880:	4082      	lsls	r2, r0
 800e882:	4313      	orrs	r3, r2
 800e884:	3401      	adds	r4, #1
 800e886:	9304      	str	r3, [sp, #16]
 800e888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88c:	2206      	movs	r2, #6
 800e88e:	4825      	ldr	r0, [pc, #148]	@ (800e924 <_svfiprintf_r+0x1ec>)
 800e890:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e894:	f7fe fbf3 	bl	800d07e <memchr>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d036      	beq.n	800e90a <_svfiprintf_r+0x1d2>
 800e89c:	4b22      	ldr	r3, [pc, #136]	@ (800e928 <_svfiprintf_r+0x1f0>)
 800e89e:	bb1b      	cbnz	r3, 800e8e8 <_svfiprintf_r+0x1b0>
 800e8a0:	9b03      	ldr	r3, [sp, #12]
 800e8a2:	3307      	adds	r3, #7
 800e8a4:	f023 0307 	bic.w	r3, r3, #7
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	9303      	str	r3, [sp, #12]
 800e8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ae:	4433      	add	r3, r6
 800e8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8b2:	e76a      	b.n	800e78a <_svfiprintf_r+0x52>
 800e8b4:	460c      	mov	r4, r1
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8bc:	e7a8      	b.n	800e810 <_svfiprintf_r+0xd8>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	f04f 0c0a 	mov.w	ip, #10
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8d0:	3a30      	subs	r2, #48	@ 0x30
 800e8d2:	2a09      	cmp	r2, #9
 800e8d4:	d903      	bls.n	800e8de <_svfiprintf_r+0x1a6>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0c6      	beq.n	800e868 <_svfiprintf_r+0x130>
 800e8da:	9105      	str	r1, [sp, #20]
 800e8dc:	e7c4      	b.n	800e868 <_svfiprintf_r+0x130>
 800e8de:	4604      	mov	r4, r0
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8e6:	e7f0      	b.n	800e8ca <_svfiprintf_r+0x192>
 800e8e8:	ab03      	add	r3, sp, #12
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e92c <_svfiprintf_r+0x1f4>)
 800e8f2:	a904      	add	r1, sp, #16
 800e8f4:	f7fd fc9e 	bl	800c234 <_printf_float>
 800e8f8:	1c42      	adds	r2, r0, #1
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	d1d6      	bne.n	800e8ac <_svfiprintf_r+0x174>
 800e8fe:	89ab      	ldrh	r3, [r5, #12]
 800e900:	065b      	lsls	r3, r3, #25
 800e902:	f53f af2d 	bmi.w	800e760 <_svfiprintf_r+0x28>
 800e906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e908:	e72c      	b.n	800e764 <_svfiprintf_r+0x2c>
 800e90a:	ab03      	add	r3, sp, #12
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	462a      	mov	r2, r5
 800e910:	4638      	mov	r0, r7
 800e912:	4b06      	ldr	r3, [pc, #24]	@ (800e92c <_svfiprintf_r+0x1f4>)
 800e914:	a904      	add	r1, sp, #16
 800e916:	f7fd ff2b 	bl	800c770 <_printf_i>
 800e91a:	e7ed      	b.n	800e8f8 <_svfiprintf_r+0x1c0>
 800e91c:	0800f98b 	.word	0x0800f98b
 800e920:	0800f991 	.word	0x0800f991
 800e924:	0800f995 	.word	0x0800f995
 800e928:	0800c235 	.word	0x0800c235
 800e92c:	0800e681 	.word	0x0800e681

0800e930 <__sfputc_r>:
 800e930:	6893      	ldr	r3, [r2, #8]
 800e932:	b410      	push	{r4}
 800e934:	3b01      	subs	r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	6093      	str	r3, [r2, #8]
 800e93a:	da07      	bge.n	800e94c <__sfputc_r+0x1c>
 800e93c:	6994      	ldr	r4, [r2, #24]
 800e93e:	42a3      	cmp	r3, r4
 800e940:	db01      	blt.n	800e946 <__sfputc_r+0x16>
 800e942:	290a      	cmp	r1, #10
 800e944:	d102      	bne.n	800e94c <__sfputc_r+0x1c>
 800e946:	bc10      	pop	{r4}
 800e948:	f7fe b9db 	b.w	800cd02 <__swbuf_r>
 800e94c:	6813      	ldr	r3, [r2, #0]
 800e94e:	1c58      	adds	r0, r3, #1
 800e950:	6010      	str	r0, [r2, #0]
 800e952:	7019      	strb	r1, [r3, #0]
 800e954:	4608      	mov	r0, r1
 800e956:	bc10      	pop	{r4}
 800e958:	4770      	bx	lr

0800e95a <__sfputs_r>:
 800e95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95c:	4606      	mov	r6, r0
 800e95e:	460f      	mov	r7, r1
 800e960:	4614      	mov	r4, r2
 800e962:	18d5      	adds	r5, r2, r3
 800e964:	42ac      	cmp	r4, r5
 800e966:	d101      	bne.n	800e96c <__sfputs_r+0x12>
 800e968:	2000      	movs	r0, #0
 800e96a:	e007      	b.n	800e97c <__sfputs_r+0x22>
 800e96c:	463a      	mov	r2, r7
 800e96e:	4630      	mov	r0, r6
 800e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e974:	f7ff ffdc 	bl	800e930 <__sfputc_r>
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	d1f3      	bne.n	800e964 <__sfputs_r+0xa>
 800e97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e980 <_vfiprintf_r>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	460d      	mov	r5, r1
 800e986:	4614      	mov	r4, r2
 800e988:	4698      	mov	r8, r3
 800e98a:	4606      	mov	r6, r0
 800e98c:	b09d      	sub	sp, #116	@ 0x74
 800e98e:	b118      	cbz	r0, 800e998 <_vfiprintf_r+0x18>
 800e990:	6a03      	ldr	r3, [r0, #32]
 800e992:	b90b      	cbnz	r3, 800e998 <_vfiprintf_r+0x18>
 800e994:	f7fe f896 	bl	800cac4 <__sinit>
 800e998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e99a:	07d9      	lsls	r1, r3, #31
 800e99c:	d405      	bmi.n	800e9aa <_vfiprintf_r+0x2a>
 800e99e:	89ab      	ldrh	r3, [r5, #12]
 800e9a0:	059a      	lsls	r2, r3, #22
 800e9a2:	d402      	bmi.n	800e9aa <_vfiprintf_r+0x2a>
 800e9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9a6:	f7fe fb68 	bl	800d07a <__retarget_lock_acquire_recursive>
 800e9aa:	89ab      	ldrh	r3, [r5, #12]
 800e9ac:	071b      	lsls	r3, r3, #28
 800e9ae:	d501      	bpl.n	800e9b4 <_vfiprintf_r+0x34>
 800e9b0:	692b      	ldr	r3, [r5, #16]
 800e9b2:	b99b      	cbnz	r3, 800e9dc <_vfiprintf_r+0x5c>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7fe f9e2 	bl	800cd80 <__swsetup_r>
 800e9bc:	b170      	cbz	r0, 800e9dc <_vfiprintf_r+0x5c>
 800e9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9c0:	07dc      	lsls	r4, r3, #31
 800e9c2:	d504      	bpl.n	800e9ce <_vfiprintf_r+0x4e>
 800e9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c8:	b01d      	add	sp, #116	@ 0x74
 800e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	0598      	lsls	r0, r3, #22
 800e9d2:	d4f7      	bmi.n	800e9c4 <_vfiprintf_r+0x44>
 800e9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9d6:	f7fe fb51 	bl	800d07c <__retarget_lock_release_recursive>
 800e9da:	e7f3      	b.n	800e9c4 <_vfiprintf_r+0x44>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9e0:	2320      	movs	r3, #32
 800e9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9e6:	2330      	movs	r3, #48	@ 0x30
 800e9e8:	f04f 0901 	mov.w	r9, #1
 800e9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800eb9c <_vfiprintf_r+0x21c>
 800e9f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9f8:	4623      	mov	r3, r4
 800e9fa:	469a      	mov	sl, r3
 800e9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea00:	b10a      	cbz	r2, 800ea06 <_vfiprintf_r+0x86>
 800ea02:	2a25      	cmp	r2, #37	@ 0x25
 800ea04:	d1f9      	bne.n	800e9fa <_vfiprintf_r+0x7a>
 800ea06:	ebba 0b04 	subs.w	fp, sl, r4
 800ea0a:	d00b      	beq.n	800ea24 <_vfiprintf_r+0xa4>
 800ea0c:	465b      	mov	r3, fp
 800ea0e:	4622      	mov	r2, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	4630      	mov	r0, r6
 800ea14:	f7ff ffa1 	bl	800e95a <__sfputs_r>
 800ea18:	3001      	adds	r0, #1
 800ea1a:	f000 80a7 	beq.w	800eb6c <_vfiprintf_r+0x1ec>
 800ea1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea20:	445a      	add	r2, fp
 800ea22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea24:	f89a 3000 	ldrb.w	r3, [sl]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f000 809f 	beq.w	800eb6c <_vfiprintf_r+0x1ec>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f04f 32ff 	mov.w	r2, #4294967295
 800ea34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea38:	f10a 0a01 	add.w	sl, sl, #1
 800ea3c:	9304      	str	r3, [sp, #16]
 800ea3e:	9307      	str	r3, [sp, #28]
 800ea40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea46:	4654      	mov	r4, sl
 800ea48:	2205      	movs	r2, #5
 800ea4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea4e:	4853      	ldr	r0, [pc, #332]	@ (800eb9c <_vfiprintf_r+0x21c>)
 800ea50:	f7fe fb15 	bl	800d07e <memchr>
 800ea54:	9a04      	ldr	r2, [sp, #16]
 800ea56:	b9d8      	cbnz	r0, 800ea90 <_vfiprintf_r+0x110>
 800ea58:	06d1      	lsls	r1, r2, #27
 800ea5a:	bf44      	itt	mi
 800ea5c:	2320      	movmi	r3, #32
 800ea5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea62:	0713      	lsls	r3, r2, #28
 800ea64:	bf44      	itt	mi
 800ea66:	232b      	movmi	r3, #43	@ 0x2b
 800ea68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea72:	d015      	beq.n	800eaa0 <_vfiprintf_r+0x120>
 800ea74:	4654      	mov	r4, sl
 800ea76:	2000      	movs	r0, #0
 800ea78:	f04f 0c0a 	mov.w	ip, #10
 800ea7c:	9a07      	ldr	r2, [sp, #28]
 800ea7e:	4621      	mov	r1, r4
 800ea80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea84:	3b30      	subs	r3, #48	@ 0x30
 800ea86:	2b09      	cmp	r3, #9
 800ea88:	d94b      	bls.n	800eb22 <_vfiprintf_r+0x1a2>
 800ea8a:	b1b0      	cbz	r0, 800eaba <_vfiprintf_r+0x13a>
 800ea8c:	9207      	str	r2, [sp, #28]
 800ea8e:	e014      	b.n	800eaba <_vfiprintf_r+0x13a>
 800ea90:	eba0 0308 	sub.w	r3, r0, r8
 800ea94:	fa09 f303 	lsl.w	r3, r9, r3
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	46a2      	mov	sl, r4
 800ea9c:	9304      	str	r3, [sp, #16]
 800ea9e:	e7d2      	b.n	800ea46 <_vfiprintf_r+0xc6>
 800eaa0:	9b03      	ldr	r3, [sp, #12]
 800eaa2:	1d19      	adds	r1, r3, #4
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	9103      	str	r1, [sp, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	bfbb      	ittet	lt
 800eaac:	425b      	neglt	r3, r3
 800eaae:	f042 0202 	orrlt.w	r2, r2, #2
 800eab2:	9307      	strge	r3, [sp, #28]
 800eab4:	9307      	strlt	r3, [sp, #28]
 800eab6:	bfb8      	it	lt
 800eab8:	9204      	strlt	r2, [sp, #16]
 800eaba:	7823      	ldrb	r3, [r4, #0]
 800eabc:	2b2e      	cmp	r3, #46	@ 0x2e
 800eabe:	d10a      	bne.n	800ead6 <_vfiprintf_r+0x156>
 800eac0:	7863      	ldrb	r3, [r4, #1]
 800eac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eac4:	d132      	bne.n	800eb2c <_vfiprintf_r+0x1ac>
 800eac6:	9b03      	ldr	r3, [sp, #12]
 800eac8:	3402      	adds	r4, #2
 800eaca:	1d1a      	adds	r2, r3, #4
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	9203      	str	r2, [sp, #12]
 800ead0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800eba0 <_vfiprintf_r+0x220>
 800eada:	2203      	movs	r2, #3
 800eadc:	4650      	mov	r0, sl
 800eade:	7821      	ldrb	r1, [r4, #0]
 800eae0:	f7fe facd 	bl	800d07e <memchr>
 800eae4:	b138      	cbz	r0, 800eaf6 <_vfiprintf_r+0x176>
 800eae6:	2240      	movs	r2, #64	@ 0x40
 800eae8:	9b04      	ldr	r3, [sp, #16]
 800eaea:	eba0 000a 	sub.w	r0, r0, sl
 800eaee:	4082      	lsls	r2, r0
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	3401      	adds	r4, #1
 800eaf4:	9304      	str	r3, [sp, #16]
 800eaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eafa:	2206      	movs	r2, #6
 800eafc:	4829      	ldr	r0, [pc, #164]	@ (800eba4 <_vfiprintf_r+0x224>)
 800eafe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb02:	f7fe fabc 	bl	800d07e <memchr>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d03f      	beq.n	800eb8a <_vfiprintf_r+0x20a>
 800eb0a:	4b27      	ldr	r3, [pc, #156]	@ (800eba8 <_vfiprintf_r+0x228>)
 800eb0c:	bb1b      	cbnz	r3, 800eb56 <_vfiprintf_r+0x1d6>
 800eb0e:	9b03      	ldr	r3, [sp, #12]
 800eb10:	3307      	adds	r3, #7
 800eb12:	f023 0307 	bic.w	r3, r3, #7
 800eb16:	3308      	adds	r3, #8
 800eb18:	9303      	str	r3, [sp, #12]
 800eb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1c:	443b      	add	r3, r7
 800eb1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb20:	e76a      	b.n	800e9f8 <_vfiprintf_r+0x78>
 800eb22:	460c      	mov	r4, r1
 800eb24:	2001      	movs	r0, #1
 800eb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb2a:	e7a8      	b.n	800ea7e <_vfiprintf_r+0xfe>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f04f 0c0a 	mov.w	ip, #10
 800eb32:	4619      	mov	r1, r3
 800eb34:	3401      	adds	r4, #1
 800eb36:	9305      	str	r3, [sp, #20]
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb3e:	3a30      	subs	r2, #48	@ 0x30
 800eb40:	2a09      	cmp	r2, #9
 800eb42:	d903      	bls.n	800eb4c <_vfiprintf_r+0x1cc>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0c6      	beq.n	800ead6 <_vfiprintf_r+0x156>
 800eb48:	9105      	str	r1, [sp, #20]
 800eb4a:	e7c4      	b.n	800ead6 <_vfiprintf_r+0x156>
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	2301      	movs	r3, #1
 800eb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb54:	e7f0      	b.n	800eb38 <_vfiprintf_r+0x1b8>
 800eb56:	ab03      	add	r3, sp, #12
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	4b13      	ldr	r3, [pc, #76]	@ (800ebac <_vfiprintf_r+0x22c>)
 800eb60:	a904      	add	r1, sp, #16
 800eb62:	f7fd fb67 	bl	800c234 <_printf_float>
 800eb66:	4607      	mov	r7, r0
 800eb68:	1c78      	adds	r0, r7, #1
 800eb6a:	d1d6      	bne.n	800eb1a <_vfiprintf_r+0x19a>
 800eb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb6e:	07d9      	lsls	r1, r3, #31
 800eb70:	d405      	bmi.n	800eb7e <_vfiprintf_r+0x1fe>
 800eb72:	89ab      	ldrh	r3, [r5, #12]
 800eb74:	059a      	lsls	r2, r3, #22
 800eb76:	d402      	bmi.n	800eb7e <_vfiprintf_r+0x1fe>
 800eb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb7a:	f7fe fa7f 	bl	800d07c <__retarget_lock_release_recursive>
 800eb7e:	89ab      	ldrh	r3, [r5, #12]
 800eb80:	065b      	lsls	r3, r3, #25
 800eb82:	f53f af1f 	bmi.w	800e9c4 <_vfiprintf_r+0x44>
 800eb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb88:	e71e      	b.n	800e9c8 <_vfiprintf_r+0x48>
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	462a      	mov	r2, r5
 800eb90:	4630      	mov	r0, r6
 800eb92:	4b06      	ldr	r3, [pc, #24]	@ (800ebac <_vfiprintf_r+0x22c>)
 800eb94:	a904      	add	r1, sp, #16
 800eb96:	f7fd fdeb 	bl	800c770 <_printf_i>
 800eb9a:	e7e4      	b.n	800eb66 <_vfiprintf_r+0x1e6>
 800eb9c:	0800f98b 	.word	0x0800f98b
 800eba0:	0800f991 	.word	0x0800f991
 800eba4:	0800f995 	.word	0x0800f995
 800eba8:	0800c235 	.word	0x0800c235
 800ebac:	0800e95b 	.word	0x0800e95b

0800ebb0 <__sflush_r>:
 800ebb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	0716      	lsls	r6, r2, #28
 800ebb8:	4605      	mov	r5, r0
 800ebba:	460c      	mov	r4, r1
 800ebbc:	d454      	bmi.n	800ec68 <__sflush_r+0xb8>
 800ebbe:	684b      	ldr	r3, [r1, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dc02      	bgt.n	800ebca <__sflush_r+0x1a>
 800ebc4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	dd48      	ble.n	800ec5c <__sflush_r+0xac>
 800ebca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	d045      	beq.n	800ec5c <__sflush_r+0xac>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ebd6:	682f      	ldr	r7, [r5, #0]
 800ebd8:	6a21      	ldr	r1, [r4, #32]
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	d030      	beq.n	800ec40 <__sflush_r+0x90>
 800ebde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	0759      	lsls	r1, r3, #29
 800ebe4:	d505      	bpl.n	800ebf2 <__sflush_r+0x42>
 800ebe6:	6863      	ldr	r3, [r4, #4]
 800ebe8:	1ad2      	subs	r2, r2, r3
 800ebea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebec:	b10b      	cbz	r3, 800ebf2 <__sflush_r+0x42>
 800ebee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebf0:	1ad2      	subs	r2, r2, r3
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebf8:	6a21      	ldr	r1, [r4, #32]
 800ebfa:	47b0      	blx	r6
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	89a3      	ldrh	r3, [r4, #12]
 800ec00:	d106      	bne.n	800ec10 <__sflush_r+0x60>
 800ec02:	6829      	ldr	r1, [r5, #0]
 800ec04:	291d      	cmp	r1, #29
 800ec06:	d82b      	bhi.n	800ec60 <__sflush_r+0xb0>
 800ec08:	4a28      	ldr	r2, [pc, #160]	@ (800ecac <__sflush_r+0xfc>)
 800ec0a:	40ca      	lsrs	r2, r1
 800ec0c:	07d6      	lsls	r6, r2, #31
 800ec0e:	d527      	bpl.n	800ec60 <__sflush_r+0xb0>
 800ec10:	2200      	movs	r2, #0
 800ec12:	6062      	str	r2, [r4, #4]
 800ec14:	6922      	ldr	r2, [r4, #16]
 800ec16:	04d9      	lsls	r1, r3, #19
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	d504      	bpl.n	800ec26 <__sflush_r+0x76>
 800ec1c:	1c42      	adds	r2, r0, #1
 800ec1e:	d101      	bne.n	800ec24 <__sflush_r+0x74>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	b903      	cbnz	r3, 800ec26 <__sflush_r+0x76>
 800ec24:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec28:	602f      	str	r7, [r5, #0]
 800ec2a:	b1b9      	cbz	r1, 800ec5c <__sflush_r+0xac>
 800ec2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec30:	4299      	cmp	r1, r3
 800ec32:	d002      	beq.n	800ec3a <__sflush_r+0x8a>
 800ec34:	4628      	mov	r0, r5
 800ec36:	f7ff f8ab 	bl	800dd90 <_free_r>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec3e:	e00d      	b.n	800ec5c <__sflush_r+0xac>
 800ec40:	2301      	movs	r3, #1
 800ec42:	4628      	mov	r0, r5
 800ec44:	47b0      	blx	r6
 800ec46:	4602      	mov	r2, r0
 800ec48:	1c50      	adds	r0, r2, #1
 800ec4a:	d1c9      	bne.n	800ebe0 <__sflush_r+0x30>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d0c6      	beq.n	800ebe0 <__sflush_r+0x30>
 800ec52:	2b1d      	cmp	r3, #29
 800ec54:	d001      	beq.n	800ec5a <__sflush_r+0xaa>
 800ec56:	2b16      	cmp	r3, #22
 800ec58:	d11d      	bne.n	800ec96 <__sflush_r+0xe6>
 800ec5a:	602f      	str	r7, [r5, #0]
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	e021      	b.n	800eca4 <__sflush_r+0xf4>
 800ec60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec64:	b21b      	sxth	r3, r3
 800ec66:	e01a      	b.n	800ec9e <__sflush_r+0xee>
 800ec68:	690f      	ldr	r7, [r1, #16]
 800ec6a:	2f00      	cmp	r7, #0
 800ec6c:	d0f6      	beq.n	800ec5c <__sflush_r+0xac>
 800ec6e:	0793      	lsls	r3, r2, #30
 800ec70:	bf18      	it	ne
 800ec72:	2300      	movne	r3, #0
 800ec74:	680e      	ldr	r6, [r1, #0]
 800ec76:	bf08      	it	eq
 800ec78:	694b      	ldreq	r3, [r1, #20]
 800ec7a:	1bf6      	subs	r6, r6, r7
 800ec7c:	600f      	str	r7, [r1, #0]
 800ec7e:	608b      	str	r3, [r1, #8]
 800ec80:	2e00      	cmp	r6, #0
 800ec82:	ddeb      	ble.n	800ec5c <__sflush_r+0xac>
 800ec84:	4633      	mov	r3, r6
 800ec86:	463a      	mov	r2, r7
 800ec88:	4628      	mov	r0, r5
 800ec8a:	6a21      	ldr	r1, [r4, #32]
 800ec8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ec90:	47e0      	blx	ip
 800ec92:	2800      	cmp	r0, #0
 800ec94:	dc07      	bgt.n	800eca6 <__sflush_r+0xf6>
 800ec96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eca2:	81a3      	strh	r3, [r4, #12]
 800eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca6:	4407      	add	r7, r0
 800eca8:	1a36      	subs	r6, r6, r0
 800ecaa:	e7e9      	b.n	800ec80 <__sflush_r+0xd0>
 800ecac:	20400001 	.word	0x20400001

0800ecb0 <_fflush_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	690b      	ldr	r3, [r1, #16]
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	b913      	cbnz	r3, 800ecc0 <_fflush_r+0x10>
 800ecba:	2500      	movs	r5, #0
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	b118      	cbz	r0, 800ecca <_fflush_r+0x1a>
 800ecc2:	6a03      	ldr	r3, [r0, #32]
 800ecc4:	b90b      	cbnz	r3, 800ecca <_fflush_r+0x1a>
 800ecc6:	f7fd fefd 	bl	800cac4 <__sinit>
 800ecca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0f3      	beq.n	800ecba <_fflush_r+0xa>
 800ecd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ecd4:	07d0      	lsls	r0, r2, #31
 800ecd6:	d404      	bmi.n	800ece2 <_fflush_r+0x32>
 800ecd8:	0599      	lsls	r1, r3, #22
 800ecda:	d402      	bmi.n	800ece2 <_fflush_r+0x32>
 800ecdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecde:	f7fe f9cc 	bl	800d07a <__retarget_lock_acquire_recursive>
 800ece2:	4628      	mov	r0, r5
 800ece4:	4621      	mov	r1, r4
 800ece6:	f7ff ff63 	bl	800ebb0 <__sflush_r>
 800ecea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecec:	4605      	mov	r5, r0
 800ecee:	07da      	lsls	r2, r3, #31
 800ecf0:	d4e4      	bmi.n	800ecbc <_fflush_r+0xc>
 800ecf2:	89a3      	ldrh	r3, [r4, #12]
 800ecf4:	059b      	lsls	r3, r3, #22
 800ecf6:	d4e1      	bmi.n	800ecbc <_fflush_r+0xc>
 800ecf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecfa:	f7fe f9bf 	bl	800d07c <__retarget_lock_release_recursive>
 800ecfe:	e7dd      	b.n	800ecbc <_fflush_r+0xc>

0800ed00 <fiprintf>:
 800ed00:	b40e      	push	{r1, r2, r3}
 800ed02:	b503      	push	{r0, r1, lr}
 800ed04:	4601      	mov	r1, r0
 800ed06:	ab03      	add	r3, sp, #12
 800ed08:	4805      	ldr	r0, [pc, #20]	@ (800ed20 <fiprintf+0x20>)
 800ed0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed0e:	6800      	ldr	r0, [r0, #0]
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	f7ff fe35 	bl	800e980 <_vfiprintf_r>
 800ed16:	b002      	add	sp, #8
 800ed18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed1c:	b003      	add	sp, #12
 800ed1e:	4770      	bx	lr
 800ed20:	20000074 	.word	0x20000074

0800ed24 <__swhatbuf_r>:
 800ed24:	b570      	push	{r4, r5, r6, lr}
 800ed26:	460c      	mov	r4, r1
 800ed28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed2c:	4615      	mov	r5, r2
 800ed2e:	2900      	cmp	r1, #0
 800ed30:	461e      	mov	r6, r3
 800ed32:	b096      	sub	sp, #88	@ 0x58
 800ed34:	da0c      	bge.n	800ed50 <__swhatbuf_r+0x2c>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	2100      	movs	r1, #0
 800ed3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed3e:	bf14      	ite	ne
 800ed40:	2340      	movne	r3, #64	@ 0x40
 800ed42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed46:	2000      	movs	r0, #0
 800ed48:	6031      	str	r1, [r6, #0]
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	b016      	add	sp, #88	@ 0x58
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	466a      	mov	r2, sp
 800ed52:	f000 f849 	bl	800ede8 <_fstat_r>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	dbed      	blt.n	800ed36 <__swhatbuf_r+0x12>
 800ed5a:	9901      	ldr	r1, [sp, #4]
 800ed5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed64:	4259      	negs	r1, r3
 800ed66:	4159      	adcs	r1, r3
 800ed68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed6c:	e7eb      	b.n	800ed46 <__swhatbuf_r+0x22>

0800ed6e <__smakebuf_r>:
 800ed6e:	898b      	ldrh	r3, [r1, #12]
 800ed70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed72:	079d      	lsls	r5, r3, #30
 800ed74:	4606      	mov	r6, r0
 800ed76:	460c      	mov	r4, r1
 800ed78:	d507      	bpl.n	800ed8a <__smakebuf_r+0x1c>
 800ed7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	2301      	movs	r3, #1
 800ed84:	6163      	str	r3, [r4, #20]
 800ed86:	b003      	add	sp, #12
 800ed88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed8a:	466a      	mov	r2, sp
 800ed8c:	ab01      	add	r3, sp, #4
 800ed8e:	f7ff ffc9 	bl	800ed24 <__swhatbuf_r>
 800ed92:	9f00      	ldr	r7, [sp, #0]
 800ed94:	4605      	mov	r5, r0
 800ed96:	4639      	mov	r1, r7
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7ff f86b 	bl	800de74 <_malloc_r>
 800ed9e:	b948      	cbnz	r0, 800edb4 <__smakebuf_r+0x46>
 800eda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eda4:	059a      	lsls	r2, r3, #22
 800eda6:	d4ee      	bmi.n	800ed86 <__smakebuf_r+0x18>
 800eda8:	f023 0303 	bic.w	r3, r3, #3
 800edac:	f043 0302 	orr.w	r3, r3, #2
 800edb0:	81a3      	strh	r3, [r4, #12]
 800edb2:	e7e2      	b.n	800ed7a <__smakebuf_r+0xc>
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edbe:	81a3      	strh	r3, [r4, #12]
 800edc0:	9b01      	ldr	r3, [sp, #4]
 800edc2:	6020      	str	r0, [r4, #0]
 800edc4:	b15b      	cbz	r3, 800edde <__smakebuf_r+0x70>
 800edc6:	4630      	mov	r0, r6
 800edc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edcc:	f000 f81e 	bl	800ee0c <_isatty_r>
 800edd0:	b128      	cbz	r0, 800edde <__smakebuf_r+0x70>
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	f023 0303 	bic.w	r3, r3, #3
 800edd8:	f043 0301 	orr.w	r3, r3, #1
 800eddc:	81a3      	strh	r3, [r4, #12]
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	431d      	orrs	r5, r3
 800ede2:	81a5      	strh	r5, [r4, #12]
 800ede4:	e7cf      	b.n	800ed86 <__smakebuf_r+0x18>
	...

0800ede8 <_fstat_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	2300      	movs	r3, #0
 800edec:	4d06      	ldr	r5, [pc, #24]	@ (800ee08 <_fstat_r+0x20>)
 800edee:	4604      	mov	r4, r0
 800edf0:	4608      	mov	r0, r1
 800edf2:	4611      	mov	r1, r2
 800edf4:	602b      	str	r3, [r5, #0]
 800edf6:	f7f6 fe29 	bl	8005a4c <_fstat>
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	d102      	bne.n	800ee04 <_fstat_r+0x1c>
 800edfe:	682b      	ldr	r3, [r5, #0]
 800ee00:	b103      	cbz	r3, 800ee04 <_fstat_r+0x1c>
 800ee02:	6023      	str	r3, [r4, #0]
 800ee04:	bd38      	pop	{r3, r4, r5, pc}
 800ee06:	bf00      	nop
 800ee08:	20000874 	.word	0x20000874

0800ee0c <_isatty_r>:
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	2300      	movs	r3, #0
 800ee10:	4d05      	ldr	r5, [pc, #20]	@ (800ee28 <_isatty_r+0x1c>)
 800ee12:	4604      	mov	r4, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	602b      	str	r3, [r5, #0]
 800ee18:	f7f6 fe27 	bl	8005a6a <_isatty>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_isatty_r+0x1a>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_isatty_r+0x1a>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20000874 	.word	0x20000874

0800ee2c <_sbrk_r>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	2300      	movs	r3, #0
 800ee30:	4d05      	ldr	r5, [pc, #20]	@ (800ee48 <_sbrk_r+0x1c>)
 800ee32:	4604      	mov	r4, r0
 800ee34:	4608      	mov	r0, r1
 800ee36:	602b      	str	r3, [r5, #0]
 800ee38:	f7f6 fe2e 	bl	8005a98 <_sbrk>
 800ee3c:	1c43      	adds	r3, r0, #1
 800ee3e:	d102      	bne.n	800ee46 <_sbrk_r+0x1a>
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	b103      	cbz	r3, 800ee46 <_sbrk_r+0x1a>
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	20000874 	.word	0x20000874

0800ee4c <memcpy>:
 800ee4c:	440a      	add	r2, r1
 800ee4e:	4291      	cmp	r1, r2
 800ee50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee54:	d100      	bne.n	800ee58 <memcpy+0xc>
 800ee56:	4770      	bx	lr
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee5e:	4291      	cmp	r1, r2
 800ee60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee64:	d1f9      	bne.n	800ee5a <memcpy+0xe>
 800ee66:	bd10      	pop	{r4, pc}

0800ee68 <abort>:
 800ee68:	2006      	movs	r0, #6
 800ee6a:	b508      	push	{r3, lr}
 800ee6c:	f000 f88c 	bl	800ef88 <raise>
 800ee70:	2001      	movs	r0, #1
 800ee72:	f7f6 fd9c 	bl	80059ae <_exit>

0800ee76 <_calloc_r>:
 800ee76:	b570      	push	{r4, r5, r6, lr}
 800ee78:	fba1 5402 	umull	r5, r4, r1, r2
 800ee7c:	b934      	cbnz	r4, 800ee8c <_calloc_r+0x16>
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f7fe fff8 	bl	800de74 <_malloc_r>
 800ee84:	4606      	mov	r6, r0
 800ee86:	b928      	cbnz	r0, 800ee94 <_calloc_r+0x1e>
 800ee88:	4630      	mov	r0, r6
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	220c      	movs	r2, #12
 800ee8e:	2600      	movs	r6, #0
 800ee90:	6002      	str	r2, [r0, #0]
 800ee92:	e7f9      	b.n	800ee88 <_calloc_r+0x12>
 800ee94:	462a      	mov	r2, r5
 800ee96:	4621      	mov	r1, r4
 800ee98:	f7fd ffe2 	bl	800ce60 <memset>
 800ee9c:	e7f4      	b.n	800ee88 <_calloc_r+0x12>

0800ee9e <__ascii_mbtowc>:
 800ee9e:	b082      	sub	sp, #8
 800eea0:	b901      	cbnz	r1, 800eea4 <__ascii_mbtowc+0x6>
 800eea2:	a901      	add	r1, sp, #4
 800eea4:	b142      	cbz	r2, 800eeb8 <__ascii_mbtowc+0x1a>
 800eea6:	b14b      	cbz	r3, 800eebc <__ascii_mbtowc+0x1e>
 800eea8:	7813      	ldrb	r3, [r2, #0]
 800eeaa:	600b      	str	r3, [r1, #0]
 800eeac:	7812      	ldrb	r2, [r2, #0]
 800eeae:	1e10      	subs	r0, r2, #0
 800eeb0:	bf18      	it	ne
 800eeb2:	2001      	movne	r0, #1
 800eeb4:	b002      	add	sp, #8
 800eeb6:	4770      	bx	lr
 800eeb8:	4610      	mov	r0, r2
 800eeba:	e7fb      	b.n	800eeb4 <__ascii_mbtowc+0x16>
 800eebc:	f06f 0001 	mvn.w	r0, #1
 800eec0:	e7f8      	b.n	800eeb4 <__ascii_mbtowc+0x16>

0800eec2 <_realloc_r>:
 800eec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec6:	4607      	mov	r7, r0
 800eec8:	4614      	mov	r4, r2
 800eeca:	460d      	mov	r5, r1
 800eecc:	b921      	cbnz	r1, 800eed8 <_realloc_r+0x16>
 800eece:	4611      	mov	r1, r2
 800eed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eed4:	f7fe bfce 	b.w	800de74 <_malloc_r>
 800eed8:	b92a      	cbnz	r2, 800eee6 <_realloc_r+0x24>
 800eeda:	f7fe ff59 	bl	800dd90 <_free_r>
 800eede:	4625      	mov	r5, r4
 800eee0:	4628      	mov	r0, r5
 800eee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee6:	f000 f86b 	bl	800efc0 <_malloc_usable_size_r>
 800eeea:	4284      	cmp	r4, r0
 800eeec:	4606      	mov	r6, r0
 800eeee:	d802      	bhi.n	800eef6 <_realloc_r+0x34>
 800eef0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eef4:	d8f4      	bhi.n	800eee0 <_realloc_r+0x1e>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4638      	mov	r0, r7
 800eefa:	f7fe ffbb 	bl	800de74 <_malloc_r>
 800eefe:	4680      	mov	r8, r0
 800ef00:	b908      	cbnz	r0, 800ef06 <_realloc_r+0x44>
 800ef02:	4645      	mov	r5, r8
 800ef04:	e7ec      	b.n	800eee0 <_realloc_r+0x1e>
 800ef06:	42b4      	cmp	r4, r6
 800ef08:	4622      	mov	r2, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	bf28      	it	cs
 800ef0e:	4632      	movcs	r2, r6
 800ef10:	f7ff ff9c 	bl	800ee4c <memcpy>
 800ef14:	4629      	mov	r1, r5
 800ef16:	4638      	mov	r0, r7
 800ef18:	f7fe ff3a 	bl	800dd90 <_free_r>
 800ef1c:	e7f1      	b.n	800ef02 <_realloc_r+0x40>

0800ef1e <__ascii_wctomb>:
 800ef1e:	4603      	mov	r3, r0
 800ef20:	4608      	mov	r0, r1
 800ef22:	b141      	cbz	r1, 800ef36 <__ascii_wctomb+0x18>
 800ef24:	2aff      	cmp	r2, #255	@ 0xff
 800ef26:	d904      	bls.n	800ef32 <__ascii_wctomb+0x14>
 800ef28:	228a      	movs	r2, #138	@ 0x8a
 800ef2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	4770      	bx	lr
 800ef32:	2001      	movs	r0, #1
 800ef34:	700a      	strb	r2, [r1, #0]
 800ef36:	4770      	bx	lr

0800ef38 <_raise_r>:
 800ef38:	291f      	cmp	r1, #31
 800ef3a:	b538      	push	{r3, r4, r5, lr}
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	d904      	bls.n	800ef4c <_raise_r+0x14>
 800ef42:	2316      	movs	r3, #22
 800ef44:	6003      	str	r3, [r0, #0]
 800ef46:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef4e:	b112      	cbz	r2, 800ef56 <_raise_r+0x1e>
 800ef50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef54:	b94b      	cbnz	r3, 800ef6a <_raise_r+0x32>
 800ef56:	4628      	mov	r0, r5
 800ef58:	f000 f830 	bl	800efbc <_getpid_r>
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	4601      	mov	r1, r0
 800ef60:	4628      	mov	r0, r5
 800ef62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef66:	f000 b817 	b.w	800ef98 <_kill_r>
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d00a      	beq.n	800ef84 <_raise_r+0x4c>
 800ef6e:	1c59      	adds	r1, r3, #1
 800ef70:	d103      	bne.n	800ef7a <_raise_r+0x42>
 800ef72:	2316      	movs	r3, #22
 800ef74:	6003      	str	r3, [r0, #0]
 800ef76:	2001      	movs	r0, #1
 800ef78:	e7e7      	b.n	800ef4a <_raise_r+0x12>
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef82:	4798      	blx	r3
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7e0      	b.n	800ef4a <_raise_r+0x12>

0800ef88 <raise>:
 800ef88:	4b02      	ldr	r3, [pc, #8]	@ (800ef94 <raise+0xc>)
 800ef8a:	4601      	mov	r1, r0
 800ef8c:	6818      	ldr	r0, [r3, #0]
 800ef8e:	f7ff bfd3 	b.w	800ef38 <_raise_r>
 800ef92:	bf00      	nop
 800ef94:	20000074 	.word	0x20000074

0800ef98 <_kill_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	4d06      	ldr	r5, [pc, #24]	@ (800efb8 <_kill_r+0x20>)
 800ef9e:	4604      	mov	r4, r0
 800efa0:	4608      	mov	r0, r1
 800efa2:	4611      	mov	r1, r2
 800efa4:	602b      	str	r3, [r5, #0]
 800efa6:	f7f6 fcf2 	bl	800598e <_kill>
 800efaa:	1c43      	adds	r3, r0, #1
 800efac:	d102      	bne.n	800efb4 <_kill_r+0x1c>
 800efae:	682b      	ldr	r3, [r5, #0]
 800efb0:	b103      	cbz	r3, 800efb4 <_kill_r+0x1c>
 800efb2:	6023      	str	r3, [r4, #0]
 800efb4:	bd38      	pop	{r3, r4, r5, pc}
 800efb6:	bf00      	nop
 800efb8:	20000874 	.word	0x20000874

0800efbc <_getpid_r>:
 800efbc:	f7f6 bce0 	b.w	8005980 <_getpid>

0800efc0 <_malloc_usable_size_r>:
 800efc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efc4:	1f18      	subs	r0, r3, #4
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bfbc      	itt	lt
 800efca:	580b      	ldrlt	r3, [r1, r0]
 800efcc:	18c0      	addlt	r0, r0, r3
 800efce:	4770      	bx	lr

0800efd0 <_init>:
 800efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd2:	bf00      	nop
 800efd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd6:	bc08      	pop	{r3}
 800efd8:	469e      	mov	lr, r3
 800efda:	4770      	bx	lr

0800efdc <_fini>:
 800efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efde:	bf00      	nop
 800efe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efe2:	bc08      	pop	{r3}
 800efe4:	469e      	mov	lr, r3
 800efe6:	4770      	bx	lr
