
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d17c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800d290  0800d290  0000e290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db4c  0800db4c  0000f230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800db4c  0800db4c  0000eb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db54  0800db54  0000f230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db54  0800db54  0000eb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db58  0800db58  0000eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800db5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000230  0800dd8c  0000f230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800dd8c  0000f7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a9f  00000000  00000000  0000f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004689  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c5  00000000  00000000  0002ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c771  00000000  00000000  0003007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa08  00000000  00000000  0004c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997c3  00000000  00000000  0006c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001059b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c1c  00000000  00000000  001059fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d274 	.word	0x0800d274

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800d274 	.word	0x0800d274

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b98c 	b.w	80013b4 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	9d08      	ldr	r5, [sp, #32]
 80010ba:	468e      	mov	lr, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d14a      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	d962      	bls.n	8001190 <__udivmoddi4+0xdc>
 80010ca:	fab2 f682 	clz	r6, r2
 80010ce:	b14e      	cbz	r6, 80010e4 <__udivmoddi4+0x30>
 80010d0:	f1c6 0320 	rsb	r3, r6, #32
 80010d4:	fa01 f806 	lsl.w	r8, r1, r6
 80010d8:	fa20 f303 	lsr.w	r3, r0, r3
 80010dc:	40b7      	lsls	r7, r6
 80010de:	ea43 0808 	orr.w	r8, r3, r8
 80010e2:	40b4      	lsls	r4, r6
 80010e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80010f4:	fb01 f20c 	mul.w	r2, r1, ip
 80010f8:	0c23      	lsrs	r3, r4, #16
 80010fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010fe:	429a      	cmp	r2, r3
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x62>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f101 30ff 	add.w	r0, r1, #4294967295
 8001108:	f080 80eb 	bcs.w	80012e2 <__udivmoddi4+0x22e>
 800110c:	429a      	cmp	r2, r3
 800110e:	f240 80e8 	bls.w	80012e2 <__udivmoddi4+0x22e>
 8001112:	3902      	subs	r1, #2
 8001114:	443b      	add	r3, r7
 8001116:	1a9a      	subs	r2, r3, r2
 8001118:	fbb2 f0fe 	udiv	r0, r2, lr
 800111c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001120:	fb00 fc0c 	mul.w	ip, r0, ip
 8001124:	b2a3      	uxth	r3, r4
 8001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800112a:	459c      	cmp	ip, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	f080 80d7 	bcs.w	80012e6 <__udivmoddi4+0x232>
 8001138:	459c      	cmp	ip, r3
 800113a:	f240 80d4 	bls.w	80012e6 <__udivmoddi4+0x232>
 800113e:	443b      	add	r3, r7
 8001140:	3802      	subs	r0, #2
 8001142:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001146:	2100      	movs	r1, #0
 8001148:	eba3 030c 	sub.w	r3, r3, ip
 800114c:	b11d      	cbz	r5, 8001156 <__udivmoddi4+0xa2>
 800114e:	2200      	movs	r2, #0
 8001150:	40f3      	lsrs	r3, r6
 8001152:	e9c5 3200 	strd	r3, r2, [r5]
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d905      	bls.n	800116a <__udivmoddi4+0xb6>
 800115e:	b10d      	cbz	r5, 8001164 <__udivmoddi4+0xb0>
 8001160:	e9c5 0100 	strd	r0, r1, [r5]
 8001164:	2100      	movs	r1, #0
 8001166:	4608      	mov	r0, r1
 8001168:	e7f5      	b.n	8001156 <__udivmoddi4+0xa2>
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d146      	bne.n	8001200 <__udivmoddi4+0x14c>
 8001172:	4573      	cmp	r3, lr
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0xc8>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 8108 	bhi.w	800138c <__udivmoddi4+0x2d8>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001182:	2001      	movs	r0, #1
 8001184:	4690      	mov	r8, r2
 8001186:	2d00      	cmp	r5, #0
 8001188:	d0e5      	beq.n	8001156 <__udivmoddi4+0xa2>
 800118a:	e9c5 4800 	strd	r4, r8, [r5]
 800118e:	e7e2      	b.n	8001156 <__udivmoddi4+0xa2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	f000 8091 	beq.w	80012b8 <__udivmoddi4+0x204>
 8001196:	fab2 f682 	clz	r6, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	f040 80a5 	bne.w	80012ea <__udivmoddi4+0x236>
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	2101      	movs	r1, #1
 80011a4:	0c03      	lsrs	r3, r0, #16
 80011a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	b2bc      	uxth	r4, r7
 80011ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80011b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	fb04 f20c 	mul.w	r2, r4, ip
 80011be:	429a      	cmp	r2, r3
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x11e>
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x11c>
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f200 80e3 	bhi.w	8001396 <__udivmoddi4+0x2e2>
 80011d0:	46c4      	mov	ip, r8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80011d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80011dc:	fb02 f404 	mul.w	r4, r2, r4
 80011e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d907      	bls.n	80011f8 <__udivmoddi4+0x144>
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x142>
 80011f0:	429c      	cmp	r4, r3
 80011f2:	f200 80cd 	bhi.w	8001390 <__udivmoddi4+0x2dc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011fe:	e7a5      	b.n	800114c <__udivmoddi4+0x98>
 8001200:	f1c1 0620 	rsb	r6, r1, #32
 8001204:	408b      	lsls	r3, r1
 8001206:	fa22 f706 	lsr.w	r7, r2, r6
 800120a:	431f      	orrs	r7, r3
 800120c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001210:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001214:	fbba f8f9 	udiv	r8, sl, r9
 8001218:	fa0e fe01 	lsl.w	lr, lr, r1
 800121c:	fa20 f306 	lsr.w	r3, r0, r6
 8001220:	fb09 aa18 	mls	sl, r9, r8, sl
 8001224:	fa1f fc87 	uxth.w	ip, r7
 8001228:	ea43 030e 	orr.w	r3, r3, lr
 800122c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001230:	fb08 f00c 	mul.w	r0, r8, ip
 8001234:	0c1c      	lsrs	r4, r3, #16
 8001236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800123a:	42a0      	cmp	r0, r4
 800123c:	fa02 f201 	lsl.w	r2, r2, r1
 8001240:	d90a      	bls.n	8001258 <__udivmoddi4+0x1a4>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f108 3aff 	add.w	sl, r8, #4294967295
 8001248:	f080 809e 	bcs.w	8001388 <__udivmoddi4+0x2d4>
 800124c:	42a0      	cmp	r0, r4
 800124e:	f240 809b 	bls.w	8001388 <__udivmoddi4+0x2d4>
 8001252:	f1a8 0802 	sub.w	r8, r8, #2
 8001256:	443c      	add	r4, r7
 8001258:	1a24      	subs	r4, r4, r0
 800125a:	b298      	uxth	r0, r3
 800125c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001260:	fb09 4413 	mls	r4, r9, r3, r4
 8001264:	fb03 fc0c 	mul.w	ip, r3, ip
 8001268:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800126c:	45a4      	cmp	ip, r4
 800126e:	d909      	bls.n	8001284 <__udivmoddi4+0x1d0>
 8001270:	193c      	adds	r4, r7, r4
 8001272:	f103 30ff 	add.w	r0, r3, #4294967295
 8001276:	f080 8085 	bcs.w	8001384 <__udivmoddi4+0x2d0>
 800127a:	45a4      	cmp	ip, r4
 800127c:	f240 8082 	bls.w	8001384 <__udivmoddi4+0x2d0>
 8001280:	3b02      	subs	r3, #2
 8001282:	443c      	add	r4, r7
 8001284:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001288:	eba4 040c 	sub.w	r4, r4, ip
 800128c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001290:	4564      	cmp	r4, ip
 8001292:	4643      	mov	r3, r8
 8001294:	46e1      	mov	r9, ip
 8001296:	d364      	bcc.n	8001362 <__udivmoddi4+0x2ae>
 8001298:	d061      	beq.n	800135e <__udivmoddi4+0x2aa>
 800129a:	b15d      	cbz	r5, 80012b4 <__udivmoddi4+0x200>
 800129c:	ebbe 0203 	subs.w	r2, lr, r3
 80012a0:	eb64 0409 	sbc.w	r4, r4, r9
 80012a4:	fa04 f606 	lsl.w	r6, r4, r6
 80012a8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	40cc      	lsrs	r4, r1
 80012b0:	e9c5 6400 	strd	r6, r4, [r5]
 80012b4:	2100      	movs	r1, #0
 80012b6:	e74e      	b.n	8001156 <__udivmoddi4+0xa2>
 80012b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80012bc:	0c01      	lsrs	r1, r0, #16
 80012be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012c2:	b280      	uxth	r0, r0
 80012c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012c8:	463b      	mov	r3, r7
 80012ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80012ce:	4638      	mov	r0, r7
 80012d0:	463c      	mov	r4, r7
 80012d2:	46b8      	mov	r8, r7
 80012d4:	46be      	mov	lr, r7
 80012d6:	2620      	movs	r6, #32
 80012d8:	eba2 0208 	sub.w	r2, r2, r8
 80012dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e0:	e765      	b.n	80011ae <__udivmoddi4+0xfa>
 80012e2:	4601      	mov	r1, r0
 80012e4:	e717      	b.n	8001116 <__udivmoddi4+0x62>
 80012e6:	4610      	mov	r0, r2
 80012e8:	e72b      	b.n	8001142 <__udivmoddi4+0x8e>
 80012ea:	f1c6 0120 	rsb	r1, r6, #32
 80012ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80012f2:	40b7      	lsls	r7, r6
 80012f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	ea41 010e 	orr.w	r1, r1, lr
 8001300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001304:	fbbc f8fe 	udiv	r8, ip, lr
 8001308:	b2bc      	uxth	r4, r7
 800130a:	fb0e cc18 	mls	ip, lr, r8, ip
 800130e:	fb08 f904 	mul.w	r9, r8, r4
 8001312:	0c0a      	lsrs	r2, r1, #16
 8001314:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001318:	40b0      	lsls	r0, r6
 800131a:	4591      	cmp	r9, r2
 800131c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001320:	b280      	uxth	r0, r0
 8001322:	d93e      	bls.n	80013a2 <__udivmoddi4+0x2ee>
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	f108 3cff 	add.w	ip, r8, #4294967295
 800132a:	d201      	bcs.n	8001330 <__udivmoddi4+0x27c>
 800132c:	4591      	cmp	r9, r2
 800132e:	d81f      	bhi.n	8001370 <__udivmoddi4+0x2bc>
 8001330:	eba2 0209 	sub.w	r2, r2, r9
 8001334:	fbb2 f9fe 	udiv	r9, r2, lr
 8001338:	fb09 f804 	mul.w	r8, r9, r4
 800133c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001340:	b28a      	uxth	r2, r1
 8001342:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001346:	4542      	cmp	r2, r8
 8001348:	d229      	bcs.n	800139e <__udivmoddi4+0x2ea>
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001350:	d2c2      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001352:	4542      	cmp	r2, r8
 8001354:	d2c0      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001356:	f1a9 0102 	sub.w	r1, r9, #2
 800135a:	443a      	add	r2, r7
 800135c:	e7bc      	b.n	80012d8 <__udivmoddi4+0x224>
 800135e:	45c6      	cmp	lr, r8
 8001360:	d29b      	bcs.n	800129a <__udivmoddi4+0x1e6>
 8001362:	ebb8 0302 	subs.w	r3, r8, r2
 8001366:	eb6c 0c07 	sbc.w	ip, ip, r7
 800136a:	3801      	subs	r0, #1
 800136c:	46e1      	mov	r9, ip
 800136e:	e794      	b.n	800129a <__udivmoddi4+0x1e6>
 8001370:	eba7 0909 	sub.w	r9, r7, r9
 8001374:	444a      	add	r2, r9
 8001376:	fbb2 f9fe 	udiv	r9, r2, lr
 800137a:	f1a8 0c02 	sub.w	ip, r8, #2
 800137e:	fb09 f804 	mul.w	r8, r9, r4
 8001382:	e7db      	b.n	800133c <__udivmoddi4+0x288>
 8001384:	4603      	mov	r3, r0
 8001386:	e77d      	b.n	8001284 <__udivmoddi4+0x1d0>
 8001388:	46d0      	mov	r8, sl
 800138a:	e765      	b.n	8001258 <__udivmoddi4+0x1a4>
 800138c:	4608      	mov	r0, r1
 800138e:	e6fa      	b.n	8001186 <__udivmoddi4+0xd2>
 8001390:	443b      	add	r3, r7
 8001392:	3a02      	subs	r2, #2
 8001394:	e730      	b.n	80011f8 <__udivmoddi4+0x144>
 8001396:	f1ac 0c02 	sub.w	ip, ip, #2
 800139a:	443b      	add	r3, r7
 800139c:	e719      	b.n	80011d2 <__udivmoddi4+0x11e>
 800139e:	4649      	mov	r1, r9
 80013a0:	e79a      	b.n	80012d8 <__udivmoddi4+0x224>
 80013a2:	eba2 0209 	sub.w	r2, r2, r9
 80013a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80013aa:	46c4      	mov	ip, r8
 80013ac:	fb09 f804 	mul.w	r8, r9, r4
 80013b0:	e7c4      	b.n	800133c <__udivmoddi4+0x288>
 80013b2:	bf00      	nop

080013b4 <__aeabi_idiv0>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013d8:	2304      	movs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 ff7c 	bl	80062e4 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	76fb      	strb	r3, [r7, #27]
 80013f4:	e01c      	b.n	8001430 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fcbe 	bl	8005d7c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fd91 	bl	8005f30 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fe92 	bl	800613c <HAL_ADC_GetValue>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fd57 	bl	8005ed8 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	3301      	adds	r3, #1
 800142e:	76fb      	strb	r3, [r7, #27]
 8001430:	7efa      	ldrb	r2, [r7, #27]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_ui2f>
 800143e:	4604      	mov	r4, r0
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbe4 	bl	8000c10 <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fce7 	bl	8000e20 <__aeabi_fdiv>
 8001452:	4603      	mov	r3, r0
 8001454:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <ReadAverageVoltage+0xc0>)
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <ReadAverageVoltage+0xc4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000254 	.word	0x20000254
 8001478:	40533333 	.word	0x40533333
 800147c:	457ff000 	.word	0x457ff000

08001480 <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <ACS712_Init+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800148e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001492:	f004 fb77 	bl	8005b84 <HAL_Delay>
    ACS712_CalibrateZero();
 8001496:	f000 f807 	bl	80014a8 <ACS712_CalibrateZero>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000254 	.word	0x20000254

080014a8 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 80014ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b2:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	e00d      	b.n	80014dc <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff ff78 	bl	80013b8 <ReadAverageVoltage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff faeb 	bl	8000aa8 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	3301      	adds	r3, #1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ed      	bcc.n	80014c0 <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb92 	bl	8000c10 <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fc95 	bl	8000e20 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <ACS712_CalibrateZero+0x60>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000258 	.word	0x20000258

0800150c <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 8001512:	210a      	movs	r1, #10
 8001514:	2007      	movs	r0, #7
 8001516:	f7ff ff4f 	bl	80013b8 <ReadAverageVoltage>
 800151a:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <ACS712_ReadCurrent+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff fabe 	bl	8000aa4 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <ACS712_ReadCurrent+0x88>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc77 	bl	8000e20 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <ACS712_ReadCurrent+0x8c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd58 	bl	8000ff4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <ACS712_ReadCurrent+0x94>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 8001560:	4910      	ldr	r1, [pc, #64]	@ (80015a4 <ACS712_ReadCurrent+0x98>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fba8 	bl	8000cb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fa9b 	bl	8000aa8 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001578:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <ACS712_ReadCurrent+0x90>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <ACS712_ReadCurrent+0x9c>)
 8001580:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000258 	.word	0x20000258
 8001594:	3d872b02 	.word	0x3d872b02
 8001598:	3cf5c28f 	.word	0x3cf5c28f
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	3f333333 	.word	0x3f333333
 80015a4:	3e99999a 	.word	0x3e99999a
 80015a8:	2000024c 	.word	0x2000024c

080015ac <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 80015b2:	2105      	movs	r1, #5
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff feff 	bl	80013b8 <ReadAverageVoltage>
 80015ba:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <Voltage_ReadInput+0x5c>)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Voltage_ReadInput+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4910      	ldr	r1, [pc, #64]	@ (8001610 <Voltage_ReadInput+0x64>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb72 	bl	8000cb8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <Voltage_ReadInput+0x68>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff fb6c 	bl	8000cb8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fa5f 	bl	8000aa8 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <Voltage_ReadInput+0x6c>)
 80015f8:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <Voltage_ReadInput+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	3f58f2fb 	.word	0x3f58f2fb
 800160c:	20000260 	.word	0x20000260
 8001610:	3f333333 	.word	0x3f333333
 8001614:	3e99999a 	.word	0x3e99999a
 8001618:	20000250 	.word	0x20000250

0800161c <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 8001620:	f7ff ff74 	bl	800150c <ACS712_ReadCurrent>
 8001624:	4603      	mov	r3, r0
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <ACS712_Update+0x1c>)
 8001628:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 800162a:	f7ff ffbf 	bl	80015ac <Voltage_ReadInput>
 800162e:	4603      	mov	r3, r0
 8001630:	4a02      	ldr	r2, [pc, #8]	@ (800163c <ACS712_Update+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250

08001640 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800165e:	2306      	movs	r3, #6
 8001660:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f004 fe3b 	bl	80062e4 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <readChannelVoltage+0x3a>
        return 0.0f;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e029      	b.n	80016ce <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f004 fb7e 	bl	8005d7c <HAL_ADC_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <readChannelVoltage+0x4c>
        return 0.0f;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e020      	b.n	80016ce <readChannelVoltage+0x8e>

    float v = 0.0f;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001692:	210a      	movs	r1, #10
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f004 fc4b 	bl	8005f30 <HAL_ADC_PollForConversion>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 fd4b 	bl	800613c <HAL_ADC_GetValue>
 80016a6:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_ui2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <readChannelVoltage+0x98>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb00 	bl	8000cb8 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <readChannelVoltage+0x9c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbaf 	bl	8000e20 <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 fc06 	bl	8005ed8 <HAL_ADC_Stop>
    return v;
 80016cc:	69fb      	ldr	r3, [r7, #28]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40533333 	.word	0x40533333
 80016dc:	457ff000 	.word	0x457ff000

080016e0 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 ff8f 	bl	800660c <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Init+0x18>
        Error_Handler();
 80016f4:	f001 f94e 	bl	8002994 <Error_Handler>
    }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800171a:	e182      	b.n	8001a22 <ADC_ReadAllChannels+0x322>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001720:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <ADC_ReadAllChannels+0x284>)
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff89 	bl	8001640 <readChannelVoltage>
 800172e:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8001730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc4e 	bl	8000fe0 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 800174a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800174e:	498e      	ldr	r1, [pc, #568]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001756:	e01a      	b.n	800178e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8001758:	498c      	ldr	r1, [pc, #560]	@ (800198c <ADC_ReadAllChannels+0x28c>)
 800175a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175c:	f7ff faac 	bl	8000cb8 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	461d      	mov	r5, r3
 8001764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001768:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	4988      	ldr	r1, [pc, #544]	@ (8001990 <ADC_ReadAllChannels+0x290>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faa1 	bl	8000cb8 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff f992 	bl	8000aa8 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800178a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 800178e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001792:	4a7d      	ldr	r2, [pc, #500]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 800179a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800179e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017a0:	f7ff fc28 	bl	8000ff4 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 80017c0:	4974      	ldr	r1, [pc, #464]	@ (8001994 <ADC_ReadAllChannels+0x294>)
 80017c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4973      	ldr	r1, [pc, #460]	@ (8001998 <ADC_ReadAllChannels+0x298>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb27 	bl	8000e20 <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc33 	bl	8001044 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 80017e8:	2301      	movs	r3, #1
 80017ea:	461c      	mov	r4, r3
 80017ec:	496b      	ldr	r1, [pc, #428]	@ (800199c <ADC_ReadAllChannels+0x29c>)
 80017ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f0:	f7ff fc14 	bl	800101c <__aeabi_fcmpge>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <ADC_ReadAllChannels+0xfe>
 80017fa:	2300      	movs	r3, #0
 80017fc:	461c      	mov	r4, r3
 80017fe:	b2e2      	uxtb	r2, r4
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	4611      	mov	r1, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001814:	4962      	ldr	r1, [pc, #392]	@ (80019a0 <ADC_ReadAllChannels+0x2a0>)
 8001816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4619      	mov	r1, r3
 8001828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001834:	495c      	ldr	r1, [pc, #368]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fbfa 	bl	8001030 <__aeabi_fcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	4955      	ldr	r1, [pc, #340]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d168      	bne.n	8001932 <ADC_ReadAllChannels+0x232>
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f7ff fbd9 	bl	800101c <__aeabi_fcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d060      	beq.n	8001932 <ADC_ReadAllChannels+0x232>
            s_level_flags[i] = 1;
 8001870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001876:	2101      	movs	r1, #1
 8001878:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 800187a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187e:	2b04      	cmp	r3, #4
 8001880:	d82a      	bhi.n	80018d8 <ADC_ReadAllChannels+0x1d8>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ADC_ReadAllChannels+0x188>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018c1 	.word	0x080018c1
 8001898:	080018cd 	.word	0x080018cd
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 800189c:	4a44      	ldr	r2, [pc, #272]	@ (80019b0 <ADC_ReadAllChannels+0x2b0>)
 800189e:	2110      	movs	r1, #16
 80018a0:	4844      	ldr	r0, [pc, #272]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018a2:	f009 fb6f 	bl	800af84 <sniprintf>
 80018a6:	e01b      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <ADC_ReadAllChannels+0x2b8>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4841      	ldr	r0, [pc, #260]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ae:	f009 fb69 	bl	800af84 <sniprintf>
 80018b2:	e015      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <ADC_ReadAllChannels+0x2bc>)
 80018b6:	2110      	movs	r1, #16
 80018b8:	483e      	ldr	r0, [pc, #248]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ba:	f009 fb63 	bl	800af84 <sniprintf>
 80018be:	e00f      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 80018c0:	4a3f      	ldr	r2, [pc, #252]	@ (80019c0 <ADC_ReadAllChannels+0x2c0>)
 80018c2:	2110      	movs	r1, #16
 80018c4:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018c6:	f009 fb5d 	bl	800af84 <sniprintf>
 80018ca:	e009      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 80018cc:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <ADC_ReadAllChannels+0x2c4>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	4838      	ldr	r0, [pc, #224]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018d2:	f009 fb57 	bl	800af84 <sniprintf>
 80018d6:	e003      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	bf00      	nop
            }
            motorStatus = 1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <ADC_ReadAllChannels+0x2c8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 80018e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ea:	4a38      	ldr	r2, [pc, #224]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d02e      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc31 	bl	8000164 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	f1c3 021f 	rsb	r2, r3, #31
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 800190e:	4618      	mov	r0, r3
 8001910:	f009 fc4e 	bl	800b1b0 <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc23 	bl	8000164 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	f1c3 021f 	rsb	r2, r3, #31
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4929      	ldr	r1, [pc, #164]	@ (80019d0 <ADC_ReadAllChannels+0x2d0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f009 fc40 	bl	800b1b0 <strncat>
            if (dataPacketTx[0]) {
 8001930:	e011      	b.n	8001956 <ADC_ReadAllChannels+0x256>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8001932:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <ADC_ReadAllChannels+0x2d4>)
 8001940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001942:	f7ff fb57 	bl	8000ff4 <__aeabi_fcmplt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
            s_level_flags[i] = 0;
 800194c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001952:	2100      	movs	r1, #0
 8001954:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001956:	4914      	ldr	r1, [pc, #80]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800195a:	f7ff fb4b 	bl	8000ff4 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d039      	beq.n	80019d8 <ADC_ReadAllChannels+0x2d8>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8001964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d038      	beq.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	3201      	adds	r2, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800197e:	54d1      	strb	r1, [r2, r3]
 8001980:	e02f      	b.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001982:	bf00      	nop
 8001984:	0800d734 	.word	0x0800d734
 8001988:	2000027c 	.word	0x2000027c
 800198c:	3e99999a 	.word	0x3e99999a
 8001990:	3f333333 	.word	0x3f333333
 8001994:	457ff000 	.word	0x457ff000
 8001998:	40533333 	.word	0x40533333
 800199c:	404ccccd 	.word	0x404ccccd
 80019a0:	20000264 	.word	0x20000264
 80019a4:	200002a4 	.word	0x200002a4
 80019a8:	3d4ccccd 	.word	0x3d4ccccd
 80019ac:	20000294 	.word	0x20000294
 80019b0:	0800d290 	.word	0x0800d290
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	0800d298 	.word	0x0800d298
 80019bc:	0800d2a0 	.word	0x0800d2a0
 80019c0:	0800d2a8 	.word	0x0800d2a8
 80019c4:	0800d2b0 	.word	0x0800d2b0
 80019c8:	20000570 	.word	0x20000570
 80019cc:	2000029c 	.word	0x2000029c
 80019d0:	0800d2b8 	.word	0x0800d2b8
 80019d4:	3f666666 	.word	0x3f666666
        } else {
            s_low_counts[i] = 0;
 80019d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019dc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <ADC_ReadAllChannels+0x360>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <ADC_ReadAllChannels+0x318>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10d      	bne.n	8001a18 <ADC_ReadAllChannels+0x318>
 80019fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d907      	bls.n	8001a18 <ADC_ReadAllChannels+0x318>
                motorStatus = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8001a0e:	2206      	movs	r2, #6
 8001a10:	2100      	movs	r1, #0
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a14:	f009 fbc4 	bl	800b1a0 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001a18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	f67f ae78 	bls.w	800171c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8001a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb90 	bl	8000164 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fbe3 	bl	8002218 <LoRa_SendPacket>
    }
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	2000057b 	.word	0x2000057b
 8001a64:	20000570 	.word	0x20000570

08001a68 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001a68:	b490      	push	{r4, r7}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	717b      	strb	r3, [r7, #5]
 8001a82:	4613      	mov	r3, r2
 8001a84:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <map_nibble_ctrl+0x40>
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	e000      	b.n	8001aaa <map_nibble_ctrl+0x42>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <map_nibble_ctrl+0x56>
 8001aba:	2204      	movs	r2, #4
 8001abc:	e000      	b.n	8001ac0 <map_nibble_ctrl+0x58>
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	73fb      	strb	r3, [r7, #15]
    return b;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <expander_write>:

static void expander_write(uint8_t data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	214e      	movs	r1, #78	@ 0x4e
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <expander_write+0x24>)
 8001b06:	f005 fa57 	bl	8006fb8 <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000350 	.word	0x20000350

08001b18 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ffe0 	bl	8001af0 <expander_write>
    HAL_Delay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f004 f827 	bl	8005b84 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffd6 	bl	8001af0 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f004 f81d 	bl	8005b84 <HAL_Delay>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71bb      	strb	r3, [r7, #6]
 8001b60:	4613      	mov	r3, r2
 8001b62:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	79b9      	ldrb	r1, [r7, #6]
 8001b68:	79f8      	ldrb	r0, [r7, #7]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f7ff ff7c 	bl	8001a68 <map_nibble_ctrl>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffba 	bl	8001af0 <expander_write>
    pulse_enable(x);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffca 	bl	8001b18 <pulse_enable>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001b92:	2308      	movs	r3, #8
 8001b94:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffa9 	bl	8001af0 <expander_write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffc8 	bl	8001b52 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc0 	bl	8001b52 <write4bits>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f023 030f 	bic.w	r3, r3, #15
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffae 	bl	8001b52 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffa6 	bl	8001b52 <write4bits>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <lcd_clear>:

void lcd_clear(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff ffc7 	bl	8001ba6 <lcd_send_cmd>
    HAL_Delay(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f003 ffb3 	bl	8005b84 <HAL_Delay>
    lcd_send_cmd(0x80);
 8001c1e:	2080      	movs	r0, #128	@ 0x80
 8001c20:	f7ff ffc1 	bl	8001ba6 <lcd_send_cmd>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d901      	bls.n	8001c42 <lcd_put_cur+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <lcd_put_cur+0x40>)
 8001c46:	5cd2      	ldrb	r2, [r2, r3]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa4 	bl	8001ba6 <lcd_send_cmd>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800d74c 	.word	0x0800d74c

08001c6c <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001c74:	e006      	b.n	8001c84 <lcd_send_string+0x18>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffab 	bl	8001bda <lcd_send_data>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f4      	bne.n	8001c76 <lcd_send_string+0xa>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <lcd_init>:

void lcd_init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001c9a:	2032      	movs	r0, #50	@ 0x32
 8001c9c:	f003 ff72 	bl	8005b84 <HAL_Delay>
    lcd_backlight_on();
 8001ca0:	f7ff ff74 	bl	8001b8c <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2030      	movs	r0, #48	@ 0x30
 8001caa:	f7ff ff52 	bl	8001b52 <write4bits>
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f003 ff68 	bl	8005b84 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2030      	movs	r0, #48	@ 0x30
 8001cba:	f7ff ff4a 	bl	8001b52 <write4bits>
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f003 ff60 	bl	8005b84 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2030      	movs	r0, #48	@ 0x30
 8001cca:	f7ff ff42 	bl	8001b52 <write4bits>
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f003 ff58 	bl	8005b84 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff ff3a 	bl	8001b52 <write4bits>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f003 ff50 	bl	8005b84 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001ce4:	2028      	movs	r0, #40	@ 0x28
 8001ce6:	f7ff ff5e 	bl	8001ba6 <lcd_send_cmd>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f003 ff4a 	bl	8005b84 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7ff ff58 	bl	8001ba6 <lcd_send_cmd>
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f003 ff44 	bl	8005b84 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001cfc:	f7ff ff87 	bl	8001c0e <lcd_clear>
 8001d00:	2002      	movs	r0, #2
 8001d02:	f003 ff3f 	bl	8005b84 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001d06:	2006      	movs	r0, #6
 8001d08:	f7ff ff4d 	bl	8001ba6 <lcd_send_cmd>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f003 ff39 	bl	8005b84 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001d12:	200c      	movs	r0, #12
 8001d14:	f7ff ff47 	bl	8001ba6 <lcd_send_cmd>
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f003 ff33 	bl	8005b84 <HAL_Delay>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f003 ff23 	bl	8005b70 <HAL_GetTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <led_write+0x30>)
 8001d44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <led_write+0x34>)
 8001d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f004 ffbb 	bl	8006cce <HAL_GPIO_WritePin>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000010 	.word	0x20000010

08001d68 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffda 	bl	8001d30 <led_write>
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffcc 	bl	8001d30 <led_write>
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LED_Init>:

void LED_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001da6:	2210      	movs	r2, #16
 8001da8:	2100      	movs	r1, #0
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <LED_Init+0x60>)
 8001dac:	f009 f9f8 	bl	800b1a0 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8001db0:	2204      	movs	r2, #4
 8001db2:	2100      	movs	r1, #0
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <LED_Init+0x64>)
 8001db6:	f009 f9f3 	bl	800b1a0 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001dba:	2210      	movs	r2, #16
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <LED_Init+0x68>)
 8001dc0:	f009 f9ee 	bl	800b1a0 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e012      	b.n	8001df0 <LED_Init+0x50>
        led_off((LedColor)i);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffd8 	bl	8001d84 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LED_Init+0x60>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <LED_Init+0x60>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	dde9      	ble.n	8001dca <LED_Init+0x2a>
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200002cc 	.word	0x200002cc
 8001e04:	200002dc 	.word	0x200002dc
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001e12:	f7ff ff86 	bl	8001d22 <now_ms>
 8001e16:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e064      	b.n	8001ee8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <LED_Task+0xec>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LED_Task+0x24>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00b      	beq.n	8001e46 <LED_Task+0x3a>
 8001e2e:	e015      	b.n	8001e5c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <LED_Task+0xf0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffa0 	bl	8001d84 <led_off>
            break;
 8001e44:	e04d      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001e46:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <LED_Task+0xf0>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff87 	bl	8001d68 <led_on>
            break;
 8001e5a:	e042      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <LED_Task+0xec>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <LED_Task+0x6c>
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <LED_Task+0xec>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e76:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <LED_Task+0xf4>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc2b      	bgt.n	8001ee0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001e88:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <LED_Task+0xf0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <LED_Task+0xf0>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001ea6:	4a15      	ldr	r2, [pc, #84]	@ (8001efc <LED_Task+0xf0>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <LED_Task+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <led_on>
 8001ebc:	e004      	b.n	8001ec8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5e 	bl	8001d84 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <LED_Task+0xec>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <LED_Task+0xf4>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001ee0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	dd97      	ble.n	8001e1e <LED_Task+0x12>
        }
    }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	200002dc 	.word	0x200002dc
 8001f00:	200002e0 	.word	0x200002e0

08001f04 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	e00d      	b.n	8001f2c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	ddee      	ble.n	8001f10 <LED_ClearAllIntents+0xc>
    }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200002cc 	.word	0x200002cc

08001f44 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d80b      	bhi.n	8001f74 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	805a      	strh	r2, [r3, #2]
 8001f72:	e000      	b.n	8001f76 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f74:	bf00      	nop
}
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200002cc 	.word	0x200002cc

08001f84 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	733b      	strb	r3, [r7, #12]
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb4:	480a      	ldr	r0, [pc, #40]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fb6:	f004 fe8a 	bl	8006cce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001fba:	f107 010c 	add.w	r1, r7, #12
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <LoRa_WriteReg+0x54>)
 8001fc6:	f006 fffa 	bl	8008fbe <HAL_SPI_Transmit>
    NSS_HIGH();
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fd2:	f004 fe7c 	bl	8006cce <HAL_GPIO_WritePin>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40010800 	.word	0x40010800
 8001fe4:	200003b8 	.word	0x200003b8

08001fe8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002006:	480f      	ldr	r0, [pc, #60]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002008:	f004 fe61 	bl	8006cce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 800200c:	f107 010f 	add.w	r1, r7, #15
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	2201      	movs	r2, #1
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002018:	f006 ffd1 	bl	8008fbe <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800201c:	f107 010e 	add.w	r1, r7, #14
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	2201      	movs	r2, #1
 8002026:	4808      	ldr	r0, [pc, #32]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002028:	f007 f90d 	bl	8009246 <HAL_SPI_Receive>
    NSS_HIGH();
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002034:	f004 fe4b 	bl	8006cce <HAL_GPIO_WritePin>
    return rx;
 8002038:	7bbb      	ldrb	r3, [r7, #14]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40010800 	.word	0x40010800
 8002048:	200003b8 	.word	0x200003b8

0800204c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206c:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800206e:	f004 fe2e 	bl	8006cce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8002072:	f107 010f 	add.w	r1, r7, #15
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	2201      	movs	r2, #1
 800207c:	480b      	ldr	r0, [pc, #44]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800207e:	f006 ff9e 	bl	8008fbe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	b29a      	uxth	r2, r3
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800208e:	f006 ff96 	bl	8008fbe <HAL_SPI_Transmit>
    NSS_HIGH();
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800209a:	f004 fe18 	bl	8006cce <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010800 	.word	0x40010800
 80020ac:	200003b8 	.word	0x200003b8

080020b0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ba:	f004 fe08 	bl	8006cce <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020be:	2002      	movs	r0, #2
 80020c0:	f003 fd60 	bl	8005b84 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2140      	movs	r1, #64	@ 0x40
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ca:	f004 fe00 	bl	8006cce <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020ce:	2002      	movs	r0, #2
 80020d0:	f003 fd58 	bl	8005b84 <HAL_Delay>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010c00 	.word	0x40010c00

080020dc <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	2000      	movs	r0, #0
 80020e8:	460a      	mov	r2, r1
 80020ea:	4603      	mov	r3, r0
 80020ec:	0b55      	lsrs	r5, r2, #13
 80020ee:	04d4      	lsls	r4, r2, #19
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <LoRa_SetFrequency+0x78>)
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe ffc3 	bl	8001084 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8002106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	0c02      	lsrs	r2, r0, #16
 8002114:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002118:	0c0b      	lsrs	r3, r1, #16
 800211a:	b2d3      	uxtb	r3, r2
 800211c:	4619      	mov	r1, r3
 800211e:	2006      	movs	r0, #6
 8002120:	f7ff ff36 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	0a02      	lsrs	r2, r0, #8
 8002132:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002136:	0a0b      	lsrs	r3, r1, #8
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	4619      	mov	r1, r3
 800213c:	2007      	movs	r0, #7
 800213e:	f7ff ff27 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	4619      	mov	r1, r3
 8002146:	2008      	movs	r0, #8
 8002148:	f7ff ff22 	bl	8001f90 <LoRa_WriteReg>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	01e84800 	.word	0x01e84800

08002158 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800215c:	f7ff ffa8 	bl	80020b0 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8002160:	2100      	movs	r1, #0
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff14 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002168:	2002      	movs	r0, #2
 800216a:	f003 fd0b 	bl	8005b84 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff ff0d 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f003 fd04 	bl	8005b84 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 800217c:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <LoRa_Init+0x8c>)
 800217e:	f7ff ffad 	bl	80020dc <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8002182:	218f      	movs	r1, #143	@ 0x8f
 8002184:	2009      	movs	r0, #9
 8002186:	f7ff ff03 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800218a:	2187      	movs	r1, #135	@ 0x87
 800218c:	204d      	movs	r0, #77	@ 0x4d
 800218e:	f7ff feff 	bl	8001f90 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002192:	2123      	movs	r1, #35	@ 0x23
 8002194:	200c      	movs	r0, #12
 8002196:	f7ff fefb 	bl	8001f90 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800219a:	2172      	movs	r1, #114	@ 0x72
 800219c:	201d      	movs	r0, #29
 800219e:	f7ff fef7 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80021a2:	2174      	movs	r1, #116	@ 0x74
 80021a4:	201e      	movs	r0, #30
 80021a6:	f7ff fef3 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80021aa:	2104      	movs	r1, #4
 80021ac:	2026      	movs	r0, #38	@ 0x26
 80021ae:	f7ff feef 	bl	8001f90 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80021b2:	2100      	movs	r1, #0
 80021b4:	2020      	movs	r0, #32
 80021b6:	f7ff feeb 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80021ba:	2108      	movs	r1, #8
 80021bc:	2021      	movs	r0, #33	@ 0x21
 80021be:	f7ff fee7 	bl	8001f90 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 80021c2:	2122      	movs	r1, #34	@ 0x22
 80021c4:	2039      	movs	r0, #57	@ 0x39
 80021c6:	f7ff fee3 	bl	8001f90 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2040      	movs	r0, #64	@ 0x40
 80021ce:	f7ff fedf 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80021d2:	21ff      	movs	r1, #255	@ 0xff
 80021d4:	2012      	movs	r0, #18
 80021d6:	f7ff fedb 	bl	8001f90 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 80021da:	f000 f80d 	bl	80021f8 <LoRa_SetRxContinuous>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	19cf0e40 	.word	0x19cf0e40

080021e8 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	2181      	movs	r1, #129	@ 0x81
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fece 	bl	8001f90 <LoRa_WriteReg>
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2185      	movs	r1, #133	@ 0x85
 80021fe:	2001      	movs	r0, #1
 8002200:	f7ff fec6 	bl	8001f90 <LoRa_WriteReg>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2183      	movs	r1, #131	@ 0x83
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff febe 	bl	8001f90 <LoRa_WriteReg>
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <LoRa_SendPacket+0x98>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d03c      	beq.n	80022a6 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 800222c:	f7ff ffdc 	bl	80021e8 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 8002230:	2100      	movs	r1, #0
 8002232:	200e      	movs	r0, #14
 8002234:	f7ff feac 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8002238:	2100      	movs	r1, #0
 800223a:	200d      	movs	r0, #13
 800223c:	f7ff fea8 	bl	8001f90 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	461a      	mov	r2, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff ff00 	bl	800204c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	2022      	movs	r0, #34	@ 0x22
 8002252:	f7ff fe9d 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002256:	21ff      	movs	r1, #255	@ 0xff
 8002258:	2012      	movs	r0, #18
 800225a:	f7ff fe99 	bl	8001f90 <LoRa_WriteReg>

    LoRa_SetTx();
 800225e:	f7ff ffd3 	bl	8002208 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 8002262:	f003 fc85 	bl	8005b70 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002268:	e00e      	b.n	8002288 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 800226a:	f003 fc81 	bl	8005b70 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002278:	d906      	bls.n	8002288 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 800227a:	21ff      	movs	r1, #255	@ 0xff
 800227c:	2012      	movs	r0, #18
 800227e:	f7ff fe87 	bl	8001f90 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 8002282:	f7ff ffb9 	bl	80021f8 <LoRa_SetRxContinuous>
            return;
 8002286:	e00f      	b.n	80022a8 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002288:	2012      	movs	r0, #18
 800228a:	f7ff fead 	bl	8001fe8 <LoRa_ReadReg>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0e8      	beq.n	800226a <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 8002298:	2108      	movs	r1, #8
 800229a:	2012      	movs	r0, #18
 800229c:	f7ff fe78 	bl	8001f90 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 80022a0:	f7ff ffaa 	bl	80021f8 <LoRa_SetRxContinuous>
 80022a4:	e000      	b.n	80022a8 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 80022a6:	bf00      	nop
}
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000018 	.word	0x20000018

080022b4 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4803      	ldr	r0, [pc, #12]	@ (80022cc <Debug_Print+0x18>)
 80022c0:	f003 fb82 	bl	80059c8 <UART_TransmitString>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000458 	.word	0x20000458

080022d0 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_ADC_ConvCpltCallback+0x8c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d138      	bne.n	8002354 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e02e      	b.n	8002346 <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_ADC_ConvCpltCallback+0x90>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fc8d 	bl	8000c10 <__aeabi_i2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	491a      	ldr	r1, [pc, #104]	@ (8002364 <HAL_ADC_ConvCpltCallback+0x94>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcdc 	bl	8000cb8 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	4919      	ldr	r1, [pc, #100]	@ (8002368 <HAL_ADC_ConvCpltCallback+0x98>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd8b 	bl	8000e20 <__aeabi_fdiv>
 800230a:	4603      	mov	r3, r0
 800230c:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fccd 	bl	8000cb8 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f7fe fcc7 	bl	8000cb8 <__aeabi_fmul>
 800232a:	4603      	mov	r3, r0
 800232c:	4619      	mov	r1, r3
 800232e:	4620      	mov	r0, r4
 8002330:	f7fe fbba 	bl	8000aa8 <__addsf3>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b06      	cmp	r3, #6
 800234a:	ddcd      	ble.n	80022e8 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002352:	6013      	str	r3, [r2, #0]
    }
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	40012400 	.word	0x40012400
 8002360:	200002f0 	.word	0x200002f0
 8002364:	40533333 	.word	0x40533333
 8002368:	457ff000 	.word	0x457ff000
 800236c:	20000300 	.word	0x20000300
 8002370:	3f666666 	.word	0x3f666666
 8002374:	3dcccccd 	.word	0x3dcccccd
 8002378:	2000031c 	.word	0x2000031c

0800237c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b08b      	sub	sp, #44	@ 0x2c
 8002380:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002382:	f003 fb9d 	bl	8005ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002386:	f000 f8ad 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238a:	f000 fa85 	bl	8002898 <MX_GPIO_Init>
  MX_ADC1_Init();
 800238e:	f000 f905 	bl	800259c <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8002392:	f000 f9d3 	bl	800273c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002396:	f000 fa55 	bl	8002844 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800239a:	f000 f9a1 	bl	80026e0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800239e:	f000 fa03 	bl	80027a8 <MX_TIM3_Init>
  UART_Init();
 80023a2:	f003 faf3 	bl	800598c <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80023a6:	4846      	ldr	r0, [pc, #280]	@ (80024c0 <main+0x144>)
 80023a8:	f007 fb6a 	bl	8009a80 <HAL_TIM_Base_Start>
  RF_Init();
 80023ac:	f001 fb3e 	bl	8003a2c <RF_Init>
  lcd_init();
 80023b0:	f7ff fc71 	bl	8001c96 <lcd_init>
  ADC_Init(&hadc1);
 80023b4:	4843      	ldr	r0, [pc, #268]	@ (80024c4 <main+0x148>)
 80023b6:	f7ff f993 	bl	80016e0 <ADC_Init>
  LoRa_Init();
 80023ba:	f7ff fecd 	bl	8002158 <LoRa_Init>
  Screen_Init();
 80023be:	f002 fad9 	bl	8004974 <Screen_Init>
  UART_Init();
 80023c2:	f003 fae3 	bl	800598c <UART_Init>
  Switches_Init();
 80023c6:	f003 f9c1 	bl	800574c <Switches_Init>
  Relay_Init();
 80023ca:	f001 fa7f 	bl	80038cc <Relay_Init>
  LED_Init();
 80023ce:	f7ff fce7 	bl	8001da0 <LED_Init>


  ACS712_Init(&hadc1);
 80023d2:	483c      	ldr	r0, [pc, #240]	@ (80024c4 <main+0x148>)
 80023d4:	f7ff f854 	bl	8001480 <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 80023d8:	f001 fbc4 	bl	8003b64 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 80023dc:	f001 fc12 	bl	8003c04 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 80023e0:	4839      	ldr	r0, [pc, #228]	@ (80024c8 <main+0x14c>)
 80023e2:	f7ff ff67 	bl	80022b4 <Debug_Print>

  uint8_t lastSecond = 255;
 80023e6:	23ff      	movs	r3, #255	@ 0xff
 80023e8:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 80023ea:	f7ff f917 	bl	800161c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 80023ee:	2118      	movs	r1, #24
 80023f0:	4836      	ldr	r0, [pc, #216]	@ (80024cc <main+0x150>)
 80023f2:	f001 fb5c 	bl	8003aae <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 80023f6:	f002 ff4d 	bl	8005294 <Screen_HandleSwitches>
      Screen_Update();
 80023fa:	f002 f84f 	bl	800449c <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 80023fe:	4934      	ldr	r1, [pc, #208]	@ (80024d0 <main+0x154>)
 8002400:	4830      	ldr	r0, [pc, #192]	@ (80024c4 <main+0x148>)
 8002402:	f7ff f97d 	bl	8001700 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 8002406:	f001 fbfd 	bl	8003c04 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 800240a:	4b32      	ldr	r3, [pc, #200]	@ (80024d4 <main+0x158>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	429a      	cmp	r2, r3
 8002412:	d025      	beq.n	8002460 <main+0xe4>
          lastSecond = time.seconds;
 8002414:	4b2f      	ldr	r3, [pc, #188]	@ (80024d4 <main+0x158>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800241a:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <main+0x158>)
 800241c:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 800241e:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002420:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <main+0x158>)
 8002422:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002424:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <main+0x158>)
 8002428:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800242a:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <main+0x158>)
 800242e:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 8002430:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <main+0x158>)
 8002434:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 8002436:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 8002438:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <main+0x158>)
 800243a:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 800243c:	461d      	mov	r5, r3
                   time.dayofweek);
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <main+0x158>)
 8002440:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 8002442:	9305      	str	r3, [sp, #20]
 8002444:	9504      	str	r5, [sp, #16]
 8002446:	9403      	str	r4, [sp, #12]
 8002448:	9002      	str	r0, [sp, #8]
 800244a:	9101      	str	r1, [sp, #4]
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	4633      	mov	r3, r6
 8002450:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <main+0x15c>)
 8002452:	2164      	movs	r1, #100	@ 0x64
 8002454:	4821      	ldr	r0, [pc, #132]	@ (80024dc <main+0x160>)
 8002456:	f008 fd95 	bl	800af84 <sniprintf>
          Debug_Print(dbg);
 800245a:	4820      	ldr	r0, [pc, #128]	@ (80024dc <main+0x160>)
 800245c:	f7ff ff2a 	bl	80022b4 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <main+0x164>)
 8002464:	f003 fac4 	bl	80059f0 <UART_GetReceivedPacket>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01f      	beq.n	80024ae <main+0x132>
          char *p = receivedUartPacket;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <main+0x164>)
 8002470:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 8002472:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <main+0x164>)
 8002474:	f7fd fe76 	bl	8000164 <strlen>
 8002478:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d913      	bls.n	80024a8 <main+0x12c>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d10f      	bne.n	80024a8 <main+0x12c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b23      	cmp	r3, #35	@ 0x23
 8002494:	d108      	bne.n	80024a8 <main+0x12c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3b01      	subs	r3, #1
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f001 f9c1 	bl	8003830 <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 80024ae:	f001 f9ad 	bl	800380c <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 80024b2:	f7ff fcab 	bl	8001e0c <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 80024b6:	2014      	movs	r0, #20
 80024b8:	f003 fb64 	bl	8005b84 <HAL_Delay>
  {
 80024bc:	e795      	b.n	80023ea <main+0x6e>
 80024be:	bf00      	nop
 80024c0:	20000410 	.word	0x20000410
 80024c4:	20000320 	.word	0x20000320
 80024c8:	0800d2d4 	.word	0x0800d2d4
 80024cc:	001af5f8 	.word	0x001af5f8
 80024d0:	200004a0 	.word	0x200004a0
 80024d4:	200005f4 	.word	0x200005f4
 80024d8:	0800d2ec 	.word	0x0800d2ec
 80024dc:	2000050c 	.word	0x2000050c
 80024e0:	200004cc 	.word	0x200004cc

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	@ 0x50
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ee:	2228      	movs	r2, #40	@ 0x28
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f008 fe54 	bl	800b1a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002514:	230a      	movs	r3, #10
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	2301      	movs	r3, #1
 800251a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	2310      	movs	r3, #16
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002520:	2301      	movs	r3, #1
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002524:	2302      	movs	r3, #2
 8002526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002528:	2300      	movs	r3, #0
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800252c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002536:	4618      	mov	r0, r3
 8002538:	f005 ff0e 	bl	8008358 <HAL_RCC_OscConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002542:	f000 fa27 	bl	8002994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002546:	230f      	movs	r3, #15
 8002548:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f006 f97a 	bl	800885c <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800256e:	f000 fa11 	bl	8002994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002572:	2303      	movs	r3, #3
 8002574:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800257c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f006 faf7 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002590:	f000 fa00 	bl	8002994 <Error_Handler>
  }
}
 8002594:	bf00      	nop
 8002596:	3750      	adds	r7, #80	@ 0x50
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025ac:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025ae:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <MX_ADC1_Init+0x140>)
 80025b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025b2:	4b49      	ldr	r3, [pc, #292]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c0:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80025cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ce:	4b42      	ldr	r3, [pc, #264]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80025d4:	4b40      	ldr	r3, [pc, #256]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d6:	2208      	movs	r2, #8
 80025d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025da:	483f      	ldr	r0, [pc, #252]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025dc:	f003 faf6 	bl	8005bcc <HAL_ADC_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80025e6:	f000 f9d5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4837      	ldr	r0, [pc, #220]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025fc:	f003 fe72 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 f9c5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800260a:	2301      	movs	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800260e:	2302      	movs	r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4830      	ldr	r0, [pc, #192]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002618:	f003 fe64 	bl	80062e4 <HAL_ADC_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002622:	f000 f9b7 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002626:	2302      	movs	r3, #2
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800262a:	2303      	movs	r3, #3
 800262c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4829      	ldr	r0, [pc, #164]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002634:	f003 fe56 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800263e:	f000 f9a9 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002642:	2303      	movs	r3, #3
 8002644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002646:	2304      	movs	r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4822      	ldr	r0, [pc, #136]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002650:	f003 fe48 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800265a:	f000 f99b 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800265e:	2304      	movs	r3, #4
 8002660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002662:	2305      	movs	r3, #5
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	481b      	ldr	r0, [pc, #108]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 800266c:	f003 fe3a 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002676:	f000 f98d 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800267a:	2305      	movs	r3, #5
 800267c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800267e:	2306      	movs	r3, #6
 8002680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002688:	f003 fe2c 	bl	80062e4 <HAL_ADC_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002692:	f000 f97f 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002696:	2307      	movs	r3, #7
 8002698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800269a:	2307      	movs	r3, #7
 800269c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026a4:	f003 fe1e 	bl	80062e4 <HAL_ADC_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80026ae:	f000 f971 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026b2:	2306      	movs	r3, #6
 80026b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80026b6:	2308      	movs	r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026c0:	f003 fe10 	bl	80062e4 <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80026ca:	f000 f963 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000320 	.word	0x20000320
 80026dc:	40012400 	.word	0x40012400

080026e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026e6:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <MX_I2C2_Init+0x54>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <MX_I2C2_Init+0x58>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_I2C2_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	@ (8002730 <MX_I2C2_Init+0x50>)
 800271e:	f004 fb07 	bl	8006d30 <HAL_I2C_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002728:	f000 f934 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000350 	.word	0x20000350
 8002734:	40005800 	.word	0x40005800
 8002738:	000186a0 	.word	0x000186a0

0800273c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <MX_SPI1_Init+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800274c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002770:	2218      	movs	r2, #24
 8002772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002788:	220a      	movs	r2, #10
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800278e:	f006 fb92 	bl	8008eb6 <HAL_SPI_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002798:	f000 f8fc 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200003b8 	.word	0x200003b8
 80027a4:	40013000 	.word	0x40013000

080027a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <MX_TIM3_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <MX_TIM3_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <MX_TIM3_Init+0x94>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ea:	4814      	ldr	r0, [pc, #80]	@ (800283c <MX_TIM3_Init+0x94>)
 80027ec:	f007 f8f9 	bl	80099e2 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027f6:	f000 f8cd 	bl	8002994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	@ (800283c <MX_TIM3_Init+0x94>)
 8002808:	f007 f984 	bl	8009b14 <HAL_TIM_ConfigClockSource>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 f8bf 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <MX_TIM3_Init+0x94>)
 8002824:	f007 fb42 	bl	8009eac <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800282e:	f000 f8b1 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000410 	.word	0x20000410
 8002840:	40000400 	.word	0x40000400

08002844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <MX_USART1_UART_Init+0x50>)
 800284c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800287c:	f007 fb74 	bl	8009f68 <HAL_UART_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002886:	f000 f885 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000458 	.word	0x20000458
 8002894:	40013800 	.word	0x40013800

08002898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ac:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028b2:	f043 0310 	orr.w	r3, r3, #16
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80028f4:	2200      	movs	r2, #0
 80028f6:	f240 3147 	movw	r1, #839	@ 0x347
 80028fa:	4823      	ldr	r0, [pc, #140]	@ (8002988 <MX_GPIO_Init+0xf0>)
 80028fc:	f004 f9e7 	bl	8006cce <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002906:	4821      	ldr	r0, [pc, #132]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002908:	f004 f9e1 	bl	8006cce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 800290c:	f240 3347 	movw	r3, #839	@ 0x347
 8002910:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4619      	mov	r1, r3
 8002924:	4818      	ldr	r0, [pc, #96]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002926:	f004 f837 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800292a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800292e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002930:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <MX_GPIO_Init+0xf8>)
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4812      	ldr	r0, [pc, #72]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002940:	f004 f82a 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002944:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	480b      	ldr	r0, [pc, #44]	@ (800298c <MX_GPIO_Init+0xf4>)
 800295e:	f004 f81b 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4619      	mov	r1, r3
 8002974:	4804      	ldr	r0, [pc, #16]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002976:	f004 f80f 	bl	8006998 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40010800 	.word	0x40010800
 8002990:	10310000 	.word	0x10310000

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <Error_Handler+0x8>

080029a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029a4:	f3bf 8f4f 	dsb	sy
}
 80029a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029b2:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_SystemReset+0x28>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029ba:	f3bf 8f4f 	dsb	sy
}
 80029be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <__NVIC_SystemReset+0x20>
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	05fa0004 	.word	0x05fa0004

080029cc <now_ms>:
static uint32_t       maxRunStartTick  = 0;

/* =========================
   Utilities
   ========================= */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f003 f8ce 	bl	8005b70 <HAL_GetTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}

080029da <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	460a      	mov	r2, r1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80029f0:	fb02 f103 	mul.w	r1, r2, r3
 80029f4:	79ba      	ldrb	r2, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
	...

08002a0c <motor_apply>:

/* =========================
   Motor Control
   ========================= */
static inline void motor_apply(bool on)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 ffa0 	bl	8003960 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <motor_apply+0x1e>
 8002a26:	2201      	movs	r2, #1
 8002a28:	e000      	b.n	8002a2c <motor_apply+0x20>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <motor_apply+0x58>)
 8002a2e:	701a      	strb	r2, [r3, #0]

    if (on) {
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002a36:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <motor_apply+0x5c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f083 0301 	eor.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <motor_apply+0x50>
            maxRunTimerArmed = true;
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <motor_apply+0x5c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002a4a:	f7ff ffbf 	bl	80029cc <now_ms>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <motor_apply+0x60>)
 8002a52:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8002a54:	e002      	b.n	8002a5c <motor_apply+0x50>
        maxRunTimerArmed = false;
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <motor_apply+0x5c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000570 	.word	0x20000570
 8002a68:	2000057c 	.word	0x2000057c
 8002a6c:	20000580 	.word	0x20000580

08002a70 <start_motor>:
static inline void start_motor(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
    Relay_Set(1, true);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 ff72 	bl	8003960 <Relay_Set>
    motorStatus = 1U;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <start_motor+0x30>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
    printf("Relay1 -> %s\r\n", Relay_Get(1) ? "ON" : "OFF");
 8002a82:	2001      	movs	r0, #1
 8002a84:	f000 ff90 	bl	80039a8 <Relay_Get>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <start_motor+0x22>
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <start_motor+0x34>)
 8002a90:	e000      	b.n	8002a94 <start_motor+0x24>
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <start_motor+0x38>)
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	@ (8002aac <start_motor+0x3c>)
 8002a98:	f008 fa04 	bl	800aea4 <iprintf>
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000570 	.word	0x20000570
 8002aa4:	0800d320 	.word	0x0800d320
 8002aa8:	0800d324 	.word	0x0800d324
 8002aac:	0800d328 	.word	0x0800d328

08002ab0 <stop_motor>:

static inline void stop_motor(void)  { motor_apply(false); }
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff ffa9 	bl	8002a0c <motor_apply>
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <isTankFull>:

/* =========================
   Tank Check (4/5 submerged)
   ========================= */
static bool isTankFull(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	e012      	b.n	8002af6 <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b10 <isTankFull+0x50>)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	490d      	ldr	r1, [pc, #52]	@ (8002b14 <isTankFull+0x54>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fa88 	bl	8000ff4 <__aeabi_fcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <isTankFull+0x30>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	dde9      	ble.n	8002ad0 <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	bfcc      	ite	gt
 8002b02:	2301      	movgt	r3, #1
 8002b04:	2300      	movle	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200004a0 	.word	0x200004a0
 8002b14:	3dcccccd 	.word	0x3dcccccd

08002b18 <dry_raw_is_dry>:

/* =========================
   DRY helpers (shared)
   ========================= */
static inline bool dry_raw_is_dry(void)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
    float v = adcData.voltages[0];
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <dry_raw_is_dry+0x2c>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	607b      	str	r3, [r7, #4]
    if (DRY_ACTIVE_LOW) return (v < DRY_THRESHOLD_V);
 8002b24:	2301      	movs	r3, #1
 8002b26:	461c      	mov	r4, r3
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <dry_raw_is_dry+0x30>)
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fa62 	bl	8000ff4 <__aeabi_fcmplt>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <dry_raw_is_dry+0x22>
 8002b36:	2300      	movs	r3, #0
 8002b38:	461c      	mov	r4, r3
 8002b3a:	b2e3      	uxtb	r3, r4
    else                return (v > DRY_THRESHOLD_V);
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	200004a0 	.word	0x200004a0
 8002b48:	3dcccccd 	.word	0x3dcccccd

08002b4c <ModelHandle_ToggleManual>:

/* =========================
   Manual Mode
   ========================= */
void ModelHandle_ToggleManual(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
    semiAutoActive  = false;
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <ModelHandle_ToggleManual+0x6c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <ModelHandle_ToggleManual+0x70>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <ModelHandle_ToggleManual+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <ModelHandle_ToggleManual+0x78>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <ModelHandle_ToggleManual+0x7c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]

    manualOverride = true;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <ModelHandle_ToggleManual+0x80>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
    manualActive   = !manualActive;
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <ModelHandle_ToggleManual+0x84>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <ModelHandle_ToggleManual+0x84>)
 8002b92:	701a      	strb	r2, [r3, #0]

    if (manualActive) {
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <ModelHandle_ToggleManual+0x84>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <ModelHandle_ToggleManual+0x5e>
        start_motor();
 8002b9e:	f7ff ff67 	bl	8002a70 <start_motor>
        printf("Manual ON\r\n");
 8002ba2:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <ModelHandle_ToggleManual+0x88>)
 8002ba4:	f008 f9e6 	bl	800af74 <puts>
    } else {
        stop_motor();
        printf("Manual OFF\r\n");
    }
}
 8002ba8:	e004      	b.n	8002bb4 <ModelHandle_ToggleManual+0x68>
        stop_motor();
 8002baa:	f7ff ff81 	bl	8002ab0 <stop_motor>
        printf("Manual OFF\r\n");
 8002bae:	480a      	ldr	r0, [pc, #40]	@ (8002bd8 <ModelHandle_ToggleManual+0x8c>)
 8002bb0:	f008 f9e0 	bl	800af74 <puts>
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000576 	.word	0x20000576
 8002bbc:	20000575 	.word	0x20000575
 8002bc0:	20000574 	.word	0x20000574
 8002bc4:	20000572 	.word	0x20000572
 8002bc8:	20000573 	.word	0x20000573
 8002bcc:	2000057b 	.word	0x2000057b
 8002bd0:	20000571 	.word	0x20000571
 8002bd4:	0800d338 	.word	0x0800d338
 8002bd8:	0800d344 	.word	0x0800d344

08002bdc <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <ModelHandle_ManualLongPress+0x20>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <ModelHandle_ManualLongPress+0x24>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    printf("Manual Long Press → Restarting...\r\n");
 8002bec:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <ModelHandle_ManualLongPress+0x28>)
 8002bee:	f008 f9c1 	bl	800af74 <puts>
    HAL_Delay(100);
 8002bf2:	2064      	movs	r0, #100	@ 0x64
 8002bf4:	f002 ffc6 	bl	8005b84 <HAL_Delay>
    NVIC_SystemReset();
 8002bf8:	f7ff fed2 	bl	80029a0 <__NVIC_SystemReset>
 8002bfc:	2000057b 	.word	0x2000057b
 8002c00:	20000571 	.word	0x20000571
 8002c04:	0800d350 	.word	0x0800d350

08002c08 <ModelHandle_StopCountdown>:
static uint32_t cd_run_seconds      = 0;
static bool     cd_in_rest          = false;
static const uint32_t CD_REST_MS    = 3000;

void ModelHandle_StopCountdown(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
    stop_motor();
 8002c0c:	f7ff ff50 	bl	8002ab0 <stop_motor>
    countdownActive        = false;
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <ModelHandle_StopCountdown+0x30>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    countdownMode          = false;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <ModelHandle_StopCountdown+0x34>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
    countdownRemainingRuns = 0;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <ModelHandle_StopCountdown+0x38>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]
    cd_run_seconds         = 0;
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <ModelHandle_StopCountdown+0x3c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    cd_in_rest             = false;
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <ModelHandle_StopCountdown+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    countdownDuration      = 0;
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <ModelHandle_StopCountdown+0x44>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000572 	.word	0x20000572
 8002c3c:	20000019 	.word	0x20000019
 8002c40:	200005c4 	.word	0x200005c4
 8002c44:	200005d0 	.word	0x200005d0
 8002c48:	200005d4 	.word	0x200005d4
 8002c4c:	20000584 	.word	0x20000584

08002c50 <countdown_start_one_run>:
static void countdown_start_one_run(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
    cd_deadline_ms    = now_ms() + (cd_run_seconds * 1000UL);
 8002c54:	f7ff feba 	bl	80029cc <now_ms>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <countdown_start_one_run+0x34>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <countdown_start_one_run+0x38>)
 8002c6a:	6013      	str	r3, [r2, #0]
    countdownDuration = cd_run_seconds;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <countdown_start_one_run+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a06      	ldr	r2, [pc, #24]	@ (8002c8c <countdown_start_one_run+0x3c>)
 8002c72:	6013      	str	r3, [r2, #0]
    cd_in_rest        = false;
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <countdown_start_one_run+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
    start_motor();
 8002c7a:	f7ff fef9 	bl	8002a70 <start_motor>
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200005d0 	.word	0x200005d0
 8002c88:	200005c8 	.word	0x200005c8
 8002c8c:	20000584 	.word	0x20000584
 8002c90:	200005d4 	.word	0x200005d4

08002c94 <ModelHandle_StartCountdown>:
void ModelHandle_StartCountdown(uint32_t seconds_per_run, uint16_t repeats)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
    if (seconds_per_run == 0 || repeats == 0) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <ModelHandle_StartCountdown+0x18>
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <ModelHandle_StartCountdown+0x1e>
        ModelHandle_StopCountdown();
 8002cac:	f7ff ffac 	bl	8002c08 <ModelHandle_StopCountdown>
        return;
 8002cb0:	e01f      	b.n	8002cf2 <ModelHandle_StartCountdown+0x5e>
    }

    manualActive   = false;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <ModelHandle_StartCountdown+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
    semiAutoActive = false;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <ModelHandle_StartCountdown+0x68>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <ModelHandle_StartCountdown+0x6c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <ModelHandle_StartCountdown+0x70>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8002cca:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <ModelHandle_StartCountdown+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]

    countdownMode          = true;
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <ModelHandle_StartCountdown+0x78>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
    countdownActive        = true;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <ModelHandle_StartCountdown+0x7c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    cd_run_seconds         = seconds_per_run;
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <ModelHandle_StartCountdown+0x80>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
    countdownRemainingRuns = repeats;
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <ModelHandle_StartCountdown+0x84>)
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	8013      	strh	r3, [r2, #0]
    cd_in_rest             = false;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <ModelHandle_StartCountdown+0x88>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]

    countdown_start_one_run();
 8002cee:	f7ff ffaf 	bl	8002c50 <countdown_start_one_run>
}
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000571 	.word	0x20000571
 8002cfc:	20000576 	.word	0x20000576
 8002d00:	20000575 	.word	0x20000575
 8002d04:	20000574 	.word	0x20000574
 8002d08:	20000573 	.word	0x20000573
 8002d0c:	20000019 	.word	0x20000019
 8002d10:	20000572 	.word	0x20000572
 8002d14:	200005d0 	.word	0x200005d0
 8002d18:	200005c4 	.word	0x200005c4
 8002d1c:	200005d4 	.word	0x200005d4

08002d20 <countdown_tick>:
static void countdown_tick(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8002d26:	4b34      	ldr	r3, [pc, #208]	@ (8002df8 <countdown_tick+0xd8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d158      	bne.n	8002de8 <countdown_tick+0xc8>
    uint32_t now = now_ms();
 8002d36:	f7ff fe49 	bl	80029cc <now_ms>
 8002d3a:	6078      	str	r0, [r7, #4]

    if (cd_in_rest) {
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <countdown_tick+0xdc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <countdown_tick+0x46>
        if ((int32_t)(cd_rest_deadline_ms - now) <= 0) {
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <countdown_tick+0xe0>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	dc4d      	bgt.n	8002dec <countdown_tick+0xcc>
            if (countdownRemainingRuns > 0) {
 8002d50:	4b2c      	ldr	r3, [pc, #176]	@ (8002e04 <countdown_tick+0xe4>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <countdown_tick+0x40>
                countdown_start_one_run();
 8002d5a:	f7ff ff79 	bl	8002c50 <countdown_start_one_run>
            } else {
                ModelHandle_StopCountdown();
            }
        }
        return;
 8002d5e:	e045      	b.n	8002dec <countdown_tick+0xcc>
                ModelHandle_StopCountdown();
 8002d60:	f7ff ff52 	bl	8002c08 <ModelHandle_StopCountdown>
        return;
 8002d64:	e042      	b.n	8002dec <countdown_tick+0xcc>
    }

    if ((int32_t)(cd_deadline_ms - now) > 0) {
 8002d66:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <countdown_tick+0xe8>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dd17      	ble.n	8002da2 <countdown_tick+0x82>
        uint32_t rem_ms = cd_deadline_ms - now;
 8002d72:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <countdown_tick+0xe8>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	603b      	str	r3, [r7, #0]
        countdownDuration = (rem_ms + 999U) / 1000U;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002d82:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <countdown_tick+0xec>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <countdown_tick+0xf0>)
 8002d8c:	6013      	str	r3, [r2, #0]

        if (isTankFull()) {
 8002d8e:	f7ff fe97 	bl	8002ac0 <isTankFull>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d02b      	beq.n	8002df0 <countdown_tick+0xd0>
            stop_motor();
 8002d98:	f7ff fe8a 	bl	8002ab0 <stop_motor>
            ModelHandle_StopCountdown();
 8002d9c:	f7ff ff34 	bl	8002c08 <ModelHandle_StopCountdown>
        }
        return;
 8002da0:	e026      	b.n	8002df0 <countdown_tick+0xd0>
    }

    stop_motor();
 8002da2:	f7ff fe85 	bl	8002ab0 <stop_motor>
    if (countdownRemainingRuns > 0) countdownRemainingRuns--;
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <countdown_tick+0xe4>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <countdown_tick+0x9e>
 8002db0:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <countdown_tick+0xe4>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <countdown_tick+0xe4>)
 8002dbc:	801a      	strh	r2, [r3, #0]
    if (countdownRemainingRuns == 0) {
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <countdown_tick+0xe4>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <countdown_tick+0xae>
        ModelHandle_StopCountdown();
 8002dc8:	f7ff ff1e 	bl	8002c08 <ModelHandle_StopCountdown>
        return;
 8002dcc:	e011      	b.n	8002df2 <countdown_tick+0xd2>
    }

    cd_in_rest          = true;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <countdown_tick+0xdc>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
    cd_rest_deadline_ms = now + CD_REST_MS;
 8002dd4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <countdown_tick+0xe0>)
 8002dde:	6013      	str	r3, [r2, #0]
    countdownDuration   = 0;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <countdown_tick+0xf0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e004      	b.n	8002df2 <countdown_tick+0xd2>
    if (!countdownActive) return;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <countdown_tick+0xd2>
        return;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <countdown_tick+0xd2>
        return;
 8002df0:	bf00      	nop
}
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000572 	.word	0x20000572
 8002dfc:	200005d4 	.word	0x200005d4
 8002e00:	200005cc 	.word	0x200005cc
 8002e04:	200005c4 	.word	0x200005c4
 8002e08:	200005c8 	.word	0x200005c8
 8002e0c:	10624dd3 	.word	0x10624dd3
 8002e10:	20000584 	.word	0x20000584

08002e14 <isDryLowSupply_debounced>:
static uint8_t  twist_dry_cnt        = 0;    // debounce
static bool     twist_priming        = false;
static uint32_t twist_prime_deadline = 0;

static inline bool isDryLowSupply_debounced(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
    bool raw = dry_raw_is_dry();
 8002e1a:	f7ff fe7d 	bl	8002b18 <dry_raw_is_dry>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
    if (raw) {
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <isDryLowSupply_debounced+0x2a>
        if (twist_dry_cnt < 255) twist_dry_cnt++;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <isDryLowSupply_debounced+0x48>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2bff      	cmp	r3, #255	@ 0xff
 8002e2e:	d009      	beq.n	8002e44 <isDryLowSupply_debounced+0x30>
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <isDryLowSupply_debounced+0x48>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <isDryLowSupply_debounced+0x48>)
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e002      	b.n	8002e44 <isDryLowSupply_debounced+0x30>
    } else {
        twist_dry_cnt = 0;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <isDryLowSupply_debounced+0x48>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
    }
    return (twist_dry_cnt >= 3);
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <isDryLowSupply_debounced+0x48>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	bf8c      	ite	hi
 8002e4c:	2301      	movhi	r3, #1
 8002e4e:	2300      	movls	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200005dc 	.word	0x200005dc

08002e60 <twist_arm_priming>:
static inline void twist_arm_priming(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
    if (TWIST_PRIME_SECONDS > 0) {
        twist_priming        = true;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <twist_arm_priming+0x20>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
        twist_prime_deadline = now_ms() + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 8002e6a:	f7ff fdaf 	bl	80029cc <now_ms>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002e74:	3308      	adds	r3, #8
 8002e76:	4a03      	ldr	r2, [pc, #12]	@ (8002e84 <twist_arm_priming+0x24>)
 8002e78:	6013      	str	r3, [r2, #0]
    } else {
        twist_priming        = false;
        twist_prime_deadline = 0;
    }
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200005dd 	.word	0x200005dd
 8002e84:	200005e0 	.word	0x200005e0

08002e88 <ModelHandle_StartTwist>:

void ModelHandle_StartTwist(uint16_t on_s, uint16_t off_s)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	460a      	mov	r2, r1
 8002e92:	80fb      	strh	r3, [r7, #6]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80bb      	strh	r3, [r7, #4]
    manualOverride   = false;
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <ModelHandle_StartTwist+0x84>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    manualActive     = false;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <ModelHandle_StartTwist+0x88>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    semiAutoActive   = false;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <ModelHandle_StartTwist+0x8c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
    timerActive      = false;
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <ModelHandle_StartTwist+0x90>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
    searchActive     = false;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <ModelHandle_StartTwist+0x94>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
    countdownActive  = false;
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <ModelHandle_StartTwist+0x98>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]

    if (on_s == 0)  on_s  = 1;
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <ModelHandle_StartTwist+0x3e>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	80fb      	strh	r3, [r7, #6]
    if (off_s == 0) off_s = 1;
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <ModelHandle_StartTwist+0x48>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	80bb      	strh	r3, [r7, #4]

    twistSettings.onDurationSeconds  = on_s;
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <ModelHandle_StartTwist+0x9c>)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	8053      	strh	r3, [r2, #2]
    twistSettings.offDurationSeconds = off_s;
 8002ed6:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <ModelHandle_StartTwist+0x9c>)
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	8093      	strh	r3, [r2, #4]

    twistSettings.twistActive  = true;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <ModelHandle_StartTwist+0x9c>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
    twistActive                = true;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <ModelHandle_StartTwist+0xa0>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
    twist_on_phase             = false;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <ModelHandle_StartTwist+0xa4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
    twist_phase_deadline       = now_ms();
 8002eee:	f7ff fd6d 	bl	80029cc <now_ms>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <ModelHandle_StartTwist+0xa8>)
 8002ef6:	6013      	str	r3, [r2, #0]
    twist_dry_cnt              = 0;
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <ModelHandle_StartTwist+0xac>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
    twist_arm_priming();
 8002efe:	f7ff ffaf 	bl	8002e60 <twist_arm_priming>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000057b 	.word	0x2000057b
 8002f10:	20000571 	.word	0x20000571
 8002f14:	20000576 	.word	0x20000576
 8002f18:	20000575 	.word	0x20000575
 8002f1c:	20000574 	.word	0x20000574
 8002f20:	20000572 	.word	0x20000572
 8002f24:	20000024 	.word	0x20000024
 8002f28:	20000573 	.word	0x20000573
 8002f2c:	200005d5 	.word	0x200005d5
 8002f30:	200005d8 	.word	0x200005d8
 8002f34:	200005dc 	.word	0x200005dc

08002f38 <ModelHandle_StopTwist>:
void ModelHandle_StopTwist(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
    twistSettings.twistActive = false;
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <ModelHandle_StopTwist+0x24>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
    twistActive = false;
 8002f42:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <ModelHandle_StopTwist+0x28>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
    twist_priming  = false;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <ModelHandle_StopTwist+0x2c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    twist_dry_cnt  = 0;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <ModelHandle_StopTwist+0x30>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
    stop_motor();
 8002f54:	f7ff fdac 	bl	8002ab0 <stop_motor>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000024 	.word	0x20000024
 8002f60:	20000573 	.word	0x20000573
 8002f64:	200005dd 	.word	0x200005dd
 8002f68:	200005dc 	.word	0x200005dc

08002f6c <twist_tick>:
static void twist_tick(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) { twistActive = false; return; }
 8002f72:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <twist_tick+0x14c>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	f083 0301 	eor.w	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <twist_tick+0x1c>
 8002f80:	4b4e      	ldr	r3, [pc, #312]	@ (80030bc <twist_tick+0x150>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e093      	b.n	80030b0 <twist_tick+0x144>
    twistActive = true;
 8002f88:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <twist_tick+0x150>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]

    if (isTankFull()) {
 8002f8e:	f7ff fd97 	bl	8002ac0 <isTankFull>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <twist_tick+0x32>
        ModelHandle_StopTwist();
 8002f98:	f7ff ffce 	bl	8002f38 <ModelHandle_StopTwist>
        return;
 8002f9c:	e088      	b.n	80030b0 <twist_tick+0x144>
    }
    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8002f9e:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <twist_tick+0x154>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <twist_tick+0x5c>
 8002fa6:	f7ff fd11 	bl	80029cc <now_ms>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b45      	ldr	r3, [pc, #276]	@ (80030c4 <twist_tick+0x158>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a45      	ldr	r2, [pc, #276]	@ (80030c8 <twist_tick+0x15c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d307      	bcc.n	8002fc8 <twist_tick+0x5c>
        stop_motor();
 8002fb8:	f7ff fd7a 	bl	8002ab0 <stop_motor>
        senseMaxRunReached = true;
 8002fbc:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <twist_tick+0x160>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
        ModelHandle_StopTwist();
 8002fc2:	f7ff ffb9 	bl	8002f38 <ModelHandle_StopTwist>
        return;
 8002fc6:	e073      	b.n	80030b0 <twist_tick+0x144>
    }

    uint32_t tnow = now_ms();
 8002fc8:	f7ff fd00 	bl	80029cc <now_ms>
 8002fcc:	6078      	str	r0, [r7, #4]

    if (twist_priming) {
 8002fce:	4b40      	ldr	r3, [pc, #256]	@ (80030d0 <twist_tick+0x164>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <twist_tick+0xac>
        if (tnow < twist_prime_deadline) {
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <twist_tick+0x168>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d218      	bcs.n	8003012 <twist_tick+0xa6>
            if (!Motor_GetStatus()) start_motor();
 8002fe0:	f000 fc04 	bl	80037ec <Motor_GetStatus>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <twist_tick+0x88>
 8002ff0:	f7ff fd3e 	bl	8002a70 <start_motor>
            twist_on_phase       = true;
 8002ff4:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <twist_tick+0x16c>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 8002ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80030b8 <twist_tick+0x14c>)
 8002ffc:	885b      	ldrh	r3, [r3, #2]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003004:	fb03 f202 	mul.w	r2, r3, r2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	4a33      	ldr	r2, [pc, #204]	@ (80030dc <twist_tick+0x170>)
 800300e:	6013      	str	r3, [r2, #0]
            return;
 8003010:	e04e      	b.n	80030b0 <twist_tick+0x144>
        } else {
            twist_priming = false;
 8003012:	4b2f      	ldr	r3, [pc, #188]	@ (80030d0 <twist_tick+0x164>)
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8003018:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <twist_tick+0x170>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	dc44      	bgt.n	80030ae <twist_tick+0x142>

    if (isDryLowSupply_debounced()) {
 8003024:	f7ff fef6 	bl	8002e14 <isDryLowSupply_debounced>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <twist_tick+0xe4>
        stop_motor();
 800302e:	f7ff fd3f 	bl	8002ab0 <stop_motor>
        twist_on_phase       = false;
 8003032:	4b29      	ldr	r3, [pc, #164]	@ (80030d8 <twist_tick+0x16c>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
        twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <twist_tick+0x14c>)
 800303a:	889b      	ldrh	r3, [r3, #4]
 800303c:	461a      	mov	r2, r3
 800303e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003042:	fb03 f202 	mul.w	r2, r3, r2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <twist_tick+0x170>)
 800304c:	6013      	str	r3, [r2, #0]
        return;
 800304e:	e02f      	b.n	80030b0 <twist_tick+0x144>
    }

    twist_on_phase = !twist_on_phase;
 8003050:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <twist_tick+0x16c>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <twist_tick+0x16c>)
 800306c:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <twist_tick+0x16c>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <twist_tick+0x126>
        start_motor();
 8003076:	f7ff fcfb 	bl	8002a70 <start_motor>
        twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 800307a:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <twist_tick+0x14c>)
 800307c:	885b      	ldrh	r3, [r3, #2]
 800307e:	461a      	mov	r2, r3
 8003080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003084:	fb03 f202 	mul.w	r2, r3, r2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	4a13      	ldr	r2, [pc, #76]	@ (80030dc <twist_tick+0x170>)
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e00e      	b.n	80030b0 <twist_tick+0x144>
    } else {
        stop_motor();
 8003092:	f7ff fd0d 	bl	8002ab0 <stop_motor>
        twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <twist_tick+0x14c>)
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a0:	fb03 f202 	mul.w	r2, r3, r2
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <twist_tick+0x170>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e000      	b.n	80030b0 <twist_tick+0x144>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 80030ae:	bf00      	nop
    }
}
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000024 	.word	0x20000024
 80030bc:	20000573 	.word	0x20000573
 80030c0:	2000057c 	.word	0x2000057c
 80030c4:	20000580 	.word	0x20000580
 80030c8:	006ddd00 	.word	0x006ddd00
 80030cc:	2000057a 	.word	0x2000057a
 80030d0:	200005dd 	.word	0x200005dd
 80030d4:	200005e0 	.word	0x200005e0
 80030d8:	200005d5 	.word	0x200005d5
 80030dc:	200005d8 	.word	0x200005d8

080030e0 <ModelHandle_StartSearch>:
static SearchState search_state = SEARCH_GAP_WAIT;
static uint32_t    search_deadline_ms = 0;
static uint8_t     search_dry_cnt = 0;    // debounce while RUN

void ModelHandle_StartSearch(uint16_t gap_s, uint16_t probe_s)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	460a      	mov	r2, r1
 80030ea:	80fb      	strh	r3, [r7, #6]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80bb      	strh	r3, [r7, #4]
    manualOverride   = false;
 80030f0:	4b20      	ldr	r3, [pc, #128]	@ (8003174 <ModelHandle_StartSearch+0x94>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
    manualActive     = false;
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <ModelHandle_StartSearch+0x98>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
    semiAutoActive   = false;
 80030fc:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <ModelHandle_StartSearch+0x9c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
    timerActive      = false;
 8003102:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <ModelHandle_StartSearch+0xa0>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
    countdownActive  = false;
 8003108:	4b1e      	ldr	r3, [pc, #120]	@ (8003184 <ModelHandle_StartSearch+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    twistActive      = false;
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <ModelHandle_StartSearch+0xa8>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]

    if (gap_s   == 0) gap_s   = 5;
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <ModelHandle_StartSearch+0x3e>
 800311a:	2305      	movs	r3, #5
 800311c:	80fb      	strh	r3, [r7, #6]
    if (probe_s == 0) probe_s = 3;
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <ModelHandle_StartSearch+0x48>
 8003124:	2303      	movs	r3, #3
 8003126:	80bb      	strh	r3, [r7, #4]

    searchSettings.testingGapSeconds = gap_s;     // gap
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <ModelHandle_StartSearch+0xac>)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	8053      	strh	r3, [r2, #2]
    searchSettings.dryRunTimeSeconds = probe_s;   // probe
 800312e:	4a17      	ldr	r2, [pc, #92]	@ (800318c <ModelHandle_StartSearch+0xac>)
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	8093      	strh	r3, [r2, #4]

    searchSettings.searchActive = true;
 8003134:	4b15      	ldr	r3, [pc, #84]	@ (800318c <ModelHandle_StartSearch+0xac>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
    searchActive = true;
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <ModelHandle_StartSearch+0xb0>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]

    stop_motor();
 8003140:	f7ff fcb6 	bl	8002ab0 <stop_motor>
    search_state       = SEARCH_GAP_WAIT;
 8003144:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <ModelHandle_StartSearch+0xb4>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    search_deadline_ms = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800314a:	f7ff fc3f 	bl	80029cc <now_ms>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <ModelHandle_StartSearch+0xac>)
 8003152:	885b      	ldrh	r3, [r3, #2]
 8003154:	4619      	mov	r1, r3
 8003156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <ModelHandle_StartSearch+0xb8>)
 8003162:	6013      	str	r3, [r2, #0]
    search_dry_cnt     = 0;
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <ModelHandle_StartSearch+0xbc>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000057b 	.word	0x2000057b
 8003178:	20000571 	.word	0x20000571
 800317c:	20000576 	.word	0x20000576
 8003180:	20000575 	.word	0x20000575
 8003184:	20000572 	.word	0x20000572
 8003188:	20000573 	.word	0x20000573
 800318c:	2000001c 	.word	0x2000001c
 8003190:	20000574 	.word	0x20000574
 8003194:	200005e4 	.word	0x200005e4
 8003198:	200005e8 	.word	0x200005e8
 800319c:	200005ec 	.word	0x200005ec

080031a0 <ModelHandle_StopSearch>:
void ModelHandle_StopSearch(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
    searchSettings.searchActive = false;
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <ModelHandle_StopSearch+0x20>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
    searchActive = false;
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <ModelHandle_StopSearch+0x24>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    search_state = SEARCH_GAP_WAIT;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <ModelHandle_StopSearch+0x28>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
    stop_motor();
 80031b6:	f7ff fc7b 	bl	8002ab0 <stop_motor>
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000001c 	.word	0x2000001c
 80031c4:	20000574 	.word	0x20000574
 80031c8:	200005e4 	.word	0x200005e4

080031cc <isDryDebounced_RUN>:
static inline bool isDryDebounced_RUN(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
    if (dry_raw_is_dry()) {
 80031d0:	f7ff fca2 	bl	8002b18 <dry_raw_is_dry>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <isDryDebounced_RUN+0x24>
        if (search_dry_cnt < 255) search_dry_cnt++;
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <isDryDebounced_RUN+0x3c>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2bff      	cmp	r3, #255	@ 0xff
 80031e0:	d009      	beq.n	80031f6 <isDryDebounced_RUN+0x2a>
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <isDryDebounced_RUN+0x3c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <isDryDebounced_RUN+0x3c>)
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <isDryDebounced_RUN+0x2a>
    } else {
        search_dry_cnt = 0;
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <isDryDebounced_RUN+0x3c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    }
    return (search_dry_cnt >= 3);
 80031f6:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <isDryDebounced_RUN+0x3c>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	bf8c      	ite	hi
 80031fe:	2301      	movhi	r3, #1
 8003200:	2300      	movls	r3, #0
 8003202:	b2db      	uxtb	r3, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200005ec 	.word	0x200005ec

0800320c <search_tick>:
static void search_tick(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 8003212:	4b50      	ldr	r3, [pc, #320]	@ (8003354 <search_tick+0x148>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f083 0301 	eor.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <search_tick+0x1c>
 8003220:	4b4d      	ldr	r3, [pc, #308]	@ (8003358 <search_tick+0x14c>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e091      	b.n	800334c <search_tick+0x140>
    searchActive = true;
 8003228:	4b4b      	ldr	r3, [pc, #300]	@ (8003358 <search_tick+0x14c>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]

    uint32_t now = now_ms();
 800322e:	f7ff fbcd 	bl	80029cc <now_ms>
 8003232:	6078      	str	r0, [r7, #4]

    if (isTankFull()) {
 8003234:	f7ff fc44 	bl	8002ac0 <isTankFull>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <search_tick+0x44>
        stop_motor();
 800323e:	f7ff fc37 	bl	8002ab0 <stop_motor>
        searchSettings.searchActive = false;
 8003242:	4b44      	ldr	r3, [pc, #272]	@ (8003354 <search_tick+0x148>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
        searchActive = false;
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <search_tick+0x14c>)
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
        return;
 800324e:	e07d      	b.n	800334c <search_tick+0x140>
    }

    switch (search_state)
 8003250:	4b42      	ldr	r3, [pc, #264]	@ (800335c <search_tick+0x150>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d050      	beq.n	80032fa <search_tick+0xee>
 8003258:	2b02      	cmp	r3, #2
 800325a:	dc77      	bgt.n	800334c <search_tick+0x140>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <search_tick+0x5a>
 8003260:	2b01      	cmp	r3, #1
 8003262:	d021      	beq.n	80032a8 <search_tick+0x9c>
 8003264:	e072      	b.n	800334c <search_tick+0x140>
    {
        case SEARCH_GAP_WAIT:
            if (Motor_GetStatus()) stop_motor();
 8003266:	f000 fac1 	bl	80037ec <Motor_GetStatus>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <search_tick+0x68>
 8003270:	f7ff fc1e 	bl	8002ab0 <stop_motor>
            if ((int32_t)(search_deadline_ms - now) <= 0) {
 8003274:	4b3a      	ldr	r3, [pc, #232]	@ (8003360 <search_tick+0x154>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	dc60      	bgt.n	8003342 <search_tick+0x136>
                start_motor(); // probe ON
 8003280:	f7ff fbf6 	bl	8002a70 <start_motor>
                search_state       = SEARCH_PROBE;
 8003284:	4b35      	ldr	r3, [pc, #212]	@ (800335c <search_tick+0x150>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.dryRunTimeSeconds * 1000UL;
 800328a:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <search_tick+0x148>)
 800328c:	889b      	ldrh	r3, [r3, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003294:	fb03 f202 	mul.w	r2, r3, r2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	4a30      	ldr	r2, [pc, #192]	@ (8003360 <search_tick+0x154>)
 800329e:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <search_tick+0x158>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80032a6:	e04c      	b.n	8003342 <search_tick+0x136>

        case SEARCH_PROBE:
            if (!dry_raw_is_dry()) {
 80032a8:	f7ff fc36 	bl	8002b18 <dry_raw_is_dry>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <search_tick+0xc0>
                // Water detected → RUN
                search_state       = SEARCH_RUN;
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <search_tick+0x150>)
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = 0;
 80032be:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <search_tick+0x154>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
                search_dry_cnt     = 0;
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <search_tick+0x158>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
                break;
 80032ca:	e03f      	b.n	800334c <search_tick+0x140>
            }
            if ((int32_t)(search_deadline_ms - now) <= 0) {
 80032cc:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <search_tick+0x154>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dc36      	bgt.n	8003346 <search_tick+0x13a>
                // Still dry after probe
                stop_motor();
 80032d8:	f7ff fbea 	bl	8002ab0 <stop_motor>
                search_state       = SEARCH_GAP_WAIT;
 80032dc:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <search_tick+0x150>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003354 <search_tick+0x148>)
 80032e4:	885b      	ldrh	r3, [r3, #2]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ec:	fb03 f202 	mul.w	r2, r3, r2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <search_tick+0x154>)
 80032f6:	6013      	str	r3, [r2, #0]
            }
            break;
 80032f8:	e025      	b.n	8003346 <search_tick+0x13a>

        case SEARCH_RUN:
            if (isDryDebounced_RUN()) {
 80032fa:	f7ff ff67 	bl	80031cc <isDryDebounced_RUN>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <search_tick+0x120>
                stop_motor();
 8003304:	f7ff fbd4 	bl	8002ab0 <stop_motor>
                search_state       = SEARCH_GAP_WAIT;
 8003308:	4b14      	ldr	r3, [pc, #80]	@ (800335c <search_tick+0x150>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <search_tick+0x148>)
 8003310:	885b      	ldrh	r3, [r3, #2]
 8003312:	461a      	mov	r2, r3
 8003314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003318:	fb03 f202 	mul.w	r2, r3, r2
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	4a0f      	ldr	r2, [pc, #60]	@ (8003360 <search_tick+0x154>)
 8003322:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <search_tick+0x158>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
                break;
 800332a:	e00f      	b.n	800334c <search_tick+0x140>
            }
            if (!Motor_GetStatus()) start_motor(); // keep asserted
 800332c:	f000 fa5e 	bl	80037ec <Motor_GetStatus>
 8003330:	4603      	mov	r3, r0
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <search_tick+0x13e>
 800333c:	f7ff fb98 	bl	8002a70 <start_motor>
            break;
 8003340:	e003      	b.n	800334a <search_tick+0x13e>
            break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <search_tick+0x140>
            break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <search_tick+0x140>
            break;
 800334a:	bf00      	nop
    }
}
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000001c 	.word	0x2000001c
 8003358:	20000574 	.word	0x20000574
 800335c:	200005e4 	.word	0x200005e4
 8003360:	200005e8 	.word	0x200005e8
 8003364:	200005ec 	.word	0x200005ec

08003368 <seconds_since_midnight>:

/* =======================
   TIMER (RTC based)
   ======================= */
static uint32_t seconds_since_midnight(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
    RTC_GetTimeDate();
 800336c:	f000 fc4a 	bl	8003c04 <RTC_GetTimeDate>
    return ((uint32_t)time.hour * 3600UL) +
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <seconds_since_midnight+0x30>)
 8003372:	789b      	ldrb	r3, [r3, #2]
 8003374:	461a      	mov	r2, r3
 8003376:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800337a:	fb03 f202 	mul.w	r2, r3, r2
           ((uint32_t)time.minutes * 60UL) +
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <seconds_since_midnight+0x30>)
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	4619      	mov	r1, r3
 8003384:	460b      	mov	r3, r1
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a5b      	subs	r3, r3, r1
 800338a:	009b      	lsls	r3, r3, #2
    return ((uint32_t)time.hour * 3600UL) +
 800338c:	4413      	add	r3, r2
           (uint32_t)time.seconds;
 800338e:	4a02      	ldr	r2, [pc, #8]	@ (8003398 <seconds_since_midnight+0x30>)
 8003390:	7812      	ldrb	r2, [r2, #0]
           ((uint32_t)time.minutes * 60UL) +
 8003392:	4413      	add	r3, r2
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200005f4 	.word	0x200005f4

0800339c <timer_tick>:
// Replace your existing timer_tick() with this guarded version
static void timer_tick(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
    // 🚫 Do not let timer logic interfere with Manual mode
    if (manualOverride && manualActive) {
 80033a2:	4b4d      	ldr	r3, [pc, #308]	@ (80034d8 <timer_tick+0x13c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <timer_tick+0x22>
 80033ac:	4b4b      	ldr	r3, [pc, #300]	@ (80034dc <timer_tick+0x140>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <timer_tick+0x22>
        timerActive = false;
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <timer_tick+0x144>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
        return;
 80033bc:	e089      	b.n	80034d2 <timer_tick+0x136>
    }

    timerActive = false;
 80033be:	4b48      	ldr	r3, [pc, #288]	@ (80034e0 <timer_tick+0x144>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 80033c4:	f7ff ffd0 	bl	8003368 <seconds_since_midnight>
 80033c8:	60b8      	str	r0, [r7, #8]

    static uint32_t timerRetryDeadline = 0;

    bool anySlotActive = false;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < 3; i++) {
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e06c      	b.n	80034ae <timer_tick+0x112>
        TimerSlot* s = &timerSlots[i];
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a41      	ldr	r2, [pc, #260]	@ (80034e4 <timer_tick+0x148>)
 80033e0:	4413      	add	r3, r2
 80033e2:	607b      	str	r3, [r7, #4]
        if (!s->active) continue;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f083 0301 	eor.w	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d159      	bne.n	80034a6 <timer_tick+0x10a>
        anySlotActive = true;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d812      	bhi.n	8003428 <timer_tick+0x8c>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d306      	bcc.n	800341a <timer_tick+0x7e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	d201      	bcs.n	800341a <timer_tick+0x7e>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <timer_tick+0x80>
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e011      	b.n	800344c <timer_tick+0xb0>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d204      	bcs.n	800343c <timer_tick+0xa0>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d201      	bcs.n	8003440 <timer_tick+0xa4>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <timer_tick+0xa6>
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
        }

        if (inWindow) {
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02a      	beq.n	80034a8 <timer_tick+0x10c>
            timerActive = true;
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <timer_tick+0x144>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]

            if (now_ms() < timerRetryDeadline) return;
 8003458:	f7ff fab8 	bl	80029cc <now_ms>
 800345c:	4602      	mov	r2, r0
 800345e:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <timer_tick+0x14c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d332      	bcc.n	80034cc <timer_tick+0x130>

            if (dry_raw_is_dry()) {
 8003466:	f7ff fb57 	bl	8002b18 <dry_raw_is_dry>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <timer_tick+0xf4>
                stop_motor();
 8003470:	f7ff fb1e 	bl	8002ab0 <stop_motor>
                timerRetryDeadline = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 8003474:	f7ff faaa 	bl	80029cc <now_ms>
 8003478:	4602      	mov	r2, r0
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <timer_tick+0x150>)
 800347c:	885b      	ldrh	r3, [r3, #2]
 800347e:	4619      	mov	r1, r3
 8003480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	4a17      	ldr	r2, [pc, #92]	@ (80034e8 <timer_tick+0x14c>)
 800348c:	6013      	str	r3, [r2, #0]
                return;
 800348e:	e020      	b.n	80034d2 <timer_tick+0x136>
            }

            if (isTankFull()) {
 8003490:	f7ff fb16 	bl	8002ac0 <isTankFull>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <timer_tick+0x104>
                stop_motor();
 800349a:	f7ff fb09 	bl	8002ab0 <stop_motor>
                return;
 800349e:	e018      	b.n	80034d2 <timer_tick+0x136>
            }

            start_motor();
 80034a0:	f7ff fae6 	bl	8002a70 <start_motor>
            return;
 80034a4:	e015      	b.n	80034d2 <timer_tick+0x136>
        if (!s->active) continue;
 80034a6:	bf00      	nop
    for (int i = 0; i < 3; i++) {
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3301      	adds	r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	dd8f      	ble.n	80033d4 <timer_tick+0x38>
        }
    }

    // If no timers are configured/active, do NOT touch the motor
    if (!anySlotActive) return;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	f083 0301 	eor.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <timer_tick+0x134>

    // Timers exist but we're outside any window -> ensure motor is off
    stop_motor();
 80034c0:	f7ff faf6 	bl	8002ab0 <stop_motor>
    timerRetryDeadline = 0;
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <timer_tick+0x14c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e002      	b.n	80034d2 <timer_tick+0x136>
            if (now_ms() < timerRetryDeadline) return;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <timer_tick+0x136>
    if (!anySlotActive) return;
 80034d0:	bf00      	nop
}
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2000057b 	.word	0x2000057b
 80034dc:	20000571 	.word	0x20000571
 80034e0:	20000575 	.word	0x20000575
 80034e4:	20000588 	.word	0x20000588
 80034e8:	200005f0 	.word	0x200005f0
 80034ec:	2000001c 	.word	0x2000001c

080034f0 <ModelHandle_StartSemiAuto>:

/* =======================
   SEMI-AUTO
   ======================= */
void ModelHandle_StartSemiAuto(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
    manualOverride = false;
 80034f4:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <ModelHandle_StartSemiAuto+0x60>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 80034fa:	4b16      	ldr	r3, [pc, #88]	@ (8003554 <ModelHandle_StartSemiAuto+0x64>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8003500:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <ModelHandle_StartSemiAuto+0x68>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <ModelHandle_StartSemiAuto+0x6c>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
    countdownActive= false;
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <ModelHandle_StartSemiAuto+0x70>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8003512:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <ModelHandle_StartSemiAuto+0x74>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]

    semiAutoActive = true;
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <ModelHandle_StartSemiAuto+0x78>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 800351e:	f7ff facf 	bl	8002ac0 <isTankFull>
 8003522:	4603      	mov	r3, r0
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <ModelHandle_StartSemiAuto+0x4a>
        start_motor();
 800352e:	f7ff fa9f 	bl	8002a70 <start_motor>
        printf("Semi-Auto Started\r\n");
 8003532:	480e      	ldr	r0, [pc, #56]	@ (800356c <ModelHandle_StartSemiAuto+0x7c>)
 8003534:	f007 fd1e 	bl	800af74 <puts>
    } else {
        stop_motor();
        semiAutoActive = false;
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 8003538:	e007      	b.n	800354a <ModelHandle_StartSemiAuto+0x5a>
        stop_motor();
 800353a:	f7ff fab9 	bl	8002ab0 <stop_motor>
        semiAutoActive = false;
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <ModelHandle_StartSemiAuto+0x78>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Not Started: Already Full\r\n");
 8003544:	480a      	ldr	r0, [pc, #40]	@ (8003570 <ModelHandle_StartSemiAuto+0x80>)
 8003546:	f007 fd15 	bl	800af74 <puts>
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000057b 	.word	0x2000057b
 8003554:	20000571 	.word	0x20000571
 8003558:	20000575 	.word	0x20000575
 800355c:	20000574 	.word	0x20000574
 8003560:	20000572 	.word	0x20000572
 8003564:	20000573 	.word	0x20000573
 8003568:	20000576 	.word	0x20000576
 800356c:	0800d378 	.word	0x0800d378
 8003570:	0800d38c 	.word	0x0800d38c

08003574 <semi_auto_tick>:
static void semi_auto_tick(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <semi_auto_tick+0x50>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11b      	bne.n	80035c0 <semi_auto_tick+0x4c>

    if (isTankFull()) {
 8003588:	f7ff fa9a 	bl	8002ac0 <isTankFull>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <semi_auto_tick+0x36>
        stop_motor();
 8003592:	f7ff fa8d 	bl	8002ab0 <stop_motor>
        semiAutoActive   = false;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <semi_auto_tick+0x50>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <semi_auto_tick+0x54>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Complete: Tank Full\r\n");
 80035a2:	480a      	ldr	r0, [pc, #40]	@ (80035cc <semi_auto_tick+0x58>)
 80035a4:	f007 fce6 	bl	800af74 <puts>
 80035a8:	e00b      	b.n	80035c2 <semi_auto_tick+0x4e>
    } else {
        if (!Motor_GetStatus()) start_motor();
 80035aa:	f000 f91f 	bl	80037ec <Motor_GetStatus>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f083 0301 	eor.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <semi_auto_tick+0x4e>
 80035ba:	f7ff fa59 	bl	8002a70 <start_motor>
 80035be:	e000      	b.n	80035c2 <semi_auto_tick+0x4e>
    if (!semiAutoActive) return;
 80035c0:	bf00      	nop
    }
}
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000576 	.word	0x20000576
 80035c8:	2000057c 	.word	0x2000057c
 80035cc:	0800d3b4 	.word	0x0800d3b4

080035d0 <protections_tick>:

/* =======================
   PROTECTIONS
   ======================= */
static void protections_tick(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    /* Manual override → only hard protections */
    if (manualOverride && manualActive) {
 80035d4:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <protections_tick+0xf4>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02d      	beq.n	800363a <protections_tick+0x6a>
 80035de:	4b3a      	ldr	r3, [pc, #232]	@ (80036c8 <protections_tick+0xf8>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <protections_tick+0x6a>
        if (senseOverLoad && motorStatus == 1U) stop_motor();
 80035e8:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <protections_tick+0xfc>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <protections_tick+0x30>
 80035f2:	4b37      	ldr	r3, [pc, #220]	@ (80036d0 <protections_tick+0x100>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <protections_tick+0x30>
 80035fc:	f7ff fa58 	bl	8002ab0 <stop_motor>
        if (senseOverUnderVolt) stop_motor();
 8003600:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <protections_tick+0x104>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <protections_tick+0x3e>
 800360a:	f7ff fa51 	bl	8002ab0 <stop_motor>
        if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 800360e:	4b32      	ldr	r3, [pc, #200]	@ (80036d8 <protections_tick+0x108>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d054      	beq.n	80036c0 <protections_tick+0xf0>
 8003616:	f7ff f9d9 	bl	80029cc <now_ms>
 800361a:	4602      	mov	r2, r0
 800361c:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <protections_tick+0x10c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	4a2f      	ldr	r2, [pc, #188]	@ (80036e0 <protections_tick+0x110>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d34b      	bcc.n	80036c0 <protections_tick+0xf0>
            stop_motor();
 8003628:	f7ff fa42 	bl	8002ab0 <stop_motor>
            senseMaxRunReached = true;
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <protections_tick+0x114>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
            maxRunTimerArmed = false;
 8003632:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <protections_tick+0x108>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
        }
        return;
 8003638:	e042      	b.n	80036c0 <protections_tick+0xf0>
    }

    /* DRY:
       - Always set the flag for UI.
       - Hard-stop on dry ONLY if Twist is NOT active (Twist soft-handles dry). */
    if (motorStatus == 1U && dry_raw_is_dry()) {
 800363a:	4b25      	ldr	r3, [pc, #148]	@ (80036d0 <protections_tick+0x100>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d111      	bne.n	8003668 <protections_tick+0x98>
 8003644:	f7ff fa68 	bl	8002b18 <dry_raw_is_dry>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <protections_tick+0x98>
        senseDryRun = true;
 800364e:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <protections_tick+0x118>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
        if (!twistSettings.twistActive) {
 8003654:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <protections_tick+0x11c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <protections_tick+0x9e>
            stop_motor();
 8003662:	f7ff fa25 	bl	8002ab0 <stop_motor>
        if (!twistSettings.twistActive) {
 8003666:	e002      	b.n	800366e <protections_tick+0x9e>
        }
    } else {
        senseDryRun = false;
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <protections_tick+0x118>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
    }

    /* Other protections remain hard stops */
    if (senseOverLoad && motorStatus == 1U) stop_motor();
 800366e:	4b17      	ldr	r3, [pc, #92]	@ (80036cc <protections_tick+0xfc>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <protections_tick+0xb6>
 8003678:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <protections_tick+0x100>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <protections_tick+0xb6>
 8003682:	f7ff fa15 	bl	8002ab0 <stop_motor>
    if (senseOverUnderVolt) stop_motor();
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <protections_tick+0x104>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <protections_tick+0xc4>
 8003690:	f7ff fa0e 	bl	8002ab0 <stop_motor>

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8003694:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <protections_tick+0x108>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <protections_tick+0xf2>
 800369c:	f7ff f996 	bl	80029cc <now_ms>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <protections_tick+0x10c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	4a0d      	ldr	r2, [pc, #52]	@ (80036e0 <protections_tick+0x110>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d309      	bcc.n	80036c2 <protections_tick+0xf2>
        stop_motor();
 80036ae:	f7ff f9ff 	bl	8002ab0 <stop_motor>
        senseMaxRunReached = true;
 80036b2:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <protections_tick+0x114>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 80036b8:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <protections_tick+0x108>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e000      	b.n	80036c2 <protections_tick+0xf2>
        return;
 80036c0:	bf00      	nop
    }
}
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	2000057b 	.word	0x2000057b
 80036c8:	20000571 	.word	0x20000571
 80036cc:	20000578 	.word	0x20000578
 80036d0:	20000570 	.word	0x20000570
 80036d4:	20000579 	.word	0x20000579
 80036d8:	2000057c 	.word	0x2000057c
 80036dc:	20000580 	.word	0x20000580
 80036e0:	006ddd00 	.word	0x006ddd00
 80036e4:	2000057a 	.word	0x2000057a
 80036e8:	20000577 	.word	0x20000577
 80036ec:	20000024 	.word	0x20000024

080036f0 <leds_from_model>:

/* =======================
   LEDs
   ======================= */
static void leds_from_model(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 80036f4:	f7fe fc06 	bl	8001f04 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <leds_from_model+0x90>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d104      	bne.n	800370c <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2101      	movs	r1, #1
 8003706:	2000      	movs	r0, #0
 8003708:	f7fe fc1c 	bl	8001f44 <LED_SetIntent>
    }
    if (countdownActive) {
 800370c:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <leds_from_model+0x94>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8003716:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800371a:	2102      	movs	r1, #2
 800371c:	2000      	movs	r0, #0
 800371e:	f7fe fc11 	bl	8001f44 <LED_SetIntent>
    }
    if (senseDryRun) {
 8003722:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <leds_from_model+0x98>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2101      	movs	r1, #1
 8003730:	2001      	movs	r0, #1
 8003732:	f7fe fc07 	bl	8001f44 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <leds_from_model+0x9c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8003740:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003744:	2102      	movs	r1, #2
 8003746:	2001      	movs	r0, #1
 8003748:	f7fe fbfc 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverLoad) {
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <leds_from_model+0xa0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8003756:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800375a:	2102      	movs	r1, #2
 800375c:	2002      	movs	r0, #2
 800375e:	f7fe fbf1 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8003762:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <leds_from_model+0xa4>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 800376c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003770:	2102      	movs	r1, #2
 8003772:	2003      	movs	r0, #3
 8003774:	f7fe fbe6 	bl	8001f44 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8003778:	f7fe fc04 	bl	8001f84 <LED_ApplyIntents>
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000570 	.word	0x20000570
 8003784:	20000572 	.word	0x20000572
 8003788:	20000577 	.word	0x20000577
 800378c:	2000057a 	.word	0x2000057a
 8003790:	20000578 	.word	0x20000578
 8003794:	20000579 	.word	0x20000579

08003798 <ModelHandle_SetMotor>:

/* =======================
   Public Motor APIs
   ======================= */
void ModelHandle_SetMotor(bool on)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
    manualOverride = true;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <ModelHandle_SetMotor+0x34>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    Relay_Set(1, on);
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4619      	mov	r1, r3
 80037ac:	2001      	movs	r0, #1
 80037ae:	f000 f8d7 	bl	8003960 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <ModelHandle_SetMotor+0x24>
 80037b8:	2201      	movs	r2, #1
 80037ba:	e000      	b.n	80037be <ModelHandle_SetMotor+0x26>
 80037bc:	2200      	movs	r2, #0
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <ModelHandle_SetMotor+0x38>)
 80037c0:	701a      	strb	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000057b 	.word	0x2000057b
 80037d0:	20000570 	.word	0x20000570

080037d4 <ModelHandle_ClearManualOverride>:
void ModelHandle_ClearManualOverride(void) { manualOverride = false; }
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4b03      	ldr	r3, [pc, #12]	@ (80037e8 <ModelHandle_ClearManualOverride+0x14>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	bf00      	nop
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	2000057b 	.word	0x2000057b

080037ec <Motor_GetStatus>:
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <Motor_GetStatus+0x1c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000570 	.word	0x20000570

0800380c <ModelHandle_Process>:

/* =======================
   Main pump
   ======================= */
void ModelHandle_Process(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
    countdown_tick();
 8003810:	f7ff fa86 	bl	8002d20 <countdown_tick>
    twist_tick();
 8003814:	f7ff fbaa 	bl	8002f6c <twist_tick>
    search_tick();
 8003818:	f7ff fcf8 	bl	800320c <search_tick>
    timer_tick();
 800381c:	f7ff fdbe 	bl	800339c <timer_tick>
    semi_auto_tick();
 8003820:	f7ff fea8 	bl	8003574 <semi_auto_tick>

    protections_tick();
 8003824:	f7ff fed4 	bl	80035d0 <protections_tick>
    leds_from_model();
 8003828:	f7ff ff62 	bl	80036f0 <leds_from_model>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <ModelHandle_ProcessUartCommand>:

/* =======================
   UART commands
   ======================= */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d033      	beq.n	80038a6 <ModelHandle_ProcessUartCommand+0x76>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02f      	beq.n	80038a6 <ModelHandle_ProcessUartCommand+0x76>

    if      (strcmp(cmd, "MOTOR_ON") == 0)  { manualOverride = true; manualActive = true;  start_motor(); printf("Manual ON (UART)\r\n"); }
 8003846:	491a      	ldr	r1, [pc, #104]	@ (80038b0 <ModelHandle_ProcessUartCommand+0x80>)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fc fc81 	bl	8000150 <strcmp>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <ModelHandle_ProcessUartCommand+0x3c>
 8003854:	4b17      	ldr	r3, [pc, #92]	@ (80038b4 <ModelHandle_ProcessUartCommand+0x84>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <ModelHandle_ProcessUartCommand+0x88>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	f7ff f906 	bl	8002a70 <start_motor>
 8003864:	4815      	ldr	r0, [pc, #84]	@ (80038bc <ModelHandle_ProcessUartCommand+0x8c>)
 8003866:	f007 fb85 	bl	800af74 <puts>
 800386a:	e01d      	b.n	80038a8 <ModelHandle_ProcessUartCommand+0x78>
    else if (strcmp(cmd, "MOTOR_OFF")== 0)  { manualOverride = true; manualActive = false; stop_motor();  printf("Manual OFF (UART)\r\n"); }
 800386c:	4914      	ldr	r1, [pc, #80]	@ (80038c0 <ModelHandle_ProcessUartCommand+0x90>)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fc fc6e 	bl	8000150 <strcmp>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <ModelHandle_ProcessUartCommand+0x62>
 800387a:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <ModelHandle_ProcessUartCommand+0x84>)
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <ModelHandle_ProcessUartCommand+0x88>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	f7ff f913 	bl	8002ab0 <stop_motor>
 800388a:	480e      	ldr	r0, [pc, #56]	@ (80038c4 <ModelHandle_ProcessUartCommand+0x94>)
 800388c:	f007 fb72 	bl	800af74 <puts>
 8003890:	e00a      	b.n	80038a8 <ModelHandle_ProcessUartCommand+0x78>
    else if (strcmp(cmd, "SEMI_AUTO_START")==0) { ModelHandle_StartSemiAuto(); }
 8003892:	490d      	ldr	r1, [pc, #52]	@ (80038c8 <ModelHandle_ProcessUartCommand+0x98>)
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fc fc5b 	bl	8000150 <strcmp>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <ModelHandle_ProcessUartCommand+0x78>
 80038a0:	f7ff fe26 	bl	80034f0 <ModelHandle_StartSemiAuto>
 80038a4:	e000      	b.n	80038a8 <ModelHandle_ProcessUartCommand+0x78>
    if (!cmd || !*cmd) return;
 80038a6:	bf00      	nop
}
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800d3d4 	.word	0x0800d3d4
 80038b4:	2000057b 	.word	0x2000057b
 80038b8:	20000571 	.word	0x20000571
 80038bc:	0800d3e0 	.word	0x0800d3e0
 80038c0:	0800d3f4 	.word	0x0800d3f4
 80038c4:	0800d400 	.word	0x0800d400
 80038c8:	0800d414 	.word	0x0800d414

080038cc <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <Relay_Init+0x8c>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <Relay_Init+0x8c>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	6193      	str	r3, [r2, #24]
 80038ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <Relay_Init+0x8c>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80038f6:	2301      	movs	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2302      	movs	r3, #2
 8003900:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e01e      	b.n	8003946 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <Relay_Init+0x90>)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	889b      	ldrh	r3, [r3, #4]
 8003912:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <Relay_Init+0x90>)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800391c:	1d3a      	adds	r2, r7, #4
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f003 f839 	bl	8006998 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 8003926:	4a0d      	ldr	r2, [pc, #52]	@ (800395c <Relay_Init+0x90>)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800392e:	4a0b      	ldr	r2, [pc, #44]	@ (800395c <Relay_Init+0x90>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	889b      	ldrh	r3, [r3, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	4619      	mov	r1, r3
 800393c:	f003 f9c7 	bl	8006cce <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3301      	adds	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b02      	cmp	r3, #2
 800394a:	dddd      	ble.n	8003908 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	0800d750 	.word	0x0800d750

08003960 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	460a      	mov	r2, r1
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	4613      	mov	r3, r2
 800396e:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <Relay_Set+0x3c>
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d80f      	bhi.n	800399c <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	3b01      	subs	r3, #1
 8003980:	4a08      	ldr	r2, [pc, #32]	@ (80039a4 <Relay_Set+0x44>)
 8003982:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	3b01      	subs	r3, #1
 800398a:	4a06      	ldr	r2, [pc, #24]	@ (80039a4 <Relay_Set+0x44>)
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003992:	79ba      	ldrb	r2, [r7, #6]
 8003994:	4619      	mov	r1, r3
 8003996:	f003 f99a 	bl	8006cce <HAL_GPIO_WritePin>
 800399a:	e000      	b.n	800399e <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 800399c:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	0800d750 	.word	0x0800d750

080039a8 <Relay_Get>:

bool Relay_Get(uint8_t relay_no)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return false;
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <Relay_Get+0x16>
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d901      	bls.n	80039c2 <Relay_Get+0x1a>
 80039be:	2300      	movs	r3, #0
 80039c0:	e016      	b.n	80039f0 <Relay_Get+0x48>

    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <Relay_Get+0x50>)
 80039c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
                                       relays[relay_no - 1].pin);
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	4909      	ldr	r1, [pc, #36]	@ (80039f8 <Relay_Get+0x50>)
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f003 f960 	bl	8006ca0 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]

    return (s == RELAY_ACTIVE_STATE);
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	0800d750 	.word	0x0800d750

080039fc <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003a04:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <rf_delay_us+0x2c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8003a0c:	bf00      	nop
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <rf_delay_us+0x2c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d8f9      	bhi.n	8003a0e <rf_delay_us+0x12>
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000410 	.word	0x20000410

08003a2c <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	@ 0x80
 8003a34:	4802      	ldr	r0, [pc, #8]	@ (8003a40 <RF_Init+0x14>)
 8003a36:	f003 f94a 	bl	8006cce <HAL_GPIO_WritePin>
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40010c00 	.word	0x40010c00

08003a44 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2180      	movs	r1, #128	@ 0x80
 8003a52:	4809      	ldr	r0, [pc, #36]	@ (8003a78 <send_high_low+0x34>)
 8003a54:	f003 f93b 	bl	8006cce <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ffcf 	bl	80039fc <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2180      	movs	r1, #128	@ 0x80
 8003a62:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <send_high_low+0x34>)
 8003a64:	f003 f933 	bl	8006cce <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7ff ffc7 	bl	80039fc <rf_delay_us>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40010c00 	.word	0x40010c00

08003a7c <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d006      	beq.n	8003a9a <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 8003a8c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003a90:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a94:	f7ff ffd6 	bl	8003a44 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 8003a98:	e005      	b.n	8003aa6 <send_bit+0x2a>
        send_high_low(900, 300);
 8003a9a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003a9e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8003aa2:	f7ff ffcf 	bl	8003a44 <send_high_low>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e031      	b.n	8003b24 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 8003ac0:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 8003ac4:	f240 1013 	movw	r0, #275	@ 0x113
 8003ac8:	f7ff ffbc 	bl	8003a44 <send_high_low>
        rf_delay_us(1000);
 8003acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ad0:	f7ff ff94 	bl	80039fc <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	72fb      	strb	r3, [r7, #11]
 8003adc:	e011      	b.n	8003b02 <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 8003ade:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ffc3 	bl	8003a7c <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003af6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	72fb      	strb	r3, [r7, #11]
 8003b02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dae9      	bge.n	8003ade <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 8003b0a:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003b0e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003b12:	f7ff ff97 	bl	8003a44 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 8003b16:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003b1a:	f7ff ff6f 	bl	80039fc <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	ddca      	ble.n	8003ac0 <RF_SendCode+0x12>
    }
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	0092      	lsls	r2, r2, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 8003b6a:	2332      	movs	r3, #50	@ 0x32
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	21d0      	movs	r1, #208	@ 0xd0
 8003b70:	4822      	ldr	r0, [pc, #136]	@ (8003bfc <RTC_Init+0x98>)
 8003b72:	f003 fe8d 	bl	8007890 <HAL_I2C_IsDeviceReady>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <RTC_Init+0x9c>)
 8003b7e:	22d0      	movs	r2, #208	@ 0xd0
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	e010      	b.n	8003ba6 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8003b84:	2332      	movs	r3, #50	@ 0x32
 8003b86:	2202      	movs	r2, #2
 8003b88:	21ae      	movs	r1, #174	@ 0xae
 8003b8a:	481c      	ldr	r0, [pc, #112]	@ (8003bfc <RTC_Init+0x98>)
 8003b8c:	f003 fe80 	bl	8007890 <HAL_I2C_IsDeviceReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <RTC_Init+0x9c>)
 8003b98:	22ae      	movs	r2, #174	@ 0xae
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e003      	b.n	8003ba6 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 8003b9e:	4b18      	ldr	r3, [pc, #96]	@ (8003c00 <RTC_Init+0x9c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	801a      	strh	r2, [r3, #0]
 8003ba4:	e027      	b.n	8003bf6 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003ba6:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <RTC_Init+0x9c>)
 8003ba8:	8819      	ldrh	r1, [r3, #0]
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2200      	movs	r2, #0
 8003bbc:	480f      	ldr	r0, [pc, #60]	@ (8003bfc <RTC_Init+0x98>)
 8003bbe:	f003 fbf3 	bl	80073a8 <HAL_I2C_Mem_Read>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da12      	bge.n	8003bf6 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <RTC_Init+0x9c>)
 8003bdc:	8819      	ldrh	r1, [r3, #0]
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	9302      	str	r3, [sp, #8]
 8003be4:	2301      	movs	r3, #1
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2301      	movs	r3, #1
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4802      	ldr	r0, [pc, #8]	@ (8003bfc <RTC_Init+0x98>)
 8003bf2:	f003 fadf 	bl	80071b4 <HAL_I2C_Mem_Write>
        }
    }
}
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000350 	.word	0x20000350
 8003c00:	200005fc 	.word	0x200005fc

08003c04 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d34 <RTC_GetTimeDate+0x130>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8089 	beq.w	8003d26 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8003c14:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <RTC_GetTimeDate+0x130>)
 8003c16:	8819      	ldrh	r1, [r3, #0]
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	2307      	movs	r3, #7
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4843      	ldr	r0, [pc, #268]	@ (8003d38 <RTC_GetTimeDate+0x134>)
 8003c2c:	f003 fbbc 	bl	80073a8 <HAL_I2C_Mem_Read>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d179      	bne.n	8003d2a <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8003c36:	793b      	ldrb	r3, [r7, #4]
 8003c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff78 	bl	8003b34 <bcd2dec>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b3c      	ldr	r3, [pc, #240]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003c4a:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 8003c4c:	797b      	ldrb	r3, [r7, #5]
 8003c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff6d 	bl	8003b34 <bcd2dec>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b37      	ldr	r3, [pc, #220]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003c60:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8003c62:	79bb      	ldrb	r3, [r7, #6]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d025      	beq.n	8003cb8 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 8003c6c:	79bb      	ldrb	r3, [r7, #6]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff5d 	bl	8003b34 <bcd2dec>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 8003c7e:	79bb      	ldrb	r3, [r7, #6]
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d108      	bne.n	8003ca2 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <RTC_GetTimeDate+0x96>
 8003c96:	220c      	movs	r2, #12
 8003c98:	e000      	b.n	8003c9c <RTC_GetTimeDate+0x98>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003c9e:	709a      	strb	r2, [r3, #2]
 8003ca0:	e015      	b.n	8003cce <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8003ca2:	7bbb      	ldrb	r3, [r7, #14]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <RTC_GetTimeDate+0xac>
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	330c      	adds	r3, #12
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e000      	b.n	8003cb2 <RTC_GetTimeDate+0xae>
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003cb4:	7093      	strb	r3, [r2, #2]
 8003cb6:	e00a      	b.n	8003cce <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 8003cb8:	79bb      	ldrb	r3, [r7, #6]
 8003cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff37 	bl	8003b34 <bcd2dec>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b1c      	ldr	r3, [pc, #112]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003ccc:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff2c 	bl	8003b34 <bcd2dec>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003ce2:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8003ce4:	7a3b      	ldrb	r3, [r7, #8]
 8003ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff21 	bl	8003b34 <bcd2dec>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003cf8:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 8003cfa:	7a7b      	ldrb	r3, [r7, #9]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff16 	bl	8003b34 <bcd2dec>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003d0e:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 8003d10:	7abb      	ldrb	r3, [r7, #10]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff0e 	bl	8003b34 <bcd2dec>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <RTC_GetTimeDate+0x138>)
 8003d22:	80da      	strh	r2, [r3, #6]
 8003d24:	e002      	b.n	8003d2c <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <RTC_GetTimeDate+0x128>
        return;
 8003d2a:	bf00      	nop
}
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200005fc 	.word	0x200005fc
 8003d38:	20000350 	.word	0x20000350
 8003d3c:	200005f4 	.word	0x200005f4

08003d40 <lcd_line>:
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;
static uint16_t edit_countdown_rep = 1;   // NEW

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 8003d4c:	f107 000c 	add.w	r0, r7, #12
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4a09      	ldr	r2, [pc, #36]	@ (8003d78 <lcd_line+0x38>)
 8003d54:	2111      	movs	r1, #17
 8003d56:	f007 f915 	bl	800af84 <sniprintf>
    lcd_put_cur(row, 0);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd ff62 	bl	8001c28 <lcd_put_cur>
    lcd_send_string(ln);
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd ff7f 	bl	8001c6c <lcd_send_string>
}
 8003d6e:	bf00      	nop
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	0800d480 	.word	0x0800d480

08003d7c <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7ff ffda 	bl	8003d40 <lcd_line>
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7ff ffce 	bl	8003d40 <lcd_line>
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f001 fede 	bl	8005b70 <HAL_GetTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4a02      	ldr	r2, [pc, #8]	@ (8003dc0 <refreshInactivityTimer+0x14>)
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000060c 	.word	0x2000060c

08003dc4 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <goto_menu_top+0x18>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <goto_menu_top+0x1c>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	20000614 	.word	0x20000614
 8003de0:	20000618 	.word	0x20000618

08003de4 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	@ 0x30
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	70fb      	strb	r3, [r7, #3]
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	dc20      	bgt.n	8003e3a <format_menu_line+0x56>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db1d      	blt.n	8003e3a <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <format_menu_line+0x24>
 8003e04:	233e      	movs	r3, #62	@ 0x3e
 8003e06:	e000      	b.n	8003e0a <format_menu_line+0x26>
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 8003e0e:	4a10      	ldr	r2, [pc, #64]	@ (8003e50 <format_menu_line+0x6c>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e16:	f107 0014 	add.w	r0, r7, #20
 8003e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e54 <format_menu_line+0x70>)
 8003e1c:	2110      	movs	r1, #16
 8003e1e:	f007 f8b1 	bl	800af84 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8003e22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003e26:	f107 0314 	add.w	r3, r7, #20
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <format_menu_line+0x74>)
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f007 f8a6 	bl	800af84 <sniprintf>
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003e38:	e005      	b.n	8003e46 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 8003e3a:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <format_menu_line+0x78>)
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f007 f8a0 	bl	800af84 <sniprintf>
    }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	@ 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000002c 	.word	0x2000002c
 8003e54:	0800d48c 	.word	0x0800d48c
 8003e58:	0800d498 	.word	0x0800d498
 8003e5c:	0800d4a0 	.word	0x0800d4a0

08003e60 <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    lcd_clear();
 8003e64:	f7fd fed3 	bl	8001c0e <lcd_clear>
    lcd_line0("  Welcome to ");
 8003e68:	4803      	ldr	r0, [pc, #12]	@ (8003e78 <show_welcome+0x18>)
 8003e6a:	f7ff ff87 	bl	8003d7c <lcd_line0>
    lcd_line1("   HELONIX   ");
 8003e6e:	4803      	ldr	r0, [pc, #12]	@ (8003e7c <show_welcome+0x1c>)
 8003e70:	f7ff ff90 	bl	8003d94 <lcd_line1>
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	0800d4b4 	.word	0x0800d4b4
 8003e7c:	0800d4c4 	.word	0x0800d4c4

08003e80 <show_dash>:

static void show_dash(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b092      	sub	sp, #72	@ 0x48
 8003e84:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 8003e86:	f7ff fcb1 	bl	80037ec <Motor_GetStatus>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <show_dash+0x14>
 8003e90:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <show_dash+0x124>)
 8003e92:	e000      	b.n	8003e96 <show_dash+0x16>
 8003e94:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <show_dash+0x128>)
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 8003e98:	4b44      	ldr	r3, [pc, #272]	@ (8003fac <show_dash+0x12c>)
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 8003e9c:	4b44      	ldr	r3, [pc, #272]	@ (8003fb0 <show_dash+0x130>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <show_dash+0x2c>
 8003ea6:	4b43      	ldr	r3, [pc, #268]	@ (8003fb4 <show_dash+0x134>)
 8003ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eaa:	e026      	b.n	8003efa <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 8003eac:	4b42      	ldr	r3, [pc, #264]	@ (8003fb8 <show_dash+0x138>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <show_dash+0x3c>
 8003eb6:	4b41      	ldr	r3, [pc, #260]	@ (8003fbc <show_dash+0x13c>)
 8003eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eba:	e01e      	b.n	8003efa <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 8003ebc:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <show_dash+0x140>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <show_dash+0x4c>
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc4 <show_dash+0x144>)
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eca:	e016      	b.n	8003efa <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc8 <show_dash+0x148>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <show_dash+0x5c>
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fcc <show_dash+0x14c>)
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eda:	e00e      	b.n	8003efa <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 8003edc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <show_dash+0x150>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <show_dash+0x6c>
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <show_dash+0x154>)
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eea:	e006      	b.n	8003efa <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 8003eec:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd8 <show_dash+0x158>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <show_dash+0x7a>
 8003ef6:	4b39      	ldr	r3, [pc, #228]	@ (8003fdc <show_dash+0x15c>)
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 8003efa:	f107 0018 	add.w	r0, r7, #24
 8003efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	4a36      	ldr	r2, [pc, #216]	@ (8003fe0 <show_dash+0x160>)
 8003f06:	2111      	movs	r1, #17
 8003f08:	f007 f83c 	bl	800af84 <sniprintf>

    int submergedCount = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003f10:	2300      	movs	r3, #0
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f14:	e012      	b.n	8003f3c <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8003f16:	4a33      	ldr	r2, [pc, #204]	@ (8003fe4 <show_dash+0x164>)
 8003f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4931      	ldr	r1, [pc, #196]	@ (8003fe8 <show_dash+0x168>)
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd f865 	bl	8000ff4 <__aeabi_fcmplt>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <show_dash+0xb6>
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	3301      	adds	r3, #1
 8003f34:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	3301      	adds	r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	dde9      	ble.n	8003f16 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d817      	bhi.n	8003f78 <show_dash+0xf8>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <show_dash+0xd0>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f67 	.word	0x08003f67
 8003f58:	08003f6d 	.word	0x08003f6d
 8003f5c:	08003f73 	.word	0x08003f73
        case 0:  level = "EMPTY"; break;
 8003f60:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <show_dash+0x16c>)
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f64:	e00b      	b.n	8003f7e <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <show_dash+0x170>)
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	e008      	b.n	8003f7e <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <show_dash+0x174>)
 8003f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f70:	e005      	b.n	8003f7e <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 8003f72:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <show_dash+0x178>)
 8003f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f76:	e002      	b.n	8003f7e <show_dash+0xfe>
        default: level = "FULL";  break;
 8003f78:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <show_dash+0x17c>)
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7c:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 8003f7e:	1d38      	adds	r0, r7, #4
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	4a1f      	ldr	r2, [pc, #124]	@ (8004000 <show_dash+0x180>)
 8003f84:	2111      	movs	r1, #17
 8003f86:	f006 fffd 	bl	800af84 <sniprintf>

    lcd_line0(line0);
 8003f8a:	f107 0318 	add.w	r3, r7, #24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fef4 	bl	8003d7c <lcd_line0>
    lcd_line1(line1);
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fefc 	bl	8003d94 <lcd_line1>
}
 8003f9c:	bf00      	nop
 8003f9e:	3740      	adds	r7, #64	@ 0x40
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	0800d4d4 	.word	0x0800d4d4
 8003fa8:	0800d4d8 	.word	0x0800d4d8
 8003fac:	0800d4dc 	.word	0x0800d4dc
 8003fb0:	20000571 	.word	0x20000571
 8003fb4:	0800d4e4 	.word	0x0800d4e4
 8003fb8:	20000576 	.word	0x20000576
 8003fbc:	0800d4ec 	.word	0x0800d4ec
 8003fc0:	20000575 	.word	0x20000575
 8003fc4:	0800d4f8 	.word	0x0800d4f8
 8003fc8:	20000574 	.word	0x20000574
 8003fcc:	0800d500 	.word	0x0800d500
 8003fd0:	20000572 	.word	0x20000572
 8003fd4:	0800d508 	.word	0x0800d508
 8003fd8:	20000573 	.word	0x20000573
 8003fdc:	0800d510 	.word	0x0800d510
 8003fe0:	0800d518 	.word	0x0800d518
 8003fe4:	200004a0 	.word	0x200004a0
 8003fe8:	3dcccccd 	.word	0x3dcccccd
 8003fec:	0800d520 	.word	0x0800d520
 8003ff0:	0800d528 	.word	0x0800d528
 8003ff4:	0800d52c 	.word	0x0800d52c
 8003ff8:	0800d534 	.word	0x0800d534
 8003ffc:	0800d538 	.word	0x0800d538
 8004000:	0800d540 	.word	0x0800d540

08004004 <show_menu>:

static void show_menu(void){
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	@ 0x28
 8004008:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 800400a:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <show_menu+0xb0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <show_menu+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	da04      	bge.n	8004020 <show_menu+0x1c>
 8004016:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <show_menu+0xb0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <show_menu+0xb4>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e00b      	b.n	8004038 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <show_menu+0xb4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <show_menu+0xb0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	da04      	bge.n	8004038 <show_menu+0x34>
 800402e:	4b21      	ldr	r3, [pc, #132]	@ (80040b4 <show_menu+0xb0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3b01      	subs	r3, #1
 8004034:	4a20      	ldr	r2, [pc, #128]	@ (80040b8 <show_menu+0xb4>)
 8004036:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <show_menu+0xb4>)
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <show_menu+0xb0>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <show_menu+0xb4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d105      	bne.n	8004054 <show_menu+0x50>
 8004048:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <show_menu+0xb8>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <show_menu+0x50>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <show_menu+0x52>
 8004054:	2300      	movs	r3, #0
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f107 0014 	add.w	r0, r7, #20
 8004060:	460a      	mov	r2, r1
 8004062:	2111      	movs	r1, #17
 8004064:	f7ff febe 	bl	8003de4 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <show_menu+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c59      	adds	r1, r3, #1
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <show_menu+0xb4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <show_menu+0xb0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d105      	bne.n	8004088 <show_menu+0x84>
 800407c:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <show_menu+0xb8>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <show_menu+0x84>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <show_menu+0x86>
 8004088:	2300      	movs	r3, #0
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4638      	mov	r0, r7
 8004092:	460a      	mov	r2, r1
 8004094:	2111      	movs	r1, #17
 8004096:	f7ff fea5 	bl	8003de4 <format_menu_line>
    lcd_line0(line0);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fe6c 	bl	8003d7c <lcd_line0>
    lcd_line1(line1);
 80040a4:	463b      	mov	r3, r7
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fe74 	bl	8003d94 <lcd_line1>
}
 80040ac:	bf00      	nop
 80040ae:	3728      	adds	r7, #40	@ 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000614 	.word	0x20000614
 80040b8:	20000618 	.word	0x20000618
 80040bc:	2000002b 	.word	0x2000002b

080040c0 <show_manual>:

static void show_manual(void){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <show_manual+0x54>)
 80040cc:	2111      	movs	r1, #17
 80040ce:	4618      	mov	r0, r3
 80040d0:	f006 ff58 	bl	800af84 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 80040d4:	f7ff fb8a 	bl	80037ec <Motor_GetStatus>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <show_manual+0x2c>
 80040de:	463b      	mov	r3, r7
 80040e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004118 <show_manual+0x58>)
 80040e2:	2111      	movs	r1, #17
 80040e4:	4618      	mov	r0, r3
 80040e6:	f006 ff4d 	bl	800af84 <sniprintf>
 80040ea:	e005      	b.n	80040f8 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 80040ec:	463b      	mov	r3, r7
 80040ee:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <show_manual+0x5c>)
 80040f0:	2111      	movs	r1, #17
 80040f2:	4618      	mov	r0, r3
 80040f4:	f006 ff46 	bl	800af84 <sniprintf>
    lcd_line0(line0);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fe3d 	bl	8003d7c <lcd_line0>
    lcd_line1(line1);
 8004102:	463b      	mov	r3, r7
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fe45 	bl	8003d94 <lcd_line1>
}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	@ 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0800d424 	.word	0x0800d424
 8004118:	0800d54c 	.word	0x0800d54c
 800411c:	0800d55c 	.word	0x0800d55c

08004120 <show_semi_auto>:

static void show_semi_auto(void){
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <show_semi_auto+0x50>)
 800412c:	2111      	movs	r1, #17
 800412e:	4618      	mov	r0, r3
 8004130:	f006 ff28 	bl	800af84 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 8004134:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <show_semi_auto+0x54>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d006      	beq.n	800414a <show_semi_auto+0x2a>
 800413c:	463b      	mov	r3, r7
 800413e:	4a0e      	ldr	r2, [pc, #56]	@ (8004178 <show_semi_auto+0x58>)
 8004140:	2111      	movs	r1, #17
 8004142:	4618      	mov	r0, r3
 8004144:	f006 ff1e 	bl	800af84 <sniprintf>
 8004148:	e005      	b.n	8004156 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 800414a:	463b      	mov	r3, r7
 800414c:	4a0b      	ldr	r2, [pc, #44]	@ (800417c <show_semi_auto+0x5c>)
 800414e:	2111      	movs	r1, #17
 8004150:	4618      	mov	r0, r3
 8004152:	f006 ff17 	bl	800af84 <sniprintf>
    lcd_line0(line0);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fe0e 	bl	8003d7c <lcd_line0>
    lcd_line1(line1);
 8004160:	463b      	mov	r3, r7
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fe16 	bl	8003d94 <lcd_line1>
}
 8004168:	bf00      	nop
 800416a:	3728      	adds	r7, #40	@ 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	0800d430 	.word	0x0800d430
 8004174:	20000610 	.word	0x20000610
 8004178:	0800d56c 	.word	0x0800d56c
 800417c:	0800d57c 	.word	0x0800d57c

08004180 <show_timer>:

static void show_timer(void){
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	@ 0x30
 8004184:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8004186:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <show_timer+0x54>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <show_timer+0x58>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f107 0014 	add.w	r0, r7, #20
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <show_timer+0x5c>)
 800419a:	2111      	movs	r1, #17
 800419c:	f006 fef2 	bl	800af84 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <show_timer+0x60>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <show_timer+0x64>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4638      	mov	r0, r7
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <show_timer+0x68>)
 80041b2:	2111      	movs	r1, #17
 80041b4:	f006 fee6 	bl	800af84 <sniprintf>
    lcd_line0(l0);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fddd 	bl	8003d7c <lcd_line0>
    lcd_line1(l1);
 80041c2:	463b      	mov	r3, r7
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fde5 	bl	8003d94 <lcd_line1>
}
 80041ca:	bf00      	nop
 80041cc:	3728      	adds	r7, #40	@ 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000048 	.word	0x20000048
 80041d8:	20000049 	.word	0x20000049
 80041dc:	0800d58c 	.word	0x0800d58c
 80041e0:	2000004a 	.word	0x2000004a
 80041e4:	2000004b 	.word	0x2000004b
 80041e8:	0800d59c 	.word	0x0800d59c

080041ec <show_search>:

static void show_search(void){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	@ 0x30
 80041f0:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
             searchSettings.searchActive ? "ON " : "OFF",
 80041f2:	4b16      	ldr	r3, [pc, #88]	@ (800424c <show_search+0x60>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <show_search+0x12>
 80041fa:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <show_search+0x64>)
 80041fc:	e000      	b.n	8004200 <show_search+0x14>
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <show_search+0x68>)
             (unsigned)searchSettings.testingGapSeconds,
 8004200:	4a12      	ldr	r2, [pc, #72]	@ (800424c <show_search+0x60>)
 8004202:	8852      	ldrh	r2, [r2, #2]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 8004204:	4611      	mov	r1, r2
             (unsigned)searchSettings.dryRunTimeSeconds);
 8004206:	4a11      	ldr	r2, [pc, #68]	@ (800424c <show_search+0x60>)
 8004208:	8892      	ldrh	r2, [r2, #4]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 800420a:	f107 0014 	add.w	r0, r7, #20
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	9100      	str	r1, [sp, #0]
 8004212:	4a11      	ldr	r2, [pc, #68]	@ (8004258 <show_search+0x6c>)
 8004214:	2111      	movs	r1, #17
 8004216:	f006 feb5 	bl	800af84 <sniprintf>
    snprintf(l1,sizeof(l1),">%s   Edit",
             searchSettings.searchActive ? "Stop" : "Enable");
 800421a:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <show_search+0x60>)
 800421c:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <show_search+0x3a>
 8004222:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <show_search+0x70>)
 8004224:	e000      	b.n	8004228 <show_search+0x3c>
 8004226:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <show_search+0x74>)
 8004228:	4638      	mov	r0, r7
 800422a:	4a0e      	ldr	r2, [pc, #56]	@ (8004264 <show_search+0x78>)
 800422c:	2111      	movs	r1, #17
 800422e:	f006 fea9 	bl	800af84 <sniprintf>
    lcd_line0(l0);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fda0 	bl	8003d7c <lcd_line0>
    lcd_line1(l1);
 800423c:	463b      	mov	r3, r7
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fda8 	bl	8003d94 <lcd_line1>
}
 8004244:	bf00      	nop
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000001c 	.word	0x2000001c
 8004250:	0800d4d4 	.word	0x0800d4d4
 8004254:	0800d4d8 	.word	0x0800d4d8
 8004258:	0800d5b0 	.word	0x0800d5b0
 800425c:	0800d5c0 	.word	0x0800d5c0
 8004260:	0800d5c8 	.word	0x0800d5c8
 8004264:	0800d5d0 	.word	0x0800d5d0

08004268 <show_countdown>:

static void show_countdown(void){
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	@ 0x40
 800426c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    extern volatile uint16_t countdownRemainingRuns;
    if (countdownActive) {
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <show_countdown+0x98>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d029      	beq.n	80042cc <show_countdown+0x64>
        uint32_t sec = countdownDuration;
 8004278:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <show_countdown+0x9c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	4a21      	ldr	r2, [pc, #132]	@ (8004308 <show_countdown+0xa0>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s   = sec%60;
 800428a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800428c:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <show_countdown+0xa0>)
 800428e:	fba3 1302 	umull	r1, r3, r3, r2
 8004292:	0959      	lsrs	r1, r3, #5
 8004294:	460b      	mov	r3, r1
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a5b      	subs	r3, r3, r1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Run %02u %02d:%02d",
 80042a0:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <show_countdown+0xa4>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ac:	f107 0018 	add.w	r0, r7, #24
 80042b0:	9201      	str	r2, [sp, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	460b      	mov	r3, r1
 80042b6:	4a16      	ldr	r2, [pc, #88]	@ (8004310 <show_countdown+0xa8>)
 80042b8:	2111      	movs	r1, #17
 80042ba:	f006 fe63 	bl	800af84 <sniprintf>
                 (unsigned)countdownRemainingRuns,(int)min,(int)s);
        snprintf(l1,sizeof(l1),">Stop     Back");
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <show_countdown+0xac>)
 80042c2:	2111      	movs	r1, #17
 80042c4:	4618      	mov	r0, r3
 80042c6:	f006 fe5d 	bl	800af84 <sniprintf>
 80042ca:	e00c      	b.n	80042e6 <show_countdown+0x7e>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 80042cc:	f107 0318 	add.w	r3, r7, #24
 80042d0:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <show_countdown+0xb0>)
 80042d2:	2111      	movs	r1, #17
 80042d4:	4618      	mov	r0, r3
 80042d6:	f006 fe55 	bl	800af84 <sniprintf>
        snprintf(l1,sizeof(l1),">Set Start Back");
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4a0f      	ldr	r2, [pc, #60]	@ (800431c <show_countdown+0xb4>)
 80042de:	2111      	movs	r1, #17
 80042e0:	4618      	mov	r0, r3
 80042e2:	f006 fe4f 	bl	800af84 <sniprintf>
    }
    lcd_line0(l0);
 80042e6:	f107 0318 	add.w	r3, r7, #24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd46 	bl	8003d7c <lcd_line0>
    lcd_line1(l1);
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd4e 	bl	8003d94 <lcd_line1>
}
 80042f8:	bf00      	nop
 80042fa:	3738      	adds	r7, #56	@ 0x38
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000572 	.word	0x20000572
 8004304:	20000584 	.word	0x20000584
 8004308:	88888889 	.word	0x88888889
 800430c:	200005c4 	.word	0x200005c4
 8004310:	0800d5dc 	.word	0x0800d5dc
 8004314:	0800d54c 	.word	0x0800d54c
 8004318:	0800d5f0 	.word	0x0800d5f0
 800431c:	0800d600 	.word	0x0800d600

08004320 <show_twist>:


static void show_twist(void){
 8004320:	b580      	push	{r7, lr}
 8004322:	b08e      	sub	sp, #56	@ 0x38
 8004324:	af02      	add	r7, sp, #8
    char l0[17], l1[17];

    const char* status = twistSettings.twistActive ? "ON " : "OFF";
 8004326:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <show_twist+0x64>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <show_twist+0x12>
 800432e:	4b16      	ldr	r3, [pc, #88]	@ (8004388 <show_twist+0x68>)
 8004330:	e000      	b.n	8004334 <show_twist+0x14>
 8004332:	4b16      	ldr	r3, [pc, #88]	@ (800438c <show_twist+0x6c>)
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
             (int)twistSettings.onDurationSeconds,
 8004336:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <show_twist+0x64>)
 8004338:	885b      	ldrh	r3, [r3, #2]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 800433a:	461a      	mov	r2, r3
             (int)twistSettings.offDurationSeconds);
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <show_twist+0x64>)
 800433e:	889b      	ldrh	r3, [r3, #4]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 8004340:	f107 0018 	add.w	r0, r7, #24
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	4a11      	ldr	r2, [pc, #68]	@ (8004390 <show_twist+0x70>)
 800434c:	2111      	movs	r1, #17
 800434e:	f006 fe19 	bl	800af84 <sniprintf>

    // primary action on SELECT is Enable/Stop; UP/DOWN goes to edit
    snprintf(l1,sizeof(l1),">%s   Edit",
             twistSettings.twistActive ? "Stop" : "Enable");
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <show_twist+0x64>)
 8004354:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <show_twist+0x3e>
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <show_twist+0x74>)
 800435c:	e000      	b.n	8004360 <show_twist+0x40>
 800435e:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <show_twist+0x78>)
 8004360:	1d38      	adds	r0, r7, #4
 8004362:	4a0e      	ldr	r2, [pc, #56]	@ (800439c <show_twist+0x7c>)
 8004364:	2111      	movs	r1, #17
 8004366:	f006 fe0d 	bl	800af84 <sniprintf>

    lcd_line0(l0);
 800436a:	f107 0318 	add.w	r3, r7, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fd04 	bl	8003d7c <lcd_line0>
    lcd_line1(l1);
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd0c 	bl	8003d94 <lcd_line1>
}
 800437c:	bf00      	nop
 800437e:	3730      	adds	r7, #48	@ 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000024 	.word	0x20000024
 8004388:	0800d4d4 	.word	0x0800d4d4
 800438c:	0800d4d8 	.word	0x0800d4d8
 8004390:	0800d610 	.word	0x0800d610
 8004394:	0800d5c0 	.word	0x0800d5c0
 8004398:	0800d5c8 	.word	0x0800d5c8
 800439c:	0800d5d0 	.word	0x0800d5d0

080043a0 <apply_search_settings>:


/* ===== Apply functions ===== */
static void apply_search_settings(void){
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <apply_search_settings+0x1c>)
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <apply_search_settings+0x20>)
 80043aa:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <apply_search_settings+0x24>)
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <apply_search_settings+0x20>)
 80043b2:	809a      	strh	r2, [r3, #4]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	2000004c 	.word	0x2000004c
 80043c0:	2000001c 	.word	0x2000001c
 80043c4:	2000004e 	.word	0x2000004e

080043c8 <apply_twist_settings>:

static void apply_twist_settings(void){
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <apply_twist_settings+0x1c>)
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <apply_twist_settings+0x20>)
 80043d2:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <apply_twist_settings+0x24>)
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <apply_twist_settings+0x20>)
 80043da:	809a      	strh	r2, [r3, #4]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	20000050 	.word	0x20000050
 80043e8:	20000024 	.word	0x20000024
 80043ec:	20000052 	.word	0x20000052

080043f0 <apply_countdown_settings>:

static void apply_countdown_settings(void){
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
    // kept for compatibility if other code depends on countdownDuration mirror
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <apply_countdown_settings+0x20>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	461a      	mov	r2, r3
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <apply_countdown_settings+0x24>)
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	20000054 	.word	0x20000054
 8004414:	20000584 	.word	0x20000584

08004418 <enable_semi_auto>:

static void enable_semi_auto(void){
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 800441c:	f7ff f9da 	bl	80037d4 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 8004420:	f7ff f866 	bl	80034f0 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8004424:	4b02      	ldr	r3, [pc, #8]	@ (8004430 <enable_semi_auto+0x18>)
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000610 	.word	0x20000610

08004434 <disable_semi_auto>:
static void disable_semi_auto(void){
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8004438:	2000      	movs	r0, #0
 800443a:	f7ff f9ad 	bl	8003798 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 800443e:	4b02      	ldr	r3, [pc, #8]	@ (8004448 <disable_semi_auto+0x14>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000610 	.word	0x20000610

0800444c <apply_timer_settings>:

static void apply_timer_settings(void){
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <apply_timer_settings+0x3c>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <apply_timer_settings+0x40>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <apply_timer_settings+0x44>)
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe faba 	bl	80029da <ModelHandle_TimeToSeconds>
 8004466:	4603      	mov	r3, r0
 8004468:	4a07      	ldr	r2, [pc, #28]	@ (8004488 <apply_timer_settings+0x3c>)
 800446a:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <apply_timer_settings+0x48>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <apply_timer_settings+0x4c>)
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe faaf 	bl	80029da <ModelHandle_TimeToSeconds>
 800447c:	4603      	mov	r3, r0
 800447e:	4a02      	ldr	r2, [pc, #8]	@ (8004488 <apply_timer_settings+0x3c>)
 8004480:	6093      	str	r3, [r2, #8]
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000588 	.word	0x20000588
 800448c:	20000048 	.word	0x20000048
 8004490:	20000049 	.word	0x20000049
 8004494:	2000004a 	.word	0x2000004a
 8004498:	2000004b 	.word	0x2000004b

0800449c <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 800449c:	b580      	push	{r7, lr}
 800449e:	b0f0      	sub	sp, #448	@ 0x1c0
 80044a0:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80044a2:	f001 fb65 	bl	8005b70 <HAL_GetTick>
 80044a6:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

    bool cursorBlinkActive = false;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
    switch (ui) {
 80044b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004798 <Screen_Update+0x2fc>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b13      	cmp	r3, #19
 80044b6:	bf8c      	ite	hi
 80044b8:	2201      	movhi	r2, #1
 80044ba:	2200      	movls	r2, #0
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d10f      	bne.n	80044e2 <Screen_Update+0x46>
 80044c2:	4ab6      	ldr	r2, [pc, #728]	@ (800479c <Screen_Update+0x300>)
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <Screen_Update+0x46>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP:   // NEW: blink on repeats editor
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            break;
 80044e0:	e006      	b.n	80044f0 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            cursorVisible = true;
 80044e8:	4bad      	ldr	r3, [pc, #692]	@ (80047a0 <Screen_Update+0x304>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
            break;
 80044ee:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 80044f0:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01e      	beq.n	8004536 <Screen_Update+0x9a>
 80044f8:	4baa      	ldr	r3, [pc, #680]	@ (80047a4 <Screen_Update+0x308>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004506:	4293      	cmp	r3, r2
 8004508:	d315      	bcc.n	8004536 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 800450a:	4ba5      	ldr	r3, [pc, #660]	@ (80047a0 <Screen_Update+0x304>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	4b9e      	ldr	r3, [pc, #632]	@ (80047a0 <Screen_Update+0x304>)
 8004526:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8004528:	4a9e      	ldr	r2, [pc, #632]	@ (80047a4 <Screen_Update+0x308>)
 800452a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800452e:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8004530:	4b9d      	ldr	r3, [pc, #628]	@ (80047a8 <Screen_Update+0x30c>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8004536:	4b98      	ldr	r3, [pc, #608]	@ (8004798 <Screen_Update+0x2fc>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d112      	bne.n	8004564 <Screen_Update+0xc8>
 800453e:	4b9b      	ldr	r3, [pc, #620]	@ (80047ac <Screen_Update+0x310>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800454c:	4293      	cmp	r3, r2
 800454e:	d309      	bcc.n	8004564 <Screen_Update+0xc8>
        ui = UI_DASH;
 8004550:	4b91      	ldr	r3, [pc, #580]	@ (8004798 <Screen_Update+0x2fc>)
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8004556:	4a95      	ldr	r2, [pc, #596]	@ (80047ac <Screen_Update+0x310>)
 8004558:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800455c:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 800455e:	4b92      	ldr	r3, [pc, #584]	@ (80047a8 <Screen_Update+0x30c>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8004564:	4b8c      	ldr	r3, [pc, #560]	@ (8004798 <Screen_Update+0x2fc>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d012      	beq.n	8004592 <Screen_Update+0xf6>
 800456c:	4b8a      	ldr	r3, [pc, #552]	@ (8004798 <Screen_Update+0x2fc>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d00e      	beq.n	8004592 <Screen_Update+0xf6>
 8004574:	4b8e      	ldr	r3, [pc, #568]	@ (80047b0 <Screen_Update+0x314>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8004582:	4293      	cmp	r3, r2
 8004584:	d305      	bcc.n	8004592 <Screen_Update+0xf6>
        ui = UI_DASH;
 8004586:	4b84      	ldr	r3, [pc, #528]	@ (8004798 <Screen_Update+0x2fc>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 800458c:	4b86      	ldr	r3, [pc, #536]	@ (80047a8 <Screen_Update+0x30c>)
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8004592:	4b81      	ldr	r3, [pc, #516]	@ (8004798 <Screen_Update+0x2fc>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10e      	bne.n	80045b8 <Screen_Update+0x11c>
 800459a:	4b84      	ldr	r3, [pc, #528]	@ (80047ac <Screen_Update+0x310>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045a8:	d306      	bcc.n	80045b8 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 80045aa:	4b7f      	ldr	r3, [pc, #508]	@ (80047a8 <Screen_Update+0x30c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 80045b0:	4a7e      	ldr	r2, [pc, #504]	@ (80047ac <Screen_Update+0x310>)
 80045b2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80045b6:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 80045b8:	4b7b      	ldr	r3, [pc, #492]	@ (80047a8 <Screen_Update+0x30c>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <Screen_Update+0x132>
 80045c0:	4b75      	ldr	r3, [pc, #468]	@ (8004798 <Screen_Update+0x2fc>)
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	4b7b      	ldr	r3, [pc, #492]	@ (80047b4 <Screen_Update+0x318>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	f000 81ab 	beq.w	8004924 <Screen_Update+0x488>
        bool fullRedraw = (ui != last_ui);
 80045ce:	4b72      	ldr	r3, [pc, #456]	@ (8004798 <Screen_Update+0x2fc>)
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	4b78      	ldr	r3, [pc, #480]	@ (80047b4 <Screen_Update+0x318>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
        last_ui = ui;
 80045e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004798 <Screen_Update+0x2fc>)
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	4b73      	ldr	r3, [pc, #460]	@ (80047b4 <Screen_Update+0x318>)
 80045e8:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 80045ea:	4b6f      	ldr	r3, [pc, #444]	@ (80047a8 <Screen_Update+0x30c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 80045f0:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <Screen_Update+0x160>
 80045f8:	f7fd fb09 	bl	8001c0e <lcd_clear>

        switch (ui) {
 80045fc:	4b66      	ldr	r3, [pc, #408]	@ (8004798 <Screen_Update+0x2fc>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b13      	cmp	r3, #19
 8004602:	f200 8188 	bhi.w	8004916 <Screen_Update+0x47a>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <Screen_Update+0x170>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	0800465d 	.word	0x0800465d
 8004610:	08004663 	.word	0x08004663
 8004614:	08004669 	.word	0x08004669
 8004618:	0800466f 	.word	0x0800466f
 800461c:	08004675 	.word	0x08004675
 8004620:	0800467b 	.word	0x0800467b
 8004624:	08004693 	.word	0x08004693
 8004628:	080046c7 	.word	0x080046c7
 800462c:	080046fb 	.word	0x080046fb
 8004630:	0800472f 	.word	0x0800472f
 8004634:	08004681 	.word	0x08004681
 8004638:	08004763 	.word	0x08004763
 800463c:	080047e5 	.word	0x080047e5
 8004640:	08004687 	.word	0x08004687
 8004644:	08004819 	.word	0x08004819
 8004648:	0800484d 	.word	0x0800484d
 800464c:	08004881 	.word	0x08004881
 8004650:	0800468d 	.word	0x0800468d
 8004654:	080048b3 	.word	0x080048b3
 8004658:	080048e7 	.word	0x080048e7
            case UI_WELCOME: show_welcome(); break;
 800465c:	f7ff fc00 	bl	8003e60 <show_welcome>
 8004660:	e160      	b.n	8004924 <Screen_Update+0x488>
            case UI_DASH: show_dash(); break;
 8004662:	f7ff fc0d 	bl	8003e80 <show_dash>
 8004666:	e15d      	b.n	8004924 <Screen_Update+0x488>
            case UI_MENU: show_menu(); break;
 8004668:	f7ff fccc 	bl	8004004 <show_menu>
 800466c:	e15a      	b.n	8004924 <Screen_Update+0x488>
            case UI_MANUAL: show_manual(); break;
 800466e:	f7ff fd27 	bl	80040c0 <show_manual>
 8004672:	e157      	b.n	8004924 <Screen_Update+0x488>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8004674:	f7ff fd54 	bl	8004120 <show_semi_auto>
 8004678:	e154      	b.n	8004924 <Screen_Update+0x488>
            case UI_TIMER: show_timer(); break;
 800467a:	f7ff fd81 	bl	8004180 <show_timer>
 800467e:	e151      	b.n	8004924 <Screen_Update+0x488>
            case UI_SEARCH: show_search(); break;
 8004680:	f7ff fdb4 	bl	80041ec <show_search>
 8004684:	e14e      	b.n	8004924 <Screen_Update+0x488>
            case UI_COUNTDOWN: show_countdown(); break;
 8004686:	f7ff fdef 	bl	8004268 <show_countdown>
 800468a:	e14b      	b.n	8004924 <Screen_Update+0x488>
            case UI_TWIST: show_twist(); break;
 800468c:	f7ff fe48 	bl	8004320 <show_twist>
 8004690:	e148      	b.n	8004924 <Screen_Update+0x488>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 8004692:	4b49      	ldr	r3, [pc, #292]	@ (80047b8 <Screen_Update+0x31c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800469a:	4a48      	ldr	r2, [pc, #288]	@ (80047bc <Screen_Update+0x320>)
 800469c:	2111      	movs	r1, #17
 800469e:	f006 fc71 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80046a2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80046a6:	4a46      	ldr	r2, [pc, #280]	@ (80047c0 <Screen_Update+0x324>)
 80046a8:	2111      	movs	r1, #17
 80046aa:	4618      	mov	r0, r3
 80046ac:	f006 fc6a 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80046b0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fb61 	bl	8003d7c <lcd_line0>
 80046ba:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb68 	bl	8003d94 <lcd_line1>
 80046c4:	e12e      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 80046c6:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <Screen_Update+0x328>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 80046ce:	4a3e      	ldr	r2, [pc, #248]	@ (80047c8 <Screen_Update+0x32c>)
 80046d0:	2111      	movs	r1, #17
 80046d2:	f006 fc57 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80046d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80046da:	4a39      	ldr	r2, [pc, #228]	@ (80047c0 <Screen_Update+0x324>)
 80046dc:	2111      	movs	r1, #17
 80046de:	4618      	mov	r0, r3
 80046e0:	f006 fc50 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80046e4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fb47 	bl	8003d7c <lcd_line0>
 80046ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fb4e 	bl	8003d94 <lcd_line1>
 80046f8:	e114      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 80046fa:	4b34      	ldr	r3, [pc, #208]	@ (80047cc <Screen_Update+0x330>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8004702:	4a33      	ldr	r2, [pc, #204]	@ (80047d0 <Screen_Update+0x334>)
 8004704:	2111      	movs	r1, #17
 8004706:	f006 fc3d 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 800470a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800470e:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <Screen_Update+0x324>)
 8004710:	2111      	movs	r1, #17
 8004712:	4618      	mov	r0, r3
 8004714:	f006 fc36 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004718:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fb2d 	bl	8003d7c <lcd_line0>
 8004722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fb34 	bl	8003d94 <lcd_line1>
 800472c:	e0fa      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 800472e:	4b29      	ldr	r3, [pc, #164]	@ (80047d4 <Screen_Update+0x338>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8004736:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <Screen_Update+0x33c>)
 8004738:	2111      	movs	r1, #17
 800473a:	f006 fc23 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 800473e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004742:	4a1f      	ldr	r2, [pc, #124]	@ (80047c0 <Screen_Update+0x324>)
 8004744:	2111      	movs	r1, #17
 8004746:	4618      	mov	r0, r3
 8004748:	f006 fc1c 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800474c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fb13 	bl	8003d7c <lcd_line0>
 8004756:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fb1a 	bl	8003d94 <lcd_line1>
 8004760:	e0e0      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <Screen_Update+0x340>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800476a:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <Screen_Update+0x344>)
 800476c:	2111      	movs	r1, #17
 800476e:	f006 fc09 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004772:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <Screen_Update+0x324>)
 8004778:	2111      	movs	r1, #17
 800477a:	4618      	mov	r0, r3
 800477c:	f006 fc02 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004780:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff faf9 	bl	8003d7c <lcd_line0>
 800478a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fb00 	bl	8003d94 <lcd_line1>
 8004794:	e0c6      	b.n	8004924 <Screen_Update+0x488>
 8004796:	bf00      	nop
 8004798:	20000604 	.word	0x20000604
 800479c:	000cdbc4 	.word	0x000cdbc4
 80047a0:	2000002b 	.word	0x2000002b
 80047a4:	20000608 	.word	0x20000608
 80047a8:	20000605 	.word	0x20000605
 80047ac:	20000600 	.word	0x20000600
 80047b0:	2000060c 	.word	0x2000060c
 80047b4:	2000002a 	.word	0x2000002a
 80047b8:	20000048 	.word	0x20000048
 80047bc:	0800d620 	.word	0x0800d620
 80047c0:	0800d634 	.word	0x0800d634
 80047c4:	20000049 	.word	0x20000049
 80047c8:	0800d648 	.word	0x0800d648
 80047cc:	2000004a 	.word	0x2000004a
 80047d0:	0800d65c 	.word	0x0800d65c
 80047d4:	2000004b 	.word	0x2000004b
 80047d8:	0800d670 	.word	0x0800d670
 80047dc:	2000004c 	.word	0x2000004c
 80047e0:	0800d684 	.word	0x0800d684
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 80047e4:	4b52      	ldr	r3, [pc, #328]	@ (8004930 <Screen_Update+0x494>)
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80047ec:	4a51      	ldr	r2, [pc, #324]	@ (8004934 <Screen_Update+0x498>)
 80047ee:	2111      	movs	r1, #17
 80047f0:	f006 fbc8 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80047f4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80047f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004938 <Screen_Update+0x49c>)
 80047fa:	2111      	movs	r1, #17
 80047fc:	4618      	mov	r0, r3
 80047fe:	f006 fbc1 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004802:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fab8 	bl	8003d7c <lcd_line0>
 800480c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fabf 	bl	8003d94 <lcd_line1>
 8004816:	e085      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3u", edit_countdown_min);
 8004818:	4b48      	ldr	r3, [pc, #288]	@ (800493c <Screen_Update+0x4a0>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8004820:	4a47      	ldr	r2, [pc, #284]	@ (8004940 <Screen_Update+0x4a4>)
 8004822:	2111      	movs	r1, #17
 8004824:	f006 fbae 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelNext");
 8004828:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800482c:	4a45      	ldr	r2, [pc, #276]	@ (8004944 <Screen_Update+0x4a8>)
 800482e:	2111      	movs	r1, #17
 8004830:	4618      	mov	r0, r3
 8004832:	f006 fba7 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004836:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fa9e 	bl	8003d7c <lcd_line0>
 8004840:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff faa5 	bl	8003d94 <lcd_line1>
 800484a:	e06b      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_REP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Reps: %3u", edit_countdown_rep);
 800484c:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <Screen_Update+0x4ac>)
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8004854:	4a3d      	ldr	r2, [pc, #244]	@ (800494c <Screen_Update+0x4b0>)
 8004856:	2111      	movs	r1, #17
 8004858:	f006 fb94 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- Start");
 800485c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004860:	4a3b      	ldr	r2, [pc, #236]	@ (8004950 <Screen_Update+0x4b4>)
 8004862:	2111      	movs	r1, #17
 8004864:	4618      	mov	r0, r3
 8004866:	f006 fb8d 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800486a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fa84 	bl	8003d7c <lcd_line0>
 8004874:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fa8b 	bl	8003d94 <lcd_line1>
 800487e:	e051      	b.n	8004924 <Screen_Update+0x488>
            }

            case UI_COUNTDOWN_TOGGLE: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Countdown Setup");
 8004880:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004884:	4a33      	ldr	r2, [pc, #204]	@ (8004954 <Screen_Update+0x4b8>)
 8004886:	2111      	movs	r1, #17
 8004888:	4618      	mov	r0, r3
 800488a:	f006 fb7b 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Enable   Edit");
 800488e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004892:	4a31      	ldr	r2, [pc, #196]	@ (8004958 <Screen_Update+0x4bc>)
 8004894:	2111      	movs	r1, #17
 8004896:	4618      	mov	r0, r3
 8004898:	f006 fb74 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1);
 800489c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fa6b 	bl	8003d7c <lcd_line0>
 80048a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fa72 	bl	8003d94 <lcd_line1>
                break;
 80048b0:	e038      	b.n	8004924 <Screen_Update+0x488>
            }

            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 80048b2:	4b2a      	ldr	r3, [pc, #168]	@ (800495c <Screen_Update+0x4c0>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80048ba:	4a29      	ldr	r2, [pc, #164]	@ (8004960 <Screen_Update+0x4c4>)
 80048bc:	2111      	movs	r1, #17
 80048be:	f006 fb61 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80048c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004938 <Screen_Update+0x49c>)
 80048c8:	2111      	movs	r1, #17
 80048ca:	4618      	mov	r0, r3
 80048cc:	f006 fb5a 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80048d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fa51 	bl	8003d7c <lcd_line0>
 80048da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fa58 	bl	8003d94 <lcd_line1>
 80048e4:	e01e      	b.n	8004924 <Screen_Update+0x488>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 80048e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004964 <Screen_Update+0x4c8>)
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	f107 0014 	add.w	r0, r7, #20
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <Screen_Update+0x4cc>)
 80048f0:	2111      	movs	r1, #17
 80048f2:	f006 fb47 	bl	800af84 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80048f6:	463b      	mov	r3, r7
 80048f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004938 <Screen_Update+0x49c>)
 80048fa:	2111      	movs	r1, #17
 80048fc:	4618      	mov	r0, r3
 80048fe:	f006 fb41 	bl	800af84 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fa38 	bl	8003d7c <lcd_line0>
 800490c:	463b      	mov	r3, r7
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa40 	bl	8003d94 <lcd_line1>
 8004914:	e006      	b.n	8004924 <Screen_Update+0x488>
            }
            default:
                lcd_line0("Not Implemented");
 8004916:	4815      	ldr	r0, [pc, #84]	@ (800496c <Screen_Update+0x4d0>)
 8004918:	f7ff fa30 	bl	8003d7c <lcd_line0>
                lcd_line1("                ");
 800491c:	4814      	ldr	r0, [pc, #80]	@ (8004970 <Screen_Update+0x4d4>)
 800491e:	f7ff fa39 	bl	8003d94 <lcd_line1>
                break;
 8004922:	bf00      	nop
        }
    }
}
 8004924:	bf00      	nop
 8004926:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000004e 	.word	0x2000004e
 8004934:	0800d694 	.word	0x0800d694
 8004938:	0800d634 	.word	0x0800d634
 800493c:	20000054 	.word	0x20000054
 8004940:	0800d6a4 	.word	0x0800d6a4
 8004944:	0800d6b4 	.word	0x0800d6b4
 8004948:	20000056 	.word	0x20000056
 800494c:	0800d6c4 	.word	0x0800d6c4
 8004950:	0800d6d4 	.word	0x0800d6d4
 8004954:	0800d6e4 	.word	0x0800d6e4
 8004958:	0800d6f4 	.word	0x0800d6f4
 800495c:	20000050 	.word	0x20000050
 8004960:	0800d704 	.word	0x0800d704
 8004964:	20000052 	.word	0x20000052
 8004968:	0800d714 	.word	0x0800d714
 800496c:	0800d724 	.word	0x0800d724
 8004970:	0800d4a0 	.word	0x0800d4a0

08004974 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
    lcd_init();
 8004978:	f7fd f98d 	bl	8001c96 <lcd_init>
    ui = UI_WELCOME;
 800497c:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <Screen_Init+0x7c>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8004982:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <Screen_Init+0x80>)
 8004984:	2214      	movs	r2, #20
 8004986:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <Screen_Init+0x84>)
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 800498e:	f001 f8ef 	bl	8005b70 <HAL_GetTick>
 8004992:	4603      	mov	r3, r0
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <Screen_Init+0x88>)
 8004996:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8004998:	f7ff fa08 	bl	8003dac <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 800499c:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <Screen_Init+0x8c>)
 800499e:	885a      	ldrh	r2, [r3, #2]
 80049a0:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <Screen_Init+0x90>)
 80049a2:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 80049a4:	4b16      	ldr	r3, [pc, #88]	@ (8004a00 <Screen_Init+0x8c>)
 80049a6:	889a      	ldrh	r2, [r3, #4]
 80049a8:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <Screen_Init+0x94>)
 80049aa:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s   = twistSettings.onDurationSeconds;
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <Screen_Init+0x98>)
 80049ae:	885a      	ldrh	r2, [r3, #2]
 80049b0:	4b17      	ldr	r3, [pc, #92]	@ (8004a10 <Screen_Init+0x9c>)
 80049b2:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s  = twistSettings.offDurationSeconds;
 80049b4:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <Screen_Init+0x98>)
 80049b6:	889a      	ldrh	r2, [r3, #4]
 80049b8:	4b16      	ldr	r3, [pc, #88]	@ (8004a14 <Screen_Init+0xa0>)
 80049ba:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 80049bc:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <Screen_Init+0xa4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a16      	ldr	r2, [pc, #88]	@ (8004a1c <Screen_Init+0xa8>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <Screen_Init+0xac>)
 80049cc:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_min == 0) edit_countdown_min = 5; // sane default
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <Screen_Init+0xac>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <Screen_Init+0x68>
 80049d6:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <Screen_Init+0xac>)
 80049d8:	2205      	movs	r2, #5
 80049da:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 80049dc:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <Screen_Init+0xb0>)
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <Screen_Init+0x76>
 80049e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <Screen_Init+0xb0>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	801a      	strh	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000604 	.word	0x20000604
 80049f4:	2000002a 	.word	0x2000002a
 80049f8:	20000605 	.word	0x20000605
 80049fc:	20000600 	.word	0x20000600
 8004a00:	2000001c 	.word	0x2000001c
 8004a04:	2000004c 	.word	0x2000004c
 8004a08:	2000004e 	.word	0x2000004e
 8004a0c:	20000024 	.word	0x20000024
 8004a10:	20000050 	.word	0x20000050
 8004a14:	20000052 	.word	0x20000052
 8004a18:	20000584 	.word	0x20000584
 8004a1c:	88888889 	.word	0x88888889
 8004a20:	20000054 	.word	0x20000054
 8004a24:	20000056 	.word	0x20000056

08004a28 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004a2e:	f7ff f9bd 	bl	8003dac <refreshInactivityTimer>

    switch (ui){
 8004a32:	4b8b      	ldr	r3, [pc, #556]	@ (8004c60 <menu_select+0x238>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b13      	cmp	r3, #19
 8004a38:	f200 8109 	bhi.w	8004c4e <menu_select+0x226>
 8004a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <menu_select+0x1c>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004aa9 	.word	0x08004aa9
 8004a50:	08004b17 	.word	0x08004b17
 8004a54:	08004b23 	.word	0x08004b23
 8004a58:	08004b43 	.word	0x08004b43
 8004a5c:	08004b4b 	.word	0x08004b4b
 8004a60:	08004b53 	.word	0x08004b53
 8004a64:	08004b5b 	.word	0x08004b5b
 8004a68:	08004b63 	.word	0x08004b63
 8004a6c:	08004b6f 	.word	0x08004b6f
 8004a70:	08004b77 	.word	0x08004b77
 8004a74:	08004b7f 	.word	0x08004b7f
 8004a78:	08004b8b 	.word	0x08004b8b
 8004a7c:	08004ba9 	.word	0x08004ba9
 8004a80:	08004bb1 	.word	0x08004bb1
 8004a84:	08004bb9 	.word	0x08004bb9
 8004a88:	08004bf9 	.word	0x08004bf9
 8004a8c:	08004c21 	.word	0x08004c21
 8004a90:	08004c29 	.word	0x08004c29
        case UI_WELCOME: ui = UI_DASH; break;
 8004a94:	4b72      	ldr	r3, [pc, #456]	@ (8004c60 <menu_select+0x238>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e0d9      	b.n	8004c50 <menu_select+0x228>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8004a9c:	4b70      	ldr	r3, [pc, #448]	@ (8004c60 <menu_select+0x238>)
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	f7ff f98f 	bl	8003dc4 <goto_menu_top>
 8004aa6:	e0d3      	b.n	8004c50 <menu_select+0x228>

        case UI_MENU:
            switch (menu_idx){
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8004c64 <menu_select+0x23c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d82d      	bhi.n	8004b0c <menu_select+0xe4>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <menu_select+0x90>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	08004add 	.word	0x08004add
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004afd 	.word	0x08004afd
 8004ad0:	08004b05 	.word	0x08004b05
                case 0: ui = UI_MANUAL; break;
 8004ad4:	4b62      	ldr	r3, [pc, #392]	@ (8004c60 <menu_select+0x238>)
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e01b      	b.n	8004b14 <menu_select+0xec>
                case 1: ui = UI_SEMI_AUTO; break;
 8004adc:	4b60      	ldr	r3, [pc, #384]	@ (8004c60 <menu_select+0x238>)
 8004ade:	2204      	movs	r2, #4
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e017      	b.n	8004b14 <menu_select+0xec>
                case 2: ui = UI_TIMER; break;
 8004ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c60 <menu_select+0x238>)
 8004ae6:	2205      	movs	r2, #5
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e013      	b.n	8004b14 <menu_select+0xec>
                case 3: ui = UI_SEARCH; break;
 8004aec:	4b5c      	ldr	r3, [pc, #368]	@ (8004c60 <menu_select+0x238>)
 8004aee:	220a      	movs	r2, #10
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e00f      	b.n	8004b14 <menu_select+0xec>
                case 4: ui = UI_COUNTDOWN; break;
 8004af4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c60 <menu_select+0x238>)
 8004af6:	220d      	movs	r2, #13
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e00b      	b.n	8004b14 <menu_select+0xec>
                case 5: ui = UI_TWIST; break;
 8004afc:	4b58      	ldr	r3, [pc, #352]	@ (8004c60 <menu_select+0x238>)
 8004afe:	2211      	movs	r2, #17
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e007      	b.n	8004b14 <menu_select+0xec>
                case 6: ui = UI_DASH; break;
 8004b04:	4b56      	ldr	r3, [pc, #344]	@ (8004c60 <menu_select+0x238>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e003      	b.n	8004b14 <menu_select+0xec>
                default: ui = UI_DASH; break;
 8004b0c:	4b54      	ldr	r3, [pc, #336]	@ (8004c60 <menu_select+0x238>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	bf00      	nop
            }
            break;
 8004b14:	e09c      	b.n	8004c50 <menu_select+0x228>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004b16:	f7fe f819 	bl	8002b4c <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <menu_select+0x240>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
            break;
 8004b20:	e096      	b.n	8004c50 <menu_select+0x228>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 8004b22:	4b52      	ldr	r3, [pc, #328]	@ (8004c6c <menu_select+0x244>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f083 0301 	eor.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <menu_select+0x10e>
 8004b30:	f7ff fc72 	bl	8004418 <enable_semi_auto>
 8004b34:	e001      	b.n	8004b3a <menu_select+0x112>
            else disable_semi_auto();
 8004b36:	f7ff fc7d 	bl	8004434 <disable_semi_auto>
            ui = UI_DASH;
 8004b3a:	4b49      	ldr	r3, [pc, #292]	@ (8004c60 <menu_select+0x238>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
            break;
 8004b40:	e086      	b.n	8004c50 <menu_select+0x228>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <menu_select+0x238>)
 8004b44:	2206      	movs	r2, #6
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e082      	b.n	8004c50 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004b4a:	4b45      	ldr	r3, [pc, #276]	@ (8004c60 <menu_select+0x238>)
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e07e      	b.n	8004c50 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8004b52:	4b43      	ldr	r3, [pc, #268]	@ (8004c60 <menu_select+0x238>)
 8004b54:	2208      	movs	r2, #8
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e07a      	b.n	8004c50 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <menu_select+0x238>)
 8004b5c:	2209      	movs	r2, #9
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e076      	b.n	8004c50 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 8004b62:	f7ff fc73 	bl	800444c <apply_timer_settings>
            ui = UI_TIMER;
 8004b66:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <menu_select+0x238>)
 8004b68:	2205      	movs	r2, #5
 8004b6a:	701a      	strb	r2, [r3, #0]
            break;
 8004b6c:	e070      	b.n	8004c50 <menu_select+0x228>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c60 <menu_select+0x238>)
 8004b70:	220b      	movs	r2, #11
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e06c      	b.n	8004c50 <menu_select+0x228>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 8004b76:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <menu_select+0x238>)
 8004b78:	220c      	movs	r2, #12
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e068      	b.n	8004c50 <menu_select+0x228>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8004b7e:	f7ff fc0f 	bl	80043a0 <apply_search_settings>
            ui = UI_SEARCH; break;
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <menu_select+0x238>)
 8004b84:	220a      	movs	r2, #10
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e062      	b.n	8004c50 <menu_select+0x228>

        case UI_COUNTDOWN:
            if (countdownActive) {
 8004b8a:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <menu_select+0x248>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <menu_select+0x178>
                ModelHandle_StopCountdown();
 8004b94:	f7fe f838 	bl	8002c08 <ModelHandle_StopCountdown>
                screenNeedsRefresh = true;
 8004b98:	4b33      	ldr	r3, [pc, #204]	@ (8004c68 <menu_select+0x240>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8004b9e:	e057      	b.n	8004c50 <menu_select+0x228>
                ui = UI_COUNTDOWN_EDIT_MIN;
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c60 <menu_select+0x238>)
 8004ba2:	220e      	movs	r2, #14
 8004ba4:	701a      	strb	r2, [r3, #0]
            break;
 8004ba6:	e053      	b.n	8004c50 <menu_select+0x228>


        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN_EDIT_REP;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <menu_select+0x238>)
 8004baa:	220f      	movs	r2, #15
 8004bac:	701a      	strb	r2, [r3, #0]
            break;
 8004bae:	e04f      	b.n	8004c50 <menu_select+0x228>

        case UI_COUNTDOWN_EDIT_REP:
            // after repeats, go to enable/edit screen
            ui = UI_COUNTDOWN_TOGGLE;
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <menu_select+0x238>)
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	701a      	strb	r2, [r3, #0]
            break;
 8004bb6:	e04b      	b.n	8004c50 <menu_select+0x228>

        case UI_COUNTDOWN_TOGGLE:
            // Enable or Edit based on menu index
            // For simplicity, SELECT always means "Enable"
            {
                uint32_t seconds = (uint32_t)edit_countdown_min * 60u;
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c74 <menu_select+0x24c>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	607b      	str	r3, [r7, #4]
                if (seconds == 0) seconds = 60;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <menu_select+0x1aa>
 8004bce:	233c      	movs	r3, #60	@ 0x3c
 8004bd0:	607b      	str	r3, [r7, #4]
                if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004bd2:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <menu_select+0x250>)
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <menu_select+0x1b8>
 8004bda:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <menu_select+0x250>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	801a      	strh	r2, [r3, #0]
                apply_countdown_settings();
 8004be0:	f7ff fc06 	bl	80043f0 <apply_countdown_settings>
                ModelHandle_StartCountdown(seconds, (uint16_t)edit_countdown_rep);
 8004be4:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <menu_select+0x250>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe f852 	bl	8002c94 <ModelHandle_StartCountdown>
                ui = UI_COUNTDOWN;
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <menu_select+0x238>)
 8004bf2:	220d      	movs	r2, #13
 8004bf4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004bf6:	e02b      	b.n	8004c50 <menu_select+0x228>


        case UI_TWIST:
            // SELECT toggles enable/stop; UP/DOWN will switch to edit states
            if (twistSettings.twistActive) {
 8004bf8:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <menu_select+0x254>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <menu_select+0x1de>
                ModelHandle_StopTwist();
 8004c00:	f7fe f99a 	bl	8002f38 <ModelHandle_StopTwist>
 8004c04:	e008      	b.n	8004c18 <menu_select+0x1f0>
            } else {
                // use current edit buffers (or the applied values) to start
                ModelHandle_StartTwist(edit_twist_on_s, edit_twist_off_s);
 8004c06:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <menu_select+0x258>)
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c84 <menu_select+0x25c>)
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fe f938 	bl	8002e88 <ModelHandle_StartTwist>
            }
            screenNeedsRefresh = true;
 8004c18:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <menu_select+0x240>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
            break;
 8004c1e:	e017      	b.n	8004c50 <menu_select+0x228>

        case UI_TWIST_EDIT_ON:      ui = UI_TWIST_EDIT_OFF; break;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <menu_select+0x238>)
 8004c22:	2213      	movs	r2, #19
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e013      	b.n	8004c50 <menu_select+0x228>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();   // writes into twistSettings
 8004c28:	f7ff fbce 	bl	80043c8 <apply_twist_settings>
            // If active, apply live (optional, keeps running with new values)
            if (twistSettings.twistActive) {
 8004c2c:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <menu_select+0x254>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <menu_select+0x21e>
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <menu_select+0x254>)
 8004c36:	885b      	ldrh	r3, [r3, #2]
 8004c38:	461a      	mov	r2, r3
                                       twistSettings.offDurationSeconds);
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <menu_select+0x254>)
 8004c3c:	889b      	ldrh	r3, [r3, #4]
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe f921 	bl	8002e88 <ModelHandle_StartTwist>
            }
            ui = UI_TWIST; break;
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <menu_select+0x238>)
 8004c48:	2211      	movs	r2, #17
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e000      	b.n	8004c50 <menu_select+0x228>


        default: break;
 8004c4e:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <menu_select+0x240>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000604 	.word	0x20000604
 8004c64:	20000614 	.word	0x20000614
 8004c68:	20000605 	.word	0x20000605
 8004c6c:	20000610 	.word	0x20000610
 8004c70:	20000572 	.word	0x20000572
 8004c74:	20000054 	.word	0x20000054
 8004c78:	20000056 	.word	0x20000056
 8004c7c:	20000024 	.word	0x20000024
 8004c80:	20000050 	.word	0x20000050
 8004c84:	20000052 	.word	0x20000052

08004c88 <menu_reset>:

static void menu_reset(void){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004c8c:	f7ff f88e 	bl	8003dac <refreshInactivityTimer>

    switch (ui) {
 8004c90:	4b29      	ldr	r3, [pc, #164]	@ (8004d38 <menu_reset+0xb0>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	2b12      	cmp	r3, #18
 8004c98:	d844      	bhi.n	8004d24 <menu_reset+0x9c>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <menu_reset+0x18>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004cf5 	.word	0x08004cf5
 8004ca8:	08004ced 	.word	0x08004ced
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004d05 	.word	0x08004d05
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004d0d 	.word	0x08004d0d
 8004ccc:	08004d0d 	.word	0x08004d0d
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004ced 	.word	0x08004ced
 8004ce4:	08004d1d 	.word	0x08004d1d
 8004ce8:	08004d1d 	.word	0x08004d1d
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 8004cec:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <menu_reset+0xb0>)
 8004cee:	2202      	movs	r2, #2
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e01b      	b.n	8004d2c <menu_reset+0xa4>
        case UI_MENU: ui = UI_DASH; break;
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <menu_reset+0xb0>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e017      	b.n	8004d2c <menu_reset+0xa4>
        case UI_DASH: ui = UI_WELCOME; break;
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <menu_reset+0xb0>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e013      	b.n	8004d2c <menu_reset+0xa4>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <menu_reset+0xb0>)
 8004d06:	2205      	movs	r2, #5
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e00f      	b.n	8004d2c <menu_reset+0xa4>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <menu_reset+0xb0>)
 8004d0e:	220a      	movs	r2, #10
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e00b      	b.n	8004d2c <menu_reset+0xa4>
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP: ui = UI_COUNTDOWN; break;  // NEW: back from repeats editor
 8004d14:	4b08      	ldr	r3, [pc, #32]	@ (8004d38 <menu_reset+0xb0>)
 8004d16:	220d      	movs	r2, #13
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e007      	b.n	8004d2c <menu_reset+0xa4>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <menu_reset+0xb0>)
 8004d1e:	2211      	movs	r2, #17
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e003      	b.n	8004d2c <menu_reset+0xa4>
        default: ui = UI_MENU; break;
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <menu_reset+0xb0>)
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <menu_reset+0xb4>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000604 	.word	0x20000604
 8004d3c:	20000605 	.word	0x20000605

08004d40 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_NONE) return;
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8288 	beq.w	8005262 <Screen_HandleButton+0x522>

    /* Quick RESET → manual toggle (your existing behavior) */
    if (b == BTN_RESET) {
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d102      	bne.n	8004d5e <Screen_HandleButton+0x1e>
        ModelHandle_ToggleManual();
 8004d58:	f7fd fef8 	bl	8002b4c <ModelHandle_ToggleManual>
        return;
 8004d5c:	e282      	b.n	8005264 <Screen_HandleButton+0x524>
    }

    /* =======================
       UP key
       ======================= */
    if (b == BTN_UP) {
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	f040 80bf 	bne.w	8004ee4 <Screen_HandleButton+0x1a4>
        switch (ui) {
 8004d66:	4b9e      	ldr	r3, [pc, #632]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	3b02      	subs	r3, #2
 8004d6c:	2b11      	cmp	r3, #17
 8004d6e:	f200 80a6 	bhi.w	8004ebe <Screen_HandleButton+0x17e>
 8004d72:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <Screen_HandleButton+0x38>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004ebf 	.word	0x08004ebf
 8004d80:	08004ebf 	.word	0x08004ebf
 8004d84:	08004ebf 	.word	0x08004ebf
 8004d88:	08004dd5 	.word	0x08004dd5
 8004d8c:	08004deb 	.word	0x08004deb
 8004d90:	08004e01 	.word	0x08004e01
 8004d94:	08004e17 	.word	0x08004e17
 8004d98:	08004e2d 	.word	0x08004e2d
 8004d9c:	08004e3b 	.word	0x08004e3b
 8004da0:	08004e49 	.word	0x08004e49
 8004da4:	08004ebf 	.word	0x08004ebf
 8004da8:	08004e57 	.word	0x08004e57
 8004dac:	08004e65 	.word	0x08004e65
 8004db0:	08004e73 	.word	0x08004e73
 8004db4:	08004e81 	.word	0x08004e81
 8004db8:	08004e8f 	.word	0x08004e8f
 8004dbc:	08004ea7 	.word	0x08004ea7
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004dc0:	4b88      	ldr	r3, [pc, #544]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd7c      	ble.n	8004ec2 <Screen_HandleButton+0x182>
 8004dc8:	4b86      	ldr	r3, [pc, #536]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4a85      	ldr	r2, [pc, #532]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e076      	b.n	8004ec2 <Screen_HandleButton+0x182>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004dd4:	4b84      	ldr	r3, [pc, #528]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b16      	cmp	r3, #22
 8004dda:	d874      	bhi.n	8004ec6 <Screen_HandleButton+0x186>
 8004ddc:	4b82      	ldr	r3, [pc, #520]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b80      	ldr	r3, [pc, #512]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e06d      	b.n	8004ec6 <Screen_HandleButton+0x186>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004dea:	4b80      	ldr	r3, [pc, #512]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b3a      	cmp	r3, #58	@ 0x3a
 8004df0:	d86b      	bhi.n	8004eca <Screen_HandleButton+0x18a>
 8004df2:	4b7e      	ldr	r3, [pc, #504]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e064      	b.n	8004eca <Screen_HandleButton+0x18a>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004e00:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b16      	cmp	r3, #22
 8004e06:	d862      	bhi.n	8004ece <Screen_HandleButton+0x18e>
 8004e08:	4b79      	ldr	r3, [pc, #484]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b77      	ldr	r3, [pc, #476]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e05b      	b.n	8004ece <Screen_HandleButton+0x18e>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004e16:	4b77      	ldr	r3, [pc, #476]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004e1c:	d859      	bhi.n	8004ed2 <Screen_HandleButton+0x192>
 8004e1e:	4b75      	ldr	r3, [pc, #468]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4b73      	ldr	r3, [pc, #460]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e052      	b.n	8004ed2 <Screen_HandleButton+0x192>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 8004e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004e2e:	220b      	movs	r2, #11
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	4b71      	ldr	r3, [pc, #452]	@ (8004ff8 <Screen_HandleButton+0x2b8>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e214      	b.n	8005264 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   edit_search_gap_s += 5;  break;
 8004e3a:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <Screen_HandleButton+0x2bc>)
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	3305      	adds	r3, #5
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	4b6e      	ldr	r3, [pc, #440]	@ (8004ffc <Screen_HandleButton+0x2bc>)
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e049      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_SEARCH_EDIT_DRY:   edit_search_dry_s += 1;  break;
 8004e48:	4b6d      	ldr	r3, [pc, #436]	@ (8005000 <Screen_HandleButton+0x2c0>)
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	4b6b      	ldr	r3, [pc, #428]	@ (8005000 <Screen_HandleButton+0x2c0>)
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e042      	b.n	8004edc <Screen_HandleButton+0x19c>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 8004e56:	4b6b      	ldr	r3, [pc, #428]	@ (8005004 <Screen_HandleButton+0x2c4>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	4b69      	ldr	r3, [pc, #420]	@ (8005004 <Screen_HandleButton+0x2c4>)
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e03b      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_EDIT_REP: edit_countdown_rep++; break;
 8004e64:	4b68      	ldr	r3, [pc, #416]	@ (8005008 <Screen_HandleButton+0x2c8>)
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <Screen_HandleButton+0x2c8>)
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	e034      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_TOGGLE:   ui = UI_COUNTDOWN_EDIT_MIN; screenNeedsRefresh = true; return;
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004e74:	220e      	movs	r2, #14
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff8 <Screen_HandleButton+0x2b8>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e1f1      	b.n	8005264 <Screen_HandleButton+0x524>

            /* Twist edits */
            case UI_TWIST:             ui = UI_TWIST_EDIT_ON; screenNeedsRefresh = true; return;
 8004e80:	4b57      	ldr	r3, [pc, #348]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004e82:	2212      	movs	r2, #18
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff8 <Screen_HandleButton+0x2b8>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e1ea      	b.n	8005264 <Screen_HandleButton+0x524>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800500c <Screen_HandleButton+0x2cc>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004e96:	d21e      	bcs.n	8004ed6 <Screen_HandleButton+0x196>
 8004e98:	4b5c      	ldr	r3, [pc, #368]	@ (800500c <Screen_HandleButton+0x2cc>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800500c <Screen_HandleButton+0x2cc>)
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e017      	b.n	8004ed6 <Screen_HandleButton+0x196>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8005010 <Screen_HandleButton+0x2d0>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004eae:	d214      	bcs.n	8004eda <Screen_HandleButton+0x19a>
 8004eb0:	4b57      	ldr	r3, [pc, #348]	@ (8005010 <Screen_HandleButton+0x2d0>)
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	4b55      	ldr	r3, [pc, #340]	@ (8005010 <Screen_HandleButton+0x2d0>)
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e00d      	b.n	8004eda <Screen_HandleButton+0x19a>

            default: break;
 8004ebe:	bf00      	nop
 8004ec0:	e00c      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004ec2:	bf00      	nop
 8004ec4:	e00a      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004ec6:	bf00      	nop
 8004ec8:	e008      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004eca:	bf00      	nop
 8004ecc:	e006      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004ece:	bf00      	nop
 8004ed0:	e004      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004eda:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8004edc:	4b46      	ldr	r3, [pc, #280]	@ (8004ff8 <Screen_HandleButton+0x2b8>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
        return;
 8004ee2:	e1bf      	b.n	8005264 <Screen_HandleButton+0x524>
    }

    /* =======================
       DOWN key
       ======================= */
    if (b == BTN_DOWN) {
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	f040 80e6 	bne.w	80050b8 <Screen_HandleButton+0x378>
        switch (ui) {
 8004eec:	4b3c      	ldr	r3, [pc, #240]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	2b11      	cmp	r3, #17
 8004ef4:	f200 80c5 	bhi.w	8005082 <Screen_HandleButton+0x342>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <Screen_HandleButton+0x1c0>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f49 	.word	0x08004f49
 8004f04:	08005083 	.word	0x08005083
 8004f08:	08005083 	.word	0x08005083
 8004f0c:	08005083 	.word	0x08005083
 8004f10:	08004f5f 	.word	0x08004f5f
 8004f14:	08004f77 	.word	0x08004f77
 8004f18:	08004f8f 	.word	0x08004f8f
 8004f1c:	08004fa5 	.word	0x08004fa5
 8004f20:	08004fbb 	.word	0x08004fbb
 8004f24:	08004fc9 	.word	0x08004fc9
 8004f28:	08005015 	.word	0x08005015
 8004f2c:	08005083 	.word	0x08005083
 8004f30:	0800502b 	.word	0x0800502b
 8004f34:	08005041 	.word	0x08005041
 8004f38:	08005083 	.word	0x08005083
 8004f3c:	08005083 	.word	0x08005083
 8004f40:	08005057 	.word	0x08005057
 8004f44:	0800506d 	.word	0x0800506d
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8004f48:	4b26      	ldr	r3, [pc, #152]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	f300 809a 	bgt.w	8005086 <Screen_HandleButton+0x346>
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <Screen_HandleButton+0x2a4>)
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e093      	b.n	8005086 <Screen_HandleButton+0x346>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 8004f5e:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8091 	beq.w	800508a <Screen_HandleButton+0x34a>
 8004f68:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <Screen_HandleButton+0x2a8>)
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e089      	b.n	800508a <Screen_HandleButton+0x34a>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 8004f76:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8087 	beq.w	800508e <Screen_HandleButton+0x34e>
 8004f80:	4b1a      	ldr	r3, [pc, #104]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	4b18      	ldr	r3, [pc, #96]	@ (8004fec <Screen_HandleButton+0x2ac>)
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e07f      	b.n	800508e <Screen_HandleButton+0x34e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004f8e:	4b18      	ldr	r3, [pc, #96]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d07d      	beq.n	8005092 <Screen_HandleButton+0x352>
 8004f96:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <Screen_HandleButton+0x2b0>)
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e076      	b.n	8005092 <Screen_HandleButton+0x352>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004fa4:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d074      	beq.n	8005096 <Screen_HandleButton+0x356>
 8004fac:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff4 <Screen_HandleButton+0x2b4>)
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e06d      	b.n	8005096 <Screen_HandleButton+0x356>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 8004fba:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <Screen_HandleButton+0x2a0>)
 8004fbc:	220b      	movs	r2, #11
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <Screen_HandleButton+0x2b8>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e14d      	b.n	8005264 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <Screen_HandleButton+0x2bc>)
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d964      	bls.n	800509a <Screen_HandleButton+0x35a>
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <Screen_HandleButton+0x2bc>)
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	3b05      	subs	r3, #5
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <Screen_HandleButton+0x2bc>)
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e05d      	b.n	800509a <Screen_HandleButton+0x35a>
 8004fde:	bf00      	nop
 8004fe0:	20000604 	.word	0x20000604
 8004fe4:	20000614 	.word	0x20000614
 8004fe8:	20000048 	.word	0x20000048
 8004fec:	20000049 	.word	0x20000049
 8004ff0:	2000004a 	.word	0x2000004a
 8004ff4:	2000004b 	.word	0x2000004b
 8004ff8:	20000605 	.word	0x20000605
 8004ffc:	2000004c 	.word	0x2000004c
 8005000:	2000004e 	.word	0x2000004e
 8005004:	20000054 	.word	0x20000054
 8005008:	20000056 	.word	0x20000056
 800500c:	20000050 	.word	0x20000050
 8005010:	20000052 	.word	0x20000052
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8005014:	4b95      	ldr	r3, [pc, #596]	@ (800526c <Screen_HandleButton+0x52c>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d940      	bls.n	800509e <Screen_HandleButton+0x35e>
 800501c:	4b93      	ldr	r3, [pc, #588]	@ (800526c <Screen_HandleButton+0x52c>)
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	4b91      	ldr	r3, [pc, #580]	@ (800526c <Screen_HandleButton+0x52c>)
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e039      	b.n	800509e <Screen_HandleButton+0x35e>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 800502a:	4b91      	ldr	r3, [pc, #580]	@ (8005270 <Screen_HandleButton+0x530>)
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d937      	bls.n	80050a2 <Screen_HandleButton+0x362>
 8005032:	4b8f      	ldr	r3, [pc, #572]	@ (8005270 <Screen_HandleButton+0x530>)
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	4b8d      	ldr	r3, [pc, #564]	@ (8005270 <Screen_HandleButton+0x530>)
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	e030      	b.n	80050a2 <Screen_HandleButton+0x362>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8005040:	4b8c      	ldr	r3, [pc, #560]	@ (8005274 <Screen_HandleButton+0x534>)
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d92e      	bls.n	80050a6 <Screen_HandleButton+0x366>
 8005048:	4b8a      	ldr	r3, [pc, #552]	@ (8005274 <Screen_HandleButton+0x534>)
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	4b88      	ldr	r3, [pc, #544]	@ (8005274 <Screen_HandleButton+0x534>)
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e027      	b.n	80050a6 <Screen_HandleButton+0x366>

            /* Twist edits */
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 8005056:	4b88      	ldr	r3, [pc, #544]	@ (8005278 <Screen_HandleButton+0x538>)
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d925      	bls.n	80050aa <Screen_HandleButton+0x36a>
 800505e:	4b86      	ldr	r3, [pc, #536]	@ (8005278 <Screen_HandleButton+0x538>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	4b84      	ldr	r3, [pc, #528]	@ (8005278 <Screen_HandleButton+0x538>)
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e01e      	b.n	80050aa <Screen_HandleButton+0x36a>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800506c:	4b83      	ldr	r3, [pc, #524]	@ (800527c <Screen_HandleButton+0x53c>)
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d91c      	bls.n	80050ae <Screen_HandleButton+0x36e>
 8005074:	4b81      	ldr	r3, [pc, #516]	@ (800527c <Screen_HandleButton+0x53c>)
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	4b7f      	ldr	r3, [pc, #508]	@ (800527c <Screen_HandleButton+0x53c>)
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e015      	b.n	80050ae <Screen_HandleButton+0x36e>

            default: break;
 8005082:	bf00      	nop
 8005084:	e014      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8005086:	bf00      	nop
 8005088:	e012      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 800508a:	bf00      	nop
 800508c:	e010      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 800508e:	bf00      	nop
 8005090:	e00e      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8005092:	bf00      	nop
 8005094:	e00c      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8005096:	bf00      	nop
 8005098:	e00a      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 800509a:	bf00      	nop
 800509c:	e008      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 800509e:	bf00      	nop
 80050a0:	e006      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 80050ae:	bf00      	nop
        }
        screenNeedsRefresh = true;
 80050b0:	4b73      	ldr	r3, [pc, #460]	@ (8005280 <Screen_HandleButton+0x540>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
        return;
 80050b6:	e0d5      	b.n	8005264 <Screen_HandleButton+0x524>
    }

    /* =======================
       SELECT key
       ======================= */
    if (b == BTN_SELECT) {
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f040 80d2 	bne.w	8005264 <Screen_HandleButton+0x524>
        switch (ui) {
 80050c0:	4b70      	ldr	r3, [pc, #448]	@ (8005284 <Screen_HandleButton+0x544>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	3b0a      	subs	r3, #10
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	f200 80c8 	bhi.w	800525c <Screen_HandleButton+0x51c>
 80050cc:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <Screen_HandleButton+0x394>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	0800513f 	.word	0x0800513f
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	0800525d 	.word	0x0800525d
 80050e4:	0800525d 	.word	0x0800525d
 80050e8:	0800525d 	.word	0x0800525d
 80050ec:	0800525d 	.word	0x0800525d
 80050f0:	080051a1 	.word	0x080051a1
 80050f4:	080051e3 	.word	0x080051e3
 80050f8:	080051f1 	.word	0x080051f1

            /* ---- Search main: Enable/Stop ---- */
            case UI_SEARCH:
                if (searchSettings.searchActive) {
 80050fc:	4b62      	ldr	r3, [pc, #392]	@ (8005288 <Screen_HandleButton+0x548>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <Screen_HandleButton+0x3ca>
                    ModelHandle_StopSearch();
 8005104:	f7fe f84c 	bl	80031a0 <ModelHandle_StopSearch>
 8005108:	e015      	b.n	8005136 <Screen_HandleButton+0x3f6>
                } else {
                    uint16_t gap_s   = (uint16_t)edit_search_gap_s;  if (gap_s   == 0) gap_s   = 5;
 800510a:	4b60      	ldr	r3, [pc, #384]	@ (800528c <Screen_HandleButton+0x54c>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	81fb      	strh	r3, [r7, #14]
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <Screen_HandleButton+0x3da>
 8005116:	2305      	movs	r3, #5
 8005118:	81fb      	strh	r3, [r7, #14]
                    uint16_t probe_s = (uint16_t)edit_search_dry_s;  if (probe_s == 0) probe_s = 3;
 800511a:	4b54      	ldr	r3, [pc, #336]	@ (800526c <Screen_HandleButton+0x52c>)
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	81bb      	strh	r3, [r7, #12]
 8005120:	89bb      	ldrh	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <Screen_HandleButton+0x3ea>
 8005126:	2303      	movs	r3, #3
 8005128:	81bb      	strh	r3, [r7, #12]
                    ModelHandle_StartSearch(gap_s, probe_s);
 800512a:	89fb      	ldrh	r3, [r7, #14]
 800512c:	89ba      	ldrh	r2, [r7, #12]
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd ffd5 	bl	80030e0 <ModelHandle_StartSearch>
                }
                screenNeedsRefresh = true;
 8005136:	4b52      	ldr	r3, [pc, #328]	@ (8005280 <Screen_HandleButton+0x540>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
                return;
 800513c:	e092      	b.n	8005264 <Screen_HandleButton+0x524>

            /* ---- Search edit flow ---- */
            case UI_SEARCH_EDIT_GAP:
                ui = UI_SEARCH_EDIT_DRY;
 800513e:	4b51      	ldr	r3, [pc, #324]	@ (8005284 <Screen_HandleButton+0x544>)
 8005140:	220c      	movs	r2, #12
 8005142:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005144:	4b4e      	ldr	r3, [pc, #312]	@ (8005280 <Screen_HandleButton+0x540>)
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
                return;
 800514a:	e08b      	b.n	8005264 <Screen_HandleButton+0x524>

            case UI_SEARCH_EDIT_DRY:
                if (edit_search_gap_s < 1) edit_search_gap_s = 1;
 800514c:	4b4f      	ldr	r3, [pc, #316]	@ (800528c <Screen_HandleButton+0x54c>)
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <Screen_HandleButton+0x41a>
 8005154:	4b4d      	ldr	r3, [pc, #308]	@ (800528c <Screen_HandleButton+0x54c>)
 8005156:	2201      	movs	r2, #1
 8005158:	801a      	strh	r2, [r3, #0]
                if (edit_search_dry_s < 1) edit_search_dry_s = 1;
 800515a:	4b44      	ldr	r3, [pc, #272]	@ (800526c <Screen_HandleButton+0x52c>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <Screen_HandleButton+0x428>
 8005162:	4b42      	ldr	r3, [pc, #264]	@ (800526c <Screen_HandleButton+0x52c>)
 8005164:	2201      	movs	r2, #1
 8005166:	801a      	strh	r2, [r3, #0]

                searchSettings.testingGapSeconds = (uint16_t)edit_search_gap_s;
 8005168:	4b48      	ldr	r3, [pc, #288]	@ (800528c <Screen_HandleButton+0x54c>)
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	4b46      	ldr	r3, [pc, #280]	@ (8005288 <Screen_HandleButton+0x548>)
 800516e:	805a      	strh	r2, [r3, #2]
                searchSettings.dryRunTimeSeconds = (uint16_t)edit_search_dry_s;
 8005170:	4b3e      	ldr	r3, [pc, #248]	@ (800526c <Screen_HandleButton+0x52c>)
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	4b44      	ldr	r3, [pc, #272]	@ (8005288 <Screen_HandleButton+0x548>)
 8005176:	809a      	strh	r2, [r3, #4]

                if (searchSettings.searchActive) {
 8005178:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <Screen_HandleButton+0x548>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <Screen_HandleButton+0x452>
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 8005180:	4b41      	ldr	r3, [pc, #260]	@ (8005288 <Screen_HandleButton+0x548>)
 8005182:	885b      	ldrh	r3, [r3, #2]
 8005184:	461a      	mov	r2, r3
                                            (uint16_t)searchSettings.dryRunTimeSeconds);
 8005186:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <Screen_HandleButton+0x548>)
 8005188:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fd ffa7 	bl	80030e0 <ModelHandle_StartSearch>
                }
                ui = UI_SEARCH;
 8005192:	4b3c      	ldr	r3, [pc, #240]	@ (8005284 <Screen_HandleButton+0x544>)
 8005194:	220a      	movs	r2, #10
 8005196:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <Screen_HandleButton+0x540>)
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
                return;
 800519e:	e061      	b.n	8005264 <Screen_HandleButton+0x524>

            /* ---- Twist main: Enable/Stop ---- */
            case UI_TWIST:
                if (twistSettings.twistActive) {
 80051a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <Screen_HandleButton+0x550>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <Screen_HandleButton+0x46e>
                    ModelHandle_StopTwist();
 80051a8:	f7fd fec6 	bl	8002f38 <ModelHandle_StopTwist>
 80051ac:	e015      	b.n	80051da <Screen_HandleButton+0x49a>
                } else {
                    uint16_t on_s  = (uint16_t)edit_twist_on_s;  if (on_s  == 0) on_s  = 1;
 80051ae:	4b32      	ldr	r3, [pc, #200]	@ (8005278 <Screen_HandleButton+0x538>)
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	817b      	strh	r3, [r7, #10]
 80051b4:	897b      	ldrh	r3, [r7, #10]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <Screen_HandleButton+0x47e>
 80051ba:	2301      	movs	r3, #1
 80051bc:	817b      	strh	r3, [r7, #10]
                    uint16_t off_s = (uint16_t)edit_twist_off_s; if (off_s == 0) off_s = 1;
 80051be:	4b2f      	ldr	r3, [pc, #188]	@ (800527c <Screen_HandleButton+0x53c>)
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	813b      	strh	r3, [r7, #8]
 80051c4:	893b      	ldrh	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <Screen_HandleButton+0x48e>
 80051ca:	2301      	movs	r3, #1
 80051cc:	813b      	strh	r3, [r7, #8]
                    ModelHandle_StartTwist(on_s, off_s);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	893a      	ldrh	r2, [r7, #8]
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fd fe57 	bl	8002e88 <ModelHandle_StartTwist>
                }
                screenNeedsRefresh = true;
 80051da:	4b29      	ldr	r3, [pc, #164]	@ (8005280 <Screen_HandleButton+0x540>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
                return;
 80051e0:	e040      	b.n	8005264 <Screen_HandleButton+0x524>

            /* ---- Twist edit ---- */
            case UI_TWIST_EDIT_ON:
                ui = UI_TWIST_EDIT_OFF;
 80051e2:	4b28      	ldr	r3, [pc, #160]	@ (8005284 <Screen_HandleButton+0x544>)
 80051e4:	2213      	movs	r2, #19
 80051e6:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 80051e8:	4b25      	ldr	r3, [pc, #148]	@ (8005280 <Screen_HandleButton+0x540>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
                return;
 80051ee:	e039      	b.n	8005264 <Screen_HandleButton+0x524>

            case UI_TWIST_EDIT_OFF:
                if (edit_twist_off_s < 1)   edit_twist_off_s = 1;
 80051f0:	4b22      	ldr	r3, [pc, #136]	@ (800527c <Screen_HandleButton+0x53c>)
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <Screen_HandleButton+0x4be>
 80051f8:	4b20      	ldr	r3, [pc, #128]	@ (800527c <Screen_HandleButton+0x53c>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	801a      	strh	r2, [r3, #0]
                if (edit_twist_off_s > 600) edit_twist_off_s = 600;
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <Screen_HandleButton+0x53c>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005206:	d903      	bls.n	8005210 <Screen_HandleButton+0x4d0>
 8005208:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <Screen_HandleButton+0x53c>)
 800520a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800520e:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  < 1)   edit_twist_on_s  = 1;
 8005210:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <Screen_HandleButton+0x538>)
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <Screen_HandleButton+0x4de>
 8005218:	4b17      	ldr	r3, [pc, #92]	@ (8005278 <Screen_HandleButton+0x538>)
 800521a:	2201      	movs	r2, #1
 800521c:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  > 600) edit_twist_on_s  = 600;
 800521e:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <Screen_HandleButton+0x538>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005226:	d903      	bls.n	8005230 <Screen_HandleButton+0x4f0>
 8005228:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <Screen_HandleButton+0x538>)
 800522a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800522e:	801a      	strh	r2, [r3, #0]

                apply_twist_settings(); // copies edit_* to twistSettings
 8005230:	f7ff f8ca 	bl	80043c8 <apply_twist_settings>

                if (twistSettings.twistActive) {
 8005234:	4b16      	ldr	r3, [pc, #88]	@ (8005290 <Screen_HandleButton+0x550>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <Screen_HandleButton+0x50e>
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 800523c:	4b14      	ldr	r3, [pc, #80]	@ (8005290 <Screen_HandleButton+0x550>)
 800523e:	885b      	ldrh	r3, [r3, #2]
 8005240:	461a      	mov	r2, r3
                                           (uint16_t)twistSettings.offDurationSeconds);
 8005242:	4b13      	ldr	r3, [pc, #76]	@ (8005290 <Screen_HandleButton+0x550>)
 8005244:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7fd fe1d 	bl	8002e88 <ModelHandle_StartTwist>
                }
                ui = UI_TWIST;
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <Screen_HandleButton+0x544>)
 8005250:	2211      	movs	r2, #17
 8005252:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005254:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <Screen_HandleButton+0x540>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
                return;
 800525a:	e003      	b.n	8005264 <Screen_HandleButton+0x524>

            /* ---- Others: keep your existing flow ---- */
            default:
                menu_select();
 800525c:	f7ff fbe4 	bl	8004a28 <menu_select>
                return;
 8005260:	e000      	b.n	8005264 <Screen_HandleButton+0x524>
    if (b == BTN_NONE) return;
 8005262:	bf00      	nop
        }
    }
}
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	2000004e 	.word	0x2000004e
 8005270:	20000054 	.word	0x20000054
 8005274:	20000056 	.word	0x20000056
 8005278:	20000050 	.word	0x20000050
 800527c:	20000052 	.word	0x20000052
 8005280:	20000605 	.word	0x20000605
 8005284:	20000604 	.word	0x20000604
 8005288:	2000001c 	.word	0x2000001c
 800528c:	2000004c 	.word	0x2000004c
 8005290:	20000024 	.word	0x20000024

08005294 <Screen_HandleSwitches>:

/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}    // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e083      	b.n	80053a8 <Screen_HandleSwitches+0x114>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 80052a0:	4946      	ldr	r1, [pc, #280]	@ (80053bc <Screen_HandleSwitches+0x128>)
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4942      	ldr	r1, [pc, #264]	@ (80053bc <Screen_HandleSwitches+0x128>)
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3304      	adds	r3, #4
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	f001 fcec 	bl	8006ca0 <HAL_GPIO_ReadPin>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	72fb      	strb	r3, [r7, #11]

        if (pressed && prev[i]) {
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d012      	beq.n	8005300 <Screen_HandleSwitches+0x6c>
 80052da:	4a39      	ldr	r2, [pc, #228]	@ (80053c0 <Screen_HandleSwitches+0x12c>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 80052e6:	4a36      	ldr	r2, [pc, #216]	@ (80053c0 <Screen_HandleSwitches+0x12c>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 80052f0:	f000 fc3e 	bl	8005b70 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4933      	ldr	r1, [pc, #204]	@ (80053c4 <Screen_HandleSwitches+0x130>)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80052fe:	e050      	b.n	80053a2 <Screen_HandleSwitches+0x10e>
        }
        else if (!pressed && !prev[i]) {
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f083 0301 	eor.w	r3, r3, #1
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04a      	beq.n	80053a2 <Screen_HandleSwitches+0x10e>
 800530c:	4a2c      	ldr	r2, [pc, #176]	@ (80053c0 <Screen_HandleSwitches+0x12c>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d041      	beq.n	80053a2 <Screen_HandleSwitches+0x10e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 800531e:	f000 fc27 	bl	8005b70 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	4927      	ldr	r1, [pc, #156]	@ (80053c4 <Screen_HandleSwitches+0x130>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 8005330:	4a23      	ldr	r2, [pc, #140]	@ (80053c0 <Screen_HandleSwitches+0x12c>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]

            if (i == 0 && pressDuration > 2000) {
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <Screen_HandleSwitches+0xba>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005346:	d902      	bls.n	800534e <Screen_HandleSwitches+0xba>
                ModelHandle_ManualLongPress();
 8005348:	f7fd fc48 	bl	8002bdc <ModelHandle_ManualLongPress>
 800534c:	e029      	b.n	80053a2 <Screen_HandleSwitches+0x10e>
            } else if (i == 3 && pressDuration > 2000) {
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d106      	bne.n	8005362 <Screen_HandleSwitches+0xce>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800535a:	d902      	bls.n	8005362 <Screen_HandleSwitches+0xce>
                menu_reset(); // SW4 long press = Back
 800535c:	f7ff fc94 	bl	8004c88 <menu_reset>
 8005360:	e01f      	b.n	80053a2 <Screen_HandleSwitches+0x10e>
            } else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8005362:	4916      	ldr	r1, [pc, #88]	@ (80053bc <Screen_HandleSwitches+0x128>)
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4613      	mov	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	4912      	ldr	r1, [pc, #72]	@ (80053bc <Screen_HandleSwitches+0x128>)
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3308      	adds	r3, #8
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f001 fcba 	bl	8006cfe <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 800538a:	490c      	ldr	r1, [pc, #48]	@ (80053bc <Screen_HandleSwitches+0x128>)
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4613      	mov	r3, r2
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3306      	adds	r3, #6
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fccf 	bl	8004d40 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	f77f af78 	ble.w	80052a0 <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	0800d768 	.word	0x0800d768
 80053c0:	20000058 	.word	0x20000058
 80053c4:	2000061c 	.word	0x2000061c

080053c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <HAL_MspInit+0x5c>)
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	4a14      	ldr	r2, [pc, #80]	@ (8005424 <HAL_MspInit+0x5c>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6193      	str	r3, [r2, #24]
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <HAL_MspInit+0x5c>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <HAL_MspInit+0x5c>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <HAL_MspInit+0x5c>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	61d3      	str	r3, [r2, #28]
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <HAL_MspInit+0x5c>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80053fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <HAL_MspInit+0x60>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <HAL_MspInit+0x60>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	40021000 	.word	0x40021000
 8005428:	40010000 	.word	0x40010000

0800542c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	f107 0310 	add.w	r3, r7, #16
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a18      	ldr	r2, [pc, #96]	@ (80054a8 <HAL_ADC_MspInit+0x7c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d129      	bne.n	80054a0 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800544c:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 8005452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005456:	6193      	str	r3, [r2, #24]
 8005458:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005464:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	4a10      	ldr	r2, [pc, #64]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 800546a:	f043 0304 	orr.w	r3, r3, #4
 800546e:	6193      	str	r3, [r2, #24]
 8005470:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_ADC_MspInit+0x80>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800547c:	23ff      	movs	r3, #255	@ 0xff
 800547e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005480:	2303      	movs	r3, #3
 8005482:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005484:	f107 0310 	add.w	r3, r7, #16
 8005488:	4619      	mov	r1, r3
 800548a:	4809      	ldr	r0, [pc, #36]	@ (80054b0 <HAL_ADC_MspInit+0x84>)
 800548c:	f001 fa84 	bl	8006998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005490:	2200      	movs	r2, #0
 8005492:	2100      	movs	r1, #0
 8005494:	2012      	movs	r0, #18
 8005496:	f001 fa48 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800549a:	2012      	movs	r0, #18
 800549c:	f001 fa61 	bl	8006962 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80054a0:	bf00      	nop
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40012400 	.word	0x40012400
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40010800 	.word	0x40010800

080054b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054bc:	f107 0310 	add.w	r3, r7, #16
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a16      	ldr	r2, [pc, #88]	@ (8005528 <HAL_I2C_MspInit+0x74>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d124      	bne.n	800551e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d4:	4b15      	ldr	r3, [pc, #84]	@ (800552c <HAL_I2C_MspInit+0x78>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	4a14      	ldr	r2, [pc, #80]	@ (800552c <HAL_I2C_MspInit+0x78>)
 80054da:	f043 0308 	orr.w	r3, r3, #8
 80054de:	6193      	str	r3, [r2, #24]
 80054e0:	4b12      	ldr	r3, [pc, #72]	@ (800552c <HAL_I2C_MspInit+0x78>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80054f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054f2:	2312      	movs	r3, #18
 80054f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054f6:	2303      	movs	r3, #3
 80054f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fa:	f107 0310 	add.w	r3, r7, #16
 80054fe:	4619      	mov	r1, r3
 8005500:	480b      	ldr	r0, [pc, #44]	@ (8005530 <HAL_I2C_MspInit+0x7c>)
 8005502:	f001 fa49 	bl	8006998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_I2C_MspInit+0x78>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4a08      	ldr	r2, [pc, #32]	@ (800552c <HAL_I2C_MspInit+0x78>)
 800550c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005510:	61d3      	str	r3, [r2, #28]
 8005512:	4b06      	ldr	r3, [pc, #24]	@ (800552c <HAL_I2C_MspInit+0x78>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800551e:	bf00      	nop
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40005800 	.word	0x40005800
 800552c:	40021000 	.word	0x40021000
 8005530:	40010c00 	.word	0x40010c00

08005534 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	@ 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a22      	ldr	r2, [pc, #136]	@ (80055d8 <HAL_SPI_MspInit+0xa4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d13d      	bne.n	80055d0 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005554:	4b21      	ldr	r3, [pc, #132]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	4a20      	ldr	r2, [pc, #128]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 800555a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800555e:	6193      	str	r3, [r2, #24]
 8005560:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800556c:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	4a1a      	ldr	r2, [pc, #104]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 8005572:	f043 0308 	orr.w	r3, r3, #8
 8005576:	6193      	str	r3, [r2, #24]
 8005578:	4b18      	ldr	r3, [pc, #96]	@ (80055dc <HAL_SPI_MspInit+0xa8>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005584:	2328      	movs	r3, #40	@ 0x28
 8005586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005588:	2302      	movs	r3, #2
 800558a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800558c:	2303      	movs	r3, #3
 800558e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	4619      	mov	r1, r3
 8005596:	4812      	ldr	r0, [pc, #72]	@ (80055e0 <HAL_SPI_MspInit+0xac>)
 8005598:	f001 f9fe 	bl	8006998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800559c:	2310      	movs	r3, #16
 800559e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	4619      	mov	r1, r3
 80055ae:	480c      	ldr	r0, [pc, #48]	@ (80055e0 <HAL_SPI_MspInit+0xac>)
 80055b0:	f001 f9f2 	bl	8006998 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_SPI_MspInit+0xb0>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ca:	4a06      	ldr	r2, [pc, #24]	@ (80055e4 <HAL_SPI_MspInit+0xb0>)
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80055d0:	bf00      	nop
 80055d2:	3728      	adds	r7, #40	@ 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40013000 	.word	0x40013000
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40010c00 	.word	0x40010c00
 80055e4:	40010000 	.word	0x40010000

080055e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a09      	ldr	r2, [pc, #36]	@ (800561c <HAL_TIM_Base_MspInit+0x34>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d10b      	bne.n	8005612 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <HAL_TIM_Base_MspInit+0x38>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4a08      	ldr	r2, [pc, #32]	@ (8005620 <HAL_TIM_Base_MspInit+0x38>)
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	61d3      	str	r3, [r2, #28]
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <HAL_TIM_Base_MspInit+0x38>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	40000400 	.word	0x40000400
 8005620:	40021000 	.word	0x40021000

08005624 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1c      	ldr	r2, [pc, #112]	@ (80056b0 <HAL_UART_MspInit+0x8c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d131      	bne.n	80056a8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005644:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	4a1a      	ldr	r2, [pc, #104]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 800564a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800564e:	6193      	str	r3, [r2, #24]
 8005650:	4b18      	ldr	r3, [pc, #96]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565c:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	6193      	str	r3, [r2, #24]
 8005668:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <HAL_UART_MspInit+0x90>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
 800567c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800567e:	2303      	movs	r3, #3
 8005680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005682:	f107 0310 	add.w	r3, r7, #16
 8005686:	4619      	mov	r1, r3
 8005688:	480b      	ldr	r0, [pc, #44]	@ (80056b8 <HAL_UART_MspInit+0x94>)
 800568a:	f001 f985 	bl	8006998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800568e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	4619      	mov	r1, r3
 80056a2:	4805      	ldr	r0, [pc, #20]	@ (80056b8 <HAL_UART_MspInit+0x94>)
 80056a4:	f001 f978 	bl	8006998 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40010800 	.word	0x40010800

080056bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80056c0:	bf00      	nop
 80056c2:	e7fd      	b.n	80056c0 <NMI_Handler+0x4>

080056c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <HardFault_Handler+0x4>

080056cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <MemManage_Handler+0x4>

080056d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <BusFault_Handler+0x4>

080056dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <UsageFault_Handler+0x4>

080056e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005700:	bf00      	nop
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800570c:	f000 fa1e 	bl	8005b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}

08005714 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005718:	4802      	ldr	r0, [pc, #8]	@ (8005724 <ADC1_2_IRQHandler+0x10>)
 800571a:	f000 fd1b 	bl	8006154 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000320 	.word	0x20000320

08005728 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800572c:	4802      	ldr	r0, [pc, #8]	@ (8005738 <RTC_Alarm_IRQHandler+0x10>)
 800572e:	f003 fb8f 	bl	8008e50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200003a4 	.word	0x200003a4

0800573c <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
 8005740:	f000 fa16 	bl	8005b70 <HAL_GetTick>
 8005744:	4603      	mov	r3, r0
 8005746:	4618      	mov	r0, r3
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800575e:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <Switches_Init+0x94>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	4a1f      	ldr	r2, [pc, #124]	@ (80057e0 <Switches_Init+0x94>)
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	6193      	str	r3, [r2, #24]
 800576a:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <Switches_Init+0x94>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800577a:	2301      	movs	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800577e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005782:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4816      	ldr	r0, [pc, #88]	@ (80057e4 <Switches_Init+0x98>)
 800578a:	f001 f905 	bl	8006998 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e01d      	b.n	80057d0 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8005794:	4a14      	ldr	r2, [pc, #80]	@ (80057e8 <Switches_Init+0x9c>)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800579e:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <Switches_Init+0xa0>)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 80057a8:	f7ff ffc8 	bl	800573c <now_ms>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4910      	ldr	r1, [pc, #64]	@ (80057f0 <Switches_Init+0xa4>)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 80057b6:	4a0f      	ldr	r2, [pc, #60]	@ (80057f4 <Switches_Init+0xa8>)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2100      	movs	r1, #0
 80057bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 80057c0:	4a0d      	ldr	r2, [pc, #52]	@ (80057f8 <Switches_Init+0xac>)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	3301      	adds	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	ddde      	ble.n	8005794 <Switches_Init+0x48>
    }
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40010c00 	.word	0x40010c00
 80057e8:	2000062c 	.word	0x2000062c
 80057ec:	20000640 	.word	0x20000640
 80057f0:	20000630 	.word	0x20000630
 80057f4:	20000644 	.word	0x20000644
 80057f8:	20000654 	.word	0x20000654

080057fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return 1;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <_kill>:

int _kill(int pid, int sig)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005814:	f005 fd3c 	bl	800b290 <__errno>
 8005818:	4603      	mov	r3, r0
 800581a:	2216      	movs	r2, #22
 800581c:	601a      	str	r2, [r3, #0]
  return -1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <_exit>:

void _exit (int status)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005832:	f04f 31ff 	mov.w	r1, #4294967295
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffe7 	bl	800580a <_kill>
  while (1) {}    /* Make sure we hang here */
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <_exit+0x12>

08005840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e00a      	b.n	8005868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005852:	f3af 8000 	nop.w
 8005856:	4601      	mov	r1, r0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	60ba      	str	r2, [r7, #8]
 800585e:	b2ca      	uxtb	r2, r1
 8005860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	3301      	adds	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	dbf0      	blt.n	8005852 <_read+0x12>
  }

  return len;
 8005870:	687b      	ldr	r3, [r7, #4]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e009      	b.n	80058a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	60ba      	str	r2, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dbf1      	blt.n	800588c <_write+0x12>
  }
  return len;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <_close>:

int _close(int file)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058d8:	605a      	str	r2, [r3, #4]
  return 0;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <_isatty>:

int _isatty(int file)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
	...

08005914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800591c:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <_sbrk+0x5c>)
 800591e:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <_sbrk+0x60>)
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005928:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <_sbrk+0x64>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005930:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <_sbrk+0x64>)
 8005932:	4a12      	ldr	r2, [pc, #72]	@ (800597c <_sbrk+0x68>)
 8005934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <_sbrk+0x64>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d207      	bcs.n	8005954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005944:	f005 fca4 	bl	800b290 <__errno>
 8005948:	4603      	mov	r3, r0
 800594a:	220c      	movs	r2, #12
 800594c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e009      	b.n	8005968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005954:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <_sbrk+0x64>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800595a:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <_sbrk+0x64>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	4a05      	ldr	r2, [pc, #20]	@ (8005978 <_sbrk+0x64>)
 8005964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005966:	68fb      	ldr	r3, [r7, #12]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20005000 	.word	0x20005000
 8005974:	00000400 	.word	0x00000400
 8005978:	20000658 	.word	0x20000658
 800597c:	200007f8 	.word	0x200007f8

08005980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8005990:	2240      	movs	r2, #64	@ 0x40
 8005992:	2100      	movs	r1, #0
 8005994:	4807      	ldr	r0, [pc, #28]	@ (80059b4 <UART_Init+0x28>)
 8005996:	f005 fc03 	bl	800b1a0 <memset>
    rxIndex = 0;
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <UART_Init+0x2c>)
 800599c:	2200      	movs	r2, #0
 800599e:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80059a0:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <UART_Init+0x30>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80059a6:	2201      	movs	r2, #1
 80059a8:	4905      	ldr	r1, [pc, #20]	@ (80059c0 <UART_Init+0x34>)
 80059aa:	4806      	ldr	r0, [pc, #24]	@ (80059c4 <UART_Init+0x38>)
 80059ac:	f004 fbb7 	bl	800a11e <HAL_UART_Receive_IT>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000660 	.word	0x20000660
 80059b8:	200006a0 	.word	0x200006a0
 80059bc:	200006a2 	.word	0x200006a2
 80059c0:	2000065c 	.word	0x2000065c
 80059c4:	20000458 	.word	0x20000458

080059c8 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80059d2:	6838      	ldr	r0, [r7, #0]
 80059d4:	f7fa fbc6 	bl	8000164 <strlen>
 80059d8:	4603      	mov	r3, r0
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f04f 33ff 	mov.w	r3, #4294967295
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f004 fb10 	bl	800a008 <HAL_UART_Transmit>
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
    if (packetReady)
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <UART_GetReceivedPacket+0x78>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02c      	beq.n	8005a5c <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8005a02:	481a      	ldr	r0, [pc, #104]	@ (8005a6c <UART_GetReceivedPacket+0x7c>)
 8005a04:	f7fa fbae 	bl	8000164 <strlen>
 8005a08:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d219      	bcs.n	8005a46 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	461a      	mov	r2, r3
 8005a18:	4914      	ldr	r1, [pc, #80]	@ (8005a6c <UART_GetReceivedPacket+0x7c>)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f005 fbdb 	bl	800b1d6 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005a2c:	2240      	movs	r2, #64	@ 0x40
 8005a2e:	2100      	movs	r1, #0
 8005a30:	480e      	ldr	r0, [pc, #56]	@ (8005a6c <UART_GetReceivedPacket+0x7c>)
 8005a32:	f005 fbb5 	bl	800b1a0 <memset>
            rxIndex = 0;
 8005a36:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <UART_GetReceivedPacket+0x80>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <UART_GetReceivedPacket+0x78>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
            return true;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e00b      	b.n	8005a5e <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005a46:	2240      	movs	r2, #64	@ 0x40
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4808      	ldr	r0, [pc, #32]	@ (8005a6c <UART_GetReceivedPacket+0x7c>)
 8005a4c:	f005 fba8 	bl	800b1a0 <memset>
            rxIndex = 0;
 8005a50:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <UART_GetReceivedPacket+0x80>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005a56:	4b04      	ldr	r3, [pc, #16]	@ (8005a68 <UART_GetReceivedPacket+0x78>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200006a2 	.word	0x200006a2
 8005a6c:	20000660 	.word	0x20000660
 8005a70:	200006a0 	.word	0x200006a0

08005a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005a74:	f7ff ff84 	bl	8005980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a78:	480b      	ldr	r0, [pc, #44]	@ (8005aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005a7a:	490c      	ldr	r1, [pc, #48]	@ (8005aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a80:	e002      	b.n	8005a88 <LoopCopyDataInit>

08005a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a86:	3304      	adds	r3, #4

08005a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a8c:	d3f9      	bcc.n	8005a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005a90:	4c09      	ldr	r4, [pc, #36]	@ (8005ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a94:	e001      	b.n	8005a9a <LoopFillZerobss>

08005a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a98:	3204      	adds	r2, #4

08005a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a9c:	d3fb      	bcc.n	8005a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a9e:	f005 fbfd 	bl	800b29c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005aa2:	f7fc fc6b 	bl	800237c <main>
  bx lr
 8005aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8005aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aac:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8005ab0:	0800db5c 	.word	0x0800db5c
  ldr r2, =_sbss
 8005ab4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8005ab8:	200007f4 	.word	0x200007f4

08005abc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005abc:	e7fe      	b.n	8005abc <CAN1_RX1_IRQHandler>
	...

08005ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ac4:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <HAL_Init+0x28>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <HAL_Init+0x28>)
 8005aca:	f043 0310 	orr.w	r3, r3, #16
 8005ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ad0:	2003      	movs	r0, #3
 8005ad2:	f000 ff1f 	bl	8006914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f000 f808 	bl	8005aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005adc:	f7ff fc74 	bl	80053c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40022000 	.word	0x40022000

08005aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005af4:	4b12      	ldr	r3, [pc, #72]	@ (8005b40 <HAL_InitTick+0x54>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b12      	ldr	r3, [pc, #72]	@ (8005b44 <HAL_InitTick+0x58>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	4619      	mov	r1, r3
 8005afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 ff37 	bl	800697e <HAL_SYSTICK_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e00e      	b.n	8005b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d80a      	bhi.n	8005b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b20:	2200      	movs	r2, #0
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	f000 feff 	bl	800692a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b2c:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <HAL_InitTick+0x5c>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e000      	b.n	8005b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000005c 	.word	0x2000005c
 8005b44:	20000064 	.word	0x20000064
 8005b48:	20000060 	.word	0x20000060

08005b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HAL_IncTick+0x1c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <HAL_IncTick+0x20>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	4a03      	ldr	r2, [pc, #12]	@ (8005b6c <HAL_IncTick+0x20>)
 8005b5e:	6013      	str	r3, [r2, #0]
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr
 8005b68:	20000064 	.word	0x20000064
 8005b6c:	200006a4 	.word	0x200006a4

08005b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return uwTick;
 8005b74:	4b02      	ldr	r3, [pc, #8]	@ (8005b80 <HAL_GetTick+0x10>)
 8005b76:	681b      	ldr	r3, [r3, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	200006a4 	.word	0x200006a4

08005b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b8c:	f7ff fff0 	bl	8005b70 <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d005      	beq.n	8005baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <HAL_Delay+0x44>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005baa:	bf00      	nop
 8005bac:	f7ff ffe0 	bl	8005b70 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d8f7      	bhi.n	8005bac <HAL_Delay+0x28>
  {
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000064 	.word	0x20000064

08005bcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0be      	b.n	8005d6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fc0e 	bl	800542c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fcb9 	bl	8006588 <ADC_ConversionStop_Disable>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 8099 	bne.w	8005d5a <HAL_ADC_Init+0x18e>
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 8095 	bne.w	8005d5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c38:	f023 0302 	bic.w	r3, r3, #2
 8005c3c:	f043 0202 	orr.w	r2, r3, #2
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	7b1b      	ldrb	r3, [r3, #12]
 8005c52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005c54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c64:	d003      	beq.n	8005c6e <HAL_ADC_Init+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <HAL_ADC_Init+0xa8>
 8005c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c72:	e000      	b.n	8005c76 <HAL_ADC_Init+0xaa>
 8005c74:	2300      	movs	r3, #0
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7d1b      	ldrb	r3, [r3, #20]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d119      	bne.n	8005cb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7b1b      	ldrb	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	035a      	lsls	r2, r3, #13
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e00b      	b.n	8005cb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	f043 0201 	orr.w	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	4b28      	ldr	r3, [pc, #160]	@ (8005d74 <HAL_ADC_Init+0x1a8>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce8:	d003      	beq.n	8005cf2 <HAL_ADC_Init+0x126>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d104      	bne.n	8005cfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	051b      	lsls	r3, r3, #20
 8005cfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	4b18      	ldr	r3, [pc, #96]	@ (8005d78 <HAL_ADC_Init+0x1ac>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d10b      	bne.n	8005d38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d36:	e018      	b.n	8005d6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3c:	f023 0312 	bic.w	r3, r3, #18
 8005d40:	f043 0210 	orr.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d58:	e007      	b.n	8005d6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	f043 0210 	orr.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	ffe1f7fd 	.word	0xffe1f7fd
 8005d78:	ff1f0efe 	.word	0xff1f0efe

08005d7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_Start+0x1a>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e098      	b.n	8005ec8 <HAL_ADC_Start+0x14c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb98 	bl	80064d4 <ADC_Enable>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 8087 	bne.w	8005ebe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a41      	ldr	r2, [pc, #260]	@ (8005ed0 <HAL_ADC_Start+0x154>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d105      	bne.n	8005dda <HAL_ADC_Start+0x5e>
 8005dce:	4b41      	ldr	r3, [pc, #260]	@ (8005ed4 <HAL_ADC_Start+0x158>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d115      	bne.n	8005e06 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d026      	beq.n	8005e42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005dfc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e04:	e01d      	b.n	8005e42 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <HAL_ADC_Start+0x158>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_ADC_Start+0xaa>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_ADC_Start+0x154>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d10d      	bne.n	8005e42 <HAL_ADC_Start+0xc6>
 8005e26:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <HAL_ADC_Start+0x158>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d006      	beq.n	8005e5c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	f023 0206 	bic.w	r2, r3, #6
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e5a:	e002      	b.n	8005e62 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f06f 0202 	mvn.w	r2, #2
 8005e72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e7e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005e82:	d113      	bne.n	8005eac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e88:	4a11      	ldr	r2, [pc, #68]	@ (8005ed0 <HAL_ADC_Start+0x154>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d105      	bne.n	8005e9a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005e8e:	4b11      	ldr	r3, [pc, #68]	@ (8005ed4 <HAL_ADC_Start+0x158>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	e00c      	b.n	8005ec6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	e003      	b.n	8005ec6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40012800 	.word	0x40012800
 8005ed4:	40012400 	.word	0x40012400

08005ed8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_ADC_Stop+0x1a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e01a      	b.n	8005f28 <HAL_ADC_Stop+0x50>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb44 	bl	8006588 <ADC_ConversionStop_Disable>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005f46:	f7ff fe13 	bl	8005b70 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0d3      	b.n	800611a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d131      	bne.n	8005fe4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d12a      	bne.n	8005fe4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005f8e:	e021      	b.n	8005fd4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d01d      	beq.n	8005fd4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_ADC_PollForConversion+0x7e>
 8005f9e:	f7ff fde7 	bl	8005b70 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d212      	bcs.n	8005fd4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	f043 0204 	orr.w	r2, r3, #4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e0a2      	b.n	800611a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0d6      	beq.n	8005f90 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005fe2:	e070      	b.n	80060c6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8006124 <HAL_ADC_PollForConversion+0x1f4>)
 8005fe6:	681c      	ldr	r4, [r3, #0]
 8005fe8:	2002      	movs	r0, #2
 8005fea:	f002 fe7b 	bl	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6919      	ldr	r1, [r3, #16]
 8005ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8006128 <HAL_ADC_PollForConversion+0x1f8>)
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d118      	bne.n	8006034 <HAL_ADC_PollForConversion+0x104>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68d9      	ldr	r1, [r3, #12]
 8006008:	4b48      	ldr	r3, [pc, #288]	@ (800612c <HAL_ADC_PollForConversion+0x1fc>)
 800600a:	400b      	ands	r3, r1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d111      	bne.n	8006034 <HAL_ADC_PollForConversion+0x104>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6919      	ldr	r1, [r3, #16]
 8006016:	4b46      	ldr	r3, [pc, #280]	@ (8006130 <HAL_ADC_PollForConversion+0x200>)
 8006018:	400b      	ands	r3, r1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <HAL_ADC_PollForConversion+0x100>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68d9      	ldr	r1, [r3, #12]
 8006024:	4b43      	ldr	r3, [pc, #268]	@ (8006134 <HAL_ADC_PollForConversion+0x204>)
 8006026:	400b      	ands	r3, r1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_ADC_PollForConversion+0x100>
 800602c:	2314      	movs	r3, #20
 800602e:	e020      	b.n	8006072 <HAL_ADC_PollForConversion+0x142>
 8006030:	2329      	movs	r3, #41	@ 0x29
 8006032:	e01e      	b.n	8006072 <HAL_ADC_PollForConversion+0x142>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6919      	ldr	r1, [r3, #16]
 800603a:	4b3d      	ldr	r3, [pc, #244]	@ (8006130 <HAL_ADC_PollForConversion+0x200>)
 800603c:	400b      	ands	r3, r1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_ADC_PollForConversion+0x120>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68d9      	ldr	r1, [r3, #12]
 8006048:	4b3a      	ldr	r3, [pc, #232]	@ (8006134 <HAL_ADC_PollForConversion+0x204>)
 800604a:	400b      	ands	r3, r1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00d      	beq.n	800606c <HAL_ADC_PollForConversion+0x13c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6919      	ldr	r1, [r3, #16]
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <HAL_ADC_PollForConversion+0x208>)
 8006058:	400b      	ands	r3, r1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d108      	bne.n	8006070 <HAL_ADC_PollForConversion+0x140>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68d9      	ldr	r1, [r3, #12]
 8006064:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <HAL_ADC_PollForConversion+0x208>)
 8006066:	400b      	ands	r3, r1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_ADC_PollForConversion+0x140>
 800606c:	2354      	movs	r3, #84	@ 0x54
 800606e:	e000      	b.n	8006072 <HAL_ADC_PollForConversion+0x142>
 8006070:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006078:	e021      	b.n	80060be <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d01a      	beq.n	80060b8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <HAL_ADC_PollForConversion+0x168>
 8006088:	f7ff fd72 	bl	8005b70 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d20f      	bcs.n	80060b8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	d90b      	bls.n	80060b8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	f043 0204 	orr.w	r2, r3, #4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e030      	b.n	800611a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d8d9      	bhi.n	800607a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f06f 0212 	mvn.w	r2, #18
 80060ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80060e6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80060ea:	d115      	bne.n	8006118 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d111      	bne.n	8006118 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f043 0201 	orr.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	2000005c 	.word	0x2000005c
 8006128:	24924924 	.word	0x24924924
 800612c:	00924924 	.word	0x00924924
 8006130:	12492492 	.word	0x12492492
 8006134:	00492492 	.word	0x00492492
 8006138:	00249249 	.word	0x00249249

0800613c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03e      	beq.n	80061f4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d039      	beq.n	80061f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d105      	bne.n	8006198 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80061a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80061a6:	d11d      	bne.n	80061e4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d119      	bne.n	80061e4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0220 	bic.w	r2, r2, #32
 80061be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fc f873 	bl	80022d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0212 	mvn.w	r2, #18
 80061f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04d      	beq.n	800629a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d048      	beq.n	800629a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800622a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800622e:	d012      	beq.n	8006256 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800623a:	2b00      	cmp	r3, #0
 800623c:	d125      	bne.n	800628a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006248:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800624c:	d11d      	bne.n	800628a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006252:	2b00      	cmp	r3, #0
 8006254:	d119      	bne.n	800628a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006264:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	f043 0201 	orr.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa6c 	bl	8006768 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 020c 	mvn.w	r2, #12
 8006298:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d012      	beq.n	80062ca <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f809 	bl	80062d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0201 	mvn.w	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x20>
 8006300:	2302      	movs	r3, #2
 8006302:	e0dc      	b.n	80064be <HAL_ADC_ConfigChannel+0x1da>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d81c      	bhi.n	800634e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	3b05      	subs	r3, #5
 8006326:	221f      	movs	r2, #31
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	4019      	ands	r1, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	3b05      	subs	r3, #5
 8006340:	fa00 f203 	lsl.w	r2, r0, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	635a      	str	r2, [r3, #52]	@ 0x34
 800634c:	e03c      	b.n	80063c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d81c      	bhi.n	8006390 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	3b23      	subs	r3, #35	@ 0x23
 8006368:	221f      	movs	r2, #31
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	4019      	ands	r1, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	3b23      	subs	r3, #35	@ 0x23
 8006382:	fa00 f203 	lsl.w	r2, r0, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	631a      	str	r2, [r3, #48]	@ 0x30
 800638e:	e01b      	b.n	80063c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	3b41      	subs	r3, #65	@ 0x41
 80063a2:	221f      	movs	r2, #31
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	4019      	ands	r1, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	3b41      	subs	r3, #65	@ 0x41
 80063bc:	fa00 f203 	lsl.w	r2, r0, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d91c      	bls.n	800640a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68d9      	ldr	r1, [r3, #12]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	4413      	add	r3, r2
 80063e0:	3b1e      	subs	r3, #30
 80063e2:	2207      	movs	r2, #7
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	4019      	ands	r1, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6898      	ldr	r0, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	4413      	add	r3, r2
 80063fa:	3b1e      	subs	r3, #30
 80063fc:	fa00 f203 	lsl.w	r2, r0, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	e019      	b.n	800643e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6919      	ldr	r1, [r3, #16]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	2207      	movs	r2, #7
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	4019      	ands	r1, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6898      	ldr	r0, [r3, #8]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	4413      	add	r3, r2
 8006432:	fa00 f203 	lsl.w	r2, r0, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b10      	cmp	r3, #16
 8006444:	d003      	beq.n	800644e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800644a:	2b11      	cmp	r3, #17
 800644c:	d132      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d125      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d126      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006474:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b10      	cmp	r3, #16
 800647c:	d11a      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800647e:	4b13      	ldr	r3, [pc, #76]	@ (80064cc <HAL_ADC_ConfigChannel+0x1e8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	0c9a      	lsrs	r2, r3, #18
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006494:	e002      	b.n	800649c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3b01      	subs	r3, #1
 800649a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f9      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x1b2>
 80064a2:	e007      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	40012400 	.word	0x40012400
 80064cc:	2000005c 	.word	0x2000005c
 80064d0:	431bde83 	.word	0x431bde83

080064d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d040      	beq.n	8006574 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006502:	4b1f      	ldr	r3, [pc, #124]	@ (8006580 <ADC_Enable+0xac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <ADC_Enable+0xb0>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	0c9b      	lsrs	r3, r3, #18
 800650e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006510:	e002      	b.n	8006518 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3b01      	subs	r3, #1
 8006516:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f9      	bne.n	8006512 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800651e:	f7ff fb27 	bl	8005b70 <HAL_GetTick>
 8006522:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006524:	e01f      	b.n	8006566 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006526:	f7ff fb23 	bl	8005b70 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d918      	bls.n	8006566 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d011      	beq.n	8006566 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	f043 0210 	orr.w	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	f043 0201 	orr.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e007      	b.n	8006576 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	d1d8      	bne.n	8006526 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2000005c 	.word	0x2000005c
 8006584:	431bde83 	.word	0x431bde83

08006588 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d12e      	bne.n	8006600 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80065b2:	f7ff fadd 	bl	8005b70 <HAL_GetTick>
 80065b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80065b8:	e01b      	b.n	80065f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065ba:	f7ff fad9 	bl	8005b70 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d914      	bls.n	80065f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10d      	bne.n	80065f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065da:	f043 0210 	orr.w	r2, r3, #16
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	f043 0201 	orr.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e007      	b.n	8006602 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d0dc      	beq.n	80065ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_ADCEx_Calibration_Start+0x1e>
 8006626:	2302      	movs	r3, #2
 8006628:	e097      	b.n	800675a <HAL_ADCEx_Calibration_Start+0x14e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff ffa8 	bl	8006588 <ADC_ConversionStop_Disable>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff49 	bl	80064d4 <ADC_Enable>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f040 8081 	bne.w	8006750 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006656:	f023 0302 	bic.w	r3, r3, #2
 800665a:	f043 0202 	orr.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006662:	4b40      	ldr	r3, [pc, #256]	@ (8006764 <HAL_ADCEx_Calibration_Start+0x158>)
 8006664:	681c      	ldr	r4, [r3, #0]
 8006666:	2002      	movs	r0, #2
 8006668:	f002 fb3c 	bl	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 800666c:	4603      	mov	r3, r0
 800666e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8006672:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8006674:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8006676:	e002      	b.n	800667e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3b01      	subs	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f9      	bne.n	8006678 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0208 	orr.w	r2, r2, #8
 8006692:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006694:	f7ff fa6c 	bl	8005b70 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800669a:	e01b      	b.n	80066d4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800669c:	f7ff fa68 	bl	8005b70 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b0a      	cmp	r3, #10
 80066a8:	d914      	bls.n	80066d4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00d      	beq.n	80066d4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f023 0312 	bic.w	r3, r3, #18
 80066c0:	f043 0210 	orr.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e042      	b.n	800675a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1dc      	bne.n	800669c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0204 	orr.w	r2, r2, #4
 80066f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80066f2:	f7ff fa3d 	bl	8005b70 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80066f8:	e01b      	b.n	8006732 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80066fa:	f7ff fa39 	bl	8005b70 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b0a      	cmp	r3, #10
 8006706:	d914      	bls.n	8006732 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	f023 0312 	bic.w	r3, r3, #18
 800671e:	f043 0210 	orr.w	r2, r3, #16
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e013      	b.n	800675a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1dc      	bne.n	80066fa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	f043 0201 	orr.w	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd90      	pop	{r4, r7, pc}
 8006762:	bf00      	nop
 8006764:	2000005c 	.word	0x2000005c

08006768 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr
	...

0800677c <__NVIC_SetPriorityGrouping>:
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800678c:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <__NVIC_SetPriorityGrouping+0x44>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006798:	4013      	ands	r3, r2
 800679a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80067a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067ae:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <__NVIC_SetPriorityGrouping+0x44>)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	60d3      	str	r3, [r2, #12]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <__NVIC_GetPriorityGrouping>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067c8:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <__NVIC_GetPriorityGrouping+0x18>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	f003 0307 	and.w	r3, r3, #7
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	e000ed00 	.word	0xe000ed00

080067e0 <__NVIC_EnableIRQ>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	db0b      	blt.n	800680a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	f003 021f 	and.w	r2, r3, #31
 80067f8:	4906      	ldr	r1, [pc, #24]	@ (8006814 <__NVIC_EnableIRQ+0x34>)
 80067fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2001      	movs	r0, #1
 8006802:	fa00 f202 	lsl.w	r2, r0, r2
 8006806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	e000e100 	.word	0xe000e100

08006818 <__NVIC_SetPriority>:
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006828:	2b00      	cmp	r3, #0
 800682a:	db0a      	blt.n	8006842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	490c      	ldr	r1, [pc, #48]	@ (8006864 <__NVIC_SetPriority+0x4c>)
 8006832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006836:	0112      	lsls	r2, r2, #4
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	440b      	add	r3, r1
 800683c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006840:	e00a      	b.n	8006858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	4908      	ldr	r1, [pc, #32]	@ (8006868 <__NVIC_SetPriority+0x50>)
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3b04      	subs	r3, #4
 8006850:	0112      	lsls	r2, r2, #4
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	440b      	add	r3, r1
 8006856:	761a      	strb	r2, [r3, #24]
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	e000e100 	.word	0xe000e100
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <NVIC_EncodePriority>:
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	@ 0x24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f1c3 0307 	rsb	r3, r3, #7
 8006886:	2b04      	cmp	r3, #4
 8006888:	bf28      	it	cs
 800688a:	2304      	movcs	r3, #4
 800688c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3304      	adds	r3, #4
 8006892:	2b06      	cmp	r3, #6
 8006894:	d902      	bls.n	800689c <NVIC_EncodePriority+0x30>
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3b03      	subs	r3, #3
 800689a:	e000      	b.n	800689e <NVIC_EncodePriority+0x32>
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43da      	mvns	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	401a      	ands	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068b4:	f04f 31ff 	mov.w	r1, #4294967295
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	fa01 f303 	lsl.w	r3, r1, r3
 80068be:	43d9      	mvns	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068c4:	4313      	orrs	r3, r2
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3724      	adds	r7, #36	@ 0x24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3b01      	subs	r3, #1
 80068dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068e0:	d301      	bcc.n	80068e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068e2:	2301      	movs	r3, #1
 80068e4:	e00f      	b.n	8006906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006910 <SysTick_Config+0x40>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ee:	210f      	movs	r1, #15
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	f7ff ff90 	bl	8006818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <SysTick_Config+0x40>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068fe:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <SysTick_Config+0x40>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010

08006914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ff2d 	bl	800677c <__NVIC_SetPriorityGrouping>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800693c:	f7ff ff42 	bl	80067c4 <__NVIC_GetPriorityGrouping>
 8006940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f7ff ff90 	bl	800686c <NVIC_EncodePriority>
 800694c:	4602      	mov	r2, r0
 800694e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006952:	4611      	mov	r1, r2
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff ff5f 	bl	8006818 <__NVIC_SetPriority>
}
 800695a:	bf00      	nop
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	4603      	mov	r3, r0
 800696a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800696c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff35 	bl	80067e0 <__NVIC_EnableIRQ>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff ffa2 	bl	80068d0 <SysTick_Config>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006998:	b480      	push	{r7}
 800699a:	b08b      	sub	sp, #44	@ 0x2c
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069a6:	2300      	movs	r3, #0
 80069a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069aa:	e169      	b.n	8006c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069ac:	2201      	movs	r2, #1
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	4013      	ands	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	f040 8158 	bne.w	8006c7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4a9a      	ldr	r2, [pc, #616]	@ (8006c38 <HAL_GPIO_Init+0x2a0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d05e      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
 80069d4:	4a98      	ldr	r2, [pc, #608]	@ (8006c38 <HAL_GPIO_Init+0x2a0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d875      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 80069da:	4a98      	ldr	r2, [pc, #608]	@ (8006c3c <HAL_GPIO_Init+0x2a4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d058      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
 80069e0:	4a96      	ldr	r2, [pc, #600]	@ (8006c3c <HAL_GPIO_Init+0x2a4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d86f      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 80069e6:	4a96      	ldr	r2, [pc, #600]	@ (8006c40 <HAL_GPIO_Init+0x2a8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d052      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
 80069ec:	4a94      	ldr	r2, [pc, #592]	@ (8006c40 <HAL_GPIO_Init+0x2a8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d869      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 80069f2:	4a94      	ldr	r2, [pc, #592]	@ (8006c44 <HAL_GPIO_Init+0x2ac>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d04c      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
 80069f8:	4a92      	ldr	r2, [pc, #584]	@ (8006c44 <HAL_GPIO_Init+0x2ac>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d863      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 80069fe:	4a92      	ldr	r2, [pc, #584]	@ (8006c48 <HAL_GPIO_Init+0x2b0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d046      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
 8006a04:	4a90      	ldr	r2, [pc, #576]	@ (8006c48 <HAL_GPIO_Init+0x2b0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d85d      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 8006a0a:	2b12      	cmp	r3, #18
 8006a0c:	d82a      	bhi.n	8006a64 <HAL_GPIO_Init+0xcc>
 8006a0e:	2b12      	cmp	r3, #18
 8006a10:	d859      	bhi.n	8006ac6 <HAL_GPIO_Init+0x12e>
 8006a12:	a201      	add	r2, pc, #4	@ (adr r2, 8006a18 <HAL_GPIO_Init+0x80>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a93 	.word	0x08006a93
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a7f 	.word	0x08006a7f
 8006a24:	08006ac1 	.word	0x08006ac1
 8006a28:	08006ac7 	.word	0x08006ac7
 8006a2c:	08006ac7 	.word	0x08006ac7
 8006a30:	08006ac7 	.word	0x08006ac7
 8006a34:	08006ac7 	.word	0x08006ac7
 8006a38:	08006ac7 	.word	0x08006ac7
 8006a3c:	08006ac7 	.word	0x08006ac7
 8006a40:	08006ac7 	.word	0x08006ac7
 8006a44:	08006ac7 	.word	0x08006ac7
 8006a48:	08006ac7 	.word	0x08006ac7
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006ac7 	.word	0x08006ac7
 8006a54:	08006ac7 	.word	0x08006ac7
 8006a58:	08006ac7 	.word	0x08006ac7
 8006a5c:	08006a75 	.word	0x08006a75
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	4a79      	ldr	r2, [pc, #484]	@ (8006c4c <HAL_GPIO_Init+0x2b4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a6a:	e02c      	b.n	8006ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	623b      	str	r3, [r7, #32]
          break;
 8006a72:	e029      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	623b      	str	r3, [r7, #32]
          break;
 8006a7c:	e024      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	3308      	adds	r3, #8
 8006a84:	623b      	str	r3, [r7, #32]
          break;
 8006a86:	e01f      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	623b      	str	r3, [r7, #32]
          break;
 8006a90:	e01a      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	623b      	str	r3, [r7, #32]
          break;
 8006a9e:	e013      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	611a      	str	r2, [r3, #16]
          break;
 8006ab2:	e009      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	615a      	str	r2, [r3, #20]
          break;
 8006abe:	e003      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
          break;
 8006ac4:	e000      	b.n	8006ac8 <HAL_GPIO_Init+0x130>
          break;
 8006ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2bff      	cmp	r3, #255	@ 0xff
 8006acc:	d801      	bhi.n	8006ad2 <HAL_GPIO_Init+0x13a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	e001      	b.n	8006ad6 <HAL_GPIO_Init+0x13e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2bff      	cmp	r3, #255	@ 0xff
 8006adc:	d802      	bhi.n	8006ae4 <HAL_GPIO_Init+0x14c>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	e002      	b.n	8006aea <HAL_GPIO_Init+0x152>
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	3b08      	subs	r3, #8
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	210f      	movs	r1, #15
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	401a      	ands	r2, r3
 8006afc:	6a39      	ldr	r1, [r7, #32]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	431a      	orrs	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80b1 	beq.w	8006c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b18:	4b4d      	ldr	r3, [pc, #308]	@ (8006c50 <HAL_GPIO_Init+0x2b8>)
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8006c50 <HAL_GPIO_Init+0x2b8>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	6193      	str	r3, [r2, #24]
 8006b24:	4b4a      	ldr	r3, [pc, #296]	@ (8006c50 <HAL_GPIO_Init+0x2b8>)
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b30:	4a48      	ldr	r2, [pc, #288]	@ (8006c54 <HAL_GPIO_Init+0x2bc>)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	089b      	lsrs	r3, r3, #2
 8006b36:	3302      	adds	r3, #2
 8006b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	220f      	movs	r2, #15
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a40      	ldr	r2, [pc, #256]	@ (8006c58 <HAL_GPIO_Init+0x2c0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_GPIO_Init+0x1ec>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c5c <HAL_GPIO_Init+0x2c4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00d      	beq.n	8006b80 <HAL_GPIO_Init+0x1e8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a3e      	ldr	r2, [pc, #248]	@ (8006c60 <HAL_GPIO_Init+0x2c8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <HAL_GPIO_Init+0x1e4>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006c64 <HAL_GPIO_Init+0x2cc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d101      	bne.n	8006b78 <HAL_GPIO_Init+0x1e0>
 8006b74:	2303      	movs	r3, #3
 8006b76:	e006      	b.n	8006b86 <HAL_GPIO_Init+0x1ee>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	e004      	b.n	8006b86 <HAL_GPIO_Init+0x1ee>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e002      	b.n	8006b86 <HAL_GPIO_Init+0x1ee>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_GPIO_Init+0x1ee>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b88:	f002 0203 	and.w	r2, r2, #3
 8006b8c:	0092      	lsls	r2, r2, #2
 8006b8e:	4093      	lsls	r3, r2
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006b96:	492f      	ldr	r1, [pc, #188]	@ (8006c54 <HAL_GPIO_Init+0x2bc>)
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	089b      	lsrs	r3, r3, #2
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	492c      	ldr	r1, [pc, #176]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	608b      	str	r3, [r1, #8]
 8006bbc:	e006      	b.n	8006bcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	4928      	ldr	r1, [pc, #160]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006bd8:	4b23      	ldr	r3, [pc, #140]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	4922      	ldr	r1, [pc, #136]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60cb      	str	r3, [r1, #12]
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006be6:	4b20      	ldr	r3, [pc, #128]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	491e      	ldr	r1, [pc, #120]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c00:	4b19      	ldr	r3, [pc, #100]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4918      	ldr	r1, [pc, #96]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
 8006c0c:	e006      	b.n	8006c1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c0e:	4b16      	ldr	r3, [pc, #88]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	4914      	ldr	r1, [pc, #80]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d021      	beq.n	8006c6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c28:	4b0f      	ldr	r3, [pc, #60]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	490e      	ldr	r1, [pc, #56]	@ (8006c68 <HAL_GPIO_Init+0x2d0>)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
 8006c34:	e021      	b.n	8006c7a <HAL_GPIO_Init+0x2e2>
 8006c36:	bf00      	nop
 8006c38:	10320000 	.word	0x10320000
 8006c3c:	10310000 	.word	0x10310000
 8006c40:	10220000 	.word	0x10220000
 8006c44:	10210000 	.word	0x10210000
 8006c48:	10120000 	.word	0x10120000
 8006c4c:	10110000 	.word	0x10110000
 8006c50:	40021000 	.word	0x40021000
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40010800 	.word	0x40010800
 8006c5c:	40010c00 	.word	0x40010c00
 8006c60:	40011000 	.word	0x40011000
 8006c64:	40011400 	.word	0x40011400
 8006c68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c9c <HAL_GPIO_Init+0x304>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	43db      	mvns	r3, r3
 8006c74:	4909      	ldr	r1, [pc, #36]	@ (8006c9c <HAL_GPIO_Init+0x304>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f47f ae8e 	bne.w	80069ac <HAL_GPIO_Init+0x14>
  }
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	372c      	adds	r7, #44	@ 0x2c
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
 8006cbc:	e001      	b.n	8006cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	807b      	strh	r3, [r7, #2]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cde:	787b      	ldrb	r3, [r7, #1]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ce4:	887a      	ldrh	r2, [r7, #2]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006cea:	e003      	b.n	8006cf4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cec:	887b      	ldrh	r3, [r7, #2]
 8006cee:	041a      	lsls	r2, r3, #16
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	611a      	str	r2, [r3, #16]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d10:	887a      	ldrh	r2, [r7, #2]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4013      	ands	r3, r2
 8006d16:	041a      	lsls	r2, r3, #16
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	43d9      	mvns	r1, r3
 8006d1c:	887b      	ldrh	r3, [r7, #2]
 8006d1e:	400b      	ands	r3, r1
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]
}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e12b      	b.n	8006f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fe fbac 	bl	80054b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	@ 0x24
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d94:	f001 feaa 	bl	8008aec <HAL_RCC_GetPCLK1Freq>
 8006d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4a81      	ldr	r2, [pc, #516]	@ (8006fa4 <HAL_I2C_Init+0x274>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d807      	bhi.n	8006db4 <HAL_I2C_Init+0x84>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a80      	ldr	r2, [pc, #512]	@ (8006fa8 <HAL_I2C_Init+0x278>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	bf94      	ite	ls
 8006dac:	2301      	movls	r3, #1
 8006dae:	2300      	movhi	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e006      	b.n	8006dc2 <HAL_I2C_Init+0x92>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a7d      	ldr	r2, [pc, #500]	@ (8006fac <HAL_I2C_Init+0x27c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	bf94      	ite	ls
 8006dbc:	2301      	movls	r3, #1
 8006dbe:	2300      	movhi	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e0e7      	b.n	8006f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a78      	ldr	r2, [pc, #480]	@ (8006fb0 <HAL_I2C_Init+0x280>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0c9b      	lsrs	r3, r3, #18
 8006dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa4 <HAL_I2C_Init+0x274>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d802      	bhi.n	8006e04 <HAL_I2C_Init+0xd4>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3301      	adds	r3, #1
 8006e02:	e009      	b.n	8006e18 <HAL_I2C_Init+0xe8>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e0a:	fb02 f303 	mul.w	r3, r2, r3
 8006e0e:	4a69      	ldr	r2, [pc, #420]	@ (8006fb4 <HAL_I2C_Init+0x284>)
 8006e10:	fba2 2303 	umull	r2, r3, r2, r3
 8006e14:	099b      	lsrs	r3, r3, #6
 8006e16:	3301      	adds	r3, #1
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	495c      	ldr	r1, [pc, #368]	@ (8006fa4 <HAL_I2C_Init+0x274>)
 8006e34:	428b      	cmp	r3, r1
 8006e36:	d819      	bhi.n	8006e6c <HAL_I2C_Init+0x13c>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1e59      	subs	r1, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006e4c:	400b      	ands	r3, r1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_I2C_Init+0x138>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1e59      	subs	r1, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e60:	3301      	adds	r3, #1
 8006e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e66:	e051      	b.n	8006f0c <HAL_I2C_Init+0x1dc>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	e04f      	b.n	8006f0c <HAL_I2C_Init+0x1dc>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d111      	bne.n	8006e98 <HAL_I2C_Init+0x168>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1e58      	subs	r0, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	440b      	add	r3, r1
 8006e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e86:	3301      	adds	r3, #1
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf0c      	ite	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	2300      	movne	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e012      	b.n	8006ebe <HAL_I2C_Init+0x18e>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1e58      	subs	r0, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	0099      	lsls	r1, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Init+0x196>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e022      	b.n	8006f0c <HAL_I2C_Init+0x1dc>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10e      	bne.n	8006eec <HAL_I2C_Init+0x1bc>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1e58      	subs	r0, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	440b      	add	r3, r1
 8006edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eea:	e00f      	b.n	8006f0c <HAL_I2C_Init+0x1dc>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1e58      	subs	r0, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	0099      	lsls	r1, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f02:	3301      	adds	r3, #1
 8006f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	6809      	ldr	r1, [r1, #0]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006f3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6911      	ldr	r1, [r2, #16]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68d2      	ldr	r2, [r2, #12]
 8006f46:	4311      	orrs	r1, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695a      	ldr	r2, [r3, #20]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	000186a0 	.word	0x000186a0
 8006fa8:	001e847f 	.word	0x001e847f
 8006fac:	003d08ff 	.word	0x003d08ff
 8006fb0:	431bde83 	.word	0x431bde83
 8006fb4:	10624dd3 	.word	0x10624dd3

08006fb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	817b      	strh	r3, [r7, #10]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fcc:	f7fe fdd0 	bl	8005b70 <HAL_GetTick>
 8006fd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	f040 80e0 	bne.w	80071a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2319      	movs	r3, #25
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4970      	ldr	r1, [pc, #448]	@ (80071ac <HAL_I2C_Master_Transmit+0x1f4>)
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 ff7e 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e0d3      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2C_Master_Transmit+0x50>
 8007004:	2302      	movs	r3, #2
 8007006:	e0cc      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b01      	cmp	r3, #1
 800701c:	d007      	beq.n	800702e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0201 	orr.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800703c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2221      	movs	r2, #33	@ 0x21
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2210      	movs	r2, #16
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	893a      	ldrh	r2, [r7, #8]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a50      	ldr	r2, [pc, #320]	@ (80071b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fd38 	bl	8007aec <I2C_MasterRequestWrite>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e08d      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007086:	2300      	movs	r3, #0
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800709c:	e066      	b.n	800716c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	6a39      	ldr	r1, [r7, #32]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f001 f83c 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d107      	bne.n	80070c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e06b      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b04      	cmp	r3, #4
 8007106:	d11b      	bne.n	8007140 <HAL_I2C_Master_Transmit+0x188>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d017      	beq.n	8007140 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	6a39      	ldr	r1, [r7, #32]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f001 f833 	bl	80081b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00d      	beq.n	800716c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007154:	2b04      	cmp	r3, #4
 8007156:	d107      	bne.n	8007168 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007166:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e01a      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007170:	2b00      	cmp	r3, #0
 8007172:	d194      	bne.n	800709e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	00100002 	.word	0x00100002
 80071b0:	ffff0000 	.word	0xffff0000

080071b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	817b      	strh	r3, [r7, #10]
 80071c6:	460b      	mov	r3, r1
 80071c8:	813b      	strh	r3, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ce:	f7fe fccf 	bl	8005b70 <HAL_GetTick>
 80071d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	f040 80d9 	bne.w	8007394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2319      	movs	r3, #25
 80071e8:	2201      	movs	r2, #1
 80071ea:	496d      	ldr	r1, [pc, #436]	@ (80073a0 <HAL_I2C_Mem_Write+0x1ec>)
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fe7d 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e0cc      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_I2C_Mem_Write+0x56>
 8007206:	2302      	movs	r3, #2
 8007208:	e0c5      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d007      	beq.n	8007230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800723e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2221      	movs	r2, #33	@ 0x21
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2240      	movs	r2, #64	@ 0x40
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a4d      	ldr	r2, [pc, #308]	@ (80073a4 <HAL_I2C_Mem_Write+0x1f0>)
 8007270:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007272:	88f8      	ldrh	r0, [r7, #6]
 8007274:	893a      	ldrh	r2, [r7, #8]
 8007276:	8979      	ldrh	r1, [r7, #10]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fcb4 	bl	8007bf0 <I2C_RequestMemoryWrite>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d052      	beq.n	8007334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e081      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 ff42 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d107      	bne.n	80072ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e06b      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11b      	bne.n	8007334 <HAL_I2C_Mem_Write+0x180>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1aa      	bne.n	8007292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 ff35 	bl	80081b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	2b04      	cmp	r3, #4
 8007352:	d107      	bne.n	8007364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e016      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	e000      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
  }
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	00100002 	.word	0x00100002
 80073a4:	ffff0000 	.word	0xffff0000

080073a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	@ 0x30
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	817b      	strh	r3, [r7, #10]
 80073ba:	460b      	mov	r3, r1
 80073bc:	813b      	strh	r3, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073c6:	f7fe fbd3 	bl	8005b70 <HAL_GetTick>
 80073ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	f040 8250 	bne.w	800787a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	2319      	movs	r3, #25
 80073e0:	2201      	movs	r2, #1
 80073e2:	4982      	ldr	r1, [pc, #520]	@ (80075ec <HAL_I2C_Mem_Read+0x244>)
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fd81 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80073f0:	2302      	movs	r3, #2
 80073f2:	e243      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_I2C_Mem_Read+0x5a>
 80073fe:	2302      	movs	r3, #2
 8007400:	e23c      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d007      	beq.n	8007428 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2222      	movs	r2, #34	@ 0x22
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2240      	movs	r2, #64	@ 0x40
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a62      	ldr	r2, [pc, #392]	@ (80075f0 <HAL_I2C_Mem_Read+0x248>)
 8007468:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800746a:	88f8      	ldrh	r0, [r7, #6]
 800746c:	893a      	ldrh	r2, [r7, #8]
 800746e:	8979      	ldrh	r1, [r7, #10]
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4603      	mov	r3, r0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fc4e 	bl	8007d1c <I2C_RequestMemoryRead>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e1f8      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d113      	bne.n	80074ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e1cc      	b.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d11e      	bne.n	8007500 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80074d2:	b672      	cpsid	i
}
 80074d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80074fc:	b662      	cpsie	i
}
 80074fe:	e035      	b.n	800756c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007504:	2b02      	cmp	r3, #2
 8007506:	d11e      	bne.n	8007546 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007516:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007518:	b672      	cpsid	i
}
 800751a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007542:	b662      	cpsie	i
}
 8007544:	e012      	b.n	800756c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007554:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800756c:	e172      	b.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007572:	2b03      	cmp	r3, #3
 8007574:	f200 811f 	bhi.w	80077b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757c:	2b01      	cmp	r3, #1
 800757e:	d123      	bne.n	80075c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007582:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fe5b 	bl	8008240 <I2C_WaitOnRXNEFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e173      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075c6:	e145      	b.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d152      	bne.n	8007676 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d6:	2200      	movs	r2, #0
 80075d8:	4906      	ldr	r1, [pc, #24]	@ (80075f4 <HAL_I2C_Mem_Read+0x24c>)
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fc86 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e148      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
 80075ea:	bf00      	nop
 80075ec:	00100002 	.word	0x00100002
 80075f0:	ffff0000 	.word	0xffff0000
 80075f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80075f8:	b672      	cpsid	i
}
 80075fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800760a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800763e:	b662      	cpsie	i
}
 8007640:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007674:	e0ee      	b.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	2200      	movs	r2, #0
 800767e:	4981      	ldr	r1, [pc, #516]	@ (8007884 <HAL_I2C_Mem_Read+0x4dc>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fc33 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0f5      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800769e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076a0:	b672      	cpsid	i
}
 80076a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007888 <HAL_I2C_Mem_Read+0x4e0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	08db      	lsrs	r3, r3, #3
 80076dc:	4a6b      	ldr	r2, [pc, #428]	@ (800788c <HAL_I2C_Mem_Read+0x4e4>)
 80076de:	fba2 2303 	umull	r2, r3, r2, r3
 80076e2:	0a1a      	lsrs	r2, r3, #8
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	00da      	lsls	r2, r3, #3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d118      	bne.n	800772e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800771e:	b662      	cpsie	i
}
 8007720:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e0a6      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b04      	cmp	r3, #4
 800773a:	d1d9      	bne.n	80076f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800774a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800777e:	b662      	cpsie	i
}
 8007780:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077b4:	e04e      	b.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fd40 	bl	8008240 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e058      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d124      	bne.n	8007854 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780e:	2b03      	cmp	r3, #3
 8007810:	d107      	bne.n	8007822 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007820:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	f47f ae88 	bne.w	800756e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3728      	adds	r7, #40	@ 0x28
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	00010004 	.word	0x00010004
 8007888:	2000005c 	.word	0x2000005c
 800788c:	14f8b589 	.word	0x14f8b589

08007890 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	@ 0x28
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	460b      	mov	r3, r1
 800789e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80078a0:	f7fe f966 	bl	8005b70 <HAL_GetTick>
 80078a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	f040 8111 	bne.w	8007ada <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2319      	movs	r3, #25
 80078be:	2201      	movs	r2, #1
 80078c0:	4988      	ldr	r1, [pc, #544]	@ (8007ae4 <HAL_I2C_IsDeviceReady+0x254>)
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fb12 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
 80078d0:	e104      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_I2C_IsDeviceReady+0x50>
 80078dc:	2302      	movs	r3, #2
 80078de:	e0fd      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d007      	beq.n	8007906 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007914:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2224      	movs	r2, #36	@ 0x24
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a70      	ldr	r2, [pc, #448]	@ (8007ae8 <HAL_I2C_IsDeviceReady+0x258>)
 8007928:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007938:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2200      	movs	r2, #0
 8007942:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fad0 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00d      	beq.n	800796e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007960:	d103      	bne.n	800796a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007968:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e0b6      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800796e:	897b      	ldrh	r3, [r7, #10]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800797c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800797e:	f7fe f8f7 	bl	8005b70 <HAL_GetTick>
 8007982:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80079b2:	e025      	b.n	8007a00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079b4:	f7fe f8dc 	bl	8005b70 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <HAL_I2C_IsDeviceReady+0x13a>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	22a0      	movs	r2, #160	@ 0xa0
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f6:	bf0c      	ite	eq
 80079f8:	2301      	moveq	r3, #1
 80079fa:	2300      	movne	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a0a:	d005      	beq.n	8007a18 <HAL_I2C_IsDeviceReady+0x188>
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <HAL_I2C_IsDeviceReady+0x188>
 8007a12:	7dbb      	ldrb	r3, [r7, #22]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0cd      	beq.n	80079b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d129      	bne.n	8007a82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2319      	movs	r3, #25
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4921      	ldr	r1, [pc, #132]	@ (8007ae4 <HAL_I2C_IsDeviceReady+0x254>)
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fa44 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e036      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e02c      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2319      	movs	r3, #25
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	490f      	ldr	r1, [pc, #60]	@ (8007ae4 <HAL_I2C_IsDeviceReady+0x254>)
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fa20 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e012      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	f4ff af32 	bcc.w	800792a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	00100002 	.word	0x00100002
 8007ae8:	ffff0000 	.word	0xffff0000

08007aec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	460b      	mov	r3, r1
 8007afa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d006      	beq.n	8007b16 <I2C_MasterRequestWrite+0x2a>
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d003      	beq.n	8007b16 <I2C_MasterRequestWrite+0x2a>
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b14:	d108      	bne.n	8007b28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e00b      	b.n	8007b40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2c:	2b12      	cmp	r3, #18
 8007b2e:	d107      	bne.n	8007b40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f9cd 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00d      	beq.n	8007b74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b66:	d103      	bne.n	8007b70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e035      	b.n	8007be0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b7c:	d108      	bne.n	8007b90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b7e:	897b      	ldrh	r3, [r7, #10]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b8c:	611a      	str	r2, [r3, #16]
 8007b8e:	e01b      	b.n	8007bc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b90:	897b      	ldrh	r3, [r7, #10]
 8007b92:	11db      	asrs	r3, r3, #7
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f003 0306 	and.w	r3, r3, #6
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f063 030f 	orn	r3, r3, #15
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	490e      	ldr	r1, [pc, #56]	@ (8007be8 <I2C_MasterRequestWrite+0xfc>)
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fa16 	bl	8007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e010      	b.n	8007be0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bbe:	897b      	ldrh	r3, [r7, #10]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4907      	ldr	r1, [pc, #28]	@ (8007bec <I2C_MasterRequestWrite+0x100>)
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fa06 	bl	8007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	00010008 	.word	0x00010008
 8007bec:	00010002 	.word	0x00010002

08007bf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	817b      	strh	r3, [r7, #10]
 8007c02:	460b      	mov	r3, r1
 8007c04:	813b      	strh	r3, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f960 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c40:	d103      	bne.n	8007c4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e05f      	b.n	8007d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	492d      	ldr	r1, [pc, #180]	@ (8007d18 <I2C_RequestMemoryWrite+0x128>)
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f9bb 	bl	8007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e04c      	b.n	8007d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8c:	6a39      	ldr	r1, [r7, #32]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fa46 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d107      	bne.n	8007cb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e02b      	b.n	8007d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cbc:	893b      	ldrh	r3, [r7, #8]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	611a      	str	r2, [r3, #16]
 8007cc6:	e021      	b.n	8007d0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd8:	6a39      	ldr	r1, [r7, #32]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fa20 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00d      	beq.n	8007d02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d107      	bne.n	8007cfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e005      	b.n	8007d0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	00010002 	.word	0x00010002

08007d1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	4608      	mov	r0, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	817b      	strh	r3, [r7, #10]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	813b      	strh	r3, [r7, #8]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f8c2 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d7c:	d103      	bne.n	8007d86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e0aa      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d8a:	897b      	ldrh	r3, [r7, #10]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	4952      	ldr	r1, [pc, #328]	@ (8007ee8 <I2C_RequestMemoryRead+0x1cc>)
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f91d 	bl	8007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e097      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc8:	6a39      	ldr	r1, [r7, #32]
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f9a8 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00d      	beq.n	8007df2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d107      	bne.n	8007dee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e076      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d105      	bne.n	8007e04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007df8:	893b      	ldrh	r3, [r7, #8]
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	611a      	str	r2, [r3, #16]
 8007e02:	e021      	b.n	8007e48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e04:	893b      	ldrh	r3, [r7, #8]
 8007e06:	0a1b      	lsrs	r3, r3, #8
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e14:	6a39      	ldr	r1, [r7, #32]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f982 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d107      	bne.n	8007e3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e050      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e4a:	6a39      	ldr	r1, [r7, #32]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f967 	bl	8008120 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00d      	beq.n	8007e74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d107      	bne.n	8007e70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e035      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f82b 	bl	8007eec <I2C_WaitOnFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00d      	beq.n	8007eb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eaa:	d103      	bne.n	8007eb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e013      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007eb8:	897b      	ldrh	r3, [r7, #10]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	6a3a      	ldr	r2, [r7, #32]
 8007ecc:	4906      	ldr	r1, [pc, #24]	@ (8007ee8 <I2C_RequestMemoryRead+0x1cc>)
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f886 	bl	8007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	00010002 	.word	0x00010002

08007eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007efc:	e048      	b.n	8007f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d044      	beq.n	8007f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f06:	f7fd fe33 	bl	8005b70 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d302      	bcc.n	8007f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d139      	bne.n	8007f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10d      	bne.n	8007f42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	43da      	mvns	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4013      	ands	r3, r2
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	e00c      	b.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	43da      	mvns	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bf0c      	ite	eq
 8007f54:	2301      	moveq	r3, #1
 8007f56:	2300      	movne	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d116      	bne.n	8007f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7c:	f043 0220 	orr.w	r2, r3, #32
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e023      	b.n	8007fd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d10d      	bne.n	8007fb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	43da      	mvns	r2, r3
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	e00c      	b.n	8007fd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	43da      	mvns	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d093      	beq.n	8007efe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fee:	e071      	b.n	80080d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ffe:	d123      	bne.n	8008048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800800e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	f043 0204 	orr.w	r2, r3, #4
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e067      	b.n	8008118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d041      	beq.n	80080d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008050:	f7fd fd8e 	bl	8005b70 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d302      	bcc.n	8008066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d136      	bne.n	80080d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10c      	bne.n	800808a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	43da      	mvns	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf14      	ite	ne
 8008082:	2301      	movne	r3, #1
 8008084:	2300      	moveq	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	e00b      	b.n	80080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	43da      	mvns	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4013      	ands	r3, r2
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf14      	ite	ne
 800809c:	2301      	movne	r3, #1
 800809e:	2300      	moveq	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e021      	b.n	8008118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	0c1b      	lsrs	r3, r3, #16
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d10c      	bne.n	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	43da      	mvns	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4013      	ands	r3, r2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf14      	ite	ne
 80080f0:	2301      	movne	r3, #1
 80080f2:	2300      	moveq	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	e00b      	b.n	8008110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	43da      	mvns	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4013      	ands	r3, r2
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2301      	movne	r3, #1
 800810c:	2300      	moveq	r3, #0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af6d 	bne.w	8007ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800812c:	e034      	b.n	8008198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f8e3 	bl	80082fa <I2C_IsAcknowledgeFailed>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e034      	b.n	80081a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008144:	d028      	beq.n	8008198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7fd fd13 	bl	8005b70 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11d      	bne.n	8008198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008166:	2b80      	cmp	r3, #128	@ 0x80
 8008168:	d016      	beq.n	8008198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	f043 0220 	orr.w	r2, r3, #32
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e007      	b.n	80081a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081a2:	2b80      	cmp	r3, #128	@ 0x80
 80081a4:	d1c3      	bne.n	800812e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081bc:	e034      	b.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f89b 	bl	80082fa <I2C_IsAcknowledgeFailed>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e034      	b.n	8008238 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d028      	beq.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	f7fd fccb 	bl	8005b70 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11d      	bne.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d016      	beq.n	8008228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008214:	f043 0220 	orr.w	r2, r3, #32
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e007      	b.n	8008238 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b04      	cmp	r3, #4
 8008234:	d1c3      	bne.n	80081be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800824c:	e049      	b.n	80082e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d119      	bne.n	8008290 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0210 	mvn.w	r2, #16
 8008264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e030      	b.n	80082f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008290:	f7fd fc6e 	bl	8005b70 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	d302      	bcc.n	80082a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11d      	bne.n	80082e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	d016      	beq.n	80082e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ce:	f043 0220 	orr.w	r2, r3, #32
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e007      	b.n	80082f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	d1ae      	bne.n	800824e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008310:	d11b      	bne.n	800834a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800831a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008336:	f043 0204 	orr.w	r2, r3, #4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr
	...

08008358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e272      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8087 	beq.w	8008486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008378:	4b92      	ldr	r3, [pc, #584]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b04      	cmp	r3, #4
 8008382:	d00c      	beq.n	800839e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008384:	4b8f      	ldr	r3, [pc, #572]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f003 030c 	and.w	r3, r3, #12
 800838c:	2b08      	cmp	r3, #8
 800838e:	d112      	bne.n	80083b6 <HAL_RCC_OscConfig+0x5e>
 8008390:	4b8c      	ldr	r3, [pc, #560]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839c:	d10b      	bne.n	80083b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839e:	4b89      	ldr	r3, [pc, #548]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d06c      	beq.n	8008484 <HAL_RCC_OscConfig+0x12c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d168      	bne.n	8008484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e24c      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083be:	d106      	bne.n	80083ce <HAL_RCC_OscConfig+0x76>
 80083c0:	4b80      	ldr	r3, [pc, #512]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a7f      	ldr	r2, [pc, #508]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	e02e      	b.n	800842c <HAL_RCC_OscConfig+0xd4>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10c      	bne.n	80083f0 <HAL_RCC_OscConfig+0x98>
 80083d6:	4b7b      	ldr	r3, [pc, #492]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a7a      	ldr	r2, [pc, #488]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	4b78      	ldr	r3, [pc, #480]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a77      	ldr	r2, [pc, #476]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	e01d      	b.n	800842c <HAL_RCC_OscConfig+0xd4>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083f8:	d10c      	bne.n	8008414 <HAL_RCC_OscConfig+0xbc>
 80083fa:	4b72      	ldr	r3, [pc, #456]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a71      	ldr	r2, [pc, #452]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b6f      	ldr	r3, [pc, #444]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6e      	ldr	r2, [pc, #440]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 800840c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e00b      	b.n	800842c <HAL_RCC_OscConfig+0xd4>
 8008414:	4b6b      	ldr	r3, [pc, #428]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a6a      	ldr	r2, [pc, #424]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 800841a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b68      	ldr	r3, [pc, #416]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a67      	ldr	r2, [pc, #412]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800842a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d013      	beq.n	800845c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008434:	f7fd fb9c 	bl	8005b70 <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800843c:	f7fd fb98 	bl	8005b70 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	@ 0x64
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e200      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800844e:	4b5d      	ldr	r3, [pc, #372]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0xe4>
 800845a:	e014      	b.n	8008486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845c:	f7fd fb88 	bl	8005b70 <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008464:	f7fd fb84 	bl	8005b70 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	@ 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1ec      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008476:	4b53      	ldr	r3, [pc, #332]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f0      	bne.n	8008464 <HAL_RCC_OscConfig+0x10c>
 8008482:	e000      	b.n	8008486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d063      	beq.n	800855a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008492:	4b4c      	ldr	r3, [pc, #304]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f003 030c 	and.w	r3, r3, #12
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800849e:	4b49      	ldr	r3, [pc, #292]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f003 030c 	and.w	r3, r3, #12
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d11c      	bne.n	80084e4 <HAL_RCC_OscConfig+0x18c>
 80084aa:	4b46      	ldr	r3, [pc, #280]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d116      	bne.n	80084e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084b6:	4b43      	ldr	r3, [pc, #268]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <HAL_RCC_OscConfig+0x176>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d001      	beq.n	80084ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e1c0      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ce:	4b3d      	ldr	r3, [pc, #244]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4939      	ldr	r1, [pc, #228]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084e2:	e03a      	b.n	800855a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d020      	beq.n	800852e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084ec:	4b36      	ldr	r3, [pc, #216]	@ (80085c8 <HAL_RCC_OscConfig+0x270>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f2:	f7fd fb3d 	bl	8005b70 <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f8:	e008      	b.n	800850c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084fa:	f7fd fb39 	bl	8005b70 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e1a1      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800850c:	4b2d      	ldr	r3, [pc, #180]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0f0      	beq.n	80084fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008518:	4b2a      	ldr	r3, [pc, #168]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4927      	ldr	r1, [pc, #156]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008528:	4313      	orrs	r3, r2
 800852a:	600b      	str	r3, [r1, #0]
 800852c:	e015      	b.n	800855a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800852e:	4b26      	ldr	r3, [pc, #152]	@ (80085c8 <HAL_RCC_OscConfig+0x270>)
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008534:	f7fd fb1c 	bl	8005b70 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800853c:	f7fd fb18 	bl	8005b70 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e180      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800854e:	4b1d      	ldr	r3, [pc, #116]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f0      	bne.n	800853c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d03a      	beq.n	80085dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d019      	beq.n	80085a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800856e:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <HAL_RCC_OscConfig+0x274>)
 8008570:	2201      	movs	r2, #1
 8008572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008574:	f7fd fafc 	bl	8005b70 <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800857c:	f7fd faf8 	bl	8005b70 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e160      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800858e:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <HAL_RCC_OscConfig+0x26c>)
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800859a:	2001      	movs	r0, #1
 800859c:	f000 face 	bl	8008b3c <RCC_Delay>
 80085a0:	e01c      	b.n	80085dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085a2:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <HAL_RCC_OscConfig+0x274>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085a8:	f7fd fae2 	bl	8005b70 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085ae:	e00f      	b.n	80085d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085b0:	f7fd fade 	bl	8005b70 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d908      	bls.n	80085d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e146      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000
 80085c8:	42420000 	.word	0x42420000
 80085cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d0:	4b92      	ldr	r3, [pc, #584]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e9      	bne.n	80085b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80a6 	beq.w	8008736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085ee:	4b8b      	ldr	r3, [pc, #556]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10d      	bne.n	8008616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085fa:	4b88      	ldr	r3, [pc, #544]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4a87      	ldr	r2, [pc, #540]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008604:	61d3      	str	r3, [r2, #28]
 8008606:	4b85      	ldr	r3, [pc, #532]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008612:	2301      	movs	r3, #1
 8008614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008616:	4b82      	ldr	r3, [pc, #520]	@ (8008820 <HAL_RCC_OscConfig+0x4c8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d118      	bne.n	8008654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008622:	4b7f      	ldr	r3, [pc, #508]	@ (8008820 <HAL_RCC_OscConfig+0x4c8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a7e      	ldr	r2, [pc, #504]	@ (8008820 <HAL_RCC_OscConfig+0x4c8>)
 8008628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800862c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800862e:	f7fd fa9f 	bl	8005b70 <HAL_GetTick>
 8008632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008636:	f7fd fa9b 	bl	8005b70 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b64      	cmp	r3, #100	@ 0x64
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e103      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008648:	4b75      	ldr	r3, [pc, #468]	@ (8008820 <HAL_RCC_OscConfig+0x4c8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d106      	bne.n	800866a <HAL_RCC_OscConfig+0x312>
 800865c:	4b6f      	ldr	r3, [pc, #444]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	4a6e      	ldr	r2, [pc, #440]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	6213      	str	r3, [r2, #32]
 8008668:	e02d      	b.n	80086c6 <HAL_RCC_OscConfig+0x36e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10c      	bne.n	800868c <HAL_RCC_OscConfig+0x334>
 8008672:	4b6a      	ldr	r3, [pc, #424]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	4a69      	ldr	r2, [pc, #420]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	6213      	str	r3, [r2, #32]
 800867e:	4b67      	ldr	r3, [pc, #412]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	4a66      	ldr	r2, [pc, #408]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008684:	f023 0304 	bic.w	r3, r3, #4
 8008688:	6213      	str	r3, [r2, #32]
 800868a:	e01c      	b.n	80086c6 <HAL_RCC_OscConfig+0x36e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	2b05      	cmp	r3, #5
 8008692:	d10c      	bne.n	80086ae <HAL_RCC_OscConfig+0x356>
 8008694:	4b61      	ldr	r3, [pc, #388]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	4a60      	ldr	r2, [pc, #384]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800869a:	f043 0304 	orr.w	r3, r3, #4
 800869e:	6213      	str	r3, [r2, #32]
 80086a0:	4b5e      	ldr	r3, [pc, #376]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	4a5d      	ldr	r2, [pc, #372]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	6213      	str	r3, [r2, #32]
 80086ac:	e00b      	b.n	80086c6 <HAL_RCC_OscConfig+0x36e>
 80086ae:	4b5b      	ldr	r3, [pc, #364]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	4a5a      	ldr	r2, [pc, #360]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086b4:	f023 0301 	bic.w	r3, r3, #1
 80086b8:	6213      	str	r3, [r2, #32]
 80086ba:	4b58      	ldr	r3, [pc, #352]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	4a57      	ldr	r2, [pc, #348]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086c0:	f023 0304 	bic.w	r3, r3, #4
 80086c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d015      	beq.n	80086fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ce:	f7fd fa4f 	bl	8005b70 <HAL_GetTick>
 80086d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d4:	e00a      	b.n	80086ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d6:	f7fd fa4b 	bl	8005b70 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d901      	bls.n	80086ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e0b1      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ec:	4b4b      	ldr	r3, [pc, #300]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0ee      	beq.n	80086d6 <HAL_RCC_OscConfig+0x37e>
 80086f8:	e014      	b.n	8008724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086fa:	f7fd fa39 	bl	8005b70 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008700:	e00a      	b.n	8008718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008702:	f7fd fa35 	bl	8005b70 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e09b      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008718:	4b40      	ldr	r3, [pc, #256]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1ee      	bne.n	8008702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d105      	bne.n	8008736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800872a:	4b3c      	ldr	r3, [pc, #240]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	4a3b      	ldr	r2, [pc, #236]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8087 	beq.w	800884e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008740:	4b36      	ldr	r3, [pc, #216]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 030c 	and.w	r3, r3, #12
 8008748:	2b08      	cmp	r3, #8
 800874a:	d061      	beq.n	8008810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d146      	bne.n	80087e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008754:	4b33      	ldr	r3, [pc, #204]	@ (8008824 <HAL_RCC_OscConfig+0x4cc>)
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875a:	f7fd fa09 	bl	8005b70 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008762:	f7fd fa05 	bl	8005b70 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e06d      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008774:	4b29      	ldr	r3, [pc, #164]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1f0      	bne.n	8008762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d108      	bne.n	800879c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800878a:	4b24      	ldr	r3, [pc, #144]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4921      	ldr	r1, [pc, #132]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008798:	4313      	orrs	r3, r2
 800879a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800879c:	4b1f      	ldr	r3, [pc, #124]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a19      	ldr	r1, [r3, #32]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	430b      	orrs	r3, r1
 80087ae:	491b      	ldr	r1, [pc, #108]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008824 <HAL_RCC_OscConfig+0x4cc>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ba:	f7fd f9d9 	bl	8005b70 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087c0:	e008      	b.n	80087d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c2:	f7fd f9d5 	bl	8005b70 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e03d      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087d4:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0f0      	beq.n	80087c2 <HAL_RCC_OscConfig+0x46a>
 80087e0:	e035      	b.n	800884e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <HAL_RCC_OscConfig+0x4cc>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e8:	f7fd f9c2 	bl	8005b70 <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f0:	f7fd f9be 	bl	8005b70 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e026      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008802:	4b06      	ldr	r3, [pc, #24]	@ (800881c <HAL_RCC_OscConfig+0x4c4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x498>
 800880e:	e01e      	b.n	800884e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d107      	bne.n	8008828 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e019      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
 800881c:	40021000 	.word	0x40021000
 8008820:	40007000 	.word	0x40007000
 8008824:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008828:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <HAL_RCC_OscConfig+0x500>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	429a      	cmp	r2, r3
 800883a:	d106      	bne.n	800884a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d001      	beq.n	800884e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40021000 	.word	0x40021000

0800885c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e0d0      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008870:	4b6a      	ldr	r3, [pc, #424]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d910      	bls.n	80088a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887e:	4b67      	ldr	r3, [pc, #412]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f023 0207 	bic.w	r2, r3, #7
 8008886:	4965      	ldr	r1, [pc, #404]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	4313      	orrs	r3, r2
 800888c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800888e:	4b63      	ldr	r3, [pc, #396]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e0b8      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d020      	beq.n	80088ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088b8:	4b59      	ldr	r3, [pc, #356]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4a58      	ldr	r2, [pc, #352]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80088c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088d0:	4b53      	ldr	r3, [pc, #332]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	4a52      	ldr	r2, [pc, #328]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80088da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088dc:	4b50      	ldr	r3, [pc, #320]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	494d      	ldr	r1, [pc, #308]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d040      	beq.n	800897c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d107      	bne.n	8008912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008902:	4b47      	ldr	r3, [pc, #284]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d115      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e07f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d107      	bne.n	800892a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800891a:	4b41      	ldr	r3, [pc, #260]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e073      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e06b      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800893a:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f023 0203 	bic.w	r2, r3, #3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	4936      	ldr	r1, [pc, #216]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 8008948:	4313      	orrs	r3, r2
 800894a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800894c:	f7fd f910 	bl	8005b70 <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008952:	e00a      	b.n	800896a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008954:	f7fd f90c 	bl	8005b70 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008962:	4293      	cmp	r3, r2
 8008964:	d901      	bls.n	800896a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e053      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f003 020c 	and.w	r2, r3, #12
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	429a      	cmp	r2, r3
 800897a:	d1eb      	bne.n	8008954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800897c:	4b27      	ldr	r3, [pc, #156]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d210      	bcs.n	80089ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b24      	ldr	r3, [pc, #144]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f023 0207 	bic.w	r2, r3, #7
 8008992:	4922      	ldr	r1, [pc, #136]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	4313      	orrs	r3, r2
 8008998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b20      	ldr	r3, [pc, #128]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e032      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b8:	4b19      	ldr	r3, [pc, #100]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	4916      	ldr	r1, [pc, #88]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089d6:	4b12      	ldr	r3, [pc, #72]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	490e      	ldr	r1, [pc, #56]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80089ea:	f000 f821 	bl	8008a30 <HAL_RCC_GetSysClockFreq>
 80089ee:	4602      	mov	r2, r0
 80089f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	490a      	ldr	r1, [pc, #40]	@ (8008a24 <HAL_RCC_ClockConfig+0x1c8>)
 80089fc:	5ccb      	ldrb	r3, [r1, r3]
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	4a09      	ldr	r2, [pc, #36]	@ (8008a28 <HAL_RCC_ClockConfig+0x1cc>)
 8008a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a06:	4b09      	ldr	r3, [pc, #36]	@ (8008a2c <HAL_RCC_ClockConfig+0x1d0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd f86e 	bl	8005aec <HAL_InitTick>

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40022000 	.word	0x40022000
 8008a20:	40021000 	.word	0x40021000
 8008a24:	0800d798 	.word	0x0800d798
 8008a28:	2000005c 	.word	0x2000005c
 8008a2c:	20000060 	.word	0x20000060

08008a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 030c 	and.w	r3, r3, #12
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	d002      	beq.n	8008a60 <HAL_RCC_GetSysClockFreq+0x30>
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d003      	beq.n	8008a66 <HAL_RCC_GetSysClockFreq+0x36>
 8008a5e:	e027      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a60:	4b19      	ldr	r3, [pc, #100]	@ (8008ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a62:	613b      	str	r3, [r7, #16]
      break;
 8008a64:	e027      	b.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	0c9b      	lsrs	r3, r3, #18
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	4a17      	ldr	r2, [pc, #92]	@ (8008acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a70:	5cd3      	ldrb	r3, [r2, r3]
 8008a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d010      	beq.n	8008aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	0c5b      	lsrs	r3, r3, #17
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	4a11      	ldr	r2, [pc, #68]	@ (8008ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a8a:	5cd3      	ldrb	r3, [r2, r3]
 8008a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a92:	fb03 f202 	mul.w	r2, r3, r2
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	e004      	b.n	8008aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008aa4:	fb02 f303 	mul.w	r3, r2, r3
 8008aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	613b      	str	r3, [r7, #16]
      break;
 8008aae:	e002      	b.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	@ (8008ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008ab2:	613b      	str	r3, [r7, #16]
      break;
 8008ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ab6:	693b      	ldr	r3, [r7, #16]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40021000 	.word	0x40021000
 8008ac8:	007a1200 	.word	0x007a1200
 8008acc:	0800d7b0 	.word	0x0800d7b0
 8008ad0:	0800d7c0 	.word	0x0800d7c0
 8008ad4:	003d0900 	.word	0x003d0900

08008ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008adc:	4b02      	ldr	r3, [pc, #8]	@ (8008ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr
 8008ae8:	2000005c 	.word	0x2000005c

08008aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008af0:	f7ff fff2 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b05      	ldr	r3, [pc, #20]	@ (8008b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	0a1b      	lsrs	r3, r3, #8
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	4903      	ldr	r1, [pc, #12]	@ (8008b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40021000 	.word	0x40021000
 8008b10:	0800d7a8 	.word	0x0800d7a8

08008b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b18:	f7ff ffde 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	0adb      	lsrs	r3, r3, #11
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	4903      	ldr	r1, [pc, #12]	@ (8008b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b2a:	5ccb      	ldrb	r3, [r1, r3]
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40021000 	.word	0x40021000
 8008b38:	0800d7a8 	.word	0x0800d7a8

08008b3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008b44:	4b0a      	ldr	r3, [pc, #40]	@ (8008b70 <RCC_Delay+0x34>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a0a      	ldr	r2, [pc, #40]	@ (8008b74 <RCC_Delay+0x38>)
 8008b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4e:	0a5b      	lsrs	r3, r3, #9
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008b58:	bf00      	nop
  }
  while (Delay --);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1e5a      	subs	r2, r3, #1
 8008b5e:	60fa      	str	r2, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1f9      	bne.n	8008b58 <RCC_Delay+0x1c>
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr
 8008b70:	2000005c 	.word	0x2000005c
 8008b74:	10624dd3 	.word	0x10624dd3

08008b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d07d      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b98:	4b4f      	ldr	r3, [pc, #316]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10d      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bae:	61d3      	str	r3, [r2, #28]
 8008bb0:	4b49      	ldr	r3, [pc, #292]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bc0:	4b46      	ldr	r3, [pc, #280]	@ (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d118      	bne.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bcc:	4b43      	ldr	r3, [pc, #268]	@ (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a42      	ldr	r2, [pc, #264]	@ (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bd8:	f7fc ffca 	bl	8005b70 <HAL_GetTick>
 8008bdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bde:	e008      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be0:	f7fc ffc6 	bl	8005b70 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b64      	cmp	r3, #100	@ 0x64
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e06d      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f0      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bfe:	4b36      	ldr	r3, [pc, #216]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d02e      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d027      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c26:	4b2e      	ldr	r3, [pc, #184]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008c32:	4a29      	ldr	r2, [pc, #164]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d014      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c42:	f7fc ff95 	bl	8005b70 <HAL_GetTick>
 8008c46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c48:	e00a      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4a:	f7fc ff91 	bl	8005b70 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e036      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c60:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0ee      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	4917      	ldr	r1, [pc, #92]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d105      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c84:	4b14      	ldr	r3, [pc, #80]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	4a13      	ldr	r2, [pc, #76]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	490b      	ldr	r1, [pc, #44]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cba:	4b07      	ldr	r3, [pc, #28]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	4904      	ldr	r1, [pc, #16]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	40007000 	.word	0x40007000
 8008ce0:	42420440 	.word	0x42420440

08008ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b10      	cmp	r3, #16
 8008d04:	d00a      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	f200 808a 	bhi.w	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d045      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d075      	beq.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008d1a:	e082      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008d1c:	4b46      	ldr	r3, [pc, #280]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008d22:	4b45      	ldr	r3, [pc, #276]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d07b      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	0c9b      	lsrs	r3, r3, #18
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	4a41      	ldr	r2, [pc, #260]	@ (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008d38:	5cd3      	ldrb	r3, [r2, r3]
 8008d3a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d015      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008d46:	4b3c      	ldr	r3, [pc, #240]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	0c5b      	lsrs	r3, r3, #17
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	4a3b      	ldr	r2, [pc, #236]	@ (8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008d52:	5cd3      	ldrb	r3, [r2, r3]
 8008d54:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008d60:	4a38      	ldr	r2, [pc, #224]	@ (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	fb02 f303 	mul.w	r3, r2, r3
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	e004      	b.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4a34      	ldr	r2, [pc, #208]	@ (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d88:	d102      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	61bb      	str	r3, [r7, #24]
      break;
 8008d8e:	e04a      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	4a2d      	ldr	r2, [pc, #180]	@ (8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008d96:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	61bb      	str	r3, [r7, #24]
      break;
 8008d9e:	e042      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008da0:	4b25      	ldr	r3, [pc, #148]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db0:	d108      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dc0:	61bb      	str	r3, [r7, #24]
 8008dc2:	e01f      	b.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dce:	d109      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008dd0:	4b19      	ldr	r3, [pc, #100]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008ddc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	e00f      	b.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dee:	d11c      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008df0:	4b11      	ldr	r3, [pc, #68]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d016      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008dfc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008e00:	61bb      	str	r3, [r7, #24]
      break;
 8008e02:	e012      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008e04:	e011      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008e06:	f7ff fe85 	bl	8008b14 <HAL_RCC_GetPCLK2Freq>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	0b9b      	lsrs	r3, r3, #14
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	3301      	adds	r3, #1
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	61bb      	str	r3, [r7, #24]
      break;
 8008e20:	e004      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008e22:	bf00      	nop
 8008e24:	e002      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008e26:	bf00      	nop
 8008e28:	e000      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008e2a:	bf00      	nop
    }
  }
  return (frequency);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40021000 	.word	0x40021000
 8008e3c:	0800d7c4 	.word	0x0800d7c4
 8008e40:	0800d7d4 	.word	0x0800d7d4
 8008e44:	007a1200 	.word	0x007a1200
 8008e48:	003d0900 	.word	0x003d0900
 8008e4c:	aaaaaaab 	.word	0xaaaaaaab

08008e50 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d011      	beq.n	8008e8a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f815 	bl	8008ea4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0202 	bic.w	r2, r2, #2
 8008e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008e8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008e8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008e90:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	745a      	strb	r2, [r3, #17]
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40010400 	.word	0x40010400

08008ea4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e076      	b.n	8008fb6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d108      	bne.n	8008ee2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ed8:	d009      	beq.n	8008eee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	61da      	str	r2, [r3, #28]
 8008ee0:	e005      	b.n	8008eee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d106      	bne.n	8008f0e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fc fb13 	bl	8005534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f72:	ea42 0103 	orr.w	r1, r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	0c1a      	lsrs	r2, r3, #16
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f002 0204 	and.w	r2, r2, #4
 8008f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fce:	f7fc fdcf 	bl	8005b70 <HAL_GetTick>
 8008fd2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d001      	beq.n	8008fe8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e12a      	b.n	800923e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_SPI_Transmit+0x36>
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e122      	b.n	800923e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_SPI_Transmit+0x48>
 8009002:	2302      	movs	r3, #2
 8009004:	e11b      	b.n	800923e <HAL_SPI_Transmit+0x280>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2203      	movs	r2, #3
 8009012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	88fa      	ldrh	r2, [r7, #6]
 8009026:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009054:	d10f      	bne.n	8009076 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b40      	cmp	r3, #64	@ 0x40
 8009082:	d007      	beq.n	8009094 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800909c:	d152      	bne.n	8009144 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_Transmit+0xee>
 80090a6:	8b7b      	ldrh	r3, [r7, #26]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d145      	bne.n	8009138 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	881a      	ldrh	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090bc:	1c9a      	adds	r2, r3, #2
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090d0:	e032      	b.n	8009138 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d112      	bne.n	8009106 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e4:	881a      	ldrh	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f0:	1c9a      	adds	r2, r3, #2
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009104:	e018      	b.n	8009138 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009106:	f7fc fd33 	bl	8005b70 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d803      	bhi.n	800911e <HAL_SPI_Transmit+0x160>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d102      	bne.n	8009124 <HAL_SPI_Transmit+0x166>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d109      	bne.n	8009138 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e082      	b.n	800923e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1c7      	bne.n	80090d2 <HAL_SPI_Transmit+0x114>
 8009142:	e053      	b.n	80091ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <HAL_SPI_Transmit+0x194>
 800914c:	8b7b      	ldrh	r3, [r7, #26]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d147      	bne.n	80091e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	330c      	adds	r3, #12
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009178:	e033      	b.n	80091e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b02      	cmp	r3, #2
 8009186:	d113      	bne.n	80091b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80091ae:	e018      	b.n	80091e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091b0:	f7fc fcde 	bl	8005b70 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d803      	bhi.n	80091c8 <HAL_SPI_Transmit+0x20a>
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d102      	bne.n	80091ce <HAL_SPI_Transmit+0x210>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e02d      	b.n	800923e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1c6      	bne.n	800917a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fbc5 	bl	8009980 <SPI_EndRxTxTransaction>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2220      	movs	r2, #32
 8009200:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800923c:	2300      	movs	r3, #0
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b088      	sub	sp, #32
 800924a:	af02      	add	r7, sp, #8
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	603b      	str	r3, [r7, #0]
 8009252:	4613      	mov	r3, r2
 8009254:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b01      	cmp	r3, #1
 8009260:	d001      	beq.n	8009266 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009262:	2302      	movs	r3, #2
 8009264:	e104      	b.n	8009470 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800926e:	d112      	bne.n	8009296 <HAL_SPI_Receive+0x50>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10e      	bne.n	8009296 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2204      	movs	r2, #4
 800927c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009280:	88fa      	ldrh	r2, [r7, #6]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f8f3 	bl	8009478 <HAL_SPI_TransmitReceive>
 8009292:	4603      	mov	r3, r0
 8009294:	e0ec      	b.n	8009470 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009296:	f7fc fc6b 	bl	8005b70 <HAL_GetTick>
 800929a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <HAL_SPI_Receive+0x62>
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e0e1      	b.n	8009470 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_SPI_Receive+0x74>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e0da      	b.n	8009470 <HAL_SPI_Receive+0x22a>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2204      	movs	r2, #4
 80092c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	88fa      	ldrh	r2, [r7, #6]
 80092da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009308:	d10f      	bne.n	800932a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009318:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009328:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009334:	2b40      	cmp	r3, #64	@ 0x40
 8009336:	d007      	beq.n	8009348 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009346:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d170      	bne.n	8009432 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009350:	e035      	b.n	80093be <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b01      	cmp	r3, #1
 800935e:	d115      	bne.n	800938c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f103 020c 	add.w	r2, r3, #12
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936c:	7812      	ldrb	r2, [r2, #0]
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800938a:	e018      	b.n	80093be <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800938c:	f7fc fbf0 	bl	8005b70 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d803      	bhi.n	80093a4 <HAL_SPI_Receive+0x15e>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a2:	d102      	bne.n	80093aa <HAL_SPI_Receive+0x164>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e058      	b.n	8009470 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1c4      	bne.n	8009352 <HAL_SPI_Receive+0x10c>
 80093c8:	e038      	b.n	800943c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d113      	bne.n	8009400 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e2:	b292      	uxth	r2, r2
 80093e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ea:	1c9a      	adds	r2, r3, #2
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80093fe:	e018      	b.n	8009432 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009400:	f7fc fbb6 	bl	8005b70 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d803      	bhi.n	8009418 <HAL_SPI_Receive+0x1d2>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009416:	d102      	bne.n	800941e <HAL_SPI_Receive+0x1d8>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e01e      	b.n	8009470 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009436:	b29b      	uxth	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1c6      	bne.n	80093ca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 fa4b 	bl	80098dc <SPI_EndRxTransaction>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800946e:	2300      	movs	r3, #0
  }
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	@ 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009486:	2301      	movs	r3, #1
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800948a:	f7fc fb71 	bl	8005b70 <HAL_GetTick>
 800948e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009496:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094a2:	7ffb      	ldrb	r3, [r7, #31]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d00c      	beq.n	80094c2 <HAL_SPI_TransmitReceive+0x4a>
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094ae:	d106      	bne.n	80094be <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <HAL_SPI_TransmitReceive+0x46>
 80094b8:	7ffb      	ldrb	r3, [r7, #31]
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d001      	beq.n	80094c2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
 80094c0:	e17f      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_SPI_TransmitReceive+0x5c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_SPI_TransmitReceive+0x5c>
 80094ce:	887b      	ldrh	r3, [r7, #2]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e174      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x6e>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e16d      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d003      	beq.n	8009502 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2205      	movs	r2, #5
 80094fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	887a      	ldrh	r2, [r7, #2]
 8009512:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	887a      	ldrh	r2, [r7, #2]
 8009518:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	887a      	ldrh	r2, [r7, #2]
 8009524:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	887a      	ldrh	r2, [r7, #2]
 800952a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009542:	2b40      	cmp	r3, #64	@ 0x40
 8009544:	d007      	beq.n	8009556 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800955e:	d17e      	bne.n	800965e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <HAL_SPI_TransmitReceive+0xf6>
 8009568:	8afb      	ldrh	r3, [r7, #22]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d16c      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009572:	881a      	ldrh	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957e:	1c9a      	adds	r2, r3, #2
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009592:	e059      	b.n	8009648 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d11b      	bne.n	80095da <HAL_SPI_TransmitReceive+0x162>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d016      	beq.n	80095da <HAL_SPI_TransmitReceive+0x162>
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d113      	bne.n	80095da <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b6:	881a      	ldrh	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c2:	1c9a      	adds	r2, r3, #2
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d119      	bne.n	800961c <HAL_SPI_TransmitReceive+0x1a4>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d014      	beq.n	800961c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	b292      	uxth	r2, r2
 80095fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	1c9a      	adds	r2, r3, #2
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800960e:	b29b      	uxth	r3, r3
 8009610:	3b01      	subs	r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009618:	2301      	movs	r3, #1
 800961a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800961c:	f7fc faa8 	bl	8005b70 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009628:	429a      	cmp	r2, r3
 800962a:	d80d      	bhi.n	8009648 <HAL_SPI_TransmitReceive+0x1d0>
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d009      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e0bc      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1a0      	bne.n	8009594 <HAL_SPI_TransmitReceive+0x11c>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d19b      	bne.n	8009594 <HAL_SPI_TransmitReceive+0x11c>
 800965c:	e082      	b.n	8009764 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <HAL_SPI_TransmitReceive+0x1f4>
 8009666:	8afb      	ldrh	r3, [r7, #22]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d171      	bne.n	8009750 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	7812      	ldrb	r2, [r2, #0]
 8009678:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009692:	e05d      	b.n	8009750 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d11c      	bne.n	80096dc <HAL_SPI_TransmitReceive+0x264>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d017      	beq.n	80096dc <HAL_SPI_TransmitReceive+0x264>
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d114      	bne.n	80096dc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3b01      	subs	r3, #1
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d119      	bne.n	800971e <HAL_SPI_TransmitReceive+0x2a6>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d014      	beq.n	800971e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800971a:	2301      	movs	r3, #1
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800971e:	f7fc fa27 	bl	8005b70 <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800972a:	429a      	cmp	r2, r3
 800972c:	d803      	bhi.n	8009736 <HAL_SPI_TransmitReceive+0x2be>
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d102      	bne.n	800973c <HAL_SPI_TransmitReceive+0x2c4>
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e038      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d19c      	bne.n	8009694 <HAL_SPI_TransmitReceive+0x21c>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800975e:	b29b      	uxth	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d197      	bne.n	8009694 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009764:	6a3a      	ldr	r2, [r7, #32]
 8009766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f909 	bl	8009980 <SPI_EndRxTxTransaction>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d008      	beq.n	8009786 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e01d      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e000      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80097c0:	2300      	movs	r3, #0
  }
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3728      	adds	r7, #40	@ 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	4613      	mov	r3, r2
 80097da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097dc:	f7fc f9c8 	bl	8005b70 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4413      	add	r3, r2
 80097ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097ec:	f7fc f9c0 	bl	8005b70 <HAL_GetTick>
 80097f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097f2:	4b39      	ldr	r3, [pc, #228]	@ (80098d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	015b      	lsls	r3, r3, #5
 80097f8:	0d1b      	lsrs	r3, r3, #20
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	fb02 f303 	mul.w	r3, r2, r3
 8009800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009802:	e054      	b.n	80098ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d050      	beq.n	80098ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800980c:	f7fc f9b0 	bl	8005b70 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	429a      	cmp	r2, r3
 800981a:	d902      	bls.n	8009822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d13d      	bne.n	800989e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800983a:	d111      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009844:	d004      	beq.n	8009850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984e:	d107      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800985e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009868:	d10f      	bne.n	800988a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e017      	b.n	80098ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4013      	ands	r3, r2
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	bf0c      	ite	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	2300      	movne	r3, #0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d19b      	bne.n	8009804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2000005c 	.word	0x2000005c

080098dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098f0:	d111      	bne.n	8009916 <SPI_EndRxTransaction+0x3a>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098fa:	d004      	beq.n	8009906 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009904:	d107      	bne.n	8009916 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009914:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800991e:	d117      	bne.n	8009950 <SPI_EndRxTransaction+0x74>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009928:	d112      	bne.n	8009950 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2200      	movs	r2, #0
 8009932:	2101      	movs	r1, #1
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f7ff ff49 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01a      	beq.n	8009976 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	f043 0220 	orr.w	r2, r3, #32
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e013      	b.n	8009978 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2200      	movs	r2, #0
 8009958:	2180      	movs	r1, #128	@ 0x80
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff ff36 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d007      	beq.n	8009976 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996a:	f043 0220 	orr.w	r2, r3, #32
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e000      	b.n	8009978 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af02      	add	r7, sp, #8
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2201      	movs	r2, #1
 8009994:	2102      	movs	r1, #2
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f7ff ff18 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a6:	f043 0220 	orr.w	r2, r3, #32
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e013      	b.n	80099da <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2200      	movs	r2, #0
 80099ba:	2180      	movs	r1, #128	@ 0x80
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff ff05 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099cc:	f043 0220 	orr.w	r2, r3, #32
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e000      	b.n	80099da <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e041      	b.n	8009a78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d106      	bne.n	8009a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7fb fded 	bl	80055e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f000 f93f 	bl	8009ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d001      	beq.n	8009a98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e032      	b.n	8009afe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a18      	ldr	r2, [pc, #96]	@ (8009b08 <HAL_TIM_Base_Start+0x88>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00e      	beq.n	8009ac8 <HAL_TIM_Base_Start+0x48>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ab2:	d009      	beq.n	8009ac8 <HAL_TIM_Base_Start+0x48>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a14      	ldr	r2, [pc, #80]	@ (8009b0c <HAL_TIM_Base_Start+0x8c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <HAL_TIM_Base_Start+0x48>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a13      	ldr	r2, [pc, #76]	@ (8009b10 <HAL_TIM_Base_Start+0x90>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d111      	bne.n	8009aec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b06      	cmp	r3, #6
 8009ad8:	d010      	beq.n	8009afc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0201 	orr.w	r2, r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aea:	e007      	b.n	8009afc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	40000400 	.word	0x40000400
 8009b10:	40000800 	.word	0x40000800

08009b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e0b4      	b.n	8009c9a <HAL_TIM_ConfigClockSource+0x186>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b68:	d03e      	beq.n	8009be8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b6e:	f200 8087 	bhi.w	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b76:	f000 8086 	beq.w	8009c86 <HAL_TIM_ConfigClockSource+0x172>
 8009b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b7e:	d87f      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b70      	cmp	r3, #112	@ 0x70
 8009b82:	d01a      	beq.n	8009bba <HAL_TIM_ConfigClockSource+0xa6>
 8009b84:	2b70      	cmp	r3, #112	@ 0x70
 8009b86:	d87b      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009b88:	2b60      	cmp	r3, #96	@ 0x60
 8009b8a:	d050      	beq.n	8009c2e <HAL_TIM_ConfigClockSource+0x11a>
 8009b8c:	2b60      	cmp	r3, #96	@ 0x60
 8009b8e:	d877      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009b90:	2b50      	cmp	r3, #80	@ 0x50
 8009b92:	d03c      	beq.n	8009c0e <HAL_TIM_ConfigClockSource+0xfa>
 8009b94:	2b50      	cmp	r3, #80	@ 0x50
 8009b96:	d873      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009b98:	2b40      	cmp	r3, #64	@ 0x40
 8009b9a:	d058      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x13a>
 8009b9c:	2b40      	cmp	r3, #64	@ 0x40
 8009b9e:	d86f      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba0:	2b30      	cmp	r3, #48	@ 0x30
 8009ba2:	d064      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x15a>
 8009ba4:	2b30      	cmp	r3, #48	@ 0x30
 8009ba6:	d86b      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d060      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x15a>
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d867      	bhi.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d05c      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x15a>
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	d05a      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x15a>
 8009bb8:	e062      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bca:	f000 f950 	bl	8009e6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	609a      	str	r2, [r3, #8]
      break;
 8009be6:	e04f      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bf8:	f000 f939 	bl	8009e6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c0a:	609a      	str	r2, [r3, #8]
      break;
 8009c0c:	e03c      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f000 f8b0 	bl	8009d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2150      	movs	r1, #80	@ 0x50
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f907 	bl	8009e3a <TIM_ITRx_SetConfig>
      break;
 8009c2c:	e02c      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f000 f8ce 	bl	8009ddc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2160      	movs	r1, #96	@ 0x60
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f8f7 	bl	8009e3a <TIM_ITRx_SetConfig>
      break;
 8009c4c:	e01c      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f000 f890 	bl	8009d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2140      	movs	r1, #64	@ 0x40
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f8e7 	bl	8009e3a <TIM_ITRx_SetConfig>
      break;
 8009c6c:	e00c      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f000 f8de 	bl	8009e3a <TIM_ITRx_SetConfig>
      break;
 8009c7e:	e003      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
      break;
 8009c84:	e000      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8009d74 <TIM_Base_SetConfig+0xd0>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00b      	beq.n	8009cd4 <TIM_Base_SetConfig+0x30>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc2:	d007      	beq.n	8009cd4 <TIM_Base_SetConfig+0x30>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d78 <TIM_Base_SetConfig+0xd4>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d003      	beq.n	8009cd4 <TIM_Base_SetConfig+0x30>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a2b      	ldr	r2, [pc, #172]	@ (8009d7c <TIM_Base_SetConfig+0xd8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d108      	bne.n	8009ce6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a22      	ldr	r2, [pc, #136]	@ (8009d74 <TIM_Base_SetConfig+0xd0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_Base_SetConfig+0x62>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf4:	d007      	beq.n	8009d06 <TIM_Base_SetConfig+0x62>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d78 <TIM_Base_SetConfig+0xd4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_Base_SetConfig+0x62>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a1e      	ldr	r2, [pc, #120]	@ (8009d7c <TIM_Base_SetConfig+0xd8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d108      	bne.n	8009d18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8009d74 <TIM_Base_SetConfig+0xd0>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d103      	bne.n	8009d4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	691a      	ldr	r2, [r3, #16]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f023 0201 	bic.w	r2, r3, #1
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	611a      	str	r2, [r3, #16]
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800

08009d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	f023 0201 	bic.w	r2, r3, #1
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 030a 	bic.w	r3, r3, #10
 8009dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr

08009ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	f023 0210 	bic.w	r2, r3, #16
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	031b      	lsls	r3, r3, #12
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	621a      	str	r2, [r3, #32]
}
 8009e30:	bf00      	nop
 8009e32:	371c      	adds	r7, #28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f043 0307 	orr.w	r3, r3, #7
 8009e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	609a      	str	r2, [r3, #8]
}
 8009e64:	bf00      	nop
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr

08009e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b087      	sub	sp, #28
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	021a      	lsls	r2, r3, #8
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	431a      	orrs	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	609a      	str	r2, [r3, #8]
}
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e046      	b.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00e      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f10:	d009      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a12      	ldr	r2, [pc, #72]	@ (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d004      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a10      	ldr	r2, [pc, #64]	@ (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d10c      	bne.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40000400 	.word	0x40000400
 8009f64:	40000800 	.word	0x40000800

08009f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e042      	b.n	800a000 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fb fb48 	bl	8005624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2224      	movs	r2, #36	@ 0x24
 8009f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9cf 	bl	800a350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	691a      	ldr	r2, [r3, #16]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695a      	ldr	r2, [r3, #20]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	@ 0x28
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	4613      	mov	r3, r2
 800a016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b20      	cmp	r3, #32
 800a026:	d175      	bne.n	800a114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <HAL_UART_Transmit+0x2c>
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e06e      	b.n	800a116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2221      	movs	r2, #33	@ 0x21
 800a042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a046:	f7fb fd93 	bl	8005b70 <HAL_GetTick>
 800a04a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	88fa      	ldrh	r2, [r7, #6]
 800a050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a060:	d108      	bne.n	800a074 <HAL_UART_Transmit+0x6c>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d104      	bne.n	800a074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	e003      	b.n	800a07c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a07c:	e02e      	b.n	800a0dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2200      	movs	r2, #0
 800a086:	2180      	movs	r1, #128	@ 0x80
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f86d 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e03a      	b.n	800a116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10b      	bne.n	800a0be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	e007      	b.n	800a0ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1cb      	bne.n	800a07e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2140      	movs	r1, #64	@ 0x40
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 f839 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e006      	b.n	800a116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	e000      	b.n	800a116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a114:	2302      	movs	r3, #2
  }
}
 800a116:	4618      	mov	r0, r3
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	4613      	mov	r3, r2
 800a12a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b20      	cmp	r3, #32
 800a136:	d112      	bne.n	800a15e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_UART_Receive_IT+0x26>
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e00b      	b.n	800a160 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	461a      	mov	r2, r3
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f860 	bl	800a21a <UART_Start_Receive_IT>
 800a15a:	4603      	mov	r3, r0
 800a15c:	e000      	b.n	800a160 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a15e:	2302      	movs	r3, #2
  }
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a178:	e03b      	b.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a180:	d037      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a182:	f7fb fcf5 	bl	8005b70 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6a3a      	ldr	r2, [r7, #32]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d302      	bcc.n	800a198 <UART_WaitOnFlagUntilTimeout+0x30>
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e03a      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d023      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b80      	cmp	r3, #128	@ 0x80
 800a1ae:	d020      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2b40      	cmp	r3, #64	@ 0x40
 800a1b4:	d01d      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d116      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f856 	bl	800a28c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2208      	movs	r2, #8
 800a1e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e00f      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d0b4      	beq.n	800a17a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	4613      	mov	r3, r2
 800a226:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	88fa      	ldrh	r2, [r7, #6]
 800a232:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	88fa      	ldrh	r2, [r7, #6]
 800a238:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2222      	movs	r2, #34	@ 0x22
 800a244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d007      	beq.n	800a260 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a25e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	695a      	ldr	r2, [r3, #20]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0220 	orr.w	r2, r2, #32
 800a27e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b095      	sub	sp, #84	@ 0x54
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	330c      	adds	r3, #12
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e5      	bne.n	800a294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a300:	2b01      	cmp	r3, #1
 800a302:	d119      	bne.n	800a338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	330c      	adds	r3, #12
 800a30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	60bb      	str	r3, [r7, #8]
   return(result);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f023 0310 	bic.w	r3, r3, #16
 800a31a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	330c      	adds	r3, #12
 800a322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a324:	61ba      	str	r2, [r7, #24]
 800a326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6979      	ldr	r1, [r7, #20]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	613b      	str	r3, [r7, #16]
   return(result);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e5      	bne.n	800a304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a346:	bf00      	nop
 800a348:	3754      	adds	r7, #84	@ 0x54
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr

0800a350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689a      	ldr	r2, [r3, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a38a:	f023 030c 	bic.w	r3, r3, #12
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6812      	ldr	r2, [r2, #0]
 800a392:	68b9      	ldr	r1, [r7, #8]
 800a394:	430b      	orrs	r3, r1
 800a396:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a2c      	ldr	r2, [pc, #176]	@ (800a464 <UART_SetConfig+0x114>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d103      	bne.n	800a3c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a3b8:	f7fe fbac 	bl	8008b14 <HAL_RCC_GetPCLK2Freq>
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	e002      	b.n	800a3c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a3c0:	f7fe fb94 	bl	8008aec <HAL_RCC_GetPCLK1Freq>
 800a3c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009a      	lsls	r2, r3, #2
 800a3d0:	441a      	add	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3dc:	4a22      	ldr	r2, [pc, #136]	@ (800a468 <UART_SetConfig+0x118>)
 800a3de:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	0119      	lsls	r1, r3, #4
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009a      	lsls	r2, r3, #2
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <UART_SetConfig+0x118>)
 800a3fe:	fba3 0302 	umull	r0, r3, r3, r2
 800a402:	095b      	lsrs	r3, r3, #5
 800a404:	2064      	movs	r0, #100	@ 0x64
 800a406:	fb00 f303 	mul.w	r3, r0, r3
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	3332      	adds	r3, #50	@ 0x32
 800a410:	4a15      	ldr	r2, [pc, #84]	@ (800a468 <UART_SetConfig+0x118>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a41c:	4419      	add	r1, r3
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009a      	lsls	r2, r3, #2
 800a428:	441a      	add	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	fbb2 f2f3 	udiv	r2, r2, r3
 800a434:	4b0c      	ldr	r3, [pc, #48]	@ (800a468 <UART_SetConfig+0x118>)
 800a436:	fba3 0302 	umull	r0, r3, r3, r2
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	2064      	movs	r0, #100	@ 0x64
 800a43e:	fb00 f303 	mul.w	r3, r0, r3
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	3332      	adds	r3, #50	@ 0x32
 800a448:	4a07      	ldr	r2, [pc, #28]	@ (800a468 <UART_SetConfig+0x118>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	f003 020f 	and.w	r2, r3, #15
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	440a      	add	r2, r1
 800a45a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	40013800 	.word	0x40013800
 800a468:	51eb851f 	.word	0x51eb851f

0800a46c <__cvt>:
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a472:	461d      	mov	r5, r3
 800a474:	bfbb      	ittet	lt
 800a476:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a47a:	461d      	movlt	r5, r3
 800a47c:	2300      	movge	r3, #0
 800a47e:	232d      	movlt	r3, #45	@ 0x2d
 800a480:	b088      	sub	sp, #32
 800a482:	4614      	mov	r4, r2
 800a484:	bfb8      	it	lt
 800a486:	4614      	movlt	r4, r2
 800a488:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a48a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a48c:	7013      	strb	r3, [r2, #0]
 800a48e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a490:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a494:	f023 0820 	bic.w	r8, r3, #32
 800a498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a49c:	d005      	beq.n	800a4aa <__cvt+0x3e>
 800a49e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4a2:	d100      	bne.n	800a4a6 <__cvt+0x3a>
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	e000      	b.n	800a4ac <__cvt+0x40>
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	aa07      	add	r2, sp, #28
 800a4ae:	9204      	str	r2, [sp, #16]
 800a4b0:	aa06      	add	r2, sp, #24
 800a4b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a4b6:	e9cd 3600 	strd	r3, r6, [sp]
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	462b      	mov	r3, r5
 800a4be:	f000 ffab 	bl	800b418 <_dtoa_r>
 800a4c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	d119      	bne.n	800a4fe <__cvt+0x92>
 800a4ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4cc:	07db      	lsls	r3, r3, #31
 800a4ce:	d50e      	bpl.n	800a4ee <__cvt+0x82>
 800a4d0:	eb00 0906 	add.w	r9, r0, r6
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f6 fa6e 	bl	80009bc <__aeabi_dcmpeq>
 800a4e0:	b108      	cbz	r0, 800a4e6 <__cvt+0x7a>
 800a4e2:	f8cd 901c 	str.w	r9, [sp, #28]
 800a4e6:	2230      	movs	r2, #48	@ 0x30
 800a4e8:	9b07      	ldr	r3, [sp, #28]
 800a4ea:	454b      	cmp	r3, r9
 800a4ec:	d31e      	bcc.n	800a52c <__cvt+0xc0>
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	9b07      	ldr	r3, [sp, #28]
 800a4f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a4f4:	1bdb      	subs	r3, r3, r7
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	b008      	add	sp, #32
 800a4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a502:	eb00 0906 	add.w	r9, r0, r6
 800a506:	d1e5      	bne.n	800a4d4 <__cvt+0x68>
 800a508:	7803      	ldrb	r3, [r0, #0]
 800a50a:	2b30      	cmp	r3, #48	@ 0x30
 800a50c:	d10a      	bne.n	800a524 <__cvt+0xb8>
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	4620      	mov	r0, r4
 800a514:	4629      	mov	r1, r5
 800a516:	f7f6 fa51 	bl	80009bc <__aeabi_dcmpeq>
 800a51a:	b918      	cbnz	r0, 800a524 <__cvt+0xb8>
 800a51c:	f1c6 0601 	rsb	r6, r6, #1
 800a520:	f8ca 6000 	str.w	r6, [sl]
 800a524:	f8da 3000 	ldr.w	r3, [sl]
 800a528:	4499      	add	r9, r3
 800a52a:	e7d3      	b.n	800a4d4 <__cvt+0x68>
 800a52c:	1c59      	adds	r1, r3, #1
 800a52e:	9107      	str	r1, [sp, #28]
 800a530:	701a      	strb	r2, [r3, #0]
 800a532:	e7d9      	b.n	800a4e8 <__cvt+0x7c>

0800a534 <__exponent>:
 800a534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a536:	2900      	cmp	r1, #0
 800a538:	bfb6      	itet	lt
 800a53a:	232d      	movlt	r3, #45	@ 0x2d
 800a53c:	232b      	movge	r3, #43	@ 0x2b
 800a53e:	4249      	neglt	r1, r1
 800a540:	2909      	cmp	r1, #9
 800a542:	7002      	strb	r2, [r0, #0]
 800a544:	7043      	strb	r3, [r0, #1]
 800a546:	dd29      	ble.n	800a59c <__exponent+0x68>
 800a548:	f10d 0307 	add.w	r3, sp, #7
 800a54c:	461d      	mov	r5, r3
 800a54e:	270a      	movs	r7, #10
 800a550:	fbb1 f6f7 	udiv	r6, r1, r7
 800a554:	461a      	mov	r2, r3
 800a556:	fb07 1416 	mls	r4, r7, r6, r1
 800a55a:	3430      	adds	r4, #48	@ 0x30
 800a55c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a560:	460c      	mov	r4, r1
 800a562:	2c63      	cmp	r4, #99	@ 0x63
 800a564:	4631      	mov	r1, r6
 800a566:	f103 33ff 	add.w	r3, r3, #4294967295
 800a56a:	dcf1      	bgt.n	800a550 <__exponent+0x1c>
 800a56c:	3130      	adds	r1, #48	@ 0x30
 800a56e:	1e94      	subs	r4, r2, #2
 800a570:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a574:	4623      	mov	r3, r4
 800a576:	1c41      	adds	r1, r0, #1
 800a578:	42ab      	cmp	r3, r5
 800a57a:	d30a      	bcc.n	800a592 <__exponent+0x5e>
 800a57c:	f10d 0309 	add.w	r3, sp, #9
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	42ac      	cmp	r4, r5
 800a584:	bf88      	it	hi
 800a586:	2300      	movhi	r3, #0
 800a588:	3302      	adds	r3, #2
 800a58a:	4403      	add	r3, r0
 800a58c:	1a18      	subs	r0, r3, r0
 800a58e:	b003      	add	sp, #12
 800a590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a592:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a596:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a59a:	e7ed      	b.n	800a578 <__exponent+0x44>
 800a59c:	2330      	movs	r3, #48	@ 0x30
 800a59e:	3130      	adds	r1, #48	@ 0x30
 800a5a0:	7083      	strb	r3, [r0, #2]
 800a5a2:	70c1      	strb	r1, [r0, #3]
 800a5a4:	1d03      	adds	r3, r0, #4
 800a5a6:	e7f1      	b.n	800a58c <__exponent+0x58>

0800a5a8 <_printf_float>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	b091      	sub	sp, #68	@ 0x44
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	461f      	mov	r7, r3
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	f000 fe1f 	bl	800b1fc <_localeconv_r>
 800a5be:	6803      	ldr	r3, [r0, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	9308      	str	r3, [sp, #32]
 800a5c4:	f7f5 fdce 	bl	8000164 <strlen>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a5d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5d2:	3307      	adds	r3, #7
 800a5d4:	f023 0307 	bic.w	r3, r3, #7
 800a5d8:	f103 0208 	add.w	r2, r3, #8
 800a5dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5e0:	f8d4 b000 	ldr.w	fp, [r4]
 800a5e4:	f8c8 2000 	str.w	r2, [r8]
 800a5e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a602:	4b9c      	ldr	r3, [pc, #624]	@ (800a874 <_printf_float+0x2cc>)
 800a604:	f7f6 fa0c 	bl	8000a20 <__aeabi_dcmpun>
 800a608:	bb70      	cbnz	r0, 800a668 <_printf_float+0xc0>
 800a60a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295
 800a612:	4b98      	ldr	r3, [pc, #608]	@ (800a874 <_printf_float+0x2cc>)
 800a614:	f7f6 f9e6 	bl	80009e4 <__aeabi_dcmple>
 800a618:	bb30      	cbnz	r0, 800a668 <_printf_float+0xc0>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	4640      	mov	r0, r8
 800a620:	4649      	mov	r1, r9
 800a622:	f7f6 f9d5 	bl	80009d0 <__aeabi_dcmplt>
 800a626:	b110      	cbz	r0, 800a62e <_printf_float+0x86>
 800a628:	232d      	movs	r3, #45	@ 0x2d
 800a62a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a62e:	4a92      	ldr	r2, [pc, #584]	@ (800a878 <_printf_float+0x2d0>)
 800a630:	4b92      	ldr	r3, [pc, #584]	@ (800a87c <_printf_float+0x2d4>)
 800a632:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a636:	bf8c      	ite	hi
 800a638:	4690      	movhi	r8, r2
 800a63a:	4698      	movls	r8, r3
 800a63c:	2303      	movs	r3, #3
 800a63e:	f04f 0900 	mov.w	r9, #0
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	f02b 0304 	bic.w	r3, fp, #4
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	4633      	mov	r3, r6
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	9700      	str	r7, [sp, #0]
 800a652:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a654:	f000 f9d4 	bl	800aa00 <_printf_common>
 800a658:	3001      	adds	r0, #1
 800a65a:	f040 8090 	bne.w	800a77e <_printf_float+0x1d6>
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	b011      	add	sp, #68	@ 0x44
 800a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	4649      	mov	r1, r9
 800a670:	f7f6 f9d6 	bl	8000a20 <__aeabi_dcmpun>
 800a674:	b148      	cbz	r0, 800a68a <_printf_float+0xe2>
 800a676:	464b      	mov	r3, r9
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bfb8      	it	lt
 800a67c:	232d      	movlt	r3, #45	@ 0x2d
 800a67e:	4a80      	ldr	r2, [pc, #512]	@ (800a880 <_printf_float+0x2d8>)
 800a680:	bfb8      	it	lt
 800a682:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a686:	4b7f      	ldr	r3, [pc, #508]	@ (800a884 <_printf_float+0x2dc>)
 800a688:	e7d3      	b.n	800a632 <_printf_float+0x8a>
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	d13f      	bne.n	800a714 <_printf_float+0x16c>
 800a694:	2306      	movs	r3, #6
 800a696:	6063      	str	r3, [r4, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	9206      	str	r2, [sp, #24]
 800a6a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a6a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a6a8:	aa0d      	add	r2, sp, #52	@ 0x34
 800a6aa:	9203      	str	r2, [sp, #12]
 800a6ac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a6b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	464b      	mov	r3, r9
 800a6be:	910a      	str	r1, [sp, #40]	@ 0x28
 800a6c0:	f7ff fed4 	bl	800a46c <__cvt>
 800a6c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	2947      	cmp	r1, #71	@ 0x47
 800a6ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a6cc:	d128      	bne.n	800a720 <_printf_float+0x178>
 800a6ce:	1cc8      	adds	r0, r1, #3
 800a6d0:	db02      	blt.n	800a6d8 <_printf_float+0x130>
 800a6d2:	6863      	ldr	r3, [r4, #4]
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	dd40      	ble.n	800a75a <_printf_float+0x1b2>
 800a6d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a6dc:	fa5f fa8a 	uxtb.w	sl, sl
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	3901      	subs	r1, #1
 800a6e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6e8:	910d      	str	r1, [sp, #52]	@ 0x34
 800a6ea:	f7ff ff23 	bl	800a534 <__exponent>
 800a6ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	1813      	adds	r3, r2, r0
 800a6f4:	2a01      	cmp	r2, #1
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	dc02      	bgt.n	800a700 <_printf_float+0x158>
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	07d2      	lsls	r2, r2, #31
 800a6fe:	d501      	bpl.n	800a704 <_printf_float+0x15c>
 800a700:	3301      	adds	r3, #1
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d09e      	beq.n	800a64a <_printf_float+0xa2>
 800a70c:	232d      	movs	r3, #45	@ 0x2d
 800a70e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a712:	e79a      	b.n	800a64a <_printf_float+0xa2>
 800a714:	2947      	cmp	r1, #71	@ 0x47
 800a716:	d1bf      	bne.n	800a698 <_printf_float+0xf0>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1bd      	bne.n	800a698 <_printf_float+0xf0>
 800a71c:	2301      	movs	r3, #1
 800a71e:	e7ba      	b.n	800a696 <_printf_float+0xee>
 800a720:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a724:	d9dc      	bls.n	800a6e0 <_printf_float+0x138>
 800a726:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a72a:	d118      	bne.n	800a75e <_printf_float+0x1b6>
 800a72c:	2900      	cmp	r1, #0
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	dd0b      	ble.n	800a74a <_printf_float+0x1a2>
 800a732:	6121      	str	r1, [r4, #16]
 800a734:	b913      	cbnz	r3, 800a73c <_printf_float+0x194>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	07d0      	lsls	r0, r2, #31
 800a73a:	d502      	bpl.n	800a742 <_printf_float+0x19a>
 800a73c:	3301      	adds	r3, #1
 800a73e:	440b      	add	r3, r1
 800a740:	6123      	str	r3, [r4, #16]
 800a742:	f04f 0900 	mov.w	r9, #0
 800a746:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a748:	e7dc      	b.n	800a704 <_printf_float+0x15c>
 800a74a:	b913      	cbnz	r3, 800a752 <_printf_float+0x1aa>
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	07d2      	lsls	r2, r2, #31
 800a750:	d501      	bpl.n	800a756 <_printf_float+0x1ae>
 800a752:	3302      	adds	r3, #2
 800a754:	e7f4      	b.n	800a740 <_printf_float+0x198>
 800a756:	2301      	movs	r3, #1
 800a758:	e7f2      	b.n	800a740 <_printf_float+0x198>
 800a75a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a75e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a760:	4299      	cmp	r1, r3
 800a762:	db05      	blt.n	800a770 <_printf_float+0x1c8>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	6121      	str	r1, [r4, #16]
 800a768:	07d8      	lsls	r0, r3, #31
 800a76a:	d5ea      	bpl.n	800a742 <_printf_float+0x19a>
 800a76c:	1c4b      	adds	r3, r1, #1
 800a76e:	e7e7      	b.n	800a740 <_printf_float+0x198>
 800a770:	2900      	cmp	r1, #0
 800a772:	bfcc      	ite	gt
 800a774:	2201      	movgt	r2, #1
 800a776:	f1c1 0202 	rsble	r2, r1, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	e7e0      	b.n	800a740 <_printf_float+0x198>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	055a      	lsls	r2, r3, #21
 800a782:	d407      	bmi.n	800a794 <_printf_float+0x1ec>
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	4642      	mov	r2, r8
 800a788:	4631      	mov	r1, r6
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b8      	blx	r7
 800a78e:	3001      	adds	r0, #1
 800a790:	d12b      	bne.n	800a7ea <_printf_float+0x242>
 800a792:	e764      	b.n	800a65e <_printf_float+0xb6>
 800a794:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a798:	f240 80dc 	bls.w	800a954 <_printf_float+0x3ac>
 800a79c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f7f6 f90a 	bl	80009bc <__aeabi_dcmpeq>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d033      	beq.n	800a814 <_printf_float+0x26c>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	4a35      	ldr	r2, [pc, #212]	@ (800a888 <_printf_float+0x2e0>)
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f43f af51 	beq.w	800a65e <_printf_float+0xb6>
 800a7bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a7c0:	4543      	cmp	r3, r8
 800a7c2:	db02      	blt.n	800a7ca <_printf_float+0x222>
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	07d8      	lsls	r0, r3, #31
 800a7c8:	d50f      	bpl.n	800a7ea <_printf_float+0x242>
 800a7ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b8      	blx	r7
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	f43f af42 	beq.w	800a65e <_printf_float+0xb6>
 800a7da:	f04f 0900 	mov.w	r9, #0
 800a7de:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7e2:	f104 0a1a 	add.w	sl, r4, #26
 800a7e6:	45c8      	cmp	r8, r9
 800a7e8:	dc09      	bgt.n	800a7fe <_printf_float+0x256>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	079b      	lsls	r3, r3, #30
 800a7ee:	f100 8102 	bmi.w	800a9f6 <_printf_float+0x44e>
 800a7f2:	68e0      	ldr	r0, [r4, #12]
 800a7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7f6:	4298      	cmp	r0, r3
 800a7f8:	bfb8      	it	lt
 800a7fa:	4618      	movlt	r0, r3
 800a7fc:	e731      	b.n	800a662 <_printf_float+0xba>
 800a7fe:	2301      	movs	r3, #1
 800a800:	4652      	mov	r2, sl
 800a802:	4631      	mov	r1, r6
 800a804:	4628      	mov	r0, r5
 800a806:	47b8      	blx	r7
 800a808:	3001      	adds	r0, #1
 800a80a:	f43f af28 	beq.w	800a65e <_printf_float+0xb6>
 800a80e:	f109 0901 	add.w	r9, r9, #1
 800a812:	e7e8      	b.n	800a7e6 <_printf_float+0x23e>
 800a814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a816:	2b00      	cmp	r3, #0
 800a818:	dc38      	bgt.n	800a88c <_printf_float+0x2e4>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	4a19      	ldr	r2, [pc, #100]	@ (800a888 <_printf_float+0x2e0>)
 800a822:	47b8      	blx	r7
 800a824:	3001      	adds	r0, #1
 800a826:	f43f af1a 	beq.w	800a65e <_printf_float+0xb6>
 800a82a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a82e:	ea59 0303 	orrs.w	r3, r9, r3
 800a832:	d102      	bne.n	800a83a <_printf_float+0x292>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	07d9      	lsls	r1, r3, #31
 800a838:	d5d7      	bpl.n	800a7ea <_printf_float+0x242>
 800a83a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	47b8      	blx	r7
 800a844:	3001      	adds	r0, #1
 800a846:	f43f af0a 	beq.w	800a65e <_printf_float+0xb6>
 800a84a:	f04f 0a00 	mov.w	sl, #0
 800a84e:	f104 0b1a 	add.w	fp, r4, #26
 800a852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a854:	425b      	negs	r3, r3
 800a856:	4553      	cmp	r3, sl
 800a858:	dc01      	bgt.n	800a85e <_printf_float+0x2b6>
 800a85a:	464b      	mov	r3, r9
 800a85c:	e793      	b.n	800a786 <_printf_float+0x1de>
 800a85e:	2301      	movs	r3, #1
 800a860:	465a      	mov	r2, fp
 800a862:	4631      	mov	r1, r6
 800a864:	4628      	mov	r0, r5
 800a866:	47b8      	blx	r7
 800a868:	3001      	adds	r0, #1
 800a86a:	f43f aef8 	beq.w	800a65e <_printf_float+0xb6>
 800a86e:	f10a 0a01 	add.w	sl, sl, #1
 800a872:	e7ee      	b.n	800a852 <_printf_float+0x2aa>
 800a874:	7fefffff 	.word	0x7fefffff
 800a878:	0800d7da 	.word	0x0800d7da
 800a87c:	0800d7d6 	.word	0x0800d7d6
 800a880:	0800d7e2 	.word	0x0800d7e2
 800a884:	0800d7de 	.word	0x0800d7de
 800a888:	0800d7e6 	.word	0x0800d7e6
 800a88c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a88e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a892:	4553      	cmp	r3, sl
 800a894:	bfa8      	it	ge
 800a896:	4653      	movge	r3, sl
 800a898:	2b00      	cmp	r3, #0
 800a89a:	4699      	mov	r9, r3
 800a89c:	dc36      	bgt.n	800a90c <_printf_float+0x364>
 800a89e:	f04f 0b00 	mov.w	fp, #0
 800a8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8a6:	f104 021a 	add.w	r2, r4, #26
 800a8aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ae:	eba3 0309 	sub.w	r3, r3, r9
 800a8b2:	455b      	cmp	r3, fp
 800a8b4:	dc31      	bgt.n	800a91a <_printf_float+0x372>
 800a8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8b8:	459a      	cmp	sl, r3
 800a8ba:	dc3a      	bgt.n	800a932 <_printf_float+0x38a>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	07da      	lsls	r2, r3, #31
 800a8c0:	d437      	bmi.n	800a932 <_printf_float+0x38a>
 800a8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8c4:	ebaa 0903 	sub.w	r9, sl, r3
 800a8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a8ce:	4599      	cmp	r9, r3
 800a8d0:	bfa8      	it	ge
 800a8d2:	4699      	movge	r9, r3
 800a8d4:	f1b9 0f00 	cmp.w	r9, #0
 800a8d8:	dc33      	bgt.n	800a942 <_printf_float+0x39a>
 800a8da:	f04f 0800 	mov.w	r8, #0
 800a8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8e2:	f104 0b1a 	add.w	fp, r4, #26
 800a8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8ec:	eba3 0309 	sub.w	r3, r3, r9
 800a8f0:	4543      	cmp	r3, r8
 800a8f2:	f77f af7a 	ble.w	800a7ea <_printf_float+0x242>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	465a      	mov	r2, fp
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	47b8      	blx	r7
 800a900:	3001      	adds	r0, #1
 800a902:	f43f aeac 	beq.w	800a65e <_printf_float+0xb6>
 800a906:	f108 0801 	add.w	r8, r8, #1
 800a90a:	e7ec      	b.n	800a8e6 <_printf_float+0x33e>
 800a90c:	4642      	mov	r2, r8
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	d1c2      	bne.n	800a89e <_printf_float+0x2f6>
 800a918:	e6a1      	b.n	800a65e <_printf_float+0xb6>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	920a      	str	r2, [sp, #40]	@ 0x28
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f ae9a 	beq.w	800a65e <_printf_float+0xb6>
 800a92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a92c:	f10b 0b01 	add.w	fp, fp, #1
 800a930:	e7bb      	b.n	800a8aa <_printf_float+0x302>
 800a932:	4631      	mov	r1, r6
 800a934:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a938:	4628      	mov	r0, r5
 800a93a:	47b8      	blx	r7
 800a93c:	3001      	adds	r0, #1
 800a93e:	d1c0      	bne.n	800a8c2 <_printf_float+0x31a>
 800a940:	e68d      	b.n	800a65e <_printf_float+0xb6>
 800a942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a944:	464b      	mov	r3, r9
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	4442      	add	r2, r8
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	d1c3      	bne.n	800a8da <_printf_float+0x332>
 800a952:	e684      	b.n	800a65e <_printf_float+0xb6>
 800a954:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a958:	f1ba 0f01 	cmp.w	sl, #1
 800a95c:	dc01      	bgt.n	800a962 <_printf_float+0x3ba>
 800a95e:	07db      	lsls	r3, r3, #31
 800a960:	d536      	bpl.n	800a9d0 <_printf_float+0x428>
 800a962:	2301      	movs	r3, #1
 800a964:	4642      	mov	r2, r8
 800a966:	4631      	mov	r1, r6
 800a968:	4628      	mov	r0, r5
 800a96a:	47b8      	blx	r7
 800a96c:	3001      	adds	r0, #1
 800a96e:	f43f ae76 	beq.w	800a65e <_printf_float+0xb6>
 800a972:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a976:	4631      	mov	r1, r6
 800a978:	4628      	mov	r0, r5
 800a97a:	47b8      	blx	r7
 800a97c:	3001      	adds	r0, #1
 800a97e:	f43f ae6e 	beq.w	800a65e <_printf_float+0xb6>
 800a982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a986:	2200      	movs	r2, #0
 800a988:	2300      	movs	r3, #0
 800a98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a98e:	f7f6 f815 	bl	80009bc <__aeabi_dcmpeq>
 800a992:	b9c0      	cbnz	r0, 800a9c6 <_printf_float+0x41e>
 800a994:	4653      	mov	r3, sl
 800a996:	f108 0201 	add.w	r2, r8, #1
 800a99a:	4631      	mov	r1, r6
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d10c      	bne.n	800a9be <_printf_float+0x416>
 800a9a4:	e65b      	b.n	800a65e <_printf_float+0xb6>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	465a      	mov	r2, fp
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f43f ae54 	beq.w	800a65e <_printf_float+0xb6>
 800a9b6:	f108 0801 	add.w	r8, r8, #1
 800a9ba:	45d0      	cmp	r8, sl
 800a9bc:	dbf3      	blt.n	800a9a6 <_printf_float+0x3fe>
 800a9be:	464b      	mov	r3, r9
 800a9c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9c4:	e6e0      	b.n	800a788 <_printf_float+0x1e0>
 800a9c6:	f04f 0800 	mov.w	r8, #0
 800a9ca:	f104 0b1a 	add.w	fp, r4, #26
 800a9ce:	e7f4      	b.n	800a9ba <_printf_float+0x412>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	e7e1      	b.n	800a99a <_printf_float+0x3f2>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	464a      	mov	r2, r9
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	f43f ae3c 	beq.w	800a65e <_printf_float+0xb6>
 800a9e6:	f108 0801 	add.w	r8, r8, #1
 800a9ea:	68e3      	ldr	r3, [r4, #12]
 800a9ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a9ee:	1a5b      	subs	r3, r3, r1
 800a9f0:	4543      	cmp	r3, r8
 800a9f2:	dcf0      	bgt.n	800a9d6 <_printf_float+0x42e>
 800a9f4:	e6fd      	b.n	800a7f2 <_printf_float+0x24a>
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	f104 0919 	add.w	r9, r4, #25
 800a9fe:	e7f4      	b.n	800a9ea <_printf_float+0x442>

0800aa00 <_printf_common>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	4616      	mov	r6, r2
 800aa06:	4698      	mov	r8, r3
 800aa08:	688a      	ldr	r2, [r1, #8]
 800aa0a:	690b      	ldr	r3, [r1, #16]
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	bfb8      	it	lt
 800aa12:	4613      	movlt	r3, r2
 800aa14:	6033      	str	r3, [r6, #0]
 800aa16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa20:	b10a      	cbz	r2, 800aa26 <_printf_common+0x26>
 800aa22:	3301      	adds	r3, #1
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	0699      	lsls	r1, r3, #26
 800aa2a:	bf42      	ittt	mi
 800aa2c:	6833      	ldrmi	r3, [r6, #0]
 800aa2e:	3302      	addmi	r3, #2
 800aa30:	6033      	strmi	r3, [r6, #0]
 800aa32:	6825      	ldr	r5, [r4, #0]
 800aa34:	f015 0506 	ands.w	r5, r5, #6
 800aa38:	d106      	bne.n	800aa48 <_printf_common+0x48>
 800aa3a:	f104 0a19 	add.w	sl, r4, #25
 800aa3e:	68e3      	ldr	r3, [r4, #12]
 800aa40:	6832      	ldr	r2, [r6, #0]
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dc2b      	bgt.n	800aaa0 <_printf_common+0xa0>
 800aa48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa4c:	6822      	ldr	r2, [r4, #0]
 800aa4e:	3b00      	subs	r3, #0
 800aa50:	bf18      	it	ne
 800aa52:	2301      	movne	r3, #1
 800aa54:	0692      	lsls	r2, r2, #26
 800aa56:	d430      	bmi.n	800aaba <_printf_common+0xba>
 800aa58:	4641      	mov	r1, r8
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa60:	47c8      	blx	r9
 800aa62:	3001      	adds	r0, #1
 800aa64:	d023      	beq.n	800aaae <_printf_common+0xae>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	6922      	ldr	r2, [r4, #16]
 800aa6a:	f003 0306 	and.w	r3, r3, #6
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	bf14      	ite	ne
 800aa72:	2500      	movne	r5, #0
 800aa74:	6833      	ldreq	r3, [r6, #0]
 800aa76:	f04f 0600 	mov.w	r6, #0
 800aa7a:	bf08      	it	eq
 800aa7c:	68e5      	ldreq	r5, [r4, #12]
 800aa7e:	f104 041a 	add.w	r4, r4, #26
 800aa82:	bf08      	it	eq
 800aa84:	1aed      	subeq	r5, r5, r3
 800aa86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa8a:	bf08      	it	eq
 800aa8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa90:	4293      	cmp	r3, r2
 800aa92:	bfc4      	itt	gt
 800aa94:	1a9b      	subgt	r3, r3, r2
 800aa96:	18ed      	addgt	r5, r5, r3
 800aa98:	42b5      	cmp	r5, r6
 800aa9a:	d11a      	bne.n	800aad2 <_printf_common+0xd2>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e008      	b.n	800aab2 <_printf_common+0xb2>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	4652      	mov	r2, sl
 800aaa4:	4641      	mov	r1, r8
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	47c8      	blx	r9
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d103      	bne.n	800aab6 <_printf_common+0xb6>
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab6:	3501      	adds	r5, #1
 800aab8:	e7c1      	b.n	800aa3e <_printf_common+0x3e>
 800aaba:	2030      	movs	r0, #48	@ 0x30
 800aabc:	18e1      	adds	r1, r4, r3
 800aabe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aac8:	4422      	add	r2, r4
 800aaca:	3302      	adds	r3, #2
 800aacc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aad0:	e7c2      	b.n	800aa58 <_printf_common+0x58>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4622      	mov	r2, r4
 800aad6:	4641      	mov	r1, r8
 800aad8:	4638      	mov	r0, r7
 800aada:	47c8      	blx	r9
 800aadc:	3001      	adds	r0, #1
 800aade:	d0e6      	beq.n	800aaae <_printf_common+0xae>
 800aae0:	3601      	adds	r6, #1
 800aae2:	e7d9      	b.n	800aa98 <_printf_common+0x98>

0800aae4 <_printf_i>:
 800aae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	7e0f      	ldrb	r7, [r1, #24]
 800aaea:	4691      	mov	r9, r2
 800aaec:	2f78      	cmp	r7, #120	@ 0x78
 800aaee:	4680      	mov	r8, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	469a      	mov	sl, r3
 800aaf4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aafa:	d807      	bhi.n	800ab0c <_printf_i+0x28>
 800aafc:	2f62      	cmp	r7, #98	@ 0x62
 800aafe:	d80a      	bhi.n	800ab16 <_printf_i+0x32>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	f000 80d1 	beq.w	800aca8 <_printf_i+0x1c4>
 800ab06:	2f58      	cmp	r7, #88	@ 0x58
 800ab08:	f000 80b8 	beq.w	800ac7c <_printf_i+0x198>
 800ab0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab14:	e03a      	b.n	800ab8c <_printf_i+0xa8>
 800ab16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab1a:	2b15      	cmp	r3, #21
 800ab1c:	d8f6      	bhi.n	800ab0c <_printf_i+0x28>
 800ab1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab24 <_printf_i+0x40>)
 800ab20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab24:	0800ab7d 	.word	0x0800ab7d
 800ab28:	0800ab91 	.word	0x0800ab91
 800ab2c:	0800ab0d 	.word	0x0800ab0d
 800ab30:	0800ab0d 	.word	0x0800ab0d
 800ab34:	0800ab0d 	.word	0x0800ab0d
 800ab38:	0800ab0d 	.word	0x0800ab0d
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab0d 	.word	0x0800ab0d
 800ab44:	0800ab0d 	.word	0x0800ab0d
 800ab48:	0800ab0d 	.word	0x0800ab0d
 800ab4c:	0800ab0d 	.word	0x0800ab0d
 800ab50:	0800ac8f 	.word	0x0800ac8f
 800ab54:	0800abbb 	.word	0x0800abbb
 800ab58:	0800ac49 	.word	0x0800ac49
 800ab5c:	0800ab0d 	.word	0x0800ab0d
 800ab60:	0800ab0d 	.word	0x0800ab0d
 800ab64:	0800acb1 	.word	0x0800acb1
 800ab68:	0800ab0d 	.word	0x0800ab0d
 800ab6c:	0800abbb 	.word	0x0800abbb
 800ab70:	0800ab0d 	.word	0x0800ab0d
 800ab74:	0800ab0d 	.word	0x0800ab0d
 800ab78:	0800ac51 	.word	0x0800ac51
 800ab7c:	6833      	ldr	r3, [r6, #0]
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6032      	str	r2, [r6, #0]
 800ab84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e09c      	b.n	800acca <_printf_i+0x1e6>
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	1d19      	adds	r1, r3, #4
 800ab96:	6031      	str	r1, [r6, #0]
 800ab98:	0606      	lsls	r6, r0, #24
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0xbc>
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	e003      	b.n	800aba8 <_printf_i+0xc4>
 800aba0:	0645      	lsls	r5, r0, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0xb8>
 800aba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	da03      	bge.n	800abb4 <_printf_i+0xd0>
 800abac:	232d      	movs	r3, #45	@ 0x2d
 800abae:	426d      	negs	r5, r5
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb4:	230a      	movs	r3, #10
 800abb6:	4858      	ldr	r0, [pc, #352]	@ (800ad18 <_printf_i+0x234>)
 800abb8:	e011      	b.n	800abde <_printf_i+0xfa>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	0608      	lsls	r0, r1, #24
 800abc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abc4:	d402      	bmi.n	800abcc <_printf_i+0xe8>
 800abc6:	0649      	lsls	r1, r1, #25
 800abc8:	bf48      	it	mi
 800abca:	b2ad      	uxthmi	r5, r5
 800abcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abce:	6033      	str	r3, [r6, #0]
 800abd0:	bf14      	ite	ne
 800abd2:	230a      	movne	r3, #10
 800abd4:	2308      	moveq	r3, #8
 800abd6:	4850      	ldr	r0, [pc, #320]	@ (800ad18 <_printf_i+0x234>)
 800abd8:	2100      	movs	r1, #0
 800abda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abde:	6866      	ldr	r6, [r4, #4]
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	60a6      	str	r6, [r4, #8]
 800abe4:	db05      	blt.n	800abf2 <_printf_i+0x10e>
 800abe6:	6821      	ldr	r1, [r4, #0]
 800abe8:	432e      	orrs	r6, r5
 800abea:	f021 0104 	bic.w	r1, r1, #4
 800abee:	6021      	str	r1, [r4, #0]
 800abf0:	d04b      	beq.n	800ac8a <_printf_i+0x1a6>
 800abf2:	4616      	mov	r6, r2
 800abf4:	fbb5 f1f3 	udiv	r1, r5, r3
 800abf8:	fb03 5711 	mls	r7, r3, r1, r5
 800abfc:	5dc7      	ldrb	r7, [r0, r7]
 800abfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac02:	462f      	mov	r7, r5
 800ac04:	42bb      	cmp	r3, r7
 800ac06:	460d      	mov	r5, r1
 800ac08:	d9f4      	bls.n	800abf4 <_printf_i+0x110>
 800ac0a:	2b08      	cmp	r3, #8
 800ac0c:	d10b      	bne.n	800ac26 <_printf_i+0x142>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	07df      	lsls	r7, r3, #31
 800ac12:	d508      	bpl.n	800ac26 <_printf_i+0x142>
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	6861      	ldr	r1, [r4, #4]
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	bfde      	ittt	le
 800ac1c:	2330      	movle	r3, #48	@ 0x30
 800ac1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac22:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac26:	1b92      	subs	r2, r2, r6
 800ac28:	6122      	str	r2, [r4, #16]
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4640      	mov	r0, r8
 800ac30:	f8cd a000 	str.w	sl, [sp]
 800ac34:	aa03      	add	r2, sp, #12
 800ac36:	f7ff fee3 	bl	800aa00 <_printf_common>
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d14a      	bne.n	800acd4 <_printf_i+0x1f0>
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	b004      	add	sp, #16
 800ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	f043 0320 	orr.w	r3, r3, #32
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	2778      	movs	r7, #120	@ 0x78
 800ac52:	4832      	ldr	r0, [pc, #200]	@ (800ad1c <_printf_i+0x238>)
 800ac54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	6831      	ldr	r1, [r6, #0]
 800ac5c:	061f      	lsls	r7, r3, #24
 800ac5e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac62:	d402      	bmi.n	800ac6a <_printf_i+0x186>
 800ac64:	065f      	lsls	r7, r3, #25
 800ac66:	bf48      	it	mi
 800ac68:	b2ad      	uxthmi	r5, r5
 800ac6a:	6031      	str	r1, [r6, #0]
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	bf44      	itt	mi
 800ac70:	f043 0320 	orrmi.w	r3, r3, #32
 800ac74:	6023      	strmi	r3, [r4, #0]
 800ac76:	b11d      	cbz	r5, 800ac80 <_printf_i+0x19c>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	e7ad      	b.n	800abd8 <_printf_i+0xf4>
 800ac7c:	4826      	ldr	r0, [pc, #152]	@ (800ad18 <_printf_i+0x234>)
 800ac7e:	e7e9      	b.n	800ac54 <_printf_i+0x170>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	f023 0320 	bic.w	r3, r3, #32
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	e7f6      	b.n	800ac78 <_printf_i+0x194>
 800ac8a:	4616      	mov	r6, r2
 800ac8c:	e7bd      	b.n	800ac0a <_printf_i+0x126>
 800ac8e:	6833      	ldr	r3, [r6, #0]
 800ac90:	6825      	ldr	r5, [r4, #0]
 800ac92:	1d18      	adds	r0, r3, #4
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	6030      	str	r0, [r6, #0]
 800ac98:	062e      	lsls	r6, r5, #24
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	d501      	bpl.n	800aca2 <_printf_i+0x1be>
 800ac9e:	6019      	str	r1, [r3, #0]
 800aca0:	e002      	b.n	800aca8 <_printf_i+0x1c4>
 800aca2:	0668      	lsls	r0, r5, #25
 800aca4:	d5fb      	bpl.n	800ac9e <_printf_i+0x1ba>
 800aca6:	8019      	strh	r1, [r3, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	4616      	mov	r6, r2
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	e7bc      	b.n	800ac2a <_printf_i+0x146>
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	2100      	movs	r1, #0
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	681e      	ldr	r6, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 fb14 	bl	800b2ea <memchr>
 800acc2:	b108      	cbz	r0, 800acc8 <_printf_i+0x1e4>
 800acc4:	1b80      	subs	r0, r0, r6
 800acc6:	6060      	str	r0, [r4, #4]
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	2300      	movs	r3, #0
 800acce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd2:	e7aa      	b.n	800ac2a <_printf_i+0x146>
 800acd4:	4632      	mov	r2, r6
 800acd6:	4649      	mov	r1, r9
 800acd8:	4640      	mov	r0, r8
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	47d0      	blx	sl
 800acde:	3001      	adds	r0, #1
 800ace0:	d0ad      	beq.n	800ac3e <_printf_i+0x15a>
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	079b      	lsls	r3, r3, #30
 800ace6:	d413      	bmi.n	800ad10 <_printf_i+0x22c>
 800ace8:	68e0      	ldr	r0, [r4, #12]
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	4298      	cmp	r0, r3
 800acee:	bfb8      	it	lt
 800acf0:	4618      	movlt	r0, r3
 800acf2:	e7a6      	b.n	800ac42 <_printf_i+0x15e>
 800acf4:	2301      	movs	r3, #1
 800acf6:	4632      	mov	r2, r6
 800acf8:	4649      	mov	r1, r9
 800acfa:	4640      	mov	r0, r8
 800acfc:	47d0      	blx	sl
 800acfe:	3001      	adds	r0, #1
 800ad00:	d09d      	beq.n	800ac3e <_printf_i+0x15a>
 800ad02:	3501      	adds	r5, #1
 800ad04:	68e3      	ldr	r3, [r4, #12]
 800ad06:	9903      	ldr	r1, [sp, #12]
 800ad08:	1a5b      	subs	r3, r3, r1
 800ad0a:	42ab      	cmp	r3, r5
 800ad0c:	dcf2      	bgt.n	800acf4 <_printf_i+0x210>
 800ad0e:	e7eb      	b.n	800ace8 <_printf_i+0x204>
 800ad10:	2500      	movs	r5, #0
 800ad12:	f104 0619 	add.w	r6, r4, #25
 800ad16:	e7f5      	b.n	800ad04 <_printf_i+0x220>
 800ad18:	0800d7e8 	.word	0x0800d7e8
 800ad1c:	0800d7f9 	.word	0x0800d7f9

0800ad20 <std>:
 800ad20:	2300      	movs	r3, #0
 800ad22:	b510      	push	{r4, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	e9c0 3300 	strd	r3, r3, [r0]
 800ad2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad2e:	6083      	str	r3, [r0, #8]
 800ad30:	8181      	strh	r1, [r0, #12]
 800ad32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad34:	81c2      	strh	r2, [r0, #14]
 800ad36:	6183      	str	r3, [r0, #24]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	2208      	movs	r2, #8
 800ad3c:	305c      	adds	r0, #92	@ 0x5c
 800ad3e:	f000 fa2f 	bl	800b1a0 <memset>
 800ad42:	4b0d      	ldr	r3, [pc, #52]	@ (800ad78 <std+0x58>)
 800ad44:	6224      	str	r4, [r4, #32]
 800ad46:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad48:	4b0c      	ldr	r3, [pc, #48]	@ (800ad7c <std+0x5c>)
 800ad4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad80 <std+0x60>)
 800ad4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad50:	4b0c      	ldr	r3, [pc, #48]	@ (800ad84 <std+0x64>)
 800ad52:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad54:	4b0c      	ldr	r3, [pc, #48]	@ (800ad88 <std+0x68>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d006      	beq.n	800ad68 <std+0x48>
 800ad5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad5e:	4294      	cmp	r4, r2
 800ad60:	d002      	beq.n	800ad68 <std+0x48>
 800ad62:	33d0      	adds	r3, #208	@ 0xd0
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d105      	bne.n	800ad74 <std+0x54>
 800ad68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	f000 bab8 	b.w	800b2e4 <__retarget_lock_init_recursive>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	bf00      	nop
 800ad78:	0800aff1 	.word	0x0800aff1
 800ad7c:	0800b013 	.word	0x0800b013
 800ad80:	0800b04b 	.word	0x0800b04b
 800ad84:	0800b06f 	.word	0x0800b06f
 800ad88:	200006a8 	.word	0x200006a8

0800ad8c <stdio_exit_handler>:
 800ad8c:	4a02      	ldr	r2, [pc, #8]	@ (800ad98 <stdio_exit_handler+0xc>)
 800ad8e:	4903      	ldr	r1, [pc, #12]	@ (800ad9c <stdio_exit_handler+0x10>)
 800ad90:	4803      	ldr	r0, [pc, #12]	@ (800ada0 <stdio_exit_handler+0x14>)
 800ad92:	f000 b869 	b.w	800ae68 <_fwalk_sglue>
 800ad96:	bf00      	nop
 800ad98:	20000068 	.word	0x20000068
 800ad9c:	0800cee1 	.word	0x0800cee1
 800ada0:	20000078 	.word	0x20000078

0800ada4 <cleanup_stdio>:
 800ada4:	6841      	ldr	r1, [r0, #4]
 800ada6:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <cleanup_stdio+0x34>)
 800ada8:	b510      	push	{r4, lr}
 800adaa:	4299      	cmp	r1, r3
 800adac:	4604      	mov	r4, r0
 800adae:	d001      	beq.n	800adb4 <cleanup_stdio+0x10>
 800adb0:	f002 f896 	bl	800cee0 <_fflush_r>
 800adb4:	68a1      	ldr	r1, [r4, #8]
 800adb6:	4b09      	ldr	r3, [pc, #36]	@ (800addc <cleanup_stdio+0x38>)
 800adb8:	4299      	cmp	r1, r3
 800adba:	d002      	beq.n	800adc2 <cleanup_stdio+0x1e>
 800adbc:	4620      	mov	r0, r4
 800adbe:	f002 f88f 	bl	800cee0 <_fflush_r>
 800adc2:	68e1      	ldr	r1, [r4, #12]
 800adc4:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <cleanup_stdio+0x3c>)
 800adc6:	4299      	cmp	r1, r3
 800adc8:	d004      	beq.n	800add4 <cleanup_stdio+0x30>
 800adca:	4620      	mov	r0, r4
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f002 b886 	b.w	800cee0 <_fflush_r>
 800add4:	bd10      	pop	{r4, pc}
 800add6:	bf00      	nop
 800add8:	200006a8 	.word	0x200006a8
 800addc:	20000710 	.word	0x20000710
 800ade0:	20000778 	.word	0x20000778

0800ade4 <global_stdio_init.part.0>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae14 <global_stdio_init.part.0+0x30>)
 800ade8:	4c0b      	ldr	r4, [pc, #44]	@ (800ae18 <global_stdio_init.part.0+0x34>)
 800adea:	4a0c      	ldr	r2, [pc, #48]	@ (800ae1c <global_stdio_init.part.0+0x38>)
 800adec:	4620      	mov	r0, r4
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	2104      	movs	r1, #4
 800adf2:	2200      	movs	r2, #0
 800adf4:	f7ff ff94 	bl	800ad20 <std>
 800adf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adfc:	2201      	movs	r2, #1
 800adfe:	2109      	movs	r1, #9
 800ae00:	f7ff ff8e 	bl	800ad20 <std>
 800ae04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae08:	2202      	movs	r2, #2
 800ae0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae0e:	2112      	movs	r1, #18
 800ae10:	f7ff bf86 	b.w	800ad20 <std>
 800ae14:	200007e0 	.word	0x200007e0
 800ae18:	200006a8 	.word	0x200006a8
 800ae1c:	0800ad8d 	.word	0x0800ad8d

0800ae20 <__sfp_lock_acquire>:
 800ae20:	4801      	ldr	r0, [pc, #4]	@ (800ae28 <__sfp_lock_acquire+0x8>)
 800ae22:	f000 ba60 	b.w	800b2e6 <__retarget_lock_acquire_recursive>
 800ae26:	bf00      	nop
 800ae28:	200007e9 	.word	0x200007e9

0800ae2c <__sfp_lock_release>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	@ (800ae34 <__sfp_lock_release+0x8>)
 800ae2e:	f000 ba5b 	b.w	800b2e8 <__retarget_lock_release_recursive>
 800ae32:	bf00      	nop
 800ae34:	200007e9 	.word	0x200007e9

0800ae38 <__sinit>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	f7ff fff0 	bl	800ae20 <__sfp_lock_acquire>
 800ae40:	6a23      	ldr	r3, [r4, #32]
 800ae42:	b11b      	cbz	r3, 800ae4c <__sinit+0x14>
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f7ff bff0 	b.w	800ae2c <__sfp_lock_release>
 800ae4c:	4b04      	ldr	r3, [pc, #16]	@ (800ae60 <__sinit+0x28>)
 800ae4e:	6223      	str	r3, [r4, #32]
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <__sinit+0x2c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1f5      	bne.n	800ae44 <__sinit+0xc>
 800ae58:	f7ff ffc4 	bl	800ade4 <global_stdio_init.part.0>
 800ae5c:	e7f2      	b.n	800ae44 <__sinit+0xc>
 800ae5e:	bf00      	nop
 800ae60:	0800ada5 	.word	0x0800ada5
 800ae64:	200007e0 	.word	0x200007e0

0800ae68 <_fwalk_sglue>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	4688      	mov	r8, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	2600      	movs	r6, #0
 800ae74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae78:	f1b9 0901 	subs.w	r9, r9, #1
 800ae7c:	d505      	bpl.n	800ae8a <_fwalk_sglue+0x22>
 800ae7e:	6824      	ldr	r4, [r4, #0]
 800ae80:	2c00      	cmp	r4, #0
 800ae82:	d1f7      	bne.n	800ae74 <_fwalk_sglue+0xc>
 800ae84:	4630      	mov	r0, r6
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d907      	bls.n	800aea0 <_fwalk_sglue+0x38>
 800ae90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae94:	3301      	adds	r3, #1
 800ae96:	d003      	beq.n	800aea0 <_fwalk_sglue+0x38>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	47c0      	blx	r8
 800ae9e:	4306      	orrs	r6, r0
 800aea0:	3568      	adds	r5, #104	@ 0x68
 800aea2:	e7e9      	b.n	800ae78 <_fwalk_sglue+0x10>

0800aea4 <iprintf>:
 800aea4:	b40f      	push	{r0, r1, r2, r3}
 800aea6:	b507      	push	{r0, r1, r2, lr}
 800aea8:	4906      	ldr	r1, [pc, #24]	@ (800aec4 <iprintf+0x20>)
 800aeaa:	ab04      	add	r3, sp, #16
 800aeac:	6808      	ldr	r0, [r1, #0]
 800aeae:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb2:	6881      	ldr	r1, [r0, #8]
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	f001 fe7b 	bl	800cbb0 <_vfiprintf_r>
 800aeba:	b003      	add	sp, #12
 800aebc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec0:	b004      	add	sp, #16
 800aec2:	4770      	bx	lr
 800aec4:	20000074 	.word	0x20000074

0800aec8 <_puts_r>:
 800aec8:	6a03      	ldr	r3, [r0, #32]
 800aeca:	b570      	push	{r4, r5, r6, lr}
 800aecc:	4605      	mov	r5, r0
 800aece:	460e      	mov	r6, r1
 800aed0:	6884      	ldr	r4, [r0, #8]
 800aed2:	b90b      	cbnz	r3, 800aed8 <_puts_r+0x10>
 800aed4:	f7ff ffb0 	bl	800ae38 <__sinit>
 800aed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeda:	07db      	lsls	r3, r3, #31
 800aedc:	d405      	bmi.n	800aeea <_puts_r+0x22>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	0598      	lsls	r0, r3, #22
 800aee2:	d402      	bmi.n	800aeea <_puts_r+0x22>
 800aee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aee6:	f000 f9fe 	bl	800b2e6 <__retarget_lock_acquire_recursive>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	0719      	lsls	r1, r3, #28
 800aeee:	d502      	bpl.n	800aef6 <_puts_r+0x2e>
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d135      	bne.n	800af62 <_puts_r+0x9a>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f8fb 	bl	800b0f4 <__swsetup_r>
 800aefe:	b380      	cbz	r0, 800af62 <_puts_r+0x9a>
 800af00:	f04f 35ff 	mov.w	r5, #4294967295
 800af04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af06:	07da      	lsls	r2, r3, #31
 800af08:	d405      	bmi.n	800af16 <_puts_r+0x4e>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	059b      	lsls	r3, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_puts_r+0x4e>
 800af10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af12:	f000 f9e9 	bl	800b2e8 <__retarget_lock_release_recursive>
 800af16:	4628      	mov	r0, r5
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da04      	bge.n	800af28 <_puts_r+0x60>
 800af1e:	69a2      	ldr	r2, [r4, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	dc17      	bgt.n	800af54 <_puts_r+0x8c>
 800af24:	290a      	cmp	r1, #10
 800af26:	d015      	beq.n	800af54 <_puts_r+0x8c>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	6022      	str	r2, [r4, #0]
 800af2e:	7019      	strb	r1, [r3, #0]
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af36:	3b01      	subs	r3, #1
 800af38:	60a3      	str	r3, [r4, #8]
 800af3a:	2900      	cmp	r1, #0
 800af3c:	d1ed      	bne.n	800af1a <_puts_r+0x52>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da11      	bge.n	800af66 <_puts_r+0x9e>
 800af42:	4622      	mov	r2, r4
 800af44:	210a      	movs	r1, #10
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f895 	bl	800b076 <__swbuf_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d0d7      	beq.n	800af00 <_puts_r+0x38>
 800af50:	250a      	movs	r5, #10
 800af52:	e7d7      	b.n	800af04 <_puts_r+0x3c>
 800af54:	4622      	mov	r2, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f000 f88d 	bl	800b076 <__swbuf_r>
 800af5c:	3001      	adds	r0, #1
 800af5e:	d1e7      	bne.n	800af30 <_puts_r+0x68>
 800af60:	e7ce      	b.n	800af00 <_puts_r+0x38>
 800af62:	3e01      	subs	r6, #1
 800af64:	e7e4      	b.n	800af30 <_puts_r+0x68>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	6022      	str	r2, [r4, #0]
 800af6c:	220a      	movs	r2, #10
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e7ee      	b.n	800af50 <_puts_r+0x88>
	...

0800af74 <puts>:
 800af74:	4b02      	ldr	r3, [pc, #8]	@ (800af80 <puts+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f7ff bfa5 	b.w	800aec8 <_puts_r>
 800af7e:	bf00      	nop
 800af80:	20000074 	.word	0x20000074

0800af84 <sniprintf>:
 800af84:	b40c      	push	{r2, r3}
 800af86:	b530      	push	{r4, r5, lr}
 800af88:	4b18      	ldr	r3, [pc, #96]	@ (800afec <sniprintf+0x68>)
 800af8a:	1e0c      	subs	r4, r1, #0
 800af8c:	681d      	ldr	r5, [r3, #0]
 800af8e:	b09d      	sub	sp, #116	@ 0x74
 800af90:	da08      	bge.n	800afa4 <sniprintf+0x20>
 800af92:	238b      	movs	r3, #139	@ 0x8b
 800af94:	f04f 30ff 	mov.w	r0, #4294967295
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	b01d      	add	sp, #116	@ 0x74
 800af9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afa0:	b002      	add	sp, #8
 800afa2:	4770      	bx	lr
 800afa4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800afa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800afac:	f04f 0300 	mov.w	r3, #0
 800afb0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800afb2:	bf0c      	ite	eq
 800afb4:	4623      	moveq	r3, r4
 800afb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afc2:	9002      	str	r0, [sp, #8]
 800afc4:	9006      	str	r0, [sp, #24]
 800afc6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afca:	4628      	mov	r0, r5
 800afcc:	ab21      	add	r3, sp, #132	@ 0x84
 800afce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800afd0:	a902      	add	r1, sp, #8
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	f001 fcc8 	bl	800c968 <_svfiprintf_r>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	bfbc      	itt	lt
 800afdc:	238b      	movlt	r3, #139	@ 0x8b
 800afde:	602b      	strlt	r3, [r5, #0]
 800afe0:	2c00      	cmp	r4, #0
 800afe2:	d0da      	beq.n	800af9a <sniprintf+0x16>
 800afe4:	2200      	movs	r2, #0
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	e7d6      	b.n	800af9a <sniprintf+0x16>
 800afec:	20000074 	.word	0x20000074

0800aff0 <__sread>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	460c      	mov	r4, r1
 800aff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff8:	f000 f926 	bl	800b248 <_read_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	bfab      	itete	ge
 800b000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b002:	89a3      	ldrhlt	r3, [r4, #12]
 800b004:	181b      	addge	r3, r3, r0
 800b006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b00a:	bfac      	ite	ge
 800b00c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b00e:	81a3      	strhlt	r3, [r4, #12]
 800b010:	bd10      	pop	{r4, pc}

0800b012 <__swrite>:
 800b012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b016:	461f      	mov	r7, r3
 800b018:	898b      	ldrh	r3, [r1, #12]
 800b01a:	4605      	mov	r5, r0
 800b01c:	05db      	lsls	r3, r3, #23
 800b01e:	460c      	mov	r4, r1
 800b020:	4616      	mov	r6, r2
 800b022:	d505      	bpl.n	800b030 <__swrite+0x1e>
 800b024:	2302      	movs	r3, #2
 800b026:	2200      	movs	r2, #0
 800b028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02c:	f000 f8fa 	bl	800b224 <_lseek_r>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	4632      	mov	r2, r6
 800b034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	4628      	mov	r0, r5
 800b03c:	463b      	mov	r3, r7
 800b03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	f000 b911 	b.w	800b26c <_write_r>

0800b04a <__sseek>:
 800b04a:	b510      	push	{r4, lr}
 800b04c:	460c      	mov	r4, r1
 800b04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b052:	f000 f8e7 	bl	800b224 <_lseek_r>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	bf15      	itete	ne
 800b05c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b05e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b066:	81a3      	strheq	r3, [r4, #12]
 800b068:	bf18      	it	ne
 800b06a:	81a3      	strhne	r3, [r4, #12]
 800b06c:	bd10      	pop	{r4, pc}

0800b06e <__sclose>:
 800b06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b072:	f000 b8c7 	b.w	800b204 <_close_r>

0800b076 <__swbuf_r>:
 800b076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b078:	460e      	mov	r6, r1
 800b07a:	4614      	mov	r4, r2
 800b07c:	4605      	mov	r5, r0
 800b07e:	b118      	cbz	r0, 800b088 <__swbuf_r+0x12>
 800b080:	6a03      	ldr	r3, [r0, #32]
 800b082:	b90b      	cbnz	r3, 800b088 <__swbuf_r+0x12>
 800b084:	f7ff fed8 	bl	800ae38 <__sinit>
 800b088:	69a3      	ldr	r3, [r4, #24]
 800b08a:	60a3      	str	r3, [r4, #8]
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	071a      	lsls	r2, r3, #28
 800b090:	d501      	bpl.n	800b096 <__swbuf_r+0x20>
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	b943      	cbnz	r3, 800b0a8 <__swbuf_r+0x32>
 800b096:	4621      	mov	r1, r4
 800b098:	4628      	mov	r0, r5
 800b09a:	f000 f82b 	bl	800b0f4 <__swsetup_r>
 800b09e:	b118      	cbz	r0, 800b0a8 <__swbuf_r+0x32>
 800b0a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	b2f6      	uxtb	r6, r6
 800b0ae:	1a98      	subs	r0, r3, r2
 800b0b0:	6963      	ldr	r3, [r4, #20]
 800b0b2:	4637      	mov	r7, r6
 800b0b4:	4283      	cmp	r3, r0
 800b0b6:	dc05      	bgt.n	800b0c4 <__swbuf_r+0x4e>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f001 ff10 	bl	800cee0 <_fflush_r>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d1ed      	bne.n	800b0a0 <__swbuf_r+0x2a>
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	60a3      	str	r3, [r4, #8]
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	701e      	strb	r6, [r3, #0]
 800b0d2:	6962      	ldr	r2, [r4, #20]
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d004      	beq.n	800b0e4 <__swbuf_r+0x6e>
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	07db      	lsls	r3, r3, #31
 800b0de:	d5e1      	bpl.n	800b0a4 <__swbuf_r+0x2e>
 800b0e0:	2e0a      	cmp	r6, #10
 800b0e2:	d1df      	bne.n	800b0a4 <__swbuf_r+0x2e>
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f001 fefa 	bl	800cee0 <_fflush_r>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0d9      	beq.n	800b0a4 <__swbuf_r+0x2e>
 800b0f0:	e7d6      	b.n	800b0a0 <__swbuf_r+0x2a>
	...

0800b0f4 <__swsetup_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4b29      	ldr	r3, [pc, #164]	@ (800b19c <__swsetup_r+0xa8>)
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	b118      	cbz	r0, 800b108 <__swsetup_r+0x14>
 800b100:	6a03      	ldr	r3, [r0, #32]
 800b102:	b90b      	cbnz	r3, 800b108 <__swsetup_r+0x14>
 800b104:	f7ff fe98 	bl	800ae38 <__sinit>
 800b108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b10c:	0719      	lsls	r1, r3, #28
 800b10e:	d422      	bmi.n	800b156 <__swsetup_r+0x62>
 800b110:	06da      	lsls	r2, r3, #27
 800b112:	d407      	bmi.n	800b124 <__swsetup_r+0x30>
 800b114:	2209      	movs	r2, #9
 800b116:	602a      	str	r2, [r5, #0]
 800b118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	81a3      	strh	r3, [r4, #12]
 800b122:	e033      	b.n	800b18c <__swsetup_r+0x98>
 800b124:	0758      	lsls	r0, r3, #29
 800b126:	d512      	bpl.n	800b14e <__swsetup_r+0x5a>
 800b128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b12a:	b141      	cbz	r1, 800b13e <__swsetup_r+0x4a>
 800b12c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b130:	4299      	cmp	r1, r3
 800b132:	d002      	beq.n	800b13a <__swsetup_r+0x46>
 800b134:	4628      	mov	r0, r5
 800b136:	f000 ff43 	bl	800bfc0 <_free_r>
 800b13a:	2300      	movs	r3, #0
 800b13c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b144:	81a3      	strh	r3, [r4, #12]
 800b146:	2300      	movs	r3, #0
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f043 0308 	orr.w	r3, r3, #8
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	b94b      	cbnz	r3, 800b16e <__swsetup_r+0x7a>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b164:	d003      	beq.n	800b16e <__swsetup_r+0x7a>
 800b166:	4621      	mov	r1, r4
 800b168:	4628      	mov	r0, r5
 800b16a:	f001 ff06 	bl	800cf7a <__smakebuf_r>
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	f013 0201 	ands.w	r2, r3, #1
 800b176:	d00a      	beq.n	800b18e <__swsetup_r+0x9a>
 800b178:	2200      	movs	r2, #0
 800b17a:	60a2      	str	r2, [r4, #8]
 800b17c:	6962      	ldr	r2, [r4, #20]
 800b17e:	4252      	negs	r2, r2
 800b180:	61a2      	str	r2, [r4, #24]
 800b182:	6922      	ldr	r2, [r4, #16]
 800b184:	b942      	cbnz	r2, 800b198 <__swsetup_r+0xa4>
 800b186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b18a:	d1c5      	bne.n	800b118 <__swsetup_r+0x24>
 800b18c:	bd38      	pop	{r3, r4, r5, pc}
 800b18e:	0799      	lsls	r1, r3, #30
 800b190:	bf58      	it	pl
 800b192:	6962      	ldrpl	r2, [r4, #20]
 800b194:	60a2      	str	r2, [r4, #8]
 800b196:	e7f4      	b.n	800b182 <__swsetup_r+0x8e>
 800b198:	2000      	movs	r0, #0
 800b19a:	e7f7      	b.n	800b18c <__swsetup_r+0x98>
 800b19c:	20000074 	.word	0x20000074

0800b1a0 <memset>:
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4402      	add	r2, r0
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d100      	bne.n	800b1aa <memset+0xa>
 800b1a8:	4770      	bx	lr
 800b1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ae:	e7f9      	b.n	800b1a4 <memset+0x4>

0800b1b0 <strncat>:
 800b1b0:	b530      	push	{r4, r5, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	7825      	ldrb	r5, [r4, #0]
 800b1b6:	4623      	mov	r3, r4
 800b1b8:	3401      	adds	r4, #1
 800b1ba:	2d00      	cmp	r5, #0
 800b1bc:	d1fa      	bne.n	800b1b4 <strncat+0x4>
 800b1be:	3a01      	subs	r2, #1
 800b1c0:	d304      	bcc.n	800b1cc <strncat+0x1c>
 800b1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c6:	f803 4b01 	strb.w	r4, [r3], #1
 800b1ca:	b904      	cbnz	r4, 800b1ce <strncat+0x1e>
 800b1cc:	bd30      	pop	{r4, r5, pc}
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d1f5      	bne.n	800b1be <strncat+0xe>
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e7f3      	b.n	800b1be <strncat+0xe>

0800b1d6 <strncpy>:
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	3901      	subs	r1, #1
 800b1dc:	b132      	cbz	r2, 800b1ec <strncpy+0x16>
 800b1de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1e2:	3a01      	subs	r2, #1
 800b1e4:	f803 4b01 	strb.w	r4, [r3], #1
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	d1f7      	bne.n	800b1dc <strncpy+0x6>
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	441a      	add	r2, r3
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d100      	bne.n	800b1f6 <strncpy+0x20>
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1fa:	e7f9      	b.n	800b1f0 <strncpy+0x1a>

0800b1fc <_localeconv_r>:
 800b1fc:	4800      	ldr	r0, [pc, #0]	@ (800b200 <_localeconv_r+0x4>)
 800b1fe:	4770      	bx	lr
 800b200:	200001b4 	.word	0x200001b4

0800b204 <_close_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	2300      	movs	r3, #0
 800b208:	4d05      	ldr	r5, [pc, #20]	@ (800b220 <_close_r+0x1c>)
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7fa fb4f 	bl	80058b2 <_close>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_close_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_close_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	200007e4 	.word	0x200007e4

0800b224 <_lseek_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	4611      	mov	r1, r2
 800b22c:	2200      	movs	r2, #0
 800b22e:	4d05      	ldr	r5, [pc, #20]	@ (800b244 <_lseek_r+0x20>)
 800b230:	602a      	str	r2, [r5, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	f7fa fb61 	bl	80058fa <_lseek>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d102      	bne.n	800b242 <_lseek_r+0x1e>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	b103      	cbz	r3, 800b242 <_lseek_r+0x1e>
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	200007e4 	.word	0x200007e4

0800b248 <_read_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	2200      	movs	r2, #0
 800b252:	4d05      	ldr	r5, [pc, #20]	@ (800b268 <_read_r+0x20>)
 800b254:	602a      	str	r2, [r5, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	f7fa faf2 	bl	8005840 <_read>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_read_r+0x1e>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	b103      	cbz	r3, 800b266 <_read_r+0x1e>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	200007e4 	.word	0x200007e4

0800b26c <_write_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	4611      	mov	r1, r2
 800b274:	2200      	movs	r2, #0
 800b276:	4d05      	ldr	r5, [pc, #20]	@ (800b28c <_write_r+0x20>)
 800b278:	602a      	str	r2, [r5, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f7fa fafd 	bl	800587a <_write>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_write_r+0x1e>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_write_r+0x1e>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	200007e4 	.word	0x200007e4

0800b290 <__errno>:
 800b290:	4b01      	ldr	r3, [pc, #4]	@ (800b298 <__errno+0x8>)
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	20000074 	.word	0x20000074

0800b29c <__libc_init_array>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	2600      	movs	r6, #0
 800b2a0:	4d0c      	ldr	r5, [pc, #48]	@ (800b2d4 <__libc_init_array+0x38>)
 800b2a2:	4c0d      	ldr	r4, [pc, #52]	@ (800b2d8 <__libc_init_array+0x3c>)
 800b2a4:	1b64      	subs	r4, r4, r5
 800b2a6:	10a4      	asrs	r4, r4, #2
 800b2a8:	42a6      	cmp	r6, r4
 800b2aa:	d109      	bne.n	800b2c0 <__libc_init_array+0x24>
 800b2ac:	f001 ffe2 	bl	800d274 <_init>
 800b2b0:	2600      	movs	r6, #0
 800b2b2:	4d0a      	ldr	r5, [pc, #40]	@ (800b2dc <__libc_init_array+0x40>)
 800b2b4:	4c0a      	ldr	r4, [pc, #40]	@ (800b2e0 <__libc_init_array+0x44>)
 800b2b6:	1b64      	subs	r4, r4, r5
 800b2b8:	10a4      	asrs	r4, r4, #2
 800b2ba:	42a6      	cmp	r6, r4
 800b2bc:	d105      	bne.n	800b2ca <__libc_init_array+0x2e>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c4:	4798      	blx	r3
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	e7ee      	b.n	800b2a8 <__libc_init_array+0xc>
 800b2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ce:	4798      	blx	r3
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	e7f2      	b.n	800b2ba <__libc_init_array+0x1e>
 800b2d4:	0800db54 	.word	0x0800db54
 800b2d8:	0800db54 	.word	0x0800db54
 800b2dc:	0800db54 	.word	0x0800db54
 800b2e0:	0800db58 	.word	0x0800db58

0800b2e4 <__retarget_lock_init_recursive>:
 800b2e4:	4770      	bx	lr

0800b2e6 <__retarget_lock_acquire_recursive>:
 800b2e6:	4770      	bx	lr

0800b2e8 <__retarget_lock_release_recursive>:
 800b2e8:	4770      	bx	lr

0800b2ea <memchr>:
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	b2c9      	uxtb	r1, r1
 800b2f0:	4402      	add	r2, r0
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	d101      	bne.n	800b2fc <memchr+0x12>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	e003      	b.n	800b304 <memchr+0x1a>
 800b2fc:	7804      	ldrb	r4, [r0, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	428c      	cmp	r4, r1
 800b302:	d1f6      	bne.n	800b2f2 <memchr+0x8>
 800b304:	bd10      	pop	{r4, pc}

0800b306 <quorem>:
 800b306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	6903      	ldr	r3, [r0, #16]
 800b30c:	690c      	ldr	r4, [r1, #16]
 800b30e:	4607      	mov	r7, r0
 800b310:	42a3      	cmp	r3, r4
 800b312:	db7e      	blt.n	800b412 <quorem+0x10c>
 800b314:	3c01      	subs	r4, #1
 800b316:	00a3      	lsls	r3, r4, #2
 800b318:	f100 0514 	add.w	r5, r0, #20
 800b31c:	f101 0814 	add.w	r8, r1, #20
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b330:	3301      	adds	r3, #1
 800b332:	429a      	cmp	r2, r3
 800b334:	fbb2 f6f3 	udiv	r6, r2, r3
 800b338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b33c:	d32e      	bcc.n	800b39c <quorem+0x96>
 800b33e:	f04f 0a00 	mov.w	sl, #0
 800b342:	46c4      	mov	ip, r8
 800b344:	46ae      	mov	lr, r5
 800b346:	46d3      	mov	fp, sl
 800b348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b34c:	b298      	uxth	r0, r3
 800b34e:	fb06 a000 	mla	r0, r6, r0, sl
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	0c02      	lsrs	r2, r0, #16
 800b356:	fb06 2303 	mla	r3, r6, r3, r2
 800b35a:	f8de 2000 	ldr.w	r2, [lr]
 800b35e:	b280      	uxth	r0, r0
 800b360:	b292      	uxth	r2, r2
 800b362:	1a12      	subs	r2, r2, r0
 800b364:	445a      	add	r2, fp
 800b366:	f8de 0000 	ldr.w	r0, [lr]
 800b36a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b36e:	b29b      	uxth	r3, r3
 800b370:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b374:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b378:	b292      	uxth	r2, r2
 800b37a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b37e:	45e1      	cmp	r9, ip
 800b380:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b384:	f84e 2b04 	str.w	r2, [lr], #4
 800b388:	d2de      	bcs.n	800b348 <quorem+0x42>
 800b38a:	9b00      	ldr	r3, [sp, #0]
 800b38c:	58eb      	ldr	r3, [r5, r3]
 800b38e:	b92b      	cbnz	r3, 800b39c <quorem+0x96>
 800b390:	9b01      	ldr	r3, [sp, #4]
 800b392:	3b04      	subs	r3, #4
 800b394:	429d      	cmp	r5, r3
 800b396:	461a      	mov	r2, r3
 800b398:	d32f      	bcc.n	800b3fa <quorem+0xf4>
 800b39a:	613c      	str	r4, [r7, #16]
 800b39c:	4638      	mov	r0, r7
 800b39e:	f001 f97f 	bl	800c6a0 <__mcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	db25      	blt.n	800b3f2 <quorem+0xec>
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3ae:	f8d1 c000 	ldr.w	ip, [r1]
 800b3b2:	fa1f fe82 	uxth.w	lr, r2
 800b3b6:	fa1f f38c 	uxth.w	r3, ip
 800b3ba:	eba3 030e 	sub.w	r3, r3, lr
 800b3be:	4403      	add	r3, r0
 800b3c0:	0c12      	lsrs	r2, r2, #16
 800b3c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b3c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3d0:	45c1      	cmp	r9, r8
 800b3d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3d6:	f841 3b04 	str.w	r3, [r1], #4
 800b3da:	d2e6      	bcs.n	800b3aa <quorem+0xa4>
 800b3dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3e4:	b922      	cbnz	r2, 800b3f0 <quorem+0xea>
 800b3e6:	3b04      	subs	r3, #4
 800b3e8:	429d      	cmp	r5, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	d30b      	bcc.n	800b406 <quorem+0x100>
 800b3ee:	613c      	str	r4, [r7, #16]
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	b003      	add	sp, #12
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	3b04      	subs	r3, #4
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d1cb      	bne.n	800b39a <quorem+0x94>
 800b402:	3c01      	subs	r4, #1
 800b404:	e7c6      	b.n	800b394 <quorem+0x8e>
 800b406:	6812      	ldr	r2, [r2, #0]
 800b408:	3b04      	subs	r3, #4
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d1ef      	bne.n	800b3ee <quorem+0xe8>
 800b40e:	3c01      	subs	r4, #1
 800b410:	e7ea      	b.n	800b3e8 <quorem+0xe2>
 800b412:	2000      	movs	r0, #0
 800b414:	e7ee      	b.n	800b3f4 <quorem+0xee>
	...

0800b418 <_dtoa_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	4614      	mov	r4, r2
 800b41e:	461d      	mov	r5, r3
 800b420:	69c7      	ldr	r7, [r0, #28]
 800b422:	b097      	sub	sp, #92	@ 0x5c
 800b424:	4681      	mov	r9, r0
 800b426:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b42a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b42c:	b97f      	cbnz	r7, 800b44e <_dtoa_r+0x36>
 800b42e:	2010      	movs	r0, #16
 800b430:	f000 fe0e 	bl	800c050 <malloc>
 800b434:	4602      	mov	r2, r0
 800b436:	f8c9 001c 	str.w	r0, [r9, #28]
 800b43a:	b920      	cbnz	r0, 800b446 <_dtoa_r+0x2e>
 800b43c:	21ef      	movs	r1, #239	@ 0xef
 800b43e:	4bac      	ldr	r3, [pc, #688]	@ (800b6f0 <_dtoa_r+0x2d8>)
 800b440:	48ac      	ldr	r0, [pc, #688]	@ (800b6f4 <_dtoa_r+0x2dc>)
 800b442:	f001 fe31 	bl	800d0a8 <__assert_func>
 800b446:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b44a:	6007      	str	r7, [r0, #0]
 800b44c:	60c7      	str	r7, [r0, #12]
 800b44e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	b159      	cbz	r1, 800b46e <_dtoa_r+0x56>
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	2301      	movs	r3, #1
 800b45a:	4093      	lsls	r3, r2
 800b45c:	604a      	str	r2, [r1, #4]
 800b45e:	608b      	str	r3, [r1, #8]
 800b460:	4648      	mov	r0, r9
 800b462:	f000 feeb 	bl	800c23c <_Bfree>
 800b466:	2200      	movs	r2, #0
 800b468:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	1e2b      	subs	r3, r5, #0
 800b470:	bfaf      	iteee	ge
 800b472:	2300      	movge	r3, #0
 800b474:	2201      	movlt	r2, #1
 800b476:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b47a:	9307      	strlt	r3, [sp, #28]
 800b47c:	bfa8      	it	ge
 800b47e:	6033      	strge	r3, [r6, #0]
 800b480:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b484:	4b9c      	ldr	r3, [pc, #624]	@ (800b6f8 <_dtoa_r+0x2e0>)
 800b486:	bfb8      	it	lt
 800b488:	6032      	strlt	r2, [r6, #0]
 800b48a:	ea33 0308 	bics.w	r3, r3, r8
 800b48e:	d112      	bne.n	800b4b6 <_dtoa_r+0x9e>
 800b490:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b494:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b49c:	4323      	orrs	r3, r4
 800b49e:	f000 855e 	beq.w	800bf5e <_dtoa_r+0xb46>
 800b4a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b4a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b6fc <_dtoa_r+0x2e4>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 8560 	beq.w	800bf6e <_dtoa_r+0xb56>
 800b4ae:	f10a 0303 	add.w	r3, sl, #3
 800b4b2:	f000 bd5a 	b.w	800bf6a <_dtoa_r+0xb52>
 800b4b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f7f5 fa79 	bl	80009bc <__aeabi_dcmpeq>
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	b158      	cbz	r0, 800b4e6 <_dtoa_r+0xce>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b4d6:	b113      	cbz	r3, 800b4de <_dtoa_r+0xc6>
 800b4d8:	4b89      	ldr	r3, [pc, #548]	@ (800b700 <_dtoa_r+0x2e8>)
 800b4da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b704 <_dtoa_r+0x2ec>
 800b4e2:	f000 bd44 	b.w	800bf6e <_dtoa_r+0xb56>
 800b4e6:	ab14      	add	r3, sp, #80	@ 0x50
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	ab15      	add	r3, sp, #84	@ 0x54
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	4648      	mov	r0, r9
 800b4f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b4f4:	f001 f984 	bl	800c800 <__d2b>
 800b4f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b4fc:	9003      	str	r0, [sp, #12]
 800b4fe:	2e00      	cmp	r6, #0
 800b500:	d078      	beq.n	800b5f4 <_dtoa_r+0x1dc>
 800b502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b508:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b50c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b510:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b514:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b518:	9712      	str	r7, [sp, #72]	@ 0x48
 800b51a:	4619      	mov	r1, r3
 800b51c:	2200      	movs	r2, #0
 800b51e:	4b7a      	ldr	r3, [pc, #488]	@ (800b708 <_dtoa_r+0x2f0>)
 800b520:	f7f4 fe2c 	bl	800017c <__aeabi_dsub>
 800b524:	a36c      	add	r3, pc, #432	@ (adr r3, 800b6d8 <_dtoa_r+0x2c0>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 ffdf 	bl	80004ec <__aeabi_dmul>
 800b52e:	a36c      	add	r3, pc, #432	@ (adr r3, 800b6e0 <_dtoa_r+0x2c8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe24 	bl	8000180 <__adddf3>
 800b538:	4604      	mov	r4, r0
 800b53a:	4630      	mov	r0, r6
 800b53c:	460d      	mov	r5, r1
 800b53e:	f7f4 ff6b 	bl	8000418 <__aeabi_i2d>
 800b542:	a369      	add	r3, pc, #420	@ (adr r3, 800b6e8 <_dtoa_r+0x2d0>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f7f4 ffd0 	bl	80004ec <__aeabi_dmul>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f4 fe14 	bl	8000180 <__adddf3>
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	f7f5 fa76 	bl	8000a4c <__aeabi_d2iz>
 800b560:	2200      	movs	r2, #0
 800b562:	4607      	mov	r7, r0
 800b564:	2300      	movs	r3, #0
 800b566:	4620      	mov	r0, r4
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 fa31 	bl	80009d0 <__aeabi_dcmplt>
 800b56e:	b140      	cbz	r0, 800b582 <_dtoa_r+0x16a>
 800b570:	4638      	mov	r0, r7
 800b572:	f7f4 ff51 	bl	8000418 <__aeabi_i2d>
 800b576:	4622      	mov	r2, r4
 800b578:	462b      	mov	r3, r5
 800b57a:	f7f5 fa1f 	bl	80009bc <__aeabi_dcmpeq>
 800b57e:	b900      	cbnz	r0, 800b582 <_dtoa_r+0x16a>
 800b580:	3f01      	subs	r7, #1
 800b582:	2f16      	cmp	r7, #22
 800b584:	d854      	bhi.n	800b630 <_dtoa_r+0x218>
 800b586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b58a:	4b60      	ldr	r3, [pc, #384]	@ (800b70c <_dtoa_r+0x2f4>)
 800b58c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7f5 fa1c 	bl	80009d0 <__aeabi_dcmplt>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d04b      	beq.n	800b634 <_dtoa_r+0x21c>
 800b59c:	2300      	movs	r3, #0
 800b59e:	3f01      	subs	r7, #1
 800b5a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b5a4:	1b9b      	subs	r3, r3, r6
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	bf49      	itett	mi
 800b5aa:	f1c3 0301 	rsbmi	r3, r3, #1
 800b5ae:	2300      	movpl	r3, #0
 800b5b0:	9304      	strmi	r3, [sp, #16]
 800b5b2:	2300      	movmi	r3, #0
 800b5b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5b6:	bf54      	ite	pl
 800b5b8:	9304      	strpl	r3, [sp, #16]
 800b5ba:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b5bc:	2f00      	cmp	r7, #0
 800b5be:	db3b      	blt.n	800b638 <_dtoa_r+0x220>
 800b5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c2:	970e      	str	r7, [sp, #56]	@ 0x38
 800b5c4:	443b      	add	r3, r7
 800b5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d865      	bhi.n	800b69e <_dtoa_r+0x286>
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	bfc4      	itt	gt
 800b5d6:	3b04      	subgt	r3, #4
 800b5d8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b5da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b5dc:	bfc8      	it	gt
 800b5de:	2400      	movgt	r4, #0
 800b5e0:	f1a3 0302 	sub.w	r3, r3, #2
 800b5e4:	bfd8      	it	le
 800b5e6:	2401      	movle	r4, #1
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d864      	bhi.n	800b6b6 <_dtoa_r+0x29e>
 800b5ec:	e8df f003 	tbb	[pc, r3]
 800b5f0:	2c385553 	.word	0x2c385553
 800b5f4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b5f8:	441e      	add	r6, r3
 800b5fa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	bfc1      	itttt	gt
 800b602:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b606:	fa08 f803 	lslgt.w	r8, r8, r3
 800b60a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b60e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b612:	bfd6      	itet	le
 800b614:	f1c3 0320 	rsble	r3, r3, #32
 800b618:	ea48 0003 	orrgt.w	r0, r8, r3
 800b61c:	fa04 f003 	lslle.w	r0, r4, r3
 800b620:	f7f4 feea 	bl	80003f8 <__aeabi_ui2d>
 800b624:	2201      	movs	r2, #1
 800b626:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b62a:	3e01      	subs	r6, #1
 800b62c:	9212      	str	r2, [sp, #72]	@ 0x48
 800b62e:	e774      	b.n	800b51a <_dtoa_r+0x102>
 800b630:	2301      	movs	r3, #1
 800b632:	e7b5      	b.n	800b5a0 <_dtoa_r+0x188>
 800b634:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b636:	e7b4      	b.n	800b5a2 <_dtoa_r+0x18a>
 800b638:	9b04      	ldr	r3, [sp, #16]
 800b63a:	1bdb      	subs	r3, r3, r7
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	427b      	negs	r3, r7
 800b640:	930a      	str	r3, [sp, #40]	@ 0x28
 800b642:	2300      	movs	r3, #0
 800b644:	930e      	str	r3, [sp, #56]	@ 0x38
 800b646:	e7c1      	b.n	800b5cc <_dtoa_r+0x1b4>
 800b648:	2301      	movs	r3, #1
 800b64a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b64c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b64e:	eb07 0b03 	add.w	fp, r7, r3
 800b652:	f10b 0301 	add.w	r3, fp, #1
 800b656:	2b01      	cmp	r3, #1
 800b658:	9308      	str	r3, [sp, #32]
 800b65a:	bfb8      	it	lt
 800b65c:	2301      	movlt	r3, #1
 800b65e:	e006      	b.n	800b66e <_dtoa_r+0x256>
 800b660:	2301      	movs	r3, #1
 800b662:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b666:	2b00      	cmp	r3, #0
 800b668:	dd28      	ble.n	800b6bc <_dtoa_r+0x2a4>
 800b66a:	469b      	mov	fp, r3
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	2100      	movs	r1, #0
 800b670:	2204      	movs	r2, #4
 800b672:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b676:	f102 0514 	add.w	r5, r2, #20
 800b67a:	429d      	cmp	r5, r3
 800b67c:	d926      	bls.n	800b6cc <_dtoa_r+0x2b4>
 800b67e:	6041      	str	r1, [r0, #4]
 800b680:	4648      	mov	r0, r9
 800b682:	f000 fd9b 	bl	800c1bc <_Balloc>
 800b686:	4682      	mov	sl, r0
 800b688:	2800      	cmp	r0, #0
 800b68a:	d143      	bne.n	800b714 <_dtoa_r+0x2fc>
 800b68c:	4602      	mov	r2, r0
 800b68e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b692:	4b1f      	ldr	r3, [pc, #124]	@ (800b710 <_dtoa_r+0x2f8>)
 800b694:	e6d4      	b.n	800b440 <_dtoa_r+0x28>
 800b696:	2300      	movs	r3, #0
 800b698:	e7e3      	b.n	800b662 <_dtoa_r+0x24a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	e7d5      	b.n	800b64a <_dtoa_r+0x232>
 800b69e:	2401      	movs	r4, #1
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6a4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b6a6:	f04f 3bff 	mov.w	fp, #4294967295
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2312      	movs	r3, #18
 800b6ae:	f8cd b020 	str.w	fp, [sp, #32]
 800b6b2:	9221      	str	r2, [sp, #132]	@ 0x84
 800b6b4:	e7db      	b.n	800b66e <_dtoa_r+0x256>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6ba:	e7f4      	b.n	800b6a6 <_dtoa_r+0x28e>
 800b6bc:	f04f 0b01 	mov.w	fp, #1
 800b6c0:	465b      	mov	r3, fp
 800b6c2:	f8cd b020 	str.w	fp, [sp, #32]
 800b6c6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800b6ca:	e7d0      	b.n	800b66e <_dtoa_r+0x256>
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	0052      	lsls	r2, r2, #1
 800b6d0:	e7d1      	b.n	800b676 <_dtoa_r+0x25e>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	636f4361 	.word	0x636f4361
 800b6dc:	3fd287a7 	.word	0x3fd287a7
 800b6e0:	8b60c8b3 	.word	0x8b60c8b3
 800b6e4:	3fc68a28 	.word	0x3fc68a28
 800b6e8:	509f79fb 	.word	0x509f79fb
 800b6ec:	3fd34413 	.word	0x3fd34413
 800b6f0:	0800d817 	.word	0x0800d817
 800b6f4:	0800d82e 	.word	0x0800d82e
 800b6f8:	7ff00000 	.word	0x7ff00000
 800b6fc:	0800d813 	.word	0x0800d813
 800b700:	0800d7e7 	.word	0x0800d7e7
 800b704:	0800d7e6 	.word	0x0800d7e6
 800b708:	3ff80000 	.word	0x3ff80000
 800b70c:	0800d980 	.word	0x0800d980
 800b710:	0800d886 	.word	0x0800d886
 800b714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b718:	6018      	str	r0, [r3, #0]
 800b71a:	9b08      	ldr	r3, [sp, #32]
 800b71c:	2b0e      	cmp	r3, #14
 800b71e:	f200 80a1 	bhi.w	800b864 <_dtoa_r+0x44c>
 800b722:	2c00      	cmp	r4, #0
 800b724:	f000 809e 	beq.w	800b864 <_dtoa_r+0x44c>
 800b728:	2f00      	cmp	r7, #0
 800b72a:	dd33      	ble.n	800b794 <_dtoa_r+0x37c>
 800b72c:	4b9c      	ldr	r3, [pc, #624]	@ (800b9a0 <_dtoa_r+0x588>)
 800b72e:	f007 020f 	and.w	r2, r7, #15
 800b732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b736:	05f8      	lsls	r0, r7, #23
 800b738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b73c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800b740:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b744:	d516      	bpl.n	800b774 <_dtoa_r+0x35c>
 800b746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b74a:	4b96      	ldr	r3, [pc, #600]	@ (800b9a4 <_dtoa_r+0x58c>)
 800b74c:	2603      	movs	r6, #3
 800b74e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b752:	f7f4 fff5 	bl	8000740 <__aeabi_ddiv>
 800b756:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b75a:	f004 040f 	and.w	r4, r4, #15
 800b75e:	4d91      	ldr	r5, [pc, #580]	@ (800b9a4 <_dtoa_r+0x58c>)
 800b760:	b954      	cbnz	r4, 800b778 <_dtoa_r+0x360>
 800b762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b76a:	f7f4 ffe9 	bl	8000740 <__aeabi_ddiv>
 800b76e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b772:	e028      	b.n	800b7c6 <_dtoa_r+0x3ae>
 800b774:	2602      	movs	r6, #2
 800b776:	e7f2      	b.n	800b75e <_dtoa_r+0x346>
 800b778:	07e1      	lsls	r1, r4, #31
 800b77a:	d508      	bpl.n	800b78e <_dtoa_r+0x376>
 800b77c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b780:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b784:	f7f4 feb2 	bl	80004ec <__aeabi_dmul>
 800b788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b78c:	3601      	adds	r6, #1
 800b78e:	1064      	asrs	r4, r4, #1
 800b790:	3508      	adds	r5, #8
 800b792:	e7e5      	b.n	800b760 <_dtoa_r+0x348>
 800b794:	f000 80af 	beq.w	800b8f6 <_dtoa_r+0x4de>
 800b798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b79c:	427c      	negs	r4, r7
 800b79e:	4b80      	ldr	r3, [pc, #512]	@ (800b9a0 <_dtoa_r+0x588>)
 800b7a0:	f004 020f 	and.w	r2, r4, #15
 800b7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f4 fe9e 	bl	80004ec <__aeabi_dmul>
 800b7b0:	2602      	movs	r6, #2
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7b8:	4d7a      	ldr	r5, [pc, #488]	@ (800b9a4 <_dtoa_r+0x58c>)
 800b7ba:	1124      	asrs	r4, r4, #4
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	f040 808f 	bne.w	800b8e0 <_dtoa_r+0x4c8>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1d3      	bne.n	800b76e <_dtoa_r+0x356>
 800b7c6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b7ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8094 	beq.w	800b8fa <_dtoa_r+0x4e2>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4b73      	ldr	r3, [pc, #460]	@ (800b9a8 <_dtoa_r+0x590>)
 800b7da:	f7f5 f8f9 	bl	80009d0 <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f000 808b 	beq.w	800b8fa <_dtoa_r+0x4e2>
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 8087 	beq.w	800b8fa <_dtoa_r+0x4e2>
 800b7ec:	f1bb 0f00 	cmp.w	fp, #0
 800b7f0:	dd34      	ble.n	800b85c <_dtoa_r+0x444>
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	4b6c      	ldr	r3, [pc, #432]	@ (800b9ac <_dtoa_r+0x594>)
 800b7fa:	f7f4 fe77 	bl	80004ec <__aeabi_dmul>
 800b7fe:	465c      	mov	r4, fp
 800b800:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b804:	f107 38ff 	add.w	r8, r7, #4294967295
 800b808:	3601      	adds	r6, #1
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7f4 fe04 	bl	8000418 <__aeabi_i2d>
 800b810:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b814:	f7f4 fe6a 	bl	80004ec <__aeabi_dmul>
 800b818:	2200      	movs	r2, #0
 800b81a:	4b65      	ldr	r3, [pc, #404]	@ (800b9b0 <_dtoa_r+0x598>)
 800b81c:	f7f4 fcb0 	bl	8000180 <__adddf3>
 800b820:	4605      	mov	r5, r0
 800b822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b826:	2c00      	cmp	r4, #0
 800b828:	d16a      	bne.n	800b900 <_dtoa_r+0x4e8>
 800b82a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82e:	2200      	movs	r2, #0
 800b830:	4b60      	ldr	r3, [pc, #384]	@ (800b9b4 <_dtoa_r+0x59c>)
 800b832:	f7f4 fca3 	bl	800017c <__aeabi_dsub>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b83e:	462a      	mov	r2, r5
 800b840:	4633      	mov	r3, r6
 800b842:	f7f5 f8e3 	bl	8000a0c <__aeabi_dcmpgt>
 800b846:	2800      	cmp	r0, #0
 800b848:	f040 8298 	bne.w	800bd7c <_dtoa_r+0x964>
 800b84c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b850:	462a      	mov	r2, r5
 800b852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b856:	f7f5 f8bb 	bl	80009d0 <__aeabi_dcmplt>
 800b85a:	bb38      	cbnz	r0, 800b8ac <_dtoa_r+0x494>
 800b85c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b860:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b866:	2b00      	cmp	r3, #0
 800b868:	f2c0 8157 	blt.w	800bb1a <_dtoa_r+0x702>
 800b86c:	2f0e      	cmp	r7, #14
 800b86e:	f300 8154 	bgt.w	800bb1a <_dtoa_r+0x702>
 800b872:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a0 <_dtoa_r+0x588>)
 800b874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b87c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b882:	2b00      	cmp	r3, #0
 800b884:	f280 80e5 	bge.w	800ba52 <_dtoa_r+0x63a>
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f300 80e1 	bgt.w	800ba52 <_dtoa_r+0x63a>
 800b890:	d10c      	bne.n	800b8ac <_dtoa_r+0x494>
 800b892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b896:	2200      	movs	r2, #0
 800b898:	4b46      	ldr	r3, [pc, #280]	@ (800b9b4 <_dtoa_r+0x59c>)
 800b89a:	f7f4 fe27 	bl	80004ec <__aeabi_dmul>
 800b89e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8a2:	f7f5 f8a9 	bl	80009f8 <__aeabi_dcmpge>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f000 8266 	beq.w	800bd78 <_dtoa_r+0x960>
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	4625      	mov	r5, r4
 800b8b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8b2:	4656      	mov	r6, sl
 800b8b4:	ea6f 0803 	mvn.w	r8, r3
 800b8b8:	2700      	movs	r7, #0
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f000 fcbd 	bl	800c23c <_Bfree>
 800b8c2:	2d00      	cmp	r5, #0
 800b8c4:	f000 80bd 	beq.w	800ba42 <_dtoa_r+0x62a>
 800b8c8:	b12f      	cbz	r7, 800b8d6 <_dtoa_r+0x4be>
 800b8ca:	42af      	cmp	r7, r5
 800b8cc:	d003      	beq.n	800b8d6 <_dtoa_r+0x4be>
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	4648      	mov	r0, r9
 800b8d2:	f000 fcb3 	bl	800c23c <_Bfree>
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4648      	mov	r0, r9
 800b8da:	f000 fcaf 	bl	800c23c <_Bfree>
 800b8de:	e0b0      	b.n	800ba42 <_dtoa_r+0x62a>
 800b8e0:	07e2      	lsls	r2, r4, #31
 800b8e2:	d505      	bpl.n	800b8f0 <_dtoa_r+0x4d8>
 800b8e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8e8:	f7f4 fe00 	bl	80004ec <__aeabi_dmul>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	3601      	adds	r6, #1
 800b8f0:	1064      	asrs	r4, r4, #1
 800b8f2:	3508      	adds	r5, #8
 800b8f4:	e762      	b.n	800b7bc <_dtoa_r+0x3a4>
 800b8f6:	2602      	movs	r6, #2
 800b8f8:	e765      	b.n	800b7c6 <_dtoa_r+0x3ae>
 800b8fa:	46b8      	mov	r8, r7
 800b8fc:	9c08      	ldr	r4, [sp, #32]
 800b8fe:	e784      	b.n	800b80a <_dtoa_r+0x3f2>
 800b900:	4b27      	ldr	r3, [pc, #156]	@ (800b9a0 <_dtoa_r+0x588>)
 800b902:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b90c:	4454      	add	r4, sl
 800b90e:	2900      	cmp	r1, #0
 800b910:	d054      	beq.n	800b9bc <_dtoa_r+0x5a4>
 800b912:	2000      	movs	r0, #0
 800b914:	4928      	ldr	r1, [pc, #160]	@ (800b9b8 <_dtoa_r+0x5a0>)
 800b916:	f7f4 ff13 	bl	8000740 <__aeabi_ddiv>
 800b91a:	4633      	mov	r3, r6
 800b91c:	462a      	mov	r2, r5
 800b91e:	f7f4 fc2d 	bl	800017c <__aeabi_dsub>
 800b922:	4656      	mov	r6, sl
 800b924:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92c:	f7f5 f88e 	bl	8000a4c <__aeabi_d2iz>
 800b930:	4605      	mov	r5, r0
 800b932:	f7f4 fd71 	bl	8000418 <__aeabi_i2d>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b93e:	f7f4 fc1d 	bl	800017c <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	3530      	adds	r5, #48	@ 0x30
 800b948:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b94c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b950:	f806 5b01 	strb.w	r5, [r6], #1
 800b954:	f7f5 f83c 	bl	80009d0 <__aeabi_dcmplt>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d172      	bne.n	800ba42 <_dtoa_r+0x62a>
 800b95c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b960:	2000      	movs	r0, #0
 800b962:	4911      	ldr	r1, [pc, #68]	@ (800b9a8 <_dtoa_r+0x590>)
 800b964:	f7f4 fc0a 	bl	800017c <__aeabi_dsub>
 800b968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b96c:	f7f5 f830 	bl	80009d0 <__aeabi_dcmplt>
 800b970:	2800      	cmp	r0, #0
 800b972:	f040 80b4 	bne.w	800bade <_dtoa_r+0x6c6>
 800b976:	42a6      	cmp	r6, r4
 800b978:	f43f af70 	beq.w	800b85c <_dtoa_r+0x444>
 800b97c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b980:	2200      	movs	r2, #0
 800b982:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <_dtoa_r+0x594>)
 800b984:	f7f4 fdb2 	bl	80004ec <__aeabi_dmul>
 800b988:	2200      	movs	r2, #0
 800b98a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b98e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b992:	4b06      	ldr	r3, [pc, #24]	@ (800b9ac <_dtoa_r+0x594>)
 800b994:	f7f4 fdaa 	bl	80004ec <__aeabi_dmul>
 800b998:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b99c:	e7c4      	b.n	800b928 <_dtoa_r+0x510>
 800b99e:	bf00      	nop
 800b9a0:	0800d980 	.word	0x0800d980
 800b9a4:	0800d958 	.word	0x0800d958
 800b9a8:	3ff00000 	.word	0x3ff00000
 800b9ac:	40240000 	.word	0x40240000
 800b9b0:	401c0000 	.word	0x401c0000
 800b9b4:	40140000 	.word	0x40140000
 800b9b8:	3fe00000 	.word	0x3fe00000
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f7f4 fd94 	bl	80004ec <__aeabi_dmul>
 800b9c4:	4656      	mov	r6, sl
 800b9c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9ca:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b9cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9d0:	f7f5 f83c 	bl	8000a4c <__aeabi_d2iz>
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	f7f4 fd1f 	bl	8000418 <__aeabi_i2d>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9e2:	f7f4 fbcb 	bl	800017c <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	3530      	adds	r5, #48	@ 0x30
 800b9ec:	f806 5b01 	strb.w	r5, [r6], #1
 800b9f0:	42a6      	cmp	r6, r4
 800b9f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9f6:	f04f 0200 	mov.w	r2, #0
 800b9fa:	d124      	bne.n	800ba46 <_dtoa_r+0x62e>
 800b9fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba00:	4bae      	ldr	r3, [pc, #696]	@ (800bcbc <_dtoa_r+0x8a4>)
 800ba02:	f7f4 fbbd 	bl	8000180 <__adddf3>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba0e:	f7f4 fffd 	bl	8000a0c <__aeabi_dcmpgt>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d163      	bne.n	800bade <_dtoa_r+0x6c6>
 800ba16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	49a7      	ldr	r1, [pc, #668]	@ (800bcbc <_dtoa_r+0x8a4>)
 800ba1e:	f7f4 fbad 	bl	800017c <__aeabi_dsub>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba2a:	f7f4 ffd1 	bl	80009d0 <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f af14 	beq.w	800b85c <_dtoa_r+0x444>
 800ba34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ba36:	1e73      	subs	r3, r6, #1
 800ba38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba3e:	2b30      	cmp	r3, #48	@ 0x30
 800ba40:	d0f8      	beq.n	800ba34 <_dtoa_r+0x61c>
 800ba42:	4647      	mov	r7, r8
 800ba44:	e03b      	b.n	800babe <_dtoa_r+0x6a6>
 800ba46:	4b9e      	ldr	r3, [pc, #632]	@ (800bcc0 <_dtoa_r+0x8a8>)
 800ba48:	f7f4 fd50 	bl	80004ec <__aeabi_dmul>
 800ba4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba50:	e7bc      	b.n	800b9cc <_dtoa_r+0x5b4>
 800ba52:	4656      	mov	r6, sl
 800ba54:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ba58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fe6e 	bl	8000740 <__aeabi_ddiv>
 800ba64:	f7f4 fff2 	bl	8000a4c <__aeabi_d2iz>
 800ba68:	4680      	mov	r8, r0
 800ba6a:	f7f4 fcd5 	bl	8000418 <__aeabi_i2d>
 800ba6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba72:	f7f4 fd3b 	bl	80004ec <__aeabi_dmul>
 800ba76:	4602      	mov	r2, r0
 800ba78:	460b      	mov	r3, r1
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 fb7d 	bl	800017c <__aeabi_dsub>
 800ba82:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba86:	9d08      	ldr	r5, [sp, #32]
 800ba88:	f806 4b01 	strb.w	r4, [r6], #1
 800ba8c:	eba6 040a 	sub.w	r4, r6, sl
 800ba90:	42a5      	cmp	r5, r4
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	d133      	bne.n	800bb00 <_dtoa_r+0x6e8>
 800ba98:	f7f4 fb72 	bl	8000180 <__adddf3>
 800ba9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa0:	4604      	mov	r4, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	f7f4 ffb2 	bl	8000a0c <__aeabi_dcmpgt>
 800baa8:	b9c0      	cbnz	r0, 800badc <_dtoa_r+0x6c4>
 800baaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f4 ff83 	bl	80009bc <__aeabi_dcmpeq>
 800bab6:	b110      	cbz	r0, 800babe <_dtoa_r+0x6a6>
 800bab8:	f018 0f01 	tst.w	r8, #1
 800babc:	d10e      	bne.n	800badc <_dtoa_r+0x6c4>
 800babe:	4648      	mov	r0, r9
 800bac0:	9903      	ldr	r1, [sp, #12]
 800bac2:	f000 fbbb 	bl	800c23c <_Bfree>
 800bac6:	2300      	movs	r3, #0
 800bac8:	7033      	strb	r3, [r6, #0]
 800baca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bacc:	3701      	adds	r7, #1
 800bace:	601f      	str	r7, [r3, #0]
 800bad0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 824b 	beq.w	800bf6e <_dtoa_r+0xb56>
 800bad8:	601e      	str	r6, [r3, #0]
 800bada:	e248      	b.n	800bf6e <_dtoa_r+0xb56>
 800badc:	46b8      	mov	r8, r7
 800bade:	4633      	mov	r3, r6
 800bae0:	461e      	mov	r6, r3
 800bae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bae6:	2a39      	cmp	r2, #57	@ 0x39
 800bae8:	d106      	bne.n	800baf8 <_dtoa_r+0x6e0>
 800baea:	459a      	cmp	sl, r3
 800baec:	d1f8      	bne.n	800bae0 <_dtoa_r+0x6c8>
 800baee:	2230      	movs	r2, #48	@ 0x30
 800baf0:	f108 0801 	add.w	r8, r8, #1
 800baf4:	f88a 2000 	strb.w	r2, [sl]
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	3201      	adds	r2, #1
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	e7a0      	b.n	800ba42 <_dtoa_r+0x62a>
 800bb00:	2200      	movs	r2, #0
 800bb02:	4b6f      	ldr	r3, [pc, #444]	@ (800bcc0 <_dtoa_r+0x8a8>)
 800bb04:	f7f4 fcf2 	bl	80004ec <__aeabi_dmul>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	460d      	mov	r5, r1
 800bb10:	f7f4 ff54 	bl	80009bc <__aeabi_dcmpeq>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d09f      	beq.n	800ba58 <_dtoa_r+0x640>
 800bb18:	e7d1      	b.n	800babe <_dtoa_r+0x6a6>
 800bb1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	f000 80ea 	beq.w	800bcf6 <_dtoa_r+0x8de>
 800bb22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb24:	2a01      	cmp	r2, #1
 800bb26:	f300 80cd 	bgt.w	800bcc4 <_dtoa_r+0x8ac>
 800bb2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	f000 80c1 	beq.w	800bcb4 <_dtoa_r+0x89c>
 800bb32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb38:	9e04      	ldr	r6, [sp, #16]
 800bb3a:	9a04      	ldr	r2, [sp, #16]
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	441a      	add	r2, r3
 800bb40:	9204      	str	r2, [sp, #16]
 800bb42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb44:	4648      	mov	r0, r9
 800bb46:	441a      	add	r2, r3
 800bb48:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb4a:	f000 fc2b 	bl	800c3a4 <__i2b>
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b166      	cbz	r6, 800bb6c <_dtoa_r+0x754>
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd09      	ble.n	800bb6c <_dtoa_r+0x754>
 800bb58:	42b3      	cmp	r3, r6
 800bb5a:	bfa8      	it	ge
 800bb5c:	4633      	movge	r3, r6
 800bb5e:	9a04      	ldr	r2, [sp, #16]
 800bb60:	1af6      	subs	r6, r6, r3
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	9204      	str	r2, [sp, #16]
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb6e:	b30b      	cbz	r3, 800bbb4 <_dtoa_r+0x79c>
 800bb70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 80c6 	beq.w	800bd04 <_dtoa_r+0x8ec>
 800bb78:	2c00      	cmp	r4, #0
 800bb7a:	f000 80c0 	beq.w	800bcfe <_dtoa_r+0x8e6>
 800bb7e:	4629      	mov	r1, r5
 800bb80:	4622      	mov	r2, r4
 800bb82:	4648      	mov	r0, r9
 800bb84:	f000 fcc6 	bl	800c514 <__pow5mult>
 800bb88:	9a03      	ldr	r2, [sp, #12]
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	4648      	mov	r0, r9
 800bb90:	f000 fc1e 	bl	800c3d0 <__multiply>
 800bb94:	9903      	ldr	r1, [sp, #12]
 800bb96:	4680      	mov	r8, r0
 800bb98:	4648      	mov	r0, r9
 800bb9a:	f000 fb4f 	bl	800c23c <_Bfree>
 800bb9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba0:	1b1b      	subs	r3, r3, r4
 800bba2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba4:	f000 80b1 	beq.w	800bd0a <_dtoa_r+0x8f2>
 800bba8:	4641      	mov	r1, r8
 800bbaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbac:	4648      	mov	r0, r9
 800bbae:	f000 fcb1 	bl	800c514 <__pow5mult>
 800bbb2:	9003      	str	r0, [sp, #12]
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	4648      	mov	r0, r9
 800bbb8:	f000 fbf4 	bl	800c3a4 <__i2b>
 800bbbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 81d8 	beq.w	800bf76 <_dtoa_r+0xb5e>
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4648      	mov	r0, r9
 800bbcc:	f000 fca2 	bl	800c514 <__pow5mult>
 800bbd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	f300 809f 	bgt.w	800bd18 <_dtoa_r+0x900>
 800bbda:	9b06      	ldr	r3, [sp, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f040 8097 	bne.w	800bd10 <_dtoa_r+0x8f8>
 800bbe2:	9b07      	ldr	r3, [sp, #28]
 800bbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f040 8093 	bne.w	800bd14 <_dtoa_r+0x8fc>
 800bbee:	9b07      	ldr	r3, [sp, #28]
 800bbf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbf4:	0d1b      	lsrs	r3, r3, #20
 800bbf6:	051b      	lsls	r3, r3, #20
 800bbf8:	b133      	cbz	r3, 800bc08 <_dtoa_r+0x7f0>
 800bbfa:	9b04      	ldr	r3, [sp, #16]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc02:	3301      	adds	r3, #1
 800bc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc06:	2301      	movs	r3, #1
 800bc08:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 81b8 	beq.w	800bf82 <_dtoa_r+0xb6a>
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc18:	6918      	ldr	r0, [r3, #16]
 800bc1a:	f000 fb77 	bl	800c30c <__hi0bits>
 800bc1e:	f1c0 0020 	rsb	r0, r0, #32
 800bc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc24:	4418      	add	r0, r3
 800bc26:	f010 001f 	ands.w	r0, r0, #31
 800bc2a:	f000 8082 	beq.w	800bd32 <_dtoa_r+0x91a>
 800bc2e:	f1c0 0320 	rsb	r3, r0, #32
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	dd73      	ble.n	800bd1e <_dtoa_r+0x906>
 800bc36:	9b04      	ldr	r3, [sp, #16]
 800bc38:	f1c0 001c 	rsb	r0, r0, #28
 800bc3c:	4403      	add	r3, r0
 800bc3e:	9304      	str	r3, [sp, #16]
 800bc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc42:	4406      	add	r6, r0
 800bc44:	4403      	add	r3, r0
 800bc46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc48:	9b04      	ldr	r3, [sp, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dd05      	ble.n	800bc5a <_dtoa_r+0x842>
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4648      	mov	r0, r9
 800bc52:	9903      	ldr	r1, [sp, #12]
 800bc54:	f000 fcb8 	bl	800c5c8 <__lshift>
 800bc58:	9003      	str	r0, [sp, #12]
 800bc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dd05      	ble.n	800bc6c <_dtoa_r+0x854>
 800bc60:	4621      	mov	r1, r4
 800bc62:	461a      	mov	r2, r3
 800bc64:	4648      	mov	r0, r9
 800bc66:	f000 fcaf 	bl	800c5c8 <__lshift>
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d061      	beq.n	800bd36 <_dtoa_r+0x91e>
 800bc72:	4621      	mov	r1, r4
 800bc74:	9803      	ldr	r0, [sp, #12]
 800bc76:	f000 fd13 	bl	800c6a0 <__mcmp>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	da5b      	bge.n	800bd36 <_dtoa_r+0x91e>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	220a      	movs	r2, #10
 800bc82:	4648      	mov	r0, r9
 800bc84:	9903      	ldr	r1, [sp, #12]
 800bc86:	f000 fafb 	bl	800c280 <__multadd>
 800bc8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc8c:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc90:	9003      	str	r0, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 8177 	beq.w	800bf86 <_dtoa_r+0xb6e>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f000 faee 	bl	800c280 <__multadd>
 800bca4:	f1bb 0f00 	cmp.w	fp, #0
 800bca8:	4605      	mov	r5, r0
 800bcaa:	dc6f      	bgt.n	800bd8c <_dtoa_r+0x974>
 800bcac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	dc49      	bgt.n	800bd46 <_dtoa_r+0x92e>
 800bcb2:	e06b      	b.n	800bd8c <_dtoa_r+0x974>
 800bcb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bcb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bcba:	e73c      	b.n	800bb36 <_dtoa_r+0x71e>
 800bcbc:	3fe00000 	.word	0x3fe00000
 800bcc0:	40240000 	.word	0x40240000
 800bcc4:	9b08      	ldr	r3, [sp, #32]
 800bcc6:	1e5c      	subs	r4, r3, #1
 800bcc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcca:	42a3      	cmp	r3, r4
 800bccc:	db09      	blt.n	800bce2 <_dtoa_r+0x8ca>
 800bcce:	1b1c      	subs	r4, r3, r4
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f6bf af30 	bge.w	800bb38 <_dtoa_r+0x720>
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	9a08      	ldr	r2, [sp, #32]
 800bcdc:	1a9e      	subs	r6, r3, r2
 800bcde:	2300      	movs	r3, #0
 800bce0:	e72b      	b.n	800bb3a <_dtoa_r+0x722>
 800bce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bce6:	1ae3      	subs	r3, r4, r3
 800bce8:	441a      	add	r2, r3
 800bcea:	940a      	str	r4, [sp, #40]	@ 0x28
 800bcec:	9e04      	ldr	r6, [sp, #16]
 800bcee:	2400      	movs	r4, #0
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcf4:	e721      	b.n	800bb3a <_dtoa_r+0x722>
 800bcf6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcf8:	9e04      	ldr	r6, [sp, #16]
 800bcfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bcfc:	e728      	b.n	800bb50 <_dtoa_r+0x738>
 800bcfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd02:	e751      	b.n	800bba8 <_dtoa_r+0x790>
 800bd04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd06:	9903      	ldr	r1, [sp, #12]
 800bd08:	e750      	b.n	800bbac <_dtoa_r+0x794>
 800bd0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd0e:	e751      	b.n	800bbb4 <_dtoa_r+0x79c>
 800bd10:	2300      	movs	r3, #0
 800bd12:	e779      	b.n	800bc08 <_dtoa_r+0x7f0>
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	e777      	b.n	800bc08 <_dtoa_r+0x7f0>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd1c:	e779      	b.n	800bc12 <_dtoa_r+0x7fa>
 800bd1e:	d093      	beq.n	800bc48 <_dtoa_r+0x830>
 800bd20:	9a04      	ldr	r2, [sp, #16]
 800bd22:	331c      	adds	r3, #28
 800bd24:	441a      	add	r2, r3
 800bd26:	9204      	str	r2, [sp, #16]
 800bd28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd2a:	441e      	add	r6, r3
 800bd2c:	441a      	add	r2, r3
 800bd2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd30:	e78a      	b.n	800bc48 <_dtoa_r+0x830>
 800bd32:	4603      	mov	r3, r0
 800bd34:	e7f4      	b.n	800bd20 <_dtoa_r+0x908>
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	46b8      	mov	r8, r7
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dc20      	bgt.n	800bd80 <_dtoa_r+0x968>
 800bd3e:	469b      	mov	fp, r3
 800bd40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	dd1e      	ble.n	800bd84 <_dtoa_r+0x96c>
 800bd46:	f1bb 0f00 	cmp.w	fp, #0
 800bd4a:	f47f adb1 	bne.w	800b8b0 <_dtoa_r+0x498>
 800bd4e:	4621      	mov	r1, r4
 800bd50:	465b      	mov	r3, fp
 800bd52:	2205      	movs	r2, #5
 800bd54:	4648      	mov	r0, r9
 800bd56:	f000 fa93 	bl	800c280 <__multadd>
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	9803      	ldr	r0, [sp, #12]
 800bd60:	f000 fc9e 	bl	800c6a0 <__mcmp>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f77f ada3 	ble.w	800b8b0 <_dtoa_r+0x498>
 800bd6a:	4656      	mov	r6, sl
 800bd6c:	2331      	movs	r3, #49	@ 0x31
 800bd6e:	f108 0801 	add.w	r8, r8, #1
 800bd72:	f806 3b01 	strb.w	r3, [r6], #1
 800bd76:	e59f      	b.n	800b8b8 <_dtoa_r+0x4a0>
 800bd78:	46b8      	mov	r8, r7
 800bd7a:	9c08      	ldr	r4, [sp, #32]
 800bd7c:	4625      	mov	r5, r4
 800bd7e:	e7f4      	b.n	800bd6a <_dtoa_r+0x952>
 800bd80:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bd84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8101 	beq.w	800bf8e <_dtoa_r+0xb76>
 800bd8c:	2e00      	cmp	r6, #0
 800bd8e:	dd05      	ble.n	800bd9c <_dtoa_r+0x984>
 800bd90:	4629      	mov	r1, r5
 800bd92:	4632      	mov	r2, r6
 800bd94:	4648      	mov	r0, r9
 800bd96:	f000 fc17 	bl	800c5c8 <__lshift>
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d05c      	beq.n	800be5c <_dtoa_r+0xa44>
 800bda2:	4648      	mov	r0, r9
 800bda4:	6869      	ldr	r1, [r5, #4]
 800bda6:	f000 fa09 	bl	800c1bc <_Balloc>
 800bdaa:	4606      	mov	r6, r0
 800bdac:	b928      	cbnz	r0, 800bdba <_dtoa_r+0x9a2>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bdb4:	4b80      	ldr	r3, [pc, #512]	@ (800bfb8 <_dtoa_r+0xba0>)
 800bdb6:	f7ff bb43 	b.w	800b440 <_dtoa_r+0x28>
 800bdba:	692a      	ldr	r2, [r5, #16]
 800bdbc:	f105 010c 	add.w	r1, r5, #12
 800bdc0:	3202      	adds	r2, #2
 800bdc2:	0092      	lsls	r2, r2, #2
 800bdc4:	300c      	adds	r0, #12
 800bdc6:	f001 f961 	bl	800d08c <memcpy>
 800bdca:	2201      	movs	r2, #1
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4648      	mov	r0, r9
 800bdd0:	f000 fbfa 	bl	800c5c8 <__lshift>
 800bdd4:	462f      	mov	r7, r5
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	f10a 0301 	add.w	r3, sl, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	eb0a 030b 	add.w	r3, sl, fp
 800bde2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	4621      	mov	r1, r4
 800bdf0:	9803      	ldr	r0, [sp, #12]
 800bdf2:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdf6:	f7ff fa86 	bl	800b306 <quorem>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	3330      	adds	r3, #48	@ 0x30
 800be00:	9006      	str	r0, [sp, #24]
 800be02:	9803      	ldr	r0, [sp, #12]
 800be04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be06:	f000 fc4b 	bl	800c6a0 <__mcmp>
 800be0a:	462a      	mov	r2, r5
 800be0c:	9008      	str	r0, [sp, #32]
 800be0e:	4621      	mov	r1, r4
 800be10:	4648      	mov	r0, r9
 800be12:	f000 fc61 	bl	800c6d8 <__mdiff>
 800be16:	68c2      	ldr	r2, [r0, #12]
 800be18:	4606      	mov	r6, r0
 800be1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be1c:	bb02      	cbnz	r2, 800be60 <_dtoa_r+0xa48>
 800be1e:	4601      	mov	r1, r0
 800be20:	9803      	ldr	r0, [sp, #12]
 800be22:	f000 fc3d 	bl	800c6a0 <__mcmp>
 800be26:	4602      	mov	r2, r0
 800be28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be2a:	4631      	mov	r1, r6
 800be2c:	4648      	mov	r0, r9
 800be2e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800be32:	f000 fa03 	bl	800c23c <_Bfree>
 800be36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be3a:	9e04      	ldr	r6, [sp, #16]
 800be3c:	ea42 0103 	orr.w	r1, r2, r3
 800be40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be42:	4319      	orrs	r1, r3
 800be44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be46:	d10d      	bne.n	800be64 <_dtoa_r+0xa4c>
 800be48:	2b39      	cmp	r3, #57	@ 0x39
 800be4a:	d027      	beq.n	800be9c <_dtoa_r+0xa84>
 800be4c:	9a08      	ldr	r2, [sp, #32]
 800be4e:	2a00      	cmp	r2, #0
 800be50:	dd01      	ble.n	800be56 <_dtoa_r+0xa3e>
 800be52:	9b06      	ldr	r3, [sp, #24]
 800be54:	3331      	adds	r3, #49	@ 0x31
 800be56:	f88b 3000 	strb.w	r3, [fp]
 800be5a:	e52e      	b.n	800b8ba <_dtoa_r+0x4a2>
 800be5c:	4628      	mov	r0, r5
 800be5e:	e7b9      	b.n	800bdd4 <_dtoa_r+0x9bc>
 800be60:	2201      	movs	r2, #1
 800be62:	e7e2      	b.n	800be2a <_dtoa_r+0xa12>
 800be64:	9908      	ldr	r1, [sp, #32]
 800be66:	2900      	cmp	r1, #0
 800be68:	db04      	blt.n	800be74 <_dtoa_r+0xa5c>
 800be6a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800be6c:	4301      	orrs	r1, r0
 800be6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be70:	4301      	orrs	r1, r0
 800be72:	d120      	bne.n	800beb6 <_dtoa_r+0xa9e>
 800be74:	2a00      	cmp	r2, #0
 800be76:	ddee      	ble.n	800be56 <_dtoa_r+0xa3e>
 800be78:	2201      	movs	r2, #1
 800be7a:	9903      	ldr	r1, [sp, #12]
 800be7c:	4648      	mov	r0, r9
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	f000 fba2 	bl	800c5c8 <__lshift>
 800be84:	4621      	mov	r1, r4
 800be86:	9003      	str	r0, [sp, #12]
 800be88:	f000 fc0a 	bl	800c6a0 <__mcmp>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	dc02      	bgt.n	800be98 <_dtoa_r+0xa80>
 800be92:	d1e0      	bne.n	800be56 <_dtoa_r+0xa3e>
 800be94:	07da      	lsls	r2, r3, #31
 800be96:	d5de      	bpl.n	800be56 <_dtoa_r+0xa3e>
 800be98:	2b39      	cmp	r3, #57	@ 0x39
 800be9a:	d1da      	bne.n	800be52 <_dtoa_r+0xa3a>
 800be9c:	2339      	movs	r3, #57	@ 0x39
 800be9e:	f88b 3000 	strb.w	r3, [fp]
 800bea2:	4633      	mov	r3, r6
 800bea4:	461e      	mov	r6, r3
 800bea6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800beaa:	3b01      	subs	r3, #1
 800beac:	2a39      	cmp	r2, #57	@ 0x39
 800beae:	d04e      	beq.n	800bf4e <_dtoa_r+0xb36>
 800beb0:	3201      	adds	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	e501      	b.n	800b8ba <_dtoa_r+0x4a2>
 800beb6:	2a00      	cmp	r2, #0
 800beb8:	dd03      	ble.n	800bec2 <_dtoa_r+0xaaa>
 800beba:	2b39      	cmp	r3, #57	@ 0x39
 800bebc:	d0ee      	beq.n	800be9c <_dtoa_r+0xa84>
 800bebe:	3301      	adds	r3, #1
 800bec0:	e7c9      	b.n	800be56 <_dtoa_r+0xa3e>
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800beca:	428a      	cmp	r2, r1
 800becc:	d028      	beq.n	800bf20 <_dtoa_r+0xb08>
 800bece:	2300      	movs	r3, #0
 800bed0:	220a      	movs	r2, #10
 800bed2:	9903      	ldr	r1, [sp, #12]
 800bed4:	4648      	mov	r0, r9
 800bed6:	f000 f9d3 	bl	800c280 <__multadd>
 800beda:	42af      	cmp	r7, r5
 800bedc:	9003      	str	r0, [sp, #12]
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	f04f 020a 	mov.w	r2, #10
 800bee6:	4639      	mov	r1, r7
 800bee8:	4648      	mov	r0, r9
 800beea:	d107      	bne.n	800befc <_dtoa_r+0xae4>
 800beec:	f000 f9c8 	bl	800c280 <__multadd>
 800bef0:	4607      	mov	r7, r0
 800bef2:	4605      	mov	r5, r0
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	3301      	adds	r3, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	e777      	b.n	800bdec <_dtoa_r+0x9d4>
 800befc:	f000 f9c0 	bl	800c280 <__multadd>
 800bf00:	4629      	mov	r1, r5
 800bf02:	4607      	mov	r7, r0
 800bf04:	2300      	movs	r3, #0
 800bf06:	220a      	movs	r2, #10
 800bf08:	4648      	mov	r0, r9
 800bf0a:	f000 f9b9 	bl	800c280 <__multadd>
 800bf0e:	4605      	mov	r5, r0
 800bf10:	e7f0      	b.n	800bef4 <_dtoa_r+0xadc>
 800bf12:	f1bb 0f00 	cmp.w	fp, #0
 800bf16:	bfcc      	ite	gt
 800bf18:	465e      	movgt	r6, fp
 800bf1a:	2601      	movle	r6, #1
 800bf1c:	2700      	movs	r7, #0
 800bf1e:	4456      	add	r6, sl
 800bf20:	2201      	movs	r2, #1
 800bf22:	9903      	ldr	r1, [sp, #12]
 800bf24:	4648      	mov	r0, r9
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	f000 fb4e 	bl	800c5c8 <__lshift>
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	9003      	str	r0, [sp, #12]
 800bf30:	f000 fbb6 	bl	800c6a0 <__mcmp>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	dcb4      	bgt.n	800bea2 <_dtoa_r+0xa8a>
 800bf38:	d102      	bne.n	800bf40 <_dtoa_r+0xb28>
 800bf3a:	9b04      	ldr	r3, [sp, #16]
 800bf3c:	07db      	lsls	r3, r3, #31
 800bf3e:	d4b0      	bmi.n	800bea2 <_dtoa_r+0xa8a>
 800bf40:	4633      	mov	r3, r6
 800bf42:	461e      	mov	r6, r3
 800bf44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf48:	2a30      	cmp	r2, #48	@ 0x30
 800bf4a:	d0fa      	beq.n	800bf42 <_dtoa_r+0xb2a>
 800bf4c:	e4b5      	b.n	800b8ba <_dtoa_r+0x4a2>
 800bf4e:	459a      	cmp	sl, r3
 800bf50:	d1a8      	bne.n	800bea4 <_dtoa_r+0xa8c>
 800bf52:	2331      	movs	r3, #49	@ 0x31
 800bf54:	f108 0801 	add.w	r8, r8, #1
 800bf58:	f88a 3000 	strb.w	r3, [sl]
 800bf5c:	e4ad      	b.n	800b8ba <_dtoa_r+0x4a2>
 800bf5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bf60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bfbc <_dtoa_r+0xba4>
 800bf64:	b11b      	cbz	r3, 800bf6e <_dtoa_r+0xb56>
 800bf66:	f10a 0308 	add.w	r3, sl, #8
 800bf6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	4650      	mov	r0, sl
 800bf70:	b017      	add	sp, #92	@ 0x5c
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	f77f ae2e 	ble.w	800bbda <_dtoa_r+0x7c2>
 800bf7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf80:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf82:	2001      	movs	r0, #1
 800bf84:	e64d      	b.n	800bc22 <_dtoa_r+0x80a>
 800bf86:	f1bb 0f00 	cmp.w	fp, #0
 800bf8a:	f77f aed9 	ble.w	800bd40 <_dtoa_r+0x928>
 800bf8e:	4656      	mov	r6, sl
 800bf90:	4621      	mov	r1, r4
 800bf92:	9803      	ldr	r0, [sp, #12]
 800bf94:	f7ff f9b7 	bl	800b306 <quorem>
 800bf98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bf9c:	f806 3b01 	strb.w	r3, [r6], #1
 800bfa0:	eba6 020a 	sub.w	r2, r6, sl
 800bfa4:	4593      	cmp	fp, r2
 800bfa6:	ddb4      	ble.n	800bf12 <_dtoa_r+0xafa>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	220a      	movs	r2, #10
 800bfac:	4648      	mov	r0, r9
 800bfae:	9903      	ldr	r1, [sp, #12]
 800bfb0:	f000 f966 	bl	800c280 <__multadd>
 800bfb4:	9003      	str	r0, [sp, #12]
 800bfb6:	e7eb      	b.n	800bf90 <_dtoa_r+0xb78>
 800bfb8:	0800d886 	.word	0x0800d886
 800bfbc:	0800d80a 	.word	0x0800d80a

0800bfc0 <_free_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	d040      	beq.n	800c04a <_free_r+0x8a>
 800bfc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfcc:	1f0c      	subs	r4, r1, #4
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfb8      	it	lt
 800bfd2:	18e4      	addlt	r4, r4, r3
 800bfd4:	f000 f8e6 	bl	800c1a4 <__malloc_lock>
 800bfd8:	4a1c      	ldr	r2, [pc, #112]	@ (800c04c <_free_r+0x8c>)
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	b933      	cbnz	r3, 800bfec <_free_r+0x2c>
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	6014      	str	r4, [r2, #0]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe8:	f000 b8e2 	b.w	800c1b0 <__malloc_unlock>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d908      	bls.n	800c002 <_free_r+0x42>
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	1821      	adds	r1, r4, r0
 800bff4:	428b      	cmp	r3, r1
 800bff6:	bf01      	itttt	eq
 800bff8:	6819      	ldreq	r1, [r3, #0]
 800bffa:	685b      	ldreq	r3, [r3, #4]
 800bffc:	1809      	addeq	r1, r1, r0
 800bffe:	6021      	streq	r1, [r4, #0]
 800c000:	e7ed      	b.n	800bfde <_free_r+0x1e>
 800c002:	461a      	mov	r2, r3
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b10b      	cbz	r3, 800c00c <_free_r+0x4c>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d9fa      	bls.n	800c002 <_free_r+0x42>
 800c00c:	6811      	ldr	r1, [r2, #0]
 800c00e:	1850      	adds	r0, r2, r1
 800c010:	42a0      	cmp	r0, r4
 800c012:	d10b      	bne.n	800c02c <_free_r+0x6c>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	4401      	add	r1, r0
 800c018:	1850      	adds	r0, r2, r1
 800c01a:	4283      	cmp	r3, r0
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	d1e0      	bne.n	800bfe2 <_free_r+0x22>
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	4408      	add	r0, r1
 800c026:	6010      	str	r0, [r2, #0]
 800c028:	6053      	str	r3, [r2, #4]
 800c02a:	e7da      	b.n	800bfe2 <_free_r+0x22>
 800c02c:	d902      	bls.n	800c034 <_free_r+0x74>
 800c02e:	230c      	movs	r3, #12
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	e7d6      	b.n	800bfe2 <_free_r+0x22>
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	1821      	adds	r1, r4, r0
 800c038:	428b      	cmp	r3, r1
 800c03a:	bf01      	itttt	eq
 800c03c:	6819      	ldreq	r1, [r3, #0]
 800c03e:	685b      	ldreq	r3, [r3, #4]
 800c040:	1809      	addeq	r1, r1, r0
 800c042:	6021      	streq	r1, [r4, #0]
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	6054      	str	r4, [r2, #4]
 800c048:	e7cb      	b.n	800bfe2 <_free_r+0x22>
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	200007f0 	.word	0x200007f0

0800c050 <malloc>:
 800c050:	4b02      	ldr	r3, [pc, #8]	@ (800c05c <malloc+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f000 b825 	b.w	800c0a4 <_malloc_r>
 800c05a:	bf00      	nop
 800c05c:	20000074 	.word	0x20000074

0800c060 <sbrk_aligned>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	4e0f      	ldr	r6, [pc, #60]	@ (800c0a0 <sbrk_aligned+0x40>)
 800c064:	460c      	mov	r4, r1
 800c066:	6831      	ldr	r1, [r6, #0]
 800c068:	4605      	mov	r5, r0
 800c06a:	b911      	cbnz	r1, 800c072 <sbrk_aligned+0x12>
 800c06c:	f000 fffe 	bl	800d06c <_sbrk_r>
 800c070:	6030      	str	r0, [r6, #0]
 800c072:	4621      	mov	r1, r4
 800c074:	4628      	mov	r0, r5
 800c076:	f000 fff9 	bl	800d06c <_sbrk_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d103      	bne.n	800c086 <sbrk_aligned+0x26>
 800c07e:	f04f 34ff 	mov.w	r4, #4294967295
 800c082:	4620      	mov	r0, r4
 800c084:	bd70      	pop	{r4, r5, r6, pc}
 800c086:	1cc4      	adds	r4, r0, #3
 800c088:	f024 0403 	bic.w	r4, r4, #3
 800c08c:	42a0      	cmp	r0, r4
 800c08e:	d0f8      	beq.n	800c082 <sbrk_aligned+0x22>
 800c090:	1a21      	subs	r1, r4, r0
 800c092:	4628      	mov	r0, r5
 800c094:	f000 ffea 	bl	800d06c <_sbrk_r>
 800c098:	3001      	adds	r0, #1
 800c09a:	d1f2      	bne.n	800c082 <sbrk_aligned+0x22>
 800c09c:	e7ef      	b.n	800c07e <sbrk_aligned+0x1e>
 800c09e:	bf00      	nop
 800c0a0:	200007ec 	.word	0x200007ec

0800c0a4 <_malloc_r>:
 800c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	1ccd      	adds	r5, r1, #3
 800c0aa:	f025 0503 	bic.w	r5, r5, #3
 800c0ae:	3508      	adds	r5, #8
 800c0b0:	2d0c      	cmp	r5, #12
 800c0b2:	bf38      	it	cc
 800c0b4:	250c      	movcc	r5, #12
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	db01      	blt.n	800c0c0 <_malloc_r+0x1c>
 800c0bc:	42a9      	cmp	r1, r5
 800c0be:	d904      	bls.n	800c0ca <_malloc_r+0x26>
 800c0c0:	230c      	movs	r3, #12
 800c0c2:	6033      	str	r3, [r6, #0]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1a0 <_malloc_r+0xfc>
 800c0ce:	f000 f869 	bl	800c1a4 <__malloc_lock>
 800c0d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d6:	461c      	mov	r4, r3
 800c0d8:	bb44      	cbnz	r4, 800c12c <_malloc_r+0x88>
 800c0da:	4629      	mov	r1, r5
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7ff ffbf 	bl	800c060 <sbrk_aligned>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	d158      	bne.n	800c19a <_malloc_r+0xf6>
 800c0e8:	f8d8 4000 	ldr.w	r4, [r8]
 800c0ec:	4627      	mov	r7, r4
 800c0ee:	2f00      	cmp	r7, #0
 800c0f0:	d143      	bne.n	800c17a <_malloc_r+0xd6>
 800c0f2:	2c00      	cmp	r4, #0
 800c0f4:	d04b      	beq.n	800c18e <_malloc_r+0xea>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	eb04 0903 	add.w	r9, r4, r3
 800c100:	f000 ffb4 	bl	800d06c <_sbrk_r>
 800c104:	4581      	cmp	r9, r0
 800c106:	d142      	bne.n	800c18e <_malloc_r+0xea>
 800c108:	6821      	ldr	r1, [r4, #0]
 800c10a:	4630      	mov	r0, r6
 800c10c:	1a6d      	subs	r5, r5, r1
 800c10e:	4629      	mov	r1, r5
 800c110:	f7ff ffa6 	bl	800c060 <sbrk_aligned>
 800c114:	3001      	adds	r0, #1
 800c116:	d03a      	beq.n	800c18e <_malloc_r+0xea>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	442b      	add	r3, r5
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	f8d8 3000 	ldr.w	r3, [r8]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	bb62      	cbnz	r2, 800c180 <_malloc_r+0xdc>
 800c126:	f8c8 7000 	str.w	r7, [r8]
 800c12a:	e00f      	b.n	800c14c <_malloc_r+0xa8>
 800c12c:	6822      	ldr	r2, [r4, #0]
 800c12e:	1b52      	subs	r2, r2, r5
 800c130:	d420      	bmi.n	800c174 <_malloc_r+0xd0>
 800c132:	2a0b      	cmp	r2, #11
 800c134:	d917      	bls.n	800c166 <_malloc_r+0xc2>
 800c136:	1961      	adds	r1, r4, r5
 800c138:	42a3      	cmp	r3, r4
 800c13a:	6025      	str	r5, [r4, #0]
 800c13c:	bf18      	it	ne
 800c13e:	6059      	strne	r1, [r3, #4]
 800c140:	6863      	ldr	r3, [r4, #4]
 800c142:	bf08      	it	eq
 800c144:	f8c8 1000 	streq.w	r1, [r8]
 800c148:	5162      	str	r2, [r4, r5]
 800c14a:	604b      	str	r3, [r1, #4]
 800c14c:	4630      	mov	r0, r6
 800c14e:	f000 f82f 	bl	800c1b0 <__malloc_unlock>
 800c152:	f104 000b 	add.w	r0, r4, #11
 800c156:	1d23      	adds	r3, r4, #4
 800c158:	f020 0007 	bic.w	r0, r0, #7
 800c15c:	1ac2      	subs	r2, r0, r3
 800c15e:	bf1c      	itt	ne
 800c160:	1a1b      	subne	r3, r3, r0
 800c162:	50a3      	strne	r3, [r4, r2]
 800c164:	e7af      	b.n	800c0c6 <_malloc_r+0x22>
 800c166:	6862      	ldr	r2, [r4, #4]
 800c168:	42a3      	cmp	r3, r4
 800c16a:	bf0c      	ite	eq
 800c16c:	f8c8 2000 	streq.w	r2, [r8]
 800c170:	605a      	strne	r2, [r3, #4]
 800c172:	e7eb      	b.n	800c14c <_malloc_r+0xa8>
 800c174:	4623      	mov	r3, r4
 800c176:	6864      	ldr	r4, [r4, #4]
 800c178:	e7ae      	b.n	800c0d8 <_malloc_r+0x34>
 800c17a:	463c      	mov	r4, r7
 800c17c:	687f      	ldr	r7, [r7, #4]
 800c17e:	e7b6      	b.n	800c0ee <_malloc_r+0x4a>
 800c180:	461a      	mov	r2, r3
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	42a3      	cmp	r3, r4
 800c186:	d1fb      	bne.n	800c180 <_malloc_r+0xdc>
 800c188:	2300      	movs	r3, #0
 800c18a:	6053      	str	r3, [r2, #4]
 800c18c:	e7de      	b.n	800c14c <_malloc_r+0xa8>
 800c18e:	230c      	movs	r3, #12
 800c190:	4630      	mov	r0, r6
 800c192:	6033      	str	r3, [r6, #0]
 800c194:	f000 f80c 	bl	800c1b0 <__malloc_unlock>
 800c198:	e794      	b.n	800c0c4 <_malloc_r+0x20>
 800c19a:	6005      	str	r5, [r0, #0]
 800c19c:	e7d6      	b.n	800c14c <_malloc_r+0xa8>
 800c19e:	bf00      	nop
 800c1a0:	200007f0 	.word	0x200007f0

0800c1a4 <__malloc_lock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	@ (800c1ac <__malloc_lock+0x8>)
 800c1a6:	f7ff b89e 	b.w	800b2e6 <__retarget_lock_acquire_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	200007e8 	.word	0x200007e8

0800c1b0 <__malloc_unlock>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	@ (800c1b8 <__malloc_unlock+0x8>)
 800c1b2:	f7ff b899 	b.w	800b2e8 <__retarget_lock_release_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	200007e8 	.word	0x200007e8

0800c1bc <_Balloc>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	69c6      	ldr	r6, [r0, #28]
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	b976      	cbnz	r6, 800c1e4 <_Balloc+0x28>
 800c1c6:	2010      	movs	r0, #16
 800c1c8:	f7ff ff42 	bl	800c050 <malloc>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	61e0      	str	r0, [r4, #28]
 800c1d0:	b920      	cbnz	r0, 800c1dc <_Balloc+0x20>
 800c1d2:	216b      	movs	r1, #107	@ 0x6b
 800c1d4:	4b17      	ldr	r3, [pc, #92]	@ (800c234 <_Balloc+0x78>)
 800c1d6:	4818      	ldr	r0, [pc, #96]	@ (800c238 <_Balloc+0x7c>)
 800c1d8:	f000 ff66 	bl	800d0a8 <__assert_func>
 800c1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e0:	6006      	str	r6, [r0, #0]
 800c1e2:	60c6      	str	r6, [r0, #12]
 800c1e4:	69e6      	ldr	r6, [r4, #28]
 800c1e6:	68f3      	ldr	r3, [r6, #12]
 800c1e8:	b183      	cbz	r3, 800c20c <_Balloc+0x50>
 800c1ea:	69e3      	ldr	r3, [r4, #28]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1f2:	b9b8      	cbnz	r0, 800c224 <_Balloc+0x68>
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c1fa:	1d72      	adds	r2, r6, #5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	0092      	lsls	r2, r2, #2
 800c200:	f000 ff70 	bl	800d0e4 <_calloc_r>
 800c204:	b160      	cbz	r0, 800c220 <_Balloc+0x64>
 800c206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c20a:	e00e      	b.n	800c22a <_Balloc+0x6e>
 800c20c:	2221      	movs	r2, #33	@ 0x21
 800c20e:	2104      	movs	r1, #4
 800c210:	4620      	mov	r0, r4
 800c212:	f000 ff67 	bl	800d0e4 <_calloc_r>
 800c216:	69e3      	ldr	r3, [r4, #28]
 800c218:	60f0      	str	r0, [r6, #12]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e4      	bne.n	800c1ea <_Balloc+0x2e>
 800c220:	2000      	movs	r0, #0
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	6802      	ldr	r2, [r0, #0]
 800c226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c22a:	2300      	movs	r3, #0
 800c22c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c230:	e7f7      	b.n	800c222 <_Balloc+0x66>
 800c232:	bf00      	nop
 800c234:	0800d817 	.word	0x0800d817
 800c238:	0800d897 	.word	0x0800d897

0800c23c <_Bfree>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	69c6      	ldr	r6, [r0, #28]
 800c240:	4605      	mov	r5, r0
 800c242:	460c      	mov	r4, r1
 800c244:	b976      	cbnz	r6, 800c264 <_Bfree+0x28>
 800c246:	2010      	movs	r0, #16
 800c248:	f7ff ff02 	bl	800c050 <malloc>
 800c24c:	4602      	mov	r2, r0
 800c24e:	61e8      	str	r0, [r5, #28]
 800c250:	b920      	cbnz	r0, 800c25c <_Bfree+0x20>
 800c252:	218f      	movs	r1, #143	@ 0x8f
 800c254:	4b08      	ldr	r3, [pc, #32]	@ (800c278 <_Bfree+0x3c>)
 800c256:	4809      	ldr	r0, [pc, #36]	@ (800c27c <_Bfree+0x40>)
 800c258:	f000 ff26 	bl	800d0a8 <__assert_func>
 800c25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c260:	6006      	str	r6, [r0, #0]
 800c262:	60c6      	str	r6, [r0, #12]
 800c264:	b13c      	cbz	r4, 800c276 <_Bfree+0x3a>
 800c266:	69eb      	ldr	r3, [r5, #28]
 800c268:	6862      	ldr	r2, [r4, #4]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c270:	6021      	str	r1, [r4, #0]
 800c272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	0800d817 	.word	0x0800d817
 800c27c:	0800d897 	.word	0x0800d897

0800c280 <__multadd>:
 800c280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c284:	4607      	mov	r7, r0
 800c286:	460c      	mov	r4, r1
 800c288:	461e      	mov	r6, r3
 800c28a:	2000      	movs	r0, #0
 800c28c:	690d      	ldr	r5, [r1, #16]
 800c28e:	f101 0c14 	add.w	ip, r1, #20
 800c292:	f8dc 3000 	ldr.w	r3, [ip]
 800c296:	3001      	adds	r0, #1
 800c298:	b299      	uxth	r1, r3
 800c29a:	fb02 6101 	mla	r1, r2, r1, r6
 800c29e:	0c1e      	lsrs	r6, r3, #16
 800c2a0:	0c0b      	lsrs	r3, r1, #16
 800c2a2:	fb02 3306 	mla	r3, r2, r6, r3
 800c2a6:	b289      	uxth	r1, r1
 800c2a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2ac:	4285      	cmp	r5, r0
 800c2ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2b6:	dcec      	bgt.n	800c292 <__multadd+0x12>
 800c2b8:	b30e      	cbz	r6, 800c2fe <__multadd+0x7e>
 800c2ba:	68a3      	ldr	r3, [r4, #8]
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dc19      	bgt.n	800c2f4 <__multadd+0x74>
 800c2c0:	6861      	ldr	r1, [r4, #4]
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	3101      	adds	r1, #1
 800c2c6:	f7ff ff79 	bl	800c1bc <_Balloc>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	b928      	cbnz	r0, 800c2da <__multadd+0x5a>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	21ba      	movs	r1, #186	@ 0xba
 800c2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c304 <__multadd+0x84>)
 800c2d4:	480c      	ldr	r0, [pc, #48]	@ (800c308 <__multadd+0x88>)
 800c2d6:	f000 fee7 	bl	800d0a8 <__assert_func>
 800c2da:	6922      	ldr	r2, [r4, #16]
 800c2dc:	f104 010c 	add.w	r1, r4, #12
 800c2e0:	3202      	adds	r2, #2
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	300c      	adds	r0, #12
 800c2e6:	f000 fed1 	bl	800d08c <memcpy>
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	4638      	mov	r0, r7
 800c2ee:	f7ff ffa5 	bl	800c23c <_Bfree>
 800c2f2:	4644      	mov	r4, r8
 800c2f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2f8:	3501      	adds	r5, #1
 800c2fa:	615e      	str	r6, [r3, #20]
 800c2fc:	6125      	str	r5, [r4, #16]
 800c2fe:	4620      	mov	r0, r4
 800c300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c304:	0800d886 	.word	0x0800d886
 800c308:	0800d897 	.word	0x0800d897

0800c30c <__hi0bits>:
 800c30c:	4603      	mov	r3, r0
 800c30e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c312:	bf3a      	itte	cc
 800c314:	0403      	lslcc	r3, r0, #16
 800c316:	2010      	movcc	r0, #16
 800c318:	2000      	movcs	r0, #0
 800c31a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c31e:	bf3c      	itt	cc
 800c320:	021b      	lslcc	r3, r3, #8
 800c322:	3008      	addcc	r0, #8
 800c324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c328:	bf3c      	itt	cc
 800c32a:	011b      	lslcc	r3, r3, #4
 800c32c:	3004      	addcc	r0, #4
 800c32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c332:	bf3c      	itt	cc
 800c334:	009b      	lslcc	r3, r3, #2
 800c336:	3002      	addcc	r0, #2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	db05      	blt.n	800c348 <__hi0bits+0x3c>
 800c33c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c340:	f100 0001 	add.w	r0, r0, #1
 800c344:	bf08      	it	eq
 800c346:	2020      	moveq	r0, #32
 800c348:	4770      	bx	lr

0800c34a <__lo0bits>:
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	4602      	mov	r2, r0
 800c34e:	f013 0007 	ands.w	r0, r3, #7
 800c352:	d00b      	beq.n	800c36c <__lo0bits+0x22>
 800c354:	07d9      	lsls	r1, r3, #31
 800c356:	d421      	bmi.n	800c39c <__lo0bits+0x52>
 800c358:	0798      	lsls	r0, r3, #30
 800c35a:	bf49      	itett	mi
 800c35c:	085b      	lsrmi	r3, r3, #1
 800c35e:	089b      	lsrpl	r3, r3, #2
 800c360:	2001      	movmi	r0, #1
 800c362:	6013      	strmi	r3, [r2, #0]
 800c364:	bf5c      	itt	pl
 800c366:	2002      	movpl	r0, #2
 800c368:	6013      	strpl	r3, [r2, #0]
 800c36a:	4770      	bx	lr
 800c36c:	b299      	uxth	r1, r3
 800c36e:	b909      	cbnz	r1, 800c374 <__lo0bits+0x2a>
 800c370:	2010      	movs	r0, #16
 800c372:	0c1b      	lsrs	r3, r3, #16
 800c374:	b2d9      	uxtb	r1, r3
 800c376:	b909      	cbnz	r1, 800c37c <__lo0bits+0x32>
 800c378:	3008      	adds	r0, #8
 800c37a:	0a1b      	lsrs	r3, r3, #8
 800c37c:	0719      	lsls	r1, r3, #28
 800c37e:	bf04      	itt	eq
 800c380:	091b      	lsreq	r3, r3, #4
 800c382:	3004      	addeq	r0, #4
 800c384:	0799      	lsls	r1, r3, #30
 800c386:	bf04      	itt	eq
 800c388:	089b      	lsreq	r3, r3, #2
 800c38a:	3002      	addeq	r0, #2
 800c38c:	07d9      	lsls	r1, r3, #31
 800c38e:	d403      	bmi.n	800c398 <__lo0bits+0x4e>
 800c390:	085b      	lsrs	r3, r3, #1
 800c392:	f100 0001 	add.w	r0, r0, #1
 800c396:	d003      	beq.n	800c3a0 <__lo0bits+0x56>
 800c398:	6013      	str	r3, [r2, #0]
 800c39a:	4770      	bx	lr
 800c39c:	2000      	movs	r0, #0
 800c39e:	4770      	bx	lr
 800c3a0:	2020      	movs	r0, #32
 800c3a2:	4770      	bx	lr

0800c3a4 <__i2b>:
 800c3a4:	b510      	push	{r4, lr}
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	f7ff ff07 	bl	800c1bc <_Balloc>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	b928      	cbnz	r0, 800c3be <__i2b+0x1a>
 800c3b2:	f240 1145 	movw	r1, #325	@ 0x145
 800c3b6:	4b04      	ldr	r3, [pc, #16]	@ (800c3c8 <__i2b+0x24>)
 800c3b8:	4804      	ldr	r0, [pc, #16]	@ (800c3cc <__i2b+0x28>)
 800c3ba:	f000 fe75 	bl	800d0a8 <__assert_func>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	6144      	str	r4, [r0, #20]
 800c3c2:	6103      	str	r3, [r0, #16]
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	bf00      	nop
 800c3c8:	0800d886 	.word	0x0800d886
 800c3cc:	0800d897 	.word	0x0800d897

0800c3d0 <__multiply>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	4617      	mov	r7, r2
 800c3d6:	690a      	ldr	r2, [r1, #16]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	4689      	mov	r9, r1
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	bfa2      	ittt	ge
 800c3e0:	463b      	movge	r3, r7
 800c3e2:	460f      	movge	r7, r1
 800c3e4:	4699      	movge	r9, r3
 800c3e6:	693d      	ldr	r5, [r7, #16]
 800c3e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	eb05 060a 	add.w	r6, r5, sl
 800c3f4:	42b3      	cmp	r3, r6
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	bfb8      	it	lt
 800c3fa:	3101      	addlt	r1, #1
 800c3fc:	f7ff fede 	bl	800c1bc <_Balloc>
 800c400:	b930      	cbnz	r0, 800c410 <__multiply+0x40>
 800c402:	4602      	mov	r2, r0
 800c404:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c408:	4b40      	ldr	r3, [pc, #256]	@ (800c50c <__multiply+0x13c>)
 800c40a:	4841      	ldr	r0, [pc, #260]	@ (800c510 <__multiply+0x140>)
 800c40c:	f000 fe4c 	bl	800d0a8 <__assert_func>
 800c410:	f100 0414 	add.w	r4, r0, #20
 800c414:	4623      	mov	r3, r4
 800c416:	2200      	movs	r2, #0
 800c418:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c41c:	4573      	cmp	r3, lr
 800c41e:	d320      	bcc.n	800c462 <__multiply+0x92>
 800c420:	f107 0814 	add.w	r8, r7, #20
 800c424:	f109 0114 	add.w	r1, r9, #20
 800c428:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c42c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c430:	9302      	str	r3, [sp, #8]
 800c432:	1beb      	subs	r3, r5, r7
 800c434:	3b15      	subs	r3, #21
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	3304      	adds	r3, #4
 800c43c:	3715      	adds	r7, #21
 800c43e:	42bd      	cmp	r5, r7
 800c440:	bf38      	it	cc
 800c442:	2304      	movcc	r3, #4
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	9b02      	ldr	r3, [sp, #8]
 800c448:	9103      	str	r1, [sp, #12]
 800c44a:	428b      	cmp	r3, r1
 800c44c:	d80c      	bhi.n	800c468 <__multiply+0x98>
 800c44e:	2e00      	cmp	r6, #0
 800c450:	dd03      	ble.n	800c45a <__multiply+0x8a>
 800c452:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c456:	2b00      	cmp	r3, #0
 800c458:	d055      	beq.n	800c506 <__multiply+0x136>
 800c45a:	6106      	str	r6, [r0, #16]
 800c45c:	b005      	add	sp, #20
 800c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c462:	f843 2b04 	str.w	r2, [r3], #4
 800c466:	e7d9      	b.n	800c41c <__multiply+0x4c>
 800c468:	f8b1 a000 	ldrh.w	sl, [r1]
 800c46c:	f1ba 0f00 	cmp.w	sl, #0
 800c470:	d01f      	beq.n	800c4b2 <__multiply+0xe2>
 800c472:	46c4      	mov	ip, r8
 800c474:	46a1      	mov	r9, r4
 800c476:	2700      	movs	r7, #0
 800c478:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c47c:	f8d9 3000 	ldr.w	r3, [r9]
 800c480:	fa1f fb82 	uxth.w	fp, r2
 800c484:	b29b      	uxth	r3, r3
 800c486:	fb0a 330b 	mla	r3, sl, fp, r3
 800c48a:	443b      	add	r3, r7
 800c48c:	f8d9 7000 	ldr.w	r7, [r9]
 800c490:	0c12      	lsrs	r2, r2, #16
 800c492:	0c3f      	lsrs	r7, r7, #16
 800c494:	fb0a 7202 	mla	r2, sl, r2, r7
 800c498:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4a2:	4565      	cmp	r5, ip
 800c4a4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c4a8:	f849 3b04 	str.w	r3, [r9], #4
 800c4ac:	d8e4      	bhi.n	800c478 <__multiply+0xa8>
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	50e7      	str	r7, [r4, r3]
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	3104      	adds	r1, #4
 800c4b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4ba:	f1b9 0f00 	cmp.w	r9, #0
 800c4be:	d020      	beq.n	800c502 <__multiply+0x132>
 800c4c0:	4647      	mov	r7, r8
 800c4c2:	46a4      	mov	ip, r4
 800c4c4:	f04f 0a00 	mov.w	sl, #0
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	f8b7 b000 	ldrh.w	fp, [r7]
 800c4ce:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	fb09 220b 	mla	r2, r9, fp, r2
 800c4d8:	4452      	add	r2, sl
 800c4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4de:	f84c 3b04 	str.w	r3, [ip], #4
 800c4e2:	f857 3b04 	ldr.w	r3, [r7], #4
 800c4e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4ea:	f8bc 3000 	ldrh.w	r3, [ip]
 800c4ee:	42bd      	cmp	r5, r7
 800c4f0:	fb09 330a 	mla	r3, r9, sl, r3
 800c4f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c4f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4fc:	d8e5      	bhi.n	800c4ca <__multiply+0xfa>
 800c4fe:	9a01      	ldr	r2, [sp, #4]
 800c500:	50a3      	str	r3, [r4, r2]
 800c502:	3404      	adds	r4, #4
 800c504:	e79f      	b.n	800c446 <__multiply+0x76>
 800c506:	3e01      	subs	r6, #1
 800c508:	e7a1      	b.n	800c44e <__multiply+0x7e>
 800c50a:	bf00      	nop
 800c50c:	0800d886 	.word	0x0800d886
 800c510:	0800d897 	.word	0x0800d897

0800c514 <__pow5mult>:
 800c514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c518:	4615      	mov	r5, r2
 800c51a:	f012 0203 	ands.w	r2, r2, #3
 800c51e:	4607      	mov	r7, r0
 800c520:	460e      	mov	r6, r1
 800c522:	d007      	beq.n	800c534 <__pow5mult+0x20>
 800c524:	4c25      	ldr	r4, [pc, #148]	@ (800c5bc <__pow5mult+0xa8>)
 800c526:	3a01      	subs	r2, #1
 800c528:	2300      	movs	r3, #0
 800c52a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c52e:	f7ff fea7 	bl	800c280 <__multadd>
 800c532:	4606      	mov	r6, r0
 800c534:	10ad      	asrs	r5, r5, #2
 800c536:	d03d      	beq.n	800c5b4 <__pow5mult+0xa0>
 800c538:	69fc      	ldr	r4, [r7, #28]
 800c53a:	b97c      	cbnz	r4, 800c55c <__pow5mult+0x48>
 800c53c:	2010      	movs	r0, #16
 800c53e:	f7ff fd87 	bl	800c050 <malloc>
 800c542:	4602      	mov	r2, r0
 800c544:	61f8      	str	r0, [r7, #28]
 800c546:	b928      	cbnz	r0, 800c554 <__pow5mult+0x40>
 800c548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c54c:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c0 <__pow5mult+0xac>)
 800c54e:	481d      	ldr	r0, [pc, #116]	@ (800c5c4 <__pow5mult+0xb0>)
 800c550:	f000 fdaa 	bl	800d0a8 <__assert_func>
 800c554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c558:	6004      	str	r4, [r0, #0]
 800c55a:	60c4      	str	r4, [r0, #12]
 800c55c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c564:	b94c      	cbnz	r4, 800c57a <__pow5mult+0x66>
 800c566:	f240 2171 	movw	r1, #625	@ 0x271
 800c56a:	4638      	mov	r0, r7
 800c56c:	f7ff ff1a 	bl	800c3a4 <__i2b>
 800c570:	2300      	movs	r3, #0
 800c572:	4604      	mov	r4, r0
 800c574:	f8c8 0008 	str.w	r0, [r8, #8]
 800c578:	6003      	str	r3, [r0, #0]
 800c57a:	f04f 0900 	mov.w	r9, #0
 800c57e:	07eb      	lsls	r3, r5, #31
 800c580:	d50a      	bpl.n	800c598 <__pow5mult+0x84>
 800c582:	4631      	mov	r1, r6
 800c584:	4622      	mov	r2, r4
 800c586:	4638      	mov	r0, r7
 800c588:	f7ff ff22 	bl	800c3d0 <__multiply>
 800c58c:	4680      	mov	r8, r0
 800c58e:	4631      	mov	r1, r6
 800c590:	4638      	mov	r0, r7
 800c592:	f7ff fe53 	bl	800c23c <_Bfree>
 800c596:	4646      	mov	r6, r8
 800c598:	106d      	asrs	r5, r5, #1
 800c59a:	d00b      	beq.n	800c5b4 <__pow5mult+0xa0>
 800c59c:	6820      	ldr	r0, [r4, #0]
 800c59e:	b938      	cbnz	r0, 800c5b0 <__pow5mult+0x9c>
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff ff13 	bl	800c3d0 <__multiply>
 800c5aa:	6020      	str	r0, [r4, #0]
 800c5ac:	f8c0 9000 	str.w	r9, [r0]
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	e7e4      	b.n	800c57e <__pow5mult+0x6a>
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800d948 	.word	0x0800d948
 800c5c0:	0800d817 	.word	0x0800d817
 800c5c4:	0800d897 	.word	0x0800d897

0800c5c8 <__lshift>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	4607      	mov	r7, r0
 800c5d0:	4691      	mov	r9, r2
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	6849      	ldr	r1, [r1, #4]
 800c5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5e0:	f108 0601 	add.w	r6, r8, #1
 800c5e4:	42b3      	cmp	r3, r6
 800c5e6:	db0b      	blt.n	800c600 <__lshift+0x38>
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	f7ff fde7 	bl	800c1bc <_Balloc>
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	b948      	cbnz	r0, 800c606 <__lshift+0x3e>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5f8:	4b27      	ldr	r3, [pc, #156]	@ (800c698 <__lshift+0xd0>)
 800c5fa:	4828      	ldr	r0, [pc, #160]	@ (800c69c <__lshift+0xd4>)
 800c5fc:	f000 fd54 	bl	800d0a8 <__assert_func>
 800c600:	3101      	adds	r1, #1
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	e7ee      	b.n	800c5e4 <__lshift+0x1c>
 800c606:	2300      	movs	r3, #0
 800c608:	f100 0114 	add.w	r1, r0, #20
 800c60c:	f100 0210 	add.w	r2, r0, #16
 800c610:	4618      	mov	r0, r3
 800c612:	4553      	cmp	r3, sl
 800c614:	db33      	blt.n	800c67e <__lshift+0xb6>
 800c616:	6920      	ldr	r0, [r4, #16]
 800c618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c61c:	f104 0314 	add.w	r3, r4, #20
 800c620:	f019 091f 	ands.w	r9, r9, #31
 800c624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c628:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c62c:	d02b      	beq.n	800c686 <__lshift+0xbe>
 800c62e:	468a      	mov	sl, r1
 800c630:	2200      	movs	r2, #0
 800c632:	f1c9 0e20 	rsb	lr, r9, #32
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	fa00 f009 	lsl.w	r0, r0, r9
 800c63c:	4310      	orrs	r0, r2
 800c63e:	f84a 0b04 	str.w	r0, [sl], #4
 800c642:	f853 2b04 	ldr.w	r2, [r3], #4
 800c646:	459c      	cmp	ip, r3
 800c648:	fa22 f20e 	lsr.w	r2, r2, lr
 800c64c:	d8f3      	bhi.n	800c636 <__lshift+0x6e>
 800c64e:	ebac 0304 	sub.w	r3, ip, r4
 800c652:	3b15      	subs	r3, #21
 800c654:	f023 0303 	bic.w	r3, r3, #3
 800c658:	3304      	adds	r3, #4
 800c65a:	f104 0015 	add.w	r0, r4, #21
 800c65e:	4560      	cmp	r0, ip
 800c660:	bf88      	it	hi
 800c662:	2304      	movhi	r3, #4
 800c664:	50ca      	str	r2, [r1, r3]
 800c666:	b10a      	cbz	r2, 800c66c <__lshift+0xa4>
 800c668:	f108 0602 	add.w	r6, r8, #2
 800c66c:	3e01      	subs	r6, #1
 800c66e:	4638      	mov	r0, r7
 800c670:	4621      	mov	r1, r4
 800c672:	612e      	str	r6, [r5, #16]
 800c674:	f7ff fde2 	bl	800c23c <_Bfree>
 800c678:	4628      	mov	r0, r5
 800c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c682:	3301      	adds	r3, #1
 800c684:	e7c5      	b.n	800c612 <__lshift+0x4a>
 800c686:	3904      	subs	r1, #4
 800c688:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68c:	459c      	cmp	ip, r3
 800c68e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c692:	d8f9      	bhi.n	800c688 <__lshift+0xc0>
 800c694:	e7ea      	b.n	800c66c <__lshift+0xa4>
 800c696:	bf00      	nop
 800c698:	0800d886 	.word	0x0800d886
 800c69c:	0800d897 	.word	0x0800d897

0800c6a0 <__mcmp>:
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	690a      	ldr	r2, [r1, #16]
 800c6a4:	6900      	ldr	r0, [r0, #16]
 800c6a6:	b530      	push	{r4, r5, lr}
 800c6a8:	1a80      	subs	r0, r0, r2
 800c6aa:	d10e      	bne.n	800c6ca <__mcmp+0x2a>
 800c6ac:	3314      	adds	r3, #20
 800c6ae:	3114      	adds	r1, #20
 800c6b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6c0:	4295      	cmp	r5, r2
 800c6c2:	d003      	beq.n	800c6cc <__mcmp+0x2c>
 800c6c4:	d205      	bcs.n	800c6d2 <__mcmp+0x32>
 800c6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ca:	bd30      	pop	{r4, r5, pc}
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d3f3      	bcc.n	800c6b8 <__mcmp+0x18>
 800c6d0:	e7fb      	b.n	800c6ca <__mcmp+0x2a>
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	e7f9      	b.n	800c6ca <__mcmp+0x2a>
	...

0800c6d8 <__mdiff>:
 800c6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	4689      	mov	r9, r1
 800c6de:	4606      	mov	r6, r0
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4648      	mov	r0, r9
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	f7ff ffdb 	bl	800c6a0 <__mcmp>
 800c6ea:	1e05      	subs	r5, r0, #0
 800c6ec:	d112      	bne.n	800c714 <__mdiff+0x3c>
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7ff fd63 	bl	800c1bc <_Balloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	b928      	cbnz	r0, 800c706 <__mdiff+0x2e>
 800c6fa:	f240 2137 	movw	r1, #567	@ 0x237
 800c6fe:	4b3e      	ldr	r3, [pc, #248]	@ (800c7f8 <__mdiff+0x120>)
 800c700:	483e      	ldr	r0, [pc, #248]	@ (800c7fc <__mdiff+0x124>)
 800c702:	f000 fcd1 	bl	800d0a8 <__assert_func>
 800c706:	2301      	movs	r3, #1
 800c708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c70c:	4610      	mov	r0, r2
 800c70e:	b003      	add	sp, #12
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	bfbc      	itt	lt
 800c716:	464b      	movlt	r3, r9
 800c718:	46a1      	movlt	r9, r4
 800c71a:	4630      	mov	r0, r6
 800c71c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c720:	bfba      	itte	lt
 800c722:	461c      	movlt	r4, r3
 800c724:	2501      	movlt	r5, #1
 800c726:	2500      	movge	r5, #0
 800c728:	f7ff fd48 	bl	800c1bc <_Balloc>
 800c72c:	4602      	mov	r2, r0
 800c72e:	b918      	cbnz	r0, 800c738 <__mdiff+0x60>
 800c730:	f240 2145 	movw	r1, #581	@ 0x245
 800c734:	4b30      	ldr	r3, [pc, #192]	@ (800c7f8 <__mdiff+0x120>)
 800c736:	e7e3      	b.n	800c700 <__mdiff+0x28>
 800c738:	f100 0b14 	add.w	fp, r0, #20
 800c73c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c740:	f109 0310 	add.w	r3, r9, #16
 800c744:	60c5      	str	r5, [r0, #12]
 800c746:	f04f 0c00 	mov.w	ip, #0
 800c74a:	f109 0514 	add.w	r5, r9, #20
 800c74e:	46d9      	mov	r9, fp
 800c750:	6926      	ldr	r6, [r4, #16]
 800c752:	f104 0e14 	add.w	lr, r4, #20
 800c756:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c75a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c766:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c76a:	b281      	uxth	r1, r0
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	fa1f f38a 	uxth.w	r3, sl
 800c772:	1a5b      	subs	r3, r3, r1
 800c774:	0c00      	lsrs	r0, r0, #16
 800c776:	4463      	add	r3, ip
 800c778:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c77c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c780:	b29b      	uxth	r3, r3
 800c782:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c786:	4576      	cmp	r6, lr
 800c788:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c78c:	f849 3b04 	str.w	r3, [r9], #4
 800c790:	d8e6      	bhi.n	800c760 <__mdiff+0x88>
 800c792:	1b33      	subs	r3, r6, r4
 800c794:	3b15      	subs	r3, #21
 800c796:	f023 0303 	bic.w	r3, r3, #3
 800c79a:	3415      	adds	r4, #21
 800c79c:	3304      	adds	r3, #4
 800c79e:	42a6      	cmp	r6, r4
 800c7a0:	bf38      	it	cc
 800c7a2:	2304      	movcc	r3, #4
 800c7a4:	441d      	add	r5, r3
 800c7a6:	445b      	add	r3, fp
 800c7a8:	461e      	mov	r6, r3
 800c7aa:	462c      	mov	r4, r5
 800c7ac:	4544      	cmp	r4, r8
 800c7ae:	d30e      	bcc.n	800c7ce <__mdiff+0xf6>
 800c7b0:	f108 0103 	add.w	r1, r8, #3
 800c7b4:	1b49      	subs	r1, r1, r5
 800c7b6:	f021 0103 	bic.w	r1, r1, #3
 800c7ba:	3d03      	subs	r5, #3
 800c7bc:	45a8      	cmp	r8, r5
 800c7be:	bf38      	it	cc
 800c7c0:	2100      	movcc	r1, #0
 800c7c2:	440b      	add	r3, r1
 800c7c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7c8:	b199      	cbz	r1, 800c7f2 <__mdiff+0x11a>
 800c7ca:	6117      	str	r7, [r2, #16]
 800c7cc:	e79e      	b.n	800c70c <__mdiff+0x34>
 800c7ce:	46e6      	mov	lr, ip
 800c7d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7d4:	fa1f fc81 	uxth.w	ip, r1
 800c7d8:	44f4      	add	ip, lr
 800c7da:	0c08      	lsrs	r0, r1, #16
 800c7dc:	4471      	add	r1, lr
 800c7de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7e2:	b289      	uxth	r1, r1
 800c7e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7ec:	f846 1b04 	str.w	r1, [r6], #4
 800c7f0:	e7dc      	b.n	800c7ac <__mdiff+0xd4>
 800c7f2:	3f01      	subs	r7, #1
 800c7f4:	e7e6      	b.n	800c7c4 <__mdiff+0xec>
 800c7f6:	bf00      	nop
 800c7f8:	0800d886 	.word	0x0800d886
 800c7fc:	0800d897 	.word	0x0800d897

0800c800 <__d2b>:
 800c800:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c804:	2101      	movs	r1, #1
 800c806:	4690      	mov	r8, r2
 800c808:	4699      	mov	r9, r3
 800c80a:	9e08      	ldr	r6, [sp, #32]
 800c80c:	f7ff fcd6 	bl	800c1bc <_Balloc>
 800c810:	4604      	mov	r4, r0
 800c812:	b930      	cbnz	r0, 800c822 <__d2b+0x22>
 800c814:	4602      	mov	r2, r0
 800c816:	f240 310f 	movw	r1, #783	@ 0x30f
 800c81a:	4b23      	ldr	r3, [pc, #140]	@ (800c8a8 <__d2b+0xa8>)
 800c81c:	4823      	ldr	r0, [pc, #140]	@ (800c8ac <__d2b+0xac>)
 800c81e:	f000 fc43 	bl	800d0a8 <__assert_func>
 800c822:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c826:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c82a:	b10d      	cbz	r5, 800c830 <__d2b+0x30>
 800c82c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	f1b8 0300 	subs.w	r3, r8, #0
 800c836:	d024      	beq.n	800c882 <__d2b+0x82>
 800c838:	4668      	mov	r0, sp
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	f7ff fd85 	bl	800c34a <__lo0bits>
 800c840:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c844:	b1d8      	cbz	r0, 800c87e <__d2b+0x7e>
 800c846:	f1c0 0320 	rsb	r3, r0, #32
 800c84a:	fa02 f303 	lsl.w	r3, r2, r3
 800c84e:	430b      	orrs	r3, r1
 800c850:	40c2      	lsrs	r2, r0
 800c852:	6163      	str	r3, [r4, #20]
 800c854:	9201      	str	r2, [sp, #4]
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bf0c      	ite	eq
 800c85c:	2201      	moveq	r2, #1
 800c85e:	2202      	movne	r2, #2
 800c860:	61a3      	str	r3, [r4, #24]
 800c862:	6122      	str	r2, [r4, #16]
 800c864:	b1ad      	cbz	r5, 800c892 <__d2b+0x92>
 800c866:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c86a:	4405      	add	r5, r0
 800c86c:	6035      	str	r5, [r6, #0]
 800c86e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c874:	6018      	str	r0, [r3, #0]
 800c876:	4620      	mov	r0, r4
 800c878:	b002      	add	sp, #8
 800c87a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c87e:	6161      	str	r1, [r4, #20]
 800c880:	e7e9      	b.n	800c856 <__d2b+0x56>
 800c882:	a801      	add	r0, sp, #4
 800c884:	f7ff fd61 	bl	800c34a <__lo0bits>
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	6163      	str	r3, [r4, #20]
 800c88e:	3020      	adds	r0, #32
 800c890:	e7e7      	b.n	800c862 <__d2b+0x62>
 800c892:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c89a:	6030      	str	r0, [r6, #0]
 800c89c:	6918      	ldr	r0, [r3, #16]
 800c89e:	f7ff fd35 	bl	800c30c <__hi0bits>
 800c8a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8a6:	e7e4      	b.n	800c872 <__d2b+0x72>
 800c8a8:	0800d886 	.word	0x0800d886
 800c8ac:	0800d897 	.word	0x0800d897

0800c8b0 <__ssputs_r>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	461f      	mov	r7, r3
 800c8b6:	688e      	ldr	r6, [r1, #8]
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	42be      	cmp	r6, r7
 800c8bc:	460c      	mov	r4, r1
 800c8be:	4690      	mov	r8, r2
 800c8c0:	680b      	ldr	r3, [r1, #0]
 800c8c2:	d82d      	bhi.n	800c920 <__ssputs_r+0x70>
 800c8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8cc:	d026      	beq.n	800c91c <__ssputs_r+0x6c>
 800c8ce:	6965      	ldr	r5, [r4, #20]
 800c8d0:	6909      	ldr	r1, [r1, #16]
 800c8d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8d6:	eba3 0901 	sub.w	r9, r3, r1
 800c8da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8de:	1c7b      	adds	r3, r7, #1
 800c8e0:	444b      	add	r3, r9
 800c8e2:	106d      	asrs	r5, r5, #1
 800c8e4:	429d      	cmp	r5, r3
 800c8e6:	bf38      	it	cc
 800c8e8:	461d      	movcc	r5, r3
 800c8ea:	0553      	lsls	r3, r2, #21
 800c8ec:	d527      	bpl.n	800c93e <__ssputs_r+0x8e>
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f7ff fbd8 	bl	800c0a4 <_malloc_r>
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	b360      	cbz	r0, 800c952 <__ssputs_r+0xa2>
 800c8f8:	464a      	mov	r2, r9
 800c8fa:	6921      	ldr	r1, [r4, #16]
 800c8fc:	f000 fbc6 	bl	800d08c <memcpy>
 800c900:	89a3      	ldrh	r3, [r4, #12]
 800c902:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90a:	81a3      	strh	r3, [r4, #12]
 800c90c:	6126      	str	r6, [r4, #16]
 800c90e:	444e      	add	r6, r9
 800c910:	6026      	str	r6, [r4, #0]
 800c912:	463e      	mov	r6, r7
 800c914:	6165      	str	r5, [r4, #20]
 800c916:	eba5 0509 	sub.w	r5, r5, r9
 800c91a:	60a5      	str	r5, [r4, #8]
 800c91c:	42be      	cmp	r6, r7
 800c91e:	d900      	bls.n	800c922 <__ssputs_r+0x72>
 800c920:	463e      	mov	r6, r7
 800c922:	4632      	mov	r2, r6
 800c924:	4641      	mov	r1, r8
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	f000 fb63 	bl	800cff2 <memmove>
 800c92c:	2000      	movs	r0, #0
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	1b9b      	subs	r3, r3, r6
 800c932:	60a3      	str	r3, [r4, #8]
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	4433      	add	r3, r6
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93e:	462a      	mov	r2, r5
 800c940:	f000 fbf6 	bl	800d130 <_realloc_r>
 800c944:	4606      	mov	r6, r0
 800c946:	2800      	cmp	r0, #0
 800c948:	d1e0      	bne.n	800c90c <__ssputs_r+0x5c>
 800c94a:	4650      	mov	r0, sl
 800c94c:	6921      	ldr	r1, [r4, #16]
 800c94e:	f7ff fb37 	bl	800bfc0 <_free_r>
 800c952:	230c      	movs	r3, #12
 800c954:	f8ca 3000 	str.w	r3, [sl]
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f04f 30ff 	mov.w	r0, #4294967295
 800c95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	e7e9      	b.n	800c93a <__ssputs_r+0x8a>
	...

0800c968 <_svfiprintf_r>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4698      	mov	r8, r3
 800c96e:	898b      	ldrh	r3, [r1, #12]
 800c970:	4607      	mov	r7, r0
 800c972:	061b      	lsls	r3, r3, #24
 800c974:	460d      	mov	r5, r1
 800c976:	4614      	mov	r4, r2
 800c978:	b09d      	sub	sp, #116	@ 0x74
 800c97a:	d510      	bpl.n	800c99e <_svfiprintf_r+0x36>
 800c97c:	690b      	ldr	r3, [r1, #16]
 800c97e:	b973      	cbnz	r3, 800c99e <_svfiprintf_r+0x36>
 800c980:	2140      	movs	r1, #64	@ 0x40
 800c982:	f7ff fb8f 	bl	800c0a4 <_malloc_r>
 800c986:	6028      	str	r0, [r5, #0]
 800c988:	6128      	str	r0, [r5, #16]
 800c98a:	b930      	cbnz	r0, 800c99a <_svfiprintf_r+0x32>
 800c98c:	230c      	movs	r3, #12
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	b01d      	add	sp, #116	@ 0x74
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	2340      	movs	r3, #64	@ 0x40
 800c99c:	616b      	str	r3, [r5, #20]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a2:	2320      	movs	r3, #32
 800c9a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9a8:	2330      	movs	r3, #48	@ 0x30
 800c9aa:	f04f 0901 	mov.w	r9, #1
 800c9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cb4c <_svfiprintf_r+0x1e4>
 800c9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ba:	4623      	mov	r3, r4
 800c9bc:	469a      	mov	sl, r3
 800c9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9c2:	b10a      	cbz	r2, 800c9c8 <_svfiprintf_r+0x60>
 800c9c4:	2a25      	cmp	r2, #37	@ 0x25
 800c9c6:	d1f9      	bne.n	800c9bc <_svfiprintf_r+0x54>
 800c9c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c9cc:	d00b      	beq.n	800c9e6 <_svfiprintf_r+0x7e>
 800c9ce:	465b      	mov	r3, fp
 800c9d0:	4622      	mov	r2, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	f7ff ff6b 	bl	800c8b0 <__ssputs_r>
 800c9da:	3001      	adds	r0, #1
 800c9dc:	f000 80a7 	beq.w	800cb2e <_svfiprintf_r+0x1c6>
 800c9e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e2:	445a      	add	r2, fp
 800c9e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 809f 	beq.w	800cb2e <_svfiprintf_r+0x1c6>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9fa:	f10a 0a01 	add.w	sl, sl, #1
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	9307      	str	r3, [sp, #28]
 800ca02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca06:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca08:	4654      	mov	r4, sl
 800ca0a:	2205      	movs	r2, #5
 800ca0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca10:	484e      	ldr	r0, [pc, #312]	@ (800cb4c <_svfiprintf_r+0x1e4>)
 800ca12:	f7fe fc6a 	bl	800b2ea <memchr>
 800ca16:	9a04      	ldr	r2, [sp, #16]
 800ca18:	b9d8      	cbnz	r0, 800ca52 <_svfiprintf_r+0xea>
 800ca1a:	06d0      	lsls	r0, r2, #27
 800ca1c:	bf44      	itt	mi
 800ca1e:	2320      	movmi	r3, #32
 800ca20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca24:	0711      	lsls	r1, r2, #28
 800ca26:	bf44      	itt	mi
 800ca28:	232b      	movmi	r3, #43	@ 0x2b
 800ca2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca34:	d015      	beq.n	800ca62 <_svfiprintf_r+0xfa>
 800ca36:	4654      	mov	r4, sl
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f04f 0c0a 	mov.w	ip, #10
 800ca3e:	9a07      	ldr	r2, [sp, #28]
 800ca40:	4621      	mov	r1, r4
 800ca42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca46:	3b30      	subs	r3, #48	@ 0x30
 800ca48:	2b09      	cmp	r3, #9
 800ca4a:	d94b      	bls.n	800cae4 <_svfiprintf_r+0x17c>
 800ca4c:	b1b0      	cbz	r0, 800ca7c <_svfiprintf_r+0x114>
 800ca4e:	9207      	str	r2, [sp, #28]
 800ca50:	e014      	b.n	800ca7c <_svfiprintf_r+0x114>
 800ca52:	eba0 0308 	sub.w	r3, r0, r8
 800ca56:	fa09 f303 	lsl.w	r3, r9, r3
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	46a2      	mov	sl, r4
 800ca5e:	9304      	str	r3, [sp, #16]
 800ca60:	e7d2      	b.n	800ca08 <_svfiprintf_r+0xa0>
 800ca62:	9b03      	ldr	r3, [sp, #12]
 800ca64:	1d19      	adds	r1, r3, #4
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	9103      	str	r1, [sp, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	bfbb      	ittet	lt
 800ca6e:	425b      	neglt	r3, r3
 800ca70:	f042 0202 	orrlt.w	r2, r2, #2
 800ca74:	9307      	strge	r3, [sp, #28]
 800ca76:	9307      	strlt	r3, [sp, #28]
 800ca78:	bfb8      	it	lt
 800ca7a:	9204      	strlt	r2, [sp, #16]
 800ca7c:	7823      	ldrb	r3, [r4, #0]
 800ca7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca80:	d10a      	bne.n	800ca98 <_svfiprintf_r+0x130>
 800ca82:	7863      	ldrb	r3, [r4, #1]
 800ca84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca86:	d132      	bne.n	800caee <_svfiprintf_r+0x186>
 800ca88:	9b03      	ldr	r3, [sp, #12]
 800ca8a:	3402      	adds	r4, #2
 800ca8c:	1d1a      	adds	r2, r3, #4
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	9203      	str	r2, [sp, #12]
 800ca92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cb50 <_svfiprintf_r+0x1e8>
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	4650      	mov	r0, sl
 800caa0:	7821      	ldrb	r1, [r4, #0]
 800caa2:	f7fe fc22 	bl	800b2ea <memchr>
 800caa6:	b138      	cbz	r0, 800cab8 <_svfiprintf_r+0x150>
 800caa8:	2240      	movs	r2, #64	@ 0x40
 800caaa:	9b04      	ldr	r3, [sp, #16]
 800caac:	eba0 000a 	sub.w	r0, r0, sl
 800cab0:	4082      	lsls	r2, r0
 800cab2:	4313      	orrs	r3, r2
 800cab4:	3401      	adds	r4, #1
 800cab6:	9304      	str	r3, [sp, #16]
 800cab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabc:	2206      	movs	r2, #6
 800cabe:	4825      	ldr	r0, [pc, #148]	@ (800cb54 <_svfiprintf_r+0x1ec>)
 800cac0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cac4:	f7fe fc11 	bl	800b2ea <memchr>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d036      	beq.n	800cb3a <_svfiprintf_r+0x1d2>
 800cacc:	4b22      	ldr	r3, [pc, #136]	@ (800cb58 <_svfiprintf_r+0x1f0>)
 800cace:	bb1b      	cbnz	r3, 800cb18 <_svfiprintf_r+0x1b0>
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	3307      	adds	r3, #7
 800cad4:	f023 0307 	bic.w	r3, r3, #7
 800cad8:	3308      	adds	r3, #8
 800cada:	9303      	str	r3, [sp, #12]
 800cadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cade:	4433      	add	r3, r6
 800cae0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae2:	e76a      	b.n	800c9ba <_svfiprintf_r+0x52>
 800cae4:	460c      	mov	r4, r1
 800cae6:	2001      	movs	r0, #1
 800cae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800caec:	e7a8      	b.n	800ca40 <_svfiprintf_r+0xd8>
 800caee:	2300      	movs	r3, #0
 800caf0:	f04f 0c0a 	mov.w	ip, #10
 800caf4:	4619      	mov	r1, r3
 800caf6:	3401      	adds	r4, #1
 800caf8:	9305      	str	r3, [sp, #20]
 800cafa:	4620      	mov	r0, r4
 800cafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb00:	3a30      	subs	r2, #48	@ 0x30
 800cb02:	2a09      	cmp	r2, #9
 800cb04:	d903      	bls.n	800cb0e <_svfiprintf_r+0x1a6>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0c6      	beq.n	800ca98 <_svfiprintf_r+0x130>
 800cb0a:	9105      	str	r1, [sp, #20]
 800cb0c:	e7c4      	b.n	800ca98 <_svfiprintf_r+0x130>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	2301      	movs	r3, #1
 800cb12:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb16:	e7f0      	b.n	800cafa <_svfiprintf_r+0x192>
 800cb18:	ab03      	add	r3, sp, #12
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	462a      	mov	r2, r5
 800cb1e:	4638      	mov	r0, r7
 800cb20:	4b0e      	ldr	r3, [pc, #56]	@ (800cb5c <_svfiprintf_r+0x1f4>)
 800cb22:	a904      	add	r1, sp, #16
 800cb24:	f7fd fd40 	bl	800a5a8 <_printf_float>
 800cb28:	1c42      	adds	r2, r0, #1
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	d1d6      	bne.n	800cadc <_svfiprintf_r+0x174>
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	065b      	lsls	r3, r3, #25
 800cb32:	f53f af2d 	bmi.w	800c990 <_svfiprintf_r+0x28>
 800cb36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb38:	e72c      	b.n	800c994 <_svfiprintf_r+0x2c>
 800cb3a:	ab03      	add	r3, sp, #12
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	462a      	mov	r2, r5
 800cb40:	4638      	mov	r0, r7
 800cb42:	4b06      	ldr	r3, [pc, #24]	@ (800cb5c <_svfiprintf_r+0x1f4>)
 800cb44:	a904      	add	r1, sp, #16
 800cb46:	f7fd ffcd 	bl	800aae4 <_printf_i>
 800cb4a:	e7ed      	b.n	800cb28 <_svfiprintf_r+0x1c0>
 800cb4c:	0800d8f0 	.word	0x0800d8f0
 800cb50:	0800d8f6 	.word	0x0800d8f6
 800cb54:	0800d8fa 	.word	0x0800d8fa
 800cb58:	0800a5a9 	.word	0x0800a5a9
 800cb5c:	0800c8b1 	.word	0x0800c8b1

0800cb60 <__sfputc_r>:
 800cb60:	6893      	ldr	r3, [r2, #8]
 800cb62:	b410      	push	{r4}
 800cb64:	3b01      	subs	r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	6093      	str	r3, [r2, #8]
 800cb6a:	da07      	bge.n	800cb7c <__sfputc_r+0x1c>
 800cb6c:	6994      	ldr	r4, [r2, #24]
 800cb6e:	42a3      	cmp	r3, r4
 800cb70:	db01      	blt.n	800cb76 <__sfputc_r+0x16>
 800cb72:	290a      	cmp	r1, #10
 800cb74:	d102      	bne.n	800cb7c <__sfputc_r+0x1c>
 800cb76:	bc10      	pop	{r4}
 800cb78:	f7fe ba7d 	b.w	800b076 <__swbuf_r>
 800cb7c:	6813      	ldr	r3, [r2, #0]
 800cb7e:	1c58      	adds	r0, r3, #1
 800cb80:	6010      	str	r0, [r2, #0]
 800cb82:	7019      	strb	r1, [r3, #0]
 800cb84:	4608      	mov	r0, r1
 800cb86:	bc10      	pop	{r4}
 800cb88:	4770      	bx	lr

0800cb8a <__sfputs_r>:
 800cb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	460f      	mov	r7, r1
 800cb90:	4614      	mov	r4, r2
 800cb92:	18d5      	adds	r5, r2, r3
 800cb94:	42ac      	cmp	r4, r5
 800cb96:	d101      	bne.n	800cb9c <__sfputs_r+0x12>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e007      	b.n	800cbac <__sfputs_r+0x22>
 800cb9c:	463a      	mov	r2, r7
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba4:	f7ff ffdc 	bl	800cb60 <__sfputc_r>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d1f3      	bne.n	800cb94 <__sfputs_r+0xa>
 800cbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbb0 <_vfiprintf_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	460d      	mov	r5, r1
 800cbb6:	4614      	mov	r4, r2
 800cbb8:	4698      	mov	r8, r3
 800cbba:	4606      	mov	r6, r0
 800cbbc:	b09d      	sub	sp, #116	@ 0x74
 800cbbe:	b118      	cbz	r0, 800cbc8 <_vfiprintf_r+0x18>
 800cbc0:	6a03      	ldr	r3, [r0, #32]
 800cbc2:	b90b      	cbnz	r3, 800cbc8 <_vfiprintf_r+0x18>
 800cbc4:	f7fe f938 	bl	800ae38 <__sinit>
 800cbc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbca:	07d9      	lsls	r1, r3, #31
 800cbcc:	d405      	bmi.n	800cbda <_vfiprintf_r+0x2a>
 800cbce:	89ab      	ldrh	r3, [r5, #12]
 800cbd0:	059a      	lsls	r2, r3, #22
 800cbd2:	d402      	bmi.n	800cbda <_vfiprintf_r+0x2a>
 800cbd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbd6:	f7fe fb86 	bl	800b2e6 <__retarget_lock_acquire_recursive>
 800cbda:	89ab      	ldrh	r3, [r5, #12]
 800cbdc:	071b      	lsls	r3, r3, #28
 800cbde:	d501      	bpl.n	800cbe4 <_vfiprintf_r+0x34>
 800cbe0:	692b      	ldr	r3, [r5, #16]
 800cbe2:	b99b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x5c>
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7fe fa84 	bl	800b0f4 <__swsetup_r>
 800cbec:	b170      	cbz	r0, 800cc0c <_vfiprintf_r+0x5c>
 800cbee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbf0:	07dc      	lsls	r4, r3, #31
 800cbf2:	d504      	bpl.n	800cbfe <_vfiprintf_r+0x4e>
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	b01d      	add	sp, #116	@ 0x74
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	0598      	lsls	r0, r3, #22
 800cc02:	d4f7      	bmi.n	800cbf4 <_vfiprintf_r+0x44>
 800cc04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc06:	f7fe fb6f 	bl	800b2e8 <__retarget_lock_release_recursive>
 800cc0a:	e7f3      	b.n	800cbf4 <_vfiprintf_r+0x44>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc10:	2320      	movs	r3, #32
 800cc12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc16:	2330      	movs	r3, #48	@ 0x30
 800cc18:	f04f 0901 	mov.w	r9, #1
 800cc1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc20:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cdcc <_vfiprintf_r+0x21c>
 800cc24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc28:	4623      	mov	r3, r4
 800cc2a:	469a      	mov	sl, r3
 800cc2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc30:	b10a      	cbz	r2, 800cc36 <_vfiprintf_r+0x86>
 800cc32:	2a25      	cmp	r2, #37	@ 0x25
 800cc34:	d1f9      	bne.n	800cc2a <_vfiprintf_r+0x7a>
 800cc36:	ebba 0b04 	subs.w	fp, sl, r4
 800cc3a:	d00b      	beq.n	800cc54 <_vfiprintf_r+0xa4>
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	4622      	mov	r2, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff ffa1 	bl	800cb8a <__sfputs_r>
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f000 80a7 	beq.w	800cd9c <_vfiprintf_r+0x1ec>
 800cc4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc50:	445a      	add	r2, fp
 800cc52:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc54:	f89a 3000 	ldrb.w	r3, [sl]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f000 809f 	beq.w	800cd9c <_vfiprintf_r+0x1ec>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f04f 32ff 	mov.w	r2, #4294967295
 800cc64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc68:	f10a 0a01 	add.w	sl, sl, #1
 800cc6c:	9304      	str	r3, [sp, #16]
 800cc6e:	9307      	str	r3, [sp, #28]
 800cc70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc74:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc76:	4654      	mov	r4, sl
 800cc78:	2205      	movs	r2, #5
 800cc7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7e:	4853      	ldr	r0, [pc, #332]	@ (800cdcc <_vfiprintf_r+0x21c>)
 800cc80:	f7fe fb33 	bl	800b2ea <memchr>
 800cc84:	9a04      	ldr	r2, [sp, #16]
 800cc86:	b9d8      	cbnz	r0, 800ccc0 <_vfiprintf_r+0x110>
 800cc88:	06d1      	lsls	r1, r2, #27
 800cc8a:	bf44      	itt	mi
 800cc8c:	2320      	movmi	r3, #32
 800cc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc92:	0713      	lsls	r3, r2, #28
 800cc94:	bf44      	itt	mi
 800cc96:	232b      	movmi	r3, #43	@ 0x2b
 800cc98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cca0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca2:	d015      	beq.n	800ccd0 <_vfiprintf_r+0x120>
 800cca4:	4654      	mov	r4, sl
 800cca6:	2000      	movs	r0, #0
 800cca8:	f04f 0c0a 	mov.w	ip, #10
 800ccac:	9a07      	ldr	r2, [sp, #28]
 800ccae:	4621      	mov	r1, r4
 800ccb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccb4:	3b30      	subs	r3, #48	@ 0x30
 800ccb6:	2b09      	cmp	r3, #9
 800ccb8:	d94b      	bls.n	800cd52 <_vfiprintf_r+0x1a2>
 800ccba:	b1b0      	cbz	r0, 800ccea <_vfiprintf_r+0x13a>
 800ccbc:	9207      	str	r2, [sp, #28]
 800ccbe:	e014      	b.n	800ccea <_vfiprintf_r+0x13a>
 800ccc0:	eba0 0308 	sub.w	r3, r0, r8
 800ccc4:	fa09 f303 	lsl.w	r3, r9, r3
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	46a2      	mov	sl, r4
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	e7d2      	b.n	800cc76 <_vfiprintf_r+0xc6>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	1d19      	adds	r1, r3, #4
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	9103      	str	r1, [sp, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bfbb      	ittet	lt
 800ccdc:	425b      	neglt	r3, r3
 800ccde:	f042 0202 	orrlt.w	r2, r2, #2
 800cce2:	9307      	strge	r3, [sp, #28]
 800cce4:	9307      	strlt	r3, [sp, #28]
 800cce6:	bfb8      	it	lt
 800cce8:	9204      	strlt	r2, [sp, #16]
 800ccea:	7823      	ldrb	r3, [r4, #0]
 800ccec:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccee:	d10a      	bne.n	800cd06 <_vfiprintf_r+0x156>
 800ccf0:	7863      	ldrb	r3, [r4, #1]
 800ccf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccf4:	d132      	bne.n	800cd5c <_vfiprintf_r+0x1ac>
 800ccf6:	9b03      	ldr	r3, [sp, #12]
 800ccf8:	3402      	adds	r4, #2
 800ccfa:	1d1a      	adds	r2, r3, #4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	9203      	str	r2, [sp, #12]
 800cd00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd04:	9305      	str	r3, [sp, #20]
 800cd06:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cdd0 <_vfiprintf_r+0x220>
 800cd0a:	2203      	movs	r2, #3
 800cd0c:	4650      	mov	r0, sl
 800cd0e:	7821      	ldrb	r1, [r4, #0]
 800cd10:	f7fe faeb 	bl	800b2ea <memchr>
 800cd14:	b138      	cbz	r0, 800cd26 <_vfiprintf_r+0x176>
 800cd16:	2240      	movs	r2, #64	@ 0x40
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	eba0 000a 	sub.w	r0, r0, sl
 800cd1e:	4082      	lsls	r2, r0
 800cd20:	4313      	orrs	r3, r2
 800cd22:	3401      	adds	r4, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2a:	2206      	movs	r2, #6
 800cd2c:	4829      	ldr	r0, [pc, #164]	@ (800cdd4 <_vfiprintf_r+0x224>)
 800cd2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd32:	f7fe fada 	bl	800b2ea <memchr>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d03f      	beq.n	800cdba <_vfiprintf_r+0x20a>
 800cd3a:	4b27      	ldr	r3, [pc, #156]	@ (800cdd8 <_vfiprintf_r+0x228>)
 800cd3c:	bb1b      	cbnz	r3, 800cd86 <_vfiprintf_r+0x1d6>
 800cd3e:	9b03      	ldr	r3, [sp, #12]
 800cd40:	3307      	adds	r3, #7
 800cd42:	f023 0307 	bic.w	r3, r3, #7
 800cd46:	3308      	adds	r3, #8
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd4c:	443b      	add	r3, r7
 800cd4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd50:	e76a      	b.n	800cc28 <_vfiprintf_r+0x78>
 800cd52:	460c      	mov	r4, r1
 800cd54:	2001      	movs	r0, #1
 800cd56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd5a:	e7a8      	b.n	800ccae <_vfiprintf_r+0xfe>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f04f 0c0a 	mov.w	ip, #10
 800cd62:	4619      	mov	r1, r3
 800cd64:	3401      	adds	r4, #1
 800cd66:	9305      	str	r3, [sp, #20]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd6e:	3a30      	subs	r2, #48	@ 0x30
 800cd70:	2a09      	cmp	r2, #9
 800cd72:	d903      	bls.n	800cd7c <_vfiprintf_r+0x1cc>
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0c6      	beq.n	800cd06 <_vfiprintf_r+0x156>
 800cd78:	9105      	str	r1, [sp, #20]
 800cd7a:	e7c4      	b.n	800cd06 <_vfiprintf_r+0x156>
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	2301      	movs	r3, #1
 800cd80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd84:	e7f0      	b.n	800cd68 <_vfiprintf_r+0x1b8>
 800cd86:	ab03      	add	r3, sp, #12
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4b13      	ldr	r3, [pc, #76]	@ (800cddc <_vfiprintf_r+0x22c>)
 800cd90:	a904      	add	r1, sp, #16
 800cd92:	f7fd fc09 	bl	800a5a8 <_printf_float>
 800cd96:	4607      	mov	r7, r0
 800cd98:	1c78      	adds	r0, r7, #1
 800cd9a:	d1d6      	bne.n	800cd4a <_vfiprintf_r+0x19a>
 800cd9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd9e:	07d9      	lsls	r1, r3, #31
 800cda0:	d405      	bmi.n	800cdae <_vfiprintf_r+0x1fe>
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	059a      	lsls	r2, r3, #22
 800cda6:	d402      	bmi.n	800cdae <_vfiprintf_r+0x1fe>
 800cda8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdaa:	f7fe fa9d 	bl	800b2e8 <__retarget_lock_release_recursive>
 800cdae:	89ab      	ldrh	r3, [r5, #12]
 800cdb0:	065b      	lsls	r3, r3, #25
 800cdb2:	f53f af1f 	bmi.w	800cbf4 <_vfiprintf_r+0x44>
 800cdb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdb8:	e71e      	b.n	800cbf8 <_vfiprintf_r+0x48>
 800cdba:	ab03      	add	r3, sp, #12
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	4b06      	ldr	r3, [pc, #24]	@ (800cddc <_vfiprintf_r+0x22c>)
 800cdc4:	a904      	add	r1, sp, #16
 800cdc6:	f7fd fe8d 	bl	800aae4 <_printf_i>
 800cdca:	e7e4      	b.n	800cd96 <_vfiprintf_r+0x1e6>
 800cdcc:	0800d8f0 	.word	0x0800d8f0
 800cdd0:	0800d8f6 	.word	0x0800d8f6
 800cdd4:	0800d8fa 	.word	0x0800d8fa
 800cdd8:	0800a5a9 	.word	0x0800a5a9
 800cddc:	0800cb8b 	.word	0x0800cb8b

0800cde0 <__sflush_r>:
 800cde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	0716      	lsls	r6, r2, #28
 800cde8:	4605      	mov	r5, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	d454      	bmi.n	800ce98 <__sflush_r+0xb8>
 800cdee:	684b      	ldr	r3, [r1, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc02      	bgt.n	800cdfa <__sflush_r+0x1a>
 800cdf4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dd48      	ble.n	800ce8c <__sflush_r+0xac>
 800cdfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdfc:	2e00      	cmp	r6, #0
 800cdfe:	d045      	beq.n	800ce8c <__sflush_r+0xac>
 800ce00:	2300      	movs	r3, #0
 800ce02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce06:	682f      	ldr	r7, [r5, #0]
 800ce08:	6a21      	ldr	r1, [r4, #32]
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	d030      	beq.n	800ce70 <__sflush_r+0x90>
 800ce0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	0759      	lsls	r1, r3, #29
 800ce14:	d505      	bpl.n	800ce22 <__sflush_r+0x42>
 800ce16:	6863      	ldr	r3, [r4, #4]
 800ce18:	1ad2      	subs	r2, r2, r3
 800ce1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce1c:	b10b      	cbz	r3, 800ce22 <__sflush_r+0x42>
 800ce1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce20:	1ad2      	subs	r2, r2, r3
 800ce22:	2300      	movs	r3, #0
 800ce24:	4628      	mov	r0, r5
 800ce26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce28:	6a21      	ldr	r1, [r4, #32]
 800ce2a:	47b0      	blx	r6
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	d106      	bne.n	800ce40 <__sflush_r+0x60>
 800ce32:	6829      	ldr	r1, [r5, #0]
 800ce34:	291d      	cmp	r1, #29
 800ce36:	d82b      	bhi.n	800ce90 <__sflush_r+0xb0>
 800ce38:	4a28      	ldr	r2, [pc, #160]	@ (800cedc <__sflush_r+0xfc>)
 800ce3a:	40ca      	lsrs	r2, r1
 800ce3c:	07d6      	lsls	r6, r2, #31
 800ce3e:	d527      	bpl.n	800ce90 <__sflush_r+0xb0>
 800ce40:	2200      	movs	r2, #0
 800ce42:	6062      	str	r2, [r4, #4]
 800ce44:	6922      	ldr	r2, [r4, #16]
 800ce46:	04d9      	lsls	r1, r3, #19
 800ce48:	6022      	str	r2, [r4, #0]
 800ce4a:	d504      	bpl.n	800ce56 <__sflush_r+0x76>
 800ce4c:	1c42      	adds	r2, r0, #1
 800ce4e:	d101      	bne.n	800ce54 <__sflush_r+0x74>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b903      	cbnz	r3, 800ce56 <__sflush_r+0x76>
 800ce54:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce58:	602f      	str	r7, [r5, #0]
 800ce5a:	b1b9      	cbz	r1, 800ce8c <__sflush_r+0xac>
 800ce5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce60:	4299      	cmp	r1, r3
 800ce62:	d002      	beq.n	800ce6a <__sflush_r+0x8a>
 800ce64:	4628      	mov	r0, r5
 800ce66:	f7ff f8ab 	bl	800bfc0 <_free_r>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce6e:	e00d      	b.n	800ce8c <__sflush_r+0xac>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b0      	blx	r6
 800ce76:	4602      	mov	r2, r0
 800ce78:	1c50      	adds	r0, r2, #1
 800ce7a:	d1c9      	bne.n	800ce10 <__sflush_r+0x30>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0c6      	beq.n	800ce10 <__sflush_r+0x30>
 800ce82:	2b1d      	cmp	r3, #29
 800ce84:	d001      	beq.n	800ce8a <__sflush_r+0xaa>
 800ce86:	2b16      	cmp	r3, #22
 800ce88:	d11d      	bne.n	800cec6 <__sflush_r+0xe6>
 800ce8a:	602f      	str	r7, [r5, #0]
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	e021      	b.n	800ced4 <__sflush_r+0xf4>
 800ce90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce94:	b21b      	sxth	r3, r3
 800ce96:	e01a      	b.n	800cece <__sflush_r+0xee>
 800ce98:	690f      	ldr	r7, [r1, #16]
 800ce9a:	2f00      	cmp	r7, #0
 800ce9c:	d0f6      	beq.n	800ce8c <__sflush_r+0xac>
 800ce9e:	0793      	lsls	r3, r2, #30
 800cea0:	bf18      	it	ne
 800cea2:	2300      	movne	r3, #0
 800cea4:	680e      	ldr	r6, [r1, #0]
 800cea6:	bf08      	it	eq
 800cea8:	694b      	ldreq	r3, [r1, #20]
 800ceaa:	1bf6      	subs	r6, r6, r7
 800ceac:	600f      	str	r7, [r1, #0]
 800ceae:	608b      	str	r3, [r1, #8]
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	ddeb      	ble.n	800ce8c <__sflush_r+0xac>
 800ceb4:	4633      	mov	r3, r6
 800ceb6:	463a      	mov	r2, r7
 800ceb8:	4628      	mov	r0, r5
 800ceba:	6a21      	ldr	r1, [r4, #32]
 800cebc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cec0:	47e0      	blx	ip
 800cec2:	2800      	cmp	r0, #0
 800cec4:	dc07      	bgt.n	800ced6 <__sflush_r+0xf6>
 800cec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced6:	4407      	add	r7, r0
 800ced8:	1a36      	subs	r6, r6, r0
 800ceda:	e7e9      	b.n	800ceb0 <__sflush_r+0xd0>
 800cedc:	20400001 	.word	0x20400001

0800cee0 <_fflush_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	690b      	ldr	r3, [r1, #16]
 800cee4:	4605      	mov	r5, r0
 800cee6:	460c      	mov	r4, r1
 800cee8:	b913      	cbnz	r3, 800cef0 <_fflush_r+0x10>
 800ceea:	2500      	movs	r5, #0
 800ceec:	4628      	mov	r0, r5
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	b118      	cbz	r0, 800cefa <_fflush_r+0x1a>
 800cef2:	6a03      	ldr	r3, [r0, #32]
 800cef4:	b90b      	cbnz	r3, 800cefa <_fflush_r+0x1a>
 800cef6:	f7fd ff9f 	bl	800ae38 <__sinit>
 800cefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0f3      	beq.n	800ceea <_fflush_r+0xa>
 800cf02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf04:	07d0      	lsls	r0, r2, #31
 800cf06:	d404      	bmi.n	800cf12 <_fflush_r+0x32>
 800cf08:	0599      	lsls	r1, r3, #22
 800cf0a:	d402      	bmi.n	800cf12 <_fflush_r+0x32>
 800cf0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf0e:	f7fe f9ea 	bl	800b2e6 <__retarget_lock_acquire_recursive>
 800cf12:	4628      	mov	r0, r5
 800cf14:	4621      	mov	r1, r4
 800cf16:	f7ff ff63 	bl	800cde0 <__sflush_r>
 800cf1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	07da      	lsls	r2, r3, #31
 800cf20:	d4e4      	bmi.n	800ceec <_fflush_r+0xc>
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	059b      	lsls	r3, r3, #22
 800cf26:	d4e1      	bmi.n	800ceec <_fflush_r+0xc>
 800cf28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf2a:	f7fe f9dd 	bl	800b2e8 <__retarget_lock_release_recursive>
 800cf2e:	e7dd      	b.n	800ceec <_fflush_r+0xc>

0800cf30 <__swhatbuf_r>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf38:	4615      	mov	r5, r2
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	461e      	mov	r6, r3
 800cf3e:	b096      	sub	sp, #88	@ 0x58
 800cf40:	da0c      	bge.n	800cf5c <__swhatbuf_r+0x2c>
 800cf42:	89a3      	ldrh	r3, [r4, #12]
 800cf44:	2100      	movs	r1, #0
 800cf46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf4a:	bf14      	ite	ne
 800cf4c:	2340      	movne	r3, #64	@ 0x40
 800cf4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf52:	2000      	movs	r0, #0
 800cf54:	6031      	str	r1, [r6, #0]
 800cf56:	602b      	str	r3, [r5, #0]
 800cf58:	b016      	add	sp, #88	@ 0x58
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	466a      	mov	r2, sp
 800cf5e:	f000 f863 	bl	800d028 <_fstat_r>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	dbed      	blt.n	800cf42 <__swhatbuf_r+0x12>
 800cf66:	9901      	ldr	r1, [sp, #4]
 800cf68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf70:	4259      	negs	r1, r3
 800cf72:	4159      	adcs	r1, r3
 800cf74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf78:	e7eb      	b.n	800cf52 <__swhatbuf_r+0x22>

0800cf7a <__smakebuf_r>:
 800cf7a:	898b      	ldrh	r3, [r1, #12]
 800cf7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf7e:	079d      	lsls	r5, r3, #30
 800cf80:	4606      	mov	r6, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	d507      	bpl.n	800cf96 <__smakebuf_r+0x1c>
 800cf86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	2301      	movs	r3, #1
 800cf90:	6163      	str	r3, [r4, #20]
 800cf92:	b003      	add	sp, #12
 800cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf96:	466a      	mov	r2, sp
 800cf98:	ab01      	add	r3, sp, #4
 800cf9a:	f7ff ffc9 	bl	800cf30 <__swhatbuf_r>
 800cf9e:	9f00      	ldr	r7, [sp, #0]
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7ff f87d 	bl	800c0a4 <_malloc_r>
 800cfaa:	b948      	cbnz	r0, 800cfc0 <__smakebuf_r+0x46>
 800cfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb0:	059a      	lsls	r2, r3, #22
 800cfb2:	d4ee      	bmi.n	800cf92 <__smakebuf_r+0x18>
 800cfb4:	f023 0303 	bic.w	r3, r3, #3
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7e2      	b.n	800cf86 <__smakebuf_r+0xc>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	6020      	str	r0, [r4, #0]
 800cfd0:	b15b      	cbz	r3, 800cfea <__smakebuf_r+0x70>
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfd8:	f000 f838 	bl	800d04c <_isatty_r>
 800cfdc:	b128      	cbz	r0, 800cfea <__smakebuf_r+0x70>
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	f043 0301 	orr.w	r3, r3, #1
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	431d      	orrs	r5, r3
 800cfee:	81a5      	strh	r5, [r4, #12]
 800cff0:	e7cf      	b.n	800cf92 <__smakebuf_r+0x18>

0800cff2 <memmove>:
 800cff2:	4288      	cmp	r0, r1
 800cff4:	b510      	push	{r4, lr}
 800cff6:	eb01 0402 	add.w	r4, r1, r2
 800cffa:	d902      	bls.n	800d002 <memmove+0x10>
 800cffc:	4284      	cmp	r4, r0
 800cffe:	4623      	mov	r3, r4
 800d000:	d807      	bhi.n	800d012 <memmove+0x20>
 800d002:	1e43      	subs	r3, r0, #1
 800d004:	42a1      	cmp	r1, r4
 800d006:	d008      	beq.n	800d01a <memmove+0x28>
 800d008:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d00c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d010:	e7f8      	b.n	800d004 <memmove+0x12>
 800d012:	4601      	mov	r1, r0
 800d014:	4402      	add	r2, r0
 800d016:	428a      	cmp	r2, r1
 800d018:	d100      	bne.n	800d01c <memmove+0x2a>
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d020:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d024:	e7f7      	b.n	800d016 <memmove+0x24>
	...

0800d028 <_fstat_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	2300      	movs	r3, #0
 800d02c:	4d06      	ldr	r5, [pc, #24]	@ (800d048 <_fstat_r+0x20>)
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f8 fc47 	bl	80058c8 <_fstat>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_fstat_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_fstat_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	200007e4 	.word	0x200007e4

0800d04c <_isatty_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	2300      	movs	r3, #0
 800d050:	4d05      	ldr	r5, [pc, #20]	@ (800d068 <_isatty_r+0x1c>)
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f8 fc45 	bl	80058e6 <_isatty>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_isatty_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_isatty_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	200007e4 	.word	0x200007e4

0800d06c <_sbrk_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	2300      	movs	r3, #0
 800d070:	4d05      	ldr	r5, [pc, #20]	@ (800d088 <_sbrk_r+0x1c>)
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	f7f8 fc4c 	bl	8005914 <_sbrk>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	d102      	bne.n	800d086 <_sbrk_r+0x1a>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	b103      	cbz	r3, 800d086 <_sbrk_r+0x1a>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	200007e4 	.word	0x200007e4

0800d08c <memcpy>:
 800d08c:	440a      	add	r2, r1
 800d08e:	4291      	cmp	r1, r2
 800d090:	f100 33ff 	add.w	r3, r0, #4294967295
 800d094:	d100      	bne.n	800d098 <memcpy+0xc>
 800d096:	4770      	bx	lr
 800d098:	b510      	push	{r4, lr}
 800d09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09e:	4291      	cmp	r1, r2
 800d0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a4:	d1f9      	bne.n	800d09a <memcpy+0xe>
 800d0a6:	bd10      	pop	{r4, pc}

0800d0a8 <__assert_func>:
 800d0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0aa:	4614      	mov	r4, r2
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4b09      	ldr	r3, [pc, #36]	@ (800d0d4 <__assert_func+0x2c>)
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68d8      	ldr	r0, [r3, #12]
 800d0b6:	b14c      	cbz	r4, 800d0cc <__assert_func+0x24>
 800d0b8:	4b07      	ldr	r3, [pc, #28]	@ (800d0d8 <__assert_func+0x30>)
 800d0ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0be:	9100      	str	r1, [sp, #0]
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	4906      	ldr	r1, [pc, #24]	@ (800d0dc <__assert_func+0x34>)
 800d0c4:	f000 f870 	bl	800d1a8 <fiprintf>
 800d0c8:	f000 f880 	bl	800d1cc <abort>
 800d0cc:	4b04      	ldr	r3, [pc, #16]	@ (800d0e0 <__assert_func+0x38>)
 800d0ce:	461c      	mov	r4, r3
 800d0d0:	e7f3      	b.n	800d0ba <__assert_func+0x12>
 800d0d2:	bf00      	nop
 800d0d4:	20000074 	.word	0x20000074
 800d0d8:	0800d90b 	.word	0x0800d90b
 800d0dc:	0800d918 	.word	0x0800d918
 800d0e0:	0800d946 	.word	0x0800d946

0800d0e4 <_calloc_r>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d0ea:	b934      	cbnz	r4, 800d0fa <_calloc_r+0x16>
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	f7fe ffd9 	bl	800c0a4 <_malloc_r>
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	b928      	cbnz	r0, 800d102 <_calloc_r+0x1e>
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	bd70      	pop	{r4, r5, r6, pc}
 800d0fa:	220c      	movs	r2, #12
 800d0fc:	2600      	movs	r6, #0
 800d0fe:	6002      	str	r2, [r0, #0]
 800d100:	e7f9      	b.n	800d0f6 <_calloc_r+0x12>
 800d102:	462a      	mov	r2, r5
 800d104:	4621      	mov	r1, r4
 800d106:	f7fe f84b 	bl	800b1a0 <memset>
 800d10a:	e7f4      	b.n	800d0f6 <_calloc_r+0x12>

0800d10c <__ascii_mbtowc>:
 800d10c:	b082      	sub	sp, #8
 800d10e:	b901      	cbnz	r1, 800d112 <__ascii_mbtowc+0x6>
 800d110:	a901      	add	r1, sp, #4
 800d112:	b142      	cbz	r2, 800d126 <__ascii_mbtowc+0x1a>
 800d114:	b14b      	cbz	r3, 800d12a <__ascii_mbtowc+0x1e>
 800d116:	7813      	ldrb	r3, [r2, #0]
 800d118:	600b      	str	r3, [r1, #0]
 800d11a:	7812      	ldrb	r2, [r2, #0]
 800d11c:	1e10      	subs	r0, r2, #0
 800d11e:	bf18      	it	ne
 800d120:	2001      	movne	r0, #1
 800d122:	b002      	add	sp, #8
 800d124:	4770      	bx	lr
 800d126:	4610      	mov	r0, r2
 800d128:	e7fb      	b.n	800d122 <__ascii_mbtowc+0x16>
 800d12a:	f06f 0001 	mvn.w	r0, #1
 800d12e:	e7f8      	b.n	800d122 <__ascii_mbtowc+0x16>

0800d130 <_realloc_r>:
 800d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	4607      	mov	r7, r0
 800d136:	4614      	mov	r4, r2
 800d138:	460d      	mov	r5, r1
 800d13a:	b921      	cbnz	r1, 800d146 <_realloc_r+0x16>
 800d13c:	4611      	mov	r1, r2
 800d13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d142:	f7fe bfaf 	b.w	800c0a4 <_malloc_r>
 800d146:	b92a      	cbnz	r2, 800d154 <_realloc_r+0x24>
 800d148:	f7fe ff3a 	bl	800bfc0 <_free_r>
 800d14c:	4625      	mov	r5, r4
 800d14e:	4628      	mov	r0, r5
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d154:	f000 f841 	bl	800d1da <_malloc_usable_size_r>
 800d158:	4284      	cmp	r4, r0
 800d15a:	4606      	mov	r6, r0
 800d15c:	d802      	bhi.n	800d164 <_realloc_r+0x34>
 800d15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d162:	d8f4      	bhi.n	800d14e <_realloc_r+0x1e>
 800d164:	4621      	mov	r1, r4
 800d166:	4638      	mov	r0, r7
 800d168:	f7fe ff9c 	bl	800c0a4 <_malloc_r>
 800d16c:	4680      	mov	r8, r0
 800d16e:	b908      	cbnz	r0, 800d174 <_realloc_r+0x44>
 800d170:	4645      	mov	r5, r8
 800d172:	e7ec      	b.n	800d14e <_realloc_r+0x1e>
 800d174:	42b4      	cmp	r4, r6
 800d176:	4622      	mov	r2, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	bf28      	it	cs
 800d17c:	4632      	movcs	r2, r6
 800d17e:	f7ff ff85 	bl	800d08c <memcpy>
 800d182:	4629      	mov	r1, r5
 800d184:	4638      	mov	r0, r7
 800d186:	f7fe ff1b 	bl	800bfc0 <_free_r>
 800d18a:	e7f1      	b.n	800d170 <_realloc_r+0x40>

0800d18c <__ascii_wctomb>:
 800d18c:	4603      	mov	r3, r0
 800d18e:	4608      	mov	r0, r1
 800d190:	b141      	cbz	r1, 800d1a4 <__ascii_wctomb+0x18>
 800d192:	2aff      	cmp	r2, #255	@ 0xff
 800d194:	d904      	bls.n	800d1a0 <__ascii_wctomb+0x14>
 800d196:	228a      	movs	r2, #138	@ 0x8a
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	4770      	bx	lr
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	700a      	strb	r2, [r1, #0]
 800d1a4:	4770      	bx	lr
	...

0800d1a8 <fiprintf>:
 800d1a8:	b40e      	push	{r1, r2, r3}
 800d1aa:	b503      	push	{r0, r1, lr}
 800d1ac:	4601      	mov	r1, r0
 800d1ae:	ab03      	add	r3, sp, #12
 800d1b0:	4805      	ldr	r0, [pc, #20]	@ (800d1c8 <fiprintf+0x20>)
 800d1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b6:	6800      	ldr	r0, [r0, #0]
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	f7ff fcf9 	bl	800cbb0 <_vfiprintf_r>
 800d1be:	b002      	add	sp, #8
 800d1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1c4:	b003      	add	sp, #12
 800d1c6:	4770      	bx	lr
 800d1c8:	20000074 	.word	0x20000074

0800d1cc <abort>:
 800d1cc:	2006      	movs	r0, #6
 800d1ce:	b508      	push	{r3, lr}
 800d1d0:	f000 f834 	bl	800d23c <raise>
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	f7f8 fb28 	bl	800582a <_exit>

0800d1da <_malloc_usable_size_r>:
 800d1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1de:	1f18      	subs	r0, r3, #4
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bfbc      	itt	lt
 800d1e4:	580b      	ldrlt	r3, [r1, r0]
 800d1e6:	18c0      	addlt	r0, r0, r3
 800d1e8:	4770      	bx	lr

0800d1ea <_raise_r>:
 800d1ea:	291f      	cmp	r1, #31
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	d904      	bls.n	800d1fe <_raise_r+0x14>
 800d1f4:	2316      	movs	r3, #22
 800d1f6:	6003      	str	r3, [r0, #0]
 800d1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fc:	bd38      	pop	{r3, r4, r5, pc}
 800d1fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d200:	b112      	cbz	r2, 800d208 <_raise_r+0x1e>
 800d202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d206:	b94b      	cbnz	r3, 800d21c <_raise_r+0x32>
 800d208:	4628      	mov	r0, r5
 800d20a:	f000 f831 	bl	800d270 <_getpid_r>
 800d20e:	4622      	mov	r2, r4
 800d210:	4601      	mov	r1, r0
 800d212:	4628      	mov	r0, r5
 800d214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d218:	f000 b818 	b.w	800d24c <_kill_r>
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d00a      	beq.n	800d236 <_raise_r+0x4c>
 800d220:	1c59      	adds	r1, r3, #1
 800d222:	d103      	bne.n	800d22c <_raise_r+0x42>
 800d224:	2316      	movs	r3, #22
 800d226:	6003      	str	r3, [r0, #0]
 800d228:	2001      	movs	r0, #1
 800d22a:	e7e7      	b.n	800d1fc <_raise_r+0x12>
 800d22c:	2100      	movs	r1, #0
 800d22e:	4620      	mov	r0, r4
 800d230:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d234:	4798      	blx	r3
 800d236:	2000      	movs	r0, #0
 800d238:	e7e0      	b.n	800d1fc <_raise_r+0x12>
	...

0800d23c <raise>:
 800d23c:	4b02      	ldr	r3, [pc, #8]	@ (800d248 <raise+0xc>)
 800d23e:	4601      	mov	r1, r0
 800d240:	6818      	ldr	r0, [r3, #0]
 800d242:	f7ff bfd2 	b.w	800d1ea <_raise_r>
 800d246:	bf00      	nop
 800d248:	20000074 	.word	0x20000074

0800d24c <_kill_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	2300      	movs	r3, #0
 800d250:	4d06      	ldr	r5, [pc, #24]	@ (800d26c <_kill_r+0x20>)
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	4611      	mov	r1, r2
 800d258:	602b      	str	r3, [r5, #0]
 800d25a:	f7f8 fad6 	bl	800580a <_kill>
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	d102      	bne.n	800d268 <_kill_r+0x1c>
 800d262:	682b      	ldr	r3, [r5, #0]
 800d264:	b103      	cbz	r3, 800d268 <_kill_r+0x1c>
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	bd38      	pop	{r3, r4, r5, pc}
 800d26a:	bf00      	nop
 800d26c:	200007e4 	.word	0x200007e4

0800d270 <_getpid_r>:
 800d270:	f7f8 bac4 	b.w	80057fc <_getpid>

0800d274 <_init>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	bf00      	nop
 800d278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27a:	bc08      	pop	{r3}
 800d27c:	469e      	mov	lr, r3
 800d27e:	4770      	bx	lr

0800d280 <_fini>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr
