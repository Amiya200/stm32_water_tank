
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c75c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800c870  0800c870  0000d870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0dc  0800d0dc  0000f230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d0dc  0800d0dc  0000e0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e4  0800d0e4  0000f230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e4  0800d0e4  0000e0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0e8  0800d0e8  0000e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800d0ec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000230  0800d31c  0000f230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  0800d31c  0000f7dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195f9  00000000  00000000  0000f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004574  00000000  00000000  00028852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001379  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c75f  00000000  00000000  0002fa21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f45e  00000000  00000000  0004c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099587  00000000  00000000  0006b5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a64  00000000  00000000  00104ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c854 	.word	0x0800c854

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800c854 	.word	0x0800c854

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b98c 	b.w	80013b4 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	9d08      	ldr	r5, [sp, #32]
 80010ba:	468e      	mov	lr, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d14a      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	d962      	bls.n	8001190 <__udivmoddi4+0xdc>
 80010ca:	fab2 f682 	clz	r6, r2
 80010ce:	b14e      	cbz	r6, 80010e4 <__udivmoddi4+0x30>
 80010d0:	f1c6 0320 	rsb	r3, r6, #32
 80010d4:	fa01 f806 	lsl.w	r8, r1, r6
 80010d8:	fa20 f303 	lsr.w	r3, r0, r3
 80010dc:	40b7      	lsls	r7, r6
 80010de:	ea43 0808 	orr.w	r8, r3, r8
 80010e2:	40b4      	lsls	r4, r6
 80010e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80010f4:	fb01 f20c 	mul.w	r2, r1, ip
 80010f8:	0c23      	lsrs	r3, r4, #16
 80010fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010fe:	429a      	cmp	r2, r3
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x62>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f101 30ff 	add.w	r0, r1, #4294967295
 8001108:	f080 80eb 	bcs.w	80012e2 <__udivmoddi4+0x22e>
 800110c:	429a      	cmp	r2, r3
 800110e:	f240 80e8 	bls.w	80012e2 <__udivmoddi4+0x22e>
 8001112:	3902      	subs	r1, #2
 8001114:	443b      	add	r3, r7
 8001116:	1a9a      	subs	r2, r3, r2
 8001118:	fbb2 f0fe 	udiv	r0, r2, lr
 800111c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001120:	fb00 fc0c 	mul.w	ip, r0, ip
 8001124:	b2a3      	uxth	r3, r4
 8001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800112a:	459c      	cmp	ip, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	f080 80d7 	bcs.w	80012e6 <__udivmoddi4+0x232>
 8001138:	459c      	cmp	ip, r3
 800113a:	f240 80d4 	bls.w	80012e6 <__udivmoddi4+0x232>
 800113e:	443b      	add	r3, r7
 8001140:	3802      	subs	r0, #2
 8001142:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001146:	2100      	movs	r1, #0
 8001148:	eba3 030c 	sub.w	r3, r3, ip
 800114c:	b11d      	cbz	r5, 8001156 <__udivmoddi4+0xa2>
 800114e:	2200      	movs	r2, #0
 8001150:	40f3      	lsrs	r3, r6
 8001152:	e9c5 3200 	strd	r3, r2, [r5]
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d905      	bls.n	800116a <__udivmoddi4+0xb6>
 800115e:	b10d      	cbz	r5, 8001164 <__udivmoddi4+0xb0>
 8001160:	e9c5 0100 	strd	r0, r1, [r5]
 8001164:	2100      	movs	r1, #0
 8001166:	4608      	mov	r0, r1
 8001168:	e7f5      	b.n	8001156 <__udivmoddi4+0xa2>
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d146      	bne.n	8001200 <__udivmoddi4+0x14c>
 8001172:	4573      	cmp	r3, lr
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0xc8>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 8108 	bhi.w	800138c <__udivmoddi4+0x2d8>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001182:	2001      	movs	r0, #1
 8001184:	4690      	mov	r8, r2
 8001186:	2d00      	cmp	r5, #0
 8001188:	d0e5      	beq.n	8001156 <__udivmoddi4+0xa2>
 800118a:	e9c5 4800 	strd	r4, r8, [r5]
 800118e:	e7e2      	b.n	8001156 <__udivmoddi4+0xa2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	f000 8091 	beq.w	80012b8 <__udivmoddi4+0x204>
 8001196:	fab2 f682 	clz	r6, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	f040 80a5 	bne.w	80012ea <__udivmoddi4+0x236>
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	2101      	movs	r1, #1
 80011a4:	0c03      	lsrs	r3, r0, #16
 80011a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	b2bc      	uxth	r4, r7
 80011ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80011b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	fb04 f20c 	mul.w	r2, r4, ip
 80011be:	429a      	cmp	r2, r3
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x11e>
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x11c>
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f200 80e3 	bhi.w	8001396 <__udivmoddi4+0x2e2>
 80011d0:	46c4      	mov	ip, r8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80011d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80011dc:	fb02 f404 	mul.w	r4, r2, r4
 80011e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d907      	bls.n	80011f8 <__udivmoddi4+0x144>
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x142>
 80011f0:	429c      	cmp	r4, r3
 80011f2:	f200 80cd 	bhi.w	8001390 <__udivmoddi4+0x2dc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011fe:	e7a5      	b.n	800114c <__udivmoddi4+0x98>
 8001200:	f1c1 0620 	rsb	r6, r1, #32
 8001204:	408b      	lsls	r3, r1
 8001206:	fa22 f706 	lsr.w	r7, r2, r6
 800120a:	431f      	orrs	r7, r3
 800120c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001210:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001214:	fbba f8f9 	udiv	r8, sl, r9
 8001218:	fa0e fe01 	lsl.w	lr, lr, r1
 800121c:	fa20 f306 	lsr.w	r3, r0, r6
 8001220:	fb09 aa18 	mls	sl, r9, r8, sl
 8001224:	fa1f fc87 	uxth.w	ip, r7
 8001228:	ea43 030e 	orr.w	r3, r3, lr
 800122c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001230:	fb08 f00c 	mul.w	r0, r8, ip
 8001234:	0c1c      	lsrs	r4, r3, #16
 8001236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800123a:	42a0      	cmp	r0, r4
 800123c:	fa02 f201 	lsl.w	r2, r2, r1
 8001240:	d90a      	bls.n	8001258 <__udivmoddi4+0x1a4>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f108 3aff 	add.w	sl, r8, #4294967295
 8001248:	f080 809e 	bcs.w	8001388 <__udivmoddi4+0x2d4>
 800124c:	42a0      	cmp	r0, r4
 800124e:	f240 809b 	bls.w	8001388 <__udivmoddi4+0x2d4>
 8001252:	f1a8 0802 	sub.w	r8, r8, #2
 8001256:	443c      	add	r4, r7
 8001258:	1a24      	subs	r4, r4, r0
 800125a:	b298      	uxth	r0, r3
 800125c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001260:	fb09 4413 	mls	r4, r9, r3, r4
 8001264:	fb03 fc0c 	mul.w	ip, r3, ip
 8001268:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800126c:	45a4      	cmp	ip, r4
 800126e:	d909      	bls.n	8001284 <__udivmoddi4+0x1d0>
 8001270:	193c      	adds	r4, r7, r4
 8001272:	f103 30ff 	add.w	r0, r3, #4294967295
 8001276:	f080 8085 	bcs.w	8001384 <__udivmoddi4+0x2d0>
 800127a:	45a4      	cmp	ip, r4
 800127c:	f240 8082 	bls.w	8001384 <__udivmoddi4+0x2d0>
 8001280:	3b02      	subs	r3, #2
 8001282:	443c      	add	r4, r7
 8001284:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001288:	eba4 040c 	sub.w	r4, r4, ip
 800128c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001290:	4564      	cmp	r4, ip
 8001292:	4643      	mov	r3, r8
 8001294:	46e1      	mov	r9, ip
 8001296:	d364      	bcc.n	8001362 <__udivmoddi4+0x2ae>
 8001298:	d061      	beq.n	800135e <__udivmoddi4+0x2aa>
 800129a:	b15d      	cbz	r5, 80012b4 <__udivmoddi4+0x200>
 800129c:	ebbe 0203 	subs.w	r2, lr, r3
 80012a0:	eb64 0409 	sbc.w	r4, r4, r9
 80012a4:	fa04 f606 	lsl.w	r6, r4, r6
 80012a8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	40cc      	lsrs	r4, r1
 80012b0:	e9c5 6400 	strd	r6, r4, [r5]
 80012b4:	2100      	movs	r1, #0
 80012b6:	e74e      	b.n	8001156 <__udivmoddi4+0xa2>
 80012b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80012bc:	0c01      	lsrs	r1, r0, #16
 80012be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012c2:	b280      	uxth	r0, r0
 80012c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012c8:	463b      	mov	r3, r7
 80012ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80012ce:	4638      	mov	r0, r7
 80012d0:	463c      	mov	r4, r7
 80012d2:	46b8      	mov	r8, r7
 80012d4:	46be      	mov	lr, r7
 80012d6:	2620      	movs	r6, #32
 80012d8:	eba2 0208 	sub.w	r2, r2, r8
 80012dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e0:	e765      	b.n	80011ae <__udivmoddi4+0xfa>
 80012e2:	4601      	mov	r1, r0
 80012e4:	e717      	b.n	8001116 <__udivmoddi4+0x62>
 80012e6:	4610      	mov	r0, r2
 80012e8:	e72b      	b.n	8001142 <__udivmoddi4+0x8e>
 80012ea:	f1c6 0120 	rsb	r1, r6, #32
 80012ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80012f2:	40b7      	lsls	r7, r6
 80012f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	ea41 010e 	orr.w	r1, r1, lr
 8001300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001304:	fbbc f8fe 	udiv	r8, ip, lr
 8001308:	b2bc      	uxth	r4, r7
 800130a:	fb0e cc18 	mls	ip, lr, r8, ip
 800130e:	fb08 f904 	mul.w	r9, r8, r4
 8001312:	0c0a      	lsrs	r2, r1, #16
 8001314:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001318:	40b0      	lsls	r0, r6
 800131a:	4591      	cmp	r9, r2
 800131c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001320:	b280      	uxth	r0, r0
 8001322:	d93e      	bls.n	80013a2 <__udivmoddi4+0x2ee>
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	f108 3cff 	add.w	ip, r8, #4294967295
 800132a:	d201      	bcs.n	8001330 <__udivmoddi4+0x27c>
 800132c:	4591      	cmp	r9, r2
 800132e:	d81f      	bhi.n	8001370 <__udivmoddi4+0x2bc>
 8001330:	eba2 0209 	sub.w	r2, r2, r9
 8001334:	fbb2 f9fe 	udiv	r9, r2, lr
 8001338:	fb09 f804 	mul.w	r8, r9, r4
 800133c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001340:	b28a      	uxth	r2, r1
 8001342:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001346:	4542      	cmp	r2, r8
 8001348:	d229      	bcs.n	800139e <__udivmoddi4+0x2ea>
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001350:	d2c2      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001352:	4542      	cmp	r2, r8
 8001354:	d2c0      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001356:	f1a9 0102 	sub.w	r1, r9, #2
 800135a:	443a      	add	r2, r7
 800135c:	e7bc      	b.n	80012d8 <__udivmoddi4+0x224>
 800135e:	45c6      	cmp	lr, r8
 8001360:	d29b      	bcs.n	800129a <__udivmoddi4+0x1e6>
 8001362:	ebb8 0302 	subs.w	r3, r8, r2
 8001366:	eb6c 0c07 	sbc.w	ip, ip, r7
 800136a:	3801      	subs	r0, #1
 800136c:	46e1      	mov	r9, ip
 800136e:	e794      	b.n	800129a <__udivmoddi4+0x1e6>
 8001370:	eba7 0909 	sub.w	r9, r7, r9
 8001374:	444a      	add	r2, r9
 8001376:	fbb2 f9fe 	udiv	r9, r2, lr
 800137a:	f1a8 0c02 	sub.w	ip, r8, #2
 800137e:	fb09 f804 	mul.w	r8, r9, r4
 8001382:	e7db      	b.n	800133c <__udivmoddi4+0x288>
 8001384:	4603      	mov	r3, r0
 8001386:	e77d      	b.n	8001284 <__udivmoddi4+0x1d0>
 8001388:	46d0      	mov	r8, sl
 800138a:	e765      	b.n	8001258 <__udivmoddi4+0x1a4>
 800138c:	4608      	mov	r0, r1
 800138e:	e6fa      	b.n	8001186 <__udivmoddi4+0xd2>
 8001390:	443b      	add	r3, r7
 8001392:	3a02      	subs	r2, #2
 8001394:	e730      	b.n	80011f8 <__udivmoddi4+0x144>
 8001396:	f1ac 0c02 	sub.w	ip, ip, #2
 800139a:	443b      	add	r3, r7
 800139c:	e719      	b.n	80011d2 <__udivmoddi4+0x11e>
 800139e:	4649      	mov	r1, r9
 80013a0:	e79a      	b.n	80012d8 <__udivmoddi4+0x224>
 80013a2:	eba2 0209 	sub.w	r2, r2, r9
 80013a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80013aa:	46c4      	mov	ip, r8
 80013ac:	fb09 f804 	mul.w	r8, r9, r4
 80013b0:	e7c4      	b.n	800133c <__udivmoddi4+0x288>
 80013b2:	bf00      	nop

080013b4 <__aeabi_idiv0>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013d8:	2304      	movs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fa7e 	bl	80058e8 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	76fb      	strb	r3, [r7, #27]
 80013f4:	e01c      	b.n	8001430 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 ffc0 	bl	8005380 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f893 	bl	8005534 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 f994 	bl	8005740 <HAL_ADC_GetValue>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 f859 	bl	80054dc <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	3301      	adds	r3, #1
 800142e:	76fb      	strb	r3, [r7, #27]
 8001430:	7efa      	ldrb	r2, [r7, #27]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_ui2f>
 800143e:	4604      	mov	r4, r0
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbe4 	bl	8000c10 <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fce7 	bl	8000e20 <__aeabi_fdiv>
 8001452:	4603      	mov	r3, r0
 8001454:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <ReadAverageVoltage+0xc0>)
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <ReadAverageVoltage+0xc4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000254 	.word	0x20000254
 8001478:	40533333 	.word	0x40533333
 800147c:	457ff000 	.word	0x457ff000

08001480 <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <ACS712_Init+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800148e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001492:	f003 fe79 	bl	8005188 <HAL_Delay>
    ACS712_CalibrateZero();
 8001496:	f000 f807 	bl	80014a8 <ACS712_CalibrateZero>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000254 	.word	0x20000254

080014a8 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 80014ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b2:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	e00d      	b.n	80014dc <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff ff78 	bl	80013b8 <ReadAverageVoltage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff faeb 	bl	8000aa8 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	3301      	adds	r3, #1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ed      	bcc.n	80014c0 <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb92 	bl	8000c10 <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fc95 	bl	8000e20 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <ACS712_CalibrateZero+0x60>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000258 	.word	0x20000258

0800150c <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 8001512:	210a      	movs	r1, #10
 8001514:	2007      	movs	r0, #7
 8001516:	f7ff ff4f 	bl	80013b8 <ReadAverageVoltage>
 800151a:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <ACS712_ReadCurrent+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff fabe 	bl	8000aa4 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <ACS712_ReadCurrent+0x88>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc77 	bl	8000e20 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <ACS712_ReadCurrent+0x8c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd58 	bl	8000ff4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <ACS712_ReadCurrent+0x94>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 8001560:	4910      	ldr	r1, [pc, #64]	@ (80015a4 <ACS712_ReadCurrent+0x98>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fba8 	bl	8000cb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fa9b 	bl	8000aa8 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001578:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <ACS712_ReadCurrent+0x90>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <ACS712_ReadCurrent+0x9c>)
 8001580:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000258 	.word	0x20000258
 8001594:	3d872b02 	.word	0x3d872b02
 8001598:	3cf5c28f 	.word	0x3cf5c28f
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	3f333333 	.word	0x3f333333
 80015a4:	3e99999a 	.word	0x3e99999a
 80015a8:	2000024c 	.word	0x2000024c

080015ac <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 80015b2:	2105      	movs	r1, #5
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff feff 	bl	80013b8 <ReadAverageVoltage>
 80015ba:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <Voltage_ReadInput+0x5c>)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Voltage_ReadInput+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4910      	ldr	r1, [pc, #64]	@ (8001610 <Voltage_ReadInput+0x64>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb72 	bl	8000cb8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <Voltage_ReadInput+0x68>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff fb6c 	bl	8000cb8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fa5f 	bl	8000aa8 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <Voltage_ReadInput+0x6c>)
 80015f8:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <Voltage_ReadInput+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	3f58f2fb 	.word	0x3f58f2fb
 800160c:	20000260 	.word	0x20000260
 8001610:	3f333333 	.word	0x3f333333
 8001614:	3e99999a 	.word	0x3e99999a
 8001618:	20000250 	.word	0x20000250

0800161c <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 8001620:	f7ff ff74 	bl	800150c <ACS712_ReadCurrent>
 8001624:	4603      	mov	r3, r0
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <ACS712_Update+0x1c>)
 8001628:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 800162a:	f7ff ffbf 	bl	80015ac <Voltage_ReadInput>
 800162e:	4603      	mov	r3, r0
 8001630:	4a02      	ldr	r2, [pc, #8]	@ (800163c <ACS712_Update+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250

08001640 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800165e:	2306      	movs	r3, #6
 8001660:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f004 f93d 	bl	80058e8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <readChannelVoltage+0x3a>
        return 0.0f;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e029      	b.n	80016ce <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f003 fe80 	bl	8005380 <HAL_ADC_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <readChannelVoltage+0x4c>
        return 0.0f;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e020      	b.n	80016ce <readChannelVoltage+0x8e>

    float v = 0.0f;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001692:	210a      	movs	r1, #10
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f003 ff4d 	bl	8005534 <HAL_ADC_PollForConversion>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 f84d 	bl	8005740 <HAL_ADC_GetValue>
 80016a6:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_ui2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <readChannelVoltage+0x98>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb00 	bl	8000cb8 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <readChannelVoltage+0x9c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbaf 	bl	8000e20 <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f003 ff08 	bl	80054dc <HAL_ADC_Stop>
    return v;
 80016cc:	69fb      	ldr	r3, [r7, #28]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40533333 	.word	0x40533333
 80016dc:	457ff000 	.word	0x457ff000

080016e0 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 fa91 	bl	8005c10 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Init+0x18>
        Error_Handler();
 80016f4:	f001 f94e 	bl	8002994 <Error_Handler>
    }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800171a:	e182      	b.n	8001a22 <ADC_ReadAllChannels+0x322>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001720:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <ADC_ReadAllChannels+0x284>)
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff89 	bl	8001640 <readChannelVoltage>
 800172e:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8001730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc4e 	bl	8000fe0 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 800174a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800174e:	498e      	ldr	r1, [pc, #568]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001756:	e01a      	b.n	800178e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8001758:	498c      	ldr	r1, [pc, #560]	@ (800198c <ADC_ReadAllChannels+0x28c>)
 800175a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175c:	f7ff faac 	bl	8000cb8 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	461d      	mov	r5, r3
 8001764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001768:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	4988      	ldr	r1, [pc, #544]	@ (8001990 <ADC_ReadAllChannels+0x290>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faa1 	bl	8000cb8 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff f992 	bl	8000aa8 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800178a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 800178e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001792:	4a7d      	ldr	r2, [pc, #500]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 800179a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800179e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017a0:	f7ff fc28 	bl	8000ff4 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 80017c0:	4974      	ldr	r1, [pc, #464]	@ (8001994 <ADC_ReadAllChannels+0x294>)
 80017c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4973      	ldr	r1, [pc, #460]	@ (8001998 <ADC_ReadAllChannels+0x298>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb27 	bl	8000e20 <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc33 	bl	8001044 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 80017e8:	2301      	movs	r3, #1
 80017ea:	461c      	mov	r4, r3
 80017ec:	496b      	ldr	r1, [pc, #428]	@ (800199c <ADC_ReadAllChannels+0x29c>)
 80017ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f0:	f7ff fc14 	bl	800101c <__aeabi_fcmpge>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <ADC_ReadAllChannels+0xfe>
 80017fa:	2300      	movs	r3, #0
 80017fc:	461c      	mov	r4, r3
 80017fe:	b2e2      	uxtb	r2, r4
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	4611      	mov	r1, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001814:	4962      	ldr	r1, [pc, #392]	@ (80019a0 <ADC_ReadAllChannels+0x2a0>)
 8001816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4619      	mov	r1, r3
 8001828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001834:	495c      	ldr	r1, [pc, #368]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fbfa 	bl	8001030 <__aeabi_fcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	4955      	ldr	r1, [pc, #340]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d168      	bne.n	8001932 <ADC_ReadAllChannels+0x232>
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f7ff fbd9 	bl	800101c <__aeabi_fcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d060      	beq.n	8001932 <ADC_ReadAllChannels+0x232>
            s_level_flags[i] = 1;
 8001870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001876:	2101      	movs	r1, #1
 8001878:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 800187a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187e:	2b04      	cmp	r3, #4
 8001880:	d82a      	bhi.n	80018d8 <ADC_ReadAllChannels+0x1d8>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ADC_ReadAllChannels+0x188>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018c1 	.word	0x080018c1
 8001898:	080018cd 	.word	0x080018cd
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 800189c:	4a44      	ldr	r2, [pc, #272]	@ (80019b0 <ADC_ReadAllChannels+0x2b0>)
 800189e:	2110      	movs	r1, #16
 80018a0:	4844      	ldr	r0, [pc, #272]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018a2:	f008 fe5f 	bl	800a564 <sniprintf>
 80018a6:	e01b      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <ADC_ReadAllChannels+0x2b8>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4841      	ldr	r0, [pc, #260]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ae:	f008 fe59 	bl	800a564 <sniprintf>
 80018b2:	e015      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <ADC_ReadAllChannels+0x2bc>)
 80018b6:	2110      	movs	r1, #16
 80018b8:	483e      	ldr	r0, [pc, #248]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ba:	f008 fe53 	bl	800a564 <sniprintf>
 80018be:	e00f      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 80018c0:	4a3f      	ldr	r2, [pc, #252]	@ (80019c0 <ADC_ReadAllChannels+0x2c0>)
 80018c2:	2110      	movs	r1, #16
 80018c4:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018c6:	f008 fe4d 	bl	800a564 <sniprintf>
 80018ca:	e009      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 80018cc:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <ADC_ReadAllChannels+0x2c4>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	4838      	ldr	r0, [pc, #224]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018d2:	f008 fe47 	bl	800a564 <sniprintf>
 80018d6:	e003      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	bf00      	nop
            }
            motorStatus = 1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <ADC_ReadAllChannels+0x2c8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 80018e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ea:	4a38      	ldr	r2, [pc, #224]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d02e      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc31 	bl	8000164 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	f1c3 021f 	rsb	r2, r3, #31
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 800190e:	4618      	mov	r0, r3
 8001910:	f008 ff3e 	bl	800a790 <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc23 	bl	8000164 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	f1c3 021f 	rsb	r2, r3, #31
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4929      	ldr	r1, [pc, #164]	@ (80019d0 <ADC_ReadAllChannels+0x2d0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f008 ff30 	bl	800a790 <strncat>
            if (dataPacketTx[0]) {
 8001930:	e011      	b.n	8001956 <ADC_ReadAllChannels+0x256>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8001932:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <ADC_ReadAllChannels+0x2d4>)
 8001940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001942:	f7ff fb57 	bl	8000ff4 <__aeabi_fcmplt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
            s_level_flags[i] = 0;
 800194c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001952:	2100      	movs	r1, #0
 8001954:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001956:	4914      	ldr	r1, [pc, #80]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800195a:	f7ff fb4b 	bl	8000ff4 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d039      	beq.n	80019d8 <ADC_ReadAllChannels+0x2d8>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8001964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d038      	beq.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	3201      	adds	r2, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800197e:	54d1      	strb	r1, [r2, r3]
 8001980:	e02f      	b.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001982:	bf00      	nop
 8001984:	0800ccc4 	.word	0x0800ccc4
 8001988:	2000027c 	.word	0x2000027c
 800198c:	3e99999a 	.word	0x3e99999a
 8001990:	3f333333 	.word	0x3f333333
 8001994:	457ff000 	.word	0x457ff000
 8001998:	40533333 	.word	0x40533333
 800199c:	404ccccd 	.word	0x404ccccd
 80019a0:	20000264 	.word	0x20000264
 80019a4:	200002a4 	.word	0x200002a4
 80019a8:	3d4ccccd 	.word	0x3d4ccccd
 80019ac:	20000294 	.word	0x20000294
 80019b0:	0800c870 	.word	0x0800c870
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	0800c878 	.word	0x0800c878
 80019bc:	0800c880 	.word	0x0800c880
 80019c0:	0800c888 	.word	0x0800c888
 80019c4:	0800c890 	.word	0x0800c890
 80019c8:	20000570 	.word	0x20000570
 80019cc:	2000029c 	.word	0x2000029c
 80019d0:	0800c898 	.word	0x0800c898
 80019d4:	3f666666 	.word	0x3f666666
        } else {
            s_low_counts[i] = 0;
 80019d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019dc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <ADC_ReadAllChannels+0x360>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <ADC_ReadAllChannels+0x318>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10d      	bne.n	8001a18 <ADC_ReadAllChannels+0x318>
 80019fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d907      	bls.n	8001a18 <ADC_ReadAllChannels+0x318>
                motorStatus = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8001a0e:	2206      	movs	r2, #6
 8001a10:	2100      	movs	r1, #0
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a14:	f008 feb4 	bl	800a780 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001a18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	f67f ae78 	bls.w	800171c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8001a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb90 	bl	8000164 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fbe3 	bl	8002218 <LoRa_SendPacket>
    }
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	200005c0 	.word	0x200005c0
 8001a64:	20000570 	.word	0x20000570

08001a68 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001a68:	b490      	push	{r4, r7}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	717b      	strb	r3, [r7, #5]
 8001a82:	4613      	mov	r3, r2
 8001a84:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <map_nibble_ctrl+0x40>
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	e000      	b.n	8001aaa <map_nibble_ctrl+0x42>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <map_nibble_ctrl+0x56>
 8001aba:	2204      	movs	r2, #4
 8001abc:	e000      	b.n	8001ac0 <map_nibble_ctrl+0x58>
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	73fb      	strb	r3, [r7, #15]
    return b;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <expander_write>:

static void expander_write(uint8_t data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	214e      	movs	r1, #78	@ 0x4e
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <expander_write+0x24>)
 8001b06:	f004 fd59 	bl	80065bc <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000350 	.word	0x20000350

08001b18 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ffe0 	bl	8001af0 <expander_write>
    HAL_Delay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 fb29 	bl	8005188 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffd6 	bl	8001af0 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f003 fb1f 	bl	8005188 <HAL_Delay>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71bb      	strb	r3, [r7, #6]
 8001b60:	4613      	mov	r3, r2
 8001b62:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	79b9      	ldrb	r1, [r7, #6]
 8001b68:	79f8      	ldrb	r0, [r7, #7]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f7ff ff7c 	bl	8001a68 <map_nibble_ctrl>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffba 	bl	8001af0 <expander_write>
    pulse_enable(x);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffca 	bl	8001b18 <pulse_enable>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001b92:	2308      	movs	r3, #8
 8001b94:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffa9 	bl	8001af0 <expander_write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffc8 	bl	8001b52 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc0 	bl	8001b52 <write4bits>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f023 030f 	bic.w	r3, r3, #15
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffae 	bl	8001b52 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffa6 	bl	8001b52 <write4bits>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <lcd_clear>:

void lcd_clear(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff ffc7 	bl	8001ba6 <lcd_send_cmd>
    HAL_Delay(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f003 fab5 	bl	8005188 <HAL_Delay>
    lcd_send_cmd(0x80);
 8001c1e:	2080      	movs	r0, #128	@ 0x80
 8001c20:	f7ff ffc1 	bl	8001ba6 <lcd_send_cmd>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d901      	bls.n	8001c42 <lcd_put_cur+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <lcd_put_cur+0x40>)
 8001c46:	5cd2      	ldrb	r2, [r2, r3]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa4 	bl	8001ba6 <lcd_send_cmd>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800ccdc 	.word	0x0800ccdc

08001c6c <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001c74:	e006      	b.n	8001c84 <lcd_send_string+0x18>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffab 	bl	8001bda <lcd_send_data>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f4      	bne.n	8001c76 <lcd_send_string+0xa>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <lcd_init>:

void lcd_init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001c9a:	2032      	movs	r0, #50	@ 0x32
 8001c9c:	f003 fa74 	bl	8005188 <HAL_Delay>
    lcd_backlight_on();
 8001ca0:	f7ff ff74 	bl	8001b8c <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2030      	movs	r0, #48	@ 0x30
 8001caa:	f7ff ff52 	bl	8001b52 <write4bits>
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f003 fa6a 	bl	8005188 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2030      	movs	r0, #48	@ 0x30
 8001cba:	f7ff ff4a 	bl	8001b52 <write4bits>
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f003 fa62 	bl	8005188 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2030      	movs	r0, #48	@ 0x30
 8001cca:	f7ff ff42 	bl	8001b52 <write4bits>
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f003 fa5a 	bl	8005188 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff ff3a 	bl	8001b52 <write4bits>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f003 fa52 	bl	8005188 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001ce4:	2028      	movs	r0, #40	@ 0x28
 8001ce6:	f7ff ff5e 	bl	8001ba6 <lcd_send_cmd>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f003 fa4c 	bl	8005188 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7ff ff58 	bl	8001ba6 <lcd_send_cmd>
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f003 fa46 	bl	8005188 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001cfc:	f7ff ff87 	bl	8001c0e <lcd_clear>
 8001d00:	2002      	movs	r0, #2
 8001d02:	f003 fa41 	bl	8005188 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001d06:	2006      	movs	r0, #6
 8001d08:	f7ff ff4d 	bl	8001ba6 <lcd_send_cmd>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f003 fa3b 	bl	8005188 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001d12:	200c      	movs	r0, #12
 8001d14:	f7ff ff47 	bl	8001ba6 <lcd_send_cmd>
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f003 fa35 	bl	8005188 <HAL_Delay>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f003 fa25 	bl	8005174 <HAL_GetTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <led_write+0x30>)
 8001d44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <led_write+0x34>)
 8001d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f004 fabd 	bl	80062d2 <HAL_GPIO_WritePin>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000010 	.word	0x20000010

08001d68 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffda 	bl	8001d30 <led_write>
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffcc 	bl	8001d30 <led_write>
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LED_Init>:

void LED_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001da6:	2210      	movs	r2, #16
 8001da8:	2100      	movs	r1, #0
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <LED_Init+0x60>)
 8001dac:	f008 fce8 	bl	800a780 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8001db0:	2204      	movs	r2, #4
 8001db2:	2100      	movs	r1, #0
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <LED_Init+0x64>)
 8001db6:	f008 fce3 	bl	800a780 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001dba:	2210      	movs	r2, #16
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <LED_Init+0x68>)
 8001dc0:	f008 fcde 	bl	800a780 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e012      	b.n	8001df0 <LED_Init+0x50>
        led_off((LedColor)i);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffd8 	bl	8001d84 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LED_Init+0x60>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <LED_Init+0x60>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	dde9      	ble.n	8001dca <LED_Init+0x2a>
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200002cc 	.word	0x200002cc
 8001e04:	200002dc 	.word	0x200002dc
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001e12:	f7ff ff86 	bl	8001d22 <now_ms>
 8001e16:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e064      	b.n	8001ee8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <LED_Task+0xec>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LED_Task+0x24>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00b      	beq.n	8001e46 <LED_Task+0x3a>
 8001e2e:	e015      	b.n	8001e5c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <LED_Task+0xf0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffa0 	bl	8001d84 <led_off>
            break;
 8001e44:	e04d      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001e46:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <LED_Task+0xf0>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff87 	bl	8001d68 <led_on>
            break;
 8001e5a:	e042      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <LED_Task+0xec>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <LED_Task+0x6c>
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <LED_Task+0xec>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e76:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <LED_Task+0xf4>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc2b      	bgt.n	8001ee0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001e88:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <LED_Task+0xf0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <LED_Task+0xf0>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001ea6:	4a15      	ldr	r2, [pc, #84]	@ (8001efc <LED_Task+0xf0>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <LED_Task+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <led_on>
 8001ebc:	e004      	b.n	8001ec8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5e 	bl	8001d84 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <LED_Task+0xec>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <LED_Task+0xf4>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001ee0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	dd97      	ble.n	8001e1e <LED_Task+0x12>
        }
    }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	200002dc 	.word	0x200002dc
 8001f00:	200002e0 	.word	0x200002e0

08001f04 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	e00d      	b.n	8001f2c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	ddee      	ble.n	8001f10 <LED_ClearAllIntents+0xc>
    }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200002cc 	.word	0x200002cc

08001f44 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d80b      	bhi.n	8001f74 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	805a      	strh	r2, [r3, #2]
 8001f72:	e000      	b.n	8001f76 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f74:	bf00      	nop
}
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200002cc 	.word	0x200002cc

08001f84 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	733b      	strb	r3, [r7, #12]
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb4:	480a      	ldr	r0, [pc, #40]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fb6:	f004 f98c 	bl	80062d2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001fba:	f107 010c 	add.w	r1, r7, #12
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <LoRa_WriteReg+0x54>)
 8001fc6:	f006 fafc 	bl	80085c2 <HAL_SPI_Transmit>
    NSS_HIGH();
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fd2:	f004 f97e 	bl	80062d2 <HAL_GPIO_WritePin>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40010800 	.word	0x40010800
 8001fe4:	200003b8 	.word	0x200003b8

08001fe8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002006:	480f      	ldr	r0, [pc, #60]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002008:	f004 f963 	bl	80062d2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 800200c:	f107 010f 	add.w	r1, r7, #15
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	2201      	movs	r2, #1
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002018:	f006 fad3 	bl	80085c2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800201c:	f107 010e 	add.w	r1, r7, #14
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	2201      	movs	r2, #1
 8002026:	4808      	ldr	r0, [pc, #32]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002028:	f006 fc0f 	bl	800884a <HAL_SPI_Receive>
    NSS_HIGH();
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002034:	f004 f94d 	bl	80062d2 <HAL_GPIO_WritePin>
    return rx;
 8002038:	7bbb      	ldrb	r3, [r7, #14]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40010800 	.word	0x40010800
 8002048:	200003b8 	.word	0x200003b8

0800204c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206c:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800206e:	f004 f930 	bl	80062d2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8002072:	f107 010f 	add.w	r1, r7, #15
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	2201      	movs	r2, #1
 800207c:	480b      	ldr	r0, [pc, #44]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800207e:	f006 faa0 	bl	80085c2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	b29a      	uxth	r2, r3
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800208e:	f006 fa98 	bl	80085c2 <HAL_SPI_Transmit>
    NSS_HIGH();
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800209a:	f004 f91a 	bl	80062d2 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010800 	.word	0x40010800
 80020ac:	200003b8 	.word	0x200003b8

080020b0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ba:	f004 f90a 	bl	80062d2 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020be:	2002      	movs	r0, #2
 80020c0:	f003 f862 	bl	8005188 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2140      	movs	r1, #64	@ 0x40
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ca:	f004 f902 	bl	80062d2 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020ce:	2002      	movs	r0, #2
 80020d0:	f003 f85a 	bl	8005188 <HAL_Delay>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010c00 	.word	0x40010c00

080020dc <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	2000      	movs	r0, #0
 80020e8:	460a      	mov	r2, r1
 80020ea:	4603      	mov	r3, r0
 80020ec:	0b55      	lsrs	r5, r2, #13
 80020ee:	04d4      	lsls	r4, r2, #19
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <LoRa_SetFrequency+0x78>)
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe ffc3 	bl	8001084 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8002106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	0c02      	lsrs	r2, r0, #16
 8002114:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002118:	0c0b      	lsrs	r3, r1, #16
 800211a:	b2d3      	uxtb	r3, r2
 800211c:	4619      	mov	r1, r3
 800211e:	2006      	movs	r0, #6
 8002120:	f7ff ff36 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	0a02      	lsrs	r2, r0, #8
 8002132:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002136:	0a0b      	lsrs	r3, r1, #8
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	4619      	mov	r1, r3
 800213c:	2007      	movs	r0, #7
 800213e:	f7ff ff27 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	4619      	mov	r1, r3
 8002146:	2008      	movs	r0, #8
 8002148:	f7ff ff22 	bl	8001f90 <LoRa_WriteReg>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	01e84800 	.word	0x01e84800

08002158 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800215c:	f7ff ffa8 	bl	80020b0 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8002160:	2100      	movs	r1, #0
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff14 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002168:	2002      	movs	r0, #2
 800216a:	f003 f80d 	bl	8005188 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff ff0d 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f003 f806 	bl	8005188 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 800217c:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <LoRa_Init+0x8c>)
 800217e:	f7ff ffad 	bl	80020dc <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8002182:	218f      	movs	r1, #143	@ 0x8f
 8002184:	2009      	movs	r0, #9
 8002186:	f7ff ff03 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800218a:	2187      	movs	r1, #135	@ 0x87
 800218c:	204d      	movs	r0, #77	@ 0x4d
 800218e:	f7ff feff 	bl	8001f90 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002192:	2123      	movs	r1, #35	@ 0x23
 8002194:	200c      	movs	r0, #12
 8002196:	f7ff fefb 	bl	8001f90 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800219a:	2172      	movs	r1, #114	@ 0x72
 800219c:	201d      	movs	r0, #29
 800219e:	f7ff fef7 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80021a2:	2174      	movs	r1, #116	@ 0x74
 80021a4:	201e      	movs	r0, #30
 80021a6:	f7ff fef3 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80021aa:	2104      	movs	r1, #4
 80021ac:	2026      	movs	r0, #38	@ 0x26
 80021ae:	f7ff feef 	bl	8001f90 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80021b2:	2100      	movs	r1, #0
 80021b4:	2020      	movs	r0, #32
 80021b6:	f7ff feeb 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80021ba:	2108      	movs	r1, #8
 80021bc:	2021      	movs	r0, #33	@ 0x21
 80021be:	f7ff fee7 	bl	8001f90 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 80021c2:	2122      	movs	r1, #34	@ 0x22
 80021c4:	2039      	movs	r0, #57	@ 0x39
 80021c6:	f7ff fee3 	bl	8001f90 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2040      	movs	r0, #64	@ 0x40
 80021ce:	f7ff fedf 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80021d2:	21ff      	movs	r1, #255	@ 0xff
 80021d4:	2012      	movs	r0, #18
 80021d6:	f7ff fedb 	bl	8001f90 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 80021da:	f000 f80d 	bl	80021f8 <LoRa_SetRxContinuous>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	19cf0e40 	.word	0x19cf0e40

080021e8 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	2181      	movs	r1, #129	@ 0x81
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fece 	bl	8001f90 <LoRa_WriteReg>
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2185      	movs	r1, #133	@ 0x85
 80021fe:	2001      	movs	r0, #1
 8002200:	f7ff fec6 	bl	8001f90 <LoRa_WriteReg>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2183      	movs	r1, #131	@ 0x83
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff febe 	bl	8001f90 <LoRa_WriteReg>
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <LoRa_SendPacket+0x98>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d03c      	beq.n	80022a6 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 800222c:	f7ff ffdc 	bl	80021e8 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 8002230:	2100      	movs	r1, #0
 8002232:	200e      	movs	r0, #14
 8002234:	f7ff feac 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8002238:	2100      	movs	r1, #0
 800223a:	200d      	movs	r0, #13
 800223c:	f7ff fea8 	bl	8001f90 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	461a      	mov	r2, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff ff00 	bl	800204c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	2022      	movs	r0, #34	@ 0x22
 8002252:	f7ff fe9d 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002256:	21ff      	movs	r1, #255	@ 0xff
 8002258:	2012      	movs	r0, #18
 800225a:	f7ff fe99 	bl	8001f90 <LoRa_WriteReg>

    LoRa_SetTx();
 800225e:	f7ff ffd3 	bl	8002208 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 8002262:	f002 ff87 	bl	8005174 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002268:	e00e      	b.n	8002288 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 800226a:	f002 ff83 	bl	8005174 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002278:	d906      	bls.n	8002288 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 800227a:	21ff      	movs	r1, #255	@ 0xff
 800227c:	2012      	movs	r0, #18
 800227e:	f7ff fe87 	bl	8001f90 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 8002282:	f7ff ffb9 	bl	80021f8 <LoRa_SetRxContinuous>
            return;
 8002286:	e00f      	b.n	80022a8 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002288:	2012      	movs	r0, #18
 800228a:	f7ff fead 	bl	8001fe8 <LoRa_ReadReg>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0e8      	beq.n	800226a <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 8002298:	2108      	movs	r1, #8
 800229a:	2012      	movs	r0, #18
 800229c:	f7ff fe78 	bl	8001f90 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 80022a0:	f7ff ffaa 	bl	80021f8 <LoRa_SetRxContinuous>
 80022a4:	e000      	b.n	80022a8 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 80022a6:	bf00      	nop
}
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000018 	.word	0x20000018

080022b4 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4803      	ldr	r0, [pc, #12]	@ (80022cc <Debug_Print+0x18>)
 80022c0:	f002 fe84 	bl	8004fcc <UART_TransmitString>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000458 	.word	0x20000458

080022d0 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_ADC_ConvCpltCallback+0x8c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d138      	bne.n	8002354 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e02e      	b.n	8002346 <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_ADC_ConvCpltCallback+0x90>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fc8d 	bl	8000c10 <__aeabi_i2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	491a      	ldr	r1, [pc, #104]	@ (8002364 <HAL_ADC_ConvCpltCallback+0x94>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcdc 	bl	8000cb8 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	4919      	ldr	r1, [pc, #100]	@ (8002368 <HAL_ADC_ConvCpltCallback+0x98>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd8b 	bl	8000e20 <__aeabi_fdiv>
 800230a:	4603      	mov	r3, r0
 800230c:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fccd 	bl	8000cb8 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f7fe fcc7 	bl	8000cb8 <__aeabi_fmul>
 800232a:	4603      	mov	r3, r0
 800232c:	4619      	mov	r1, r3
 800232e:	4620      	mov	r0, r4
 8002330:	f7fe fbba 	bl	8000aa8 <__addsf3>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b06      	cmp	r3, #6
 800234a:	ddcd      	ble.n	80022e8 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002352:	6013      	str	r3, [r2, #0]
    }
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	40012400 	.word	0x40012400
 8002360:	200002f0 	.word	0x200002f0
 8002364:	40533333 	.word	0x40533333
 8002368:	457ff000 	.word	0x457ff000
 800236c:	20000300 	.word	0x20000300
 8002370:	3f666666 	.word	0x3f666666
 8002374:	3dcccccd 	.word	0x3dcccccd
 8002378:	2000031c 	.word	0x2000031c

0800237c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b08b      	sub	sp, #44	@ 0x2c
 8002380:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002382:	f002 fe9f 	bl	80050c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002386:	f000 f8ad 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238a:	f000 fa85 	bl	8002898 <MX_GPIO_Init>
  MX_ADC1_Init();
 800238e:	f000 f905 	bl	800259c <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8002392:	f000 f9d3 	bl	800273c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002396:	f000 fa55 	bl	8002844 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800239a:	f000 f9a1 	bl	80026e0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800239e:	f000 fa03 	bl	80027a8 <MX_TIM3_Init>
  UART_Init();
 80023a2:	f002 fdf5 	bl	8004f90 <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80023a6:	4846      	ldr	r0, [pc, #280]	@ (80024c0 <main+0x144>)
 80023a8:	f006 fe6c 	bl	8009084 <HAL_TIM_Base_Start>
  RF_Init();
 80023ac:	f001 f854 	bl	8003458 <RF_Init>
  lcd_init();
 80023b0:	f7ff fc71 	bl	8001c96 <lcd_init>
  ADC_Init(&hadc1);
 80023b4:	4843      	ldr	r0, [pc, #268]	@ (80024c4 <main+0x148>)
 80023b6:	f7ff f993 	bl	80016e0 <ADC_Init>
  LoRa_Init();
 80023ba:	f7ff fecd 	bl	8002158 <LoRa_Init>
  Screen_Init();
 80023be:	f001 ff75 	bl	80042ac <Screen_Init>
  UART_Init();
 80023c2:	f002 fde5 	bl	8004f90 <UART_Init>
  Switches_Init();
 80023c6:	f002 fcc3 	bl	8004d50 <Switches_Init>
  Relay_Init();
 80023ca:	f000 ffbf 	bl	800334c <Relay_Init>
  LED_Init();
 80023ce:	f7ff fce7 	bl	8001da0 <LED_Init>


  ACS712_Init(&hadc1);
 80023d2:	483c      	ldr	r0, [pc, #240]	@ (80024c4 <main+0x148>)
 80023d4:	f7ff f854 	bl	8001480 <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 80023d8:	f001 f8da 	bl	8003590 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 80023dc:	f001 f928 	bl	8003630 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 80023e0:	4839      	ldr	r0, [pc, #228]	@ (80024c8 <main+0x14c>)
 80023e2:	f7ff ff67 	bl	80022b4 <Debug_Print>

  uint8_t lastSecond = 255;
 80023e6:	23ff      	movs	r3, #255	@ 0xff
 80023e8:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 80023ea:	f7ff f917 	bl	800161c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 80023ee:	2118      	movs	r1, #24
 80023f0:	4836      	ldr	r0, [pc, #216]	@ (80024cc <main+0x150>)
 80023f2:	f001 f872 	bl	80034da <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 80023f6:	f002 fa4f 	bl	8004898 <Screen_HandleSwitches>
      Screen_Update();
 80023fa:	f001 fd2d 	bl	8003e58 <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 80023fe:	4934      	ldr	r1, [pc, #208]	@ (80024d0 <main+0x154>)
 8002400:	4830      	ldr	r0, [pc, #192]	@ (80024c4 <main+0x148>)
 8002402:	f7ff f97d 	bl	8001700 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 8002406:	f001 f913 	bl	8003630 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 800240a:	4b32      	ldr	r3, [pc, #200]	@ (80024d4 <main+0x158>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	429a      	cmp	r2, r3
 8002412:	d025      	beq.n	8002460 <main+0xe4>
          lastSecond = time.seconds;
 8002414:	4b2f      	ldr	r3, [pc, #188]	@ (80024d4 <main+0x158>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800241a:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <main+0x158>)
 800241c:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 800241e:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002420:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <main+0x158>)
 8002422:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002424:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <main+0x158>)
 8002428:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800242a:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <main+0x158>)
 800242e:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 8002430:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <main+0x158>)
 8002434:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 8002436:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 8002438:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <main+0x158>)
 800243a:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 800243c:	461d      	mov	r5, r3
                   time.dayofweek);
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <main+0x158>)
 8002440:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 8002442:	9305      	str	r3, [sp, #20]
 8002444:	9504      	str	r5, [sp, #16]
 8002446:	9403      	str	r4, [sp, #12]
 8002448:	9002      	str	r0, [sp, #8]
 800244a:	9101      	str	r1, [sp, #4]
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	4633      	mov	r3, r6
 8002450:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <main+0x15c>)
 8002452:	2164      	movs	r1, #100	@ 0x64
 8002454:	4821      	ldr	r0, [pc, #132]	@ (80024dc <main+0x160>)
 8002456:	f008 f885 	bl	800a564 <sniprintf>
          Debug_Print(dbg);
 800245a:	4820      	ldr	r0, [pc, #128]	@ (80024dc <main+0x160>)
 800245c:	f7ff ff2a 	bl	80022b4 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <main+0x164>)
 8002464:	f002 fdc6 	bl	8004ff4 <UART_GetReceivedPacket>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01f      	beq.n	80024ae <main+0x132>
          char *p = receivedUartPacket;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <main+0x164>)
 8002470:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 8002472:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <main+0x164>)
 8002474:	f7fd fe76 	bl	8000164 <strlen>
 8002478:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d913      	bls.n	80024a8 <main+0x12c>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d10f      	bne.n	80024a8 <main+0x12c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b23      	cmp	r3, #35	@ 0x23
 8002494:	d108      	bne.n	80024a8 <main+0x12c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3b01      	subs	r3, #1
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f000 ff01 	bl	80032b0 <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 80024ae:	f000 fedb 	bl	8003268 <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 80024b2:	f7ff fcab 	bl	8001e0c <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 80024b6:	2014      	movs	r0, #20
 80024b8:	f002 fe66 	bl	8005188 <HAL_Delay>
  {
 80024bc:	e795      	b.n	80023ea <main+0x6e>
 80024be:	bf00      	nop
 80024c0:	20000410 	.word	0x20000410
 80024c4:	20000320 	.word	0x20000320
 80024c8:	0800c8b4 	.word	0x0800c8b4
 80024cc:	001af5f8 	.word	0x001af5f8
 80024d0:	200004a0 	.word	0x200004a0
 80024d4:	200005dc 	.word	0x200005dc
 80024d8:	0800c8cc 	.word	0x0800c8cc
 80024dc:	2000050c 	.word	0x2000050c
 80024e0:	200004cc 	.word	0x200004cc

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	@ 0x50
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ee:	2228      	movs	r2, #40	@ 0x28
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f008 f944 	bl	800a780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002514:	230a      	movs	r3, #10
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	2301      	movs	r3, #1
 800251a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	2310      	movs	r3, #16
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002520:	2301      	movs	r3, #1
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002524:	2302      	movs	r3, #2
 8002526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002528:	2300      	movs	r3, #0
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800252c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002536:	4618      	mov	r0, r3
 8002538:	f005 fa10 	bl	800795c <HAL_RCC_OscConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002542:	f000 fa27 	bl	8002994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002546:	230f      	movs	r3, #15
 8002548:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f005 fc7c 	bl	8007e60 <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800256e:	f000 fa11 	bl	8002994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002572:	2303      	movs	r3, #3
 8002574:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800257c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f005 fdf9 	bl	800817c <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002590:	f000 fa00 	bl	8002994 <Error_Handler>
  }
}
 8002594:	bf00      	nop
 8002596:	3750      	adds	r7, #80	@ 0x50
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025ac:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025ae:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <MX_ADC1_Init+0x140>)
 80025b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025b2:	4b49      	ldr	r3, [pc, #292]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c0:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80025cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ce:	4b42      	ldr	r3, [pc, #264]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80025d4:	4b40      	ldr	r3, [pc, #256]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d6:	2208      	movs	r2, #8
 80025d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025da:	483f      	ldr	r0, [pc, #252]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025dc:	f002 fdf8 	bl	80051d0 <HAL_ADC_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80025e6:	f000 f9d5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4837      	ldr	r0, [pc, #220]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025fc:	f003 f974 	bl	80058e8 <HAL_ADC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 f9c5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800260a:	2301      	movs	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800260e:	2302      	movs	r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4830      	ldr	r0, [pc, #192]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002618:	f003 f966 	bl	80058e8 <HAL_ADC_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002622:	f000 f9b7 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002626:	2302      	movs	r3, #2
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800262a:	2303      	movs	r3, #3
 800262c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4829      	ldr	r0, [pc, #164]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002634:	f003 f958 	bl	80058e8 <HAL_ADC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800263e:	f000 f9a9 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002642:	2303      	movs	r3, #3
 8002644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002646:	2304      	movs	r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4822      	ldr	r0, [pc, #136]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002650:	f003 f94a 	bl	80058e8 <HAL_ADC_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800265a:	f000 f99b 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800265e:	2304      	movs	r3, #4
 8002660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002662:	2305      	movs	r3, #5
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	481b      	ldr	r0, [pc, #108]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 800266c:	f003 f93c 	bl	80058e8 <HAL_ADC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002676:	f000 f98d 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800267a:	2305      	movs	r3, #5
 800267c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800267e:	2306      	movs	r3, #6
 8002680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002688:	f003 f92e 	bl	80058e8 <HAL_ADC_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002692:	f000 f97f 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002696:	2307      	movs	r3, #7
 8002698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800269a:	2307      	movs	r3, #7
 800269c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026a4:	f003 f920 	bl	80058e8 <HAL_ADC_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80026ae:	f000 f971 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026b2:	2306      	movs	r3, #6
 80026b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80026b6:	2308      	movs	r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026c0:	f003 f912 	bl	80058e8 <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80026ca:	f000 f963 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000320 	.word	0x20000320
 80026dc:	40012400 	.word	0x40012400

080026e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026e6:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <MX_I2C2_Init+0x54>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <MX_I2C2_Init+0x58>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_I2C2_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	@ (8002730 <MX_I2C2_Init+0x50>)
 800271e:	f003 fe09 	bl	8006334 <HAL_I2C_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002728:	f000 f934 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000350 	.word	0x20000350
 8002734:	40005800 	.word	0x40005800
 8002738:	000186a0 	.word	0x000186a0

0800273c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <MX_SPI1_Init+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800274c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002770:	2218      	movs	r2, #24
 8002772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002788:	220a      	movs	r2, #10
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800278e:	f005 fe94 	bl	80084ba <HAL_SPI_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002798:	f000 f8fc 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200003b8 	.word	0x200003b8
 80027a4:	40013000 	.word	0x40013000

080027a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <MX_TIM3_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <MX_TIM3_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <MX_TIM3_Init+0x94>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ea:	4814      	ldr	r0, [pc, #80]	@ (800283c <MX_TIM3_Init+0x94>)
 80027ec:	f006 fbfb 	bl	8008fe6 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027f6:	f000 f8cd 	bl	8002994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	@ (800283c <MX_TIM3_Init+0x94>)
 8002808:	f006 fc86 	bl	8009118 <HAL_TIM_ConfigClockSource>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 f8bf 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <MX_TIM3_Init+0x94>)
 8002824:	f006 fe44 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800282e:	f000 f8b1 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000410 	.word	0x20000410
 8002840:	40000400 	.word	0x40000400

08002844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <MX_USART1_UART_Init+0x50>)
 800284c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800287c:	f006 fe76 	bl	800956c <HAL_UART_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002886:	f000 f885 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000458 	.word	0x20000458
 8002894:	40013800 	.word	0x40013800

08002898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ac:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028b2:	f043 0310 	orr.w	r3, r3, #16
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80028f4:	2200      	movs	r2, #0
 80028f6:	f240 3147 	movw	r1, #839	@ 0x347
 80028fa:	4823      	ldr	r0, [pc, #140]	@ (8002988 <MX_GPIO_Init+0xf0>)
 80028fc:	f003 fce9 	bl	80062d2 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002906:	4821      	ldr	r0, [pc, #132]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002908:	f003 fce3 	bl	80062d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 800290c:	f240 3347 	movw	r3, #839	@ 0x347
 8002910:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4619      	mov	r1, r3
 8002924:	4818      	ldr	r0, [pc, #96]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002926:	f003 fb39 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800292a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800292e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002930:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <MX_GPIO_Init+0xf8>)
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4812      	ldr	r0, [pc, #72]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002940:	f003 fb2c 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002944:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	480b      	ldr	r0, [pc, #44]	@ (800298c <MX_GPIO_Init+0xf4>)
 800295e:	f003 fb1d 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4619      	mov	r1, r3
 8002974:	4804      	ldr	r0, [pc, #16]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002976:	f003 fb11 	bl	8005f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40010800 	.word	0x40010800
 8002990:	10310000 	.word	0x10310000

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <Error_Handler+0x8>

080029a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029a4:	f3bf 8f4f 	dsb	sy
}
 80029a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029b2:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_SystemReset+0x28>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029ba:	f3bf 8f4f 	dsb	sy
}
 80029be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <__NVIC_SystemReset+0x20>
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	05fa0004 	.word	0x05fa0004

080029cc <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL;
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f002 fbd0 	bl	8005174 <HAL_GetTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}

080029da <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	460a      	mov	r2, r1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80029f0:	fb02 f103 	mul.w	r1, r2, r3
 80029f4:	79ba      	ldrb	r2, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
	...

08002a0c <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor Control ===== */
static inline void motor_apply(bool on)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 fce0 	bl	80033e0 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <motor_apply+0x1e>
 8002a26:	2201      	movs	r2, #1
 8002a28:	e000      	b.n	8002a2c <motor_apply+0x20>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <motor_apply+0x58>)
 8002a2e:	701a      	strb	r2, [r3, #0]

    if (on) {
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002a36:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <motor_apply+0x5c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f083 0301 	eor.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <motor_apply+0x50>
            maxRunTimerArmed = true;
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <motor_apply+0x5c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002a4a:	f7ff ffbf 	bl	80029cc <now_ms>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <motor_apply+0x60>)
 8002a52:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8002a54:	e002      	b.n	8002a5c <motor_apply+0x50>
        maxRunTimerArmed = false;
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <motor_apply+0x5c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000570 	.word	0x20000570
 8002a68:	200005c1 	.word	0x200005c1
 8002a6c:	200005c4 	.word	0x200005c4

08002a70 <start_motor>:

static inline void start_motor(void) { motor_apply(true); }
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff ffc9 	bl	8002a0c <motor_apply>
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <stop_motor>:
static inline void stop_motor(void)  { motor_apply(false); }
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff ffc2 	bl	8002a0c <motor_apply>
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <isTankFull>:

/* ===== Tank Check ===== */
static bool isTankFull(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	e012      	b.n	8002ac2 <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <isTankFull+0x50>)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	490d      	ldr	r1, [pc, #52]	@ (8002ae0 <isTankFull+0x54>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe faa2 	bl	8000ff4 <__aeabi_fcmplt>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <isTankFull+0x30>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	dde9      	ble.n	8002a9c <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	bfcc      	ite	gt
 8002ace:	2301      	movgt	r3, #1
 8002ad0:	2300      	movle	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200004a0 	.word	0x200004a0
 8002ae0:	3dcccccd 	.word	0x3dcccccd

08002ae4 <ModelHandle_ToggleManual>:

/* ===== Manual Mode ===== */
void ModelHandle_ToggleManual(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
    // Disable other modes
    semiAutoActive  = false;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <ModelHandle_ToggleManual+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002aee:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <ModelHandle_ToggleManual+0x70>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <ModelHandle_ToggleManual+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <ModelHandle_ToggleManual+0x78>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <ModelHandle_ToggleManual+0x7c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]

    manualOverride = true;
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <ModelHandle_ToggleManual+0x80>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    manualActive   = !manualActive;
 8002b0c:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <ModelHandle_ToggleManual+0x84>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <ModelHandle_ToggleManual+0x84>)
 8002b2a:	701a      	strb	r2, [r3, #0]

    if (manualActive) {
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <ModelHandle_ToggleManual+0x84>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <ModelHandle_ToggleManual+0x5e>
        start_motor();
 8002b36:	f7ff ff9b 	bl	8002a70 <start_motor>
        printf("Manual ON\r\n");
 8002b3a:	480c      	ldr	r0, [pc, #48]	@ (8002b6c <ModelHandle_ToggleManual+0x88>)
 8002b3c:	f007 fd0a 	bl	800a554 <puts>
    } else {
        stop_motor();
        printf("Manual OFF\r\n");
    }
}
 8002b40:	e004      	b.n	8002b4c <ModelHandle_ToggleManual+0x68>
        stop_motor();
 8002b42:	f7ff ff9c 	bl	8002a7e <stop_motor>
        printf("Manual OFF\r\n");
 8002b46:	480a      	ldr	r0, [pc, #40]	@ (8002b70 <ModelHandle_ToggleManual+0x8c>)
 8002b48:	f007 fd04 	bl	800a554 <puts>
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000576 	.word	0x20000576
 8002b54:	20000575 	.word	0x20000575
 8002b58:	20000574 	.word	0x20000574
 8002b5c:	20000572 	.word	0x20000572
 8002b60:	20000573 	.word	0x20000573
 8002b64:	200005c0 	.word	0x200005c0
 8002b68:	20000571 	.word	0x20000571
 8002b6c:	0800c900 	.word	0x0800c900
 8002b70:	0800c90c 	.word	0x0800c90c

08002b74 <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <ModelHandle_ManualLongPress+0x20>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <ModelHandle_ManualLongPress+0x24>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

    printf("Manual Long Press → Restarting...\r\n");
 8002b84:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <ModelHandle_ManualLongPress+0x28>)
 8002b86:	f007 fce5 	bl	800a554 <puts>
    HAL_Delay(100);
 8002b8a:	2064      	movs	r0, #100	@ 0x64
 8002b8c:	f002 fafc 	bl	8005188 <HAL_Delay>
    NVIC_SystemReset();
 8002b90:	f7ff ff06 	bl	80029a0 <__NVIC_SystemReset>
 8002b94:	200005c0 	.word	0x200005c0
 8002b98:	20000571 	.word	0x20000571
 8002b9c:	0800c918 	.word	0x0800c918

08002ba0 <countdown_tick>:
    countdownDeadline = now_ms() + (seconds * 1000UL);
    start_motor();
}

static void countdown_tick(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <countdown_tick+0x7c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d12d      	bne.n	8002c12 <countdown_tick+0x72>

    uint32_t tnow = now_ms();
 8002bb6:	f7ff ff09 	bl	80029cc <now_ms>
 8002bba:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <countdown_tick+0x80>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	dc08      	bgt.n	8002bda <countdown_tick+0x3a>
        stop_motor();
 8002bc8:	f7ff ff59 	bl	8002a7e <stop_motor>
        countdownActive   = false;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <countdown_tick+0x7c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <countdown_tick+0x84>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
        return;
 8002bd8:	e01c      	b.n	8002c14 <countdown_tick+0x74>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <countdown_tick+0x80>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002bea:	4a0f      	ldr	r2, [pc, #60]	@ (8002c28 <countdown_tick+0x88>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c24 <countdown_tick+0x84>)
 8002bf4:	6013      	str	r3, [r2, #0]

    if (isTankFull()) {
 8002bf6:	f7ff ff49 	bl	8002a8c <isTankFull>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <countdown_tick+0x74>
        stop_motor();
 8002c00:	f7ff ff3d 	bl	8002a7e <stop_motor>
        countdownActive   = false;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <countdown_tick+0x7c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <countdown_tick+0x84>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e000      	b.n	8002c14 <countdown_tick+0x74>
    if (!countdownActive) return;
 8002c12:	bf00      	nop
    }
}
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000572 	.word	0x20000572
 8002c20:	2000057c 	.word	0x2000057c
 8002c24:	20000578 	.word	0x20000578
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) { twistActive = false; return; }
 8002c32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <twist_tick+0xbc>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <twist_tick+0x1c>
 8002c40:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <twist_tick+0xc0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e04c      	b.n	8002ce2 <twist_tick+0xb6>
    twistActive = true;
 8002c48:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <twist_tick+0xc0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]

    uint32_t tnow = now_ms();
 8002c4e:	f7ff febd 	bl	80029cc <now_ms>
 8002c52:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8002c54:	4b26      	ldr	r3, [pc, #152]	@ (8002cf0 <twist_tick+0xc4>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dc3f      	bgt.n	8002ce0 <twist_tick+0xb4>

    twist_on_phase = !twist_on_phase;
 8002c60:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <twist_tick+0xc8>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <twist_tick+0xc8>)
 8002c7c:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <twist_tick+0xc8>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <twist_tick+0x76>
        start_motor();
 8002c86:	f7ff fef3 	bl	8002a70 <start_motor>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8002c8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <twist_tick+0xbc>)
 8002c8c:	885b      	ldrh	r3, [r3, #2]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c94:	fb03 f202 	mul.w	r2, r3, r2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <twist_tick+0xc4>)
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e00c      	b.n	8002cbc <twist_tick+0x90>
    } else {
        stop_motor();
 8002ca2:	f7ff feec 	bl	8002a7e <stop_motor>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <twist_tick+0xbc>)
 8002ca8:	889b      	ldrh	r3, [r3, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb0:	fb03 f202 	mul.w	r2, r3, r2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <twist_tick+0xc4>)
 8002cba:	6013      	str	r3, [r2, #0]
    }

    if (adcData.voltages[4] < 0.1f) {
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <twist_tick+0xcc>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	490e      	ldr	r1, [pc, #56]	@ (8002cfc <twist_tick+0xd0>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f996 	bl	8000ff4 <__aeabi_fcmplt>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <twist_tick+0xb6>
        stop_motor();
 8002cce:	f7ff fed6 	bl	8002a7e <stop_motor>
        twistSettings.twistActive = false;
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <twist_tick+0xbc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        twistActive = false;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <twist_tick+0xc0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e000      	b.n	8002ce2 <twist_tick+0xb6>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8002ce0:	bf00      	nop
    }
}
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000024 	.word	0x20000024
 8002cec:	20000573 	.word	0x20000573
 8002cf0:	200005cc 	.word	0x200005cc
 8002cf4:	200005c8 	.word	0x200005c8
 8002cf8:	200004a0 	.word	0x200004a0
 8002cfc:	3dcccccd 	.word	0x3dcccccd

08002d00 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <search_tick+0xd8>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <search_tick+0x1c>
 8002d14:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <search_tick+0xdc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e05a      	b.n	8002dd2 <search_tick+0xd2>
    searchActive = true;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <search_tick+0xdc>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]

    uint32_t tnow = now_ms();
 8002d22:	f7ff fe53 	bl	80029cc <now_ms>
 8002d26:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <search_tick+0xe0>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	dc4d      	bgt.n	8002dd0 <search_tick+0xd0>

    if (!search_in_test) {
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <search_tick+0xe4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f083 0301 	eor.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <search_tick+0x64>
        search_in_test = true;
 8002d42:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <search_tick+0xe4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
        start_motor();
 8002d48:	f7ff fe92 	bl	8002a70 <start_motor>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <search_tick+0xd8>)
 8002d4e:	889b      	ldrh	r3, [r3, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fb03 f202 	mul.w	r2, r3, r2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a20      	ldr	r2, [pc, #128]	@ (8002de0 <search_tick+0xe0>)
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e036      	b.n	8002dd2 <search_tick+0xd2>
    } else {
        if (adcData.voltages[0] < 0.1f) {
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <search_tick+0xe8>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4920      	ldr	r1, [pc, #128]	@ (8002dec <search_tick+0xec>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f942 	bl	8000ff4 <__aeabi_fcmplt>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <search_tick+0x98>
            stop_motor();
 8002d76:	f7ff fe82 	bl	8002a7e <stop_motor>
            search_in_test = false;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <search_tick+0xe4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
            search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8002d80:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <search_tick+0xd8>)
 8002d82:	885b      	ldrh	r3, [r3, #2]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d8a:	fb03 f202 	mul.w	r2, r3, r2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <search_tick+0xe0>)
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01c      	b.n	8002dd2 <search_tick+0xd2>
        } else {
            if (isTankFull()) {
 8002d98:	f7ff fe78 	bl	8002a8c <isTankFull>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <search_tick+0xb4>
                stop_motor();
 8002da2:	f7ff fe6c 	bl	8002a7e <stop_motor>
                searchSettings.searchActive = false;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <search_tick+0xd8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
                searchActive = false;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <search_tick+0xdc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e00e      	b.n	8002dd2 <search_tick+0xd2>
            } else {
                start_motor();
 8002db4:	f7ff fe5c 	bl	8002a70 <start_motor>
                search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8002db8:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <search_tick+0xd8>)
 8002dba:	889b      	ldrh	r3, [r3, #4]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc2:	fb03 f202 	mul.w	r2, r3, r2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	@ (8002de0 <search_tick+0xe0>)
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e000      	b.n	8002dd2 <search_tick+0xd2>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8002dd0:	bf00      	nop
            }
        }
    }
}
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000001c 	.word	0x2000001c
 8002ddc:	20000574 	.word	0x20000574
 8002de0:	200005d4 	.word	0x200005d4
 8002de4:	200005d0 	.word	0x200005d0
 8002de8:	200004a0 	.word	0x200004a0
 8002dec:	3dcccccd 	.word	0x3dcccccd

08002df0 <seconds_since_midnight>:

/* ===== Timer (RTC based) ===== */
static uint32_t seconds_since_midnight(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    RTC_GetTimeDate();
 8002df4:	f000 fc1c 	bl	8003630 <RTC_GetTimeDate>
    return ((uint32_t)time.hour * 3600UL) +
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <seconds_since_midnight+0x30>)
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002e02:	fb03 f202 	mul.w	r2, r3, r2
           ((uint32_t)time.minutes * 60UL) +
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <seconds_since_midnight+0x30>)
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a5b      	subs	r3, r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
    return ((uint32_t)time.hour * 3600UL) +
 8002e14:	4413      	add	r3, r2
           (uint32_t)time.seconds;
 8002e16:	4a02      	ldr	r2, [pc, #8]	@ (8002e20 <seconds_since_midnight+0x30>)
 8002e18:	7812      	ldrb	r2, [r2, #0]
           ((uint32_t)time.minutes * 60UL) +
 8002e1a:	4413      	add	r3, r2
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200005dc 	.word	0x200005dc

08002e24 <timer_tick>:

static void timer_tick(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
    timerActive = false;
 8002e2a:	4b42      	ldr	r3, [pc, #264]	@ (8002f34 <timer_tick+0x110>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 8002e30:	f7ff ffde 	bl	8002df0 <seconds_since_midnight>
 8002e34:	6078      	str	r0, [r7, #4]

    static uint32_t timerRetryDeadline = 0;

    for (int i = 0; i < 3; i++) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e06e      	b.n	8002f1a <timer_tick+0xf6>
        TimerSlot* s = &timerSlots[i];
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <timer_tick+0x114>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d15b      	bne.n	8002f12 <timer_tick+0xee>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d812      	bhi.n	8002e8c <timer_tick+0x68>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d306      	bcc.n	8002e7e <timer_tick+0x5a>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d201      	bcs.n	8002e7e <timer_tick+0x5a>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <timer_tick+0x5c>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	72fb      	strb	r3, [r7, #11]
 8002e8a:	e011      	b.n	8002eb0 <timer_tick+0x8c>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d204      	bcs.n	8002ea0 <timer_tick+0x7c>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d201      	bcs.n	8002ea4 <timer_tick+0x80>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <timer_tick+0x82>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	72fb      	strb	r3, [r7, #11]
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	72fb      	strb	r3, [r7, #11]
        }

        if (inWindow) {
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02e      	beq.n	8002f14 <timer_tick+0xf0>
            timerActive = true;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <timer_tick+0x110>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]

            if (now_ms() < timerRetryDeadline) {
 8002ebc:	f7ff fd86 	bl	80029cc <now_ms>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <timer_tick+0x118>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d330      	bcc.n	8002f2c <timer_tick+0x108>
                return;
            }

            if (adcData.voltages[0] < 0.1f) {
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <timer_tick+0x11c>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	491d      	ldr	r1, [pc, #116]	@ (8002f44 <timer_tick+0x120>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f88f 	bl	8000ff4 <__aeabi_fcmplt>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00f      	beq.n	8002efc <timer_tick+0xd8>
                stop_motor();
 8002edc:	f7ff fdcf 	bl	8002a7e <stop_motor>
                timerRetryDeadline = now_ms() + (searchSettings.testingGapSeconds * 1000UL);
 8002ee0:	f7ff fd74 	bl	80029cc <now_ms>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b18      	ldr	r3, [pc, #96]	@ (8002f48 <timer_tick+0x124>)
 8002ee8:	885b      	ldrh	r3, [r3, #2]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <timer_tick+0x118>)
 8002ef8:	6013      	str	r3, [r2, #0]
                return;
 8002efa:	e018      	b.n	8002f2e <timer_tick+0x10a>
            }

            if (isTankFull()) {
 8002efc:	f7ff fdc6 	bl	8002a8c <isTankFull>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <timer_tick+0xe8>
                stop_motor();
 8002f06:	f7ff fdba 	bl	8002a7e <stop_motor>
                return;
 8002f0a:	e010      	b.n	8002f2e <timer_tick+0x10a>
            }

            start_motor();
 8002f0c:	f7ff fdb0 	bl	8002a70 <start_motor>
            return;
 8002f10:	e00d      	b.n	8002f2e <timer_tick+0x10a>
        if (!s->active) continue;
 8002f12:	bf00      	nop
    for (int i = 0; i < 3; i++) {
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	dd8d      	ble.n	8002e3c <timer_tick+0x18>
        }
    }

    stop_motor();
 8002f20:	f7ff fdad 	bl	8002a7e <stop_motor>
    timerRetryDeadline = 0;
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <timer_tick+0x118>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e000      	b.n	8002f2e <timer_tick+0x10a>
                return;
 8002f2c:	bf00      	nop
}
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000575 	.word	0x20000575
 8002f38:	20000580 	.word	0x20000580
 8002f3c:	200005d8 	.word	0x200005d8
 8002f40:	200004a0 	.word	0x200004a0
 8002f44:	3dcccccd 	.word	0x3dcccccd
 8002f48:	2000001c 	.word	0x2000001c

08002f4c <ModelHandle_StartSemiAuto>:

/* ===== Semi-Auto ===== */
void ModelHandle_StartSemiAuto(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002f50:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <ModelHandle_StartSemiAuto+0x60>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <ModelHandle_StartSemiAuto+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <ModelHandle_StartSemiAuto+0x68>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <ModelHandle_StartSemiAuto+0x6c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
    countdownActive= false;
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <ModelHandle_StartSemiAuto+0x70>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <ModelHandle_StartSemiAuto+0x74>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]

    semiAutoActive = true;
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <ModelHandle_StartSemiAuto+0x78>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 8002f7a:	f7ff fd87 	bl	8002a8c <isTankFull>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <ModelHandle_StartSemiAuto+0x4a>
        start_motor();
 8002f8a:	f7ff fd71 	bl	8002a70 <start_motor>
        printf("Semi-Auto Started\r\n");
 8002f8e:	480e      	ldr	r0, [pc, #56]	@ (8002fc8 <ModelHandle_StartSemiAuto+0x7c>)
 8002f90:	f007 fae0 	bl	800a554 <puts>
    } else {
        stop_motor();
        semiAutoActive = false;
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 8002f94:	e007      	b.n	8002fa6 <ModelHandle_StartSemiAuto+0x5a>
        stop_motor();
 8002f96:	f7ff fd72 	bl	8002a7e <stop_motor>
        semiAutoActive = false;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <ModelHandle_StartSemiAuto+0x78>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Not Started: Already Full\r\n");
 8002fa0:	480a      	ldr	r0, [pc, #40]	@ (8002fcc <ModelHandle_StartSemiAuto+0x80>)
 8002fa2:	f007 fad7 	bl	800a554 <puts>
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200005c0 	.word	0x200005c0
 8002fb0:	20000571 	.word	0x20000571
 8002fb4:	20000575 	.word	0x20000575
 8002fb8:	20000574 	.word	0x20000574
 8002fbc:	20000572 	.word	0x20000572
 8002fc0:	20000573 	.word	0x20000573
 8002fc4:	20000576 	.word	0x20000576
 8002fc8:	0800c940 	.word	0x0800c940
 8002fcc:	0800c954 	.word	0x0800c954

08002fd0 <semi_auto_tick>:

static void semi_auto_tick(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <semi_auto_tick+0x50>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11b      	bne.n	800301c <semi_auto_tick+0x4c>

    if (isTankFull()) {
 8002fe4:	f7ff fd52 	bl	8002a8c <isTankFull>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <semi_auto_tick+0x36>
        stop_motor();
 8002fee:	f7ff fd46 	bl	8002a7e <stop_motor>
        semiAutoActive   = false;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <semi_auto_tick+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <semi_auto_tick+0x54>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Complete: Tank Full\r\n");
 8002ffe:	480a      	ldr	r0, [pc, #40]	@ (8003028 <semi_auto_tick+0x58>)
 8003000:	f007 faa8 	bl	800a554 <puts>
 8003004:	e00b      	b.n	800301e <semi_auto_tick+0x4e>
    } else {
        if (!Motor_GetStatus()) {
 8003006:	f000 f91f 	bl	8003248 <Motor_GetStatus>
 800300a:	4603      	mov	r3, r0
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <semi_auto_tick+0x4e>
            start_motor();
 8003016:	f7ff fd2b 	bl	8002a70 <start_motor>
 800301a:	e000      	b.n	800301e <semi_auto_tick+0x4e>
    if (!semiAutoActive) return;
 800301c:	bf00      	nop
        }
    }
}
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000576 	.word	0x20000576
 8003024:	200005c1 	.word	0x200005c1
 8003028:	0800c97c 	.word	0x0800c97c

0800302c <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
    if (manualOverride && manualActive) {
 8003030:	4b3a      	ldr	r3, [pc, #232]	@ (800311c <protections_tick+0xf0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d02d      	beq.n	8003096 <protections_tick+0x6a>
 800303a:	4b39      	ldr	r3, [pc, #228]	@ (8003120 <protections_tick+0xf4>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d028      	beq.n	8003096 <protections_tick+0x6a>
        // In manual → enforce only hard protections
        if (senseOverLoad && motorStatus == 1U) stop_motor();
 8003044:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <protections_tick+0xf8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <protections_tick+0x30>
 800304e:	4b36      	ldr	r3, [pc, #216]	@ (8003128 <protections_tick+0xfc>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <protections_tick+0x30>
 8003058:	f7ff fd11 	bl	8002a7e <stop_motor>
        if (senseOverUnderVolt) stop_motor();
 800305c:	4b33      	ldr	r3, [pc, #204]	@ (800312c <protections_tick+0x100>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <protections_tick+0x3e>
 8003066:	f7ff fd0a 	bl	8002a7e <stop_motor>
        if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 800306a:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <protections_tick+0x104>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d051      	beq.n	8003116 <protections_tick+0xea>
 8003072:	f7ff fcab 	bl	80029cc <now_ms>
 8003076:	4602      	mov	r2, r0
 8003078:	4b2e      	ldr	r3, [pc, #184]	@ (8003134 <protections_tick+0x108>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <protections_tick+0x10c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d348      	bcc.n	8003116 <protections_tick+0xea>
            stop_motor();
 8003084:	f7ff fcfb 	bl	8002a7e <stop_motor>
            senseMaxRunReached = true;
 8003088:	4b2c      	ldr	r3, [pc, #176]	@ (800313c <protections_tick+0x110>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
            maxRunTimerArmed = false;
 800308e:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <protections_tick+0x104>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
        }
        return;
 8003094:	e03f      	b.n	8003116 <protections_tick+0xea>
    }

    if (motorStatus == 1U && adcData.voltages[0] < 0.1f) {
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <protections_tick+0xfc>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10e      	bne.n	80030be <protections_tick+0x92>
 80030a0:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <protections_tick+0x114>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4927      	ldr	r1, [pc, #156]	@ (8003144 <protections_tick+0x118>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd ffa4 	bl	8000ff4 <__aeabi_fcmplt>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <protections_tick+0x92>
        senseDryRun = true;
 80030b2:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <protections_tick+0x11c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
        stop_motor();
 80030b8:	f7ff fce1 	bl	8002a7e <stop_motor>
 80030bc:	e002      	b.n	80030c4 <protections_tick+0x98>
    } else {
        senseDryRun = false;
 80030be:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <protections_tick+0x11c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
    }

    if (senseOverLoad && motorStatus == 1U) stop_motor();
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <protections_tick+0xf8>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <protections_tick+0xb0>
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <protections_tick+0xfc>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <protections_tick+0xb0>
 80030d8:	f7ff fcd1 	bl	8002a7e <stop_motor>
    if (senseOverUnderVolt) stop_motor();
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <protections_tick+0x100>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <protections_tick+0xbe>
 80030e6:	f7ff fcca 	bl	8002a7e <stop_motor>
    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <protections_tick+0x104>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <protections_tick+0xec>
 80030f2:	f7ff fc6b 	bl	80029cc <now_ms>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <protections_tick+0x108>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <protections_tick+0x10c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d309      	bcc.n	8003118 <protections_tick+0xec>
        stop_motor();
 8003104:	f7ff fcbb 	bl	8002a7e <stop_motor>
        senseMaxRunReached = true;
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <protections_tick+0x110>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <protections_tick+0x104>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e000      	b.n	8003118 <protections_tick+0xec>
        return;
 8003116:	bf00      	nop
    }
}
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200005c0 	.word	0x200005c0
 8003120:	20000571 	.word	0x20000571
 8003124:	200005bd 	.word	0x200005bd
 8003128:	20000570 	.word	0x20000570
 800312c:	200005be 	.word	0x200005be
 8003130:	200005c1 	.word	0x200005c1
 8003134:	200005c4 	.word	0x200005c4
 8003138:	006ddd00 	.word	0x006ddd00
 800313c:	200005bf 	.word	0x200005bf
 8003140:	200004a0 	.word	0x200004a0
 8003144:	3dcccccd 	.word	0x3dcccccd
 8003148:	200005bc 	.word	0x200005bc

0800314c <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8003150:	f7fe fed8 	bl	8001f04 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <leds_from_model+0x90>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d104      	bne.n	8003168 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2101      	movs	r1, #1
 8003162:	2000      	movs	r0, #0
 8003164:	f7fe feee 	bl	8001f44 <LED_SetIntent>
    }
    if (countdownActive) {
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <leds_from_model+0x94>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8003172:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003176:	2102      	movs	r1, #2
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe fee3 	bl	8001f44 <LED_SetIntent>
    }
    if (senseDryRun) {
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <leds_from_model+0x98>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2101      	movs	r1, #1
 800318c:	2001      	movs	r0, #1
 800318e:	f7fe fed9 	bl	8001f44 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <leds_from_model+0x9c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 800319c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80031a0:	2102      	movs	r1, #2
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7fe fece 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverLoad) {
 80031a8:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <leds_from_model+0xa0>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 80031b2:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80031b6:	2102      	movs	r1, #2
 80031b8:	2002      	movs	r0, #2
 80031ba:	f7fe fec3 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 80031be:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <leds_from_model+0xa4>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 80031c8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80031cc:	2102      	movs	r1, #2
 80031ce:	2003      	movs	r0, #3
 80031d0:	f7fe feb8 	bl	8001f44 <LED_SetIntent>
    }

    LED_ApplyIntents();
 80031d4:	f7fe fed6 	bl	8001f84 <LED_ApplyIntents>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000570 	.word	0x20000570
 80031e0:	20000572 	.word	0x20000572
 80031e4:	200005bc 	.word	0x200005bc
 80031e8:	200005bf 	.word	0x200005bf
 80031ec:	200005bd 	.word	0x200005bd
 80031f0:	200005be 	.word	0x200005be

080031f4 <ModelHandle_SetMotor>:

/* ===== Public API ===== */
void ModelHandle_SetMotor(bool on)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
    manualOverride = true;
 80031fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <ModelHandle_SetMotor+0x34>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
    Relay_Set(1, on);
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	4619      	mov	r1, r3
 8003208:	2001      	movs	r0, #1
 800320a:	f000 f8e9 	bl	80033e0 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <ModelHandle_SetMotor+0x24>
 8003214:	2201      	movs	r2, #1
 8003216:	e000      	b.n	800321a <ModelHandle_SetMotor+0x26>
 8003218:	2200      	movs	r2, #0
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <ModelHandle_SetMotor+0x38>)
 800321c:	701a      	strb	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005c0 	.word	0x200005c0
 800322c:	20000570 	.word	0x20000570

08003230 <ModelHandle_ClearManualOverride>:

void ModelHandle_ClearManualOverride(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
    manualOverride = false;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <ModelHandle_ClearManualOverride+0x14>)
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	200005c0 	.word	0x200005c0

08003248 <Motor_GetStatus>:

bool Motor_GetStatus(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
    return (motorStatus == 1U);
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <Motor_GetStatus+0x1c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	20000570 	.word	0x20000570

08003268 <ModelHandle_Process>:

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
    if (manualOverride && manualActive) {
 800326c:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <ModelHandle_Process+0x40>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <ModelHandle_Process+0x22>
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <ModelHandle_Process+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <ModelHandle_Process+0x22>
        protections_tick();
 8003280:	f7ff fed4 	bl	800302c <protections_tick>
        leds_from_model();
 8003284:	f7ff ff62 	bl	800314c <leds_from_model>
        return;
 8003288:	e00d      	b.n	80032a6 <ModelHandle_Process+0x3e>
    }

    countdown_tick();
 800328a:	f7ff fc89 	bl	8002ba0 <countdown_tick>
    twist_tick();
 800328e:	f7ff fccd 	bl	8002c2c <twist_tick>
    search_tick();
 8003292:	f7ff fd35 	bl	8002d00 <search_tick>
    timer_tick();
 8003296:	f7ff fdc5 	bl	8002e24 <timer_tick>
    semi_auto_tick();
 800329a:	f7ff fe99 	bl	8002fd0 <semi_auto_tick>
    protections_tick();
 800329e:	f7ff fec5 	bl	800302c <protections_tick>
    leds_from_model();
 80032a2:	f7ff ff53 	bl	800314c <leds_from_model>
}
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200005c0 	.word	0x200005c0
 80032ac:	20000571 	.word	0x20000571

080032b0 <ModelHandle_ProcessUartCommand>:

void ModelHandle_ProcessUartCommand(const char* cmd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d033      	beq.n	8003326 <ModelHandle_ProcessUartCommand+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02f      	beq.n	8003326 <ModelHandle_ProcessUartCommand+0x76>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 80032c6:	491a      	ldr	r1, [pc, #104]	@ (8003330 <ModelHandle_ProcessUartCommand+0x80>)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fc ff41 	bl	8000150 <strcmp>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <ModelHandle_ProcessUartCommand+0x3c>
        manualOverride = true;
 80032d4:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <ModelHandle_ProcessUartCommand+0x84>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
        manualActive   = true;
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <ModelHandle_ProcessUartCommand+0x88>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
        start_motor();
 80032e0:	f7ff fbc6 	bl	8002a70 <start_motor>
        printf("Manual ON (UART)\r\n");
 80032e4:	4815      	ldr	r0, [pc, #84]	@ (800333c <ModelHandle_ProcessUartCommand+0x8c>)
 80032e6:	f007 f935 	bl	800a554 <puts>
 80032ea:	e01d      	b.n	8003328 <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 80032ec:	4914      	ldr	r1, [pc, #80]	@ (8003340 <ModelHandle_ProcessUartCommand+0x90>)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fc ff2e 	bl	8000150 <strcmp>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <ModelHandle_ProcessUartCommand+0x62>
        manualOverride = true;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <ModelHandle_ProcessUartCommand+0x84>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
        manualActive   = false;
 8003300:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <ModelHandle_ProcessUartCommand+0x88>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
        stop_motor();
 8003306:	f7ff fbba 	bl	8002a7e <stop_motor>
        printf("Manual OFF (UART)\r\n");
 800330a:	480e      	ldr	r0, [pc, #56]	@ (8003344 <ModelHandle_ProcessUartCommand+0x94>)
 800330c:	f007 f922 	bl	800a554 <puts>
 8003310:	e00a      	b.n	8003328 <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "SEMI_AUTO_START") == 0) {
 8003312:	490d      	ldr	r1, [pc, #52]	@ (8003348 <ModelHandle_ProcessUartCommand+0x98>)
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fc ff1b 	bl	8000150 <strcmp>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <ModelHandle_ProcessUartCommand+0x78>
        ModelHandle_StartSemiAuto();
 8003320:	f7ff fe14 	bl	8002f4c <ModelHandle_StartSemiAuto>
 8003324:	e000      	b.n	8003328 <ModelHandle_ProcessUartCommand+0x78>
    if (!cmd || !*cmd) return;
 8003326:	bf00      	nop
    }
}
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	0800c99c 	.word	0x0800c99c
 8003334:	200005c0 	.word	0x200005c0
 8003338:	20000571 	.word	0x20000571
 800333c:	0800c9a8 	.word	0x0800c9a8
 8003340:	0800c9bc 	.word	0x0800c9bc
 8003344:	0800c9c8 	.word	0x0800c9c8
 8003348:	0800c9dc 	.word	0x0800c9dc

0800334c <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	4b1e      	ldr	r3, [pc, #120]	@ (80033d8 <Relay_Init+0x8c>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4a1d      	ldr	r2, [pc, #116]	@ (80033d8 <Relay_Init+0x8c>)
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	6193      	str	r3, [r2, #24]
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <Relay_Init+0x8c>)
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003376:	2301      	movs	r3, #1
 8003378:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2302      	movs	r3, #2
 8003380:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e01e      	b.n	80033c6 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <Relay_Init+0x90>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	889b      	ldrh	r3, [r3, #4]
 8003392:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 8003394:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <Relay_Init+0x90>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800339c:	1d3a      	adds	r2, r7, #4
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fdfb 	bl	8005f9c <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 80033a6:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <Relay_Init+0x90>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80033ae:	4a0b      	ldr	r2, [pc, #44]	@ (80033dc <Relay_Init+0x90>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	889b      	ldrh	r3, [r3, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	4619      	mov	r1, r3
 80033bc:	f002 ff89 	bl	80062d2 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	dddd      	ble.n	8003388 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	0800cce0 	.word	0x0800cce0

080033e0 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	460a      	mov	r2, r1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	4613      	mov	r3, r2
 80033ee:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <Relay_Set+0x3c>
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d80f      	bhi.n	800341c <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	3b01      	subs	r3, #1
 8003400:	4a08      	ldr	r2, [pc, #32]	@ (8003424 <Relay_Set+0x44>)
 8003402:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a06      	ldr	r2, [pc, #24]	@ (8003424 <Relay_Set+0x44>)
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003412:	79ba      	ldrb	r2, [r7, #6]
 8003414:	4619      	mov	r1, r3
 8003416:	f002 ff5c 	bl	80062d2 <HAL_GPIO_WritePin>
 800341a:	e000      	b.n	800341e <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 800341c:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	0800cce0 	.word	0x0800cce0

08003428 <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <rf_delay_us+0x2c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8003438:	bf00      	nop
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <rf_delay_us+0x2c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d8f9      	bhi.n	800343a <rf_delay_us+0x12>
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000410 	.word	0x20000410

08003458 <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	@ 0x80
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <RF_Init+0x14>)
 8003462:	f002 ff36 	bl	80062d2 <HAL_GPIO_WritePin>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40010c00 	.word	0x40010c00

08003470 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 800347a:	2201      	movs	r2, #1
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	4809      	ldr	r0, [pc, #36]	@ (80034a4 <send_high_low+0x34>)
 8003480:	f002 ff27 	bl	80062d2 <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ffcf 	bl	8003428 <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <send_high_low+0x34>)
 8003490:	f002 ff1f 	bl	80062d2 <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 8003494:	6838      	ldr	r0, [r7, #0]
 8003496:	f7ff ffc7 	bl	8003428 <rf_delay_us>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40010c00 	.word	0x40010c00

080034a8 <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 80034b8:	f44f 7161 	mov.w	r1, #900	@ 0x384
 80034bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80034c0:	f7ff ffd6 	bl	8003470 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 80034c4:	e005      	b.n	80034d2 <send_bit+0x2a>
        send_high_low(900, 300);
 80034c6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80034ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80034ce:	f7ff ffcf 	bl	8003470 <send_high_low>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e031      	b.n	8003550 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 80034ec:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 80034f0:	f240 1013 	movw	r0, #275	@ 0x113
 80034f4:	f7ff ffbc 	bl	8003470 <send_high_low>
        rf_delay_us(1000);
 80034f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034fc:	f7ff ff94 	bl	8003428 <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	3b01      	subs	r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	72fb      	strb	r3, [r7, #11]
 8003508:	e011      	b.n	800352e <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 800350a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ffc3 	bl	80034a8 <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003522:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	72fb      	strb	r3, [r7, #11]
 800352e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003532:	2b00      	cmp	r3, #0
 8003534:	dae9      	bge.n	800350a <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 8003536:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800353a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800353e:	f7ff ff97 	bl	8003470 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 8003542:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003546:	f7ff ff6f 	bl	8003428 <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3301      	adds	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b03      	cmp	r3, #3
 8003554:	ddca      	ble.n	80034ec <RF_SendCode+0x12>
    }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4413      	add	r3, r2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 8003596:	2332      	movs	r3, #50	@ 0x32
 8003598:	2202      	movs	r2, #2
 800359a:	21d0      	movs	r1, #208	@ 0xd0
 800359c:	4822      	ldr	r0, [pc, #136]	@ (8003628 <RTC_Init+0x98>)
 800359e:	f003 fc79 	bl	8006e94 <HAL_I2C_IsDeviceReady>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 80035a8:	4b20      	ldr	r3, [pc, #128]	@ (800362c <RTC_Init+0x9c>)
 80035aa:	22d0      	movs	r2, #208	@ 0xd0
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	e010      	b.n	80035d2 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 80035b0:	2332      	movs	r3, #50	@ 0x32
 80035b2:	2202      	movs	r2, #2
 80035b4:	21ae      	movs	r1, #174	@ 0xae
 80035b6:	481c      	ldr	r0, [pc, #112]	@ (8003628 <RTC_Init+0x98>)
 80035b8:	f003 fc6c 	bl	8006e94 <HAL_I2C_IsDeviceReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <RTC_Init+0x9c>)
 80035c4:	22ae      	movs	r2, #174	@ 0xae
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	e003      	b.n	80035d2 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <RTC_Init+0x9c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	801a      	strh	r2, [r3, #0]
 80035d0:	e027      	b.n	8003622 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <RTC_Init+0x9c>)
 80035d4:	8819      	ldrh	r1, [r3, #0]
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	2301      	movs	r3, #1
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2301      	movs	r3, #1
 80035e6:	2200      	movs	r2, #0
 80035e8:	480f      	ldr	r0, [pc, #60]	@ (8003628 <RTC_Init+0x98>)
 80035ea:	f003 f9df 	bl	80069ac <HAL_I2C_Mem_Read>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d116      	bne.n	8003622 <RTC_Init+0x92>
        if (sec & 0x80u) {
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da12      	bge.n	8003622 <RTC_Init+0x92>
            sec &= 0x7Fu;
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003602:	b2db      	uxtb	r3, r3
 8003604:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <RTC_Init+0x9c>)
 8003608:	8819      	ldrh	r1, [r3, #0]
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	9302      	str	r3, [sp, #8]
 8003610:	2301      	movs	r3, #1
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2301      	movs	r3, #1
 800361a:	2200      	movs	r2, #0
 800361c:	4802      	ldr	r0, [pc, #8]	@ (8003628 <RTC_Init+0x98>)
 800361e:	f003 f8cb 	bl	80067b8 <HAL_I2C_Mem_Write>
        }
    }
}
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000350 	.word	0x20000350
 800362c:	200005e4 	.word	0x200005e4

08003630 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 8003636:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <RTC_GetTimeDate+0x130>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8089 	beq.w	8003752 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8003640:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <RTC_GetTimeDate+0x130>)
 8003642:	8819      	ldrh	r1, [r3, #0]
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	2307      	movs	r3, #7
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	2200      	movs	r2, #0
 8003656:	4843      	ldr	r0, [pc, #268]	@ (8003764 <RTC_GetTimeDate+0x134>)
 8003658:	f003 f9a8 	bl	80069ac <HAL_I2C_Mem_Read>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d179      	bne.n	8003756 <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8003662:	793b      	ldrb	r3, [r7, #4]
 8003664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003668:	b2db      	uxtb	r3, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff78 	bl	8003560 <bcd2dec>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4b3c      	ldr	r3, [pc, #240]	@ (8003768 <RTC_GetTimeDate+0x138>)
 8003676:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 8003678:	797b      	ldrb	r3, [r7, #5]
 800367a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff6d 	bl	8003560 <bcd2dec>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <RTC_GetTimeDate+0x138>)
 800368c:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 800368e:	79bb      	ldrb	r3, [r7, #6]
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d025      	beq.n	80036e4 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 8003698:	79bb      	ldrb	r3, [r7, #6]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <bcd2dec>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 80036aa:	79bb      	ldrb	r3, [r7, #6]
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d108      	bne.n	80036ce <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <RTC_GetTimeDate+0x96>
 80036c2:	220c      	movs	r2, #12
 80036c4:	e000      	b.n	80036c8 <RTC_GetTimeDate+0x98>
 80036c6:	2200      	movs	r2, #0
 80036c8:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <RTC_GetTimeDate+0x138>)
 80036ca:	709a      	strb	r2, [r3, #2]
 80036cc:	e015      	b.n	80036fa <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <RTC_GetTimeDate+0xac>
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	330c      	adds	r3, #12
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e000      	b.n	80036de <RTC_GetTimeDate+0xae>
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <RTC_GetTimeDate+0x138>)
 80036e0:	7093      	strb	r3, [r2, #2]
 80036e2:	e00a      	b.n	80036fa <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 80036e4:	79bb      	ldrb	r3, [r7, #6]
 80036e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff37 	bl	8003560 <bcd2dec>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <RTC_GetTimeDate+0x138>)
 80036f8:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff2c 	bl	8003560 <bcd2dec>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b16      	ldr	r3, [pc, #88]	@ (8003768 <RTC_GetTimeDate+0x138>)
 800370e:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8003710:	7a3b      	ldrb	r3, [r7, #8]
 8003712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff21 	bl	8003560 <bcd2dec>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <RTC_GetTimeDate+0x138>)
 8003724:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 8003726:	7a7b      	ldrb	r3, [r7, #9]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff16 	bl	8003560 <bcd2dec>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <RTC_GetTimeDate+0x138>)
 800373a:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 800373c:	7abb      	ldrb	r3, [r7, #10]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff0e 	bl	8003560 <bcd2dec>
 8003744:	4603      	mov	r3, r0
 8003746:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <RTC_GetTimeDate+0x138>)
 800374e:	80da      	strh	r2, [r3, #6]
 8003750:	e002      	b.n	8003758 <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <RTC_GetTimeDate+0x128>
        return;
 8003756:	bf00      	nop
}
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200005e4 	.word	0x200005e4
 8003764:	20000350 	.word	0x20000350
 8003768:	200005dc 	.word	0x200005dc

0800376c <lcd_line>:
static uint16_t edit_search_gap_s = 60, edit_search_dry_s = 10;
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 8003778:	f107 000c 	add.w	r0, r7, #12
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4a09      	ldr	r2, [pc, #36]	@ (80037a4 <lcd_line+0x38>)
 8003780:	2111      	movs	r1, #17
 8003782:	f006 feef 	bl	800a564 <sniprintf>
    lcd_put_cur(row, 0);
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fa4c 	bl	8001c28 <lcd_put_cur>
    lcd_send_string(ln);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fa69 	bl	8001c6c <lcd_send_string>
}
 800379a:	bf00      	nop
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	0800ca48 	.word	0x0800ca48

080037a8 <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7ff ffda 	bl	800376c <lcd_line>
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7ff ffce 	bl	800376c <lcd_line>
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
 80037dc:	f001 fcca 	bl	8005174 <HAL_GetTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4a02      	ldr	r2, [pc, #8]	@ (80037ec <refreshInactivityTimer+0x14>)
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200005f4 	.word	0x200005f4

080037f0 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <goto_menu_top+0x18>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	4b04      	ldr	r3, [pc, #16]	@ (800380c <goto_menu_top+0x1c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	200005fc 	.word	0x200005fc
 800380c:	20000600 	.word	0x20000600

08003810 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	@ 0x30
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	70fb      	strb	r3, [r7, #3]
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d820      	bhi.n	8003866 <format_menu_line+0x56>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db1d      	blt.n	8003866 <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <format_menu_line+0x24>
 8003830:	233e      	movs	r3, #62	@ 0x3e
 8003832:	e000      	b.n	8003836 <format_menu_line+0x26>
 8003834:	2320      	movs	r3, #32
 8003836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 800383a:	4a10      	ldr	r2, [pc, #64]	@ (800387c <format_menu_line+0x6c>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	f107 0014 	add.w	r0, r7, #20
 8003846:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <format_menu_line+0x70>)
 8003848:	2110      	movs	r1, #16
 800384a:	f006 fe8b 	bl	800a564 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 800384e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <format_menu_line+0x74>)
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f006 fe80 	bl	800a564 <sniprintf>
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8003864:	e005      	b.n	8003872 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 8003866:	4a08      	ldr	r2, [pc, #32]	@ (8003888 <format_menu_line+0x78>)
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f006 fe7a 	bl	800a564 <sniprintf>
    }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	@ 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2000002c 	.word	0x2000002c
 8003880:	0800ca54 	.word	0x0800ca54
 8003884:	0800ca60 	.word	0x0800ca60
 8003888:	0800ca68 	.word	0x0800ca68

0800388c <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
    lcd_clear();
 8003890:	f7fe f9bd 	bl	8001c0e <lcd_clear>
    lcd_line0("  Welcome to ");
 8003894:	4803      	ldr	r0, [pc, #12]	@ (80038a4 <show_welcome+0x18>)
 8003896:	f7ff ff87 	bl	80037a8 <lcd_line0>
    lcd_line1("   HELONIX   ");
 800389a:	4803      	ldr	r0, [pc, #12]	@ (80038a8 <show_welcome+0x1c>)
 800389c:	f7ff ff90 	bl	80037c0 <lcd_line1>
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0800ca7c 	.word	0x0800ca7c
 80038a8:	0800ca8c 	.word	0x0800ca8c

080038ac <show_dash>:

static void show_dash(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b092      	sub	sp, #72	@ 0x48
 80038b0:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 80038b2:	f7ff fcc9 	bl	8003248 <Motor_GetStatus>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <show_dash+0x14>
 80038bc:	4b44      	ldr	r3, [pc, #272]	@ (80039d0 <show_dash+0x124>)
 80038be:	e000      	b.n	80038c2 <show_dash+0x16>
 80038c0:	4b44      	ldr	r3, [pc, #272]	@ (80039d4 <show_dash+0x128>)
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 80038c4:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <show_dash+0x12c>)
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 80038c8:	4b44      	ldr	r3, [pc, #272]	@ (80039dc <show_dash+0x130>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <show_dash+0x2c>
 80038d2:	4b43      	ldr	r3, [pc, #268]	@ (80039e0 <show_dash+0x134>)
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d6:	e026      	b.n	8003926 <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 80038d8:	4b42      	ldr	r3, [pc, #264]	@ (80039e4 <show_dash+0x138>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <show_dash+0x3c>
 80038e2:	4b41      	ldr	r3, [pc, #260]	@ (80039e8 <show_dash+0x13c>)
 80038e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e6:	e01e      	b.n	8003926 <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 80038e8:	4b40      	ldr	r3, [pc, #256]	@ (80039ec <show_dash+0x140>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <show_dash+0x4c>
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <show_dash+0x144>)
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f6:	e016      	b.n	8003926 <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 80038f8:	4b3e      	ldr	r3, [pc, #248]	@ (80039f4 <show_dash+0x148>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <show_dash+0x5c>
 8003902:	4b3d      	ldr	r3, [pc, #244]	@ (80039f8 <show_dash+0x14c>)
 8003904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003906:	e00e      	b.n	8003926 <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 8003908:	4b3c      	ldr	r3, [pc, #240]	@ (80039fc <show_dash+0x150>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <show_dash+0x6c>
 8003912:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <show_dash+0x154>)
 8003914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003916:	e006      	b.n	8003926 <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 8003918:	4b3a      	ldr	r3, [pc, #232]	@ (8003a04 <show_dash+0x158>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <show_dash+0x7a>
 8003922:	4b39      	ldr	r3, [pc, #228]	@ (8003a08 <show_dash+0x15c>)
 8003924:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 8003926:	f107 0018 	add.w	r0, r7, #24
 800392a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003930:	4a36      	ldr	r2, [pc, #216]	@ (8003a0c <show_dash+0x160>)
 8003932:	2111      	movs	r1, #17
 8003934:	f006 fe16 	bl	800a564 <sniprintf>

    int submergedCount = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 800393c:	2300      	movs	r3, #0
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003940:	e012      	b.n	8003968 <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8003942:	4a33      	ldr	r2, [pc, #204]	@ (8003a10 <show_dash+0x164>)
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	3302      	adds	r3, #2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4931      	ldr	r1, [pc, #196]	@ (8003a14 <show_dash+0x168>)
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fb4f 	bl	8000ff4 <__aeabi_fcmplt>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <show_dash+0xb6>
 800395c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395e:	3301      	adds	r3, #1
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003964:	3301      	adds	r3, #1
 8003966:	637b      	str	r3, [r7, #52]	@ 0x34
 8003968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396a:	2b04      	cmp	r3, #4
 800396c:	dde9      	ble.n	8003942 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003970:	2b03      	cmp	r3, #3
 8003972:	d817      	bhi.n	80039a4 <show_dash+0xf8>
 8003974:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <show_dash+0xd0>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003993 	.word	0x08003993
 8003984:	08003999 	.word	0x08003999
 8003988:	0800399f 	.word	0x0800399f
        case 0:  level = "EMPTY"; break;
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <show_dash+0x16c>)
 800398e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003990:	e00b      	b.n	80039aa <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8003992:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <show_dash+0x170>)
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
 8003996:	e008      	b.n	80039aa <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 8003998:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <show_dash+0x174>)
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
 800399c:	e005      	b.n	80039aa <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <show_dash+0x178>)
 80039a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a2:	e002      	b.n	80039aa <show_dash+0xfe>
        default: level = "FULL";  break;
 80039a4:	4b20      	ldr	r3, [pc, #128]	@ (8003a28 <show_dash+0x17c>)
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a8:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 80039aa:	1d38      	adds	r0, r7, #4
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	4a1f      	ldr	r2, [pc, #124]	@ (8003a2c <show_dash+0x180>)
 80039b0:	2111      	movs	r1, #17
 80039b2:	f006 fdd7 	bl	800a564 <sniprintf>

    lcd_line0(line0);
 80039b6:	f107 0318 	add.w	r3, r7, #24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fef4 	bl	80037a8 <lcd_line0>
    lcd_line1(line1);
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fefc 	bl	80037c0 <lcd_line1>
}
 80039c8:	bf00      	nop
 80039ca:	3740      	adds	r7, #64	@ 0x40
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	0800ca9c 	.word	0x0800ca9c
 80039d4:	0800caa0 	.word	0x0800caa0
 80039d8:	0800caa4 	.word	0x0800caa4
 80039dc:	20000571 	.word	0x20000571
 80039e0:	0800caac 	.word	0x0800caac
 80039e4:	20000576 	.word	0x20000576
 80039e8:	0800cab4 	.word	0x0800cab4
 80039ec:	20000575 	.word	0x20000575
 80039f0:	0800cac0 	.word	0x0800cac0
 80039f4:	20000574 	.word	0x20000574
 80039f8:	0800cac8 	.word	0x0800cac8
 80039fc:	20000572 	.word	0x20000572
 8003a00:	0800cad0 	.word	0x0800cad0
 8003a04:	20000573 	.word	0x20000573
 8003a08:	0800cad8 	.word	0x0800cad8
 8003a0c:	0800cae0 	.word	0x0800cae0
 8003a10:	200004a0 	.word	0x200004a0
 8003a14:	3dcccccd 	.word	0x3dcccccd
 8003a18:	0800cae8 	.word	0x0800cae8
 8003a1c:	0800caf0 	.word	0x0800caf0
 8003a20:	0800caf4 	.word	0x0800caf4
 8003a24:	0800cafc 	.word	0x0800cafc
 8003a28:	0800cb00 	.word	0x0800cb00
 8003a2c:	0800cb08 	.word	0x0800cb08

08003a30 <show_menu>:

static void show_menu(void){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8003a36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <show_menu+0xb0>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <show_menu+0xb4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	da04      	bge.n	8003a4c <show_menu+0x1c>
 8003a42:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <show_menu+0xb0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a27      	ldr	r2, [pc, #156]	@ (8003ae4 <show_menu+0xb4>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <show_menu+0xb4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <show_menu+0xb0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	da04      	bge.n	8003a64 <show_menu+0x34>
 8003a5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <show_menu+0xb0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4a20      	ldr	r2, [pc, #128]	@ (8003ae4 <show_menu+0xb4>)
 8003a62:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 8003a64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae4 <show_menu+0xb4>)
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <show_menu+0xb0>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <show_menu+0xb4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d105      	bne.n	8003a80 <show_menu+0x50>
 8003a74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae8 <show_menu+0xb8>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <show_menu+0x50>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <show_menu+0x52>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f107 0014 	add.w	r0, r7, #20
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	2111      	movs	r1, #17
 8003a90:	f7ff febe 	bl	8003810 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8003a94:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <show_menu+0xb4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1c59      	adds	r1, r3, #1
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <show_menu+0xb4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <show_menu+0xb0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d105      	bne.n	8003ab4 <show_menu+0x84>
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <show_menu+0xb8>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <show_menu+0x84>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <show_menu+0x86>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4638      	mov	r0, r7
 8003abe:	460a      	mov	r2, r1
 8003ac0:	2111      	movs	r1, #17
 8003ac2:	f7ff fea5 	bl	8003810 <format_menu_line>
    lcd_line0(line0);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fe6c 	bl	80037a8 <lcd_line0>
    lcd_line1(line1);
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fe74 	bl	80037c0 <lcd_line1>
}
 8003ad8:	bf00      	nop
 8003ada:	3728      	adds	r7, #40	@ 0x28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200005fc 	.word	0x200005fc
 8003ae4:	20000600 	.word	0x20000600
 8003ae8:	2000002b 	.word	0x2000002b

08003aec <show_manual>:

static void show_manual(void){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	@ 0x28
 8003af0:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <show_manual+0x54>)
 8003af8:	2111      	movs	r1, #17
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 fd32 	bl	800a564 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8003b00:	f7ff fba2 	bl	8003248 <Motor_GetStatus>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <show_manual+0x2c>
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <show_manual+0x58>)
 8003b0e:	2111      	movs	r1, #17
 8003b10:	4618      	mov	r0, r3
 8003b12:	f006 fd27 	bl	800a564 <sniprintf>
 8003b16:	e005      	b.n	8003b24 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 8003b18:	463b      	mov	r3, r7
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <show_manual+0x5c>)
 8003b1c:	2111      	movs	r1, #17
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f006 fd20 	bl	800a564 <sniprintf>
    lcd_line0(line0);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fe3d 	bl	80037a8 <lcd_line0>
    lcd_line1(line1);
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fe45 	bl	80037c0 <lcd_line1>
}
 8003b36:	bf00      	nop
 8003b38:	3728      	adds	r7, #40	@ 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0800c9ec 	.word	0x0800c9ec
 8003b44:	0800cb14 	.word	0x0800cb14
 8003b48:	0800cb24 	.word	0x0800cb24

08003b4c <show_semi_auto>:

static void show_semi_auto(void){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4a11      	ldr	r2, [pc, #68]	@ (8003b9c <show_semi_auto+0x50>)
 8003b58:	2111      	movs	r1, #17
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 fd02 	bl	800a564 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <show_semi_auto+0x54>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <show_semi_auto+0x2a>
 8003b68:	463b      	mov	r3, r7
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <show_semi_auto+0x58>)
 8003b6c:	2111      	movs	r1, #17
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f006 fcf8 	bl	800a564 <sniprintf>
 8003b74:	e005      	b.n	8003b82 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 8003b76:	463b      	mov	r3, r7
 8003b78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba8 <show_semi_auto+0x5c>)
 8003b7a:	2111      	movs	r1, #17
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f006 fcf1 	bl	800a564 <sniprintf>
    lcd_line0(line0);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fe0e 	bl	80037a8 <lcd_line0>
    lcd_line1(line1);
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe16 	bl	80037c0 <lcd_line1>
}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	@ 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0800c9f8 	.word	0x0800c9f8
 8003ba0:	200005f8 	.word	0x200005f8
 8003ba4:	0800cb34 	.word	0x0800cb34
 8003ba8:	0800cb44 	.word	0x0800cb44

08003bac <show_timer>:

static void show_timer(void){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	@ 0x30
 8003bb0:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <show_timer+0x54>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <show_timer+0x58>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f107 0014 	add.w	r0, r7, #20
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	4a10      	ldr	r2, [pc, #64]	@ (8003c08 <show_timer+0x5c>)
 8003bc6:	2111      	movs	r1, #17
 8003bc8:	f006 fccc 	bl	800a564 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c0c <show_timer+0x60>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <show_timer+0x64>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <show_timer+0x68>)
 8003bde:	2111      	movs	r1, #17
 8003be0:	f006 fcc0 	bl	800a564 <sniprintf>
    lcd_line0(l0);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fddd 	bl	80037a8 <lcd_line0>
    lcd_line1(l1);
 8003bee:	463b      	mov	r3, r7
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fde5 	bl	80037c0 <lcd_line1>
}
 8003bf6:	bf00      	nop
 8003bf8:	3728      	adds	r7, #40	@ 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000048 	.word	0x20000048
 8003c04:	20000049 	.word	0x20000049
 8003c08:	0800cb54 	.word	0x0800cb54
 8003c0c:	2000004a 	.word	0x2000004a
 8003c10:	2000004b 	.word	0x2000004b
 8003c14:	0800cb64 	.word	0x0800cb64

08003c18 <show_search>:

static void show_search(void){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	@ 0x30
 8003c1c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds",edit_search_gap_s,edit_search_dry_s);
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <show_search+0x48>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <show_search+0x4c>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	f107 0014 	add.w	r0, r7, #20
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	4a0d      	ldr	r2, [pc, #52]	@ (8003c68 <show_search+0x50>)
 8003c32:	2111      	movs	r1, #17
 8003c34:	f006 fc96 	bl	800a564 <sniprintf>
    snprintf(l1,sizeof(l1),">Edit     Back");
 8003c38:	463b      	mov	r3, r7
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <show_search+0x54>)
 8003c3c:	2111      	movs	r1, #17
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f006 fc90 	bl	800a564 <sniprintf>
    lcd_line0(l0);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fdad 	bl	80037a8 <lcd_line0>
    lcd_line1(l1);
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fdb5 	bl	80037c0 <lcd_line1>
}
 8003c56:	bf00      	nop
 8003c58:	3728      	adds	r7, #40	@ 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000004c 	.word	0x2000004c
 8003c64:	2000004e 	.word	0x2000004e
 8003c68:	0800cb78 	.word	0x0800cb78
 8003c6c:	0800cb8c 	.word	0x0800cb8c

08003c70 <show_countdown>:

static void show_countdown(void){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b090      	sub	sp, #64	@ 0x40
 8003c74:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    if (countdownActive) {
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <show_countdown+0x84>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01e      	beq.n	8003cbe <show_countdown+0x4e>
        uint32_t sec = countdownDuration;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <show_countdown+0x88>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	4a1c      	ldr	r2, [pc, #112]	@ (8003cfc <show_countdown+0x8c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s = sec%60;
 8003c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <show_countdown+0x8c>)
 8003c96:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9a:	0959      	lsrs	r1, r3, #5
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a5b      	subs	r3, r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Count %02d:%02d",(int)min,(int)s);
 8003ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	f107 0018 	add.w	r0, r7, #24
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <show_countdown+0x90>)
 8003cb6:	2111      	movs	r1, #17
 8003cb8:	f006 fc54 	bl	800a564 <sniprintf>
 8003cbc:	e006      	b.n	8003ccc <show_countdown+0x5c>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8003cbe:	f107 0318 	add.w	r3, r7, #24
 8003cc2:	4a10      	ldr	r2, [pc, #64]	@ (8003d04 <show_countdown+0x94>)
 8003cc4:	2111      	movs	r1, #17
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f006 fc4c 	bl	800a564 <sniprintf>
    }
    snprintf(l1,sizeof(l1),">Set Start Back");
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	4a0e      	ldr	r2, [pc, #56]	@ (8003d08 <show_countdown+0x98>)
 8003cd0:	2111      	movs	r1, #17
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f006 fc46 	bl	800a564 <sniprintf>
    lcd_line0(l0);
 8003cd8:	f107 0318 	add.w	r3, r7, #24
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fd63 	bl	80037a8 <lcd_line0>
    lcd_line1(l1);
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fd6b 	bl	80037c0 <lcd_line1>
}
 8003cea:	bf00      	nop
 8003cec:	3738      	adds	r7, #56	@ 0x38
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000572 	.word	0x20000572
 8003cf8:	20000578 	.word	0x20000578
 8003cfc:	88888889 	.word	0x88888889
 8003d00:	0800cb9c 	.word	0x0800cb9c
 8003d04:	0800cbac 	.word	0x0800cbac
 8003d08:	0800cbbc 	.word	0x0800cbbc

08003d0c <show_twist>:

static void show_twist(void){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds",edit_twist_on_s);
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <show_twist+0x40>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	f107 0014 	add.w	r0, r7, #20
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <show_twist+0x44>)
 8003d1c:	2111      	movs	r1, #17
 8003d1e:	f006 fc21 	bl	800a564 <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds",edit_twist_off_s);
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <show_twist+0x48>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	4638      	mov	r0, r7
 8003d28:	4a0b      	ldr	r2, [pc, #44]	@ (8003d58 <show_twist+0x4c>)
 8003d2a:	2111      	movs	r1, #17
 8003d2c:	f006 fc1a 	bl	800a564 <sniprintf>
    lcd_line0(l0);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fd37 	bl	80037a8 <lcd_line0>
    lcd_line1(l1);
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fd3f 	bl	80037c0 <lcd_line1>
}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	@ 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000050 	.word	0x20000050
 8003d50:	0800cbcc 	.word	0x0800cbcc
 8003d54:	20000052 	.word	0x20000052
 8003d58:	0800cbdc 	.word	0x0800cbdc

08003d5c <apply_search_settings>:

/* ===== Apply functions ===== */
static void apply_search_settings(void){
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <apply_search_settings+0x1c>)
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <apply_search_settings+0x20>)
 8003d66:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <apply_search_settings+0x24>)
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	4b03      	ldr	r3, [pc, #12]	@ (8003d7c <apply_search_settings+0x20>)
 8003d6e:	809a      	strh	r2, [r3, #4]
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	2000004c 	.word	0x2000004c
 8003d7c:	2000001c 	.word	0x2000001c
 8003d80:	2000004e 	.word	0x2000004e

08003d84 <apply_twist_settings>:

static void apply_twist_settings(void){
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <apply_twist_settings+0x1c>)
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <apply_twist_settings+0x20>)
 8003d8e:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8003d90:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <apply_twist_settings+0x24>)
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <apply_twist_settings+0x20>)
 8003d96:	809a      	strh	r2, [r3, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	20000050 	.word	0x20000050
 8003da4:	20000024 	.word	0x20000024
 8003da8:	20000052 	.word	0x20000052

08003dac <apply_countdown_settings>:

static void apply_countdown_settings(void){
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <apply_countdown_settings+0x20>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <apply_countdown_settings+0x24>)
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000054 	.word	0x20000054
 8003dd0:	20000578 	.word	0x20000578

08003dd4 <enable_semi_auto>:

static void enable_semi_auto(void){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 8003dd8:	f7ff fa2a 	bl	8003230 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 8003ddc:	f7ff f8b6 	bl	8002f4c <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8003de0:	4b02      	ldr	r3, [pc, #8]	@ (8003dec <enable_semi_auto+0x18>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	200005f8 	.word	0x200005f8

08003df0 <disable_semi_auto>:
static void disable_semi_auto(void){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7ff f9fd 	bl	80031f4 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 8003dfa:	4b02      	ldr	r3, [pc, #8]	@ (8003e04 <disable_semi_auto+0x14>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200005f8 	.word	0x200005f8

08003e08 <apply_timer_settings>:

static void apply_timer_settings(void){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <apply_timer_settings+0x3c>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <apply_timer_settings+0x40>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	4a0d      	ldr	r2, [pc, #52]	@ (8003e4c <apply_timer_settings+0x44>)
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fddc 	bl	80029da <ModelHandle_TimeToSeconds>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4a07      	ldr	r2, [pc, #28]	@ (8003e44 <apply_timer_settings+0x3c>)
 8003e26:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 8003e28:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <apply_timer_settings+0x48>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4a09      	ldr	r2, [pc, #36]	@ (8003e54 <apply_timer_settings+0x4c>)
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fdd1 	bl	80029da <ModelHandle_TimeToSeconds>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4a02      	ldr	r2, [pc, #8]	@ (8003e44 <apply_timer_settings+0x3c>)
 8003e3c:	6093      	str	r3, [r2, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000580 	.word	0x20000580
 8003e48:	20000048 	.word	0x20000048
 8003e4c:	20000049 	.word	0x20000049
 8003e50:	2000004a 	.word	0x2000004a
 8003e54:	2000004b 	.word	0x2000004b

08003e58 <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0dc      	sub	sp, #368	@ 0x170
 8003e5c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8003e5e:	f001 f989 	bl	8005174 <HAL_GetTick>
 8003e62:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168

    bool cursorBlinkActive = false;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
    switch (ui) {
 8003e6c:	4bb7      	ldr	r3, [pc, #732]	@ (800414c <Screen_Update+0x2f4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b11      	cmp	r3, #17
 8003e72:	bf8c      	ite	hi
 8003e74:	2201      	movhi	r2, #1
 8003e76:	2200      	movls	r2, #0
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d10f      	bne.n	8003e9e <Screen_Update+0x46>
 8003e7e:	4ab4      	ldr	r2, [pc, #720]	@ (8004150 <Screen_Update+0x2f8>)
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <Screen_Update+0x46>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            break;
 8003e9c:	e006      	b.n	8003eac <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            cursorVisible = true;
 8003ea4:	4bab      	ldr	r3, [pc, #684]	@ (8004154 <Screen_Update+0x2fc>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
            break;
 8003eaa:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8003eac:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01e      	beq.n	8003ef2 <Screen_Update+0x9a>
 8003eb4:	4ba8      	ldr	r3, [pc, #672]	@ (8004158 <Screen_Update+0x300>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d315      	bcc.n	8003ef2 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 8003ec6:	4ba3      	ldr	r3, [pc, #652]	@ (8004154 <Screen_Update+0x2fc>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	4b9c      	ldr	r3, [pc, #624]	@ (8004154 <Screen_Update+0x2fc>)
 8003ee2:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8003ee4:	4a9c      	ldr	r2, [pc, #624]	@ (8004158 <Screen_Update+0x300>)
 8003ee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003eea:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8003eec:	4b9b      	ldr	r3, [pc, #620]	@ (800415c <Screen_Update+0x304>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8003ef2:	4b96      	ldr	r3, [pc, #600]	@ (800414c <Screen_Update+0x2f4>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d112      	bne.n	8003f20 <Screen_Update+0xc8>
 8003efa:	4b99      	ldr	r3, [pc, #612]	@ (8004160 <Screen_Update+0x308>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d309      	bcc.n	8003f20 <Screen_Update+0xc8>
        ui = UI_DASH;
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800414c <Screen_Update+0x2f4>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003f12:	4a93      	ldr	r2, [pc, #588]	@ (8004160 <Screen_Update+0x308>)
 8003f14:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003f18:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8003f1a:	4b90      	ldr	r3, [pc, #576]	@ (800415c <Screen_Update+0x304>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8003f20:	4b8a      	ldr	r3, [pc, #552]	@ (800414c <Screen_Update+0x2f4>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <Screen_Update+0xf6>
 8003f28:	4b88      	ldr	r3, [pc, #544]	@ (800414c <Screen_Update+0x2f4>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00e      	beq.n	8003f4e <Screen_Update+0xf6>
 8003f30:	4b8c      	ldr	r3, [pc, #560]	@ (8004164 <Screen_Update+0x30c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d305      	bcc.n	8003f4e <Screen_Update+0xf6>
        ui = UI_DASH;
 8003f42:	4b82      	ldr	r3, [pc, #520]	@ (800414c <Screen_Update+0x2f4>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8003f48:	4b84      	ldr	r3, [pc, #528]	@ (800415c <Screen_Update+0x304>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800414c <Screen_Update+0x2f4>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10e      	bne.n	8003f74 <Screen_Update+0x11c>
 8003f56:	4b82      	ldr	r3, [pc, #520]	@ (8004160 <Screen_Update+0x308>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f64:	d306      	bcc.n	8003f74 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 8003f66:	4b7d      	ldr	r3, [pc, #500]	@ (800415c <Screen_Update+0x304>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8004160 <Screen_Update+0x308>)
 8003f6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003f72:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 8003f74:	4b79      	ldr	r3, [pc, #484]	@ (800415c <Screen_Update+0x304>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <Screen_Update+0x132>
 8003f7c:	4b73      	ldr	r3, [pc, #460]	@ (800414c <Screen_Update+0x2f4>)
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	4b79      	ldr	r3, [pc, #484]	@ (8004168 <Screen_Update+0x310>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	f000 8174 	beq.w	8004272 <Screen_Update+0x41a>
        bool fullRedraw = (ui != last_ui);
 8003f8a:	4b70      	ldr	r3, [pc, #448]	@ (800414c <Screen_Update+0x2f4>)
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	4b76      	ldr	r3, [pc, #472]	@ (8004168 <Screen_Update+0x310>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
        last_ui = ui;
 8003f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800414c <Screen_Update+0x2f4>)
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	4b71      	ldr	r3, [pc, #452]	@ (8004168 <Screen_Update+0x310>)
 8003fa4:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800415c <Screen_Update+0x304>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 8003fac:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <Screen_Update+0x160>
 8003fb4:	f7fd fe2b 	bl	8001c0e <lcd_clear>

        switch (ui) {
 8003fb8:	4b64      	ldr	r3, [pc, #400]	@ (800414c <Screen_Update+0x2f4>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b11      	cmp	r3, #17
 8003fbe:	f200 8151 	bhi.w	8004264 <Screen_Update+0x40c>
 8003fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <Screen_Update+0x170>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08004017 	.word	0x08004017
 8003fd0:	0800401d 	.word	0x0800401d
 8003fd4:	08004023 	.word	0x08004023
 8003fd8:	08004029 	.word	0x08004029
 8003fdc:	0800402f 	.word	0x0800402f
 8003fe0:	08004047 	.word	0x08004047
 8003fe4:	0800407b 	.word	0x0800407b
 8003fe8:	080040af 	.word	0x080040af
 8003fec:	080040e3 	.word	0x080040e3
 8003ff0:	08004035 	.word	0x08004035
 8003ff4:	08004117 	.word	0x08004117
 8003ff8:	08004199 	.word	0x08004199
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	080041cd 	.word	0x080041cd
 8004004:	08004041 	.word	0x08004041
 8004008:	08004201 	.word	0x08004201
 800400c:	08004235 	.word	0x08004235
            case UI_WELCOME: show_welcome(); break;
 8004010:	f7ff fc3c 	bl	800388c <show_welcome>
 8004014:	e12d      	b.n	8004272 <Screen_Update+0x41a>
            case UI_DASH: show_dash(); break;
 8004016:	f7ff fc49 	bl	80038ac <show_dash>
 800401a:	e12a      	b.n	8004272 <Screen_Update+0x41a>
            case UI_MENU: show_menu(); break;
 800401c:	f7ff fd08 	bl	8003a30 <show_menu>
 8004020:	e127      	b.n	8004272 <Screen_Update+0x41a>
            case UI_MANUAL: show_manual(); break;
 8004022:	f7ff fd63 	bl	8003aec <show_manual>
 8004026:	e124      	b.n	8004272 <Screen_Update+0x41a>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8004028:	f7ff fd90 	bl	8003b4c <show_semi_auto>
 800402c:	e121      	b.n	8004272 <Screen_Update+0x41a>
            case UI_TIMER: show_timer(); break;
 800402e:	f7ff fdbd 	bl	8003bac <show_timer>
 8004032:	e11e      	b.n	8004272 <Screen_Update+0x41a>
            case UI_SEARCH: show_search(); break;
 8004034:	f7ff fdf0 	bl	8003c18 <show_search>
 8004038:	e11b      	b.n	8004272 <Screen_Update+0x41a>
            case UI_COUNTDOWN: show_countdown(); break;
 800403a:	f7ff fe19 	bl	8003c70 <show_countdown>
 800403e:	e118      	b.n	8004272 <Screen_Update+0x41a>
            case UI_TWIST: show_twist(); break;
 8004040:	f7ff fe64 	bl	8003d0c <show_twist>
 8004044:	e115      	b.n	8004272 <Screen_Update+0x41a>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 8004046:	4b49      	ldr	r3, [pc, #292]	@ (800416c <Screen_Update+0x314>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800404e:	4a48      	ldr	r2, [pc, #288]	@ (8004170 <Screen_Update+0x318>)
 8004050:	2111      	movs	r1, #17
 8004052:	f006 fa87 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004056:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800405a:	4a46      	ldr	r2, [pc, #280]	@ (8004174 <Screen_Update+0x31c>)
 800405c:	2111      	movs	r1, #17
 800405e:	4618      	mov	r0, r3
 8004060:	f006 fa80 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004064:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fb9d 	bl	80037a8 <lcd_line0>
 800406e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fba4 	bl	80037c0 <lcd_line1>
 8004078:	e0fb      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 800407a:	4b3f      	ldr	r3, [pc, #252]	@ (8004178 <Screen_Update+0x320>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8004082:	4a3e      	ldr	r2, [pc, #248]	@ (800417c <Screen_Update+0x324>)
 8004084:	2111      	movs	r1, #17
 8004086:	f006 fa6d 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 800408a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800408e:	4a39      	ldr	r2, [pc, #228]	@ (8004174 <Screen_Update+0x31c>)
 8004090:	2111      	movs	r1, #17
 8004092:	4618      	mov	r0, r3
 8004094:	f006 fa66 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004098:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fb83 	bl	80037a8 <lcd_line0>
 80040a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fb8a 	bl	80037c0 <lcd_line1>
 80040ac:	e0e1      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 80040ae:	4b34      	ldr	r3, [pc, #208]	@ (8004180 <Screen_Update+0x328>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 80040b6:	4a33      	ldr	r2, [pc, #204]	@ (8004184 <Screen_Update+0x32c>)
 80040b8:	2111      	movs	r1, #17
 80040ba:	f006 fa53 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80040be:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80040c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <Screen_Update+0x31c>)
 80040c4:	2111      	movs	r1, #17
 80040c6:	4618      	mov	r0, r3
 80040c8:	f006 fa4c 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80040cc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fb69 	bl	80037a8 <lcd_line0>
 80040d6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fb70 	bl	80037c0 <lcd_line1>
 80040e0:	e0c7      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 80040e2:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <Screen_Update+0x330>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80040ea:	4a28      	ldr	r2, [pc, #160]	@ (800418c <Screen_Update+0x334>)
 80040ec:	2111      	movs	r1, #17
 80040ee:	f006 fa39 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80040f2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80040f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <Screen_Update+0x31c>)
 80040f8:	2111      	movs	r1, #17
 80040fa:	4618      	mov	r0, r3
 80040fc:	f006 fa32 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004100:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fb4f 	bl	80037a8 <lcd_line0>
 800410a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fb56 	bl	80037c0 <lcd_line1>
 8004114:	e0ad      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 8004116:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <Screen_Update+0x338>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800411e:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <Screen_Update+0x33c>)
 8004120:	2111      	movs	r1, #17
 8004122:	f006 fa1f 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004126:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800412a:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <Screen_Update+0x31c>)
 800412c:	2111      	movs	r1, #17
 800412e:	4618      	mov	r0, r3
 8004130:	f006 fa18 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004134:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fb35 	bl	80037a8 <lcd_line0>
 800413e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fb3c 	bl	80037c0 <lcd_line1>
 8004148:	e093      	b.n	8004272 <Screen_Update+0x41a>
 800414a:	bf00      	nop
 800414c:	200005ec 	.word	0x200005ec
 8004150:	00035bc4 	.word	0x00035bc4
 8004154:	2000002b 	.word	0x2000002b
 8004158:	200005f0 	.word	0x200005f0
 800415c:	200005ed 	.word	0x200005ed
 8004160:	200005e8 	.word	0x200005e8
 8004164:	200005f4 	.word	0x200005f4
 8004168:	2000002a 	.word	0x2000002a
 800416c:	20000048 	.word	0x20000048
 8004170:	0800cbec 	.word	0x0800cbec
 8004174:	0800cc00 	.word	0x0800cc00
 8004178:	20000049 	.word	0x20000049
 800417c:	0800cc14 	.word	0x0800cc14
 8004180:	2000004a 	.word	0x2000004a
 8004184:	0800cc28 	.word	0x0800cc28
 8004188:	2000004b 	.word	0x2000004b
 800418c:	0800cc3c 	.word	0x0800cc3c
 8004190:	2000004c 	.word	0x2000004c
 8004194:	0800cc50 	.word	0x0800cc50
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 8004198:	4b38      	ldr	r3, [pc, #224]	@ (800427c <Screen_Update+0x424>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80041a0:	4a37      	ldr	r2, [pc, #220]	@ (8004280 <Screen_Update+0x428>)
 80041a2:	2111      	movs	r1, #17
 80041a4:	f006 f9de 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80041a8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80041ac:	4a35      	ldr	r2, [pc, #212]	@ (8004284 <Screen_Update+0x42c>)
 80041ae:	2111      	movs	r1, #17
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 f9d7 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80041b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff faf4 	bl	80037a8 <lcd_line0>
 80041c0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fafb 	bl	80037c0 <lcd_line1>
 80041ca:	e052      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3d", edit_countdown_min);
 80041cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <Screen_Update+0x430>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80041d4:	4a2d      	ldr	r2, [pc, #180]	@ (800428c <Screen_Update+0x434>)
 80041d6:	2111      	movs	r1, #17
 80041d8:	f006 f9c4 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelStart");
 80041dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80041e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004290 <Screen_Update+0x438>)
 80041e2:	2111      	movs	r1, #17
 80041e4:	4618      	mov	r0, r3
 80041e6:	f006 f9bd 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80041ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fada 	bl	80037a8 <lcd_line0>
 80041f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fae1 	bl	80037c0 <lcd_line1>
 80041fe:	e038      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 8004200:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <Screen_Update+0x43c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8004208:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <Screen_Update+0x440>)
 800420a:	2111      	movs	r1, #17
 800420c:	f006 f9aa 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004214:	4a1b      	ldr	r2, [pc, #108]	@ (8004284 <Screen_Update+0x42c>)
 8004216:	2111      	movs	r1, #17
 8004218:	4618      	mov	r0, r3
 800421a:	f006 f9a3 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800421e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fac0 	bl	80037a8 <lcd_line0>
 8004228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fac7 	bl	80037c0 <lcd_line1>
 8004232:	e01e      	b.n	8004272 <Screen_Update+0x41a>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <Screen_Update+0x444>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	f107 0014 	add.w	r0, r7, #20
 800423c:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <Screen_Update+0x448>)
 800423e:	2111      	movs	r1, #17
 8004240:	f006 f990 	bl	800a564 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004244:	463b      	mov	r3, r7
 8004246:	4a0f      	ldr	r2, [pc, #60]	@ (8004284 <Screen_Update+0x42c>)
 8004248:	2111      	movs	r1, #17
 800424a:	4618      	mov	r0, r3
 800424c:	f006 f98a 	bl	800a564 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff faa7 	bl	80037a8 <lcd_line0>
 800425a:	463b      	mov	r3, r7
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff faaf 	bl	80037c0 <lcd_line1>
 8004262:	e006      	b.n	8004272 <Screen_Update+0x41a>
            }
            default:
                lcd_line0("Not Implemented");
 8004264:	480f      	ldr	r0, [pc, #60]	@ (80042a4 <Screen_Update+0x44c>)
 8004266:	f7ff fa9f 	bl	80037a8 <lcd_line0>
                lcd_line1("                ");
 800426a:	480f      	ldr	r0, [pc, #60]	@ (80042a8 <Screen_Update+0x450>)
 800426c:	f7ff faa8 	bl	80037c0 <lcd_line1>
                break;
 8004270:	bf00      	nop
        }
    }
}
 8004272:	bf00      	nop
 8004274:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	2000004e 	.word	0x2000004e
 8004280:	0800cc60 	.word	0x0800cc60
 8004284:	0800cc00 	.word	0x0800cc00
 8004288:	20000054 	.word	0x20000054
 800428c:	0800cc70 	.word	0x0800cc70
 8004290:	0800cc80 	.word	0x0800cc80
 8004294:	20000050 	.word	0x20000050
 8004298:	0800cc94 	.word	0x0800cc94
 800429c:	20000052 	.word	0x20000052
 80042a0:	0800cca4 	.word	0x0800cca4
 80042a4:	0800ccb4 	.word	0x0800ccb4
 80042a8:	0800ca68 	.word	0x0800ca68

080042ac <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
    lcd_init();
 80042b0:	f7fd fcf1 	bl	8001c96 <lcd_init>
    ui = UI_WELCOME;
 80042b4:	4b15      	ldr	r3, [pc, #84]	@ (800430c <Screen_Init+0x60>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <Screen_Init+0x64>)
 80042bc:	2212      	movs	r2, #18
 80042be:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 80042c0:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <Screen_Init+0x68>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 80042c6:	f000 ff55 	bl	8005174 <HAL_GetTick>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <Screen_Init+0x6c>)
 80042ce:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 80042d0:	f7ff fa82 	bl	80037d8 <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <Screen_Init+0x70>)
 80042d6:	885a      	ldrh	r2, [r3, #2]
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <Screen_Init+0x74>)
 80042da:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <Screen_Init+0x70>)
 80042de:	889a      	ldrh	r2, [r3, #4]
 80042e0:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <Screen_Init+0x78>)
 80042e2:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 80042e4:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <Screen_Init+0x7c>)
 80042e6:	885a      	ldrh	r2, [r3, #2]
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <Screen_Init+0x80>)
 80042ea:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <Screen_Init+0x7c>)
 80042ee:	889a      	ldrh	r2, [r3, #4]
 80042f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <Screen_Init+0x84>)
 80042f2:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 80042f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <Screen_Init+0x88>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004338 <Screen_Init+0x8c>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	b29a      	uxth	r2, r3
 8004302:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <Screen_Init+0x90>)
 8004304:	801a      	strh	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200005ec 	.word	0x200005ec
 8004310:	2000002a 	.word	0x2000002a
 8004314:	200005ed 	.word	0x200005ed
 8004318:	200005e8 	.word	0x200005e8
 800431c:	2000001c 	.word	0x2000001c
 8004320:	2000004c 	.word	0x2000004c
 8004324:	2000004e 	.word	0x2000004e
 8004328:	20000024 	.word	0x20000024
 800432c:	20000050 	.word	0x20000050
 8004330:	20000052 	.word	0x20000052
 8004334:	20000578 	.word	0x20000578
 8004338:	88888889 	.word	0x88888889
 800433c:	20000054 	.word	0x20000054

08004340 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004344:	f7ff fa48 	bl	80037d8 <refreshInactivityTimer>

    switch (ui){
 8004348:	4b65      	ldr	r3, [pc, #404]	@ (80044e0 <menu_select+0x1a0>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b11      	cmp	r3, #17
 800434e:	f200 80c0 	bhi.w	80044d2 <menu_select+0x192>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <menu_select+0x18>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	080043a1 	.word	0x080043a1
 800435c:	080043a9 	.word	0x080043a9
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004423 	.word	0x08004423
 8004368:	0800442f 	.word	0x0800442f
 800436c:	0800444f 	.word	0x0800444f
 8004370:	08004457 	.word	0x08004457
 8004374:	0800445f 	.word	0x0800445f
 8004378:	08004467 	.word	0x08004467
 800437c:	0800446f 	.word	0x0800446f
 8004380:	0800447b 	.word	0x0800447b
 8004384:	08004483 	.word	0x08004483
 8004388:	0800448b 	.word	0x0800448b
 800438c:	08004497 	.word	0x08004497
 8004390:	0800449f 	.word	0x0800449f
 8004394:	080044b7 	.word	0x080044b7
 8004398:	080044bf 	.word	0x080044bf
 800439c:	080044c7 	.word	0x080044c7
        case UI_WELCOME: ui = UI_DASH; break;
 80043a0:	4b4f      	ldr	r3, [pc, #316]	@ (80044e0 <menu_select+0x1a0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e095      	b.n	80044d4 <menu_select+0x194>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 80043a8:	4b4d      	ldr	r3, [pc, #308]	@ (80044e0 <menu_select+0x1a0>)
 80043aa:	2202      	movs	r2, #2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	f7ff fa1f 	bl	80037f0 <goto_menu_top>
 80043b2:	e08f      	b.n	80044d4 <menu_select+0x194>

        case UI_MENU:
            switch (menu_idx){
 80043b4:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <menu_select+0x1a4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d82d      	bhi.n	8004418 <menu_select+0xd8>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <menu_select+0x84>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	080043e9 	.word	0x080043e9
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004409 	.word	0x08004409
 80043dc:	08004411 	.word	0x08004411
                case 0: ui = UI_MANUAL; break;
 80043e0:	4b3f      	ldr	r3, [pc, #252]	@ (80044e0 <menu_select+0x1a0>)
 80043e2:	2203      	movs	r2, #3
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e01b      	b.n	8004420 <menu_select+0xe0>
                case 1: ui = UI_SEMI_AUTO; break;
 80043e8:	4b3d      	ldr	r3, [pc, #244]	@ (80044e0 <menu_select+0x1a0>)
 80043ea:	2204      	movs	r2, #4
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e017      	b.n	8004420 <menu_select+0xe0>
                case 2: ui = UI_TIMER; break;
 80043f0:	4b3b      	ldr	r3, [pc, #236]	@ (80044e0 <menu_select+0x1a0>)
 80043f2:	2205      	movs	r2, #5
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e013      	b.n	8004420 <menu_select+0xe0>
                case 3: ui = UI_SEARCH; break;
 80043f8:	4b39      	ldr	r3, [pc, #228]	@ (80044e0 <menu_select+0x1a0>)
 80043fa:	220a      	movs	r2, #10
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e00f      	b.n	8004420 <menu_select+0xe0>
                case 4: ui = UI_COUNTDOWN; break;
 8004400:	4b37      	ldr	r3, [pc, #220]	@ (80044e0 <menu_select+0x1a0>)
 8004402:	220d      	movs	r2, #13
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e00b      	b.n	8004420 <menu_select+0xe0>
                case 5: ui = UI_TWIST; break;
 8004408:	4b35      	ldr	r3, [pc, #212]	@ (80044e0 <menu_select+0x1a0>)
 800440a:	220f      	movs	r2, #15
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <menu_select+0xe0>
                case 6: ui = UI_DASH; break;
 8004410:	4b33      	ldr	r3, [pc, #204]	@ (80044e0 <menu_select+0x1a0>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e003      	b.n	8004420 <menu_select+0xe0>
                default: ui = UI_DASH; break;
 8004418:	4b31      	ldr	r3, [pc, #196]	@ (80044e0 <menu_select+0x1a0>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	bf00      	nop
            }
            break;
 8004420:	e058      	b.n	80044d4 <menu_select+0x194>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004422:	f7fe fb5f 	bl	8002ae4 <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004426:	4b30      	ldr	r3, [pc, #192]	@ (80044e8 <menu_select+0x1a8>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
            break;
 800442c:	e052      	b.n	80044d4 <menu_select+0x194>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 800442e:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <menu_select+0x1ac>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <menu_select+0x102>
 800443c:	f7ff fcca 	bl	8003dd4 <enable_semi_auto>
 8004440:	e001      	b.n	8004446 <menu_select+0x106>
            else disable_semi_auto();
 8004442:	f7ff fcd5 	bl	8003df0 <disable_semi_auto>
            ui = UI_DASH;
 8004446:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <menu_select+0x1a0>)
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
            break;
 800444c:	e042      	b.n	80044d4 <menu_select+0x194>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <menu_select+0x1a0>)
 8004450:	2206      	movs	r2, #6
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e03e      	b.n	80044d4 <menu_select+0x194>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004456:	4b22      	ldr	r3, [pc, #136]	@ (80044e0 <menu_select+0x1a0>)
 8004458:	2207      	movs	r2, #7
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e03a      	b.n	80044d4 <menu_select+0x194>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 800445e:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <menu_select+0x1a0>)
 8004460:	2208      	movs	r2, #8
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e036      	b.n	80044d4 <menu_select+0x194>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8004466:	4b1e      	ldr	r3, [pc, #120]	@ (80044e0 <menu_select+0x1a0>)
 8004468:	2209      	movs	r2, #9
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e032      	b.n	80044d4 <menu_select+0x194>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 800446e:	f7ff fccb 	bl	8003e08 <apply_timer_settings>
            ui = UI_TIMER;
 8004472:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <menu_select+0x1a0>)
 8004474:	2205      	movs	r2, #5
 8004476:	701a      	strb	r2, [r3, #0]
            break;
 8004478:	e02c      	b.n	80044d4 <menu_select+0x194>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 800447a:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <menu_select+0x1a0>)
 800447c:	220b      	movs	r2, #11
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e028      	b.n	80044d4 <menu_select+0x194>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 8004482:	4b17      	ldr	r3, [pc, #92]	@ (80044e0 <menu_select+0x1a0>)
 8004484:	220c      	movs	r2, #12
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e024      	b.n	80044d4 <menu_select+0x194>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 800448a:	f7ff fc67 	bl	8003d5c <apply_search_settings>
            ui = UI_SEARCH; break;
 800448e:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <menu_select+0x1a0>)
 8004490:	220a      	movs	r2, #10
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e01e      	b.n	80044d4 <menu_select+0x194>

        case UI_COUNTDOWN: ui = UI_COUNTDOWN_EDIT_MIN; break;
 8004496:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <menu_select+0x1a0>)
 8004498:	220e      	movs	r2, #14
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e01a      	b.n	80044d4 <menu_select+0x194>
        case UI_COUNTDOWN_EDIT_MIN:
            apply_countdown_settings();
 800449e:	f7ff fc85 	bl	8003dac <apply_countdown_settings>
            countdownMode = true;
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <menu_select+0x1b0>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]
            countdownActive = true;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <menu_select+0x1b4>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
            ui = UI_COUNTDOWN;
 80044ae:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <menu_select+0x1a0>)
 80044b0:	220d      	movs	r2, #13
 80044b2:	701a      	strb	r2, [r3, #0]
            break;
 80044b4:	e00e      	b.n	80044d4 <menu_select+0x194>

        case UI_TWIST: ui = UI_TWIST_EDIT_ON; break;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <menu_select+0x1a0>)
 80044b8:	2210      	movs	r2, #16
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e00a      	b.n	80044d4 <menu_select+0x194>
        case UI_TWIST_EDIT_ON: ui = UI_TWIST_EDIT_OFF; break;
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <menu_select+0x1a0>)
 80044c0:	2211      	movs	r2, #17
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e006      	b.n	80044d4 <menu_select+0x194>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();
 80044c6:	f7ff fc5d 	bl	8003d84 <apply_twist_settings>
            ui = UI_TWIST; break;
 80044ca:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <menu_select+0x1a0>)
 80044cc:	220f      	movs	r2, #15
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <menu_select+0x194>

        default: break;
 80044d2:	bf00      	nop
    }
    screenNeedsRefresh = true;
 80044d4:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <menu_select+0x1a8>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200005ec 	.word	0x200005ec
 80044e4:	200005fc 	.word	0x200005fc
 80044e8:	200005ed 	.word	0x200005ed
 80044ec:	200005f8 	.word	0x200005f8
 80044f0:	20000019 	.word	0x20000019
 80044f4:	20000572 	.word	0x20000572

080044f8 <menu_reset>:

static void menu_reset(void){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 80044fc:	f7ff f96c 	bl	80037d8 <refreshInactivityTimer>

    switch (ui) {
 8004500:	4b27      	ldr	r3, [pc, #156]	@ (80045a0 <menu_reset+0xa8>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	3b01      	subs	r3, #1
 8004506:	2b10      	cmp	r3, #16
 8004508:	d840      	bhi.n	800458c <menu_reset+0x94>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <menu_reset+0x18>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004565 	.word	0x08004565
 8004514:	0800455d 	.word	0x0800455d
 8004518:	08004555 	.word	0x08004555
 800451c:	08004555 	.word	0x08004555
 8004520:	08004555 	.word	0x08004555
 8004524:	0800456d 	.word	0x0800456d
 8004528:	0800456d 	.word	0x0800456d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
 8004534:	08004555 	.word	0x08004555
 8004538:	08004575 	.word	0x08004575
 800453c:	08004575 	.word	0x08004575
 8004540:	08004555 	.word	0x08004555
 8004544:	0800457d 	.word	0x0800457d
 8004548:	08004555 	.word	0x08004555
 800454c:	08004585 	.word	0x08004585
 8004550:	08004585 	.word	0x08004585
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 8004554:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <menu_reset+0xa8>)
 8004556:	2202      	movs	r2, #2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e01b      	b.n	8004594 <menu_reset+0x9c>
        case UI_MENU: ui = UI_DASH; break;
 800455c:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <menu_reset+0xa8>)
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e017      	b.n	8004594 <menu_reset+0x9c>
        case UI_DASH: ui = UI_WELCOME; break;
 8004564:	4b0e      	ldr	r3, [pc, #56]	@ (80045a0 <menu_reset+0xa8>)
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e013      	b.n	8004594 <menu_reset+0x9c>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <menu_reset+0xa8>)
 800456e:	2205      	movs	r2, #5
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e00f      	b.n	8004594 <menu_reset+0x9c>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 8004574:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <menu_reset+0xa8>)
 8004576:	220a      	movs	r2, #10
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e00b      	b.n	8004594 <menu_reset+0x9c>
        case UI_COUNTDOWN_EDIT_MIN: ui = UI_COUNTDOWN; break;
 800457c:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <menu_reset+0xa8>)
 800457e:	220d      	movs	r2, #13
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <menu_reset+0x9c>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 8004584:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <menu_reset+0xa8>)
 8004586:	220f      	movs	r2, #15
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e003      	b.n	8004594 <menu_reset+0x9c>
        default: ui = UI_MENU; break;
 800458c:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <menu_reset+0xa8>)
 800458e:	2202      	movs	r2, #2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <menu_reset+0xac>)
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	200005ec 	.word	0x200005ec
 80045a4:	200005ed 	.word	0x200005ed

080045a8 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <Screen_HandleButton+0x16>
        ModelHandle_ToggleManual();
 80045b8:	f7fe fa94 	bl	8002ae4 <ModelHandle_ToggleManual>
        return;
 80045bc:	e167      	b.n	800488e <Screen_HandleButton+0x2e6>
    }
    if (b == BTN_UP) {
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	f040 8091 	bne.w	80046e8 <Screen_HandleButton+0x140>
        switch (ui) {
 80045c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004838 <Screen_HandleButton+0x290>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	3b02      	subs	r3, #2
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d87c      	bhi.n	80046ca <Screen_HandleButton+0x122>
 80045d0:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <Screen_HandleButton+0x30>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	08004619 	.word	0x08004619
 80045dc:	080046cb 	.word	0x080046cb
 80045e0:	080046cb 	.word	0x080046cb
 80045e4:	080046cb 	.word	0x080046cb
 80045e8:	0800462d 	.word	0x0800462d
 80045ec:	08004643 	.word	0x08004643
 80045f0:	08004659 	.word	0x08004659
 80045f4:	0800466f 	.word	0x0800466f
 80045f8:	080046cb 	.word	0x080046cb
 80045fc:	08004685 	.word	0x08004685
 8004600:	08004693 	.word	0x08004693
 8004604:	080046cb 	.word	0x080046cb
 8004608:	080046a1 	.word	0x080046a1
 800460c:	080046cb 	.word	0x080046cb
 8004610:	080046af 	.word	0x080046af
 8004614:	080046bd 	.word	0x080046bd
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004618:	4b88      	ldr	r3, [pc, #544]	@ (800483c <Screen_HandleButton+0x294>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	dd56      	ble.n	80046ce <Screen_HandleButton+0x126>
 8004620:	4b86      	ldr	r3, [pc, #536]	@ (800483c <Screen_HandleButton+0x294>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3b01      	subs	r3, #1
 8004626:	4a85      	ldr	r2, [pc, #532]	@ (800483c <Screen_HandleButton+0x294>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e050      	b.n	80046ce <Screen_HandleButton+0x126>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 800462c:	4b84      	ldr	r3, [pc, #528]	@ (8004840 <Screen_HandleButton+0x298>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b16      	cmp	r3, #22
 8004632:	d84e      	bhi.n	80046d2 <Screen_HandleButton+0x12a>
 8004634:	4b82      	ldr	r3, [pc, #520]	@ (8004840 <Screen_HandleButton+0x298>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b80      	ldr	r3, [pc, #512]	@ (8004840 <Screen_HandleButton+0x298>)
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e047      	b.n	80046d2 <Screen_HandleButton+0x12a>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8004642:	4b80      	ldr	r3, [pc, #512]	@ (8004844 <Screen_HandleButton+0x29c>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b3a      	cmp	r3, #58	@ 0x3a
 8004648:	d845      	bhi.n	80046d6 <Screen_HandleButton+0x12e>
 800464a:	4b7e      	ldr	r3, [pc, #504]	@ (8004844 <Screen_HandleButton+0x29c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b7c      	ldr	r3, [pc, #496]	@ (8004844 <Screen_HandleButton+0x29c>)
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e03e      	b.n	80046d6 <Screen_HandleButton+0x12e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004658:	4b7b      	ldr	r3, [pc, #492]	@ (8004848 <Screen_HandleButton+0x2a0>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b16      	cmp	r3, #22
 800465e:	d83c      	bhi.n	80046da <Screen_HandleButton+0x132>
 8004660:	4b79      	ldr	r3, [pc, #484]	@ (8004848 <Screen_HandleButton+0x2a0>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b77      	ldr	r3, [pc, #476]	@ (8004848 <Screen_HandleButton+0x2a0>)
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e035      	b.n	80046da <Screen_HandleButton+0x132>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 800466e:	4b77      	ldr	r3, [pc, #476]	@ (800484c <Screen_HandleButton+0x2a4>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b3a      	cmp	r3, #58	@ 0x3a
 8004674:	d833      	bhi.n	80046de <Screen_HandleButton+0x136>
 8004676:	4b75      	ldr	r3, [pc, #468]	@ (800484c <Screen_HandleButton+0x2a4>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b73      	ldr	r3, [pc, #460]	@ (800484c <Screen_HandleButton+0x2a4>)
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e02c      	b.n	80046de <Screen_HandleButton+0x136>
            case UI_SEARCH_EDIT_GAP:  edit_search_gap_s += 5; break;
 8004684:	4b72      	ldr	r3, [pc, #456]	@ (8004850 <Screen_HandleButton+0x2a8>)
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	3305      	adds	r3, #5
 800468a:	b29a      	uxth	r2, r3
 800468c:	4b70      	ldr	r3, [pc, #448]	@ (8004850 <Screen_HandleButton+0x2a8>)
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	e026      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_SEARCH_EDIT_DRY:  edit_search_dry_s += 1; break;
 8004692:	4b70      	ldr	r3, [pc, #448]	@ (8004854 <Screen_HandleButton+0x2ac>)
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	4b6e      	ldr	r3, [pc, #440]	@ (8004854 <Screen_HandleButton+0x2ac>)
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e01f      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 80046a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <Screen_HandleButton+0x2b0>)
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004858 <Screen_HandleButton+0x2b0>)
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e018      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TWIST_EDIT_ON:   edit_twist_on_s += 1; break;
 80046ae:	4b6b      	ldr	r3, [pc, #428]	@ (800485c <Screen_HandleButton+0x2b4>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b69      	ldr	r3, [pc, #420]	@ (800485c <Screen_HandleButton+0x2b4>)
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	e011      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TWIST_EDIT_OFF:  edit_twist_off_s += 1; break;
 80046bc:	4b68      	ldr	r3, [pc, #416]	@ (8004860 <Screen_HandleButton+0x2b8>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	4b66      	ldr	r3, [pc, #408]	@ (8004860 <Screen_HandleButton+0x2b8>)
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	e00a      	b.n	80046e0 <Screen_HandleButton+0x138>
            default: break;
 80046ca:	bf00      	nop
 80046cc:	e008      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 80046ce:	bf00      	nop
 80046d0:	e006      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 80046d2:	bf00      	nop
 80046d4:	e004      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <Screen_HandleButton+0x138>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 80046de:	bf00      	nop
        }
        screenNeedsRefresh = true; return;
 80046e0:	4b60      	ldr	r3, [pc, #384]	@ (8004864 <Screen_HandleButton+0x2bc>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e0d2      	b.n	800488e <Screen_HandleButton+0x2e6>
    }
    if (b == BTN_DOWN) {
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	f040 80c9 	bne.w	8004882 <Screen_HandleButton+0x2da>
        switch (ui) {
 80046f0:	4b51      	ldr	r3, [pc, #324]	@ (8004838 <Screen_HandleButton+0x290>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	3b02      	subs	r3, #2
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	f200 8091 	bhi.w	800481e <Screen_HandleButton+0x276>
 80046fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <Screen_HandleButton+0x15c>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004745 	.word	0x08004745
 8004708:	0800481f 	.word	0x0800481f
 800470c:	0800481f 	.word	0x0800481f
 8004710:	0800481f 	.word	0x0800481f
 8004714:	08004759 	.word	0x08004759
 8004718:	0800476f 	.word	0x0800476f
 800471c:	08004785 	.word	0x08004785
 8004720:	0800479b 	.word	0x0800479b
 8004724:	0800481f 	.word	0x0800481f
 8004728:	080047b1 	.word	0x080047b1
 800472c:	080047c7 	.word	0x080047c7
 8004730:	0800481f 	.word	0x0800481f
 8004734:	080047dd 	.word	0x080047dd
 8004738:	0800481f 	.word	0x0800481f
 800473c:	080047f3 	.word	0x080047f3
 8004740:	08004809 	.word	0x08004809
            case UI_MENU: if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++; break;
 8004744:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <Screen_HandleButton+0x294>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d86a      	bhi.n	8004822 <Screen_HandleButton+0x27a>
 800474c:	4b3b      	ldr	r3, [pc, #236]	@ (800483c <Screen_HandleButton+0x294>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a3a      	ldr	r2, [pc, #232]	@ (800483c <Screen_HandleButton+0x294>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e064      	b.n	8004822 <Screen_HandleButton+0x27a>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8004758:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <Screen_HandleButton+0x298>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d062      	beq.n	8004826 <Screen_HandleButton+0x27e>
 8004760:	4b37      	ldr	r3, [pc, #220]	@ (8004840 <Screen_HandleButton+0x298>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b35      	ldr	r3, [pc, #212]	@ (8004840 <Screen_HandleButton+0x298>)
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e05b      	b.n	8004826 <Screen_HandleButton+0x27e>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 800476e:	4b35      	ldr	r3, [pc, #212]	@ (8004844 <Screen_HandleButton+0x29c>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d059      	beq.n	800482a <Screen_HandleButton+0x282>
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <Screen_HandleButton+0x29c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	3b01      	subs	r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <Screen_HandleButton+0x29c>)
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e052      	b.n	800482a <Screen_HandleButton+0x282>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004784:	4b30      	ldr	r3, [pc, #192]	@ (8004848 <Screen_HandleButton+0x2a0>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d050      	beq.n	800482e <Screen_HandleButton+0x286>
 800478c:	4b2e      	ldr	r3, [pc, #184]	@ (8004848 <Screen_HandleButton+0x2a0>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <Screen_HandleButton+0x2a0>)
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e049      	b.n	800482e <Screen_HandleButton+0x286>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 800479a:	4b2c      	ldr	r3, [pc, #176]	@ (800484c <Screen_HandleButton+0x2a4>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d047      	beq.n	8004832 <Screen_HandleButton+0x28a>
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <Screen_HandleButton+0x2a4>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b28      	ldr	r3, [pc, #160]	@ (800484c <Screen_HandleButton+0x2a4>)
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e040      	b.n	8004832 <Screen_HandleButton+0x28a>
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 80047b0:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <Screen_HandleButton+0x2a8>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d957      	bls.n	8004868 <Screen_HandleButton+0x2c0>
 80047b8:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <Screen_HandleButton+0x2a8>)
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	3b05      	subs	r3, #5
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b23      	ldr	r3, [pc, #140]	@ (8004850 <Screen_HandleButton+0x2a8>)
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e050      	b.n	8004868 <Screen_HandleButton+0x2c0>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 80047c6:	4b23      	ldr	r3, [pc, #140]	@ (8004854 <Screen_HandleButton+0x2ac>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04e      	beq.n	800486c <Screen_HandleButton+0x2c4>
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <Screen_HandleButton+0x2ac>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004854 <Screen_HandleButton+0x2ac>)
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e047      	b.n	800486c <Screen_HandleButton+0x2c4>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 80047dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004858 <Screen_HandleButton+0x2b0>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d945      	bls.n	8004870 <Screen_HandleButton+0x2c8>
 80047e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <Screen_HandleButton+0x2b0>)
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <Screen_HandleButton+0x2b0>)
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e03e      	b.n	8004870 <Screen_HandleButton+0x2c8>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <Screen_HandleButton+0x2b4>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d93c      	bls.n	8004874 <Screen_HandleButton+0x2cc>
 80047fa:	4b18      	ldr	r3, [pc, #96]	@ (800485c <Screen_HandleButton+0x2b4>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	4b16      	ldr	r3, [pc, #88]	@ (800485c <Screen_HandleButton+0x2b4>)
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e035      	b.n	8004874 <Screen_HandleButton+0x2cc>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8004808:	4b15      	ldr	r3, [pc, #84]	@ (8004860 <Screen_HandleButton+0x2b8>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d933      	bls.n	8004878 <Screen_HandleButton+0x2d0>
 8004810:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <Screen_HandleButton+0x2b8>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <Screen_HandleButton+0x2b8>)
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e02c      	b.n	8004878 <Screen_HandleButton+0x2d0>
            default: break;
 800481e:	bf00      	nop
 8004820:	e02b      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_MENU: if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++; break;
 8004822:	bf00      	nop
 8004824:	e029      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8004826:	bf00      	nop
 8004828:	e027      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 800482a:	bf00      	nop
 800482c:	e025      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 800482e:	bf00      	nop
 8004830:	e023      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004832:	bf00      	nop
 8004834:	e021      	b.n	800487a <Screen_HandleButton+0x2d2>
 8004836:	bf00      	nop
 8004838:	200005ec 	.word	0x200005ec
 800483c:	200005fc 	.word	0x200005fc
 8004840:	20000048 	.word	0x20000048
 8004844:	20000049 	.word	0x20000049
 8004848:	2000004a 	.word	0x2000004a
 800484c:	2000004b 	.word	0x2000004b
 8004850:	2000004c 	.word	0x2000004c
 8004854:	2000004e 	.word	0x2000004e
 8004858:	20000054 	.word	0x20000054
 800485c:	20000050 	.word	0x20000050
 8004860:	20000052 	.word	0x20000052
 8004864:	200005ed 	.word	0x200005ed
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 8004868:	bf00      	nop
 800486a:	e006      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 800486c:	bf00      	nop
 800486e:	e004      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <Screen_HandleButton+0x2d2>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8004878:	bf00      	nop
        }
        screenNeedsRefresh = true; return;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <Screen_HandleButton+0x2ec>)
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e005      	b.n	800488e <Screen_HandleButton+0x2e6>
    }
    if (b == BTN_SELECT) { menu_select(); return; }
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d102      	bne.n	800488e <Screen_HandleButton+0x2e6>
 8004888:	f7ff fd5a 	bl	8004340 <menu_select>
 800488c:	bf00      	nop
}
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200005ed 	.word	0x200005ed

08004898 <Screen_HandleSwitches>:

/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}    // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e083      	b.n	80049ac <Screen_HandleSwitches+0x114>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 80048a4:	4946      	ldr	r1, [pc, #280]	@ (80049c0 <Screen_HandleSwitches+0x128>)
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	4942      	ldr	r1, [pc, #264]	@ (80049c0 <Screen_HandleSwitches+0x128>)
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3304      	adds	r3, #4
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	4619      	mov	r1, r3
 80048c8:	f001 fcec 	bl	80062a4 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	72fb      	strb	r3, [r7, #11]

        if (pressed && prev[i]) {
 80048d8:	7afb      	ldrb	r3, [r7, #11]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <Screen_HandleSwitches+0x6c>
 80048de:	4a39      	ldr	r2, [pc, #228]	@ (80049c4 <Screen_HandleSwitches+0x12c>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 80048ea:	4a36      	ldr	r2, [pc, #216]	@ (80049c4 <Screen_HandleSwitches+0x12c>)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 80048f4:	f000 fc3e 	bl	8005174 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4933      	ldr	r1, [pc, #204]	@ (80049c8 <Screen_HandleSwitches+0x130>)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004902:	e050      	b.n	80049a6 <Screen_HandleSwitches+0x10e>
        }
        else if (!pressed && !prev[i]) {
 8004904:	7afb      	ldrb	r3, [r7, #11]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d04a      	beq.n	80049a6 <Screen_HandleSwitches+0x10e>
 8004910:	4a2c      	ldr	r2, [pc, #176]	@ (80049c4 <Screen_HandleSwitches+0x12c>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d041      	beq.n	80049a6 <Screen_HandleSwitches+0x10e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 8004922:	f000 fc27 	bl	8005174 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	4927      	ldr	r1, [pc, #156]	@ (80049c8 <Screen_HandleSwitches+0x130>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 8004934:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <Screen_HandleSwitches+0x12c>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]

            if (i == 0 && pressDuration > 2000) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <Screen_HandleSwitches+0xba>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800494a:	d902      	bls.n	8004952 <Screen_HandleSwitches+0xba>
                ModelHandle_ManualLongPress();
 800494c:	f7fe f912 	bl	8002b74 <ModelHandle_ManualLongPress>
 8004950:	e029      	b.n	80049a6 <Screen_HandleSwitches+0x10e>
            } else if (i == 3 && pressDuration > 2000) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d106      	bne.n	8004966 <Screen_HandleSwitches+0xce>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800495e:	d902      	bls.n	8004966 <Screen_HandleSwitches+0xce>
                menu_reset(); // SW4 long press = Back
 8004960:	f7ff fdca 	bl	80044f8 <menu_reset>
 8004964:	e01f      	b.n	80049a6 <Screen_HandleSwitches+0x10e>
            } else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8004966:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <Screen_HandleSwitches+0x128>)
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	4912      	ldr	r1, [pc, #72]	@ (80049c0 <Screen_HandleSwitches+0x128>)
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3308      	adds	r3, #8
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	f001 fcba 	bl	8006302 <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 800498e:	490c      	ldr	r1, [pc, #48]	@ (80049c0 <Screen_HandleSwitches+0x128>)
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3306      	adds	r3, #6
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fe01 	bl	80045a8 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	f77f af78 	ble.w	80048a4 <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	0800ccf8 	.word	0x0800ccf8
 80049c4:	20000058 	.word	0x20000058
 80049c8:	20000604 	.word	0x20000604

080049cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049d2:	4b15      	ldr	r3, [pc, #84]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4a14      	ldr	r2, [pc, #80]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6193      	str	r3, [r2, #24]
 80049de:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	61d3      	str	r3, [r2, #28]
 80049f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_MspInit+0x5c>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <HAL_MspInit+0x60>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <HAL_MspInit+0x60>)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40010000 	.word	0x40010000

08004a30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_ADC_MspInit+0x7c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d129      	bne.n	8004aa4 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a50:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a5a:	6193      	str	r3, [r2, #24]
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	4a10      	ldr	r2, [pc, #64]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6193      	str	r3, [r2, #24]
 8004a74:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <HAL_ADC_MspInit+0x80>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a80:	23ff      	movs	r3, #255	@ 0xff
 8004a82:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a84:	2303      	movs	r3, #3
 8004a86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	f107 0310 	add.w	r3, r7, #16
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4809      	ldr	r0, [pc, #36]	@ (8004ab4 <HAL_ADC_MspInit+0x84>)
 8004a90:	f001 fa84 	bl	8005f9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2100      	movs	r1, #0
 8004a98:	2012      	movs	r0, #18
 8004a9a:	f001 fa48 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004a9e:	2012      	movs	r0, #18
 8004aa0:	f001 fa61 	bl	8005f66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004aa4:	bf00      	nop
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40012400 	.word	0x40012400
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40010800 	.word	0x40010800

08004ab8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <HAL_I2C_MspInit+0x74>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d124      	bne.n	8004b22 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad8:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	4a14      	ldr	r2, [pc, #80]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004ade:	f043 0308 	orr.w	r3, r3, #8
 8004ae2:	6193      	str	r3, [r2, #24]
 8004ae4:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004af0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004af6:	2312      	movs	r3, #18
 8004af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004afa:	2303      	movs	r3, #3
 8004afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afe:	f107 0310 	add.w	r3, r7, #16
 8004b02:	4619      	mov	r1, r3
 8004b04:	480b      	ldr	r0, [pc, #44]	@ (8004b34 <HAL_I2C_MspInit+0x7c>)
 8004b06:	f001 fa49 	bl	8005f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b0a:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b14:	61d3      	str	r3, [r2, #28]
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_I2C_MspInit+0x78>)
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004b22:	bf00      	nop
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40005800 	.word	0x40005800
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40010c00 	.word	0x40010c00

08004b38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	@ 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a22      	ldr	r2, [pc, #136]	@ (8004bdc <HAL_SPI_MspInit+0xa4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d13d      	bne.n	8004bd4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b58:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b62:	6193      	str	r3, [r2, #24]
 8004b64:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b76:	f043 0308 	orr.w	r3, r3, #8
 8004b7a:	6193      	str	r3, [r2, #24]
 8004b7c:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <HAL_SPI_MspInit+0xa8>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004b88:	2328      	movs	r3, #40	@ 0x28
 8004b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b90:	2303      	movs	r3, #3
 8004b92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4812      	ldr	r0, [pc, #72]	@ (8004be4 <HAL_SPI_MspInit+0xac>)
 8004b9c:	f001 f9fe 	bl	8005f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bac:	f107 0314 	add.w	r3, r7, #20
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	480c      	ldr	r0, [pc, #48]	@ (8004be4 <HAL_SPI_MspInit+0xac>)
 8004bb4:	f001 f9f2 	bl	8005f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_SPI_MspInit+0xb0>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <HAL_SPI_MspInit+0xb0>)
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004bd4:	bf00      	nop
 8004bd6:	3728      	adds	r7, #40	@ 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40013000 	.word	0x40013000
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40010c00 	.word	0x40010c00
 8004be8:	40010000 	.word	0x40010000

08004bec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <HAL_TIM_Base_MspInit+0x34>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10b      	bne.n	8004c16 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bfe:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <HAL_TIM_Base_MspInit+0x38>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4a08      	ldr	r2, [pc, #32]	@ (8004c24 <HAL_TIM_Base_MspInit+0x38>)
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	61d3      	str	r3, [r2, #28]
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_TIM_Base_MspInit+0x38>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40021000 	.word	0x40021000

08004c28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <HAL_UART_MspInit+0x8c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d131      	bne.n	8004cac <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c52:	6193      	str	r3, [r2, #24]
 8004c54:	4b18      	ldr	r3, [pc, #96]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c60:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	4a14      	ldr	r2, [pc, #80]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6193      	str	r3, [r2, #24]
 8004c6c:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_UART_MspInit+0x90>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c82:	2303      	movs	r3, #3
 8004c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	480b      	ldr	r0, [pc, #44]	@ (8004cbc <HAL_UART_MspInit+0x94>)
 8004c8e:	f001 f985 	bl	8005f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4805      	ldr	r0, [pc, #20]	@ (8004cbc <HAL_UART_MspInit+0x94>)
 8004ca8:	f001 f978 	bl	8005f9c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40010800 	.word	0x40010800

08004cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <NMI_Handler+0x4>

08004cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <HardFault_Handler+0x4>

08004cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <MemManage_Handler+0x4>

08004cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <BusFault_Handler+0x4>

08004ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <UsageFault_Handler+0x4>

08004ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr

08004d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d10:	f000 fa1e 	bl	8005150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d1c:	4802      	ldr	r0, [pc, #8]	@ (8004d28 <ADC1_2_IRQHandler+0x10>)
 8004d1e:	f000 fd1b 	bl	8005758 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000320 	.word	0x20000320

08004d2c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004d30:	4802      	ldr	r0, [pc, #8]	@ (8004d3c <RTC_Alarm_IRQHandler+0x10>)
 8004d32:	f003 fb8f 	bl	8008454 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200003a4 	.word	0x200003a4

08004d40 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	f000 fa16 	bl	8005174 <HAL_GetTick>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <Switches_Init+0x94>)
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	4a1f      	ldr	r2, [pc, #124]	@ (8004de4 <Switches_Init+0x94>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6193      	str	r3, [r2, #24]
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <Switches_Init+0x94>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8004d82:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004d86:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4816      	ldr	r0, [pc, #88]	@ (8004de8 <Switches_Init+0x98>)
 8004d8e:	f001 f905 	bl	8005f9c <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e01d      	b.n	8004dd4 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8004d98:	4a14      	ldr	r2, [pc, #80]	@ (8004dec <Switches_Init+0x9c>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8004da2:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <Switches_Init+0xa0>)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8004dac:	f7ff ffc8 	bl	8004d40 <now_ms>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4910      	ldr	r1, [pc, #64]	@ (8004df4 <Switches_Init+0xa4>)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8004dba:	4a0f      	ldr	r2, [pc, #60]	@ (8004df8 <Switches_Init+0xa8>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <Switches_Init+0xac>)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	ddde      	ble.n	8004d98 <Switches_Init+0x48>
    }
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40010c00 	.word	0x40010c00
 8004dec:	20000614 	.word	0x20000614
 8004df0:	20000628 	.word	0x20000628
 8004df4:	20000618 	.word	0x20000618
 8004df8:	2000062c 	.word	0x2000062c
 8004dfc:	2000063c 	.word	0x2000063c

08004e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return 1;
 8004e04:	2301      	movs	r3, #1
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <_kill>:

int _kill(int pid, int sig)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e18:	f005 fd2a 	bl	800a870 <__errno>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2216      	movs	r2, #22
 8004e20:	601a      	str	r2, [r3, #0]
  return -1;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_exit>:

void _exit (int status)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e36:	f04f 31ff 	mov.w	r1, #4294967295
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ffe7 	bl	8004e0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <_exit+0x12>

08004e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e00a      	b.n	8004e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e56:	f3af 8000 	nop.w
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	60ba      	str	r2, [r7, #8]
 8004e62:	b2ca      	uxtb	r2, r1
 8004e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	dbf0      	blt.n	8004e56 <_read+0x12>
  }

  return len;
 8004e74:	687b      	ldr	r3, [r7, #4]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e009      	b.n	8004ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	60ba      	str	r2, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	dbf1      	blt.n	8004e90 <_write+0x12>
  }
  return len;
 8004eac:	687b      	ldr	r3, [r7, #4]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_close>:

int _close(int file)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004edc:	605a      	str	r2, [r3, #4]
  return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <_isatty>:

int _isatty(int file)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
	...

08004f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f20:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <_sbrk+0x5c>)
 8004f22:	4b15      	ldr	r3, [pc, #84]	@ (8004f78 <_sbrk+0x60>)
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f2c:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <_sbrk+0x64>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f34:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <_sbrk+0x64>)
 8004f36:	4a12      	ldr	r2, [pc, #72]	@ (8004f80 <_sbrk+0x68>)
 8004f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f3a:	4b10      	ldr	r3, [pc, #64]	@ (8004f7c <_sbrk+0x64>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d207      	bcs.n	8004f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f48:	f005 fc92 	bl	800a870 <__errno>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	220c      	movs	r2, #12
 8004f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	e009      	b.n	8004f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f58:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <_sbrk+0x64>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <_sbrk+0x64>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a05      	ldr	r2, [pc, #20]	@ (8004f7c <_sbrk+0x64>)
 8004f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20005000 	.word	0x20005000
 8004f78:	00000400 	.word	0x00000400
 8004f7c:	20000640 	.word	0x20000640
 8004f80:	200007e0 	.word	0x200007e0

08004f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8004f94:	2240      	movs	r2, #64	@ 0x40
 8004f96:	2100      	movs	r1, #0
 8004f98:	4807      	ldr	r0, [pc, #28]	@ (8004fb8 <UART_Init+0x28>)
 8004f9a:	f005 fbf1 	bl	800a780 <memset>
    rxIndex = 0;
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <UART_Init+0x2c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8004fa4:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <UART_Init+0x30>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8004faa:	2201      	movs	r2, #1
 8004fac:	4905      	ldr	r1, [pc, #20]	@ (8004fc4 <UART_Init+0x34>)
 8004fae:	4806      	ldr	r0, [pc, #24]	@ (8004fc8 <UART_Init+0x38>)
 8004fb0:	f004 fbb7 	bl	8009722 <HAL_UART_Receive_IT>
}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000648 	.word	0x20000648
 8004fbc:	20000688 	.word	0x20000688
 8004fc0:	2000068a 	.word	0x2000068a
 8004fc4:	20000644 	.word	0x20000644
 8004fc8:	20000458 	.word	0x20000458

08004fcc <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8004fd6:	6838      	ldr	r0, [r7, #0]
 8004fd8:	f7fb f8c4 	bl	8000164 <strlen>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f004 fb10 	bl	800960c <HAL_UART_Transmit>
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <UART_GetReceivedPacket+0x78>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02c      	beq.n	8005060 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8005006:	481a      	ldr	r0, [pc, #104]	@ (8005070 <UART_GetReceivedPacket+0x7c>)
 8005008:	f7fb f8ac 	bl	8000164 <strlen>
 800500c:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d219      	bcs.n	800504a <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	461a      	mov	r2, r3
 800501c:	4914      	ldr	r1, [pc, #80]	@ (8005070 <UART_GetReceivedPacket+0x7c>)
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f005 fbc9 	bl	800a7b6 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	3b01      	subs	r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005030:	2240      	movs	r2, #64	@ 0x40
 8005032:	2100      	movs	r1, #0
 8005034:	480e      	ldr	r0, [pc, #56]	@ (8005070 <UART_GetReceivedPacket+0x7c>)
 8005036:	f005 fba3 	bl	800a780 <memset>
            rxIndex = 0;
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <UART_GetReceivedPacket+0x80>)
 800503c:	2200      	movs	r2, #0
 800503e:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <UART_GetReceivedPacket+0x78>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
            return true;
 8005046:	2301      	movs	r3, #1
 8005048:	e00b      	b.n	8005062 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	2100      	movs	r1, #0
 800504e:	4808      	ldr	r0, [pc, #32]	@ (8005070 <UART_GetReceivedPacket+0x7c>)
 8005050:	f005 fb96 	bl	800a780 <memset>
            rxIndex = 0;
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <UART_GetReceivedPacket+0x80>)
 8005056:	2200      	movs	r2, #0
 8005058:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 800505a:	4b04      	ldr	r3, [pc, #16]	@ (800506c <UART_GetReceivedPacket+0x78>)
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	2000068a 	.word	0x2000068a
 8005070:	20000648 	.word	0x20000648
 8005074:	20000688 	.word	0x20000688

08005078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005078:	f7ff ff84 	bl	8004f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800507c:	480b      	ldr	r0, [pc, #44]	@ (80050ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800507e:	490c      	ldr	r1, [pc, #48]	@ (80050b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005080:	4a0c      	ldr	r2, [pc, #48]	@ (80050b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005084:	e002      	b.n	800508c <LoopCopyDataInit>

08005086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800508a:	3304      	adds	r3, #4

0800508c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800508c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005090:	d3f9      	bcc.n	8005086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005094:	4c09      	ldr	r4, [pc, #36]	@ (80050bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005098:	e001      	b.n	800509e <LoopFillZerobss>

0800509a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800509a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800509c:	3204      	adds	r2, #4

0800509e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050a0:	d3fb      	bcc.n	800509a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050a2:	f005 fbeb 	bl	800a87c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050a6:	f7fd f969 	bl	800237c <main>
  bx lr
 80050aa:	4770      	bx	lr
  ldr r0, =_sdata
 80050ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b0:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80050b4:	0800d0ec 	.word	0x0800d0ec
  ldr r2, =_sbss
 80050b8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80050bc:	200007dc 	.word	0x200007dc

080050c0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050c0:	e7fe      	b.n	80050c0 <CAN1_RX1_IRQHandler>
	...

080050c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050c8:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_Init+0x28>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a07      	ldr	r2, [pc, #28]	@ (80050ec <HAL_Init+0x28>)
 80050ce:	f043 0310 	orr.w	r3, r3, #16
 80050d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d4:	2003      	movs	r0, #3
 80050d6:	f000 ff1f 	bl	8005f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050da:	2000      	movs	r0, #0
 80050dc:	f000 f808 	bl	80050f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e0:	f7ff fc74 	bl	80049cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40022000 	.word	0x40022000

080050f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050f8:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <HAL_InitTick+0x54>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_InitTick+0x58>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005106:	fbb3 f3f1 	udiv	r3, r3, r1
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff37 	bl	8005f82 <HAL_SYSTICK_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00e      	b.n	800513c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d80a      	bhi.n	800513a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005124:	2200      	movs	r2, #0
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	f000 feff 	bl	8005f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005130:	4a06      	ldr	r2, [pc, #24]	@ (800514c <HAL_InitTick+0x5c>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e000      	b.n	800513c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	2000005c 	.word	0x2000005c
 8005148:	20000064 	.word	0x20000064
 800514c:	20000060 	.word	0x20000060

08005150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005154:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_IncTick+0x1c>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_IncTick+0x20>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4413      	add	r3, r2
 8005160:	4a03      	ldr	r2, [pc, #12]	@ (8005170 <HAL_IncTick+0x20>)
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	20000064 	.word	0x20000064
 8005170:	2000068c 	.word	0x2000068c

08005174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return uwTick;
 8005178:	4b02      	ldr	r3, [pc, #8]	@ (8005184 <HAL_GetTick+0x10>)
 800517a:	681b      	ldr	r3, [r3, #0]
}
 800517c:	4618      	mov	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	2000068c 	.word	0x2000068c

08005188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005190:	f7ff fff0 	bl	8005174 <HAL_GetTick>
 8005194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d005      	beq.n	80051ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051a2:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <HAL_Delay+0x44>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051ae:	bf00      	nop
 80051b0:	f7ff ffe0 	bl	8005174 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d8f7      	bhi.n	80051b0 <HAL_Delay+0x28>
  {
  }
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000064 	.word	0x20000064

080051d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0be      	b.n	8005370 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fc0e 	bl	8004a30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fcb9 	bl	8005b8c <ADC_ConversionStop_Disable>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 8099 	bne.w	800535e <HAL_ADC_Init+0x18e>
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 8095 	bne.w	800535e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800523c:	f023 0302 	bic.w	r3, r3, #2
 8005240:	f043 0202 	orr.w	r2, r3, #2
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005250:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7b1b      	ldrb	r3, [r3, #12]
 8005256:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005258:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4313      	orrs	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005268:	d003      	beq.n	8005272 <HAL_ADC_Init+0xa2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_ADC_Init+0xa8>
 8005272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005276:	e000      	b.n	800527a <HAL_ADC_Init+0xaa>
 8005278:	2300      	movs	r3, #0
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7d1b      	ldrb	r3, [r3, #20]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d119      	bne.n	80052bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7b1b      	ldrb	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	3b01      	subs	r3, #1
 8005296:	035a      	lsls	r2, r3, #13
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e00b      	b.n	80052bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <HAL_ADC_Init+0x1a8>)
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ec:	d003      	beq.n	80052f6 <HAL_ADC_Init+0x126>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d104      	bne.n	8005300 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	051b      	lsls	r3, r3, #20
 80052fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	430a      	orrs	r2, r1
 8005312:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	4b18      	ldr	r3, [pc, #96]	@ (800537c <HAL_ADC_Init+0x1ac>)
 800531c:	4013      	ands	r3, r2
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	d10b      	bne.n	800533c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	f043 0201 	orr.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800533a:	e018      	b.n	800536e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	f023 0312 	bic.w	r3, r3, #18
 8005344:	f043 0210 	orr.w	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	f043 0201 	orr.w	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800535c:	e007      	b.n	800536e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	f043 0210 	orr.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	ffe1f7fd 	.word	0xffe1f7fd
 800537c:	ff1f0efe 	.word	0xff1f0efe

08005380 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_ADC_Start+0x1a>
 8005396:	2302      	movs	r3, #2
 8005398:	e098      	b.n	80054cc <HAL_ADC_Start+0x14c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb98 	bl	8005ad8 <ADC_Enable>
 80053a8:	4603      	mov	r3, r0
 80053aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 8087 	bne.w	80054c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a41      	ldr	r2, [pc, #260]	@ (80054d4 <HAL_ADC_Start+0x154>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d105      	bne.n	80053de <HAL_ADC_Start+0x5e>
 80053d2:	4b41      	ldr	r3, [pc, #260]	@ (80054d8 <HAL_ADC_Start+0x158>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d115      	bne.n	800540a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d026      	beq.n	8005446 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005400:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005408:	e01d      	b.n	8005446 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	@ (80054d8 <HAL_ADC_Start+0x158>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_ADC_Start+0xaa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <HAL_ADC_Start+0x154>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <HAL_ADC_Start+0xc6>
 800542a:	4b2b      	ldr	r3, [pc, #172]	@ (80054d8 <HAL_ADC_Start+0x158>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800543e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	f023 0206 	bic.w	r2, r3, #6
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800545e:	e002      	b.n	8005466 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0202 	mvn.w	r2, #2
 8005476:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005482:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005486:	d113      	bne.n	80054b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800548c:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <HAL_ADC_Start+0x154>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d105      	bne.n	800549e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_ADC_Start+0x158>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	e00c      	b.n	80054ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	e003      	b.n	80054ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40012800 	.word	0x40012800
 80054d8:	40012400 	.word	0x40012400

080054dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_ADC_Stop+0x1a>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e01a      	b.n	800552c <HAL_ADC_Stop+0x50>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fb44 	bl	8005b8c <ADC_ConversionStop_Disable>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	f043 0201 	orr.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800554a:	f7ff fe13 	bl	8005174 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0d3      	b.n	800571e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d131      	bne.n	80055e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800558e:	2b00      	cmp	r3, #0
 8005590:	d12a      	bne.n	80055e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005592:	e021      	b.n	80055d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d01d      	beq.n	80055d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_ADC_PollForConversion+0x7e>
 80055a2:	f7ff fde7 	bl	8005174 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d212      	bcs.n	80055d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	f043 0204 	orr.w	r2, r3, #4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e0a2      	b.n	800571e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0d6      	beq.n	8005594 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80055e6:	e070      	b.n	80056ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80055e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005728 <HAL_ADC_PollForConversion+0x1f4>)
 80055ea:	681c      	ldr	r4, [r3, #0]
 80055ec:	2002      	movs	r0, #2
 80055ee:	f002 fe7b 	bl	80082e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80055f2:	4603      	mov	r3, r0
 80055f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6919      	ldr	r1, [r3, #16]
 80055fe:	4b4b      	ldr	r3, [pc, #300]	@ (800572c <HAL_ADC_PollForConversion+0x1f8>)
 8005600:	400b      	ands	r3, r1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_ADC_PollForConversion+0x104>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68d9      	ldr	r1, [r3, #12]
 800560c:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_ADC_PollForConversion+0x1fc>)
 800560e:	400b      	ands	r3, r1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <HAL_ADC_PollForConversion+0x104>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6919      	ldr	r1, [r3, #16]
 800561a:	4b46      	ldr	r3, [pc, #280]	@ (8005734 <HAL_ADC_PollForConversion+0x200>)
 800561c:	400b      	ands	r3, r1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_ADC_PollForConversion+0x100>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68d9      	ldr	r1, [r3, #12]
 8005628:	4b43      	ldr	r3, [pc, #268]	@ (8005738 <HAL_ADC_PollForConversion+0x204>)
 800562a:	400b      	ands	r3, r1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_PollForConversion+0x100>
 8005630:	2314      	movs	r3, #20
 8005632:	e020      	b.n	8005676 <HAL_ADC_PollForConversion+0x142>
 8005634:	2329      	movs	r3, #41	@ 0x29
 8005636:	e01e      	b.n	8005676 <HAL_ADC_PollForConversion+0x142>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6919      	ldr	r1, [r3, #16]
 800563e:	4b3d      	ldr	r3, [pc, #244]	@ (8005734 <HAL_ADC_PollForConversion+0x200>)
 8005640:	400b      	ands	r3, r1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_ADC_PollForConversion+0x120>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68d9      	ldr	r1, [r3, #12]
 800564c:	4b3a      	ldr	r3, [pc, #232]	@ (8005738 <HAL_ADC_PollForConversion+0x204>)
 800564e:	400b      	ands	r3, r1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_ADC_PollForConversion+0x13c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6919      	ldr	r1, [r3, #16]
 800565a:	4b38      	ldr	r3, [pc, #224]	@ (800573c <HAL_ADC_PollForConversion+0x208>)
 800565c:	400b      	ands	r3, r1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <HAL_ADC_PollForConversion+0x140>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68d9      	ldr	r1, [r3, #12]
 8005668:	4b34      	ldr	r3, [pc, #208]	@ (800573c <HAL_ADC_PollForConversion+0x208>)
 800566a:	400b      	ands	r3, r1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_ADC_PollForConversion+0x140>
 8005670:	2354      	movs	r3, #84	@ 0x54
 8005672:	e000      	b.n	8005676 <HAL_ADC_PollForConversion+0x142>
 8005674:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800567c:	e021      	b.n	80056c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d01a      	beq.n	80056bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_ADC_PollForConversion+0x168>
 800568c:	f7ff fd72 	bl	8005174 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d20f      	bcs.n	80056bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d90b      	bls.n	80056bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f043 0204 	orr.w	r2, r3, #4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e030      	b.n	800571e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d8d9      	bhi.n	800567e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0212 	mvn.w	r2, #18
 80056d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80056ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80056ee:	d115      	bne.n	800571c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d111      	bne.n	800571c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	bf00      	nop
 8005728:	2000005c 	.word	0x2000005c
 800572c:	24924924 	.word	0x24924924
 8005730:	00924924 	.word	0x00924924
 8005734:	12492492 	.word	0x12492492
 8005738:	00492492 	.word	0x00492492
 800573c:	00249249 	.word	0x00249249

08005740 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d03e      	beq.n	80057f8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d039      	beq.n	80057f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80057a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80057aa:	d11d      	bne.n	80057e8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d119      	bne.n	80057e8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0220 	bic.w	r2, r2, #32
 80057c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fc fd71 	bl	80022d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0212 	mvn.w	r2, #18
 80057f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d04d      	beq.n	800589e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d048      	beq.n	800589e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800582e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8005832:	d012      	beq.n	800585a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800583e:	2b00      	cmp	r3, #0
 8005840:	d125      	bne.n	800588e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800584c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005850:	d11d      	bne.n	800588e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005856:	2b00      	cmp	r3, #0
 8005858:	d119      	bne.n	800588e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005868:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa6c 	bl	8005d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 020c 	mvn.w	r2, #12
 800589c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f809 	bl	80058d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0201 	mvn.w	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x20>
 8005904:	2302      	movs	r3, #2
 8005906:	e0dc      	b.n	8005ac2 <HAL_ADC_ConfigChannel+0x1da>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b06      	cmp	r3, #6
 8005916:	d81c      	bhi.n	8005952 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	3b05      	subs	r3, #5
 800592a:	221f      	movs	r2, #31
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	4019      	ands	r1, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	3b05      	subs	r3, #5
 8005944:	fa00 f203 	lsl.w	r2, r0, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005950:	e03c      	b.n	80059cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d81c      	bhi.n	8005994 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	3b23      	subs	r3, #35	@ 0x23
 800596c:	221f      	movs	r2, #31
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	4019      	ands	r1, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	3b23      	subs	r3, #35	@ 0x23
 8005986:	fa00 f203 	lsl.w	r2, r0, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
 8005992:	e01b      	b.n	80059cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	3b41      	subs	r3, #65	@ 0x41
 80059a6:	221f      	movs	r2, #31
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	4019      	ands	r1, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	3b41      	subs	r3, #65	@ 0x41
 80059c0:	fa00 f203 	lsl.w	r2, r0, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b09      	cmp	r3, #9
 80059d2:	d91c      	bls.n	8005a0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68d9      	ldr	r1, [r3, #12]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	3b1e      	subs	r3, #30
 80059e6:	2207      	movs	r2, #7
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43db      	mvns	r3, r3
 80059ee:	4019      	ands	r1, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6898      	ldr	r0, [r3, #8]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	3b1e      	subs	r3, #30
 8005a00:	fa00 f203 	lsl.w	r2, r0, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]
 8005a0c:	e019      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6919      	ldr	r1, [r3, #16]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	2207      	movs	r2, #7
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	4019      	ands	r1, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6898      	ldr	r0, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	fa00 f203 	lsl.w	r2, r0, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d003      	beq.n	8005a52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a4e:	2b11      	cmp	r3, #17
 8005a50:	d132      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1d      	ldr	r2, [pc, #116]	@ (8005acc <HAL_ADC_ConfigChannel+0x1e4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d125      	bne.n	8005aa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d126      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005a78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d11a      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a82:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x1e8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a13      	ldr	r2, [pc, #76]	@ (8005ad4 <HAL_ADC_ConfigChannel+0x1ec>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0c9a      	lsrs	r2, r3, #18
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a98:	e002      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f9      	bne.n	8005a9a <HAL_ADC_ConfigChannel+0x1b2>
 8005aa6:	e007      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40012400 	.word	0x40012400
 8005ad0:	2000005c 	.word	0x2000005c
 8005ad4:	431bde83 	.word	0x431bde83

08005ad8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d040      	beq.n	8005b78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b06:	4b1f      	ldr	r3, [pc, #124]	@ (8005b84 <ADC_Enable+0xac>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005b88 <ADC_Enable+0xb0>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	0c9b      	lsrs	r3, r3, #18
 8005b12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b14:	e002      	b.n	8005b1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f9      	bne.n	8005b16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b22:	f7ff fb27 	bl	8005174 <HAL_GetTick>
 8005b26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b28:	e01f      	b.n	8005b6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b2a:	f7ff fb23 	bl	8005174 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d918      	bls.n	8005b6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d011      	beq.n	8005b6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	f043 0210 	orr.w	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e007      	b.n	8005b7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d1d8      	bne.n	8005b2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	2000005c 	.word	0x2000005c
 8005b88:	431bde83 	.word	0x431bde83

08005b8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d12e      	bne.n	8005c04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bb6:	f7ff fadd 	bl	8005174 <HAL_GetTick>
 8005bba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005bbc:	e01b      	b.n	8005bf6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bbe:	f7ff fad9 	bl	8005174 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d914      	bls.n	8005bf6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10d      	bne.n	8005bf6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e007      	b.n	8005c06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d0dc      	beq.n	8005bbe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_ADCEx_Calibration_Start+0x1e>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e097      	b.n	8005d5e <HAL_ADCEx_Calibration_Start+0x14e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ffa8 	bl	8005b8c <ADC_ConversionStop_Disable>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff49 	bl	8005ad8 <ADC_Enable>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8081 	bne.w	8005d54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c5a:	f023 0302 	bic.w	r3, r3, #2
 8005c5e:	f043 0202 	orr.w	r2, r3, #2
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005c66:	4b40      	ldr	r3, [pc, #256]	@ (8005d68 <HAL_ADCEx_Calibration_Start+0x158>)
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	2002      	movs	r0, #2
 8005c6c:	f002 fb3c 	bl	80082e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c70:	4603      	mov	r3, r0
 8005c72:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005c76:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005c78:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8005c7a:	e002      	b.n	8005c82 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f9      	bne.n	8005c7c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0208 	orr.w	r2, r2, #8
 8005c96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005c98:	f7ff fa6c 	bl	8005174 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005c9e:	e01b      	b.n	8005cd8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005ca0:	f7ff fa68 	bl	8005174 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b0a      	cmp	r3, #10
 8005cac:	d914      	bls.n	8005cd8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	f023 0312 	bic.w	r3, r3, #18
 8005cc4:	f043 0210 	orr.w	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e042      	b.n	8005d5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1dc      	bne.n	8005ca0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0204 	orr.w	r2, r2, #4
 8005cf4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005cf6:	f7ff fa3d 	bl	8005174 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005cfc:	e01b      	b.n	8005d36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005cfe:	f7ff fa39 	bl	8005174 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b0a      	cmp	r3, #10
 8005d0a:	d914      	bls.n	8005d36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f023 0312 	bic.w	r3, r3, #18
 8005d22:	f043 0210 	orr.w	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e013      	b.n	8005d5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1dc      	bne.n	8005cfe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000005c 	.word	0x2000005c

08005d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
	...

08005d80 <__NVIC_SetPriorityGrouping>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d90:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <__NVIC_GetPriorityGrouping>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0307 	and.w	r3, r3, #7
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_EnableIRQ>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db0b      	blt.n	8005e0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	4906      	ldr	r1, [pc, #24]	@ (8005e18 <__NVIC_EnableIRQ+0x34>)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2001      	movs	r0, #1
 8005e06:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	e000e100 	.word	0xe000e100

08005e1c <__NVIC_SetPriority>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db0a      	blt.n	8005e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	490c      	ldr	r1, [pc, #48]	@ (8005e68 <__NVIC_SetPriority+0x4c>)
 8005e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3a:	0112      	lsls	r2, r2, #4
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	440b      	add	r3, r1
 8005e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e44:	e00a      	b.n	8005e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4908      	ldr	r1, [pc, #32]	@ (8005e6c <__NVIC_SetPriority+0x50>)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	3b04      	subs	r3, #4
 8005e54:	0112      	lsls	r2, r2, #4
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	440b      	add	r3, r1
 8005e5a:	761a      	strb	r2, [r3, #24]
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	e000e100 	.word	0xe000e100
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <NVIC_EncodePriority>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	@ 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f1c3 0307 	rsb	r3, r3, #7
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf28      	it	cs
 8005e8e:	2304      	movcs	r3, #4
 8005e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d902      	bls.n	8005ea0 <NVIC_EncodePriority+0x30>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3b03      	subs	r3, #3
 8005e9e:	e000      	b.n	8005ea2 <NVIC_EncodePriority+0x32>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	43d9      	mvns	r1, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec8:	4313      	orrs	r3, r2
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3724      	adds	r7, #36	@ 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee4:	d301      	bcc.n	8005eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e00f      	b.n	8005f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eea:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <SysTick_Config+0x40>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ef2:	210f      	movs	r1, #15
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	f7ff ff90 	bl	8005e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <SysTick_Config+0x40>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f02:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <SysTick_Config+0x40>)
 8005f04:	2207      	movs	r2, #7
 8005f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	e000e010 	.word	0xe000e010

08005f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff2d 	bl	8005d80 <__NVIC_SetPriorityGrouping>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f40:	f7ff ff42 	bl	8005dc8 <__NVIC_GetPriorityGrouping>
 8005f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ff90 	bl	8005e70 <NVIC_EncodePriority>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff5f 	bl	8005e1c <__NVIC_SetPriority>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff35 	bl	8005de4 <__NVIC_EnableIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffa2 	bl	8005ed4 <SysTick_Config>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b08b      	sub	sp, #44	@ 0x2c
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005faa:	2300      	movs	r3, #0
 8005fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fae:	e169      	b.n	8006284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	f040 8158 	bne.w	800627e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4a9a      	ldr	r2, [pc, #616]	@ (800623c <HAL_GPIO_Init+0x2a0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d05e      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
 8005fd8:	4a98      	ldr	r2, [pc, #608]	@ (800623c <HAL_GPIO_Init+0x2a0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d875      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 8005fde:	4a98      	ldr	r2, [pc, #608]	@ (8006240 <HAL_GPIO_Init+0x2a4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d058      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
 8005fe4:	4a96      	ldr	r2, [pc, #600]	@ (8006240 <HAL_GPIO_Init+0x2a4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d86f      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 8005fea:	4a96      	ldr	r2, [pc, #600]	@ (8006244 <HAL_GPIO_Init+0x2a8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d052      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
 8005ff0:	4a94      	ldr	r2, [pc, #592]	@ (8006244 <HAL_GPIO_Init+0x2a8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d869      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 8005ff6:	4a94      	ldr	r2, [pc, #592]	@ (8006248 <HAL_GPIO_Init+0x2ac>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d04c      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
 8005ffc:	4a92      	ldr	r2, [pc, #584]	@ (8006248 <HAL_GPIO_Init+0x2ac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d863      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 8006002:	4a92      	ldr	r2, [pc, #584]	@ (800624c <HAL_GPIO_Init+0x2b0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d046      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
 8006008:	4a90      	ldr	r2, [pc, #576]	@ (800624c <HAL_GPIO_Init+0x2b0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d85d      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 800600e:	2b12      	cmp	r3, #18
 8006010:	d82a      	bhi.n	8006068 <HAL_GPIO_Init+0xcc>
 8006012:	2b12      	cmp	r3, #18
 8006014:	d859      	bhi.n	80060ca <HAL_GPIO_Init+0x12e>
 8006016:	a201      	add	r2, pc, #4	@ (adr r2, 800601c <HAL_GPIO_Init+0x80>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006097 	.word	0x08006097
 8006020:	08006071 	.word	0x08006071
 8006024:	08006083 	.word	0x08006083
 8006028:	080060c5 	.word	0x080060c5
 800602c:	080060cb 	.word	0x080060cb
 8006030:	080060cb 	.word	0x080060cb
 8006034:	080060cb 	.word	0x080060cb
 8006038:	080060cb 	.word	0x080060cb
 800603c:	080060cb 	.word	0x080060cb
 8006040:	080060cb 	.word	0x080060cb
 8006044:	080060cb 	.word	0x080060cb
 8006048:	080060cb 	.word	0x080060cb
 800604c:	080060cb 	.word	0x080060cb
 8006050:	080060cb 	.word	0x080060cb
 8006054:	080060cb 	.word	0x080060cb
 8006058:	080060cb 	.word	0x080060cb
 800605c:	080060cb 	.word	0x080060cb
 8006060:	08006079 	.word	0x08006079
 8006064:	0800608d 	.word	0x0800608d
 8006068:	4a79      	ldr	r2, [pc, #484]	@ (8006250 <HAL_GPIO_Init+0x2b4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800606e:	e02c      	b.n	80060ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	623b      	str	r3, [r7, #32]
          break;
 8006076:	e029      	b.n	80060cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	623b      	str	r3, [r7, #32]
          break;
 8006080:	e024      	b.n	80060cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	3308      	adds	r3, #8
 8006088:	623b      	str	r3, [r7, #32]
          break;
 800608a:	e01f      	b.n	80060cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	330c      	adds	r3, #12
 8006092:	623b      	str	r3, [r7, #32]
          break;
 8006094:	e01a      	b.n	80060cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800609e:	2304      	movs	r3, #4
 80060a0:	623b      	str	r3, [r7, #32]
          break;
 80060a2:	e013      	b.n	80060cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d105      	bne.n	80060b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060ac:	2308      	movs	r3, #8
 80060ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	611a      	str	r2, [r3, #16]
          break;
 80060b6:	e009      	b.n	80060cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060b8:	2308      	movs	r3, #8
 80060ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	615a      	str	r2, [r3, #20]
          break;
 80060c2:	e003      	b.n	80060cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060c4:	2300      	movs	r3, #0
 80060c6:	623b      	str	r3, [r7, #32]
          break;
 80060c8:	e000      	b.n	80060cc <HAL_GPIO_Init+0x130>
          break;
 80060ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2bff      	cmp	r3, #255	@ 0xff
 80060d0:	d801      	bhi.n	80060d6 <HAL_GPIO_Init+0x13a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	e001      	b.n	80060da <HAL_GPIO_Init+0x13e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2bff      	cmp	r3, #255	@ 0xff
 80060e0:	d802      	bhi.n	80060e8 <HAL_GPIO_Init+0x14c>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	e002      	b.n	80060ee <HAL_GPIO_Init+0x152>
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	3b08      	subs	r3, #8
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	210f      	movs	r1, #15
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	6a39      	ldr	r1, [r7, #32]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	431a      	orrs	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80b1 	beq.w	800627e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800611c:	4b4d      	ldr	r3, [pc, #308]	@ (8006254 <HAL_GPIO_Init+0x2b8>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	4a4c      	ldr	r2, [pc, #304]	@ (8006254 <HAL_GPIO_Init+0x2b8>)
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	6193      	str	r3, [r2, #24]
 8006128:	4b4a      	ldr	r3, [pc, #296]	@ (8006254 <HAL_GPIO_Init+0x2b8>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006134:	4a48      	ldr	r2, [pc, #288]	@ (8006258 <HAL_GPIO_Init+0x2bc>)
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	089b      	lsrs	r3, r3, #2
 800613a:	3302      	adds	r3, #2
 800613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	220f      	movs	r2, #15
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4013      	ands	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a40      	ldr	r2, [pc, #256]	@ (800625c <HAL_GPIO_Init+0x2c0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <HAL_GPIO_Init+0x1ec>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3f      	ldr	r2, [pc, #252]	@ (8006260 <HAL_GPIO_Init+0x2c4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00d      	beq.n	8006184 <HAL_GPIO_Init+0x1e8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3e      	ldr	r2, [pc, #248]	@ (8006264 <HAL_GPIO_Init+0x2c8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <HAL_GPIO_Init+0x1e4>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3d      	ldr	r2, [pc, #244]	@ (8006268 <HAL_GPIO_Init+0x2cc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <HAL_GPIO_Init+0x1e0>
 8006178:	2303      	movs	r3, #3
 800617a:	e006      	b.n	800618a <HAL_GPIO_Init+0x1ee>
 800617c:	2304      	movs	r3, #4
 800617e:	e004      	b.n	800618a <HAL_GPIO_Init+0x1ee>
 8006180:	2302      	movs	r3, #2
 8006182:	e002      	b.n	800618a <HAL_GPIO_Init+0x1ee>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <HAL_GPIO_Init+0x1ee>
 8006188:	2300      	movs	r3, #0
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	f002 0203 	and.w	r2, r2, #3
 8006190:	0092      	lsls	r2, r2, #2
 8006192:	4093      	lsls	r3, r2
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800619a:	492f      	ldr	r1, [pc, #188]	@ (8006258 <HAL_GPIO_Init+0x2bc>)
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	3302      	adds	r3, #2
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d006      	beq.n	80061c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061b4:	4b2d      	ldr	r3, [pc, #180]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	492c      	ldr	r1, [pc, #176]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
 80061c0:	e006      	b.n	80061d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061c2:	4b2a      	ldr	r3, [pc, #168]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	4928      	ldr	r1, [pc, #160]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061dc:	4b23      	ldr	r3, [pc, #140]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	4922      	ldr	r1, [pc, #136]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60cb      	str	r3, [r1, #12]
 80061e8:	e006      	b.n	80061f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061ea:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	43db      	mvns	r3, r3
 80061f2:	491e      	ldr	r1, [pc, #120]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d006      	beq.n	8006212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006204:	4b19      	ldr	r3, [pc, #100]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	4918      	ldr	r1, [pc, #96]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
 8006210:	e006      	b.n	8006220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006212:	4b16      	ldr	r3, [pc, #88]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	43db      	mvns	r3, r3
 800621a:	4914      	ldr	r1, [pc, #80]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 800621c:	4013      	ands	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d021      	beq.n	8006270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800622c:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	490e      	ldr	r1, [pc, #56]	@ (800626c <HAL_GPIO_Init+0x2d0>)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	4313      	orrs	r3, r2
 8006236:	600b      	str	r3, [r1, #0]
 8006238:	e021      	b.n	800627e <HAL_GPIO_Init+0x2e2>
 800623a:	bf00      	nop
 800623c:	10320000 	.word	0x10320000
 8006240:	10310000 	.word	0x10310000
 8006244:	10220000 	.word	0x10220000
 8006248:	10210000 	.word	0x10210000
 800624c:	10120000 	.word	0x10120000
 8006250:	10110000 	.word	0x10110000
 8006254:	40021000 	.word	0x40021000
 8006258:	40010000 	.word	0x40010000
 800625c:	40010800 	.word	0x40010800
 8006260:	40010c00 	.word	0x40010c00
 8006264:	40011000 	.word	0x40011000
 8006268:	40011400 	.word	0x40011400
 800626c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006270:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <HAL_GPIO_Init+0x304>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	43db      	mvns	r3, r3
 8006278:	4909      	ldr	r1, [pc, #36]	@ (80062a0 <HAL_GPIO_Init+0x304>)
 800627a:	4013      	ands	r3, r2
 800627c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	3301      	adds	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f ae8e 	bne.w	8005fb0 <HAL_GPIO_Init+0x14>
  }
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	372c      	adds	r7, #44	@ 0x2c
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	40010400 	.word	0x40010400

080062a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
 80062c0:	e001      	b.n	80062c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	807b      	strh	r3, [r7, #2]
 80062de:	4613      	mov	r3, r2
 80062e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062e2:	787b      	ldrb	r3, [r7, #1]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062e8:	887a      	ldrh	r2, [r7, #2]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062ee:	e003      	b.n	80062f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	041a      	lsls	r2, r3, #16
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	611a      	str	r2, [r3, #16]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006314:	887a      	ldrh	r2, [r7, #2]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4013      	ands	r3, r2
 800631a:	041a      	lsls	r2, r3, #16
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43d9      	mvns	r1, r3
 8006320:	887b      	ldrh	r3, [r7, #2]
 8006322:	400b      	ands	r3, r1
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e12b      	b.n	800659e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fe fbac 	bl	8004ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	@ 0x24
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006398:	f001 feaa 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800639c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4a81      	ldr	r2, [pc, #516]	@ (80065a8 <HAL_I2C_Init+0x274>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d807      	bhi.n	80063b8 <HAL_I2C_Init+0x84>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a80      	ldr	r2, [pc, #512]	@ (80065ac <HAL_I2C_Init+0x278>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bf94      	ite	ls
 80063b0:	2301      	movls	r3, #1
 80063b2:	2300      	movhi	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e006      	b.n	80063c6 <HAL_I2C_Init+0x92>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a7d      	ldr	r2, [pc, #500]	@ (80065b0 <HAL_I2C_Init+0x27c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	bf94      	ite	ls
 80063c0:	2301      	movls	r3, #1
 80063c2:	2300      	movhi	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e0e7      	b.n	800659e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a78      	ldr	r2, [pc, #480]	@ (80065b4 <HAL_I2C_Init+0x280>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	0c9b      	lsrs	r3, r3, #18
 80063d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a6a      	ldr	r2, [pc, #424]	@ (80065a8 <HAL_I2C_Init+0x274>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d802      	bhi.n	8006408 <HAL_I2C_Init+0xd4>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3301      	adds	r3, #1
 8006406:	e009      	b.n	800641c <HAL_I2C_Init+0xe8>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	4a69      	ldr	r2, [pc, #420]	@ (80065b8 <HAL_I2C_Init+0x284>)
 8006414:	fba2 2303 	umull	r2, r3, r2, r3
 8006418:	099b      	lsrs	r3, r3, #6
 800641a:	3301      	adds	r3, #1
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800642e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	495c      	ldr	r1, [pc, #368]	@ (80065a8 <HAL_I2C_Init+0x274>)
 8006438:	428b      	cmp	r3, r1
 800643a:	d819      	bhi.n	8006470 <HAL_I2C_Init+0x13c>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1e59      	subs	r1, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	fbb1 f3f3 	udiv	r3, r1, r3
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006450:	400b      	ands	r3, r1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <HAL_I2C_Init+0x138>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1e59      	subs	r1, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	fbb1 f3f3 	udiv	r3, r1, r3
 8006464:	3301      	adds	r3, #1
 8006466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800646a:	e051      	b.n	8006510 <HAL_I2C_Init+0x1dc>
 800646c:	2304      	movs	r3, #4
 800646e:	e04f      	b.n	8006510 <HAL_I2C_Init+0x1dc>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d111      	bne.n	800649c <HAL_I2C_Init+0x168>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1e58      	subs	r0, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6859      	ldr	r1, [r3, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	440b      	add	r3, r1
 8006486:	fbb0 f3f3 	udiv	r3, r0, r3
 800648a:	3301      	adds	r3, #1
 800648c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e012      	b.n	80064c2 <HAL_I2C_Init+0x18e>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1e58      	subs	r0, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	0099      	lsls	r1, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80064b2:	3301      	adds	r3, #1
 80064b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_I2C_Init+0x196>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e022      	b.n	8006510 <HAL_I2C_Init+0x1dc>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10e      	bne.n	80064f0 <HAL_I2C_Init+0x1bc>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1e58      	subs	r0, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	440b      	add	r3, r1
 80064e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e4:	3301      	adds	r3, #1
 80064e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ee:	e00f      	b.n	8006510 <HAL_I2C_Init+0x1dc>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1e58      	subs	r0, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6859      	ldr	r1, [r3, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	0099      	lsls	r1, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	fbb0 f3f3 	udiv	r3, r0, r3
 8006506:	3301      	adds	r3, #1
 8006508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	6809      	ldr	r1, [r1, #0]
 8006514:	4313      	orrs	r3, r2
 8006516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69da      	ldr	r2, [r3, #28]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800653e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6911      	ldr	r1, [r2, #16]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68d2      	ldr	r2, [r2, #12]
 800654a:	4311      	orrs	r1, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	430b      	orrs	r3, r1
 8006552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	000186a0 	.word	0x000186a0
 80065ac:	001e847f 	.word	0x001e847f
 80065b0:	003d08ff 	.word	0x003d08ff
 80065b4:	431bde83 	.word	0x431bde83
 80065b8:	10624dd3 	.word	0x10624dd3

080065bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	607a      	str	r2, [r7, #4]
 80065c6:	461a      	mov	r2, r3
 80065c8:	460b      	mov	r3, r1
 80065ca:	817b      	strh	r3, [r7, #10]
 80065cc:	4613      	mov	r3, r2
 80065ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065d0:	f7fe fdd0 	bl	8005174 <HAL_GetTick>
 80065d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b20      	cmp	r3, #32
 80065e0:	f040 80e0 	bne.w	80067a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2319      	movs	r3, #25
 80065ea:	2201      	movs	r2, #1
 80065ec:	4970      	ldr	r1, [pc, #448]	@ (80067b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 ff7e 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e0d3      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_I2C_Master_Transmit+0x50>
 8006608:	2302      	movs	r3, #2
 800660a:	e0cc      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d007      	beq.n	8006632 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2221      	movs	r2, #33	@ 0x21
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2210      	movs	r2, #16
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	893a      	ldrh	r2, [r7, #8]
 8006662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a50      	ldr	r2, [pc, #320]	@ (80067b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006674:	8979      	ldrh	r1, [r7, #10]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fd38 	bl	80070f0 <I2C_MasterRequestWrite>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e08d      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066a0:	e066      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	6a39      	ldr	r1, [r7, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 f83c 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d107      	bne.n	80066ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e06b      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d11b      	bne.n	8006744 <HAL_I2C_Master_Transmit+0x188>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d017      	beq.n	8006744 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	6a39      	ldr	r1, [r7, #32]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f001 f833 	bl	80077b4 <I2C_WaitOnBTFFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00d      	beq.n	8006770 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	2b04      	cmp	r3, #4
 800675a:	d107      	bne.n	800676c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800676a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e01a      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006774:	2b00      	cmp	r3, #0
 8006776:	d194      	bne.n	80066a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	00100002 	.word	0x00100002
 80067b4:	ffff0000 	.word	0xffff0000

080067b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	460b      	mov	r3, r1
 80067cc:	813b      	strh	r3, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067d2:	f7fe fccf 	bl	8005174 <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	f040 80d9 	bne.w	8006998 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2319      	movs	r3, #25
 80067ec:	2201      	movs	r2, #1
 80067ee:	496d      	ldr	r1, [pc, #436]	@ (80069a4 <HAL_I2C_Mem_Write+0x1ec>)
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fe7d 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0cc      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_I2C_Mem_Write+0x56>
 800680a:	2302      	movs	r3, #2
 800680c:	e0c5      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d007      	beq.n	8006834 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2221      	movs	r2, #33	@ 0x21
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2240      	movs	r2, #64	@ 0x40
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a3a      	ldr	r2, [r7, #32]
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a4d      	ldr	r2, [pc, #308]	@ (80069a8 <HAL_I2C_Mem_Write+0x1f0>)
 8006874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006876:	88f8      	ldrh	r0, [r7, #6]
 8006878:	893a      	ldrh	r2, [r7, #8]
 800687a:	8979      	ldrh	r1, [r7, #10]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4603      	mov	r3, r0
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fcb4 	bl	80071f4 <I2C_RequestMemoryWrite>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d052      	beq.n	8006938 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e081      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 ff42 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d107      	bne.n	80068be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e06b      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d11b      	bne.n	8006938 <HAL_I2C_Mem_Write+0x180>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1aa      	bne.n	8006896 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 ff35 	bl	80077b4 <I2C_WaitOnBTFFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	2b04      	cmp	r3, #4
 8006956:	d107      	bne.n	8006968 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e016      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800697a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	00100002 	.word	0x00100002
 80069a8:	ffff0000 	.word	0xffff0000

080069ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08c      	sub	sp, #48	@ 0x30
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	817b      	strh	r3, [r7, #10]
 80069be:	460b      	mov	r3, r1
 80069c0:	813b      	strh	r3, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069ca:	f7fe fbd3 	bl	8005174 <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b20      	cmp	r3, #32
 80069da:	f040 8250 	bne.w	8006e7e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2319      	movs	r3, #25
 80069e4:	2201      	movs	r2, #1
 80069e6:	4982      	ldr	r1, [pc, #520]	@ (8006bf0 <HAL_I2C_Mem_Read+0x244>)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fd81 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e243      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_Mem_Read+0x5a>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e23c      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d007      	beq.n	8006a2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2222      	movs	r2, #34	@ 0x22
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2240      	movs	r2, #64	@ 0x40
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a62      	ldr	r2, [pc, #392]	@ (8006bf4 <HAL_I2C_Mem_Read+0x248>)
 8006a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a6e:	88f8      	ldrh	r0, [r7, #6]
 8006a70:	893a      	ldrh	r2, [r7, #8]
 8006a72:	8979      	ldrh	r1, [r7, #10]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fc4e 	bl	8007320 <I2C_RequestMemoryRead>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e1f8      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d113      	bne.n	8006abe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e1cc      	b.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d11e      	bne.n	8006b04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ad6:	b672      	cpsid	i
}
 8006ad8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ada:	2300      	movs	r3, #0
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006afe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b00:	b662      	cpsie	i
}
 8006b02:	e035      	b.n	8006b70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d11e      	bne.n	8006b4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b1c:	b672      	cpsid	i
}
 8006b1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b46:	b662      	cpsie	i
}
 8006b48:	e012      	b.n	8006b70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006b70:	e172      	b.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	f200 811f 	bhi.w	8006dba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d123      	bne.n	8006bcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fe5b 	bl	8007844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e173      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006bca:	e145      	b.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d152      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4906      	ldr	r1, [pc, #24]	@ (8006bf8 <HAL_I2C_Mem_Read+0x24c>)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fc86 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e148      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
 8006bee:	bf00      	nop
 8006bf0:	00100002 	.word	0x00100002
 8006bf4:	ffff0000 	.word	0xffff0000
 8006bf8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006bfc:	b672      	cpsid	i
}
 8006bfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006c42:	b662      	cpsie	i
}
 8006c44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c78:	e0ee      	b.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	2200      	movs	r2, #0
 8006c82:	4981      	ldr	r1, [pc, #516]	@ (8006e88 <HAL_I2C_Mem_Read+0x4dc>)
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fc33 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0f5      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ca4:	b672      	cpsid	i
}
 8006ca6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cda:	4b6c      	ldr	r3, [pc, #432]	@ (8006e8c <HAL_I2C_Mem_Read+0x4e0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e90 <HAL_I2C_Mem_Read+0x4e4>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0a1a      	lsrs	r2, r3, #8
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	00da      	lsls	r2, r3, #3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d118      	bne.n	8006d32 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006d22:	b662      	cpsie	i
}
 8006d24:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e0a6      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d1d9      	bne.n	8006cf4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d82:	b662      	cpsie	i
}
 8006d84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006db8:	e04e      	b.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fd40 	bl	8007844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e058      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d124      	bne.n	8006e58 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d107      	bne.n	8006e26 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f47f ae88 	bne.w	8006b72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3728      	adds	r7, #40	@ 0x28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	00010004 	.word	0x00010004
 8006e8c:	2000005c 	.word	0x2000005c
 8006e90:	14f8b589 	.word	0x14f8b589

08006e94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	@ 0x28
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006ea4:	f7fe f966 	bl	8005174 <HAL_GetTick>
 8006ea8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	f040 8111 	bne.w	80070de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	2319      	movs	r3, #25
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4988      	ldr	r1, [pc, #544]	@ (80070e8 <HAL_I2C_IsDeviceReady+0x254>)
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fb12 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e104      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_I2C_IsDeviceReady+0x50>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e0fd      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d007      	beq.n	8006f0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2224      	movs	r2, #36	@ 0x24
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a70      	ldr	r2, [pc, #448]	@ (80070ec <HAL_I2C_IsDeviceReady+0x258>)
 8006f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fad0 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f64:	d103      	bne.n	8006f6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0b6      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f72:	897b      	ldrh	r3, [r7, #10]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006f82:	f7fe f8f7 	bl	8005174 <HAL_GetTick>
 8006f86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	bf0c      	ite	eq
 8006f96:	2301      	moveq	r3, #1
 8006f98:	2300      	movne	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006fb6:	e025      	b.n	8007004 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fb8:	f7fe f8dc 	bl	8005174 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <HAL_I2C_IsDeviceReady+0x13a>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	22a0      	movs	r2, #160	@ 0xa0
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2ba0      	cmp	r3, #160	@ 0xa0
 800700e:	d005      	beq.n	800701c <HAL_I2C_IsDeviceReady+0x188>
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <HAL_I2C_IsDeviceReady+0x188>
 8007016:	7dbb      	ldrb	r3, [r7, #22]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0cd      	beq.n	8006fb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d129      	bne.n	8007086 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007040:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2319      	movs	r3, #25
 800705e:	2201      	movs	r2, #1
 8007060:	4921      	ldr	r1, [pc, #132]	@ (80070e8 <HAL_I2C_IsDeviceReady+0x254>)
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fa44 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e036      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e02c      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007094:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800709e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2319      	movs	r3, #25
 80070a6:	2201      	movs	r2, #1
 80070a8:	490f      	ldr	r1, [pc, #60]	@ (80070e8 <HAL_I2C_IsDeviceReady+0x254>)
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fa20 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e012      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	3301      	adds	r3, #1
 80070be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	f4ff af32 	bcc.w	8006f2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
  }
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	00100002 	.word	0x00100002
 80070ec:	ffff0000 	.word	0xffff0000

080070f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	607a      	str	r2, [r7, #4]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	460b      	mov	r3, r1
 80070fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d006      	beq.n	800711a <I2C_MasterRequestWrite+0x2a>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d003      	beq.n	800711a <I2C_MasterRequestWrite+0x2a>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007118:	d108      	bne.n	800712c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e00b      	b.n	8007144 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	2b12      	cmp	r3, #18
 8007132:	d107      	bne.n	8007144 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007142:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f9cd 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00d      	beq.n	8007178 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800716a:	d103      	bne.n	8007174 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007172:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e035      	b.n	80071e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007180:	d108      	bne.n	8007194 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007182:	897b      	ldrh	r3, [r7, #10]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007190:	611a      	str	r2, [r3, #16]
 8007192:	e01b      	b.n	80071cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007194:	897b      	ldrh	r3, [r7, #10]
 8007196:	11db      	asrs	r3, r3, #7
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 0306 	and.w	r3, r3, #6
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f063 030f 	orn	r3, r3, #15
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	490e      	ldr	r1, [pc, #56]	@ (80071ec <I2C_MasterRequestWrite+0xfc>)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fa16 	bl	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e010      	b.n	80071e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071c2:	897b      	ldrh	r3, [r7, #10]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4907      	ldr	r1, [pc, #28]	@ (80071f0 <I2C_MasterRequestWrite+0x100>)
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fa06 	bl	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	00010008 	.word	0x00010008
 80071f0:	00010002 	.word	0x00010002

080071f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	4603      	mov	r3, r0
 8007204:	817b      	strh	r3, [r7, #10]
 8007206:	460b      	mov	r3, r1
 8007208:	813b      	strh	r3, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800721c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	2200      	movs	r2, #0
 8007226:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f960 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007244:	d103      	bne.n	800724e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800724c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e05f      	b.n	8007312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007252:	897b      	ldrh	r3, [r7, #10]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	461a      	mov	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	6a3a      	ldr	r2, [r7, #32]
 8007266:	492d      	ldr	r1, [pc, #180]	@ (800731c <I2C_RequestMemoryWrite+0x128>)
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f9bb 	bl	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e04c      	b.n	8007312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007290:	6a39      	ldr	r1, [r7, #32]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fa46 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d107      	bne.n	80072b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e02b      	b.n	8007312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d105      	bne.n	80072cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072c0:	893b      	ldrh	r3, [r7, #8]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	e021      	b.n	8007310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072dc:	6a39      	ldr	r1, [r7, #32]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fa20 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00d      	beq.n	8007306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d107      	bne.n	8007302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e005      	b.n	8007312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007306:	893b      	ldrh	r3, [r7, #8]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	00010002 	.word	0x00010002

08007320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	4603      	mov	r3, r0
 8007330:	817b      	strh	r3, [r7, #10]
 8007332:	460b      	mov	r3, r1
 8007334:	813b      	strh	r3, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2200      	movs	r2, #0
 8007362:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f8c2 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007380:	d103      	bne.n	800738a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007388:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e0aa      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800738e:	897b      	ldrh	r3, [r7, #10]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800739c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	4952      	ldr	r1, [pc, #328]	@ (80074ec <I2C_RequestMemoryRead+0x1cc>)
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f91d 	bl	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e097      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073cc:	6a39      	ldr	r1, [r7, #32]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f9a8 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00d      	beq.n	80073f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d107      	bne.n	80073f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e076      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d105      	bne.n	8007408 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073fc:	893b      	ldrh	r3, [r7, #8]
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	611a      	str	r2, [r3, #16]
 8007406:	e021      	b.n	800744c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007408:	893b      	ldrh	r3, [r7, #8]
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	b29b      	uxth	r3, r3
 800740e:	b2da      	uxtb	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007418:	6a39      	ldr	r1, [r7, #32]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f982 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00d      	beq.n	8007442 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	2b04      	cmp	r3, #4
 800742c:	d107      	bne.n	800743e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800743c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e050      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007442:	893b      	ldrh	r3, [r7, #8]
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800744c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800744e:	6a39      	ldr	r1, [r7, #32]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f967 	bl	8007724 <I2C_WaitOnTXEFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	2b04      	cmp	r3, #4
 8007462:	d107      	bne.n	8007474 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007472:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e035      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007486:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2200      	movs	r2, #0
 8007490:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f82b 	bl	80074f0 <I2C_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00d      	beq.n	80074bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ae:	d103      	bne.n	80074b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e013      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074bc:	897b      	ldrh	r3, [r7, #10]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	4906      	ldr	r1, [pc, #24]	@ (80074ec <I2C_RequestMemoryRead+0x1cc>)
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f886 	bl	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	00010002 	.word	0x00010002

080074f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007500:	e048      	b.n	8007594 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d044      	beq.n	8007594 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750a:	f7fd fe33 	bl	8005174 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d139      	bne.n	8007594 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	0c1b      	lsrs	r3, r3, #16
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10d      	bne.n	8007546 <I2C_WaitOnFlagUntilTimeout+0x56>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	43da      	mvns	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4013      	ands	r3, r2
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	e00c      	b.n	8007560 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	43da      	mvns	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4013      	ands	r3, r2
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	429a      	cmp	r2, r3
 8007564:	d116      	bne.n	8007594 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e023      	b.n	80075dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b01      	cmp	r3, #1
 800759c:	d10d      	bne.n	80075ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	43da      	mvns	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	e00c      	b.n	80075d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	43da      	mvns	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4013      	ands	r3, r2
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d093      	beq.n	8007502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075f2:	e071      	b.n	80076d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007602:	d123      	bne.n	800764c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007612:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800761c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007638:	f043 0204 	orr.w	r2, r3, #4
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e067      	b.n	800771c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d041      	beq.n	80076d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007654:	f7fd fd8e 	bl	8005174 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d136      	bne.n	80076d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10c      	bne.n	800768e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	43da      	mvns	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf14      	ite	ne
 8007686:	2301      	movne	r3, #1
 8007688:	2300      	moveq	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	e00b      	b.n	80076a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	43da      	mvns	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4013      	ands	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d016      	beq.n	80076d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e021      	b.n	800771c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10c      	bne.n	80076fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	43da      	mvns	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4013      	ands	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	e00b      	b.n	8007714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	43da      	mvns	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f af6d 	bne.w	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007730:	e034      	b.n	800779c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f8e3 	bl	80078fe <I2C_IsAcknowledgeFailed>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e034      	b.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d028      	beq.n	800779c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774a:	f7fd fd13 	bl	8005174 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11d      	bne.n	800779c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d016      	beq.n	800779c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	f043 0220 	orr.w	r2, r3, #32
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e007      	b.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a6:	2b80      	cmp	r3, #128	@ 0x80
 80077a8:	d1c3      	bne.n	8007732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077c0:	e034      	b.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f89b 	bl	80078fe <I2C_IsAcknowledgeFailed>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e034      	b.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d028      	beq.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077da:	f7fd fccb 	bl	8005174 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11d      	bne.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d016      	beq.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	f043 0220 	orr.w	r2, r3, #32
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e007      	b.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b04      	cmp	r3, #4
 8007838:	d1c3      	bne.n	80077c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007850:	e049      	b.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b10      	cmp	r3, #16
 800785e:	d119      	bne.n	8007894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0210 	mvn.w	r2, #16
 8007868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e030      	b.n	80078f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007894:	f7fd fc6e 	bl	8005174 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d302      	bcc.n	80078aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d11d      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d016      	beq.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e007      	b.n	80078f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d1ae      	bne.n	8007852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007914:	d11b      	bne.n	800794e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800791e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	f043 0204 	orr.w	r2, r3, #4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
	...

0800795c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e272      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8087 	beq.w	8007a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800797c:	4b92      	ldr	r3, [pc, #584]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b04      	cmp	r3, #4
 8007986:	d00c      	beq.n	80079a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007988:	4b8f      	ldr	r3, [pc, #572]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 030c 	and.w	r3, r3, #12
 8007990:	2b08      	cmp	r3, #8
 8007992:	d112      	bne.n	80079ba <HAL_RCC_OscConfig+0x5e>
 8007994:	4b8c      	ldr	r3, [pc, #560]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800799c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a0:	d10b      	bne.n	80079ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079a2:	4b89      	ldr	r3, [pc, #548]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d06c      	beq.n	8007a88 <HAL_RCC_OscConfig+0x12c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d168      	bne.n	8007a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e24c      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c2:	d106      	bne.n	80079d2 <HAL_RCC_OscConfig+0x76>
 80079c4:	4b80      	ldr	r3, [pc, #512]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a7f      	ldr	r2, [pc, #508]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	e02e      	b.n	8007a30 <HAL_RCC_OscConfig+0xd4>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCC_OscConfig+0x98>
 80079da:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a7a      	ldr	r2, [pc, #488]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	4b78      	ldr	r3, [pc, #480]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a77      	ldr	r2, [pc, #476]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 80079ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e01d      	b.n	8007a30 <HAL_RCC_OscConfig+0xd4>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCC_OscConfig+0xbc>
 80079fe:	4b72      	ldr	r3, [pc, #456]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a71      	ldr	r2, [pc, #452]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	e00b      	b.n	8007a30 <HAL_RCC_OscConfig+0xd4>
 8007a18:	4b6b      	ldr	r3, [pc, #428]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	4b68      	ldr	r3, [pc, #416]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a67      	ldr	r2, [pc, #412]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d013      	beq.n	8007a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a38:	f7fd fb9c 	bl	8005174 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a40:	f7fd fb98 	bl	8005174 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b64      	cmp	r3, #100	@ 0x64
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e200      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a52:	4b5d      	ldr	r3, [pc, #372]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f0      	beq.n	8007a40 <HAL_RCC_OscConfig+0xe4>
 8007a5e:	e014      	b.n	8007a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a60:	f7fd fb88 	bl	8005174 <HAL_GetTick>
 8007a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a66:	e008      	b.n	8007a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a68:	f7fd fb84 	bl	8005174 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b64      	cmp	r3, #100	@ 0x64
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e1ec      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a7a:	4b53      	ldr	r3, [pc, #332]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1f0      	bne.n	8007a68 <HAL_RCC_OscConfig+0x10c>
 8007a86:	e000      	b.n	8007a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d063      	beq.n	8007b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a96:	4b4c      	ldr	r3, [pc, #304]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 030c 	and.w	r3, r3, #12
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007aa2:	4b49      	ldr	r3, [pc, #292]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 030c 	and.w	r3, r3, #12
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d11c      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x18c>
 8007aae:	4b46      	ldr	r3, [pc, #280]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d116      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aba:	4b43      	ldr	r3, [pc, #268]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x176>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e1c0      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4939      	ldr	r1, [pc, #228]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae6:	e03a      	b.n	8007b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d020      	beq.n	8007b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007af0:	4b36      	ldr	r3, [pc, #216]	@ (8007bcc <HAL_RCC_OscConfig+0x270>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af6:	f7fd fb3d 	bl	8005174 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007afe:	f7fd fb39 	bl	8005174 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e1a1      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b10:	4b2d      	ldr	r3, [pc, #180]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4927      	ldr	r1, [pc, #156]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	600b      	str	r3, [r1, #0]
 8007b30:	e015      	b.n	8007b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b32:	4b26      	ldr	r3, [pc, #152]	@ (8007bcc <HAL_RCC_OscConfig+0x270>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b38:	f7fd fb1c 	bl	8005174 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b40:	f7fd fb18 	bl	8005174 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e180      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b52:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03a      	beq.n	8007be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d019      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b72:	4b17      	ldr	r3, [pc, #92]	@ (8007bd0 <HAL_RCC_OscConfig+0x274>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b78:	f7fd fafc 	bl	8005174 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b80:	f7fd faf8 	bl	8005174 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e160      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <HAL_RCC_OscConfig+0x26c>)
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f0      	beq.n	8007b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f000 face 	bl	8008140 <RCC_Delay>
 8007ba4:	e01c      	b.n	8007be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <HAL_RCC_OscConfig+0x274>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bac:	f7fd fae2 	bl	8005174 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb2:	e00f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb4:	f7fd fade 	bl	8005174 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d908      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e146      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
 8007bc6:	bf00      	nop
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	42420000 	.word	0x42420000
 8007bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd4:	4b92      	ldr	r3, [pc, #584]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e9      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80a6 	beq.w	8007d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bfe:	4b88      	ldr	r3, [pc, #544]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	4a87      	ldr	r2, [pc, #540]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c08:	61d3      	str	r3, [r2, #28]
 8007c0a:	4b85      	ldr	r3, [pc, #532]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c12:	60bb      	str	r3, [r7, #8]
 8007c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c16:	2301      	movs	r3, #1
 8007c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1a:	4b82      	ldr	r3, [pc, #520]	@ (8007e24 <HAL_RCC_OscConfig+0x4c8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d118      	bne.n	8007c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c26:	4b7f      	ldr	r3, [pc, #508]	@ (8007e24 <HAL_RCC_OscConfig+0x4c8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e24 <HAL_RCC_OscConfig+0x4c8>)
 8007c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c32:	f7fd fa9f 	bl	8005174 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c3a:	f7fd fa9b 	bl	8005174 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b64      	cmp	r3, #100	@ 0x64
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e103      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c4c:	4b75      	ldr	r3, [pc, #468]	@ (8007e24 <HAL_RCC_OscConfig+0x4c8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d106      	bne.n	8007c6e <HAL_RCC_OscConfig+0x312>
 8007c60:	4b6f      	ldr	r3, [pc, #444]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	4a6e      	ldr	r2, [pc, #440]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	6213      	str	r3, [r2, #32]
 8007c6c:	e02d      	b.n	8007cca <HAL_RCC_OscConfig+0x36e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_RCC_OscConfig+0x334>
 8007c76:	4b6a      	ldr	r3, [pc, #424]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	4a69      	ldr	r2, [pc, #420]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	6213      	str	r3, [r2, #32]
 8007c82:	4b67      	ldr	r3, [pc, #412]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	4a66      	ldr	r2, [pc, #408]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c88:	f023 0304 	bic.w	r3, r3, #4
 8007c8c:	6213      	str	r3, [r2, #32]
 8007c8e:	e01c      	b.n	8007cca <HAL_RCC_OscConfig+0x36e>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b05      	cmp	r3, #5
 8007c96:	d10c      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x356>
 8007c98:	4b61      	ldr	r3, [pc, #388]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	4a60      	ldr	r2, [pc, #384]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007c9e:	f043 0304 	orr.w	r3, r3, #4
 8007ca2:	6213      	str	r3, [r2, #32]
 8007ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	6213      	str	r3, [r2, #32]
 8007cb0:	e00b      	b.n	8007cca <HAL_RCC_OscConfig+0x36e>
 8007cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	4a5a      	ldr	r2, [pc, #360]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	6213      	str	r3, [r2, #32]
 8007cbe:	4b58      	ldr	r3, [pc, #352]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	4a57      	ldr	r2, [pc, #348]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007cc4:	f023 0304 	bic.w	r3, r3, #4
 8007cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d015      	beq.n	8007cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd2:	f7fd fa4f 	bl	8005174 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd8:	e00a      	b.n	8007cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cda:	f7fd fa4b 	bl	8005174 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e0b1      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0ee      	beq.n	8007cda <HAL_RCC_OscConfig+0x37e>
 8007cfc:	e014      	b.n	8007d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cfe:	f7fd fa39 	bl	8005174 <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d04:	e00a      	b.n	8007d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d06:	f7fd fa35 	bl	8005174 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e09b      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d1c:	4b40      	ldr	r3, [pc, #256]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1ee      	bne.n	8007d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d105      	bne.n	8007d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	4a3b      	ldr	r2, [pc, #236]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8087 	beq.w	8007e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d44:	4b36      	ldr	r3, [pc, #216]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f003 030c 	and.w	r3, r3, #12
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d061      	beq.n	8007e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d146      	bne.n	8007de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d58:	4b33      	ldr	r3, [pc, #204]	@ (8007e28 <HAL_RCC_OscConfig+0x4cc>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d5e:	f7fd fa09 	bl	8005174 <HAL_GetTick>
 8007d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d64:	e008      	b.n	8007d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d66:	f7fd fa05 	bl	8005174 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e06d      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d78:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1f0      	bne.n	8007d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d8c:	d108      	bne.n	8007da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	4921      	ldr	r1, [pc, #132]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007da0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a19      	ldr	r1, [r3, #32]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db0:	430b      	orrs	r3, r1
 8007db2:	491b      	ldr	r1, [pc, #108]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007db8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <HAL_RCC_OscConfig+0x4cc>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dbe:	f7fd f9d9 	bl	8005174 <HAL_GetTick>
 8007dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007dc4:	e008      	b.n	8007dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc6:	f7fd f9d5 	bl	8005174 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e03d      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007dd8:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0f0      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x46a>
 8007de4:	e035      	b.n	8007e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <HAL_RCC_OscConfig+0x4cc>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dec:	f7fd f9c2 	bl	8005174 <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df4:	f7fd f9be 	bl	8005174 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e026      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <HAL_RCC_OscConfig+0x4c4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x498>
 8007e12:	e01e      	b.n	8007e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e019      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
 8007e20:	40021000 	.word	0x40021000
 8007e24:	40007000 	.word	0x40007000
 8007e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <HAL_RCC_OscConfig+0x500>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d106      	bne.n	8007e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d001      	beq.n	8007e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	40021000 	.word	0x40021000

08007e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0d0      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e74:	4b6a      	ldr	r3, [pc, #424]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d910      	bls.n	8007ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e82:	4b67      	ldr	r3, [pc, #412]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f023 0207 	bic.w	r2, r3, #7
 8007e8a:	4965      	ldr	r1, [pc, #404]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e92:	4b63      	ldr	r3, [pc, #396]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d001      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0b8      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d020      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ebc:	4b59      	ldr	r3, [pc, #356]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a58      	ldr	r2, [pc, #352]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ed4:	4b53      	ldr	r3, [pc, #332]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4a52      	ldr	r2, [pc, #328]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007eda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ee0:	4b50      	ldr	r3, [pc, #320]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	494d      	ldr	r1, [pc, #308]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d040      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d107      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f06:	4b47      	ldr	r3, [pc, #284]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d115      	bne.n	8007f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e07f      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f1e:	4b41      	ldr	r3, [pc, #260]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e073      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e06b      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f3e:	4b39      	ldr	r3, [pc, #228]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f023 0203 	bic.w	r2, r3, #3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4936      	ldr	r1, [pc, #216]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f50:	f7fd f910 	bl	8005174 <HAL_GetTick>
 8007f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f56:	e00a      	b.n	8007f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f58:	f7fd f90c 	bl	8005174 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e053      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f003 020c 	and.w	r2, r3, #12
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d1eb      	bne.n	8007f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f80:	4b27      	ldr	r3, [pc, #156]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d210      	bcs.n	8007fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b24      	ldr	r3, [pc, #144]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 0207 	bic.w	r2, r3, #7
 8007f96:	4922      	ldr	r1, [pc, #136]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9e:	4b20      	ldr	r3, [pc, #128]	@ (8008020 <HAL_RCC_ClockConfig+0x1c0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d001      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e032      	b.n	8008016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fbc:	4b19      	ldr	r3, [pc, #100]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	4916      	ldr	r1, [pc, #88]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	490e      	ldr	r1, [pc, #56]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fee:	f000 f821 	bl	8008034 <HAL_RCC_GetSysClockFreq>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	091b      	lsrs	r3, r3, #4
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	490a      	ldr	r1, [pc, #40]	@ (8008028 <HAL_RCC_ClockConfig+0x1c8>)
 8008000:	5ccb      	ldrb	r3, [r1, r3]
 8008002:	fa22 f303 	lsr.w	r3, r2, r3
 8008006:	4a09      	ldr	r2, [pc, #36]	@ (800802c <HAL_RCC_ClockConfig+0x1cc>)
 8008008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800800a:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <HAL_RCC_ClockConfig+0x1d0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd f86e 	bl	80050f0 <HAL_InitTick>

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40022000 	.word	0x40022000
 8008024:	40021000 	.word	0x40021000
 8008028:	0800cd28 	.word	0x0800cd28
 800802c:	2000005c 	.word	0x2000005c
 8008030:	20000060 	.word	0x20000060

08008034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	2300      	movs	r3, #0
 8008040:	60bb      	str	r3, [r7, #8]
 8008042:	2300      	movs	r3, #0
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800804e:	4b1e      	ldr	r3, [pc, #120]	@ (80080c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 030c 	and.w	r3, r3, #12
 800805a:	2b04      	cmp	r3, #4
 800805c:	d002      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x30>
 800805e:	2b08      	cmp	r3, #8
 8008060:	d003      	beq.n	800806a <HAL_RCC_GetSysClockFreq+0x36>
 8008062:	e027      	b.n	80080b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008064:	4b19      	ldr	r3, [pc, #100]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x98>)
 8008066:	613b      	str	r3, [r7, #16]
      break;
 8008068:	e027      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	0c9b      	lsrs	r3, r3, #18
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	4a17      	ldr	r2, [pc, #92]	@ (80080d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008074:	5cd3      	ldrb	r3, [r2, r3]
 8008076:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d010      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008082:	4b11      	ldr	r3, [pc, #68]	@ (80080c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	0c5b      	lsrs	r3, r3, #17
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800808e:	5cd3      	ldrb	r3, [r2, r3]
 8008090:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a0d      	ldr	r2, [pc, #52]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x98>)
 8008096:	fb03 f202 	mul.w	r2, r3, r2
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e004      	b.n	80080ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a0c      	ldr	r2, [pc, #48]	@ (80080d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	613b      	str	r3, [r7, #16]
      break;
 80080b2:	e002      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80080b4:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x98>)
 80080b6:	613b      	str	r3, [r7, #16]
      break;
 80080b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ba:	693b      	ldr	r3, [r7, #16]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40021000 	.word	0x40021000
 80080cc:	007a1200 	.word	0x007a1200
 80080d0:	0800cd40 	.word	0x0800cd40
 80080d4:	0800cd50 	.word	0x0800cd50
 80080d8:	003d0900 	.word	0x003d0900

080080dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080e0:	4b02      	ldr	r3, [pc, #8]	@ (80080ec <HAL_RCC_GetHCLKFreq+0x10>)
 80080e2:	681b      	ldr	r3, [r3, #0]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr
 80080ec:	2000005c 	.word	0x2000005c

080080f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080f4:	f7ff fff2 	bl	80080dc <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b05      	ldr	r3, [pc, #20]	@ (8008110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4903      	ldr	r1, [pc, #12]	@ (8008114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40021000 	.word	0x40021000
 8008114:	0800cd38 	.word	0x0800cd38

08008118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800811c:	f7ff ffde 	bl	80080dc <HAL_RCC_GetHCLKFreq>
 8008120:	4602      	mov	r2, r0
 8008122:	4b05      	ldr	r3, [pc, #20]	@ (8008138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	0adb      	lsrs	r3, r3, #11
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	4903      	ldr	r1, [pc, #12]	@ (800813c <HAL_RCC_GetPCLK2Freq+0x24>)
 800812e:	5ccb      	ldrb	r3, [r1, r3]
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40021000 	.word	0x40021000
 800813c:	0800cd38 	.word	0x0800cd38

08008140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <RCC_Delay+0x34>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a0a      	ldr	r2, [pc, #40]	@ (8008178 <RCC_Delay+0x38>)
 800814e:	fba2 2303 	umull	r2, r3, r2, r3
 8008152:	0a5b      	lsrs	r3, r3, #9
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800815c:	bf00      	nop
  }
  while (Delay --);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1e5a      	subs	r2, r3, #1
 8008162:	60fa      	str	r2, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f9      	bne.n	800815c <RCC_Delay+0x1c>
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	2000005c 	.word	0x2000005c
 8008178:	10624dd3 	.word	0x10624dd3

0800817c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d07d      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008198:	2300      	movs	r3, #0
 800819a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800819c:	4b4f      	ldr	r3, [pc, #316]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081a8:	4b4c      	ldr	r3, [pc, #304]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	4a4b      	ldr	r2, [pc, #300]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80081ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b2:	61d3      	str	r3, [r2, #28]
 80081b4:	4b49      	ldr	r3, [pc, #292]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c4:	4b46      	ldr	r3, [pc, #280]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d118      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d0:	4b43      	ldr	r3, [pc, #268]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a42      	ldr	r2, [pc, #264]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081dc:	f7fc ffca 	bl	8005174 <HAL_GetTick>
 80081e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e2:	e008      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e4:	f7fc ffc6 	bl	8005174 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b64      	cmp	r3, #100	@ 0x64
 80081f0:	d901      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e06d      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f6:	4b3a      	ldr	r3, [pc, #232]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008202:	4b36      	ldr	r3, [pc, #216]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d02e      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	429a      	cmp	r2, r3
 800821e:	d027      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008220:	4b2e      	ldr	r3, [pc, #184]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008228:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800822a:	4b2e      	ldr	r3, [pc, #184]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008230:	4b2c      	ldr	r3, [pc, #176]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008236:	4a29      	ldr	r2, [pc, #164]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d014      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008246:	f7fc ff95 	bl	8005174 <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824c:	e00a      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824e:	f7fc ff91 	bl	8005174 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825c:	4293      	cmp	r3, r2
 800825e:	d901      	bls.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e036      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008264:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0ee      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008270:	4b1a      	ldr	r3, [pc, #104]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	4917      	ldr	r1, [pc, #92]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800827e:	4313      	orrs	r3, r2
 8008280:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d105      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008288:	4b14      	ldr	r3, [pc, #80]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	4a13      	ldr	r2, [pc, #76]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800828e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082a0:	4b0e      	ldr	r3, [pc, #56]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	490b      	ldr	r1, [pc, #44]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082be:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	4904      	ldr	r1, [pc, #16]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40021000 	.word	0x40021000
 80082e0:	40007000 	.word	0x40007000
 80082e4:	42420440 	.word	0x42420440

080082e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	2300      	movs	r3, #0
 80082f6:	61fb      	str	r3, [r7, #28]
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b10      	cmp	r3, #16
 8008308:	d00a      	beq.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b10      	cmp	r3, #16
 800830e:	f200 808a 	bhi.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d045      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d075      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800831e:	e082      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008320:	4b46      	ldr	r3, [pc, #280]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008326:	4b45      	ldr	r3, [pc, #276]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d07b      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	0c9b      	lsrs	r3, r3, #18
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	4a41      	ldr	r2, [pc, #260]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800833c:	5cd3      	ldrb	r3, [r2, r3]
 800833e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d015      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800834a:	4b3c      	ldr	r3, [pc, #240]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	0c5b      	lsrs	r3, r3, #17
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	4a3b      	ldr	r2, [pc, #236]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008356:	5cd3      	ldrb	r3, [r2, r3]
 8008358:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00d      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008364:	4a38      	ldr	r2, [pc, #224]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	fbb2 f2f3 	udiv	r2, r2, r3
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	61fb      	str	r3, [r7, #28]
 8008374:	e004      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4a34      	ldr	r2, [pc, #208]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800837a:	fb02 f303 	mul.w	r3, r2, r3
 800837e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008380:	4b2e      	ldr	r3, [pc, #184]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800838c:	d102      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	61bb      	str	r3, [r7, #24]
      break;
 8008392:	e04a      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	4a2d      	ldr	r2, [pc, #180]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	61bb      	str	r3, [r7, #24]
      break;
 80083a2:	e042      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80083a4:	4b25      	ldr	r3, [pc, #148]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b4:	d108      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80083c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	e01f      	b.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d2:	d109      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80083d4:	4b19      	ldr	r3, [pc, #100]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80083d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80083e0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e00f      	b.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083f2:	d11c      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80083f4:	4b11      	ldr	r3, [pc, #68]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d016      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008400:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008404:	61bb      	str	r3, [r7, #24]
      break;
 8008406:	e012      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008408:	e011      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800840a:	f7ff fe85 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 800840e:	4602      	mov	r2, r0
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	0b9b      	lsrs	r3, r3, #14
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	3301      	adds	r3, #1
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008422:	61bb      	str	r3, [r7, #24]
      break;
 8008424:	e004      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008426:	bf00      	nop
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800842a:	bf00      	nop
 800842c:	e000      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800842e:	bf00      	nop
    }
  }
  return (frequency);
 8008430:	69bb      	ldr	r3, [r7, #24]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000
 8008440:	0800cd54 	.word	0x0800cd54
 8008444:	0800cd64 	.word	0x0800cd64
 8008448:	007a1200 	.word	0x007a1200
 800844c:	003d0900 	.word	0x003d0900
 8008450:	aaaaaaab 	.word	0xaaaaaaab

08008454 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d011      	beq.n	800848e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f815 	bl	80084a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0202 	bic.w	r2, r2, #2
 800848c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800848e:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008490:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008494:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	745a      	strb	r2, [r3, #17]
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40010400 	.word	0x40010400

080084a8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr

080084ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e076      	b.n	80085ba <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d108      	bne.n	80084e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084dc:	d009      	beq.n	80084f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	61da      	str	r2, [r3, #28]
 80084e4:	e005      	b.n	80084f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fc fb13 	bl	8004b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008528:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008576:	ea42 0103 	orr.w	r1, r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	0c1a      	lsrs	r2, r3, #16
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f002 0204 	and.w	r2, r2, #4
 8008598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085d2:	f7fc fdcf 	bl	8005174 <HAL_GetTick>
 80085d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d001      	beq.n	80085ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
 80085ea:	e12a      	b.n	8008842 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <HAL_SPI_Transmit+0x36>
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e122      	b.n	8008842 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_SPI_Transmit+0x48>
 8008606:	2302      	movs	r3, #2
 8008608:	e11b      	b.n	8008842 <HAL_SPI_Transmit+0x280>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2203      	movs	r2, #3
 8008616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008658:	d10f      	bne.n	800867a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008678:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008684:	2b40      	cmp	r3, #64	@ 0x40
 8008686:	d007      	beq.n	8008698 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086a0:	d152      	bne.n	8008748 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_SPI_Transmit+0xee>
 80086aa:	8b7b      	ldrh	r3, [r7, #26]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d145      	bne.n	800873c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b4:	881a      	ldrh	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c0:	1c9a      	adds	r2, r3, #2
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086d4:	e032      	b.n	800873c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d112      	bne.n	800870a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f4:	1c9a      	adds	r2, r3, #2
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008708:	e018      	b.n	800873c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800870a:	f7fc fd33 	bl	8005174 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d803      	bhi.n	8008722 <HAL_SPI_Transmit+0x160>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <HAL_SPI_Transmit+0x166>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e082      	b.n	8008842 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1c7      	bne.n	80086d6 <HAL_SPI_Transmit+0x114>
 8008746:	e053      	b.n	80087f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <HAL_SPI_Transmit+0x194>
 8008750:	8b7b      	ldrh	r3, [r7, #26]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d147      	bne.n	80087e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800877c:	e033      	b.n	80087e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b02      	cmp	r3, #2
 800878a:	d113      	bne.n	80087b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	330c      	adds	r3, #12
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80087b2:	e018      	b.n	80087e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b4:	f7fc fcde 	bl	8005174 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d803      	bhi.n	80087cc <HAL_SPI_Transmit+0x20a>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d102      	bne.n	80087d2 <HAL_SPI_Transmit+0x210>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e02d      	b.n	8008842 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1c6      	bne.n	800877e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fbc5 	bl	8008f84 <SPI_EndRxTxTransaction>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008840:	2300      	movs	r3, #0
  }
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b088      	sub	sp, #32
 800884e:	af02      	add	r7, sp, #8
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b01      	cmp	r3, #1
 8008864:	d001      	beq.n	800886a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008866:	2302      	movs	r3, #2
 8008868:	e104      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008872:	d112      	bne.n	800889a <HAL_SPI_Receive+0x50>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10e      	bne.n	800889a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2204      	movs	r2, #4
 8008880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008884:	88fa      	ldrh	r2, [r7, #6]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4613      	mov	r3, r2
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	68b9      	ldr	r1, [r7, #8]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 f8f3 	bl	8008a7c <HAL_SPI_TransmitReceive>
 8008896:	4603      	mov	r3, r0
 8008898:	e0ec      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800889a:	f7fc fc6b 	bl	8005174 <HAL_GetTick>
 800889e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_SPI_Receive+0x62>
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0e1      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_SPI_Receive+0x74>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e0da      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2204      	movs	r2, #4
 80088ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800890c:	d10f      	bne.n	800892e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800891c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800892c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008938:	2b40      	cmp	r3, #64	@ 0x40
 800893a:	d007      	beq.n	800894c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800894a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d170      	bne.n	8008a36 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008954:	e035      	b.n	80089c2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b01      	cmp	r3, #1
 8008962:	d115      	bne.n	8008990 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f103 020c 	add.w	r2, r3, #12
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008970:	7812      	ldrb	r2, [r2, #0]
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800898e:	e018      	b.n	80089c2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008990:	f7fc fbf0 	bl	8005174 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d803      	bhi.n	80089a8 <HAL_SPI_Receive+0x15e>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d102      	bne.n	80089ae <HAL_SPI_Receive+0x164>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e058      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1c4      	bne.n	8008956 <HAL_SPI_Receive+0x10c>
 80089cc:	e038      	b.n	8008a40 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d113      	bne.n	8008a04 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e6:	b292      	uxth	r2, r2
 80089e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a02:	e018      	b.n	8008a36 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a04:	f7fc fbb6 	bl	8005174 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d803      	bhi.n	8008a1c <HAL_SPI_Receive+0x1d2>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d102      	bne.n	8008a22 <HAL_SPI_Receive+0x1d8>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e01e      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1c6      	bne.n	80089ce <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 fa4b 	bl	8008ee0 <SPI_EndRxTransaction>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008a72:	2300      	movs	r3, #0
  }
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	@ 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a8e:	f7fc fb71 	bl	8005174 <HAL_GetTick>
 8008a92:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a9a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008aa2:	887b      	ldrh	r3, [r7, #2]
 8008aa4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008aa6:	7ffb      	ldrb	r3, [r7, #31]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_SPI_TransmitReceive+0x4a>
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ab2:	d106      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x46>
 8008abc:	7ffb      	ldrb	r3, [r7, #31]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d001      	beq.n	8008ac6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e17f      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <HAL_SPI_TransmitReceive+0x5c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_SPI_TransmitReceive+0x5c>
 8008ad2:	887b      	ldrh	r3, [r7, #2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e174      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_SPI_TransmitReceive+0x6e>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e16d      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d003      	beq.n	8008b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2205      	movs	r2, #5
 8008b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	887a      	ldrh	r2, [r7, #2]
 8008b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	887a      	ldrh	r2, [r7, #2]
 8008b28:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	887a      	ldrh	r2, [r7, #2]
 8008b2e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b46:	2b40      	cmp	r3, #64	@ 0x40
 8008b48:	d007      	beq.n	8008b5a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b62:	d17e      	bne.n	8008c62 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0xf6>
 8008b6c:	8afb      	ldrh	r3, [r7, #22]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d16c      	bne.n	8008c4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b76:	881a      	ldrh	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	1c9a      	adds	r2, r3, #2
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b96:	e059      	b.n	8008c4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d11b      	bne.n	8008bde <HAL_SPI_TransmitReceive+0x162>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d016      	beq.n	8008bde <HAL_SPI_TransmitReceive+0x162>
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d113      	bne.n	8008bde <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bba:	881a      	ldrh	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc6:	1c9a      	adds	r2, r3, #2
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d119      	bne.n	8008c20 <HAL_SPI_TransmitReceive+0x1a4>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d014      	beq.n	8008c20 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c00:	b292      	uxth	r2, r2
 8008c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	1c9a      	adds	r2, r3, #2
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c20:	f7fc faa8 	bl	8005174 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d80d      	bhi.n	8008c4c <HAL_SPI_TransmitReceive+0x1d0>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d009      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e0bc      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1a0      	bne.n	8008b98 <HAL_SPI_TransmitReceive+0x11c>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d19b      	bne.n	8008b98 <HAL_SPI_TransmitReceive+0x11c>
 8008c60:	e082      	b.n	8008d68 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <HAL_SPI_TransmitReceive+0x1f4>
 8008c6a:	8afb      	ldrh	r3, [r7, #22]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d171      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	330c      	adds	r3, #12
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c96:	e05d      	b.n	8008d54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d11c      	bne.n	8008ce0 <HAL_SPI_TransmitReceive+0x264>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d017      	beq.n	8008ce0 <HAL_SPI_TransmitReceive+0x264>
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d114      	bne.n	8008ce0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d119      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x2a6>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d014      	beq.n	8008d22 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	3b01      	subs	r3, #1
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d22:	f7fc fa27 	bl	8005174 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d803      	bhi.n	8008d3a <HAL_SPI_TransmitReceive+0x2be>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d38:	d102      	bne.n	8008d40 <HAL_SPI_TransmitReceive+0x2c4>
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e038      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d19c      	bne.n	8008c98 <HAL_SPI_TransmitReceive+0x21c>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d197      	bne.n	8008c98 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d68:	6a3a      	ldr	r2, [r7, #32]
 8008d6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f909 	bl	8008f84 <SPI_EndRxTxTransaction>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e01d      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d92:	2300      	movs	r3, #0
 8008d94:	613b      	str	r3, [r7, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
  }
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3728      	adds	r7, #40	@ 0x28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008de0:	f7fc f9c8 	bl	8005174 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	4413      	add	r3, r2
 8008dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008df0:	f7fc f9c0 	bl	8005174 <HAL_GetTick>
 8008df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008df6:	4b39      	ldr	r3, [pc, #228]	@ (8008edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	015b      	lsls	r3, r3, #5
 8008dfc:	0d1b      	lsrs	r3, r3, #20
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
 8008e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e06:	e054      	b.n	8008eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0e:	d050      	beq.n	8008eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e10:	f7fc f9b0 	bl	8005174 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d902      	bls.n	8008e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d13d      	bne.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e3e:	d111      	bne.n	8008e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e48:	d004      	beq.n	8008e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e52:	d107      	bne.n	8008e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e6c:	d10f      	bne.n	8008e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e017      	b.n	8008ed2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	bf0c      	ite	eq
 8008ec2:	2301      	moveq	r3, #1
 8008ec4:	2300      	movne	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d19b      	bne.n	8008e08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	2000005c 	.word	0x2000005c

08008ee0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ef4:	d111      	bne.n	8008f1a <SPI_EndRxTransaction+0x3a>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008efe:	d004      	beq.n	8008f0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f08:	d107      	bne.n	8008f1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f18:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f22:	d117      	bne.n	8008f54 <SPI_EndRxTransaction+0x74>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f2c:	d112      	bne.n	8008f54 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2101      	movs	r1, #1
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff ff49 	bl	8008dd0 <SPI_WaitFlagStateUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01a      	beq.n	8008f7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	f043 0220 	orr.w	r2, r3, #32
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e013      	b.n	8008f7c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2180      	movs	r1, #128	@ 0x80
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff ff36 	bl	8008dd0 <SPI_WaitFlagStateUntilTimeout>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6e:	f043 0220 	orr.w	r2, r3, #32
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e000      	b.n	8008f7c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2201      	movs	r2, #1
 8008f98:	2102      	movs	r1, #2
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ff18 	bl	8008dd0 <SPI_WaitFlagStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e013      	b.n	8008fde <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2180      	movs	r1, #128	@ 0x80
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff ff05 	bl	8008dd0 <SPI_WaitFlagStateUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e000      	b.n	8008fde <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e041      	b.n	800907c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7fb fded 	bl	8004bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f000 f93f 	bl	80092a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d001      	beq.n	800909c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e032      	b.n	8009102 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a18      	ldr	r2, [pc, #96]	@ (800910c <HAL_TIM_Base_Start+0x88>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00e      	beq.n	80090cc <HAL_TIM_Base_Start+0x48>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b6:	d009      	beq.n	80090cc <HAL_TIM_Base_Start+0x48>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a14      	ldr	r2, [pc, #80]	@ (8009110 <HAL_TIM_Base_Start+0x8c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d004      	beq.n	80090cc <HAL_TIM_Base_Start+0x48>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a13      	ldr	r2, [pc, #76]	@ (8009114 <HAL_TIM_Base_Start+0x90>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d111      	bne.n	80090f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b06      	cmp	r3, #6
 80090dc:	d010      	beq.n	8009100 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f042 0201 	orr.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ee:	e007      	b.n	8009100 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40000400 	.word	0x40000400
 8009114:	40000800 	.word	0x40000800

08009118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIM_ConfigClockSource+0x1c>
 8009130:	2302      	movs	r3, #2
 8009132:	e0b4      	b.n	800929e <HAL_TIM_ConfigClockSource+0x186>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800915a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800916c:	d03e      	beq.n	80091ec <HAL_TIM_ConfigClockSource+0xd4>
 800916e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009172:	f200 8087 	bhi.w	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800917a:	f000 8086 	beq.w	800928a <HAL_TIM_ConfigClockSource+0x172>
 800917e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009182:	d87f      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009184:	2b70      	cmp	r3, #112	@ 0x70
 8009186:	d01a      	beq.n	80091be <HAL_TIM_ConfigClockSource+0xa6>
 8009188:	2b70      	cmp	r3, #112	@ 0x70
 800918a:	d87b      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 800918c:	2b60      	cmp	r3, #96	@ 0x60
 800918e:	d050      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x11a>
 8009190:	2b60      	cmp	r3, #96	@ 0x60
 8009192:	d877      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009194:	2b50      	cmp	r3, #80	@ 0x50
 8009196:	d03c      	beq.n	8009212 <HAL_TIM_ConfigClockSource+0xfa>
 8009198:	2b50      	cmp	r3, #80	@ 0x50
 800919a:	d873      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 800919c:	2b40      	cmp	r3, #64	@ 0x40
 800919e:	d058      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x13a>
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	d86f      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091a4:	2b30      	cmp	r3, #48	@ 0x30
 80091a6:	d064      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091a8:	2b30      	cmp	r3, #48	@ 0x30
 80091aa:	d86b      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d060      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d867      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05c      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091b8:	2b10      	cmp	r3, #16
 80091ba:	d05a      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091bc:	e062      	b.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ce:	f000 f950 	bl	8009472 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	609a      	str	r2, [r3, #8]
      break;
 80091ea:	e04f      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091fc:	f000 f939 	bl	8009472 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800920e:	609a      	str	r2, [r3, #8]
      break;
 8009210:	e03c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800921e:	461a      	mov	r2, r3
 8009220:	f000 f8b0 	bl	8009384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2150      	movs	r1, #80	@ 0x50
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f907 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8009230:	e02c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800923e:	461a      	mov	r2, r3
 8009240:	f000 f8ce 	bl	80093e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2160      	movs	r1, #96	@ 0x60
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f8f7 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8009250:	e01c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	461a      	mov	r2, r3
 8009260:	f000 f890 	bl	8009384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2140      	movs	r1, #64	@ 0x40
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f8e7 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8009270:	e00c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f000 f8de 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8009282:	e003      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
      break;
 8009288:	e000      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800928a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009378 <TIM_Base_SetConfig+0xd0>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00b      	beq.n	80092d8 <TIM_Base_SetConfig+0x30>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c6:	d007      	beq.n	80092d8 <TIM_Base_SetConfig+0x30>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a2c      	ldr	r2, [pc, #176]	@ (800937c <TIM_Base_SetConfig+0xd4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_Base_SetConfig+0x30>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009380 <TIM_Base_SetConfig+0xd8>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d108      	bne.n	80092ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a22      	ldr	r2, [pc, #136]	@ (8009378 <TIM_Base_SetConfig+0xd0>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00b      	beq.n	800930a <TIM_Base_SetConfig+0x62>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092f8:	d007      	beq.n	800930a <TIM_Base_SetConfig+0x62>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1f      	ldr	r2, [pc, #124]	@ (800937c <TIM_Base_SetConfig+0xd4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d003      	beq.n	800930a <TIM_Base_SetConfig+0x62>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a1e      	ldr	r2, [pc, #120]	@ (8009380 <TIM_Base_SetConfig+0xd8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d108      	bne.n	800931c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a0d      	ldr	r2, [pc, #52]	@ (8009378 <TIM_Base_SetConfig+0xd0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d103      	bne.n	8009350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f023 0201 	bic.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]
  }
}
 800936e:	bf00      	nop
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr
 8009378:	40012c00 	.word	0x40012c00
 800937c:	40000400 	.word	0x40000400
 8009380:	40000800 	.word	0x40000800

08009384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f023 0201 	bic.w	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f023 030a 	bic.w	r3, r3, #10
 80093c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	621a      	str	r2, [r3, #32]
}
 80093d6:	bf00      	nop
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	f023 0210 	bic.w	r2, r3, #16
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800940a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	031b      	lsls	r3, r3, #12
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800941c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	621a      	str	r2, [r3, #32]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr

0800943e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4313      	orrs	r3, r2
 800945c:	f043 0307 	orr.w	r3, r3, #7
 8009460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	609a      	str	r2, [r3, #8]
}
 8009468:	bf00      	nop
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	bc80      	pop	{r7}
 8009470:	4770      	bx	lr

08009472 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009472:	b480      	push	{r7}
 8009474:	b087      	sub	sp, #28
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800948c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	021a      	lsls	r2, r3, #8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	431a      	orrs	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4313      	orrs	r3, r2
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	609a      	str	r2, [r3, #8]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bc80      	pop	{r7}
 80094ae:	4770      	bx	lr

080094b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e046      	b.n	8009556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a16      	ldr	r2, [pc, #88]	@ (8009560 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00e      	beq.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009514:	d009      	beq.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a12      	ldr	r2, [pc, #72]	@ (8009564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d004      	beq.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a10      	ldr	r2, [pc, #64]	@ (8009568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d10c      	bne.n	8009544 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	4313      	orrs	r3, r2
 800953a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	40012c00 	.word	0x40012c00
 8009564:	40000400 	.word	0x40000400
 8009568:	40000800 	.word	0x40000800

0800956c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e042      	b.n	8009604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fb fb48 	bl	8004c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2224      	movs	r2, #36	@ 0x24
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f9cf 	bl	8009954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	695a      	ldr	r2, [r3, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08a      	sub	sp, #40	@ 0x28
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	4613      	mov	r3, r2
 800961a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b20      	cmp	r3, #32
 800962a:	d175      	bne.n	8009718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <HAL_UART_Transmit+0x2c>
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e06e      	b.n	800971a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2221      	movs	r2, #33	@ 0x21
 8009646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800964a:	f7fb fd93 	bl	8005174 <HAL_GetTick>
 800964e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	88fa      	ldrh	r2, [r7, #6]
 8009654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009664:	d108      	bne.n	8009678 <HAL_UART_Transmit+0x6c>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800966e:	2300      	movs	r3, #0
 8009670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	e003      	b.n	8009680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009680:	e02e      	b.n	80096e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	2180      	movs	r1, #128	@ 0x80
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f86d 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2220      	movs	r2, #32
 800969c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e03a      	b.n	800971a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	3302      	adds	r3, #2
 80096be:	61bb      	str	r3, [r7, #24]
 80096c0:	e007      	b.n	80096d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1cb      	bne.n	8009682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	2140      	movs	r1, #64	@ 0x40
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f839 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2220      	movs	r2, #32
 8009704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e006      	b.n	800971a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	e000      	b.n	800971a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009718:	2302      	movs	r3, #2
  }
}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	4613      	mov	r3, r2
 800972e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b20      	cmp	r3, #32
 800973a:	d112      	bne.n	8009762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_UART_Receive_IT+0x26>
 8009742:	88fb      	ldrh	r3, [r7, #6]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e00b      	b.n	8009764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	461a      	mov	r2, r3
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f860 	bl	800981e <UART_Start_Receive_IT>
 800975e:	4603      	mov	r3, r0
 8009760:	e000      	b.n	8009764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009762:	2302      	movs	r3, #2
  }
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977c:	e03b      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d037      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7fb fcf5 	bl	8005174 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <UART_WaitOnFlagUntilTimeout+0x30>
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e03a      	b.n	8009816 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d023      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b80      	cmp	r3, #128	@ 0x80
 80097b2:	d020      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b40      	cmp	r3, #64	@ 0x40
 80097b8:	d01d      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d116      	bne.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 f856 	bl	8009890 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2208      	movs	r2, #8
 80097e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e00f      	b.n	8009816 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4013      	ands	r3, r2
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d0b4      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	4613      	mov	r3, r2
 800982a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	88fa      	ldrh	r2, [r7, #6]
 800983c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2222      	movs	r2, #34	@ 0x22
 8009848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009862:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695a      	ldr	r2, [r3, #20]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0220 	orr.w	r2, r2, #32
 8009882:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b095      	sub	sp, #84	@ 0x54
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e5      	bne.n	8009898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3314      	adds	r3, #20
 80098d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	61fb      	str	r3, [r7, #28]
   return(result);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	f023 0301 	bic.w	r3, r3, #1
 80098e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3314      	adds	r3, #20
 80098ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e5      	bne.n	80098cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009904:	2b01      	cmp	r3, #1
 8009906:	d119      	bne.n	800993c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	330c      	adds	r3, #12
 800990e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	60bb      	str	r3, [r7, #8]
   return(result);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f023 0310 	bic.w	r3, r3, #16
 800991e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	330c      	adds	r3, #12
 8009926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009928:	61ba      	str	r2, [r7, #24]
 800992a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	613b      	str	r3, [r7, #16]
   return(result);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e5      	bne.n	8009908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800994a:	bf00      	nop
 800994c:	3754      	adds	r7, #84	@ 0x54
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689a      	ldr	r2, [r3, #8]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	431a      	orrs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800998e:	f023 030c 	bic.w	r3, r3, #12
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	430b      	orrs	r3, r1
 800999a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699a      	ldr	r2, [r3, #24]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009a68 <UART_SetConfig+0x114>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d103      	bne.n	80099c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80099bc:	f7fe fbac 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	e002      	b.n	80099ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80099c4:	f7fe fb94 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 80099c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4613      	mov	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	009a      	lsls	r2, r3, #2
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e0:	4a22      	ldr	r2, [pc, #136]	@ (8009a6c <UART_SetConfig+0x118>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	0119      	lsls	r1, r3, #4
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009a      	lsls	r2, r3, #2
 80099f4:	441a      	add	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a00:	4b1a      	ldr	r3, [pc, #104]	@ (8009a6c <UART_SetConfig+0x118>)
 8009a02:	fba3 0302 	umull	r0, r3, r3, r2
 8009a06:	095b      	lsrs	r3, r3, #5
 8009a08:	2064      	movs	r0, #100	@ 0x64
 8009a0a:	fb00 f303 	mul.w	r3, r0, r3
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	3332      	adds	r3, #50	@ 0x32
 8009a14:	4a15      	ldr	r2, [pc, #84]	@ (8009a6c <UART_SetConfig+0x118>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	095b      	lsrs	r3, r3, #5
 8009a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a20:	4419      	add	r1, r3
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009a      	lsls	r2, r3, #2
 8009a2c:	441a      	add	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a38:	4b0c      	ldr	r3, [pc, #48]	@ (8009a6c <UART_SetConfig+0x118>)
 8009a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8009a3e:	095b      	lsrs	r3, r3, #5
 8009a40:	2064      	movs	r0, #100	@ 0x64
 8009a42:	fb00 f303 	mul.w	r3, r0, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	3332      	adds	r3, #50	@ 0x32
 8009a4c:	4a07      	ldr	r2, [pc, #28]	@ (8009a6c <UART_SetConfig+0x118>)
 8009a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	40013800 	.word	0x40013800
 8009a6c:	51eb851f 	.word	0x51eb851f

08009a70 <__cvt>:
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a76:	461d      	mov	r5, r3
 8009a78:	bfbb      	ittet	lt
 8009a7a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009a7e:	461d      	movlt	r5, r3
 8009a80:	2300      	movge	r3, #0
 8009a82:	232d      	movlt	r3, #45	@ 0x2d
 8009a84:	b088      	sub	sp, #32
 8009a86:	4614      	mov	r4, r2
 8009a88:	bfb8      	it	lt
 8009a8a:	4614      	movlt	r4, r2
 8009a8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a8e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009a90:	7013      	strb	r3, [r2, #0]
 8009a92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009a98:	f023 0820 	bic.w	r8, r3, #32
 8009a9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009aa0:	d005      	beq.n	8009aae <__cvt+0x3e>
 8009aa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009aa6:	d100      	bne.n	8009aaa <__cvt+0x3a>
 8009aa8:	3601      	adds	r6, #1
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e000      	b.n	8009ab0 <__cvt+0x40>
 8009aae:	2303      	movs	r3, #3
 8009ab0:	aa07      	add	r2, sp, #28
 8009ab2:	9204      	str	r2, [sp, #16]
 8009ab4:	aa06      	add	r2, sp, #24
 8009ab6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009aba:	e9cd 3600 	strd	r3, r6, [sp]
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f000 ff99 	bl	800a9f8 <_dtoa_r>
 8009ac6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009aca:	4607      	mov	r7, r0
 8009acc:	d119      	bne.n	8009b02 <__cvt+0x92>
 8009ace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ad0:	07db      	lsls	r3, r3, #31
 8009ad2:	d50e      	bpl.n	8009af2 <__cvt+0x82>
 8009ad4:	eb00 0906 	add.w	r9, r0, r6
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2300      	movs	r3, #0
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 ff6c 	bl	80009bc <__aeabi_dcmpeq>
 8009ae4:	b108      	cbz	r0, 8009aea <__cvt+0x7a>
 8009ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8009aea:	2230      	movs	r2, #48	@ 0x30
 8009aec:	9b07      	ldr	r3, [sp, #28]
 8009aee:	454b      	cmp	r3, r9
 8009af0:	d31e      	bcc.n	8009b30 <__cvt+0xc0>
 8009af2:	4638      	mov	r0, r7
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009af8:	1bdb      	subs	r3, r3, r7
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	b008      	add	sp, #32
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b06:	eb00 0906 	add.w	r9, r0, r6
 8009b0a:	d1e5      	bne.n	8009ad8 <__cvt+0x68>
 8009b0c:	7803      	ldrb	r3, [r0, #0]
 8009b0e:	2b30      	cmp	r3, #48	@ 0x30
 8009b10:	d10a      	bne.n	8009b28 <__cvt+0xb8>
 8009b12:	2200      	movs	r2, #0
 8009b14:	2300      	movs	r3, #0
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 ff4f 	bl	80009bc <__aeabi_dcmpeq>
 8009b1e:	b918      	cbnz	r0, 8009b28 <__cvt+0xb8>
 8009b20:	f1c6 0601 	rsb	r6, r6, #1
 8009b24:	f8ca 6000 	str.w	r6, [sl]
 8009b28:	f8da 3000 	ldr.w	r3, [sl]
 8009b2c:	4499      	add	r9, r3
 8009b2e:	e7d3      	b.n	8009ad8 <__cvt+0x68>
 8009b30:	1c59      	adds	r1, r3, #1
 8009b32:	9107      	str	r1, [sp, #28]
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e7d9      	b.n	8009aec <__cvt+0x7c>

08009b38 <__exponent>:
 8009b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3a:	2900      	cmp	r1, #0
 8009b3c:	bfb6      	itet	lt
 8009b3e:	232d      	movlt	r3, #45	@ 0x2d
 8009b40:	232b      	movge	r3, #43	@ 0x2b
 8009b42:	4249      	neglt	r1, r1
 8009b44:	2909      	cmp	r1, #9
 8009b46:	7002      	strb	r2, [r0, #0]
 8009b48:	7043      	strb	r3, [r0, #1]
 8009b4a:	dd29      	ble.n	8009ba0 <__exponent+0x68>
 8009b4c:	f10d 0307 	add.w	r3, sp, #7
 8009b50:	461d      	mov	r5, r3
 8009b52:	270a      	movs	r7, #10
 8009b54:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b58:	461a      	mov	r2, r3
 8009b5a:	fb07 1416 	mls	r4, r7, r6, r1
 8009b5e:	3430      	adds	r4, #48	@ 0x30
 8009b60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b64:	460c      	mov	r4, r1
 8009b66:	2c63      	cmp	r4, #99	@ 0x63
 8009b68:	4631      	mov	r1, r6
 8009b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b6e:	dcf1      	bgt.n	8009b54 <__exponent+0x1c>
 8009b70:	3130      	adds	r1, #48	@ 0x30
 8009b72:	1e94      	subs	r4, r2, #2
 8009b74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b78:	4623      	mov	r3, r4
 8009b7a:	1c41      	adds	r1, r0, #1
 8009b7c:	42ab      	cmp	r3, r5
 8009b7e:	d30a      	bcc.n	8009b96 <__exponent+0x5e>
 8009b80:	f10d 0309 	add.w	r3, sp, #9
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	42ac      	cmp	r4, r5
 8009b88:	bf88      	it	hi
 8009b8a:	2300      	movhi	r3, #0
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	4403      	add	r3, r0
 8009b90:	1a18      	subs	r0, r3, r0
 8009b92:	b003      	add	sp, #12
 8009b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b9e:	e7ed      	b.n	8009b7c <__exponent+0x44>
 8009ba0:	2330      	movs	r3, #48	@ 0x30
 8009ba2:	3130      	adds	r1, #48	@ 0x30
 8009ba4:	7083      	strb	r3, [r0, #2]
 8009ba6:	70c1      	strb	r1, [r0, #3]
 8009ba8:	1d03      	adds	r3, r0, #4
 8009baa:	e7f1      	b.n	8009b90 <__exponent+0x58>

08009bac <_printf_float>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	b091      	sub	sp, #68	@ 0x44
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009bb8:	4616      	mov	r6, r2
 8009bba:	461f      	mov	r7, r3
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	f000 fe0d 	bl	800a7dc <_localeconv_r>
 8009bc2:	6803      	ldr	r3, [r0, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	f7f6 facc 	bl	8000164 <strlen>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8009bd6:	3307      	adds	r3, #7
 8009bd8:	f023 0307 	bic.w	r3, r3, #7
 8009bdc:	f103 0208 	add.w	r2, r3, #8
 8009be0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009be4:	f8d4 b000 	ldr.w	fp, [r4]
 8009be8:	f8c8 2000 	str.w	r2, [r8]
 8009bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c06:	4b9c      	ldr	r3, [pc, #624]	@ (8009e78 <_printf_float+0x2cc>)
 8009c08:	f7f6 ff0a 	bl	8000a20 <__aeabi_dcmpun>
 8009c0c:	bb70      	cbnz	r0, 8009c6c <_printf_float+0xc0>
 8009c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	4b98      	ldr	r3, [pc, #608]	@ (8009e78 <_printf_float+0x2cc>)
 8009c18:	f7f6 fee4 	bl	80009e4 <__aeabi_dcmple>
 8009c1c:	bb30      	cbnz	r0, 8009c6c <_printf_float+0xc0>
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fed3 	bl	80009d0 <__aeabi_dcmplt>
 8009c2a:	b110      	cbz	r0, 8009c32 <_printf_float+0x86>
 8009c2c:	232d      	movs	r3, #45	@ 0x2d
 8009c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c32:	4a92      	ldr	r2, [pc, #584]	@ (8009e7c <_printf_float+0x2d0>)
 8009c34:	4b92      	ldr	r3, [pc, #584]	@ (8009e80 <_printf_float+0x2d4>)
 8009c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c3a:	bf8c      	ite	hi
 8009c3c:	4690      	movhi	r8, r2
 8009c3e:	4698      	movls	r8, r3
 8009c40:	2303      	movs	r3, #3
 8009c42:	f04f 0900 	mov.w	r9, #0
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	f02b 0304 	bic.w	r3, fp, #4
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	4633      	mov	r3, r6
 8009c50:	4621      	mov	r1, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	9700      	str	r7, [sp, #0]
 8009c56:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009c58:	f000 f9d4 	bl	800a004 <_printf_common>
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f040 8090 	bne.w	8009d82 <_printf_float+0x1d6>
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295
 8009c66:	b011      	add	sp, #68	@ 0x44
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 fed4 	bl	8000a20 <__aeabi_dcmpun>
 8009c78:	b148      	cbz	r0, 8009c8e <_printf_float+0xe2>
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bfb8      	it	lt
 8009c80:	232d      	movlt	r3, #45	@ 0x2d
 8009c82:	4a80      	ldr	r2, [pc, #512]	@ (8009e84 <_printf_float+0x2d8>)
 8009c84:	bfb8      	it	lt
 8009c86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8009e88 <_printf_float+0x2dc>)
 8009c8c:	e7d3      	b.n	8009c36 <_printf_float+0x8a>
 8009c8e:	6863      	ldr	r3, [r4, #4]
 8009c90:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	d13f      	bne.n	8009d18 <_printf_float+0x16c>
 8009c98:	2306      	movs	r3, #6
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	9206      	str	r2, [sp, #24]
 8009ca6:	aa0e      	add	r2, sp, #56	@ 0x38
 8009ca8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009cac:	aa0d      	add	r2, sp, #52	@ 0x34
 8009cae:	9203      	str	r2, [sp, #12]
 8009cb0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	4642      	mov	r2, r8
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	910a      	str	r1, [sp, #40]	@ 0x28
 8009cc4:	f7ff fed4 	bl	8009a70 <__cvt>
 8009cc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cca:	4680      	mov	r8, r0
 8009ccc:	2947      	cmp	r1, #71	@ 0x47
 8009cce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009cd0:	d128      	bne.n	8009d24 <_printf_float+0x178>
 8009cd2:	1cc8      	adds	r0, r1, #3
 8009cd4:	db02      	blt.n	8009cdc <_printf_float+0x130>
 8009cd6:	6863      	ldr	r3, [r4, #4]
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	dd40      	ble.n	8009d5e <_printf_float+0x1b2>
 8009cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	3901      	subs	r1, #1
 8009ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cec:	910d      	str	r1, [sp, #52]	@ 0x34
 8009cee:	f7ff ff23 	bl	8009b38 <__exponent>
 8009cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf4:	4681      	mov	r9, r0
 8009cf6:	1813      	adds	r3, r2, r0
 8009cf8:	2a01      	cmp	r2, #1
 8009cfa:	6123      	str	r3, [r4, #16]
 8009cfc:	dc02      	bgt.n	8009d04 <_printf_float+0x158>
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	07d2      	lsls	r2, r2, #31
 8009d02:	d501      	bpl.n	8009d08 <_printf_float+0x15c>
 8009d04:	3301      	adds	r3, #1
 8009d06:	6123      	str	r3, [r4, #16]
 8009d08:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d09e      	beq.n	8009c4e <_printf_float+0xa2>
 8009d10:	232d      	movs	r3, #45	@ 0x2d
 8009d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d16:	e79a      	b.n	8009c4e <_printf_float+0xa2>
 8009d18:	2947      	cmp	r1, #71	@ 0x47
 8009d1a:	d1bf      	bne.n	8009c9c <_printf_float+0xf0>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1bd      	bne.n	8009c9c <_printf_float+0xf0>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e7ba      	b.n	8009c9a <_printf_float+0xee>
 8009d24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d28:	d9dc      	bls.n	8009ce4 <_printf_float+0x138>
 8009d2a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d2e:	d118      	bne.n	8009d62 <_printf_float+0x1b6>
 8009d30:	2900      	cmp	r1, #0
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	dd0b      	ble.n	8009d4e <_printf_float+0x1a2>
 8009d36:	6121      	str	r1, [r4, #16]
 8009d38:	b913      	cbnz	r3, 8009d40 <_printf_float+0x194>
 8009d3a:	6822      	ldr	r2, [r4, #0]
 8009d3c:	07d0      	lsls	r0, r2, #31
 8009d3e:	d502      	bpl.n	8009d46 <_printf_float+0x19a>
 8009d40:	3301      	adds	r3, #1
 8009d42:	440b      	add	r3, r1
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d4c:	e7dc      	b.n	8009d08 <_printf_float+0x15c>
 8009d4e:	b913      	cbnz	r3, 8009d56 <_printf_float+0x1aa>
 8009d50:	6822      	ldr	r2, [r4, #0]
 8009d52:	07d2      	lsls	r2, r2, #31
 8009d54:	d501      	bpl.n	8009d5a <_printf_float+0x1ae>
 8009d56:	3302      	adds	r3, #2
 8009d58:	e7f4      	b.n	8009d44 <_printf_float+0x198>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e7f2      	b.n	8009d44 <_printf_float+0x198>
 8009d5e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d64:	4299      	cmp	r1, r3
 8009d66:	db05      	blt.n	8009d74 <_printf_float+0x1c8>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	6121      	str	r1, [r4, #16]
 8009d6c:	07d8      	lsls	r0, r3, #31
 8009d6e:	d5ea      	bpl.n	8009d46 <_printf_float+0x19a>
 8009d70:	1c4b      	adds	r3, r1, #1
 8009d72:	e7e7      	b.n	8009d44 <_printf_float+0x198>
 8009d74:	2900      	cmp	r1, #0
 8009d76:	bfcc      	ite	gt
 8009d78:	2201      	movgt	r2, #1
 8009d7a:	f1c1 0202 	rsble	r2, r1, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	e7e0      	b.n	8009d44 <_printf_float+0x198>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	055a      	lsls	r2, r3, #21
 8009d86:	d407      	bmi.n	8009d98 <_printf_float+0x1ec>
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	d12b      	bne.n	8009dee <_printf_float+0x242>
 8009d96:	e764      	b.n	8009c62 <_printf_float+0xb6>
 8009d98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d9c:	f240 80dc 	bls.w	8009f58 <_printf_float+0x3ac>
 8009da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009da4:	2200      	movs	r2, #0
 8009da6:	2300      	movs	r3, #0
 8009da8:	f7f6 fe08 	bl	80009bc <__aeabi_dcmpeq>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d033      	beq.n	8009e18 <_printf_float+0x26c>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	4a35      	ldr	r2, [pc, #212]	@ (8009e8c <_printf_float+0x2e0>)
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af51 	beq.w	8009c62 <_printf_float+0xb6>
 8009dc0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009dc4:	4543      	cmp	r3, r8
 8009dc6:	db02      	blt.n	8009dce <_printf_float+0x222>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	07d8      	lsls	r0, r3, #31
 8009dcc:	d50f      	bpl.n	8009dee <_printf_float+0x242>
 8009dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f43f af42 	beq.w	8009c62 <_printf_float+0xb6>
 8009dde:	f04f 0900 	mov.w	r9, #0
 8009de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009de6:	f104 0a1a 	add.w	sl, r4, #26
 8009dea:	45c8      	cmp	r8, r9
 8009dec:	dc09      	bgt.n	8009e02 <_printf_float+0x256>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	079b      	lsls	r3, r3, #30
 8009df2:	f100 8102 	bmi.w	8009ffa <_printf_float+0x44e>
 8009df6:	68e0      	ldr	r0, [r4, #12]
 8009df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dfa:	4298      	cmp	r0, r3
 8009dfc:	bfb8      	it	lt
 8009dfe:	4618      	movlt	r0, r3
 8009e00:	e731      	b.n	8009c66 <_printf_float+0xba>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4652      	mov	r2, sl
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f af28 	beq.w	8009c62 <_printf_float+0xb6>
 8009e12:	f109 0901 	add.w	r9, r9, #1
 8009e16:	e7e8      	b.n	8009dea <_printf_float+0x23e>
 8009e18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dc38      	bgt.n	8009e90 <_printf_float+0x2e4>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	4a19      	ldr	r2, [pc, #100]	@ (8009e8c <_printf_float+0x2e0>)
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f af1a 	beq.w	8009c62 <_printf_float+0xb6>
 8009e2e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009e32:	ea59 0303 	orrs.w	r3, r9, r3
 8009e36:	d102      	bne.n	8009e3e <_printf_float+0x292>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d5d7      	bpl.n	8009dee <_printf_float+0x242>
 8009e3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e42:	4631      	mov	r1, r6
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b8      	blx	r7
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f43f af0a 	beq.w	8009c62 <_printf_float+0xb6>
 8009e4e:	f04f 0a00 	mov.w	sl, #0
 8009e52:	f104 0b1a 	add.w	fp, r4, #26
 8009e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e58:	425b      	negs	r3, r3
 8009e5a:	4553      	cmp	r3, sl
 8009e5c:	dc01      	bgt.n	8009e62 <_printf_float+0x2b6>
 8009e5e:	464b      	mov	r3, r9
 8009e60:	e793      	b.n	8009d8a <_printf_float+0x1de>
 8009e62:	2301      	movs	r3, #1
 8009e64:	465a      	mov	r2, fp
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f aef8 	beq.w	8009c62 <_printf_float+0xb6>
 8009e72:	f10a 0a01 	add.w	sl, sl, #1
 8009e76:	e7ee      	b.n	8009e56 <_printf_float+0x2aa>
 8009e78:	7fefffff 	.word	0x7fefffff
 8009e7c:	0800cd6a 	.word	0x0800cd6a
 8009e80:	0800cd66 	.word	0x0800cd66
 8009e84:	0800cd72 	.word	0x0800cd72
 8009e88:	0800cd6e 	.word	0x0800cd6e
 8009e8c:	0800cd76 	.word	0x0800cd76
 8009e90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e92:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e96:	4553      	cmp	r3, sl
 8009e98:	bfa8      	it	ge
 8009e9a:	4653      	movge	r3, sl
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	4699      	mov	r9, r3
 8009ea0:	dc36      	bgt.n	8009f10 <_printf_float+0x364>
 8009ea2:	f04f 0b00 	mov.w	fp, #0
 8009ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eaa:	f104 021a 	add.w	r2, r4, #26
 8009eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eb2:	eba3 0309 	sub.w	r3, r3, r9
 8009eb6:	455b      	cmp	r3, fp
 8009eb8:	dc31      	bgt.n	8009f1e <_printf_float+0x372>
 8009eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ebc:	459a      	cmp	sl, r3
 8009ebe:	dc3a      	bgt.n	8009f36 <_printf_float+0x38a>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	07da      	lsls	r2, r3, #31
 8009ec4:	d437      	bmi.n	8009f36 <_printf_float+0x38a>
 8009ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ec8:	ebaa 0903 	sub.w	r9, sl, r3
 8009ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ece:	ebaa 0303 	sub.w	r3, sl, r3
 8009ed2:	4599      	cmp	r9, r3
 8009ed4:	bfa8      	it	ge
 8009ed6:	4699      	movge	r9, r3
 8009ed8:	f1b9 0f00 	cmp.w	r9, #0
 8009edc:	dc33      	bgt.n	8009f46 <_printf_float+0x39a>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ee6:	f104 0b1a 	add.w	fp, r4, #26
 8009eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eec:	ebaa 0303 	sub.w	r3, sl, r3
 8009ef0:	eba3 0309 	sub.w	r3, r3, r9
 8009ef4:	4543      	cmp	r3, r8
 8009ef6:	f77f af7a 	ble.w	8009dee <_printf_float+0x242>
 8009efa:	2301      	movs	r3, #1
 8009efc:	465a      	mov	r2, fp
 8009efe:	4631      	mov	r1, r6
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f aeac 	beq.w	8009c62 <_printf_float+0xb6>
 8009f0a:	f108 0801 	add.w	r8, r8, #1
 8009f0e:	e7ec      	b.n	8009eea <_printf_float+0x33e>
 8009f10:	4642      	mov	r2, r8
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d1c2      	bne.n	8009ea2 <_printf_float+0x2f6>
 8009f1c:	e6a1      	b.n	8009c62 <_printf_float+0xb6>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4631      	mov	r1, r6
 8009f22:	4628      	mov	r0, r5
 8009f24:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae9a 	beq.w	8009c62 <_printf_float+0xb6>
 8009f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f30:	f10b 0b01 	add.w	fp, fp, #1
 8009f34:	e7bb      	b.n	8009eae <_printf_float+0x302>
 8009f36:	4631      	mov	r1, r6
 8009f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	d1c0      	bne.n	8009ec6 <_printf_float+0x31a>
 8009f44:	e68d      	b.n	8009c62 <_printf_float+0xb6>
 8009f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f48:	464b      	mov	r3, r9
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	4442      	add	r2, r8
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	d1c3      	bne.n	8009ede <_printf_float+0x332>
 8009f56:	e684      	b.n	8009c62 <_printf_float+0xb6>
 8009f58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009f5c:	f1ba 0f01 	cmp.w	sl, #1
 8009f60:	dc01      	bgt.n	8009f66 <_printf_float+0x3ba>
 8009f62:	07db      	lsls	r3, r3, #31
 8009f64:	d536      	bpl.n	8009fd4 <_printf_float+0x428>
 8009f66:	2301      	movs	r3, #1
 8009f68:	4642      	mov	r2, r8
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	f43f ae76 	beq.w	8009c62 <_printf_float+0xb6>
 8009f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b8      	blx	r7
 8009f80:	3001      	adds	r0, #1
 8009f82:	f43f ae6e 	beq.w	8009c62 <_printf_float+0xb6>
 8009f86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f92:	f7f6 fd13 	bl	80009bc <__aeabi_dcmpeq>
 8009f96:	b9c0      	cbnz	r0, 8009fca <_printf_float+0x41e>
 8009f98:	4653      	mov	r3, sl
 8009f9a:	f108 0201 	add.w	r2, r8, #1
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	47b8      	blx	r7
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d10c      	bne.n	8009fc2 <_printf_float+0x416>
 8009fa8:	e65b      	b.n	8009c62 <_printf_float+0xb6>
 8009faa:	2301      	movs	r3, #1
 8009fac:	465a      	mov	r2, fp
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b8      	blx	r7
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	f43f ae54 	beq.w	8009c62 <_printf_float+0xb6>
 8009fba:	f108 0801 	add.w	r8, r8, #1
 8009fbe:	45d0      	cmp	r8, sl
 8009fc0:	dbf3      	blt.n	8009faa <_printf_float+0x3fe>
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fc8:	e6e0      	b.n	8009d8c <_printf_float+0x1e0>
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	f104 0b1a 	add.w	fp, r4, #26
 8009fd2:	e7f4      	b.n	8009fbe <_printf_float+0x412>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	e7e1      	b.n	8009f9e <_printf_float+0x3f2>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	464a      	mov	r2, r9
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b8      	blx	r7
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	f43f ae3c 	beq.w	8009c62 <_printf_float+0xb6>
 8009fea:	f108 0801 	add.w	r8, r8, #1
 8009fee:	68e3      	ldr	r3, [r4, #12]
 8009ff0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ff2:	1a5b      	subs	r3, r3, r1
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	dcf0      	bgt.n	8009fda <_printf_float+0x42e>
 8009ff8:	e6fd      	b.n	8009df6 <_printf_float+0x24a>
 8009ffa:	f04f 0800 	mov.w	r8, #0
 8009ffe:	f104 0919 	add.w	r9, r4, #25
 800a002:	e7f4      	b.n	8009fee <_printf_float+0x442>

0800a004 <_printf_common>:
 800a004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	4616      	mov	r6, r2
 800a00a:	4698      	mov	r8, r3
 800a00c:	688a      	ldr	r2, [r1, #8]
 800a00e:	690b      	ldr	r3, [r1, #16]
 800a010:	4607      	mov	r7, r0
 800a012:	4293      	cmp	r3, r2
 800a014:	bfb8      	it	lt
 800a016:	4613      	movlt	r3, r2
 800a018:	6033      	str	r3, [r6, #0]
 800a01a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a01e:	460c      	mov	r4, r1
 800a020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a024:	b10a      	cbz	r2, 800a02a <_printf_common+0x26>
 800a026:	3301      	adds	r3, #1
 800a028:	6033      	str	r3, [r6, #0]
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	0699      	lsls	r1, r3, #26
 800a02e:	bf42      	ittt	mi
 800a030:	6833      	ldrmi	r3, [r6, #0]
 800a032:	3302      	addmi	r3, #2
 800a034:	6033      	strmi	r3, [r6, #0]
 800a036:	6825      	ldr	r5, [r4, #0]
 800a038:	f015 0506 	ands.w	r5, r5, #6
 800a03c:	d106      	bne.n	800a04c <_printf_common+0x48>
 800a03e:	f104 0a19 	add.w	sl, r4, #25
 800a042:	68e3      	ldr	r3, [r4, #12]
 800a044:	6832      	ldr	r2, [r6, #0]
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	42ab      	cmp	r3, r5
 800a04a:	dc2b      	bgt.n	800a0a4 <_printf_common+0xa0>
 800a04c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a050:	6822      	ldr	r2, [r4, #0]
 800a052:	3b00      	subs	r3, #0
 800a054:	bf18      	it	ne
 800a056:	2301      	movne	r3, #1
 800a058:	0692      	lsls	r2, r2, #26
 800a05a:	d430      	bmi.n	800a0be <_printf_common+0xba>
 800a05c:	4641      	mov	r1, r8
 800a05e:	4638      	mov	r0, r7
 800a060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a064:	47c8      	blx	r9
 800a066:	3001      	adds	r0, #1
 800a068:	d023      	beq.n	800a0b2 <_printf_common+0xae>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	6922      	ldr	r2, [r4, #16]
 800a06e:	f003 0306 	and.w	r3, r3, #6
 800a072:	2b04      	cmp	r3, #4
 800a074:	bf14      	ite	ne
 800a076:	2500      	movne	r5, #0
 800a078:	6833      	ldreq	r3, [r6, #0]
 800a07a:	f04f 0600 	mov.w	r6, #0
 800a07e:	bf08      	it	eq
 800a080:	68e5      	ldreq	r5, [r4, #12]
 800a082:	f104 041a 	add.w	r4, r4, #26
 800a086:	bf08      	it	eq
 800a088:	1aed      	subeq	r5, r5, r3
 800a08a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a08e:	bf08      	it	eq
 800a090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a094:	4293      	cmp	r3, r2
 800a096:	bfc4      	itt	gt
 800a098:	1a9b      	subgt	r3, r3, r2
 800a09a:	18ed      	addgt	r5, r5, r3
 800a09c:	42b5      	cmp	r5, r6
 800a09e:	d11a      	bne.n	800a0d6 <_printf_common+0xd2>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e008      	b.n	800a0b6 <_printf_common+0xb2>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	4652      	mov	r2, sl
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	47c8      	blx	r9
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d103      	bne.n	800a0ba <_printf_common+0xb6>
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ba:	3501      	adds	r5, #1
 800a0bc:	e7c1      	b.n	800a042 <_printf_common+0x3e>
 800a0be:	2030      	movs	r0, #48	@ 0x30
 800a0c0:	18e1      	adds	r1, r4, r3
 800a0c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0cc:	4422      	add	r2, r4
 800a0ce:	3302      	adds	r3, #2
 800a0d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0d4:	e7c2      	b.n	800a05c <_printf_common+0x58>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4622      	mov	r2, r4
 800a0da:	4641      	mov	r1, r8
 800a0dc:	4638      	mov	r0, r7
 800a0de:	47c8      	blx	r9
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d0e6      	beq.n	800a0b2 <_printf_common+0xae>
 800a0e4:	3601      	adds	r6, #1
 800a0e6:	e7d9      	b.n	800a09c <_printf_common+0x98>

0800a0e8 <_printf_i>:
 800a0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	7e0f      	ldrb	r7, [r1, #24]
 800a0ee:	4691      	mov	r9, r2
 800a0f0:	2f78      	cmp	r7, #120	@ 0x78
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	469a      	mov	sl, r3
 800a0f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0fe:	d807      	bhi.n	800a110 <_printf_i+0x28>
 800a100:	2f62      	cmp	r7, #98	@ 0x62
 800a102:	d80a      	bhi.n	800a11a <_printf_i+0x32>
 800a104:	2f00      	cmp	r7, #0
 800a106:	f000 80d1 	beq.w	800a2ac <_printf_i+0x1c4>
 800a10a:	2f58      	cmp	r7, #88	@ 0x58
 800a10c:	f000 80b8 	beq.w	800a280 <_printf_i+0x198>
 800a110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a118:	e03a      	b.n	800a190 <_printf_i+0xa8>
 800a11a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a11e:	2b15      	cmp	r3, #21
 800a120:	d8f6      	bhi.n	800a110 <_printf_i+0x28>
 800a122:	a101      	add	r1, pc, #4	@ (adr r1, 800a128 <_printf_i+0x40>)
 800a124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a128:	0800a181 	.word	0x0800a181
 800a12c:	0800a195 	.word	0x0800a195
 800a130:	0800a111 	.word	0x0800a111
 800a134:	0800a111 	.word	0x0800a111
 800a138:	0800a111 	.word	0x0800a111
 800a13c:	0800a111 	.word	0x0800a111
 800a140:	0800a195 	.word	0x0800a195
 800a144:	0800a111 	.word	0x0800a111
 800a148:	0800a111 	.word	0x0800a111
 800a14c:	0800a111 	.word	0x0800a111
 800a150:	0800a111 	.word	0x0800a111
 800a154:	0800a293 	.word	0x0800a293
 800a158:	0800a1bf 	.word	0x0800a1bf
 800a15c:	0800a24d 	.word	0x0800a24d
 800a160:	0800a111 	.word	0x0800a111
 800a164:	0800a111 	.word	0x0800a111
 800a168:	0800a2b5 	.word	0x0800a2b5
 800a16c:	0800a111 	.word	0x0800a111
 800a170:	0800a1bf 	.word	0x0800a1bf
 800a174:	0800a111 	.word	0x0800a111
 800a178:	0800a111 	.word	0x0800a111
 800a17c:	0800a255 	.word	0x0800a255
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	1d1a      	adds	r2, r3, #4
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6032      	str	r2, [r6, #0]
 800a188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a18c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a190:	2301      	movs	r3, #1
 800a192:	e09c      	b.n	800a2ce <_printf_i+0x1e6>
 800a194:	6833      	ldr	r3, [r6, #0]
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	1d19      	adds	r1, r3, #4
 800a19a:	6031      	str	r1, [r6, #0]
 800a19c:	0606      	lsls	r6, r0, #24
 800a19e:	d501      	bpl.n	800a1a4 <_printf_i+0xbc>
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	e003      	b.n	800a1ac <_printf_i+0xc4>
 800a1a4:	0645      	lsls	r5, r0, #25
 800a1a6:	d5fb      	bpl.n	800a1a0 <_printf_i+0xb8>
 800a1a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	da03      	bge.n	800a1b8 <_printf_i+0xd0>
 800a1b0:	232d      	movs	r3, #45	@ 0x2d
 800a1b2:	426d      	negs	r5, r5
 800a1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1b8:	230a      	movs	r3, #10
 800a1ba:	4858      	ldr	r0, [pc, #352]	@ (800a31c <_printf_i+0x234>)
 800a1bc:	e011      	b.n	800a1e2 <_printf_i+0xfa>
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	6833      	ldr	r3, [r6, #0]
 800a1c2:	0608      	lsls	r0, r1, #24
 800a1c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1c8:	d402      	bmi.n	800a1d0 <_printf_i+0xe8>
 800a1ca:	0649      	lsls	r1, r1, #25
 800a1cc:	bf48      	it	mi
 800a1ce:	b2ad      	uxthmi	r5, r5
 800a1d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1d2:	6033      	str	r3, [r6, #0]
 800a1d4:	bf14      	ite	ne
 800a1d6:	230a      	movne	r3, #10
 800a1d8:	2308      	moveq	r3, #8
 800a1da:	4850      	ldr	r0, [pc, #320]	@ (800a31c <_printf_i+0x234>)
 800a1dc:	2100      	movs	r1, #0
 800a1de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1e2:	6866      	ldr	r6, [r4, #4]
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	60a6      	str	r6, [r4, #8]
 800a1e8:	db05      	blt.n	800a1f6 <_printf_i+0x10e>
 800a1ea:	6821      	ldr	r1, [r4, #0]
 800a1ec:	432e      	orrs	r6, r5
 800a1ee:	f021 0104 	bic.w	r1, r1, #4
 800a1f2:	6021      	str	r1, [r4, #0]
 800a1f4:	d04b      	beq.n	800a28e <_printf_i+0x1a6>
 800a1f6:	4616      	mov	r6, r2
 800a1f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1fc:	fb03 5711 	mls	r7, r3, r1, r5
 800a200:	5dc7      	ldrb	r7, [r0, r7]
 800a202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a206:	462f      	mov	r7, r5
 800a208:	42bb      	cmp	r3, r7
 800a20a:	460d      	mov	r5, r1
 800a20c:	d9f4      	bls.n	800a1f8 <_printf_i+0x110>
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d10b      	bne.n	800a22a <_printf_i+0x142>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	07df      	lsls	r7, r3, #31
 800a216:	d508      	bpl.n	800a22a <_printf_i+0x142>
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	6861      	ldr	r1, [r4, #4]
 800a21c:	4299      	cmp	r1, r3
 800a21e:	bfde      	ittt	le
 800a220:	2330      	movle	r3, #48	@ 0x30
 800a222:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a22a:	1b92      	subs	r2, r2, r6
 800a22c:	6122      	str	r2, [r4, #16]
 800a22e:	464b      	mov	r3, r9
 800a230:	4621      	mov	r1, r4
 800a232:	4640      	mov	r0, r8
 800a234:	f8cd a000 	str.w	sl, [sp]
 800a238:	aa03      	add	r2, sp, #12
 800a23a:	f7ff fee3 	bl	800a004 <_printf_common>
 800a23e:	3001      	adds	r0, #1
 800a240:	d14a      	bne.n	800a2d8 <_printf_i+0x1f0>
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	b004      	add	sp, #16
 800a248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	f043 0320 	orr.w	r3, r3, #32
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	2778      	movs	r7, #120	@ 0x78
 800a256:	4832      	ldr	r0, [pc, #200]	@ (800a320 <_printf_i+0x238>)
 800a258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	6831      	ldr	r1, [r6, #0]
 800a260:	061f      	lsls	r7, r3, #24
 800a262:	f851 5b04 	ldr.w	r5, [r1], #4
 800a266:	d402      	bmi.n	800a26e <_printf_i+0x186>
 800a268:	065f      	lsls	r7, r3, #25
 800a26a:	bf48      	it	mi
 800a26c:	b2ad      	uxthmi	r5, r5
 800a26e:	6031      	str	r1, [r6, #0]
 800a270:	07d9      	lsls	r1, r3, #31
 800a272:	bf44      	itt	mi
 800a274:	f043 0320 	orrmi.w	r3, r3, #32
 800a278:	6023      	strmi	r3, [r4, #0]
 800a27a:	b11d      	cbz	r5, 800a284 <_printf_i+0x19c>
 800a27c:	2310      	movs	r3, #16
 800a27e:	e7ad      	b.n	800a1dc <_printf_i+0xf4>
 800a280:	4826      	ldr	r0, [pc, #152]	@ (800a31c <_printf_i+0x234>)
 800a282:	e7e9      	b.n	800a258 <_printf_i+0x170>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	f023 0320 	bic.w	r3, r3, #32
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	e7f6      	b.n	800a27c <_printf_i+0x194>
 800a28e:	4616      	mov	r6, r2
 800a290:	e7bd      	b.n	800a20e <_printf_i+0x126>
 800a292:	6833      	ldr	r3, [r6, #0]
 800a294:	6825      	ldr	r5, [r4, #0]
 800a296:	1d18      	adds	r0, r3, #4
 800a298:	6961      	ldr	r1, [r4, #20]
 800a29a:	6030      	str	r0, [r6, #0]
 800a29c:	062e      	lsls	r6, r5, #24
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	d501      	bpl.n	800a2a6 <_printf_i+0x1be>
 800a2a2:	6019      	str	r1, [r3, #0]
 800a2a4:	e002      	b.n	800a2ac <_printf_i+0x1c4>
 800a2a6:	0668      	lsls	r0, r5, #25
 800a2a8:	d5fb      	bpl.n	800a2a2 <_printf_i+0x1ba>
 800a2aa:	8019      	strh	r1, [r3, #0]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4616      	mov	r6, r2
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	e7bc      	b.n	800a22e <_printf_i+0x146>
 800a2b4:	6833      	ldr	r3, [r6, #0]
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	1d1a      	adds	r2, r3, #4
 800a2ba:	6032      	str	r2, [r6, #0]
 800a2bc:	681e      	ldr	r6, [r3, #0]
 800a2be:	6862      	ldr	r2, [r4, #4]
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f000 fb02 	bl	800a8ca <memchr>
 800a2c6:	b108      	cbz	r0, 800a2cc <_printf_i+0x1e4>
 800a2c8:	1b80      	subs	r0, r0, r6
 800a2ca:	6060      	str	r0, [r4, #4]
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d6:	e7aa      	b.n	800a22e <_printf_i+0x146>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	4649      	mov	r1, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	47d0      	blx	sl
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d0ad      	beq.n	800a242 <_printf_i+0x15a>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	079b      	lsls	r3, r3, #30
 800a2ea:	d413      	bmi.n	800a314 <_printf_i+0x22c>
 800a2ec:	68e0      	ldr	r0, [r4, #12]
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	4298      	cmp	r0, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	4618      	movlt	r0, r3
 800a2f6:	e7a6      	b.n	800a246 <_printf_i+0x15e>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	4640      	mov	r0, r8
 800a300:	47d0      	blx	sl
 800a302:	3001      	adds	r0, #1
 800a304:	d09d      	beq.n	800a242 <_printf_i+0x15a>
 800a306:	3501      	adds	r5, #1
 800a308:	68e3      	ldr	r3, [r4, #12]
 800a30a:	9903      	ldr	r1, [sp, #12]
 800a30c:	1a5b      	subs	r3, r3, r1
 800a30e:	42ab      	cmp	r3, r5
 800a310:	dcf2      	bgt.n	800a2f8 <_printf_i+0x210>
 800a312:	e7eb      	b.n	800a2ec <_printf_i+0x204>
 800a314:	2500      	movs	r5, #0
 800a316:	f104 0619 	add.w	r6, r4, #25
 800a31a:	e7f5      	b.n	800a308 <_printf_i+0x220>
 800a31c:	0800cd78 	.word	0x0800cd78
 800a320:	0800cd89 	.word	0x0800cd89

0800a324 <std>:
 800a324:	2300      	movs	r3, #0
 800a326:	b510      	push	{r4, lr}
 800a328:	4604      	mov	r4, r0
 800a32a:	e9c0 3300 	strd	r3, r3, [r0]
 800a32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a332:	6083      	str	r3, [r0, #8]
 800a334:	8181      	strh	r1, [r0, #12]
 800a336:	6643      	str	r3, [r0, #100]	@ 0x64
 800a338:	81c2      	strh	r2, [r0, #14]
 800a33a:	6183      	str	r3, [r0, #24]
 800a33c:	4619      	mov	r1, r3
 800a33e:	2208      	movs	r2, #8
 800a340:	305c      	adds	r0, #92	@ 0x5c
 800a342:	f000 fa1d 	bl	800a780 <memset>
 800a346:	4b0d      	ldr	r3, [pc, #52]	@ (800a37c <std+0x58>)
 800a348:	6224      	str	r4, [r4, #32]
 800a34a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a34c:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <std+0x5c>)
 800a34e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a350:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <std+0x60>)
 800a352:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a354:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <std+0x64>)
 800a356:	6323      	str	r3, [r4, #48]	@ 0x30
 800a358:	4b0c      	ldr	r3, [pc, #48]	@ (800a38c <std+0x68>)
 800a35a:	429c      	cmp	r4, r3
 800a35c:	d006      	beq.n	800a36c <std+0x48>
 800a35e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a362:	4294      	cmp	r4, r2
 800a364:	d002      	beq.n	800a36c <std+0x48>
 800a366:	33d0      	adds	r3, #208	@ 0xd0
 800a368:	429c      	cmp	r4, r3
 800a36a:	d105      	bne.n	800a378 <std+0x54>
 800a36c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a374:	f000 baa6 	b.w	800a8c4 <__retarget_lock_init_recursive>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	bf00      	nop
 800a37c:	0800a5d1 	.word	0x0800a5d1
 800a380:	0800a5f3 	.word	0x0800a5f3
 800a384:	0800a62b 	.word	0x0800a62b
 800a388:	0800a64f 	.word	0x0800a64f
 800a38c:	20000690 	.word	0x20000690

0800a390 <stdio_exit_handler>:
 800a390:	4a02      	ldr	r2, [pc, #8]	@ (800a39c <stdio_exit_handler+0xc>)
 800a392:	4903      	ldr	r1, [pc, #12]	@ (800a3a0 <stdio_exit_handler+0x10>)
 800a394:	4803      	ldr	r0, [pc, #12]	@ (800a3a4 <stdio_exit_handler+0x14>)
 800a396:	f000 b869 	b.w	800a46c <_fwalk_sglue>
 800a39a:	bf00      	nop
 800a39c:	20000068 	.word	0x20000068
 800a3a0:	0800c4c1 	.word	0x0800c4c1
 800a3a4:	20000078 	.word	0x20000078

0800a3a8 <cleanup_stdio>:
 800a3a8:	6841      	ldr	r1, [r0, #4]
 800a3aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a3dc <cleanup_stdio+0x34>)
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	d001      	beq.n	800a3b8 <cleanup_stdio+0x10>
 800a3b4:	f002 f884 	bl	800c4c0 <_fflush_r>
 800a3b8:	68a1      	ldr	r1, [r4, #8]
 800a3ba:	4b09      	ldr	r3, [pc, #36]	@ (800a3e0 <cleanup_stdio+0x38>)
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d002      	beq.n	800a3c6 <cleanup_stdio+0x1e>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f002 f87d 	bl	800c4c0 <_fflush_r>
 800a3c6:	68e1      	ldr	r1, [r4, #12]
 800a3c8:	4b06      	ldr	r3, [pc, #24]	@ (800a3e4 <cleanup_stdio+0x3c>)
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	d004      	beq.n	800a3d8 <cleanup_stdio+0x30>
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d4:	f002 b874 	b.w	800c4c0 <_fflush_r>
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000690 	.word	0x20000690
 800a3e0:	200006f8 	.word	0x200006f8
 800a3e4:	20000760 	.word	0x20000760

0800a3e8 <global_stdio_init.part.0>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a418 <global_stdio_init.part.0+0x30>)
 800a3ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a41c <global_stdio_init.part.0+0x34>)
 800a3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a420 <global_stdio_init.part.0+0x38>)
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f7ff ff94 	bl	800a324 <std>
 800a3fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a400:	2201      	movs	r2, #1
 800a402:	2109      	movs	r1, #9
 800a404:	f7ff ff8e 	bl	800a324 <std>
 800a408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a40c:	2202      	movs	r2, #2
 800a40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a412:	2112      	movs	r1, #18
 800a414:	f7ff bf86 	b.w	800a324 <std>
 800a418:	200007c8 	.word	0x200007c8
 800a41c:	20000690 	.word	0x20000690
 800a420:	0800a391 	.word	0x0800a391

0800a424 <__sfp_lock_acquire>:
 800a424:	4801      	ldr	r0, [pc, #4]	@ (800a42c <__sfp_lock_acquire+0x8>)
 800a426:	f000 ba4e 	b.w	800a8c6 <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	200007d1 	.word	0x200007d1

0800a430 <__sfp_lock_release>:
 800a430:	4801      	ldr	r0, [pc, #4]	@ (800a438 <__sfp_lock_release+0x8>)
 800a432:	f000 ba49 	b.w	800a8c8 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	200007d1 	.word	0x200007d1

0800a43c <__sinit>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	4604      	mov	r4, r0
 800a440:	f7ff fff0 	bl	800a424 <__sfp_lock_acquire>
 800a444:	6a23      	ldr	r3, [r4, #32]
 800a446:	b11b      	cbz	r3, 800a450 <__sinit+0x14>
 800a448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a44c:	f7ff bff0 	b.w	800a430 <__sfp_lock_release>
 800a450:	4b04      	ldr	r3, [pc, #16]	@ (800a464 <__sinit+0x28>)
 800a452:	6223      	str	r3, [r4, #32]
 800a454:	4b04      	ldr	r3, [pc, #16]	@ (800a468 <__sinit+0x2c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f5      	bne.n	800a448 <__sinit+0xc>
 800a45c:	f7ff ffc4 	bl	800a3e8 <global_stdio_init.part.0>
 800a460:	e7f2      	b.n	800a448 <__sinit+0xc>
 800a462:	bf00      	nop
 800a464:	0800a3a9 	.word	0x0800a3a9
 800a468:	200007c8 	.word	0x200007c8

0800a46c <_fwalk_sglue>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4607      	mov	r7, r0
 800a472:	4688      	mov	r8, r1
 800a474:	4614      	mov	r4, r2
 800a476:	2600      	movs	r6, #0
 800a478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a47c:	f1b9 0901 	subs.w	r9, r9, #1
 800a480:	d505      	bpl.n	800a48e <_fwalk_sglue+0x22>
 800a482:	6824      	ldr	r4, [r4, #0]
 800a484:	2c00      	cmp	r4, #0
 800a486:	d1f7      	bne.n	800a478 <_fwalk_sglue+0xc>
 800a488:	4630      	mov	r0, r6
 800a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d907      	bls.n	800a4a4 <_fwalk_sglue+0x38>
 800a494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a498:	3301      	adds	r3, #1
 800a49a:	d003      	beq.n	800a4a4 <_fwalk_sglue+0x38>
 800a49c:	4629      	mov	r1, r5
 800a49e:	4638      	mov	r0, r7
 800a4a0:	47c0      	blx	r8
 800a4a2:	4306      	orrs	r6, r0
 800a4a4:	3568      	adds	r5, #104	@ 0x68
 800a4a6:	e7e9      	b.n	800a47c <_fwalk_sglue+0x10>

0800a4a8 <_puts_r>:
 800a4a8:	6a03      	ldr	r3, [r0, #32]
 800a4aa:	b570      	push	{r4, r5, r6, lr}
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	6884      	ldr	r4, [r0, #8]
 800a4b2:	b90b      	cbnz	r3, 800a4b8 <_puts_r+0x10>
 800a4b4:	f7ff ffc2 	bl	800a43c <__sinit>
 800a4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	d405      	bmi.n	800a4ca <_puts_r+0x22>
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	0598      	lsls	r0, r3, #22
 800a4c2:	d402      	bmi.n	800a4ca <_puts_r+0x22>
 800a4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4c6:	f000 f9fe 	bl	800a8c6 <__retarget_lock_acquire_recursive>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	0719      	lsls	r1, r3, #28
 800a4ce:	d502      	bpl.n	800a4d6 <_puts_r+0x2e>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d135      	bne.n	800a542 <_puts_r+0x9a>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f000 f8fb 	bl	800a6d4 <__swsetup_r>
 800a4de:	b380      	cbz	r0, 800a542 <_puts_r+0x9a>
 800a4e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4e6:	07da      	lsls	r2, r3, #31
 800a4e8:	d405      	bmi.n	800a4f6 <_puts_r+0x4e>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	059b      	lsls	r3, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_puts_r+0x4e>
 800a4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4f2:	f000 f9e9 	bl	800a8c8 <__retarget_lock_release_recursive>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da04      	bge.n	800a508 <_puts_r+0x60>
 800a4fe:	69a2      	ldr	r2, [r4, #24]
 800a500:	429a      	cmp	r2, r3
 800a502:	dc17      	bgt.n	800a534 <_puts_r+0x8c>
 800a504:	290a      	cmp	r1, #10
 800a506:	d015      	beq.n	800a534 <_puts_r+0x8c>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	7019      	strb	r1, [r3, #0]
 800a510:	68a3      	ldr	r3, [r4, #8]
 800a512:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a516:	3b01      	subs	r3, #1
 800a518:	60a3      	str	r3, [r4, #8]
 800a51a:	2900      	cmp	r1, #0
 800a51c:	d1ed      	bne.n	800a4fa <_puts_r+0x52>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	da11      	bge.n	800a546 <_puts_r+0x9e>
 800a522:	4622      	mov	r2, r4
 800a524:	210a      	movs	r1, #10
 800a526:	4628      	mov	r0, r5
 800a528:	f000 f895 	bl	800a656 <__swbuf_r>
 800a52c:	3001      	adds	r0, #1
 800a52e:	d0d7      	beq.n	800a4e0 <_puts_r+0x38>
 800a530:	250a      	movs	r5, #10
 800a532:	e7d7      	b.n	800a4e4 <_puts_r+0x3c>
 800a534:	4622      	mov	r2, r4
 800a536:	4628      	mov	r0, r5
 800a538:	f000 f88d 	bl	800a656 <__swbuf_r>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d1e7      	bne.n	800a510 <_puts_r+0x68>
 800a540:	e7ce      	b.n	800a4e0 <_puts_r+0x38>
 800a542:	3e01      	subs	r6, #1
 800a544:	e7e4      	b.n	800a510 <_puts_r+0x68>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	6022      	str	r2, [r4, #0]
 800a54c:	220a      	movs	r2, #10
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e7ee      	b.n	800a530 <_puts_r+0x88>
	...

0800a554 <puts>:
 800a554:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <puts+0xc>)
 800a556:	4601      	mov	r1, r0
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f7ff bfa5 	b.w	800a4a8 <_puts_r>
 800a55e:	bf00      	nop
 800a560:	20000074 	.word	0x20000074

0800a564 <sniprintf>:
 800a564:	b40c      	push	{r2, r3}
 800a566:	b530      	push	{r4, r5, lr}
 800a568:	4b18      	ldr	r3, [pc, #96]	@ (800a5cc <sniprintf+0x68>)
 800a56a:	1e0c      	subs	r4, r1, #0
 800a56c:	681d      	ldr	r5, [r3, #0]
 800a56e:	b09d      	sub	sp, #116	@ 0x74
 800a570:	da08      	bge.n	800a584 <sniprintf+0x20>
 800a572:	238b      	movs	r3, #139	@ 0x8b
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	b01d      	add	sp, #116	@ 0x74
 800a57c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a580:	b002      	add	sp, #8
 800a582:	4770      	bx	lr
 800a584:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a588:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a592:	bf0c      	ite	eq
 800a594:	4623      	moveq	r3, r4
 800a596:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	9307      	str	r3, [sp, #28]
 800a59e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5a2:	9002      	str	r0, [sp, #8]
 800a5a4:	9006      	str	r0, [sp, #24]
 800a5a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	ab21      	add	r3, sp, #132	@ 0x84
 800a5ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a5b0:	a902      	add	r1, sp, #8
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	f001 fcc8 	bl	800bf48 <_svfiprintf_r>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	bfbc      	itt	lt
 800a5bc:	238b      	movlt	r3, #139	@ 0x8b
 800a5be:	602b      	strlt	r3, [r5, #0]
 800a5c0:	2c00      	cmp	r4, #0
 800a5c2:	d0da      	beq.n	800a57a <sniprintf+0x16>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e7d6      	b.n	800a57a <sniprintf+0x16>
 800a5cc:	20000074 	.word	0x20000074

0800a5d0 <__sread>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d8:	f000 f926 	bl	800a828 <_read_r>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	bfab      	itete	ge
 800a5e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a5e4:	181b      	addge	r3, r3, r0
 800a5e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5ea:	bfac      	ite	ge
 800a5ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5ee:	81a3      	strhlt	r3, [r4, #12]
 800a5f0:	bd10      	pop	{r4, pc}

0800a5f2 <__swrite>:
 800a5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f6:	461f      	mov	r7, r3
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	05db      	lsls	r3, r3, #23
 800a5fe:	460c      	mov	r4, r1
 800a600:	4616      	mov	r6, r2
 800a602:	d505      	bpl.n	800a610 <__swrite+0x1e>
 800a604:	2302      	movs	r3, #2
 800a606:	2200      	movs	r2, #0
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	f000 f8fa 	bl	800a804 <_lseek_r>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	4632      	mov	r2, r6
 800a614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	4628      	mov	r0, r5
 800a61c:	463b      	mov	r3, r7
 800a61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	f000 b911 	b.w	800a84c <_write_r>

0800a62a <__sseek>:
 800a62a:	b510      	push	{r4, lr}
 800a62c:	460c      	mov	r4, r1
 800a62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a632:	f000 f8e7 	bl	800a804 <_lseek_r>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	bf15      	itete	ne
 800a63c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a63e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a646:	81a3      	strheq	r3, [r4, #12]
 800a648:	bf18      	it	ne
 800a64a:	81a3      	strhne	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__sclose>:
 800a64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a652:	f000 b8c7 	b.w	800a7e4 <_close_r>

0800a656 <__swbuf_r>:
 800a656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a658:	460e      	mov	r6, r1
 800a65a:	4614      	mov	r4, r2
 800a65c:	4605      	mov	r5, r0
 800a65e:	b118      	cbz	r0, 800a668 <__swbuf_r+0x12>
 800a660:	6a03      	ldr	r3, [r0, #32]
 800a662:	b90b      	cbnz	r3, 800a668 <__swbuf_r+0x12>
 800a664:	f7ff feea 	bl	800a43c <__sinit>
 800a668:	69a3      	ldr	r3, [r4, #24]
 800a66a:	60a3      	str	r3, [r4, #8]
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	071a      	lsls	r2, r3, #28
 800a670:	d501      	bpl.n	800a676 <__swbuf_r+0x20>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	b943      	cbnz	r3, 800a688 <__swbuf_r+0x32>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 f82b 	bl	800a6d4 <__swsetup_r>
 800a67e:	b118      	cbz	r0, 800a688 <__swbuf_r+0x32>
 800a680:	f04f 37ff 	mov.w	r7, #4294967295
 800a684:	4638      	mov	r0, r7
 800a686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	6922      	ldr	r2, [r4, #16]
 800a68c:	b2f6      	uxtb	r6, r6
 800a68e:	1a98      	subs	r0, r3, r2
 800a690:	6963      	ldr	r3, [r4, #20]
 800a692:	4637      	mov	r7, r6
 800a694:	4283      	cmp	r3, r0
 800a696:	dc05      	bgt.n	800a6a4 <__swbuf_r+0x4e>
 800a698:	4621      	mov	r1, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	f001 ff10 	bl	800c4c0 <_fflush_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1ed      	bne.n	800a680 <__swbuf_r+0x2a>
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	60a3      	str	r3, [r4, #8]
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	6022      	str	r2, [r4, #0]
 800a6b0:	701e      	strb	r6, [r3, #0]
 800a6b2:	6962      	ldr	r2, [r4, #20]
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d004      	beq.n	800a6c4 <__swbuf_r+0x6e>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	07db      	lsls	r3, r3, #31
 800a6be:	d5e1      	bpl.n	800a684 <__swbuf_r+0x2e>
 800a6c0:	2e0a      	cmp	r6, #10
 800a6c2:	d1df      	bne.n	800a684 <__swbuf_r+0x2e>
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f001 fefa 	bl	800c4c0 <_fflush_r>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d0d9      	beq.n	800a684 <__swbuf_r+0x2e>
 800a6d0:	e7d6      	b.n	800a680 <__swbuf_r+0x2a>
	...

0800a6d4 <__swsetup_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4b29      	ldr	r3, [pc, #164]	@ (800a77c <__swsetup_r+0xa8>)
 800a6d8:	4605      	mov	r5, r0
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	460c      	mov	r4, r1
 800a6de:	b118      	cbz	r0, 800a6e8 <__swsetup_r+0x14>
 800a6e0:	6a03      	ldr	r3, [r0, #32]
 800a6e2:	b90b      	cbnz	r3, 800a6e8 <__swsetup_r+0x14>
 800a6e4:	f7ff feaa 	bl	800a43c <__sinit>
 800a6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ec:	0719      	lsls	r1, r3, #28
 800a6ee:	d422      	bmi.n	800a736 <__swsetup_r+0x62>
 800a6f0:	06da      	lsls	r2, r3, #27
 800a6f2:	d407      	bmi.n	800a704 <__swsetup_r+0x30>
 800a6f4:	2209      	movs	r2, #9
 800a6f6:	602a      	str	r2, [r5, #0]
 800a6f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	81a3      	strh	r3, [r4, #12]
 800a702:	e033      	b.n	800a76c <__swsetup_r+0x98>
 800a704:	0758      	lsls	r0, r3, #29
 800a706:	d512      	bpl.n	800a72e <__swsetup_r+0x5a>
 800a708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a70a:	b141      	cbz	r1, 800a71e <__swsetup_r+0x4a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__swsetup_r+0x46>
 800a714:	4628      	mov	r0, r5
 800a716:	f000 ff43 	bl	800b5a0 <_free_r>
 800a71a:	2300      	movs	r3, #0
 800a71c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	2300      	movs	r3, #0
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	b94b      	cbnz	r3, 800a74e <__swsetup_r+0x7a>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a744:	d003      	beq.n	800a74e <__swsetup_r+0x7a>
 800a746:	4621      	mov	r1, r4
 800a748:	4628      	mov	r0, r5
 800a74a:	f001 ff06 	bl	800c55a <__smakebuf_r>
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	f013 0201 	ands.w	r2, r3, #1
 800a756:	d00a      	beq.n	800a76e <__swsetup_r+0x9a>
 800a758:	2200      	movs	r2, #0
 800a75a:	60a2      	str	r2, [r4, #8]
 800a75c:	6962      	ldr	r2, [r4, #20]
 800a75e:	4252      	negs	r2, r2
 800a760:	61a2      	str	r2, [r4, #24]
 800a762:	6922      	ldr	r2, [r4, #16]
 800a764:	b942      	cbnz	r2, 800a778 <__swsetup_r+0xa4>
 800a766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a76a:	d1c5      	bne.n	800a6f8 <__swsetup_r+0x24>
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	0799      	lsls	r1, r3, #30
 800a770:	bf58      	it	pl
 800a772:	6962      	ldrpl	r2, [r4, #20]
 800a774:	60a2      	str	r2, [r4, #8]
 800a776:	e7f4      	b.n	800a762 <__swsetup_r+0x8e>
 800a778:	2000      	movs	r0, #0
 800a77a:	e7f7      	b.n	800a76c <__swsetup_r+0x98>
 800a77c:	20000074 	.word	0x20000074

0800a780 <memset>:
 800a780:	4603      	mov	r3, r0
 800a782:	4402      	add	r2, r0
 800a784:	4293      	cmp	r3, r2
 800a786:	d100      	bne.n	800a78a <memset+0xa>
 800a788:	4770      	bx	lr
 800a78a:	f803 1b01 	strb.w	r1, [r3], #1
 800a78e:	e7f9      	b.n	800a784 <memset+0x4>

0800a790 <strncat>:
 800a790:	b530      	push	{r4, r5, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	7825      	ldrb	r5, [r4, #0]
 800a796:	4623      	mov	r3, r4
 800a798:	3401      	adds	r4, #1
 800a79a:	2d00      	cmp	r5, #0
 800a79c:	d1fa      	bne.n	800a794 <strncat+0x4>
 800a79e:	3a01      	subs	r2, #1
 800a7a0:	d304      	bcc.n	800a7ac <strncat+0x1c>
 800a7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7a6:	f803 4b01 	strb.w	r4, [r3], #1
 800a7aa:	b904      	cbnz	r4, 800a7ae <strncat+0x1e>
 800a7ac:	bd30      	pop	{r4, r5, pc}
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	d1f5      	bne.n	800a79e <strncat+0xe>
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	e7f3      	b.n	800a79e <strncat+0xe>

0800a7b6 <strncpy>:
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	3901      	subs	r1, #1
 800a7bc:	b132      	cbz	r2, 800a7cc <strncpy+0x16>
 800a7be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7c2:	3a01      	subs	r2, #1
 800a7c4:	f803 4b01 	strb.w	r4, [r3], #1
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d1f7      	bne.n	800a7bc <strncpy+0x6>
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	441a      	add	r2, r3
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <strncpy+0x20>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <strncpy+0x1a>

0800a7dc <_localeconv_r>:
 800a7dc:	4800      	ldr	r0, [pc, #0]	@ (800a7e0 <_localeconv_r+0x4>)
 800a7de:	4770      	bx	lr
 800a7e0:	200001b4 	.word	0x200001b4

0800a7e4 <_close_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4d05      	ldr	r5, [pc, #20]	@ (800a800 <_close_r+0x1c>)
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7fa fb61 	bl	8004eb6 <_close>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_close_r+0x1a>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_close_r+0x1a>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	200007cc 	.word	0x200007cc

0800a804 <_lseek_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	4611      	mov	r1, r2
 800a80c:	2200      	movs	r2, #0
 800a80e:	4d05      	ldr	r5, [pc, #20]	@ (800a824 <_lseek_r+0x20>)
 800a810:	602a      	str	r2, [r5, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	f7fa fb73 	bl	8004efe <_lseek>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_lseek_r+0x1e>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_lseek_r+0x1e>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	200007cc 	.word	0x200007cc

0800a828 <_read_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	2200      	movs	r2, #0
 800a832:	4d05      	ldr	r5, [pc, #20]	@ (800a848 <_read_r+0x20>)
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f7fa fb04 	bl	8004e44 <_read>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_read_r+0x1e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_read_r+0x1e>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	200007cc 	.word	0x200007cc

0800a84c <_write_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	2200      	movs	r2, #0
 800a856:	4d05      	ldr	r5, [pc, #20]	@ (800a86c <_write_r+0x20>)
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	f7fa fb0f 	bl	8004e7e <_write>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_write_r+0x1e>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_write_r+0x1e>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	200007cc 	.word	0x200007cc

0800a870 <__errno>:
 800a870:	4b01      	ldr	r3, [pc, #4]	@ (800a878 <__errno+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000074 	.word	0x20000074

0800a87c <__libc_init_array>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	2600      	movs	r6, #0
 800a880:	4d0c      	ldr	r5, [pc, #48]	@ (800a8b4 <__libc_init_array+0x38>)
 800a882:	4c0d      	ldr	r4, [pc, #52]	@ (800a8b8 <__libc_init_array+0x3c>)
 800a884:	1b64      	subs	r4, r4, r5
 800a886:	10a4      	asrs	r4, r4, #2
 800a888:	42a6      	cmp	r6, r4
 800a88a:	d109      	bne.n	800a8a0 <__libc_init_array+0x24>
 800a88c:	f001 ffe2 	bl	800c854 <_init>
 800a890:	2600      	movs	r6, #0
 800a892:	4d0a      	ldr	r5, [pc, #40]	@ (800a8bc <__libc_init_array+0x40>)
 800a894:	4c0a      	ldr	r4, [pc, #40]	@ (800a8c0 <__libc_init_array+0x44>)
 800a896:	1b64      	subs	r4, r4, r5
 800a898:	10a4      	asrs	r4, r4, #2
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	d105      	bne.n	800a8aa <__libc_init_array+0x2e>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a4:	4798      	blx	r3
 800a8a6:	3601      	adds	r6, #1
 800a8a8:	e7ee      	b.n	800a888 <__libc_init_array+0xc>
 800a8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ae:	4798      	blx	r3
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	e7f2      	b.n	800a89a <__libc_init_array+0x1e>
 800a8b4:	0800d0e4 	.word	0x0800d0e4
 800a8b8:	0800d0e4 	.word	0x0800d0e4
 800a8bc:	0800d0e4 	.word	0x0800d0e4
 800a8c0:	0800d0e8 	.word	0x0800d0e8

0800a8c4 <__retarget_lock_init_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <__retarget_lock_acquire_recursive>:
 800a8c6:	4770      	bx	lr

0800a8c8 <__retarget_lock_release_recursive>:
 800a8c8:	4770      	bx	lr

0800a8ca <memchr>:
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	b2c9      	uxtb	r1, r1
 800a8d0:	4402      	add	r2, r0
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	d101      	bne.n	800a8dc <memchr+0x12>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	e003      	b.n	800a8e4 <memchr+0x1a>
 800a8dc:	7804      	ldrb	r4, [r0, #0]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	428c      	cmp	r4, r1
 800a8e2:	d1f6      	bne.n	800a8d2 <memchr+0x8>
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <quorem>:
 800a8e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	6903      	ldr	r3, [r0, #16]
 800a8ec:	690c      	ldr	r4, [r1, #16]
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	db7e      	blt.n	800a9f2 <quorem+0x10c>
 800a8f4:	3c01      	subs	r4, #1
 800a8f6:	00a3      	lsls	r3, r4, #2
 800a8f8:	f100 0514 	add.w	r5, r0, #20
 800a8fc:	f101 0814 	add.w	r8, r1, #20
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a90c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a910:	3301      	adds	r3, #1
 800a912:	429a      	cmp	r2, r3
 800a914:	fbb2 f6f3 	udiv	r6, r2, r3
 800a918:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a91c:	d32e      	bcc.n	800a97c <quorem+0x96>
 800a91e:	f04f 0a00 	mov.w	sl, #0
 800a922:	46c4      	mov	ip, r8
 800a924:	46ae      	mov	lr, r5
 800a926:	46d3      	mov	fp, sl
 800a928:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a92c:	b298      	uxth	r0, r3
 800a92e:	fb06 a000 	mla	r0, r6, r0, sl
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	0c02      	lsrs	r2, r0, #16
 800a936:	fb06 2303 	mla	r3, r6, r3, r2
 800a93a:	f8de 2000 	ldr.w	r2, [lr]
 800a93e:	b280      	uxth	r0, r0
 800a940:	b292      	uxth	r2, r2
 800a942:	1a12      	subs	r2, r2, r0
 800a944:	445a      	add	r2, fp
 800a946:	f8de 0000 	ldr.w	r0, [lr]
 800a94a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a94e:	b29b      	uxth	r3, r3
 800a950:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a954:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a958:	b292      	uxth	r2, r2
 800a95a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a95e:	45e1      	cmp	r9, ip
 800a960:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a964:	f84e 2b04 	str.w	r2, [lr], #4
 800a968:	d2de      	bcs.n	800a928 <quorem+0x42>
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	58eb      	ldr	r3, [r5, r3]
 800a96e:	b92b      	cbnz	r3, 800a97c <quorem+0x96>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	3b04      	subs	r3, #4
 800a974:	429d      	cmp	r5, r3
 800a976:	461a      	mov	r2, r3
 800a978:	d32f      	bcc.n	800a9da <quorem+0xf4>
 800a97a:	613c      	str	r4, [r7, #16]
 800a97c:	4638      	mov	r0, r7
 800a97e:	f001 f97f 	bl	800bc80 <__mcmp>
 800a982:	2800      	cmp	r0, #0
 800a984:	db25      	blt.n	800a9d2 <quorem+0xec>
 800a986:	4629      	mov	r1, r5
 800a988:	2000      	movs	r0, #0
 800a98a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a98e:	f8d1 c000 	ldr.w	ip, [r1]
 800a992:	fa1f fe82 	uxth.w	lr, r2
 800a996:	fa1f f38c 	uxth.w	r3, ip
 800a99a:	eba3 030e 	sub.w	r3, r3, lr
 800a99e:	4403      	add	r3, r0
 800a9a0:	0c12      	lsrs	r2, r2, #16
 800a9a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b0:	45c1      	cmp	r9, r8
 800a9b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9b6:	f841 3b04 	str.w	r3, [r1], #4
 800a9ba:	d2e6      	bcs.n	800a98a <quorem+0xa4>
 800a9bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9c4:	b922      	cbnz	r2, 800a9d0 <quorem+0xea>
 800a9c6:	3b04      	subs	r3, #4
 800a9c8:	429d      	cmp	r5, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	d30b      	bcc.n	800a9e6 <quorem+0x100>
 800a9ce:	613c      	str	r4, [r7, #16]
 800a9d0:	3601      	adds	r6, #1
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	b003      	add	sp, #12
 800a9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9da:	6812      	ldr	r2, [r2, #0]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d1cb      	bne.n	800a97a <quorem+0x94>
 800a9e2:	3c01      	subs	r4, #1
 800a9e4:	e7c6      	b.n	800a974 <quorem+0x8e>
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d1ef      	bne.n	800a9ce <quorem+0xe8>
 800a9ee:	3c01      	subs	r4, #1
 800a9f0:	e7ea      	b.n	800a9c8 <quorem+0xe2>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e7ee      	b.n	800a9d4 <quorem+0xee>
	...

0800a9f8 <_dtoa_r>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	461d      	mov	r5, r3
 800aa00:	69c7      	ldr	r7, [r0, #28]
 800aa02:	b097      	sub	sp, #92	@ 0x5c
 800aa04:	4681      	mov	r9, r0
 800aa06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aa0a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aa0c:	b97f      	cbnz	r7, 800aa2e <_dtoa_r+0x36>
 800aa0e:	2010      	movs	r0, #16
 800aa10:	f000 fe0e 	bl	800b630 <malloc>
 800aa14:	4602      	mov	r2, r0
 800aa16:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa1a:	b920      	cbnz	r0, 800aa26 <_dtoa_r+0x2e>
 800aa1c:	21ef      	movs	r1, #239	@ 0xef
 800aa1e:	4bac      	ldr	r3, [pc, #688]	@ (800acd0 <_dtoa_r+0x2d8>)
 800aa20:	48ac      	ldr	r0, [pc, #688]	@ (800acd4 <_dtoa_r+0x2dc>)
 800aa22:	f001 fe31 	bl	800c688 <__assert_func>
 800aa26:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa2a:	6007      	str	r7, [r0, #0]
 800aa2c:	60c7      	str	r7, [r0, #12]
 800aa2e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa32:	6819      	ldr	r1, [r3, #0]
 800aa34:	b159      	cbz	r1, 800aa4e <_dtoa_r+0x56>
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4093      	lsls	r3, r2
 800aa3c:	604a      	str	r2, [r1, #4]
 800aa3e:	608b      	str	r3, [r1, #8]
 800aa40:	4648      	mov	r0, r9
 800aa42:	f000 feeb 	bl	800b81c <_Bfree>
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	1e2b      	subs	r3, r5, #0
 800aa50:	bfaf      	iteee	ge
 800aa52:	2300      	movge	r3, #0
 800aa54:	2201      	movlt	r2, #1
 800aa56:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa5a:	9307      	strlt	r3, [sp, #28]
 800aa5c:	bfa8      	it	ge
 800aa5e:	6033      	strge	r3, [r6, #0]
 800aa60:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800aa64:	4b9c      	ldr	r3, [pc, #624]	@ (800acd8 <_dtoa_r+0x2e0>)
 800aa66:	bfb8      	it	lt
 800aa68:	6032      	strlt	r2, [r6, #0]
 800aa6a:	ea33 0308 	bics.w	r3, r3, r8
 800aa6e:	d112      	bne.n	800aa96 <_dtoa_r+0x9e>
 800aa70:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa74:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa7c:	4323      	orrs	r3, r4
 800aa7e:	f000 855e 	beq.w	800b53e <_dtoa_r+0xb46>
 800aa82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aa84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800acdc <_dtoa_r+0x2e4>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 8560 	beq.w	800b54e <_dtoa_r+0xb56>
 800aa8e:	f10a 0303 	add.w	r3, sl, #3
 800aa92:	f000 bd5a 	b.w	800b54a <_dtoa_r+0xb52>
 800aa96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f7f5 ff89 	bl	80009bc <__aeabi_dcmpeq>
 800aaaa:	4607      	mov	r7, r0
 800aaac:	b158      	cbz	r0, 800aac6 <_dtoa_r+0xce>
 800aaae:	2301      	movs	r3, #1
 800aab0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aab6:	b113      	cbz	r3, 800aabe <_dtoa_r+0xc6>
 800aab8:	4b89      	ldr	r3, [pc, #548]	@ (800ace0 <_dtoa_r+0x2e8>)
 800aaba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800ace4 <_dtoa_r+0x2ec>
 800aac2:	f000 bd44 	b.w	800b54e <_dtoa_r+0xb56>
 800aac6:	ab14      	add	r3, sp, #80	@ 0x50
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	ab15      	add	r3, sp, #84	@ 0x54
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	4648      	mov	r0, r9
 800aad0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aad4:	f001 f984 	bl	800bde0 <__d2b>
 800aad8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800aadc:	9003      	str	r0, [sp, #12]
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d078      	beq.n	800abd4 <_dtoa_r+0x1dc>
 800aae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aae8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aaec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaf4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aaf8:	9712      	str	r7, [sp, #72]	@ 0x48
 800aafa:	4619      	mov	r1, r3
 800aafc:	2200      	movs	r2, #0
 800aafe:	4b7a      	ldr	r3, [pc, #488]	@ (800ace8 <_dtoa_r+0x2f0>)
 800ab00:	f7f5 fb3c 	bl	800017c <__aeabi_dsub>
 800ab04:	a36c      	add	r3, pc, #432	@ (adr r3, 800acb8 <_dtoa_r+0x2c0>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f7f5 fcef 	bl	80004ec <__aeabi_dmul>
 800ab0e:	a36c      	add	r3, pc, #432	@ (adr r3, 800acc0 <_dtoa_r+0x2c8>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fb34 	bl	8000180 <__adddf3>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	460d      	mov	r5, r1
 800ab1e:	f7f5 fc7b 	bl	8000418 <__aeabi_i2d>
 800ab22:	a369      	add	r3, pc, #420	@ (adr r3, 800acc8 <_dtoa_r+0x2d0>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fce0 	bl	80004ec <__aeabi_dmul>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4620      	mov	r0, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7f5 fb24 	bl	8000180 <__adddf3>
 800ab38:	4604      	mov	r4, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	f7f5 ff86 	bl	8000a4c <__aeabi_d2iz>
 800ab40:	2200      	movs	r2, #0
 800ab42:	4607      	mov	r7, r0
 800ab44:	2300      	movs	r3, #0
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 ff41 	bl	80009d0 <__aeabi_dcmplt>
 800ab4e:	b140      	cbz	r0, 800ab62 <_dtoa_r+0x16a>
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7f5 fc61 	bl	8000418 <__aeabi_i2d>
 800ab56:	4622      	mov	r2, r4
 800ab58:	462b      	mov	r3, r5
 800ab5a:	f7f5 ff2f 	bl	80009bc <__aeabi_dcmpeq>
 800ab5e:	b900      	cbnz	r0, 800ab62 <_dtoa_r+0x16a>
 800ab60:	3f01      	subs	r7, #1
 800ab62:	2f16      	cmp	r7, #22
 800ab64:	d854      	bhi.n	800ac10 <_dtoa_r+0x218>
 800ab66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab6a:	4b60      	ldr	r3, [pc, #384]	@ (800acec <_dtoa_r+0x2f4>)
 800ab6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 ff2c 	bl	80009d0 <__aeabi_dcmplt>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d04b      	beq.n	800ac14 <_dtoa_r+0x21c>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	3f01      	subs	r7, #1
 800ab80:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab84:	1b9b      	subs	r3, r3, r6
 800ab86:	1e5a      	subs	r2, r3, #1
 800ab88:	bf49      	itett	mi
 800ab8a:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab8e:	2300      	movpl	r3, #0
 800ab90:	9304      	strmi	r3, [sp, #16]
 800ab92:	2300      	movmi	r3, #0
 800ab94:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab96:	bf54      	ite	pl
 800ab98:	9304      	strpl	r3, [sp, #16]
 800ab9a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ab9c:	2f00      	cmp	r7, #0
 800ab9e:	db3b      	blt.n	800ac18 <_dtoa_r+0x220>
 800aba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba2:	970e      	str	r7, [sp, #56]	@ 0x38
 800aba4:	443b      	add	r3, r7
 800aba6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba8:	2300      	movs	r3, #0
 800abaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800abac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abae:	2b09      	cmp	r3, #9
 800abb0:	d865      	bhi.n	800ac7e <_dtoa_r+0x286>
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	bfc4      	itt	gt
 800abb6:	3b04      	subgt	r3, #4
 800abb8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800abba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abbc:	bfc8      	it	gt
 800abbe:	2400      	movgt	r4, #0
 800abc0:	f1a3 0302 	sub.w	r3, r3, #2
 800abc4:	bfd8      	it	le
 800abc6:	2401      	movle	r4, #1
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d864      	bhi.n	800ac96 <_dtoa_r+0x29e>
 800abcc:	e8df f003 	tbb	[pc, r3]
 800abd0:	2c385553 	.word	0x2c385553
 800abd4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800abd8:	441e      	add	r6, r3
 800abda:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abde:	2b20      	cmp	r3, #32
 800abe0:	bfc1      	itttt	gt
 800abe2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abe6:	fa08 f803 	lslgt.w	r8, r8, r3
 800abea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abf2:	bfd6      	itet	le
 800abf4:	f1c3 0320 	rsble	r3, r3, #32
 800abf8:	ea48 0003 	orrgt.w	r0, r8, r3
 800abfc:	fa04 f003 	lslle.w	r0, r4, r3
 800ac00:	f7f5 fbfa 	bl	80003f8 <__aeabi_ui2d>
 800ac04:	2201      	movs	r2, #1
 800ac06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac0a:	3e01      	subs	r6, #1
 800ac0c:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac0e:	e774      	b.n	800aafa <_dtoa_r+0x102>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e7b5      	b.n	800ab80 <_dtoa_r+0x188>
 800ac14:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ac16:	e7b4      	b.n	800ab82 <_dtoa_r+0x18a>
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	1bdb      	subs	r3, r3, r7
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	427b      	negs	r3, r7
 800ac20:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac22:	2300      	movs	r3, #0
 800ac24:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac26:	e7c1      	b.n	800abac <_dtoa_r+0x1b4>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac2e:	eb07 0b03 	add.w	fp, r7, r3
 800ac32:	f10b 0301 	add.w	r3, fp, #1
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	bfb8      	it	lt
 800ac3c:	2301      	movlt	r3, #1
 800ac3e:	e006      	b.n	800ac4e <_dtoa_r+0x256>
 800ac40:	2301      	movs	r3, #1
 800ac42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dd28      	ble.n	800ac9c <_dtoa_r+0x2a4>
 800ac4a:	469b      	mov	fp, r3
 800ac4c:	9308      	str	r3, [sp, #32]
 800ac4e:	2100      	movs	r1, #0
 800ac50:	2204      	movs	r2, #4
 800ac52:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac56:	f102 0514 	add.w	r5, r2, #20
 800ac5a:	429d      	cmp	r5, r3
 800ac5c:	d926      	bls.n	800acac <_dtoa_r+0x2b4>
 800ac5e:	6041      	str	r1, [r0, #4]
 800ac60:	4648      	mov	r0, r9
 800ac62:	f000 fd9b 	bl	800b79c <_Balloc>
 800ac66:	4682      	mov	sl, r0
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d143      	bne.n	800acf4 <_dtoa_r+0x2fc>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac72:	4b1f      	ldr	r3, [pc, #124]	@ (800acf0 <_dtoa_r+0x2f8>)
 800ac74:	e6d4      	b.n	800aa20 <_dtoa_r+0x28>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e7e3      	b.n	800ac42 <_dtoa_r+0x24a>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e7d5      	b.n	800ac2a <_dtoa_r+0x232>
 800ac7e:	2401      	movs	r4, #1
 800ac80:	2300      	movs	r3, #0
 800ac82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac84:	9320      	str	r3, [sp, #128]	@ 0x80
 800ac86:	f04f 3bff 	mov.w	fp, #4294967295
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2312      	movs	r3, #18
 800ac8e:	f8cd b020 	str.w	fp, [sp, #32]
 800ac92:	9221      	str	r2, [sp, #132]	@ 0x84
 800ac94:	e7db      	b.n	800ac4e <_dtoa_r+0x256>
 800ac96:	2301      	movs	r3, #1
 800ac98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac9a:	e7f4      	b.n	800ac86 <_dtoa_r+0x28e>
 800ac9c:	f04f 0b01 	mov.w	fp, #1
 800aca0:	465b      	mov	r3, fp
 800aca2:	f8cd b020 	str.w	fp, [sp, #32]
 800aca6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800acaa:	e7d0      	b.n	800ac4e <_dtoa_r+0x256>
 800acac:	3101      	adds	r1, #1
 800acae:	0052      	lsls	r2, r2, #1
 800acb0:	e7d1      	b.n	800ac56 <_dtoa_r+0x25e>
 800acb2:	bf00      	nop
 800acb4:	f3af 8000 	nop.w
 800acb8:	636f4361 	.word	0x636f4361
 800acbc:	3fd287a7 	.word	0x3fd287a7
 800acc0:	8b60c8b3 	.word	0x8b60c8b3
 800acc4:	3fc68a28 	.word	0x3fc68a28
 800acc8:	509f79fb 	.word	0x509f79fb
 800accc:	3fd34413 	.word	0x3fd34413
 800acd0:	0800cda7 	.word	0x0800cda7
 800acd4:	0800cdbe 	.word	0x0800cdbe
 800acd8:	7ff00000 	.word	0x7ff00000
 800acdc:	0800cda3 	.word	0x0800cda3
 800ace0:	0800cd77 	.word	0x0800cd77
 800ace4:	0800cd76 	.word	0x0800cd76
 800ace8:	3ff80000 	.word	0x3ff80000
 800acec:	0800cf10 	.word	0x0800cf10
 800acf0:	0800ce16 	.word	0x0800ce16
 800acf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acf8:	6018      	str	r0, [r3, #0]
 800acfa:	9b08      	ldr	r3, [sp, #32]
 800acfc:	2b0e      	cmp	r3, #14
 800acfe:	f200 80a1 	bhi.w	800ae44 <_dtoa_r+0x44c>
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	f000 809e 	beq.w	800ae44 <_dtoa_r+0x44c>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	dd33      	ble.n	800ad74 <_dtoa_r+0x37c>
 800ad0c:	4b9c      	ldr	r3, [pc, #624]	@ (800af80 <_dtoa_r+0x588>)
 800ad0e:	f007 020f 	and.w	r2, r7, #15
 800ad12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad16:	05f8      	lsls	r0, r7, #23
 800ad18:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800ad20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad24:	d516      	bpl.n	800ad54 <_dtoa_r+0x35c>
 800ad26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad2a:	4b96      	ldr	r3, [pc, #600]	@ (800af84 <_dtoa_r+0x58c>)
 800ad2c:	2603      	movs	r6, #3
 800ad2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad32:	f7f5 fd05 	bl	8000740 <__aeabi_ddiv>
 800ad36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad3a:	f004 040f 	and.w	r4, r4, #15
 800ad3e:	4d91      	ldr	r5, [pc, #580]	@ (800af84 <_dtoa_r+0x58c>)
 800ad40:	b954      	cbnz	r4, 800ad58 <_dtoa_r+0x360>
 800ad42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad4a:	f7f5 fcf9 	bl	8000740 <__aeabi_ddiv>
 800ad4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad52:	e028      	b.n	800ada6 <_dtoa_r+0x3ae>
 800ad54:	2602      	movs	r6, #2
 800ad56:	e7f2      	b.n	800ad3e <_dtoa_r+0x346>
 800ad58:	07e1      	lsls	r1, r4, #31
 800ad5a:	d508      	bpl.n	800ad6e <_dtoa_r+0x376>
 800ad5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad64:	f7f5 fbc2 	bl	80004ec <__aeabi_dmul>
 800ad68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	1064      	asrs	r4, r4, #1
 800ad70:	3508      	adds	r5, #8
 800ad72:	e7e5      	b.n	800ad40 <_dtoa_r+0x348>
 800ad74:	f000 80af 	beq.w	800aed6 <_dtoa_r+0x4de>
 800ad78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad7c:	427c      	negs	r4, r7
 800ad7e:	4b80      	ldr	r3, [pc, #512]	@ (800af80 <_dtoa_r+0x588>)
 800ad80:	f004 020f 	and.w	r2, r4, #15
 800ad84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 fbae 	bl	80004ec <__aeabi_dmul>
 800ad90:	2602      	movs	r6, #2
 800ad92:	2300      	movs	r3, #0
 800ad94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad98:	4d7a      	ldr	r5, [pc, #488]	@ (800af84 <_dtoa_r+0x58c>)
 800ad9a:	1124      	asrs	r4, r4, #4
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	f040 808f 	bne.w	800aec0 <_dtoa_r+0x4c8>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d3      	bne.n	800ad4e <_dtoa_r+0x356>
 800ada6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800adaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 8094 	beq.w	800aeda <_dtoa_r+0x4e2>
 800adb2:	2200      	movs	r2, #0
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	4b73      	ldr	r3, [pc, #460]	@ (800af88 <_dtoa_r+0x590>)
 800adba:	f7f5 fe09 	bl	80009d0 <__aeabi_dcmplt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f000 808b 	beq.w	800aeda <_dtoa_r+0x4e2>
 800adc4:	9b08      	ldr	r3, [sp, #32]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8087 	beq.w	800aeda <_dtoa_r+0x4e2>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	dd34      	ble.n	800ae3c <_dtoa_r+0x444>
 800add2:	4620      	mov	r0, r4
 800add4:	2200      	movs	r2, #0
 800add6:	4629      	mov	r1, r5
 800add8:	4b6c      	ldr	r3, [pc, #432]	@ (800af8c <_dtoa_r+0x594>)
 800adda:	f7f5 fb87 	bl	80004ec <__aeabi_dmul>
 800adde:	465c      	mov	r4, fp
 800ade0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ade4:	f107 38ff 	add.w	r8, r7, #4294967295
 800ade8:	3601      	adds	r6, #1
 800adea:	4630      	mov	r0, r6
 800adec:	f7f5 fb14 	bl	8000418 <__aeabi_i2d>
 800adf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adf4:	f7f5 fb7a 	bl	80004ec <__aeabi_dmul>
 800adf8:	2200      	movs	r2, #0
 800adfa:	4b65      	ldr	r3, [pc, #404]	@ (800af90 <_dtoa_r+0x598>)
 800adfc:	f7f5 f9c0 	bl	8000180 <__adddf3>
 800ae00:	4605      	mov	r5, r0
 800ae02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae06:	2c00      	cmp	r4, #0
 800ae08:	d16a      	bne.n	800aee0 <_dtoa_r+0x4e8>
 800ae0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4b60      	ldr	r3, [pc, #384]	@ (800af94 <_dtoa_r+0x59c>)
 800ae12:	f7f5 f9b3 	bl	800017c <__aeabi_dsub>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4633      	mov	r3, r6
 800ae22:	f7f5 fdf3 	bl	8000a0c <__aeabi_dcmpgt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f040 8298 	bne.w	800b35c <_dtoa_r+0x964>
 800ae2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae30:	462a      	mov	r2, r5
 800ae32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae36:	f7f5 fdcb 	bl	80009d0 <__aeabi_dcmplt>
 800ae3a:	bb38      	cbnz	r0, 800ae8c <_dtoa_r+0x494>
 800ae3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f2c0 8157 	blt.w	800b0fa <_dtoa_r+0x702>
 800ae4c:	2f0e      	cmp	r7, #14
 800ae4e:	f300 8154 	bgt.w	800b0fa <_dtoa_r+0x702>
 800ae52:	4b4b      	ldr	r3, [pc, #300]	@ (800af80 <_dtoa_r+0x588>)
 800ae54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f280 80e5 	bge.w	800b032 <_dtoa_r+0x63a>
 800ae68:	9b08      	ldr	r3, [sp, #32]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f300 80e1 	bgt.w	800b032 <_dtoa_r+0x63a>
 800ae70:	d10c      	bne.n	800ae8c <_dtoa_r+0x494>
 800ae72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae76:	2200      	movs	r2, #0
 800ae78:	4b46      	ldr	r3, [pc, #280]	@ (800af94 <_dtoa_r+0x59c>)
 800ae7a:	f7f5 fb37 	bl	80004ec <__aeabi_dmul>
 800ae7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae82:	f7f5 fdb9 	bl	80009f8 <__aeabi_dcmpge>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f000 8266 	beq.w	800b358 <_dtoa_r+0x960>
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	4625      	mov	r5, r4
 800ae90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae92:	4656      	mov	r6, sl
 800ae94:	ea6f 0803 	mvn.w	r8, r3
 800ae98:	2700      	movs	r7, #0
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	f000 fcbd 	bl	800b81c <_Bfree>
 800aea2:	2d00      	cmp	r5, #0
 800aea4:	f000 80bd 	beq.w	800b022 <_dtoa_r+0x62a>
 800aea8:	b12f      	cbz	r7, 800aeb6 <_dtoa_r+0x4be>
 800aeaa:	42af      	cmp	r7, r5
 800aeac:	d003      	beq.n	800aeb6 <_dtoa_r+0x4be>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fcb3 	bl	800b81c <_Bfree>
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	4648      	mov	r0, r9
 800aeba:	f000 fcaf 	bl	800b81c <_Bfree>
 800aebe:	e0b0      	b.n	800b022 <_dtoa_r+0x62a>
 800aec0:	07e2      	lsls	r2, r4, #31
 800aec2:	d505      	bpl.n	800aed0 <_dtoa_r+0x4d8>
 800aec4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec8:	f7f5 fb10 	bl	80004ec <__aeabi_dmul>
 800aecc:	2301      	movs	r3, #1
 800aece:	3601      	adds	r6, #1
 800aed0:	1064      	asrs	r4, r4, #1
 800aed2:	3508      	adds	r5, #8
 800aed4:	e762      	b.n	800ad9c <_dtoa_r+0x3a4>
 800aed6:	2602      	movs	r6, #2
 800aed8:	e765      	b.n	800ada6 <_dtoa_r+0x3ae>
 800aeda:	46b8      	mov	r8, r7
 800aedc:	9c08      	ldr	r4, [sp, #32]
 800aede:	e784      	b.n	800adea <_dtoa_r+0x3f2>
 800aee0:	4b27      	ldr	r3, [pc, #156]	@ (800af80 <_dtoa_r+0x588>)
 800aee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aee4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeec:	4454      	add	r4, sl
 800aeee:	2900      	cmp	r1, #0
 800aef0:	d054      	beq.n	800af9c <_dtoa_r+0x5a4>
 800aef2:	2000      	movs	r0, #0
 800aef4:	4928      	ldr	r1, [pc, #160]	@ (800af98 <_dtoa_r+0x5a0>)
 800aef6:	f7f5 fc23 	bl	8000740 <__aeabi_ddiv>
 800aefa:	4633      	mov	r3, r6
 800aefc:	462a      	mov	r2, r5
 800aefe:	f7f5 f93d 	bl	800017c <__aeabi_dsub>
 800af02:	4656      	mov	r6, sl
 800af04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af0c:	f7f5 fd9e 	bl	8000a4c <__aeabi_d2iz>
 800af10:	4605      	mov	r5, r0
 800af12:	f7f5 fa81 	bl	8000418 <__aeabi_i2d>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af1e:	f7f5 f92d 	bl	800017c <__aeabi_dsub>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	3530      	adds	r5, #48	@ 0x30
 800af28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af30:	f806 5b01 	strb.w	r5, [r6], #1
 800af34:	f7f5 fd4c 	bl	80009d0 <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d172      	bne.n	800b022 <_dtoa_r+0x62a>
 800af3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af40:	2000      	movs	r0, #0
 800af42:	4911      	ldr	r1, [pc, #68]	@ (800af88 <_dtoa_r+0x590>)
 800af44:	f7f5 f91a 	bl	800017c <__aeabi_dsub>
 800af48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af4c:	f7f5 fd40 	bl	80009d0 <__aeabi_dcmplt>
 800af50:	2800      	cmp	r0, #0
 800af52:	f040 80b4 	bne.w	800b0be <_dtoa_r+0x6c6>
 800af56:	42a6      	cmp	r6, r4
 800af58:	f43f af70 	beq.w	800ae3c <_dtoa_r+0x444>
 800af5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af60:	2200      	movs	r2, #0
 800af62:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <_dtoa_r+0x594>)
 800af64:	f7f5 fac2 	bl	80004ec <__aeabi_dmul>
 800af68:	2200      	movs	r2, #0
 800af6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af72:	4b06      	ldr	r3, [pc, #24]	@ (800af8c <_dtoa_r+0x594>)
 800af74:	f7f5 faba 	bl	80004ec <__aeabi_dmul>
 800af78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af7c:	e7c4      	b.n	800af08 <_dtoa_r+0x510>
 800af7e:	bf00      	nop
 800af80:	0800cf10 	.word	0x0800cf10
 800af84:	0800cee8 	.word	0x0800cee8
 800af88:	3ff00000 	.word	0x3ff00000
 800af8c:	40240000 	.word	0x40240000
 800af90:	401c0000 	.word	0x401c0000
 800af94:	40140000 	.word	0x40140000
 800af98:	3fe00000 	.word	0x3fe00000
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	f7f5 faa4 	bl	80004ec <__aeabi_dmul>
 800afa4:	4656      	mov	r6, sl
 800afa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afaa:	9413      	str	r4, [sp, #76]	@ 0x4c
 800afac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afb0:	f7f5 fd4c 	bl	8000a4c <__aeabi_d2iz>
 800afb4:	4605      	mov	r5, r0
 800afb6:	f7f5 fa2f 	bl	8000418 <__aeabi_i2d>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc2:	f7f5 f8db 	bl	800017c <__aeabi_dsub>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	3530      	adds	r5, #48	@ 0x30
 800afcc:	f806 5b01 	strb.w	r5, [r6], #1
 800afd0:	42a6      	cmp	r6, r4
 800afd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	d124      	bne.n	800b026 <_dtoa_r+0x62e>
 800afdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afe0:	4bae      	ldr	r3, [pc, #696]	@ (800b29c <_dtoa_r+0x8a4>)
 800afe2:	f7f5 f8cd 	bl	8000180 <__adddf3>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afee:	f7f5 fd0d 	bl	8000a0c <__aeabi_dcmpgt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d163      	bne.n	800b0be <_dtoa_r+0x6c6>
 800aff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800affa:	2000      	movs	r0, #0
 800affc:	49a7      	ldr	r1, [pc, #668]	@ (800b29c <_dtoa_r+0x8a4>)
 800affe:	f7f5 f8bd 	bl	800017c <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b00a:	f7f5 fce1 	bl	80009d0 <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f af14 	beq.w	800ae3c <_dtoa_r+0x444>
 800b014:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b016:	1e73      	subs	r3, r6, #1
 800b018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b01a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b01e:	2b30      	cmp	r3, #48	@ 0x30
 800b020:	d0f8      	beq.n	800b014 <_dtoa_r+0x61c>
 800b022:	4647      	mov	r7, r8
 800b024:	e03b      	b.n	800b09e <_dtoa_r+0x6a6>
 800b026:	4b9e      	ldr	r3, [pc, #632]	@ (800b2a0 <_dtoa_r+0x8a8>)
 800b028:	f7f5 fa60 	bl	80004ec <__aeabi_dmul>
 800b02c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b030:	e7bc      	b.n	800afac <_dtoa_r+0x5b4>
 800b032:	4656      	mov	r6, sl
 800b034:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b03c:	4620      	mov	r0, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	f7f5 fb7e 	bl	8000740 <__aeabi_ddiv>
 800b044:	f7f5 fd02 	bl	8000a4c <__aeabi_d2iz>
 800b048:	4680      	mov	r8, r0
 800b04a:	f7f5 f9e5 	bl	8000418 <__aeabi_i2d>
 800b04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b052:	f7f5 fa4b 	bl	80004ec <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7f5 f88d 	bl	800017c <__aeabi_dsub>
 800b062:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b066:	9d08      	ldr	r5, [sp, #32]
 800b068:	f806 4b01 	strb.w	r4, [r6], #1
 800b06c:	eba6 040a 	sub.w	r4, r6, sl
 800b070:	42a5      	cmp	r5, r4
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	d133      	bne.n	800b0e0 <_dtoa_r+0x6e8>
 800b078:	f7f5 f882 	bl	8000180 <__adddf3>
 800b07c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fcc2 	bl	8000a0c <__aeabi_dcmpgt>
 800b088:	b9c0      	cbnz	r0, 800b0bc <_dtoa_r+0x6c4>
 800b08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fc93 	bl	80009bc <__aeabi_dcmpeq>
 800b096:	b110      	cbz	r0, 800b09e <_dtoa_r+0x6a6>
 800b098:	f018 0f01 	tst.w	r8, #1
 800b09c:	d10e      	bne.n	800b0bc <_dtoa_r+0x6c4>
 800b09e:	4648      	mov	r0, r9
 800b0a0:	9903      	ldr	r1, [sp, #12]
 800b0a2:	f000 fbbb 	bl	800b81c <_Bfree>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	7033      	strb	r3, [r6, #0]
 800b0aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b0ac:	3701      	adds	r7, #1
 800b0ae:	601f      	str	r7, [r3, #0]
 800b0b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 824b 	beq.w	800b54e <_dtoa_r+0xb56>
 800b0b8:	601e      	str	r6, [r3, #0]
 800b0ba:	e248      	b.n	800b54e <_dtoa_r+0xb56>
 800b0bc:	46b8      	mov	r8, r7
 800b0be:	4633      	mov	r3, r6
 800b0c0:	461e      	mov	r6, r3
 800b0c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c6:	2a39      	cmp	r2, #57	@ 0x39
 800b0c8:	d106      	bne.n	800b0d8 <_dtoa_r+0x6e0>
 800b0ca:	459a      	cmp	sl, r3
 800b0cc:	d1f8      	bne.n	800b0c0 <_dtoa_r+0x6c8>
 800b0ce:	2230      	movs	r2, #48	@ 0x30
 800b0d0:	f108 0801 	add.w	r8, r8, #1
 800b0d4:	f88a 2000 	strb.w	r2, [sl]
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	3201      	adds	r2, #1
 800b0dc:	701a      	strb	r2, [r3, #0]
 800b0de:	e7a0      	b.n	800b022 <_dtoa_r+0x62a>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4b6f      	ldr	r3, [pc, #444]	@ (800b2a0 <_dtoa_r+0x8a8>)
 800b0e4:	f7f5 fa02 	bl	80004ec <__aeabi_dmul>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	460d      	mov	r5, r1
 800b0f0:	f7f5 fc64 	bl	80009bc <__aeabi_dcmpeq>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d09f      	beq.n	800b038 <_dtoa_r+0x640>
 800b0f8:	e7d1      	b.n	800b09e <_dtoa_r+0x6a6>
 800b0fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 80ea 	beq.w	800b2d6 <_dtoa_r+0x8de>
 800b102:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b104:	2a01      	cmp	r2, #1
 800b106:	f300 80cd 	bgt.w	800b2a4 <_dtoa_r+0x8ac>
 800b10a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	f000 80c1 	beq.w	800b294 <_dtoa_r+0x89c>
 800b112:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b116:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b118:	9e04      	ldr	r6, [sp, #16]
 800b11a:	9a04      	ldr	r2, [sp, #16]
 800b11c:	2101      	movs	r1, #1
 800b11e:	441a      	add	r2, r3
 800b120:	9204      	str	r2, [sp, #16]
 800b122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b124:	4648      	mov	r0, r9
 800b126:	441a      	add	r2, r3
 800b128:	9209      	str	r2, [sp, #36]	@ 0x24
 800b12a:	f000 fc2b 	bl	800b984 <__i2b>
 800b12e:	4605      	mov	r5, r0
 800b130:	b166      	cbz	r6, 800b14c <_dtoa_r+0x754>
 800b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd09      	ble.n	800b14c <_dtoa_r+0x754>
 800b138:	42b3      	cmp	r3, r6
 800b13a:	bfa8      	it	ge
 800b13c:	4633      	movge	r3, r6
 800b13e:	9a04      	ldr	r2, [sp, #16]
 800b140:	1af6      	subs	r6, r6, r3
 800b142:	1ad2      	subs	r2, r2, r3
 800b144:	9204      	str	r2, [sp, #16]
 800b146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b14e:	b30b      	cbz	r3, 800b194 <_dtoa_r+0x79c>
 800b150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80c6 	beq.w	800b2e4 <_dtoa_r+0x8ec>
 800b158:	2c00      	cmp	r4, #0
 800b15a:	f000 80c0 	beq.w	800b2de <_dtoa_r+0x8e6>
 800b15e:	4629      	mov	r1, r5
 800b160:	4622      	mov	r2, r4
 800b162:	4648      	mov	r0, r9
 800b164:	f000 fcc6 	bl	800baf4 <__pow5mult>
 800b168:	9a03      	ldr	r2, [sp, #12]
 800b16a:	4601      	mov	r1, r0
 800b16c:	4605      	mov	r5, r0
 800b16e:	4648      	mov	r0, r9
 800b170:	f000 fc1e 	bl	800b9b0 <__multiply>
 800b174:	9903      	ldr	r1, [sp, #12]
 800b176:	4680      	mov	r8, r0
 800b178:	4648      	mov	r0, r9
 800b17a:	f000 fb4f 	bl	800b81c <_Bfree>
 800b17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b180:	1b1b      	subs	r3, r3, r4
 800b182:	930a      	str	r3, [sp, #40]	@ 0x28
 800b184:	f000 80b1 	beq.w	800b2ea <_dtoa_r+0x8f2>
 800b188:	4641      	mov	r1, r8
 800b18a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b18c:	4648      	mov	r0, r9
 800b18e:	f000 fcb1 	bl	800baf4 <__pow5mult>
 800b192:	9003      	str	r0, [sp, #12]
 800b194:	2101      	movs	r1, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f000 fbf4 	bl	800b984 <__i2b>
 800b19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b19e:	4604      	mov	r4, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 81d8 	beq.w	800b556 <_dtoa_r+0xb5e>
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	4648      	mov	r0, r9
 800b1ac:	f000 fca2 	bl	800baf4 <__pow5mult>
 800b1b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	f300 809f 	bgt.w	800b2f8 <_dtoa_r+0x900>
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 8097 	bne.w	800b2f0 <_dtoa_r+0x8f8>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 8093 	bne.w	800b2f4 <_dtoa_r+0x8fc>
 800b1ce:	9b07      	ldr	r3, [sp, #28]
 800b1d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1d4:	0d1b      	lsrs	r3, r3, #20
 800b1d6:	051b      	lsls	r3, r3, #20
 800b1d8:	b133      	cbz	r3, 800b1e8 <_dtoa_r+0x7f0>
 800b1da:	9b04      	ldr	r3, [sp, #16]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	9304      	str	r3, [sp, #16]
 800b1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 81b8 	beq.w	800b562 <_dtoa_r+0xb6a>
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	f000 fb77 	bl	800b8ec <__hi0bits>
 800b1fe:	f1c0 0020 	rsb	r0, r0, #32
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	4418      	add	r0, r3
 800b206:	f010 001f 	ands.w	r0, r0, #31
 800b20a:	f000 8082 	beq.w	800b312 <_dtoa_r+0x91a>
 800b20e:	f1c0 0320 	rsb	r3, r0, #32
 800b212:	2b04      	cmp	r3, #4
 800b214:	dd73      	ble.n	800b2fe <_dtoa_r+0x906>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	f1c0 001c 	rsb	r0, r0, #28
 800b21c:	4403      	add	r3, r0
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b222:	4406      	add	r6, r0
 800b224:	4403      	add	r3, r0
 800b226:	9309      	str	r3, [sp, #36]	@ 0x24
 800b228:	9b04      	ldr	r3, [sp, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dd05      	ble.n	800b23a <_dtoa_r+0x842>
 800b22e:	461a      	mov	r2, r3
 800b230:	4648      	mov	r0, r9
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	f000 fcb8 	bl	800bba8 <__lshift>
 800b238:	9003      	str	r0, [sp, #12]
 800b23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x854>
 800b240:	4621      	mov	r1, r4
 800b242:	461a      	mov	r2, r3
 800b244:	4648      	mov	r0, r9
 800b246:	f000 fcaf 	bl	800bba8 <__lshift>
 800b24a:	4604      	mov	r4, r0
 800b24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d061      	beq.n	800b316 <_dtoa_r+0x91e>
 800b252:	4621      	mov	r1, r4
 800b254:	9803      	ldr	r0, [sp, #12]
 800b256:	f000 fd13 	bl	800bc80 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	da5b      	bge.n	800b316 <_dtoa_r+0x91e>
 800b25e:	2300      	movs	r3, #0
 800b260:	220a      	movs	r2, #10
 800b262:	4648      	mov	r0, r9
 800b264:	9903      	ldr	r1, [sp, #12]
 800b266:	f000 fafb 	bl	800b860 <__multadd>
 800b26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b26c:	f107 38ff 	add.w	r8, r7, #4294967295
 800b270:	9003      	str	r0, [sp, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8177 	beq.w	800b566 <_dtoa_r+0xb6e>
 800b278:	4629      	mov	r1, r5
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	4648      	mov	r0, r9
 800b280:	f000 faee 	bl	800b860 <__multadd>
 800b284:	f1bb 0f00 	cmp.w	fp, #0
 800b288:	4605      	mov	r5, r0
 800b28a:	dc6f      	bgt.n	800b36c <_dtoa_r+0x974>
 800b28c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc49      	bgt.n	800b326 <_dtoa_r+0x92e>
 800b292:	e06b      	b.n	800b36c <_dtoa_r+0x974>
 800b294:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b29a:	e73c      	b.n	800b116 <_dtoa_r+0x71e>
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	40240000 	.word	0x40240000
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	1e5c      	subs	r4, r3, #1
 800b2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	db09      	blt.n	800b2c2 <_dtoa_r+0x8ca>
 800b2ae:	1b1c      	subs	r4, r3, r4
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f6bf af30 	bge.w	800b118 <_dtoa_r+0x720>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	9a08      	ldr	r2, [sp, #32]
 800b2bc:	1a9e      	subs	r6, r3, r2
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e72b      	b.n	800b11a <_dtoa_r+0x722>
 800b2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2c6:	1ae3      	subs	r3, r4, r3
 800b2c8:	441a      	add	r2, r3
 800b2ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2cc:	9e04      	ldr	r6, [sp, #16]
 800b2ce:	2400      	movs	r4, #0
 800b2d0:	9b08      	ldr	r3, [sp, #32]
 800b2d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2d4:	e721      	b.n	800b11a <_dtoa_r+0x722>
 800b2d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2d8:	9e04      	ldr	r6, [sp, #16]
 800b2da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2dc:	e728      	b.n	800b130 <_dtoa_r+0x738>
 800b2de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2e2:	e751      	b.n	800b188 <_dtoa_r+0x790>
 800b2e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2e6:	9903      	ldr	r1, [sp, #12]
 800b2e8:	e750      	b.n	800b18c <_dtoa_r+0x794>
 800b2ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ee:	e751      	b.n	800b194 <_dtoa_r+0x79c>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e779      	b.n	800b1e8 <_dtoa_r+0x7f0>
 800b2f4:	9b06      	ldr	r3, [sp, #24]
 800b2f6:	e777      	b.n	800b1e8 <_dtoa_r+0x7f0>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2fc:	e779      	b.n	800b1f2 <_dtoa_r+0x7fa>
 800b2fe:	d093      	beq.n	800b228 <_dtoa_r+0x830>
 800b300:	9a04      	ldr	r2, [sp, #16]
 800b302:	331c      	adds	r3, #28
 800b304:	441a      	add	r2, r3
 800b306:	9204      	str	r2, [sp, #16]
 800b308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b30a:	441e      	add	r6, r3
 800b30c:	441a      	add	r2, r3
 800b30e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b310:	e78a      	b.n	800b228 <_dtoa_r+0x830>
 800b312:	4603      	mov	r3, r0
 800b314:	e7f4      	b.n	800b300 <_dtoa_r+0x908>
 800b316:	9b08      	ldr	r3, [sp, #32]
 800b318:	46b8      	mov	r8, r7
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dc20      	bgt.n	800b360 <_dtoa_r+0x968>
 800b31e:	469b      	mov	fp, r3
 800b320:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b322:	2b02      	cmp	r3, #2
 800b324:	dd1e      	ble.n	800b364 <_dtoa_r+0x96c>
 800b326:	f1bb 0f00 	cmp.w	fp, #0
 800b32a:	f47f adb1 	bne.w	800ae90 <_dtoa_r+0x498>
 800b32e:	4621      	mov	r1, r4
 800b330:	465b      	mov	r3, fp
 800b332:	2205      	movs	r2, #5
 800b334:	4648      	mov	r0, r9
 800b336:	f000 fa93 	bl	800b860 <__multadd>
 800b33a:	4601      	mov	r1, r0
 800b33c:	4604      	mov	r4, r0
 800b33e:	9803      	ldr	r0, [sp, #12]
 800b340:	f000 fc9e 	bl	800bc80 <__mcmp>
 800b344:	2800      	cmp	r0, #0
 800b346:	f77f ada3 	ble.w	800ae90 <_dtoa_r+0x498>
 800b34a:	4656      	mov	r6, sl
 800b34c:	2331      	movs	r3, #49	@ 0x31
 800b34e:	f108 0801 	add.w	r8, r8, #1
 800b352:	f806 3b01 	strb.w	r3, [r6], #1
 800b356:	e59f      	b.n	800ae98 <_dtoa_r+0x4a0>
 800b358:	46b8      	mov	r8, r7
 800b35a:	9c08      	ldr	r4, [sp, #32]
 800b35c:	4625      	mov	r5, r4
 800b35e:	e7f4      	b.n	800b34a <_dtoa_r+0x952>
 800b360:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8101 	beq.w	800b56e <_dtoa_r+0xb76>
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	dd05      	ble.n	800b37c <_dtoa_r+0x984>
 800b370:	4629      	mov	r1, r5
 800b372:	4632      	mov	r2, r6
 800b374:	4648      	mov	r0, r9
 800b376:	f000 fc17 	bl	800bba8 <__lshift>
 800b37a:	4605      	mov	r5, r0
 800b37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d05c      	beq.n	800b43c <_dtoa_r+0xa44>
 800b382:	4648      	mov	r0, r9
 800b384:	6869      	ldr	r1, [r5, #4]
 800b386:	f000 fa09 	bl	800b79c <_Balloc>
 800b38a:	4606      	mov	r6, r0
 800b38c:	b928      	cbnz	r0, 800b39a <_dtoa_r+0x9a2>
 800b38e:	4602      	mov	r2, r0
 800b390:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b394:	4b80      	ldr	r3, [pc, #512]	@ (800b598 <_dtoa_r+0xba0>)
 800b396:	f7ff bb43 	b.w	800aa20 <_dtoa_r+0x28>
 800b39a:	692a      	ldr	r2, [r5, #16]
 800b39c:	f105 010c 	add.w	r1, r5, #12
 800b3a0:	3202      	adds	r2, #2
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f001 f961 	bl	800c66c <memcpy>
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4648      	mov	r0, r9
 800b3b0:	f000 fbfa 	bl	800bba8 <__lshift>
 800b3b4:	462f      	mov	r7, r5
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	f10a 0301 	add.w	r3, sl, #1
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	eb0a 030b 	add.w	r3, sl, fp
 800b3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c4:	9b06      	ldr	r3, [sp, #24]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	9803      	ldr	r0, [sp, #12]
 800b3d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3d6:	f7ff fa86 	bl	800a8e6 <quorem>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4639      	mov	r1, r7
 800b3de:	3330      	adds	r3, #48	@ 0x30
 800b3e0:	9006      	str	r0, [sp, #24]
 800b3e2:	9803      	ldr	r0, [sp, #12]
 800b3e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3e6:	f000 fc4b 	bl	800bc80 <__mcmp>
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	9008      	str	r0, [sp, #32]
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4648      	mov	r0, r9
 800b3f2:	f000 fc61 	bl	800bcb8 <__mdiff>
 800b3f6:	68c2      	ldr	r2, [r0, #12]
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3fc:	bb02      	cbnz	r2, 800b440 <_dtoa_r+0xa48>
 800b3fe:	4601      	mov	r1, r0
 800b400:	9803      	ldr	r0, [sp, #12]
 800b402:	f000 fc3d 	bl	800bc80 <__mcmp>
 800b406:	4602      	mov	r2, r0
 800b408:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b40a:	4631      	mov	r1, r6
 800b40c:	4648      	mov	r0, r9
 800b40e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b412:	f000 fa03 	bl	800b81c <_Bfree>
 800b416:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b418:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b41a:	9e04      	ldr	r6, [sp, #16]
 800b41c:	ea42 0103 	orr.w	r1, r2, r3
 800b420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b422:	4319      	orrs	r1, r3
 800b424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b426:	d10d      	bne.n	800b444 <_dtoa_r+0xa4c>
 800b428:	2b39      	cmp	r3, #57	@ 0x39
 800b42a:	d027      	beq.n	800b47c <_dtoa_r+0xa84>
 800b42c:	9a08      	ldr	r2, [sp, #32]
 800b42e:	2a00      	cmp	r2, #0
 800b430:	dd01      	ble.n	800b436 <_dtoa_r+0xa3e>
 800b432:	9b06      	ldr	r3, [sp, #24]
 800b434:	3331      	adds	r3, #49	@ 0x31
 800b436:	f88b 3000 	strb.w	r3, [fp]
 800b43a:	e52e      	b.n	800ae9a <_dtoa_r+0x4a2>
 800b43c:	4628      	mov	r0, r5
 800b43e:	e7b9      	b.n	800b3b4 <_dtoa_r+0x9bc>
 800b440:	2201      	movs	r2, #1
 800b442:	e7e2      	b.n	800b40a <_dtoa_r+0xa12>
 800b444:	9908      	ldr	r1, [sp, #32]
 800b446:	2900      	cmp	r1, #0
 800b448:	db04      	blt.n	800b454 <_dtoa_r+0xa5c>
 800b44a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b44c:	4301      	orrs	r1, r0
 800b44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b450:	4301      	orrs	r1, r0
 800b452:	d120      	bne.n	800b496 <_dtoa_r+0xa9e>
 800b454:	2a00      	cmp	r2, #0
 800b456:	ddee      	ble.n	800b436 <_dtoa_r+0xa3e>
 800b458:	2201      	movs	r2, #1
 800b45a:	9903      	ldr	r1, [sp, #12]
 800b45c:	4648      	mov	r0, r9
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	f000 fba2 	bl	800bba8 <__lshift>
 800b464:	4621      	mov	r1, r4
 800b466:	9003      	str	r0, [sp, #12]
 800b468:	f000 fc0a 	bl	800bc80 <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	dc02      	bgt.n	800b478 <_dtoa_r+0xa80>
 800b472:	d1e0      	bne.n	800b436 <_dtoa_r+0xa3e>
 800b474:	07da      	lsls	r2, r3, #31
 800b476:	d5de      	bpl.n	800b436 <_dtoa_r+0xa3e>
 800b478:	2b39      	cmp	r3, #57	@ 0x39
 800b47a:	d1da      	bne.n	800b432 <_dtoa_r+0xa3a>
 800b47c:	2339      	movs	r3, #57	@ 0x39
 800b47e:	f88b 3000 	strb.w	r3, [fp]
 800b482:	4633      	mov	r3, r6
 800b484:	461e      	mov	r6, r3
 800b486:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	2a39      	cmp	r2, #57	@ 0x39
 800b48e:	d04e      	beq.n	800b52e <_dtoa_r+0xb36>
 800b490:	3201      	adds	r2, #1
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e501      	b.n	800ae9a <_dtoa_r+0x4a2>
 800b496:	2a00      	cmp	r2, #0
 800b498:	dd03      	ble.n	800b4a2 <_dtoa_r+0xaaa>
 800b49a:	2b39      	cmp	r3, #57	@ 0x39
 800b49c:	d0ee      	beq.n	800b47c <_dtoa_r+0xa84>
 800b49e:	3301      	adds	r3, #1
 800b4a0:	e7c9      	b.n	800b436 <_dtoa_r+0xa3e>
 800b4a2:	9a04      	ldr	r2, [sp, #16]
 800b4a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4aa:	428a      	cmp	r2, r1
 800b4ac:	d028      	beq.n	800b500 <_dtoa_r+0xb08>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	9903      	ldr	r1, [sp, #12]
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f000 f9d3 	bl	800b860 <__multadd>
 800b4ba:	42af      	cmp	r7, r5
 800b4bc:	9003      	str	r0, [sp, #12]
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	f04f 020a 	mov.w	r2, #10
 800b4c6:	4639      	mov	r1, r7
 800b4c8:	4648      	mov	r0, r9
 800b4ca:	d107      	bne.n	800b4dc <_dtoa_r+0xae4>
 800b4cc:	f000 f9c8 	bl	800b860 <__multadd>
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	9304      	str	r3, [sp, #16]
 800b4da:	e777      	b.n	800b3cc <_dtoa_r+0x9d4>
 800b4dc:	f000 f9c0 	bl	800b860 <__multadd>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	220a      	movs	r2, #10
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f000 f9b9 	bl	800b860 <__multadd>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	e7f0      	b.n	800b4d4 <_dtoa_r+0xadc>
 800b4f2:	f1bb 0f00 	cmp.w	fp, #0
 800b4f6:	bfcc      	ite	gt
 800b4f8:	465e      	movgt	r6, fp
 800b4fa:	2601      	movle	r6, #1
 800b4fc:	2700      	movs	r7, #0
 800b4fe:	4456      	add	r6, sl
 800b500:	2201      	movs	r2, #1
 800b502:	9903      	ldr	r1, [sp, #12]
 800b504:	4648      	mov	r0, r9
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	f000 fb4e 	bl	800bba8 <__lshift>
 800b50c:	4621      	mov	r1, r4
 800b50e:	9003      	str	r0, [sp, #12]
 800b510:	f000 fbb6 	bl	800bc80 <__mcmp>
 800b514:	2800      	cmp	r0, #0
 800b516:	dcb4      	bgt.n	800b482 <_dtoa_r+0xa8a>
 800b518:	d102      	bne.n	800b520 <_dtoa_r+0xb28>
 800b51a:	9b04      	ldr	r3, [sp, #16]
 800b51c:	07db      	lsls	r3, r3, #31
 800b51e:	d4b0      	bmi.n	800b482 <_dtoa_r+0xa8a>
 800b520:	4633      	mov	r3, r6
 800b522:	461e      	mov	r6, r3
 800b524:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b528:	2a30      	cmp	r2, #48	@ 0x30
 800b52a:	d0fa      	beq.n	800b522 <_dtoa_r+0xb2a>
 800b52c:	e4b5      	b.n	800ae9a <_dtoa_r+0x4a2>
 800b52e:	459a      	cmp	sl, r3
 800b530:	d1a8      	bne.n	800b484 <_dtoa_r+0xa8c>
 800b532:	2331      	movs	r3, #49	@ 0x31
 800b534:	f108 0801 	add.w	r8, r8, #1
 800b538:	f88a 3000 	strb.w	r3, [sl]
 800b53c:	e4ad      	b.n	800ae9a <_dtoa_r+0x4a2>
 800b53e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b540:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b59c <_dtoa_r+0xba4>
 800b544:	b11b      	cbz	r3, 800b54e <_dtoa_r+0xb56>
 800b546:	f10a 0308 	add.w	r3, sl, #8
 800b54a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	4650      	mov	r0, sl
 800b550:	b017      	add	sp, #92	@ 0x5c
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b558:	2b01      	cmp	r3, #1
 800b55a:	f77f ae2e 	ble.w	800b1ba <_dtoa_r+0x7c2>
 800b55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b560:	930a      	str	r3, [sp, #40]	@ 0x28
 800b562:	2001      	movs	r0, #1
 800b564:	e64d      	b.n	800b202 <_dtoa_r+0x80a>
 800b566:	f1bb 0f00 	cmp.w	fp, #0
 800b56a:	f77f aed9 	ble.w	800b320 <_dtoa_r+0x928>
 800b56e:	4656      	mov	r6, sl
 800b570:	4621      	mov	r1, r4
 800b572:	9803      	ldr	r0, [sp, #12]
 800b574:	f7ff f9b7 	bl	800a8e6 <quorem>
 800b578:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b57c:	f806 3b01 	strb.w	r3, [r6], #1
 800b580:	eba6 020a 	sub.w	r2, r6, sl
 800b584:	4593      	cmp	fp, r2
 800b586:	ddb4      	ble.n	800b4f2 <_dtoa_r+0xafa>
 800b588:	2300      	movs	r3, #0
 800b58a:	220a      	movs	r2, #10
 800b58c:	4648      	mov	r0, r9
 800b58e:	9903      	ldr	r1, [sp, #12]
 800b590:	f000 f966 	bl	800b860 <__multadd>
 800b594:	9003      	str	r0, [sp, #12]
 800b596:	e7eb      	b.n	800b570 <_dtoa_r+0xb78>
 800b598:	0800ce16 	.word	0x0800ce16
 800b59c:	0800cd9a 	.word	0x0800cd9a

0800b5a0 <_free_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d040      	beq.n	800b62a <_free_r+0x8a>
 800b5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ac:	1f0c      	subs	r4, r1, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfb8      	it	lt
 800b5b2:	18e4      	addlt	r4, r4, r3
 800b5b4:	f000 f8e6 	bl	800b784 <__malloc_lock>
 800b5b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b62c <_free_r+0x8c>)
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	b933      	cbnz	r3, 800b5cc <_free_r+0x2c>
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	6014      	str	r4, [r2, #0]
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c8:	f000 b8e2 	b.w	800b790 <__malloc_unlock>
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d908      	bls.n	800b5e2 <_free_r+0x42>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	1821      	adds	r1, r4, r0
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	bf01      	itttt	eq
 800b5d8:	6819      	ldreq	r1, [r3, #0]
 800b5da:	685b      	ldreq	r3, [r3, #4]
 800b5dc:	1809      	addeq	r1, r1, r0
 800b5de:	6021      	streq	r1, [r4, #0]
 800b5e0:	e7ed      	b.n	800b5be <_free_r+0x1e>
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	b10b      	cbz	r3, 800b5ec <_free_r+0x4c>
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d9fa      	bls.n	800b5e2 <_free_r+0x42>
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	1850      	adds	r0, r2, r1
 800b5f0:	42a0      	cmp	r0, r4
 800b5f2:	d10b      	bne.n	800b60c <_free_r+0x6c>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	4401      	add	r1, r0
 800b5f8:	1850      	adds	r0, r2, r1
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	d1e0      	bne.n	800b5c2 <_free_r+0x22>
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4408      	add	r0, r1
 800b606:	6010      	str	r0, [r2, #0]
 800b608:	6053      	str	r3, [r2, #4]
 800b60a:	e7da      	b.n	800b5c2 <_free_r+0x22>
 800b60c:	d902      	bls.n	800b614 <_free_r+0x74>
 800b60e:	230c      	movs	r3, #12
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	e7d6      	b.n	800b5c2 <_free_r+0x22>
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	1821      	adds	r1, r4, r0
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf01      	itttt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	1809      	addeq	r1, r1, r0
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	6054      	str	r4, [r2, #4]
 800b628:	e7cb      	b.n	800b5c2 <_free_r+0x22>
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	200007d8 	.word	0x200007d8

0800b630 <malloc>:
 800b630:	4b02      	ldr	r3, [pc, #8]	@ (800b63c <malloc+0xc>)
 800b632:	4601      	mov	r1, r0
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f000 b825 	b.w	800b684 <_malloc_r>
 800b63a:	bf00      	nop
 800b63c:	20000074 	.word	0x20000074

0800b640 <sbrk_aligned>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	4e0f      	ldr	r6, [pc, #60]	@ (800b680 <sbrk_aligned+0x40>)
 800b644:	460c      	mov	r4, r1
 800b646:	6831      	ldr	r1, [r6, #0]
 800b648:	4605      	mov	r5, r0
 800b64a:	b911      	cbnz	r1, 800b652 <sbrk_aligned+0x12>
 800b64c:	f000 fffe 	bl	800c64c <_sbrk_r>
 800b650:	6030      	str	r0, [r6, #0]
 800b652:	4621      	mov	r1, r4
 800b654:	4628      	mov	r0, r5
 800b656:	f000 fff9 	bl	800c64c <_sbrk_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d103      	bne.n	800b666 <sbrk_aligned+0x26>
 800b65e:	f04f 34ff 	mov.w	r4, #4294967295
 800b662:	4620      	mov	r0, r4
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	1cc4      	adds	r4, r0, #3
 800b668:	f024 0403 	bic.w	r4, r4, #3
 800b66c:	42a0      	cmp	r0, r4
 800b66e:	d0f8      	beq.n	800b662 <sbrk_aligned+0x22>
 800b670:	1a21      	subs	r1, r4, r0
 800b672:	4628      	mov	r0, r5
 800b674:	f000 ffea 	bl	800c64c <_sbrk_r>
 800b678:	3001      	adds	r0, #1
 800b67a:	d1f2      	bne.n	800b662 <sbrk_aligned+0x22>
 800b67c:	e7ef      	b.n	800b65e <sbrk_aligned+0x1e>
 800b67e:	bf00      	nop
 800b680:	200007d4 	.word	0x200007d4

0800b684 <_malloc_r>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	1ccd      	adds	r5, r1, #3
 800b68a:	f025 0503 	bic.w	r5, r5, #3
 800b68e:	3508      	adds	r5, #8
 800b690:	2d0c      	cmp	r5, #12
 800b692:	bf38      	it	cc
 800b694:	250c      	movcc	r5, #12
 800b696:	2d00      	cmp	r5, #0
 800b698:	4606      	mov	r6, r0
 800b69a:	db01      	blt.n	800b6a0 <_malloc_r+0x1c>
 800b69c:	42a9      	cmp	r1, r5
 800b69e:	d904      	bls.n	800b6aa <_malloc_r+0x26>
 800b6a0:	230c      	movs	r3, #12
 800b6a2:	6033      	str	r3, [r6, #0]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b780 <_malloc_r+0xfc>
 800b6ae:	f000 f869 	bl	800b784 <__malloc_lock>
 800b6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	bb44      	cbnz	r4, 800b70c <_malloc_r+0x88>
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff ffbf 	bl	800b640 <sbrk_aligned>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	d158      	bne.n	800b77a <_malloc_r+0xf6>
 800b6c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6cc:	4627      	mov	r7, r4
 800b6ce:	2f00      	cmp	r7, #0
 800b6d0:	d143      	bne.n	800b75a <_malloc_r+0xd6>
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	d04b      	beq.n	800b76e <_malloc_r+0xea>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	eb04 0903 	add.w	r9, r4, r3
 800b6e0:	f000 ffb4 	bl	800c64c <_sbrk_r>
 800b6e4:	4581      	cmp	r9, r0
 800b6e6:	d142      	bne.n	800b76e <_malloc_r+0xea>
 800b6e8:	6821      	ldr	r1, [r4, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	1a6d      	subs	r5, r5, r1
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7ff ffa6 	bl	800b640 <sbrk_aligned>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d03a      	beq.n	800b76e <_malloc_r+0xea>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	442b      	add	r3, r5
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	bb62      	cbnz	r2, 800b760 <_malloc_r+0xdc>
 800b706:	f8c8 7000 	str.w	r7, [r8]
 800b70a:	e00f      	b.n	800b72c <_malloc_r+0xa8>
 800b70c:	6822      	ldr	r2, [r4, #0]
 800b70e:	1b52      	subs	r2, r2, r5
 800b710:	d420      	bmi.n	800b754 <_malloc_r+0xd0>
 800b712:	2a0b      	cmp	r2, #11
 800b714:	d917      	bls.n	800b746 <_malloc_r+0xc2>
 800b716:	1961      	adds	r1, r4, r5
 800b718:	42a3      	cmp	r3, r4
 800b71a:	6025      	str	r5, [r4, #0]
 800b71c:	bf18      	it	ne
 800b71e:	6059      	strne	r1, [r3, #4]
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	bf08      	it	eq
 800b724:	f8c8 1000 	streq.w	r1, [r8]
 800b728:	5162      	str	r2, [r4, r5]
 800b72a:	604b      	str	r3, [r1, #4]
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 f82f 	bl	800b790 <__malloc_unlock>
 800b732:	f104 000b 	add.w	r0, r4, #11
 800b736:	1d23      	adds	r3, r4, #4
 800b738:	f020 0007 	bic.w	r0, r0, #7
 800b73c:	1ac2      	subs	r2, r0, r3
 800b73e:	bf1c      	itt	ne
 800b740:	1a1b      	subne	r3, r3, r0
 800b742:	50a3      	strne	r3, [r4, r2]
 800b744:	e7af      	b.n	800b6a6 <_malloc_r+0x22>
 800b746:	6862      	ldr	r2, [r4, #4]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	bf0c      	ite	eq
 800b74c:	f8c8 2000 	streq.w	r2, [r8]
 800b750:	605a      	strne	r2, [r3, #4]
 800b752:	e7eb      	b.n	800b72c <_malloc_r+0xa8>
 800b754:	4623      	mov	r3, r4
 800b756:	6864      	ldr	r4, [r4, #4]
 800b758:	e7ae      	b.n	800b6b8 <_malloc_r+0x34>
 800b75a:	463c      	mov	r4, r7
 800b75c:	687f      	ldr	r7, [r7, #4]
 800b75e:	e7b6      	b.n	800b6ce <_malloc_r+0x4a>
 800b760:	461a      	mov	r2, r3
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	42a3      	cmp	r3, r4
 800b766:	d1fb      	bne.n	800b760 <_malloc_r+0xdc>
 800b768:	2300      	movs	r3, #0
 800b76a:	6053      	str	r3, [r2, #4]
 800b76c:	e7de      	b.n	800b72c <_malloc_r+0xa8>
 800b76e:	230c      	movs	r3, #12
 800b770:	4630      	mov	r0, r6
 800b772:	6033      	str	r3, [r6, #0]
 800b774:	f000 f80c 	bl	800b790 <__malloc_unlock>
 800b778:	e794      	b.n	800b6a4 <_malloc_r+0x20>
 800b77a:	6005      	str	r5, [r0, #0]
 800b77c:	e7d6      	b.n	800b72c <_malloc_r+0xa8>
 800b77e:	bf00      	nop
 800b780:	200007d8 	.word	0x200007d8

0800b784 <__malloc_lock>:
 800b784:	4801      	ldr	r0, [pc, #4]	@ (800b78c <__malloc_lock+0x8>)
 800b786:	f7ff b89e 	b.w	800a8c6 <__retarget_lock_acquire_recursive>
 800b78a:	bf00      	nop
 800b78c:	200007d0 	.word	0x200007d0

0800b790 <__malloc_unlock>:
 800b790:	4801      	ldr	r0, [pc, #4]	@ (800b798 <__malloc_unlock+0x8>)
 800b792:	f7ff b899 	b.w	800a8c8 <__retarget_lock_release_recursive>
 800b796:	bf00      	nop
 800b798:	200007d0 	.word	0x200007d0

0800b79c <_Balloc>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	69c6      	ldr	r6, [r0, #28]
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	b976      	cbnz	r6, 800b7c4 <_Balloc+0x28>
 800b7a6:	2010      	movs	r0, #16
 800b7a8:	f7ff ff42 	bl	800b630 <malloc>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	61e0      	str	r0, [r4, #28]
 800b7b0:	b920      	cbnz	r0, 800b7bc <_Balloc+0x20>
 800b7b2:	216b      	movs	r1, #107	@ 0x6b
 800b7b4:	4b17      	ldr	r3, [pc, #92]	@ (800b814 <_Balloc+0x78>)
 800b7b6:	4818      	ldr	r0, [pc, #96]	@ (800b818 <_Balloc+0x7c>)
 800b7b8:	f000 ff66 	bl	800c688 <__assert_func>
 800b7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7c0:	6006      	str	r6, [r0, #0]
 800b7c2:	60c6      	str	r6, [r0, #12]
 800b7c4:	69e6      	ldr	r6, [r4, #28]
 800b7c6:	68f3      	ldr	r3, [r6, #12]
 800b7c8:	b183      	cbz	r3, 800b7ec <_Balloc+0x50>
 800b7ca:	69e3      	ldr	r3, [r4, #28]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7d2:	b9b8      	cbnz	r0, 800b804 <_Balloc+0x68>
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7da:	1d72      	adds	r2, r6, #5
 800b7dc:	4620      	mov	r0, r4
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	f000 ff70 	bl	800c6c4 <_calloc_r>
 800b7e4:	b160      	cbz	r0, 800b800 <_Balloc+0x64>
 800b7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ea:	e00e      	b.n	800b80a <_Balloc+0x6e>
 800b7ec:	2221      	movs	r2, #33	@ 0x21
 800b7ee:	2104      	movs	r1, #4
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 ff67 	bl	800c6c4 <_calloc_r>
 800b7f6:	69e3      	ldr	r3, [r4, #28]
 800b7f8:	60f0      	str	r0, [r6, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e4      	bne.n	800b7ca <_Balloc+0x2e>
 800b800:	2000      	movs	r0, #0
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	6802      	ldr	r2, [r0, #0]
 800b806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b80a:	2300      	movs	r3, #0
 800b80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b810:	e7f7      	b.n	800b802 <_Balloc+0x66>
 800b812:	bf00      	nop
 800b814:	0800cda7 	.word	0x0800cda7
 800b818:	0800ce27 	.word	0x0800ce27

0800b81c <_Bfree>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	69c6      	ldr	r6, [r0, #28]
 800b820:	4605      	mov	r5, r0
 800b822:	460c      	mov	r4, r1
 800b824:	b976      	cbnz	r6, 800b844 <_Bfree+0x28>
 800b826:	2010      	movs	r0, #16
 800b828:	f7ff ff02 	bl	800b630 <malloc>
 800b82c:	4602      	mov	r2, r0
 800b82e:	61e8      	str	r0, [r5, #28]
 800b830:	b920      	cbnz	r0, 800b83c <_Bfree+0x20>
 800b832:	218f      	movs	r1, #143	@ 0x8f
 800b834:	4b08      	ldr	r3, [pc, #32]	@ (800b858 <_Bfree+0x3c>)
 800b836:	4809      	ldr	r0, [pc, #36]	@ (800b85c <_Bfree+0x40>)
 800b838:	f000 ff26 	bl	800c688 <__assert_func>
 800b83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b840:	6006      	str	r6, [r0, #0]
 800b842:	60c6      	str	r6, [r0, #12]
 800b844:	b13c      	cbz	r4, 800b856 <_Bfree+0x3a>
 800b846:	69eb      	ldr	r3, [r5, #28]
 800b848:	6862      	ldr	r2, [r4, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b850:	6021      	str	r1, [r4, #0]
 800b852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	0800cda7 	.word	0x0800cda7
 800b85c:	0800ce27 	.word	0x0800ce27

0800b860 <__multadd>:
 800b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b864:	4607      	mov	r7, r0
 800b866:	460c      	mov	r4, r1
 800b868:	461e      	mov	r6, r3
 800b86a:	2000      	movs	r0, #0
 800b86c:	690d      	ldr	r5, [r1, #16]
 800b86e:	f101 0c14 	add.w	ip, r1, #20
 800b872:	f8dc 3000 	ldr.w	r3, [ip]
 800b876:	3001      	adds	r0, #1
 800b878:	b299      	uxth	r1, r3
 800b87a:	fb02 6101 	mla	r1, r2, r1, r6
 800b87e:	0c1e      	lsrs	r6, r3, #16
 800b880:	0c0b      	lsrs	r3, r1, #16
 800b882:	fb02 3306 	mla	r3, r2, r6, r3
 800b886:	b289      	uxth	r1, r1
 800b888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b88c:	4285      	cmp	r5, r0
 800b88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b892:	f84c 1b04 	str.w	r1, [ip], #4
 800b896:	dcec      	bgt.n	800b872 <__multadd+0x12>
 800b898:	b30e      	cbz	r6, 800b8de <__multadd+0x7e>
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	dc19      	bgt.n	800b8d4 <__multadd+0x74>
 800b8a0:	6861      	ldr	r1, [r4, #4]
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	3101      	adds	r1, #1
 800b8a6:	f7ff ff79 	bl	800b79c <_Balloc>
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <__multadd+0x5a>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	21ba      	movs	r1, #186	@ 0xba
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e4 <__multadd+0x84>)
 800b8b4:	480c      	ldr	r0, [pc, #48]	@ (800b8e8 <__multadd+0x88>)
 800b8b6:	f000 fee7 	bl	800c688 <__assert_func>
 800b8ba:	6922      	ldr	r2, [r4, #16]
 800b8bc:	f104 010c 	add.w	r1, r4, #12
 800b8c0:	3202      	adds	r2, #2
 800b8c2:	0092      	lsls	r2, r2, #2
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	f000 fed1 	bl	800c66c <memcpy>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff ffa5 	bl	800b81c <_Bfree>
 800b8d2:	4644      	mov	r4, r8
 800b8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8d8:	3501      	adds	r5, #1
 800b8da:	615e      	str	r6, [r3, #20]
 800b8dc:	6125      	str	r5, [r4, #16]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	0800ce16 	.word	0x0800ce16
 800b8e8:	0800ce27 	.word	0x0800ce27

0800b8ec <__hi0bits>:
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8f2:	bf3a      	itte	cc
 800b8f4:	0403      	lslcc	r3, r0, #16
 800b8f6:	2010      	movcc	r0, #16
 800b8f8:	2000      	movcs	r0, #0
 800b8fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8fe:	bf3c      	itt	cc
 800b900:	021b      	lslcc	r3, r3, #8
 800b902:	3008      	addcc	r0, #8
 800b904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b908:	bf3c      	itt	cc
 800b90a:	011b      	lslcc	r3, r3, #4
 800b90c:	3004      	addcc	r0, #4
 800b90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b912:	bf3c      	itt	cc
 800b914:	009b      	lslcc	r3, r3, #2
 800b916:	3002      	addcc	r0, #2
 800b918:	2b00      	cmp	r3, #0
 800b91a:	db05      	blt.n	800b928 <__hi0bits+0x3c>
 800b91c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b920:	f100 0001 	add.w	r0, r0, #1
 800b924:	bf08      	it	eq
 800b926:	2020      	moveq	r0, #32
 800b928:	4770      	bx	lr

0800b92a <__lo0bits>:
 800b92a:	6803      	ldr	r3, [r0, #0]
 800b92c:	4602      	mov	r2, r0
 800b92e:	f013 0007 	ands.w	r0, r3, #7
 800b932:	d00b      	beq.n	800b94c <__lo0bits+0x22>
 800b934:	07d9      	lsls	r1, r3, #31
 800b936:	d421      	bmi.n	800b97c <__lo0bits+0x52>
 800b938:	0798      	lsls	r0, r3, #30
 800b93a:	bf49      	itett	mi
 800b93c:	085b      	lsrmi	r3, r3, #1
 800b93e:	089b      	lsrpl	r3, r3, #2
 800b940:	2001      	movmi	r0, #1
 800b942:	6013      	strmi	r3, [r2, #0]
 800b944:	bf5c      	itt	pl
 800b946:	2002      	movpl	r0, #2
 800b948:	6013      	strpl	r3, [r2, #0]
 800b94a:	4770      	bx	lr
 800b94c:	b299      	uxth	r1, r3
 800b94e:	b909      	cbnz	r1, 800b954 <__lo0bits+0x2a>
 800b950:	2010      	movs	r0, #16
 800b952:	0c1b      	lsrs	r3, r3, #16
 800b954:	b2d9      	uxtb	r1, r3
 800b956:	b909      	cbnz	r1, 800b95c <__lo0bits+0x32>
 800b958:	3008      	adds	r0, #8
 800b95a:	0a1b      	lsrs	r3, r3, #8
 800b95c:	0719      	lsls	r1, r3, #28
 800b95e:	bf04      	itt	eq
 800b960:	091b      	lsreq	r3, r3, #4
 800b962:	3004      	addeq	r0, #4
 800b964:	0799      	lsls	r1, r3, #30
 800b966:	bf04      	itt	eq
 800b968:	089b      	lsreq	r3, r3, #2
 800b96a:	3002      	addeq	r0, #2
 800b96c:	07d9      	lsls	r1, r3, #31
 800b96e:	d403      	bmi.n	800b978 <__lo0bits+0x4e>
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	f100 0001 	add.w	r0, r0, #1
 800b976:	d003      	beq.n	800b980 <__lo0bits+0x56>
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	4770      	bx	lr
 800b97c:	2000      	movs	r0, #0
 800b97e:	4770      	bx	lr
 800b980:	2020      	movs	r0, #32
 800b982:	4770      	bx	lr

0800b984 <__i2b>:
 800b984:	b510      	push	{r4, lr}
 800b986:	460c      	mov	r4, r1
 800b988:	2101      	movs	r1, #1
 800b98a:	f7ff ff07 	bl	800b79c <_Balloc>
 800b98e:	4602      	mov	r2, r0
 800b990:	b928      	cbnz	r0, 800b99e <__i2b+0x1a>
 800b992:	f240 1145 	movw	r1, #325	@ 0x145
 800b996:	4b04      	ldr	r3, [pc, #16]	@ (800b9a8 <__i2b+0x24>)
 800b998:	4804      	ldr	r0, [pc, #16]	@ (800b9ac <__i2b+0x28>)
 800b99a:	f000 fe75 	bl	800c688 <__assert_func>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	6144      	str	r4, [r0, #20]
 800b9a2:	6103      	str	r3, [r0, #16]
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800ce16 	.word	0x0800ce16
 800b9ac:	0800ce27 	.word	0x0800ce27

0800b9b0 <__multiply>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	4617      	mov	r7, r2
 800b9b6:	690a      	ldr	r2, [r1, #16]
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	bfa2      	ittt	ge
 800b9c0:	463b      	movge	r3, r7
 800b9c2:	460f      	movge	r7, r1
 800b9c4:	4699      	movge	r9, r3
 800b9c6:	693d      	ldr	r5, [r7, #16]
 800b9c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	eb05 060a 	add.w	r6, r5, sl
 800b9d4:	42b3      	cmp	r3, r6
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	bfb8      	it	lt
 800b9da:	3101      	addlt	r1, #1
 800b9dc:	f7ff fede 	bl	800b79c <_Balloc>
 800b9e0:	b930      	cbnz	r0, 800b9f0 <__multiply+0x40>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9e8:	4b40      	ldr	r3, [pc, #256]	@ (800baec <__multiply+0x13c>)
 800b9ea:	4841      	ldr	r0, [pc, #260]	@ (800baf0 <__multiply+0x140>)
 800b9ec:	f000 fe4c 	bl	800c688 <__assert_func>
 800b9f0:	f100 0414 	add.w	r4, r0, #20
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b9fc:	4573      	cmp	r3, lr
 800b9fe:	d320      	bcc.n	800ba42 <__multiply+0x92>
 800ba00:	f107 0814 	add.w	r8, r7, #20
 800ba04:	f109 0114 	add.w	r1, r9, #20
 800ba08:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba0c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ba10:	9302      	str	r3, [sp, #8]
 800ba12:	1beb      	subs	r3, r5, r7
 800ba14:	3b15      	subs	r3, #21
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	3715      	adds	r7, #21
 800ba1e:	42bd      	cmp	r5, r7
 800ba20:	bf38      	it	cc
 800ba22:	2304      	movcc	r3, #4
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	9b02      	ldr	r3, [sp, #8]
 800ba28:	9103      	str	r1, [sp, #12]
 800ba2a:	428b      	cmp	r3, r1
 800ba2c:	d80c      	bhi.n	800ba48 <__multiply+0x98>
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	dd03      	ble.n	800ba3a <__multiply+0x8a>
 800ba32:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d055      	beq.n	800bae6 <__multiply+0x136>
 800ba3a:	6106      	str	r6, [r0, #16]
 800ba3c:	b005      	add	sp, #20
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	f843 2b04 	str.w	r2, [r3], #4
 800ba46:	e7d9      	b.n	800b9fc <__multiply+0x4c>
 800ba48:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba4c:	f1ba 0f00 	cmp.w	sl, #0
 800ba50:	d01f      	beq.n	800ba92 <__multiply+0xe2>
 800ba52:	46c4      	mov	ip, r8
 800ba54:	46a1      	mov	r9, r4
 800ba56:	2700      	movs	r7, #0
 800ba58:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba5c:	f8d9 3000 	ldr.w	r3, [r9]
 800ba60:	fa1f fb82 	uxth.w	fp, r2
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba6a:	443b      	add	r3, r7
 800ba6c:	f8d9 7000 	ldr.w	r7, [r9]
 800ba70:	0c12      	lsrs	r2, r2, #16
 800ba72:	0c3f      	lsrs	r7, r7, #16
 800ba74:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba78:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba82:	4565      	cmp	r5, ip
 800ba84:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ba88:	f849 3b04 	str.w	r3, [r9], #4
 800ba8c:	d8e4      	bhi.n	800ba58 <__multiply+0xa8>
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	50e7      	str	r7, [r4, r3]
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	3104      	adds	r1, #4
 800ba96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba9a:	f1b9 0f00 	cmp.w	r9, #0
 800ba9e:	d020      	beq.n	800bae2 <__multiply+0x132>
 800baa0:	4647      	mov	r7, r8
 800baa2:	46a4      	mov	ip, r4
 800baa4:	f04f 0a00 	mov.w	sl, #0
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	f8b7 b000 	ldrh.w	fp, [r7]
 800baae:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	fb09 220b 	mla	r2, r9, fp, r2
 800bab8:	4452      	add	r2, sl
 800baba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800babe:	f84c 3b04 	str.w	r3, [ip], #4
 800bac2:	f857 3b04 	ldr.w	r3, [r7], #4
 800bac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baca:	f8bc 3000 	ldrh.w	r3, [ip]
 800bace:	42bd      	cmp	r5, r7
 800bad0:	fb09 330a 	mla	r3, r9, sl, r3
 800bad4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800badc:	d8e5      	bhi.n	800baaa <__multiply+0xfa>
 800bade:	9a01      	ldr	r2, [sp, #4]
 800bae0:	50a3      	str	r3, [r4, r2]
 800bae2:	3404      	adds	r4, #4
 800bae4:	e79f      	b.n	800ba26 <__multiply+0x76>
 800bae6:	3e01      	subs	r6, #1
 800bae8:	e7a1      	b.n	800ba2e <__multiply+0x7e>
 800baea:	bf00      	nop
 800baec:	0800ce16 	.word	0x0800ce16
 800baf0:	0800ce27 	.word	0x0800ce27

0800baf4 <__pow5mult>:
 800baf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf8:	4615      	mov	r5, r2
 800bafa:	f012 0203 	ands.w	r2, r2, #3
 800bafe:	4607      	mov	r7, r0
 800bb00:	460e      	mov	r6, r1
 800bb02:	d007      	beq.n	800bb14 <__pow5mult+0x20>
 800bb04:	4c25      	ldr	r4, [pc, #148]	@ (800bb9c <__pow5mult+0xa8>)
 800bb06:	3a01      	subs	r2, #1
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb0e:	f7ff fea7 	bl	800b860 <__multadd>
 800bb12:	4606      	mov	r6, r0
 800bb14:	10ad      	asrs	r5, r5, #2
 800bb16:	d03d      	beq.n	800bb94 <__pow5mult+0xa0>
 800bb18:	69fc      	ldr	r4, [r7, #28]
 800bb1a:	b97c      	cbnz	r4, 800bb3c <__pow5mult+0x48>
 800bb1c:	2010      	movs	r0, #16
 800bb1e:	f7ff fd87 	bl	800b630 <malloc>
 800bb22:	4602      	mov	r2, r0
 800bb24:	61f8      	str	r0, [r7, #28]
 800bb26:	b928      	cbnz	r0, 800bb34 <__pow5mult+0x40>
 800bb28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb2c:	4b1c      	ldr	r3, [pc, #112]	@ (800bba0 <__pow5mult+0xac>)
 800bb2e:	481d      	ldr	r0, [pc, #116]	@ (800bba4 <__pow5mult+0xb0>)
 800bb30:	f000 fdaa 	bl	800c688 <__assert_func>
 800bb34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb38:	6004      	str	r4, [r0, #0]
 800bb3a:	60c4      	str	r4, [r0, #12]
 800bb3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb44:	b94c      	cbnz	r4, 800bb5a <__pow5mult+0x66>
 800bb46:	f240 2171 	movw	r1, #625	@ 0x271
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f7ff ff1a 	bl	800b984 <__i2b>
 800bb50:	2300      	movs	r3, #0
 800bb52:	4604      	mov	r4, r0
 800bb54:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	f04f 0900 	mov.w	r9, #0
 800bb5e:	07eb      	lsls	r3, r5, #31
 800bb60:	d50a      	bpl.n	800bb78 <__pow5mult+0x84>
 800bb62:	4631      	mov	r1, r6
 800bb64:	4622      	mov	r2, r4
 800bb66:	4638      	mov	r0, r7
 800bb68:	f7ff ff22 	bl	800b9b0 <__multiply>
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff fe53 	bl	800b81c <_Bfree>
 800bb76:	4646      	mov	r6, r8
 800bb78:	106d      	asrs	r5, r5, #1
 800bb7a:	d00b      	beq.n	800bb94 <__pow5mult+0xa0>
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	b938      	cbnz	r0, 800bb90 <__pow5mult+0x9c>
 800bb80:	4622      	mov	r2, r4
 800bb82:	4621      	mov	r1, r4
 800bb84:	4638      	mov	r0, r7
 800bb86:	f7ff ff13 	bl	800b9b0 <__multiply>
 800bb8a:	6020      	str	r0, [r4, #0]
 800bb8c:	f8c0 9000 	str.w	r9, [r0]
 800bb90:	4604      	mov	r4, r0
 800bb92:	e7e4      	b.n	800bb5e <__pow5mult+0x6a>
 800bb94:	4630      	mov	r0, r6
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0800ced8 	.word	0x0800ced8
 800bba0:	0800cda7 	.word	0x0800cda7
 800bba4:	0800ce27 	.word	0x0800ce27

0800bba8 <__lshift>:
 800bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	460c      	mov	r4, r1
 800bbae:	4607      	mov	r7, r0
 800bbb0:	4691      	mov	r9, r2
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	6849      	ldr	r1, [r1, #4]
 800bbb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbc0:	f108 0601 	add.w	r6, r8, #1
 800bbc4:	42b3      	cmp	r3, r6
 800bbc6:	db0b      	blt.n	800bbe0 <__lshift+0x38>
 800bbc8:	4638      	mov	r0, r7
 800bbca:	f7ff fde7 	bl	800b79c <_Balloc>
 800bbce:	4605      	mov	r5, r0
 800bbd0:	b948      	cbnz	r0, 800bbe6 <__lshift+0x3e>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbd8:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <__lshift+0xd0>)
 800bbda:	4828      	ldr	r0, [pc, #160]	@ (800bc7c <__lshift+0xd4>)
 800bbdc:	f000 fd54 	bl	800c688 <__assert_func>
 800bbe0:	3101      	adds	r1, #1
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__lshift+0x1c>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f100 0114 	add.w	r1, r0, #20
 800bbec:	f100 0210 	add.w	r2, r0, #16
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	4553      	cmp	r3, sl
 800bbf4:	db33      	blt.n	800bc5e <__lshift+0xb6>
 800bbf6:	6920      	ldr	r0, [r4, #16]
 800bbf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbfc:	f104 0314 	add.w	r3, r4, #20
 800bc00:	f019 091f 	ands.w	r9, r9, #31
 800bc04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc0c:	d02b      	beq.n	800bc66 <__lshift+0xbe>
 800bc0e:	468a      	mov	sl, r1
 800bc10:	2200      	movs	r2, #0
 800bc12:	f1c9 0e20 	rsb	lr, r9, #32
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	fa00 f009 	lsl.w	r0, r0, r9
 800bc1c:	4310      	orrs	r0, r2
 800bc1e:	f84a 0b04 	str.w	r0, [sl], #4
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	459c      	cmp	ip, r3
 800bc28:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc2c:	d8f3      	bhi.n	800bc16 <__lshift+0x6e>
 800bc2e:	ebac 0304 	sub.w	r3, ip, r4
 800bc32:	3b15      	subs	r3, #21
 800bc34:	f023 0303 	bic.w	r3, r3, #3
 800bc38:	3304      	adds	r3, #4
 800bc3a:	f104 0015 	add.w	r0, r4, #21
 800bc3e:	4560      	cmp	r0, ip
 800bc40:	bf88      	it	hi
 800bc42:	2304      	movhi	r3, #4
 800bc44:	50ca      	str	r2, [r1, r3]
 800bc46:	b10a      	cbz	r2, 800bc4c <__lshift+0xa4>
 800bc48:	f108 0602 	add.w	r6, r8, #2
 800bc4c:	3e01      	subs	r6, #1
 800bc4e:	4638      	mov	r0, r7
 800bc50:	4621      	mov	r1, r4
 800bc52:	612e      	str	r6, [r5, #16]
 800bc54:	f7ff fde2 	bl	800b81c <_Bfree>
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc62:	3301      	adds	r3, #1
 800bc64:	e7c5      	b.n	800bbf2 <__lshift+0x4a>
 800bc66:	3904      	subs	r1, #4
 800bc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6c:	459c      	cmp	ip, r3
 800bc6e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc72:	d8f9      	bhi.n	800bc68 <__lshift+0xc0>
 800bc74:	e7ea      	b.n	800bc4c <__lshift+0xa4>
 800bc76:	bf00      	nop
 800bc78:	0800ce16 	.word	0x0800ce16
 800bc7c:	0800ce27 	.word	0x0800ce27

0800bc80 <__mcmp>:
 800bc80:	4603      	mov	r3, r0
 800bc82:	690a      	ldr	r2, [r1, #16]
 800bc84:	6900      	ldr	r0, [r0, #16]
 800bc86:	b530      	push	{r4, r5, lr}
 800bc88:	1a80      	subs	r0, r0, r2
 800bc8a:	d10e      	bne.n	800bcaa <__mcmp+0x2a>
 800bc8c:	3314      	adds	r3, #20
 800bc8e:	3114      	adds	r1, #20
 800bc90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bca0:	4295      	cmp	r5, r2
 800bca2:	d003      	beq.n	800bcac <__mcmp+0x2c>
 800bca4:	d205      	bcs.n	800bcb2 <__mcmp+0x32>
 800bca6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcaa:	bd30      	pop	{r4, r5, pc}
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	d3f3      	bcc.n	800bc98 <__mcmp+0x18>
 800bcb0:	e7fb      	b.n	800bcaa <__mcmp+0x2a>
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	e7f9      	b.n	800bcaa <__mcmp+0x2a>
	...

0800bcb8 <__mdiff>:
 800bcb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	4689      	mov	r9, r1
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4648      	mov	r0, r9
 800bcc4:	4614      	mov	r4, r2
 800bcc6:	f7ff ffdb 	bl	800bc80 <__mcmp>
 800bcca:	1e05      	subs	r5, r0, #0
 800bccc:	d112      	bne.n	800bcf4 <__mdiff+0x3c>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff fd63 	bl	800b79c <_Balloc>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	b928      	cbnz	r0, 800bce6 <__mdiff+0x2e>
 800bcda:	f240 2137 	movw	r1, #567	@ 0x237
 800bcde:	4b3e      	ldr	r3, [pc, #248]	@ (800bdd8 <__mdiff+0x120>)
 800bce0:	483e      	ldr	r0, [pc, #248]	@ (800bddc <__mdiff+0x124>)
 800bce2:	f000 fcd1 	bl	800c688 <__assert_func>
 800bce6:	2301      	movs	r3, #1
 800bce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcec:	4610      	mov	r0, r2
 800bcee:	b003      	add	sp, #12
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	bfbc      	itt	lt
 800bcf6:	464b      	movlt	r3, r9
 800bcf8:	46a1      	movlt	r9, r4
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd00:	bfba      	itte	lt
 800bd02:	461c      	movlt	r4, r3
 800bd04:	2501      	movlt	r5, #1
 800bd06:	2500      	movge	r5, #0
 800bd08:	f7ff fd48 	bl	800b79c <_Balloc>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	b918      	cbnz	r0, 800bd18 <__mdiff+0x60>
 800bd10:	f240 2145 	movw	r1, #581	@ 0x245
 800bd14:	4b30      	ldr	r3, [pc, #192]	@ (800bdd8 <__mdiff+0x120>)
 800bd16:	e7e3      	b.n	800bce0 <__mdiff+0x28>
 800bd18:	f100 0b14 	add.w	fp, r0, #20
 800bd1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd20:	f109 0310 	add.w	r3, r9, #16
 800bd24:	60c5      	str	r5, [r0, #12]
 800bd26:	f04f 0c00 	mov.w	ip, #0
 800bd2a:	f109 0514 	add.w	r5, r9, #20
 800bd2e:	46d9      	mov	r9, fp
 800bd30:	6926      	ldr	r6, [r4, #16]
 800bd32:	f104 0e14 	add.w	lr, r4, #20
 800bd36:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd3a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	9b01      	ldr	r3, [sp, #4]
 800bd42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd4a:	b281      	uxth	r1, r0
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	fa1f f38a 	uxth.w	r3, sl
 800bd52:	1a5b      	subs	r3, r3, r1
 800bd54:	0c00      	lsrs	r0, r0, #16
 800bd56:	4463      	add	r3, ip
 800bd58:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd5c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd66:	4576      	cmp	r6, lr
 800bd68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd6c:	f849 3b04 	str.w	r3, [r9], #4
 800bd70:	d8e6      	bhi.n	800bd40 <__mdiff+0x88>
 800bd72:	1b33      	subs	r3, r6, r4
 800bd74:	3b15      	subs	r3, #21
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	3415      	adds	r4, #21
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	42a6      	cmp	r6, r4
 800bd80:	bf38      	it	cc
 800bd82:	2304      	movcc	r3, #4
 800bd84:	441d      	add	r5, r3
 800bd86:	445b      	add	r3, fp
 800bd88:	461e      	mov	r6, r3
 800bd8a:	462c      	mov	r4, r5
 800bd8c:	4544      	cmp	r4, r8
 800bd8e:	d30e      	bcc.n	800bdae <__mdiff+0xf6>
 800bd90:	f108 0103 	add.w	r1, r8, #3
 800bd94:	1b49      	subs	r1, r1, r5
 800bd96:	f021 0103 	bic.w	r1, r1, #3
 800bd9a:	3d03      	subs	r5, #3
 800bd9c:	45a8      	cmp	r8, r5
 800bd9e:	bf38      	it	cc
 800bda0:	2100      	movcc	r1, #0
 800bda2:	440b      	add	r3, r1
 800bda4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bda8:	b199      	cbz	r1, 800bdd2 <__mdiff+0x11a>
 800bdaa:	6117      	str	r7, [r2, #16]
 800bdac:	e79e      	b.n	800bcec <__mdiff+0x34>
 800bdae:	46e6      	mov	lr, ip
 800bdb0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdb4:	fa1f fc81 	uxth.w	ip, r1
 800bdb8:	44f4      	add	ip, lr
 800bdba:	0c08      	lsrs	r0, r1, #16
 800bdbc:	4471      	add	r1, lr
 800bdbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdc2:	b289      	uxth	r1, r1
 800bdc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdcc:	f846 1b04 	str.w	r1, [r6], #4
 800bdd0:	e7dc      	b.n	800bd8c <__mdiff+0xd4>
 800bdd2:	3f01      	subs	r7, #1
 800bdd4:	e7e6      	b.n	800bda4 <__mdiff+0xec>
 800bdd6:	bf00      	nop
 800bdd8:	0800ce16 	.word	0x0800ce16
 800bddc:	0800ce27 	.word	0x0800ce27

0800bde0 <__d2b>:
 800bde0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bde4:	2101      	movs	r1, #1
 800bde6:	4690      	mov	r8, r2
 800bde8:	4699      	mov	r9, r3
 800bdea:	9e08      	ldr	r6, [sp, #32]
 800bdec:	f7ff fcd6 	bl	800b79c <_Balloc>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	b930      	cbnz	r0, 800be02 <__d2b+0x22>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	f240 310f 	movw	r1, #783	@ 0x30f
 800bdfa:	4b23      	ldr	r3, [pc, #140]	@ (800be88 <__d2b+0xa8>)
 800bdfc:	4823      	ldr	r0, [pc, #140]	@ (800be8c <__d2b+0xac>)
 800bdfe:	f000 fc43 	bl	800c688 <__assert_func>
 800be02:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be0a:	b10d      	cbz	r5, 800be10 <__d2b+0x30>
 800be0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	f1b8 0300 	subs.w	r3, r8, #0
 800be16:	d024      	beq.n	800be62 <__d2b+0x82>
 800be18:	4668      	mov	r0, sp
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	f7ff fd85 	bl	800b92a <__lo0bits>
 800be20:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be24:	b1d8      	cbz	r0, 800be5e <__d2b+0x7e>
 800be26:	f1c0 0320 	rsb	r3, r0, #32
 800be2a:	fa02 f303 	lsl.w	r3, r2, r3
 800be2e:	430b      	orrs	r3, r1
 800be30:	40c2      	lsrs	r2, r0
 800be32:	6163      	str	r3, [r4, #20]
 800be34:	9201      	str	r2, [sp, #4]
 800be36:	9b01      	ldr	r3, [sp, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bf0c      	ite	eq
 800be3c:	2201      	moveq	r2, #1
 800be3e:	2202      	movne	r2, #2
 800be40:	61a3      	str	r3, [r4, #24]
 800be42:	6122      	str	r2, [r4, #16]
 800be44:	b1ad      	cbz	r5, 800be72 <__d2b+0x92>
 800be46:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be4a:	4405      	add	r5, r0
 800be4c:	6035      	str	r5, [r6, #0]
 800be4e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be54:	6018      	str	r0, [r3, #0]
 800be56:	4620      	mov	r0, r4
 800be58:	b002      	add	sp, #8
 800be5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800be5e:	6161      	str	r1, [r4, #20]
 800be60:	e7e9      	b.n	800be36 <__d2b+0x56>
 800be62:	a801      	add	r0, sp, #4
 800be64:	f7ff fd61 	bl	800b92a <__lo0bits>
 800be68:	9b01      	ldr	r3, [sp, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	6163      	str	r3, [r4, #20]
 800be6e:	3020      	adds	r0, #32
 800be70:	e7e7      	b.n	800be42 <__d2b+0x62>
 800be72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be7a:	6030      	str	r0, [r6, #0]
 800be7c:	6918      	ldr	r0, [r3, #16]
 800be7e:	f7ff fd35 	bl	800b8ec <__hi0bits>
 800be82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be86:	e7e4      	b.n	800be52 <__d2b+0x72>
 800be88:	0800ce16 	.word	0x0800ce16
 800be8c:	0800ce27 	.word	0x0800ce27

0800be90 <__ssputs_r>:
 800be90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	461f      	mov	r7, r3
 800be96:	688e      	ldr	r6, [r1, #8]
 800be98:	4682      	mov	sl, r0
 800be9a:	42be      	cmp	r6, r7
 800be9c:	460c      	mov	r4, r1
 800be9e:	4690      	mov	r8, r2
 800bea0:	680b      	ldr	r3, [r1, #0]
 800bea2:	d82d      	bhi.n	800bf00 <__ssputs_r+0x70>
 800bea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bea8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800beac:	d026      	beq.n	800befc <__ssputs_r+0x6c>
 800beae:	6965      	ldr	r5, [r4, #20]
 800beb0:	6909      	ldr	r1, [r1, #16]
 800beb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800beb6:	eba3 0901 	sub.w	r9, r3, r1
 800beba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bebe:	1c7b      	adds	r3, r7, #1
 800bec0:	444b      	add	r3, r9
 800bec2:	106d      	asrs	r5, r5, #1
 800bec4:	429d      	cmp	r5, r3
 800bec6:	bf38      	it	cc
 800bec8:	461d      	movcc	r5, r3
 800beca:	0553      	lsls	r3, r2, #21
 800becc:	d527      	bpl.n	800bf1e <__ssputs_r+0x8e>
 800bece:	4629      	mov	r1, r5
 800bed0:	f7ff fbd8 	bl	800b684 <_malloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	b360      	cbz	r0, 800bf32 <__ssputs_r+0xa2>
 800bed8:	464a      	mov	r2, r9
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	f000 fbc6 	bl	800c66c <memcpy>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	6126      	str	r6, [r4, #16]
 800beee:	444e      	add	r6, r9
 800bef0:	6026      	str	r6, [r4, #0]
 800bef2:	463e      	mov	r6, r7
 800bef4:	6165      	str	r5, [r4, #20]
 800bef6:	eba5 0509 	sub.w	r5, r5, r9
 800befa:	60a5      	str	r5, [r4, #8]
 800befc:	42be      	cmp	r6, r7
 800befe:	d900      	bls.n	800bf02 <__ssputs_r+0x72>
 800bf00:	463e      	mov	r6, r7
 800bf02:	4632      	mov	r2, r6
 800bf04:	4641      	mov	r1, r8
 800bf06:	6820      	ldr	r0, [r4, #0]
 800bf08:	f000 fb63 	bl	800c5d2 <memmove>
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	1b9b      	subs	r3, r3, r6
 800bf12:	60a3      	str	r3, [r4, #8]
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	4433      	add	r3, r6
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1e:	462a      	mov	r2, r5
 800bf20:	f000 fbf6 	bl	800c710 <_realloc_r>
 800bf24:	4606      	mov	r6, r0
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d1e0      	bne.n	800beec <__ssputs_r+0x5c>
 800bf2a:	4650      	mov	r0, sl
 800bf2c:	6921      	ldr	r1, [r4, #16]
 800bf2e:	f7ff fb37 	bl	800b5a0 <_free_r>
 800bf32:	230c      	movs	r3, #12
 800bf34:	f8ca 3000 	str.w	r3, [sl]
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	e7e9      	b.n	800bf1a <__ssputs_r+0x8a>
	...

0800bf48 <_svfiprintf_r>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	4698      	mov	r8, r3
 800bf4e:	898b      	ldrh	r3, [r1, #12]
 800bf50:	4607      	mov	r7, r0
 800bf52:	061b      	lsls	r3, r3, #24
 800bf54:	460d      	mov	r5, r1
 800bf56:	4614      	mov	r4, r2
 800bf58:	b09d      	sub	sp, #116	@ 0x74
 800bf5a:	d510      	bpl.n	800bf7e <_svfiprintf_r+0x36>
 800bf5c:	690b      	ldr	r3, [r1, #16]
 800bf5e:	b973      	cbnz	r3, 800bf7e <_svfiprintf_r+0x36>
 800bf60:	2140      	movs	r1, #64	@ 0x40
 800bf62:	f7ff fb8f 	bl	800b684 <_malloc_r>
 800bf66:	6028      	str	r0, [r5, #0]
 800bf68:	6128      	str	r0, [r5, #16]
 800bf6a:	b930      	cbnz	r0, 800bf7a <_svfiprintf_r+0x32>
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	f04f 30ff 	mov.w	r0, #4294967295
 800bf74:	b01d      	add	sp, #116	@ 0x74
 800bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7a:	2340      	movs	r3, #64	@ 0x40
 800bf7c:	616b      	str	r3, [r5, #20]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf82:	2320      	movs	r3, #32
 800bf84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf88:	2330      	movs	r3, #48	@ 0x30
 800bf8a:	f04f 0901 	mov.w	r9, #1
 800bf8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf92:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c12c <_svfiprintf_r+0x1e4>
 800bf96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf9a:	4623      	mov	r3, r4
 800bf9c:	469a      	mov	sl, r3
 800bf9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa2:	b10a      	cbz	r2, 800bfa8 <_svfiprintf_r+0x60>
 800bfa4:	2a25      	cmp	r2, #37	@ 0x25
 800bfa6:	d1f9      	bne.n	800bf9c <_svfiprintf_r+0x54>
 800bfa8:	ebba 0b04 	subs.w	fp, sl, r4
 800bfac:	d00b      	beq.n	800bfc6 <_svfiprintf_r+0x7e>
 800bfae:	465b      	mov	r3, fp
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ff6b 	bl	800be90 <__ssputs_r>
 800bfba:	3001      	adds	r0, #1
 800bfbc:	f000 80a7 	beq.w	800c10e <_svfiprintf_r+0x1c6>
 800bfc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfc2:	445a      	add	r2, fp
 800bfc4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 809f 	beq.w	800c10e <_svfiprintf_r+0x1c6>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfda:	f10a 0a01 	add.w	sl, sl, #1
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfe6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfe8:	4654      	mov	r4, sl
 800bfea:	2205      	movs	r2, #5
 800bfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff0:	484e      	ldr	r0, [pc, #312]	@ (800c12c <_svfiprintf_r+0x1e4>)
 800bff2:	f7fe fc6a 	bl	800a8ca <memchr>
 800bff6:	9a04      	ldr	r2, [sp, #16]
 800bff8:	b9d8      	cbnz	r0, 800c032 <_svfiprintf_r+0xea>
 800bffa:	06d0      	lsls	r0, r2, #27
 800bffc:	bf44      	itt	mi
 800bffe:	2320      	movmi	r3, #32
 800c000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c004:	0711      	lsls	r1, r2, #28
 800c006:	bf44      	itt	mi
 800c008:	232b      	movmi	r3, #43	@ 0x2b
 800c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c00e:	f89a 3000 	ldrb.w	r3, [sl]
 800c012:	2b2a      	cmp	r3, #42	@ 0x2a
 800c014:	d015      	beq.n	800c042 <_svfiprintf_r+0xfa>
 800c016:	4654      	mov	r4, sl
 800c018:	2000      	movs	r0, #0
 800c01a:	f04f 0c0a 	mov.w	ip, #10
 800c01e:	9a07      	ldr	r2, [sp, #28]
 800c020:	4621      	mov	r1, r4
 800c022:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c026:	3b30      	subs	r3, #48	@ 0x30
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d94b      	bls.n	800c0c4 <_svfiprintf_r+0x17c>
 800c02c:	b1b0      	cbz	r0, 800c05c <_svfiprintf_r+0x114>
 800c02e:	9207      	str	r2, [sp, #28]
 800c030:	e014      	b.n	800c05c <_svfiprintf_r+0x114>
 800c032:	eba0 0308 	sub.w	r3, r0, r8
 800c036:	fa09 f303 	lsl.w	r3, r9, r3
 800c03a:	4313      	orrs	r3, r2
 800c03c:	46a2      	mov	sl, r4
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	e7d2      	b.n	800bfe8 <_svfiprintf_r+0xa0>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	1d19      	adds	r1, r3, #4
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	9103      	str	r1, [sp, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bfbb      	ittet	lt
 800c04e:	425b      	neglt	r3, r3
 800c050:	f042 0202 	orrlt.w	r2, r2, #2
 800c054:	9307      	strge	r3, [sp, #28]
 800c056:	9307      	strlt	r3, [sp, #28]
 800c058:	bfb8      	it	lt
 800c05a:	9204      	strlt	r2, [sp, #16]
 800c05c:	7823      	ldrb	r3, [r4, #0]
 800c05e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c060:	d10a      	bne.n	800c078 <_svfiprintf_r+0x130>
 800c062:	7863      	ldrb	r3, [r4, #1]
 800c064:	2b2a      	cmp	r3, #42	@ 0x2a
 800c066:	d132      	bne.n	800c0ce <_svfiprintf_r+0x186>
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	3402      	adds	r4, #2
 800c06c:	1d1a      	adds	r2, r3, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	9203      	str	r2, [sp, #12]
 800c072:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c076:	9305      	str	r3, [sp, #20]
 800c078:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c130 <_svfiprintf_r+0x1e8>
 800c07c:	2203      	movs	r2, #3
 800c07e:	4650      	mov	r0, sl
 800c080:	7821      	ldrb	r1, [r4, #0]
 800c082:	f7fe fc22 	bl	800a8ca <memchr>
 800c086:	b138      	cbz	r0, 800c098 <_svfiprintf_r+0x150>
 800c088:	2240      	movs	r2, #64	@ 0x40
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	eba0 000a 	sub.w	r0, r0, sl
 800c090:	4082      	lsls	r2, r0
 800c092:	4313      	orrs	r3, r2
 800c094:	3401      	adds	r4, #1
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c09c:	2206      	movs	r2, #6
 800c09e:	4825      	ldr	r0, [pc, #148]	@ (800c134 <_svfiprintf_r+0x1ec>)
 800c0a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0a4:	f7fe fc11 	bl	800a8ca <memchr>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d036      	beq.n	800c11a <_svfiprintf_r+0x1d2>
 800c0ac:	4b22      	ldr	r3, [pc, #136]	@ (800c138 <_svfiprintf_r+0x1f0>)
 800c0ae:	bb1b      	cbnz	r3, 800c0f8 <_svfiprintf_r+0x1b0>
 800c0b0:	9b03      	ldr	r3, [sp, #12]
 800c0b2:	3307      	adds	r3, #7
 800c0b4:	f023 0307 	bic.w	r3, r3, #7
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	9303      	str	r3, [sp, #12]
 800c0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0be:	4433      	add	r3, r6
 800c0c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c2:	e76a      	b.n	800bf9a <_svfiprintf_r+0x52>
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0cc:	e7a8      	b.n	800c020 <_svfiprintf_r+0xd8>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f04f 0c0a 	mov.w	ip, #10
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	3401      	adds	r4, #1
 800c0d8:	9305      	str	r3, [sp, #20]
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e0:	3a30      	subs	r2, #48	@ 0x30
 800c0e2:	2a09      	cmp	r2, #9
 800c0e4:	d903      	bls.n	800c0ee <_svfiprintf_r+0x1a6>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0c6      	beq.n	800c078 <_svfiprintf_r+0x130>
 800c0ea:	9105      	str	r1, [sp, #20]
 800c0ec:	e7c4      	b.n	800c078 <_svfiprintf_r+0x130>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0f6:	e7f0      	b.n	800c0da <_svfiprintf_r+0x192>
 800c0f8:	ab03      	add	r3, sp, #12
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	4b0e      	ldr	r3, [pc, #56]	@ (800c13c <_svfiprintf_r+0x1f4>)
 800c102:	a904      	add	r1, sp, #16
 800c104:	f7fd fd52 	bl	8009bac <_printf_float>
 800c108:	1c42      	adds	r2, r0, #1
 800c10a:	4606      	mov	r6, r0
 800c10c:	d1d6      	bne.n	800c0bc <_svfiprintf_r+0x174>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	065b      	lsls	r3, r3, #25
 800c112:	f53f af2d 	bmi.w	800bf70 <_svfiprintf_r+0x28>
 800c116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c118:	e72c      	b.n	800bf74 <_svfiprintf_r+0x2c>
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	462a      	mov	r2, r5
 800c120:	4638      	mov	r0, r7
 800c122:	4b06      	ldr	r3, [pc, #24]	@ (800c13c <_svfiprintf_r+0x1f4>)
 800c124:	a904      	add	r1, sp, #16
 800c126:	f7fd ffdf 	bl	800a0e8 <_printf_i>
 800c12a:	e7ed      	b.n	800c108 <_svfiprintf_r+0x1c0>
 800c12c:	0800ce80 	.word	0x0800ce80
 800c130:	0800ce86 	.word	0x0800ce86
 800c134:	0800ce8a 	.word	0x0800ce8a
 800c138:	08009bad 	.word	0x08009bad
 800c13c:	0800be91 	.word	0x0800be91

0800c140 <__sfputc_r>:
 800c140:	6893      	ldr	r3, [r2, #8]
 800c142:	b410      	push	{r4}
 800c144:	3b01      	subs	r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	6093      	str	r3, [r2, #8]
 800c14a:	da07      	bge.n	800c15c <__sfputc_r+0x1c>
 800c14c:	6994      	ldr	r4, [r2, #24]
 800c14e:	42a3      	cmp	r3, r4
 800c150:	db01      	blt.n	800c156 <__sfputc_r+0x16>
 800c152:	290a      	cmp	r1, #10
 800c154:	d102      	bne.n	800c15c <__sfputc_r+0x1c>
 800c156:	bc10      	pop	{r4}
 800c158:	f7fe ba7d 	b.w	800a656 <__swbuf_r>
 800c15c:	6813      	ldr	r3, [r2, #0]
 800c15e:	1c58      	adds	r0, r3, #1
 800c160:	6010      	str	r0, [r2, #0]
 800c162:	7019      	strb	r1, [r3, #0]
 800c164:	4608      	mov	r0, r1
 800c166:	bc10      	pop	{r4}
 800c168:	4770      	bx	lr

0800c16a <__sfputs_r>:
 800c16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16c:	4606      	mov	r6, r0
 800c16e:	460f      	mov	r7, r1
 800c170:	4614      	mov	r4, r2
 800c172:	18d5      	adds	r5, r2, r3
 800c174:	42ac      	cmp	r4, r5
 800c176:	d101      	bne.n	800c17c <__sfputs_r+0x12>
 800c178:	2000      	movs	r0, #0
 800c17a:	e007      	b.n	800c18c <__sfputs_r+0x22>
 800c17c:	463a      	mov	r2, r7
 800c17e:	4630      	mov	r0, r6
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	f7ff ffdc 	bl	800c140 <__sfputc_r>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d1f3      	bne.n	800c174 <__sfputs_r+0xa>
 800c18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c190 <_vfiprintf_r>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	460d      	mov	r5, r1
 800c196:	4614      	mov	r4, r2
 800c198:	4698      	mov	r8, r3
 800c19a:	4606      	mov	r6, r0
 800c19c:	b09d      	sub	sp, #116	@ 0x74
 800c19e:	b118      	cbz	r0, 800c1a8 <_vfiprintf_r+0x18>
 800c1a0:	6a03      	ldr	r3, [r0, #32]
 800c1a2:	b90b      	cbnz	r3, 800c1a8 <_vfiprintf_r+0x18>
 800c1a4:	f7fe f94a 	bl	800a43c <__sinit>
 800c1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1aa:	07d9      	lsls	r1, r3, #31
 800c1ac:	d405      	bmi.n	800c1ba <_vfiprintf_r+0x2a>
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	059a      	lsls	r2, r3, #22
 800c1b2:	d402      	bmi.n	800c1ba <_vfiprintf_r+0x2a>
 800c1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1b6:	f7fe fb86 	bl	800a8c6 <__retarget_lock_acquire_recursive>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	071b      	lsls	r3, r3, #28
 800c1be:	d501      	bpl.n	800c1c4 <_vfiprintf_r+0x34>
 800c1c0:	692b      	ldr	r3, [r5, #16]
 800c1c2:	b99b      	cbnz	r3, 800c1ec <_vfiprintf_r+0x5c>
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7fe fa84 	bl	800a6d4 <__swsetup_r>
 800c1cc:	b170      	cbz	r0, 800c1ec <_vfiprintf_r+0x5c>
 800c1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1d0:	07dc      	lsls	r4, r3, #31
 800c1d2:	d504      	bpl.n	800c1de <_vfiprintf_r+0x4e>
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d8:	b01d      	add	sp, #116	@ 0x74
 800c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1de:	89ab      	ldrh	r3, [r5, #12]
 800c1e0:	0598      	lsls	r0, r3, #22
 800c1e2:	d4f7      	bmi.n	800c1d4 <_vfiprintf_r+0x44>
 800c1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1e6:	f7fe fb6f 	bl	800a8c8 <__retarget_lock_release_recursive>
 800c1ea:	e7f3      	b.n	800c1d4 <_vfiprintf_r+0x44>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f0:	2320      	movs	r3, #32
 800c1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1f6:	2330      	movs	r3, #48	@ 0x30
 800c1f8:	f04f 0901 	mov.w	r9, #1
 800c1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c200:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c3ac <_vfiprintf_r+0x21c>
 800c204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c208:	4623      	mov	r3, r4
 800c20a:	469a      	mov	sl, r3
 800c20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c210:	b10a      	cbz	r2, 800c216 <_vfiprintf_r+0x86>
 800c212:	2a25      	cmp	r2, #37	@ 0x25
 800c214:	d1f9      	bne.n	800c20a <_vfiprintf_r+0x7a>
 800c216:	ebba 0b04 	subs.w	fp, sl, r4
 800c21a:	d00b      	beq.n	800c234 <_vfiprintf_r+0xa4>
 800c21c:	465b      	mov	r3, fp
 800c21e:	4622      	mov	r2, r4
 800c220:	4629      	mov	r1, r5
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff ffa1 	bl	800c16a <__sfputs_r>
 800c228:	3001      	adds	r0, #1
 800c22a:	f000 80a7 	beq.w	800c37c <_vfiprintf_r+0x1ec>
 800c22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c230:	445a      	add	r2, fp
 800c232:	9209      	str	r2, [sp, #36]	@ 0x24
 800c234:	f89a 3000 	ldrb.w	r3, [sl]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 809f 	beq.w	800c37c <_vfiprintf_r+0x1ec>
 800c23e:	2300      	movs	r3, #0
 800c240:	f04f 32ff 	mov.w	r2, #4294967295
 800c244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c248:	f10a 0a01 	add.w	sl, sl, #1
 800c24c:	9304      	str	r3, [sp, #16]
 800c24e:	9307      	str	r3, [sp, #28]
 800c250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c254:	931a      	str	r3, [sp, #104]	@ 0x68
 800c256:	4654      	mov	r4, sl
 800c258:	2205      	movs	r2, #5
 800c25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25e:	4853      	ldr	r0, [pc, #332]	@ (800c3ac <_vfiprintf_r+0x21c>)
 800c260:	f7fe fb33 	bl	800a8ca <memchr>
 800c264:	9a04      	ldr	r2, [sp, #16]
 800c266:	b9d8      	cbnz	r0, 800c2a0 <_vfiprintf_r+0x110>
 800c268:	06d1      	lsls	r1, r2, #27
 800c26a:	bf44      	itt	mi
 800c26c:	2320      	movmi	r3, #32
 800c26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c272:	0713      	lsls	r3, r2, #28
 800c274:	bf44      	itt	mi
 800c276:	232b      	movmi	r3, #43	@ 0x2b
 800c278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c27c:	f89a 3000 	ldrb.w	r3, [sl]
 800c280:	2b2a      	cmp	r3, #42	@ 0x2a
 800c282:	d015      	beq.n	800c2b0 <_vfiprintf_r+0x120>
 800c284:	4654      	mov	r4, sl
 800c286:	2000      	movs	r0, #0
 800c288:	f04f 0c0a 	mov.w	ip, #10
 800c28c:	9a07      	ldr	r2, [sp, #28]
 800c28e:	4621      	mov	r1, r4
 800c290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c294:	3b30      	subs	r3, #48	@ 0x30
 800c296:	2b09      	cmp	r3, #9
 800c298:	d94b      	bls.n	800c332 <_vfiprintf_r+0x1a2>
 800c29a:	b1b0      	cbz	r0, 800c2ca <_vfiprintf_r+0x13a>
 800c29c:	9207      	str	r2, [sp, #28]
 800c29e:	e014      	b.n	800c2ca <_vfiprintf_r+0x13a>
 800c2a0:	eba0 0308 	sub.w	r3, r0, r8
 800c2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	46a2      	mov	sl, r4
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	e7d2      	b.n	800c256 <_vfiprintf_r+0xc6>
 800c2b0:	9b03      	ldr	r3, [sp, #12]
 800c2b2:	1d19      	adds	r1, r3, #4
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	9103      	str	r1, [sp, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfbb      	ittet	lt
 800c2bc:	425b      	neglt	r3, r3
 800c2be:	f042 0202 	orrlt.w	r2, r2, #2
 800c2c2:	9307      	strge	r3, [sp, #28]
 800c2c4:	9307      	strlt	r3, [sp, #28]
 800c2c6:	bfb8      	it	lt
 800c2c8:	9204      	strlt	r2, [sp, #16]
 800c2ca:	7823      	ldrb	r3, [r4, #0]
 800c2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ce:	d10a      	bne.n	800c2e6 <_vfiprintf_r+0x156>
 800c2d0:	7863      	ldrb	r3, [r4, #1]
 800c2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2d4:	d132      	bne.n	800c33c <_vfiprintf_r+0x1ac>
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	3402      	adds	r4, #2
 800c2da:	1d1a      	adds	r2, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	9203      	str	r2, [sp, #12]
 800c2e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c3b0 <_vfiprintf_r+0x220>
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	7821      	ldrb	r1, [r4, #0]
 800c2f0:	f7fe faeb 	bl	800a8ca <memchr>
 800c2f4:	b138      	cbz	r0, 800c306 <_vfiprintf_r+0x176>
 800c2f6:	2240      	movs	r2, #64	@ 0x40
 800c2f8:	9b04      	ldr	r3, [sp, #16]
 800c2fa:	eba0 000a 	sub.w	r0, r0, sl
 800c2fe:	4082      	lsls	r2, r0
 800c300:	4313      	orrs	r3, r2
 800c302:	3401      	adds	r4, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30a:	2206      	movs	r2, #6
 800c30c:	4829      	ldr	r0, [pc, #164]	@ (800c3b4 <_vfiprintf_r+0x224>)
 800c30e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c312:	f7fe fada 	bl	800a8ca <memchr>
 800c316:	2800      	cmp	r0, #0
 800c318:	d03f      	beq.n	800c39a <_vfiprintf_r+0x20a>
 800c31a:	4b27      	ldr	r3, [pc, #156]	@ (800c3b8 <_vfiprintf_r+0x228>)
 800c31c:	bb1b      	cbnz	r3, 800c366 <_vfiprintf_r+0x1d6>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	3307      	adds	r3, #7
 800c322:	f023 0307 	bic.w	r3, r3, #7
 800c326:	3308      	adds	r3, #8
 800c328:	9303      	str	r3, [sp, #12]
 800c32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32c:	443b      	add	r3, r7
 800c32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c330:	e76a      	b.n	800c208 <_vfiprintf_r+0x78>
 800c332:	460c      	mov	r4, r1
 800c334:	2001      	movs	r0, #1
 800c336:	fb0c 3202 	mla	r2, ip, r2, r3
 800c33a:	e7a8      	b.n	800c28e <_vfiprintf_r+0xfe>
 800c33c:	2300      	movs	r3, #0
 800c33e:	f04f 0c0a 	mov.w	ip, #10
 800c342:	4619      	mov	r1, r3
 800c344:	3401      	adds	r4, #1
 800c346:	9305      	str	r3, [sp, #20]
 800c348:	4620      	mov	r0, r4
 800c34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c34e:	3a30      	subs	r2, #48	@ 0x30
 800c350:	2a09      	cmp	r2, #9
 800c352:	d903      	bls.n	800c35c <_vfiprintf_r+0x1cc>
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0c6      	beq.n	800c2e6 <_vfiprintf_r+0x156>
 800c358:	9105      	str	r1, [sp, #20]
 800c35a:	e7c4      	b.n	800c2e6 <_vfiprintf_r+0x156>
 800c35c:	4604      	mov	r4, r0
 800c35e:	2301      	movs	r3, #1
 800c360:	fb0c 2101 	mla	r1, ip, r1, r2
 800c364:	e7f0      	b.n	800c348 <_vfiprintf_r+0x1b8>
 800c366:	ab03      	add	r3, sp, #12
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	462a      	mov	r2, r5
 800c36c:	4630      	mov	r0, r6
 800c36e:	4b13      	ldr	r3, [pc, #76]	@ (800c3bc <_vfiprintf_r+0x22c>)
 800c370:	a904      	add	r1, sp, #16
 800c372:	f7fd fc1b 	bl	8009bac <_printf_float>
 800c376:	4607      	mov	r7, r0
 800c378:	1c78      	adds	r0, r7, #1
 800c37a:	d1d6      	bne.n	800c32a <_vfiprintf_r+0x19a>
 800c37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c37e:	07d9      	lsls	r1, r3, #31
 800c380:	d405      	bmi.n	800c38e <_vfiprintf_r+0x1fe>
 800c382:	89ab      	ldrh	r3, [r5, #12]
 800c384:	059a      	lsls	r2, r3, #22
 800c386:	d402      	bmi.n	800c38e <_vfiprintf_r+0x1fe>
 800c388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c38a:	f7fe fa9d 	bl	800a8c8 <__retarget_lock_release_recursive>
 800c38e:	89ab      	ldrh	r3, [r5, #12]
 800c390:	065b      	lsls	r3, r3, #25
 800c392:	f53f af1f 	bmi.w	800c1d4 <_vfiprintf_r+0x44>
 800c396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c398:	e71e      	b.n	800c1d8 <_vfiprintf_r+0x48>
 800c39a:	ab03      	add	r3, sp, #12
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	462a      	mov	r2, r5
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <_vfiprintf_r+0x22c>)
 800c3a4:	a904      	add	r1, sp, #16
 800c3a6:	f7fd fe9f 	bl	800a0e8 <_printf_i>
 800c3aa:	e7e4      	b.n	800c376 <_vfiprintf_r+0x1e6>
 800c3ac:	0800ce80 	.word	0x0800ce80
 800c3b0:	0800ce86 	.word	0x0800ce86
 800c3b4:	0800ce8a 	.word	0x0800ce8a
 800c3b8:	08009bad 	.word	0x08009bad
 800c3bc:	0800c16b 	.word	0x0800c16b

0800c3c0 <__sflush_r>:
 800c3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	0716      	lsls	r6, r2, #28
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	d454      	bmi.n	800c478 <__sflush_r+0xb8>
 800c3ce:	684b      	ldr	r3, [r1, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	dc02      	bgt.n	800c3da <__sflush_r+0x1a>
 800c3d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd48      	ble.n	800c46c <__sflush_r+0xac>
 800c3da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3dc:	2e00      	cmp	r6, #0
 800c3de:	d045      	beq.n	800c46c <__sflush_r+0xac>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3e6:	682f      	ldr	r7, [r5, #0]
 800c3e8:	6a21      	ldr	r1, [r4, #32]
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	d030      	beq.n	800c450 <__sflush_r+0x90>
 800c3ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	0759      	lsls	r1, r3, #29
 800c3f4:	d505      	bpl.n	800c402 <__sflush_r+0x42>
 800c3f6:	6863      	ldr	r3, [r4, #4]
 800c3f8:	1ad2      	subs	r2, r2, r3
 800c3fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3fc:	b10b      	cbz	r3, 800c402 <__sflush_r+0x42>
 800c3fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c400:	1ad2      	subs	r2, r2, r3
 800c402:	2300      	movs	r3, #0
 800c404:	4628      	mov	r0, r5
 800c406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c408:	6a21      	ldr	r1, [r4, #32]
 800c40a:	47b0      	blx	r6
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	d106      	bne.n	800c420 <__sflush_r+0x60>
 800c412:	6829      	ldr	r1, [r5, #0]
 800c414:	291d      	cmp	r1, #29
 800c416:	d82b      	bhi.n	800c470 <__sflush_r+0xb0>
 800c418:	4a28      	ldr	r2, [pc, #160]	@ (800c4bc <__sflush_r+0xfc>)
 800c41a:	40ca      	lsrs	r2, r1
 800c41c:	07d6      	lsls	r6, r2, #31
 800c41e:	d527      	bpl.n	800c470 <__sflush_r+0xb0>
 800c420:	2200      	movs	r2, #0
 800c422:	6062      	str	r2, [r4, #4]
 800c424:	6922      	ldr	r2, [r4, #16]
 800c426:	04d9      	lsls	r1, r3, #19
 800c428:	6022      	str	r2, [r4, #0]
 800c42a:	d504      	bpl.n	800c436 <__sflush_r+0x76>
 800c42c:	1c42      	adds	r2, r0, #1
 800c42e:	d101      	bne.n	800c434 <__sflush_r+0x74>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b903      	cbnz	r3, 800c436 <__sflush_r+0x76>
 800c434:	6560      	str	r0, [r4, #84]	@ 0x54
 800c436:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c438:	602f      	str	r7, [r5, #0]
 800c43a:	b1b9      	cbz	r1, 800c46c <__sflush_r+0xac>
 800c43c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c440:	4299      	cmp	r1, r3
 800c442:	d002      	beq.n	800c44a <__sflush_r+0x8a>
 800c444:	4628      	mov	r0, r5
 800c446:	f7ff f8ab 	bl	800b5a0 <_free_r>
 800c44a:	2300      	movs	r3, #0
 800c44c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c44e:	e00d      	b.n	800c46c <__sflush_r+0xac>
 800c450:	2301      	movs	r3, #1
 800c452:	4628      	mov	r0, r5
 800c454:	47b0      	blx	r6
 800c456:	4602      	mov	r2, r0
 800c458:	1c50      	adds	r0, r2, #1
 800c45a:	d1c9      	bne.n	800c3f0 <__sflush_r+0x30>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0c6      	beq.n	800c3f0 <__sflush_r+0x30>
 800c462:	2b1d      	cmp	r3, #29
 800c464:	d001      	beq.n	800c46a <__sflush_r+0xaa>
 800c466:	2b16      	cmp	r3, #22
 800c468:	d11d      	bne.n	800c4a6 <__sflush_r+0xe6>
 800c46a:	602f      	str	r7, [r5, #0]
 800c46c:	2000      	movs	r0, #0
 800c46e:	e021      	b.n	800c4b4 <__sflush_r+0xf4>
 800c470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c474:	b21b      	sxth	r3, r3
 800c476:	e01a      	b.n	800c4ae <__sflush_r+0xee>
 800c478:	690f      	ldr	r7, [r1, #16]
 800c47a:	2f00      	cmp	r7, #0
 800c47c:	d0f6      	beq.n	800c46c <__sflush_r+0xac>
 800c47e:	0793      	lsls	r3, r2, #30
 800c480:	bf18      	it	ne
 800c482:	2300      	movne	r3, #0
 800c484:	680e      	ldr	r6, [r1, #0]
 800c486:	bf08      	it	eq
 800c488:	694b      	ldreq	r3, [r1, #20]
 800c48a:	1bf6      	subs	r6, r6, r7
 800c48c:	600f      	str	r7, [r1, #0]
 800c48e:	608b      	str	r3, [r1, #8]
 800c490:	2e00      	cmp	r6, #0
 800c492:	ddeb      	ble.n	800c46c <__sflush_r+0xac>
 800c494:	4633      	mov	r3, r6
 800c496:	463a      	mov	r2, r7
 800c498:	4628      	mov	r0, r5
 800c49a:	6a21      	ldr	r1, [r4, #32]
 800c49c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c4a0:	47e0      	blx	ip
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	dc07      	bgt.n	800c4b6 <__sflush_r+0xf6>
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b6:	4407      	add	r7, r0
 800c4b8:	1a36      	subs	r6, r6, r0
 800c4ba:	e7e9      	b.n	800c490 <__sflush_r+0xd0>
 800c4bc:	20400001 	.word	0x20400001

0800c4c0 <_fflush_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	690b      	ldr	r3, [r1, #16]
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	b913      	cbnz	r3, 800c4d0 <_fflush_r+0x10>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	b118      	cbz	r0, 800c4da <_fflush_r+0x1a>
 800c4d2:	6a03      	ldr	r3, [r0, #32]
 800c4d4:	b90b      	cbnz	r3, 800c4da <_fflush_r+0x1a>
 800c4d6:	f7fd ffb1 	bl	800a43c <__sinit>
 800c4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0f3      	beq.n	800c4ca <_fflush_r+0xa>
 800c4e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4e4:	07d0      	lsls	r0, r2, #31
 800c4e6:	d404      	bmi.n	800c4f2 <_fflush_r+0x32>
 800c4e8:	0599      	lsls	r1, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_fflush_r+0x32>
 800c4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4ee:	f7fe f9ea 	bl	800a8c6 <__retarget_lock_acquire_recursive>
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	f7ff ff63 	bl	800c3c0 <__sflush_r>
 800c4fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	07da      	lsls	r2, r3, #31
 800c500:	d4e4      	bmi.n	800c4cc <_fflush_r+0xc>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	059b      	lsls	r3, r3, #22
 800c506:	d4e1      	bmi.n	800c4cc <_fflush_r+0xc>
 800c508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c50a:	f7fe f9dd 	bl	800a8c8 <__retarget_lock_release_recursive>
 800c50e:	e7dd      	b.n	800c4cc <_fflush_r+0xc>

0800c510 <__swhatbuf_r>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	460c      	mov	r4, r1
 800c514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c518:	4615      	mov	r5, r2
 800c51a:	2900      	cmp	r1, #0
 800c51c:	461e      	mov	r6, r3
 800c51e:	b096      	sub	sp, #88	@ 0x58
 800c520:	da0c      	bge.n	800c53c <__swhatbuf_r+0x2c>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	2100      	movs	r1, #0
 800c526:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c52a:	bf14      	ite	ne
 800c52c:	2340      	movne	r3, #64	@ 0x40
 800c52e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c532:	2000      	movs	r0, #0
 800c534:	6031      	str	r1, [r6, #0]
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	b016      	add	sp, #88	@ 0x58
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	466a      	mov	r2, sp
 800c53e:	f000 f863 	bl	800c608 <_fstat_r>
 800c542:	2800      	cmp	r0, #0
 800c544:	dbed      	blt.n	800c522 <__swhatbuf_r+0x12>
 800c546:	9901      	ldr	r1, [sp, #4]
 800c548:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c54c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c550:	4259      	negs	r1, r3
 800c552:	4159      	adcs	r1, r3
 800c554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c558:	e7eb      	b.n	800c532 <__swhatbuf_r+0x22>

0800c55a <__smakebuf_r>:
 800c55a:	898b      	ldrh	r3, [r1, #12]
 800c55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c55e:	079d      	lsls	r5, r3, #30
 800c560:	4606      	mov	r6, r0
 800c562:	460c      	mov	r4, r1
 800c564:	d507      	bpl.n	800c576 <__smakebuf_r+0x1c>
 800c566:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	2301      	movs	r3, #1
 800c570:	6163      	str	r3, [r4, #20]
 800c572:	b003      	add	sp, #12
 800c574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c576:	466a      	mov	r2, sp
 800c578:	ab01      	add	r3, sp, #4
 800c57a:	f7ff ffc9 	bl	800c510 <__swhatbuf_r>
 800c57e:	9f00      	ldr	r7, [sp, #0]
 800c580:	4605      	mov	r5, r0
 800c582:	4639      	mov	r1, r7
 800c584:	4630      	mov	r0, r6
 800c586:	f7ff f87d 	bl	800b684 <_malloc_r>
 800c58a:	b948      	cbnz	r0, 800c5a0 <__smakebuf_r+0x46>
 800c58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c590:	059a      	lsls	r2, r3, #22
 800c592:	d4ee      	bmi.n	800c572 <__smakebuf_r+0x18>
 800c594:	f023 0303 	bic.w	r3, r3, #3
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	81a3      	strh	r3, [r4, #12]
 800c59e:	e7e2      	b.n	800c566 <__smakebuf_r+0xc>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	9b01      	ldr	r3, [sp, #4]
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	b15b      	cbz	r3, 800c5ca <__smakebuf_r+0x70>
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b8:	f000 f838 	bl	800c62c <_isatty_r>
 800c5bc:	b128      	cbz	r0, 800c5ca <__smakebuf_r+0x70>
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	f023 0303 	bic.w	r3, r3, #3
 800c5c4:	f043 0301 	orr.w	r3, r3, #1
 800c5c8:	81a3      	strh	r3, [r4, #12]
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	431d      	orrs	r5, r3
 800c5ce:	81a5      	strh	r5, [r4, #12]
 800c5d0:	e7cf      	b.n	800c572 <__smakebuf_r+0x18>

0800c5d2 <memmove>:
 800c5d2:	4288      	cmp	r0, r1
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	eb01 0402 	add.w	r4, r1, r2
 800c5da:	d902      	bls.n	800c5e2 <memmove+0x10>
 800c5dc:	4284      	cmp	r4, r0
 800c5de:	4623      	mov	r3, r4
 800c5e0:	d807      	bhi.n	800c5f2 <memmove+0x20>
 800c5e2:	1e43      	subs	r3, r0, #1
 800c5e4:	42a1      	cmp	r1, r4
 800c5e6:	d008      	beq.n	800c5fa <memmove+0x28>
 800c5e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5f0:	e7f8      	b.n	800c5e4 <memmove+0x12>
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	4402      	add	r2, r0
 800c5f6:	428a      	cmp	r2, r1
 800c5f8:	d100      	bne.n	800c5fc <memmove+0x2a>
 800c5fa:	bd10      	pop	{r4, pc}
 800c5fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c600:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c604:	e7f7      	b.n	800c5f6 <memmove+0x24>
	...

0800c608 <_fstat_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	2300      	movs	r3, #0
 800c60c:	4d06      	ldr	r5, [pc, #24]	@ (800c628 <_fstat_r+0x20>)
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	f7f8 fc59 	bl	8004ecc <_fstat>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d102      	bne.n	800c624 <_fstat_r+0x1c>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b103      	cbz	r3, 800c624 <_fstat_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	bf00      	nop
 800c628:	200007cc 	.word	0x200007cc

0800c62c <_isatty_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	2300      	movs	r3, #0
 800c630:	4d05      	ldr	r5, [pc, #20]	@ (800c648 <_isatty_r+0x1c>)
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7f8 fc57 	bl	8004eea <_isatty>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_isatty_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_isatty_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	200007cc 	.word	0x200007cc

0800c64c <_sbrk_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	2300      	movs	r3, #0
 800c650:	4d05      	ldr	r5, [pc, #20]	@ (800c668 <_sbrk_r+0x1c>)
 800c652:	4604      	mov	r4, r0
 800c654:	4608      	mov	r0, r1
 800c656:	602b      	str	r3, [r5, #0]
 800c658:	f7f8 fc5e 	bl	8004f18 <_sbrk>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_sbrk_r+0x1a>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_sbrk_r+0x1a>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	200007cc 	.word	0x200007cc

0800c66c <memcpy>:
 800c66c:	440a      	add	r2, r1
 800c66e:	4291      	cmp	r1, r2
 800c670:	f100 33ff 	add.w	r3, r0, #4294967295
 800c674:	d100      	bne.n	800c678 <memcpy+0xc>
 800c676:	4770      	bx	lr
 800c678:	b510      	push	{r4, lr}
 800c67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c67e:	4291      	cmp	r1, r2
 800c680:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c684:	d1f9      	bne.n	800c67a <memcpy+0xe>
 800c686:	bd10      	pop	{r4, pc}

0800c688 <__assert_func>:
 800c688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c68a:	4614      	mov	r4, r2
 800c68c:	461a      	mov	r2, r3
 800c68e:	4b09      	ldr	r3, [pc, #36]	@ (800c6b4 <__assert_func+0x2c>)
 800c690:	4605      	mov	r5, r0
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68d8      	ldr	r0, [r3, #12]
 800c696:	b14c      	cbz	r4, 800c6ac <__assert_func+0x24>
 800c698:	4b07      	ldr	r3, [pc, #28]	@ (800c6b8 <__assert_func+0x30>)
 800c69a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c69e:	9100      	str	r1, [sp, #0]
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4906      	ldr	r1, [pc, #24]	@ (800c6bc <__assert_func+0x34>)
 800c6a4:	f000 f870 	bl	800c788 <fiprintf>
 800c6a8:	f000 f880 	bl	800c7ac <abort>
 800c6ac:	4b04      	ldr	r3, [pc, #16]	@ (800c6c0 <__assert_func+0x38>)
 800c6ae:	461c      	mov	r4, r3
 800c6b0:	e7f3      	b.n	800c69a <__assert_func+0x12>
 800c6b2:	bf00      	nop
 800c6b4:	20000074 	.word	0x20000074
 800c6b8:	0800ce9b 	.word	0x0800ce9b
 800c6bc:	0800cea8 	.word	0x0800cea8
 800c6c0:	0800ced6 	.word	0x0800ced6

0800c6c4 <_calloc_r>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c6ca:	b934      	cbnz	r4, 800c6da <_calloc_r+0x16>
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	f7fe ffd9 	bl	800b684 <_malloc_r>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	b928      	cbnz	r0, 800c6e2 <_calloc_r+0x1e>
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
 800c6da:	220c      	movs	r2, #12
 800c6dc:	2600      	movs	r6, #0
 800c6de:	6002      	str	r2, [r0, #0]
 800c6e0:	e7f9      	b.n	800c6d6 <_calloc_r+0x12>
 800c6e2:	462a      	mov	r2, r5
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f7fe f84b 	bl	800a780 <memset>
 800c6ea:	e7f4      	b.n	800c6d6 <_calloc_r+0x12>

0800c6ec <__ascii_mbtowc>:
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	b901      	cbnz	r1, 800c6f2 <__ascii_mbtowc+0x6>
 800c6f0:	a901      	add	r1, sp, #4
 800c6f2:	b142      	cbz	r2, 800c706 <__ascii_mbtowc+0x1a>
 800c6f4:	b14b      	cbz	r3, 800c70a <__ascii_mbtowc+0x1e>
 800c6f6:	7813      	ldrb	r3, [r2, #0]
 800c6f8:	600b      	str	r3, [r1, #0]
 800c6fa:	7812      	ldrb	r2, [r2, #0]
 800c6fc:	1e10      	subs	r0, r2, #0
 800c6fe:	bf18      	it	ne
 800c700:	2001      	movne	r0, #1
 800c702:	b002      	add	sp, #8
 800c704:	4770      	bx	lr
 800c706:	4610      	mov	r0, r2
 800c708:	e7fb      	b.n	800c702 <__ascii_mbtowc+0x16>
 800c70a:	f06f 0001 	mvn.w	r0, #1
 800c70e:	e7f8      	b.n	800c702 <__ascii_mbtowc+0x16>

0800c710 <_realloc_r>:
 800c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c714:	4607      	mov	r7, r0
 800c716:	4614      	mov	r4, r2
 800c718:	460d      	mov	r5, r1
 800c71a:	b921      	cbnz	r1, 800c726 <_realloc_r+0x16>
 800c71c:	4611      	mov	r1, r2
 800c71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c722:	f7fe bfaf 	b.w	800b684 <_malloc_r>
 800c726:	b92a      	cbnz	r2, 800c734 <_realloc_r+0x24>
 800c728:	f7fe ff3a 	bl	800b5a0 <_free_r>
 800c72c:	4625      	mov	r5, r4
 800c72e:	4628      	mov	r0, r5
 800c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c734:	f000 f841 	bl	800c7ba <_malloc_usable_size_r>
 800c738:	4284      	cmp	r4, r0
 800c73a:	4606      	mov	r6, r0
 800c73c:	d802      	bhi.n	800c744 <_realloc_r+0x34>
 800c73e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c742:	d8f4      	bhi.n	800c72e <_realloc_r+0x1e>
 800c744:	4621      	mov	r1, r4
 800c746:	4638      	mov	r0, r7
 800c748:	f7fe ff9c 	bl	800b684 <_malloc_r>
 800c74c:	4680      	mov	r8, r0
 800c74e:	b908      	cbnz	r0, 800c754 <_realloc_r+0x44>
 800c750:	4645      	mov	r5, r8
 800c752:	e7ec      	b.n	800c72e <_realloc_r+0x1e>
 800c754:	42b4      	cmp	r4, r6
 800c756:	4622      	mov	r2, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	bf28      	it	cs
 800c75c:	4632      	movcs	r2, r6
 800c75e:	f7ff ff85 	bl	800c66c <memcpy>
 800c762:	4629      	mov	r1, r5
 800c764:	4638      	mov	r0, r7
 800c766:	f7fe ff1b 	bl	800b5a0 <_free_r>
 800c76a:	e7f1      	b.n	800c750 <_realloc_r+0x40>

0800c76c <__ascii_wctomb>:
 800c76c:	4603      	mov	r3, r0
 800c76e:	4608      	mov	r0, r1
 800c770:	b141      	cbz	r1, 800c784 <__ascii_wctomb+0x18>
 800c772:	2aff      	cmp	r2, #255	@ 0xff
 800c774:	d904      	bls.n	800c780 <__ascii_wctomb+0x14>
 800c776:	228a      	movs	r2, #138	@ 0x8a
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	4770      	bx	lr
 800c780:	2001      	movs	r0, #1
 800c782:	700a      	strb	r2, [r1, #0]
 800c784:	4770      	bx	lr
	...

0800c788 <fiprintf>:
 800c788:	b40e      	push	{r1, r2, r3}
 800c78a:	b503      	push	{r0, r1, lr}
 800c78c:	4601      	mov	r1, r0
 800c78e:	ab03      	add	r3, sp, #12
 800c790:	4805      	ldr	r0, [pc, #20]	@ (800c7a8 <fiprintf+0x20>)
 800c792:	f853 2b04 	ldr.w	r2, [r3], #4
 800c796:	6800      	ldr	r0, [r0, #0]
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	f7ff fcf9 	bl	800c190 <_vfiprintf_r>
 800c79e:	b002      	add	sp, #8
 800c7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a4:	b003      	add	sp, #12
 800c7a6:	4770      	bx	lr
 800c7a8:	20000074 	.word	0x20000074

0800c7ac <abort>:
 800c7ac:	2006      	movs	r0, #6
 800c7ae:	b508      	push	{r3, lr}
 800c7b0:	f000 f834 	bl	800c81c <raise>
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7f8 fb3a 	bl	8004e2e <_exit>

0800c7ba <_malloc_usable_size_r>:
 800c7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7be:	1f18      	subs	r0, r3, #4
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfbc      	itt	lt
 800c7c4:	580b      	ldrlt	r3, [r1, r0]
 800c7c6:	18c0      	addlt	r0, r0, r3
 800c7c8:	4770      	bx	lr

0800c7ca <_raise_r>:
 800c7ca:	291f      	cmp	r1, #31
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	d904      	bls.n	800c7de <_raise_r+0x14>
 800c7d4:	2316      	movs	r3, #22
 800c7d6:	6003      	str	r3, [r0, #0]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	bd38      	pop	{r3, r4, r5, pc}
 800c7de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7e0:	b112      	cbz	r2, 800c7e8 <_raise_r+0x1e>
 800c7e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e6:	b94b      	cbnz	r3, 800c7fc <_raise_r+0x32>
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f000 f831 	bl	800c850 <_getpid_r>
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f8:	f000 b818 	b.w	800c82c <_kill_r>
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d00a      	beq.n	800c816 <_raise_r+0x4c>
 800c800:	1c59      	adds	r1, r3, #1
 800c802:	d103      	bne.n	800c80c <_raise_r+0x42>
 800c804:	2316      	movs	r3, #22
 800c806:	6003      	str	r3, [r0, #0]
 800c808:	2001      	movs	r0, #1
 800c80a:	e7e7      	b.n	800c7dc <_raise_r+0x12>
 800c80c:	2100      	movs	r1, #0
 800c80e:	4620      	mov	r0, r4
 800c810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c814:	4798      	blx	r3
 800c816:	2000      	movs	r0, #0
 800c818:	e7e0      	b.n	800c7dc <_raise_r+0x12>
	...

0800c81c <raise>:
 800c81c:	4b02      	ldr	r3, [pc, #8]	@ (800c828 <raise+0xc>)
 800c81e:	4601      	mov	r1, r0
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	f7ff bfd2 	b.w	800c7ca <_raise_r>
 800c826:	bf00      	nop
 800c828:	20000074 	.word	0x20000074

0800c82c <_kill_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	2300      	movs	r3, #0
 800c830:	4d06      	ldr	r5, [pc, #24]	@ (800c84c <_kill_r+0x20>)
 800c832:	4604      	mov	r4, r0
 800c834:	4608      	mov	r0, r1
 800c836:	4611      	mov	r1, r2
 800c838:	602b      	str	r3, [r5, #0]
 800c83a:	f7f8 fae8 	bl	8004e0e <_kill>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d102      	bne.n	800c848 <_kill_r+0x1c>
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	b103      	cbz	r3, 800c848 <_kill_r+0x1c>
 800c846:	6023      	str	r3, [r4, #0]
 800c848:	bd38      	pop	{r3, r4, r5, pc}
 800c84a:	bf00      	nop
 800c84c:	200007cc 	.word	0x200007cc

0800c850 <_getpid_r>:
 800c850:	f7f8 bad6 	b.w	8004e00 <_getpid>

0800c854 <_init>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr

0800c860 <_fini>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr
