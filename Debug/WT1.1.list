
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000900c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08009118  08009118  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  0000b0b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b44  08009b44  0000b0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  0000ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08009b4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200000b0  08009bfc  0000b0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08009bfc  0000b4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012889  00000000  00000000  0000b0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  0001d962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00020c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0a  00000000  00000000  00021d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dfd  00000000  00000000  00022a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016398  00000000  00000000  0003c85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8b6  00000000  00000000  00052bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e14ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  000e14f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e6410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009100 	.word	0x08009100

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08009100 	.word	0x08009100

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b98c 	b.w	8000a48 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	468e      	mov	lr, r1
 8000750:	4604      	mov	r4, r0
 8000752:	4688      	mov	r8, r1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d14a      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d962      	bls.n	8000824 <__udivmoddi4+0xdc>
 800075e:	fab2 f682 	clz	r6, r2
 8000762:	b14e      	cbz	r6, 8000778 <__udivmoddi4+0x30>
 8000764:	f1c6 0320 	rsb	r3, r6, #32
 8000768:	fa01 f806 	lsl.w	r8, r1, r6
 800076c:	fa20 f303 	lsr.w	r3, r0, r3
 8000770:	40b7      	lsls	r7, r6
 8000772:	ea43 0808 	orr.w	r8, r3, r8
 8000776:	40b4      	lsls	r4, r6
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000780:	fa1f fc87 	uxth.w	ip, r7
 8000784:	fb0e 8811 	mls	r8, lr, r1, r8
 8000788:	fb01 f20c 	mul.w	r2, r1, ip
 800078c:	0c23      	lsrs	r3, r4, #16
 800078e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000792:	429a      	cmp	r2, r3
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0x62>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f101 30ff 	add.w	r0, r1, #4294967295
 800079c:	f080 80eb 	bcs.w	8000976 <__udivmoddi4+0x22e>
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f240 80e8 	bls.w	8000976 <__udivmoddi4+0x22e>
 80007a6:	3902      	subs	r1, #2
 80007a8:	443b      	add	r3, r7
 80007aa:	1a9a      	subs	r2, r3, r2
 80007ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80007b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007b8:	b2a3      	uxth	r3, r4
 80007ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007be:	459c      	cmp	ip, r3
 80007c0:	d909      	bls.n	80007d6 <__udivmoddi4+0x8e>
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	f080 80d7 	bcs.w	800097a <__udivmoddi4+0x232>
 80007cc:	459c      	cmp	ip, r3
 80007ce:	f240 80d4 	bls.w	800097a <__udivmoddi4+0x232>
 80007d2:	443b      	add	r3, r7
 80007d4:	3802      	subs	r0, #2
 80007d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007da:	2100      	movs	r1, #0
 80007dc:	eba3 030c 	sub.w	r3, r3, ip
 80007e0:	b11d      	cbz	r5, 80007ea <__udivmoddi4+0xa2>
 80007e2:	2200      	movs	r2, #0
 80007e4:	40f3      	lsrs	r3, r6
 80007e6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d905      	bls.n	80007fe <__udivmoddi4+0xb6>
 80007f2:	b10d      	cbz	r5, 80007f8 <__udivmoddi4+0xb0>
 80007f4:	e9c5 0100 	strd	r0, r1, [r5]
 80007f8:	2100      	movs	r1, #0
 80007fa:	4608      	mov	r0, r1
 80007fc:	e7f5      	b.n	80007ea <__udivmoddi4+0xa2>
 80007fe:	fab3 f183 	clz	r1, r3
 8000802:	2900      	cmp	r1, #0
 8000804:	d146      	bne.n	8000894 <__udivmoddi4+0x14c>
 8000806:	4573      	cmp	r3, lr
 8000808:	d302      	bcc.n	8000810 <__udivmoddi4+0xc8>
 800080a:	4282      	cmp	r2, r0
 800080c:	f200 8108 	bhi.w	8000a20 <__udivmoddi4+0x2d8>
 8000810:	1a84      	subs	r4, r0, r2
 8000812:	eb6e 0203 	sbc.w	r2, lr, r3
 8000816:	2001      	movs	r0, #1
 8000818:	4690      	mov	r8, r2
 800081a:	2d00      	cmp	r5, #0
 800081c:	d0e5      	beq.n	80007ea <__udivmoddi4+0xa2>
 800081e:	e9c5 4800 	strd	r4, r8, [r5]
 8000822:	e7e2      	b.n	80007ea <__udivmoddi4+0xa2>
 8000824:	2a00      	cmp	r2, #0
 8000826:	f000 8091 	beq.w	800094c <__udivmoddi4+0x204>
 800082a:	fab2 f682 	clz	r6, r2
 800082e:	2e00      	cmp	r6, #0
 8000830:	f040 80a5 	bne.w	800097e <__udivmoddi4+0x236>
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	2101      	movs	r1, #1
 8000838:	0c03      	lsrs	r3, r0, #16
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	b280      	uxth	r0, r0
 8000840:	b2bc      	uxth	r4, r7
 8000842:	fbb2 fcfe 	udiv	ip, r2, lr
 8000846:	fb0e 221c 	mls	r2, lr, ip, r2
 800084a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084e:	fb04 f20c 	mul.w	r2, r4, ip
 8000852:	429a      	cmp	r2, r3
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x11e>
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	f10c 38ff 	add.w	r8, ip, #4294967295
 800085c:	d202      	bcs.n	8000864 <__udivmoddi4+0x11c>
 800085e:	429a      	cmp	r2, r3
 8000860:	f200 80e3 	bhi.w	8000a2a <__udivmoddi4+0x2e2>
 8000864:	46c4      	mov	ip, r8
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	fbb3 f2fe 	udiv	r2, r3, lr
 800086c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000870:	fb02 f404 	mul.w	r4, r2, r4
 8000874:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000878:	429c      	cmp	r4, r3
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x144>
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x142>
 8000884:	429c      	cmp	r4, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2dc>
 800088a:	4602      	mov	r2, r0
 800088c:	1b1b      	subs	r3, r3, r4
 800088e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000892:	e7a5      	b.n	80007e0 <__udivmoddi4+0x98>
 8000894:	f1c1 0620 	rsb	r6, r1, #32
 8000898:	408b      	lsls	r3, r1
 800089a:	fa22 f706 	lsr.w	r7, r2, r6
 800089e:	431f      	orrs	r7, r3
 80008a0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a8:	fbba f8f9 	udiv	r8, sl, r9
 80008ac:	fa0e fe01 	lsl.w	lr, lr, r1
 80008b0:	fa20 f306 	lsr.w	r3, r0, r6
 80008b4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008b8:	fa1f fc87 	uxth.w	ip, r7
 80008bc:	ea43 030e 	orr.w	r3, r3, lr
 80008c0:	fa00 fe01 	lsl.w	lr, r0, r1
 80008c4:	fb08 f00c 	mul.w	r0, r8, ip
 80008c8:	0c1c      	lsrs	r4, r3, #16
 80008ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ce:	42a0      	cmp	r0, r4
 80008d0:	fa02 f201 	lsl.w	r2, r2, r1
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x1a4>
 80008d6:	193c      	adds	r4, r7, r4
 80008d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008dc:	f080 809e 	bcs.w	8000a1c <__udivmoddi4+0x2d4>
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	f240 809b 	bls.w	8000a1c <__udivmoddi4+0x2d4>
 80008e6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ea:	443c      	add	r4, r7
 80008ec:	1a24      	subs	r4, r4, r0
 80008ee:	b298      	uxth	r0, r3
 80008f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f4:	fb09 4413 	mls	r4, r9, r3, r4
 80008f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80008fc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000900:	45a4      	cmp	ip, r4
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1d0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f103 30ff 	add.w	r0, r3, #4294967295
 800090a:	f080 8085 	bcs.w	8000a18 <__udivmoddi4+0x2d0>
 800090e:	45a4      	cmp	ip, r4
 8000910:	f240 8082 	bls.w	8000a18 <__udivmoddi4+0x2d0>
 8000914:	3b02      	subs	r3, #2
 8000916:	443c      	add	r4, r7
 8000918:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800091c:	eba4 040c 	sub.w	r4, r4, ip
 8000920:	fba0 8c02 	umull	r8, ip, r0, r2
 8000924:	4564      	cmp	r4, ip
 8000926:	4643      	mov	r3, r8
 8000928:	46e1      	mov	r9, ip
 800092a:	d364      	bcc.n	80009f6 <__udivmoddi4+0x2ae>
 800092c:	d061      	beq.n	80009f2 <__udivmoddi4+0x2aa>
 800092e:	b15d      	cbz	r5, 8000948 <__udivmoddi4+0x200>
 8000930:	ebbe 0203 	subs.w	r2, lr, r3
 8000934:	eb64 0409 	sbc.w	r4, r4, r9
 8000938:	fa04 f606 	lsl.w	r6, r4, r6
 800093c:	fa22 f301 	lsr.w	r3, r2, r1
 8000940:	431e      	orrs	r6, r3
 8000942:	40cc      	lsrs	r4, r1
 8000944:	e9c5 6400 	strd	r6, r4, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	e74e      	b.n	80007ea <__udivmoddi4+0xa2>
 800094c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000950:	0c01      	lsrs	r1, r0, #16
 8000952:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000956:	b280      	uxth	r0, r0
 8000958:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800095c:	463b      	mov	r3, r7
 800095e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000962:	4638      	mov	r0, r7
 8000964:	463c      	mov	r4, r7
 8000966:	46b8      	mov	r8, r7
 8000968:	46be      	mov	lr, r7
 800096a:	2620      	movs	r6, #32
 800096c:	eba2 0208 	sub.w	r2, r2, r8
 8000970:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000974:	e765      	b.n	8000842 <__udivmoddi4+0xfa>
 8000976:	4601      	mov	r1, r0
 8000978:	e717      	b.n	80007aa <__udivmoddi4+0x62>
 800097a:	4610      	mov	r0, r2
 800097c:	e72b      	b.n	80007d6 <__udivmoddi4+0x8e>
 800097e:	f1c6 0120 	rsb	r1, r6, #32
 8000982:	fa2e fc01 	lsr.w	ip, lr, r1
 8000986:	40b7      	lsls	r7, r6
 8000988:	fa0e fe06 	lsl.w	lr, lr, r6
 800098c:	fa20 f101 	lsr.w	r1, r0, r1
 8000990:	ea41 010e 	orr.w	r1, r1, lr
 8000994:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000998:	fbbc f8fe 	udiv	r8, ip, lr
 800099c:	b2bc      	uxth	r4, r7
 800099e:	fb0e cc18 	mls	ip, lr, r8, ip
 80009a2:	fb08 f904 	mul.w	r9, r8, r4
 80009a6:	0c0a      	lsrs	r2, r1, #16
 80009a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ac:	40b0      	lsls	r0, r6
 80009ae:	4591      	cmp	r9, r2
 80009b0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	d93e      	bls.n	8000a36 <__udivmoddi4+0x2ee>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80009be:	d201      	bcs.n	80009c4 <__udivmoddi4+0x27c>
 80009c0:	4591      	cmp	r9, r2
 80009c2:	d81f      	bhi.n	8000a04 <__udivmoddi4+0x2bc>
 80009c4:	eba2 0209 	sub.w	r2, r2, r9
 80009c8:	fbb2 f9fe 	udiv	r9, r2, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80009d4:	b28a      	uxth	r2, r1
 80009d6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80009da:	4542      	cmp	r2, r8
 80009dc:	d229      	bcs.n	8000a32 <__udivmoddi4+0x2ea>
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	f109 31ff 	add.w	r1, r9, #4294967295
 80009e4:	d2c2      	bcs.n	800096c <__udivmoddi4+0x224>
 80009e6:	4542      	cmp	r2, r8
 80009e8:	d2c0      	bcs.n	800096c <__udivmoddi4+0x224>
 80009ea:	f1a9 0102 	sub.w	r1, r9, #2
 80009ee:	443a      	add	r2, r7
 80009f0:	e7bc      	b.n	800096c <__udivmoddi4+0x224>
 80009f2:	45c6      	cmp	lr, r8
 80009f4:	d29b      	bcs.n	800092e <__udivmoddi4+0x1e6>
 80009f6:	ebb8 0302 	subs.w	r3, r8, r2
 80009fa:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009fe:	3801      	subs	r0, #1
 8000a00:	46e1      	mov	r9, ip
 8000a02:	e794      	b.n	800092e <__udivmoddi4+0x1e6>
 8000a04:	eba7 0909 	sub.w	r9, r7, r9
 8000a08:	444a      	add	r2, r9
 8000a0a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a12:	fb09 f804 	mul.w	r8, r9, r4
 8000a16:	e7db      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e77d      	b.n	8000918 <__udivmoddi4+0x1d0>
 8000a1c:	46d0      	mov	r8, sl
 8000a1e:	e765      	b.n	80008ec <__udivmoddi4+0x1a4>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e6fa      	b.n	800081a <__udivmoddi4+0xd2>
 8000a24:	443b      	add	r3, r7
 8000a26:	3a02      	subs	r2, #2
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x144>
 8000a2a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a2e:	443b      	add	r3, r7
 8000a30:	e719      	b.n	8000866 <__udivmoddi4+0x11e>
 8000a32:	4649      	mov	r1, r9
 8000a34:	e79a      	b.n	800096c <__udivmoddi4+0x224>
 8000a36:	eba2 0209 	sub.w	r2, r2, r9
 8000a3a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a3e:	46c4      	mov	ip, r8
 8000a40:	fb09 f804 	mul.w	r8, r9, r4
 8000a44:	e7c4      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a46:	bf00      	nop

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f003 f8c5 	bl	8003be4 <HAL_ADCEx_Calibration_Start>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <ADC_Init+0x18>
    {
        Error_Handler();
 8000a60:	f001 f8e6 	bl	8001c30 <Error_Handler>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a86:	2306      	movs	r3, #6
 8000a88:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000a8a:	4b88      	ldr	r3, [pc, #544]	@ (8000cac <ADC_ReadAllChannels+0x240>)
 8000a8c:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000a94:	4b86      	ldr	r3, [pc, #536]	@ (8000cb0 <ADC_ReadAllChannels+0x244>)
 8000a96:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a9e:	e0fb      	b.n	8000c98 <ADC_ReadAllChannels+0x22c>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aa4:	4a83      	ldr	r2, [pc, #524]	@ (8000cb4 <ADC_ReadAllChannels+0x248>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f002 ff02 	bl	80038bc <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f002 fd3f 	bl	800353c <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000abe:	210a      	movs	r1, #10
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f002 fde9 	bl	8003698 <HAL_ADC_PollForConversion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80c9 	bne.w	8000c60 <ADC_ReadAllChannels+0x1f4>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000ace:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f002 fee6 	bl	80038a4 <HAL_ADC_GetValue>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fbf6 	bl	80002dc <__aeabi_ui2f>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4971      	ldr	r1, [pc, #452]	@ (8000cb8 <ADC_ReadAllChannels+0x24c>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc49 	bl	800038c <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000b00:	496e      	ldr	r1, [pc, #440]	@ (8000cbc <ADC_ReadAllChannels+0x250>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fcf6 	bl	80004f4 <__aeabi_fdiv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	1da2      	adds	r2, r4, #6
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000b14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3206      	adds	r2, #6
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4614      	mov	r4, r2
 8000b24:	4966      	ldr	r1, [pc, #408]	@ (8000cc0 <ADC_ReadAllChannels+0x254>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fde2 	bl	80006f0 <__aeabi_fcmpge>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <ADC_ReadAllChannels+0xca>
 8000b32:	2300      	movs	r3, #0
 8000b34:	461c      	mov	r4, r3
 8000b36:	b2e2      	uxtb	r2, r4
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000b48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	3206      	adds	r2, #6
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	f7ff fdd4 	bl	8000704 <__aeabi_fcmpgt>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000b62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3206      	adds	r2, #6
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3206      	adds	r2, #6
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6a38      	ldr	r0, [r7, #32]
 8000b8e:	f7ff fda5 	bl	80006dc <__aeabi_fcmple>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d04d      	beq.n	8000c34 <ADC_ReadAllChannels+0x1c8>
            {
                switch (i)
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d875      	bhi.n	8000c8c <ADC_ReadAllChannels+0x220>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ADC_ReadAllChannels+0x13c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000bed 	.word	0x08000bed
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c1d 	.word	0x08000c1d
                {
                    case 0: // IN0
                        sprintf(dataPacketTx, "@10W#"); // Use sprintf to format the string
 8000bbc:	4941      	ldr	r1, [pc, #260]	@ (8000cc4 <ADC_ReadAllChannels+0x258>)
 8000bbe:	4842      	ldr	r0, [pc, #264]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc0:	f007 f90c 	bl	8007ddc <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc6:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bc8:	f002 fade 	bl	8003188 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
                        break;
 8000bd2:	e05c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 1: // IN1
                        sprintf(dataPacketTx, "@30W#");
 8000bd4:	493f      	ldr	r1, [pc, #252]	@ (8000cd4 <ADC_ReadAllChannels+0x268>)
 8000bd6:	483c      	ldr	r0, [pc, #240]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bd8:	f007 f900 	bl	8007ddc <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bdc:	493a      	ldr	r1, [pc, #232]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bde:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000be0:	f002 fad2 	bl	8003188 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
                        break;
 8000bea:	e050      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 2: // IN2
                        sprintf(dataPacketTx, "@70W#");
 8000bec:	493a      	ldr	r1, [pc, #232]	@ (8000cd8 <ADC_ReadAllChannels+0x26c>)
 8000bee:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf0:	f007 f8f4 	bl	8007ddc <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bf4:	4934      	ldr	r1, [pc, #208]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf6:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bf8:	f002 fac6 	bl	8003188 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
                        break;
 8000c02:	e044      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 3: // IN3
                        sprintf(dataPacketTx, "@1:W#");
 8000c04:	4935      	ldr	r1, [pc, #212]	@ (8000cdc <ADC_ReadAllChannels+0x270>)
 8000c06:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c08:	f007 f8e8 	bl	8007ddc <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c0c:	492e      	ldr	r1, [pc, #184]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c10:	f002 faba 	bl	8003188 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
                        break;
 8000c1a:	e038      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 4: // IN4
                        sprintf(dataPacketTx, "@DRY#");
 8000c1c:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <ADC_ReadAllChannels+0x274>)
 8000c1e:	482a      	ldr	r0, [pc, #168]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c20:	f007 f8dc 	bl	8007ddc <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c24:	4928      	ldr	r1, [pc, #160]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c28:	f002 faae 	bl	8003188 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
                        break;
 8000c32:	e02c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000c34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3206      	adds	r2, #6
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	4619      	mov	r1, r3
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f7ff fd5e 	bl	8000704 <__aeabi_fcmpgt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <ADC_ReadAllChannels+0x222>
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <ADC_ReadAllChannels+0x222>
            {
                // If the voltage is below the dry run threshold and the motor is on
                // This part was commented out in the original, keeping it commented for consistency
                // sprintf(dataPacketTx, "@MT0#");
                // UART_TransmitString(&huart1, dataPacketTx);
                motorStatus = 0; // Set motor status to off
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e016      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3206      	adds	r2, #6
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000c8a:	e000      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                        break;
 8000c8c:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	f67f aeff 	bls.w	8000aa0 <ADC_ReadAllChannels+0x34>
        }
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	372c      	adds	r7, #44	@ 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40400000 	.word	0x40400000
 8000cb0:	3dcccccd 	.word	0x3dcccccd
 8000cb4:	08009994 	.word	0x08009994
 8000cb8:	40533333 	.word	0x40533333
 8000cbc:	457ff000 	.word	0x457ff000
 8000cc0:	404ccccd 	.word	0x404ccccd
 8000cc4:	08009118 	.word	0x08009118
 8000cc8:	200000cc 	.word	0x200000cc
 8000ccc:	2000020c 	.word	0x2000020c
 8000cd0:	200002cc 	.word	0x200002cc
 8000cd4:	08009120 	.word	0x08009120
 8000cd8:	08009128 	.word	0x08009128
 8000cdc:	08009130 	.word	0x08009130
 8000ce0:	08009138 	.word	0x08009138

08000ce4 <lcd_send_cmd>:
/** Put this in the src folder **/

extern I2C_HandleTypeDef hi2c2;  // use your I2C handler

void lcd_send_cmd(char cmd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f023 030f 	bic.w	r3, r3, #15
 8000cf4:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	73bb      	strb	r3, [r7, #14]

    // Always keep backlight ON
    data_t[0] = data_u | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f043 030c 	orr.w	r3, r3, #12
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	f043 030c 	orr.w	r3, r3, #12
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	214e      	movs	r1, #78	@ 0x4e
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <lcd_send_cmd+0x5c>)
 8000d32:	f003 fbf3 	bl	800451c <HAL_I2C_Master_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000014c 	.word	0x2000014c

08000d44 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f023 030f 	bic.w	r3, r3, #15
 8000d54:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	73bb      	strb	r3, [r7, #14]

    // Always keep backlight ON
    data_t[0] = data_u | 0x0D | LCD_BACKLIGHT;  // en=1, rs=1
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	f043 030d 	orr.w	r3, r3, #13
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09 | LCD_BACKLIGHT;  // en=0, rs=1
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f043 0309 	orr.w	r3, r3, #9
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D | LCD_BACKLIGHT;  // en=1, rs=1
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	f043 030d 	orr.w	r3, r3, #13
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09 | LCD_BACKLIGHT;  // en=0, rs=1
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	f043 0309 	orr.w	r3, r3, #9
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000d84:	f107 0208 	add.w	r2, r7, #8
 8000d88:	2364      	movs	r3, #100	@ 0x64
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	214e      	movs	r1, #78	@ 0x4e
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <lcd_send_data+0x5c>)
 8000d92:	f003 fbc3 	bl	800451c <HAL_I2C_Master_Transmit>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000014c 	.word	0x2000014c

08000da4 <lcd_put_cur>:
    HAL_Delay(2);       // Wait for clear command to execute
    lcd_send_cmd(0x80); // Set cursor to 0,0
}

void lcd_put_cur(int row, int col)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    switch (row)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <lcd_put_cur+0x18>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <lcd_put_cur+0x22>
 8000dba:	e009      	b.n	8000dd0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Line 1
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc2:	603b      	str	r3, [r7, #0]
            break;
 8000dc4:	e004      	b.n	8000dd0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Line 2
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000dcc:	603b      	str	r3, [r7, #0]
            break;
 8000dce:	bf00      	nop
    }
    lcd_send_cmd(col);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff85 	bl	8000ce4 <lcd_send_cmd>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <lcd_init>:

void lcd_init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // wait >40ms after power-on
 8000de6:	2032      	movs	r0, #50	@ 0x32
 8000de8:	f002 faac 	bl	8003344 <HAL_Delay>

    // 4-bit init sequence
    lcd_send_cmd(0x30);
 8000dec:	2030      	movs	r0, #48	@ 0x30
 8000dee:	f7ff ff79 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(5);
 8000df2:	2005      	movs	r0, #5
 8000df4:	f002 faa6 	bl	8003344 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000df8:	2030      	movs	r0, #48	@ 0x30
 8000dfa:	f7ff ff73 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f002 faa0 	bl	8003344 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000e04:	2030      	movs	r0, #48	@ 0x30
 8000e06:	f7ff ff6d 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f002 fa9a 	bl	8003344 <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8000e10:	2020      	movs	r0, #32
 8000e12:	f7ff ff67 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(10);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f002 fa94 	bl	8003344 <HAL_Delay>

    // Function set: 2-line, 5x8 dots
    lcd_send_cmd(0x28);
 8000e1c:	2028      	movs	r0, #40	@ 0x28
 8000e1e:	f7ff ff61 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f002 fa8e 	bl	8003344 <HAL_Delay>

    // Display OFF
    lcd_send_cmd(0x08);
 8000e28:	2008      	movs	r0, #8
 8000e2a:	f7ff ff5b 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f002 fa88 	bl	8003344 <HAL_Delay>

    // Clear display
    lcd_send_cmd(0x01);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ff55 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(2);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f002 fa82 	bl	8003344 <HAL_Delay>

    // Entry mode set: increment cursor
    lcd_send_cmd(0x06);
 8000e40:	2006      	movs	r0, #6
 8000e42:	f7ff ff4f 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f002 fa7c 	bl	8003344 <HAL_Delay>

    // Display ON, Cursor OFF, Blink OFF
    lcd_send_cmd(0x0C);
 8000e4c:	200c      	movs	r0, #12
 8000e4e:	f7ff ff49 	bl	8000ce4 <lcd_send_cmd>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8000e5e:	e006      	b.n	8000e6e <lcd_send_string+0x18>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff6b 	bl	8000d44 <lcd_send_data>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f4      	bne.n	8000e60 <lcd_send_string+0xa>
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	733b      	strb	r3, [r7, #12]
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea4:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <LoRa_WriteReg+0x50>)
 8000ea6:	f003 f9dd 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000eaa:	f107 010c 	add.w	r1, r7, #12
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <LoRa_WriteReg+0x54>)
 8000eb6:	f005 ffc7 	bl	8006e48 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <LoRa_WriteReg+0x50>)
 8000ec2:	f003 f9cf 	bl	8004264 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	200001b4 	.word	0x200001b4

08000ed8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef6:	480f      	ldr	r0, [pc, #60]	@ (8000f34 <LoRa_ReadReg+0x5c>)
 8000ef8:	f003 f9b4 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000efc:	f107 010f 	add.w	r1, r7, #15
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	2201      	movs	r2, #1
 8000f06:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoRa_ReadReg+0x60>)
 8000f08:	f005 ff9e 	bl	8006e48 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000f0c:	f107 010e 	add.w	r1, r7, #14
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	2201      	movs	r2, #1
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <LoRa_ReadReg+0x60>)
 8000f18:	f006 f8da 	bl	80070d0 <HAL_SPI_Receive>
    NSS_HIGH();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f22:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <LoRa_ReadReg+0x5c>)
 8000f24:	f003 f99e 	bl	8004264 <HAL_GPIO_WritePin>
    return rx;
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40010800 	.word	0x40010800
 8000f38:	200001b4 	.word	0x200001b4

08000f3c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5c:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <LoRa_WriteBuffer+0x5c>)
 8000f5e:	f003 f981 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000f62:	f107 010f 	add.w	r1, r7, #15
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <LoRa_WriteBuffer+0x60>)
 8000f6e:	f005 ff6b 	bl	8006e48 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <LoRa_WriteBuffer+0x60>)
 8000f7e:	f005 ff63 	bl	8006e48 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <LoRa_WriteBuffer+0x5c>)
 8000f8a:	f003 f96b 	bl	8004264 <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	200001b4 	.word	0x200001b4

08000fa0 <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc0:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <LoRa_ReadBuffer+0x5c>)
 8000fc2:	f003 f94f 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000fc6:	f107 010f 	add.w	r1, r7, #15
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	2201      	movs	r2, #1
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <LoRa_ReadBuffer+0x60>)
 8000fd2:	f005 ff39 	bl	8006e48 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4807      	ldr	r0, [pc, #28]	@ (8001000 <LoRa_ReadBuffer+0x60>)
 8000fe2:	f006 f875 	bl	80070d0 <HAL_SPI_Receive>
    NSS_HIGH();
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <LoRa_ReadBuffer+0x5c>)
 8000fee:	f003 f939 	bl	8004264 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010800 	.word	0x40010800
 8001000:	200001b4 	.word	0x200001b4

08001004 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	@ 0x40
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <LoRa_Reset+0x28>)
 800100e:	f003 f929 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001012:	2002      	movs	r0, #2
 8001014:	f002 f996 	bl	8003344 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2140      	movs	r1, #64	@ 0x40
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <LoRa_Reset+0x28>)
 800101e:	f003 f921 	bl	8004264 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f002 f98e 	bl	8003344 <HAL_Delay>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010c00 	.word	0x40010c00

08001030 <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	2000      	movs	r0, #0
 800103c:	460a      	mov	r2, r1
 800103e:	4603      	mov	r3, r0
 8001040:	0b55      	lsrs	r5, r2, #13
 8001042:	04d4      	lsls	r4, r2, #19
 8001044:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <LoRa_SetFrequency+0x78>)
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	4620      	mov	r0, r4
 800104c:	4629      	mov	r1, r5
 800104e:	f7ff fb63 	bl	8000718 <__aeabi_uldivmod>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 800105a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0c02      	lsrs	r2, r0, #16
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	0c0b      	lsrs	r3, r1, #16
 800106e:	b2d3      	uxtb	r3, r2
 8001070:	4619      	mov	r1, r3
 8001072:	2006      	movs	r0, #6
 8001074:	f7ff ff04 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	0a02      	lsrs	r2, r0, #8
 8001086:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800108a:	0a0b      	lsrs	r3, r1, #8
 800108c:	b2d3      	uxtb	r3, r2
 800108e:	4619      	mov	r1, r3
 8001090:	2007      	movs	r0, #7
 8001092:	f7ff fef5 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	4619      	mov	r1, r3
 800109a:	2008      	movs	r0, #8
 800109c:	f7ff fef0 	bl	8000e80 <LoRa_WriteReg>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	01e84800 	.word	0x01e84800

080010ac <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80010b0:	f7ff ffa8 	bl	8001004 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 80010b4:	2100      	movs	r1, #0
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fee2 	bl	8000e80 <LoRa_WriteReg>
    HAL_Delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f002 f941 	bl	8003344 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fedb 	bl	8000e80 <LoRa_WriteReg>
    HAL_Delay(5);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f002 f93a 	bl	8003344 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 80010d0:	4818      	ldr	r0, [pc, #96]	@ (8001134 <LoRa_Init+0x88>)
 80010d2:	f7ff ffad 	bl	8001030 <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80010d6:	218f      	movs	r1, #143	@ 0x8f
 80010d8:	2009      	movs	r0, #9
 80010da:	f7ff fed1 	bl	8000e80 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80010de:	2187      	movs	r1, #135	@ 0x87
 80010e0:	204d      	movs	r0, #77	@ 0x4d
 80010e2:	f7ff fecd 	bl	8000e80 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 80010e6:	2123      	movs	r1, #35	@ 0x23
 80010e8:	200c      	movs	r0, #12
 80010ea:	f7ff fec9 	bl	8000e80 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 80010ee:	2172      	movs	r1, #114	@ 0x72
 80010f0:	201d      	movs	r0, #29
 80010f2:	f7ff fec5 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80010f6:	2174      	movs	r1, #116	@ 0x74
 80010f8:	201e      	movs	r0, #30
 80010fa:	f7ff fec1 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80010fe:	2104      	movs	r1, #4
 8001100:	2026      	movs	r0, #38	@ 0x26
 8001102:	f7ff febd 	bl	8000e80 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 8001106:	2100      	movs	r1, #0
 8001108:	2020      	movs	r0, #32
 800110a:	f7ff feb9 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800110e:	2108      	movs	r1, #8
 8001110:	2021      	movs	r0, #33	@ 0x21
 8001112:	f7ff feb5 	bl	8000e80 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 8001116:	2122      	movs	r1, #34	@ 0x22
 8001118:	2039      	movs	r0, #57	@ 0x39
 800111a:	f7ff feb1 	bl	8000e80 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 800111e:	2100      	movs	r1, #0
 8001120:	2040      	movs	r0, #64	@ 0x40
 8001122:	f7ff fead 	bl	8000e80 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8001126:	21ff      	movs	r1, #255	@ 0xff
 8001128:	2012      	movs	r0, #18
 800112a:	f7ff fea9 	bl	8000e80 <LoRa_WriteReg>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	19cf0e40 	.word	0x19cf0e40

08001138 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 800113c:	2181      	movs	r1, #129	@ 0x81
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fe9e 	bl	8000e80 <LoRa_WriteReg>
    HAL_Delay(2);
 8001144:	2002      	movs	r0, #2
 8001146:	f002 f8fd 	bl	8003344 <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 8001152:	2185      	movs	r1, #133	@ 0x85
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fe93 	bl	8000e80 <LoRa_WriteReg>
    HAL_Delay(2);
 800115a:	2002      	movs	r0, #2
 800115c:	f002 f8f2 	bl	8003344 <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 8001168:	2183      	movs	r1, #131	@ 0x83
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fe88 	bl	8000e80 <LoRa_WriteReg>
    HAL_Delay(2);
 8001170:	2002      	movs	r0, #2
 8001172:	f002 f8e7 	bl	8003344 <HAL_Delay>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 8001186:	f7ff ffd7 	bl	8001138 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 800118a:	2100      	movs	r1, #0
 800118c:	200e      	movs	r0, #14
 800118e:	f7ff fe77 	bl	8000e80 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8001192:	2100      	movs	r1, #0
 8001194:	200d      	movs	r0, #13
 8001196:	f7ff fe73 	bl	8000e80 <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	461a      	mov	r2, r3
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fecb 	bl	8000f3c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	4619      	mov	r1, r3
 80011aa:	2022      	movs	r0, #34	@ 0x22
 80011ac:	f7ff fe68 	bl	8000e80 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80011b0:	21ff      	movs	r1, #255	@ 0xff
 80011b2:	2012      	movs	r0, #18
 80011b4:	f7ff fe64 	bl	8000e80 <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 80011b8:	f7ff ffd4 	bl	8001164 <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 80011bc:	f002 f8b8 	bl	8003330 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80011c2:	e00a      	b.n	80011da <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 80011c4:	f002 f8b4 	bl	8003330 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011d2:	d80b      	bhi.n	80011ec <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f002 f8b5 	bl	8003344 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80011da:	2012      	movs	r0, #18
 80011dc:	f7ff fe7c 	bl	8000ed8 <LoRa_ReadReg>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ec      	beq.n	80011c4 <LoRa_SendPacket+0x4a>
 80011ea:	e000      	b.n	80011ee <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 80011ec:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 80011ee:	2108      	movs	r1, #8
 80011f0:	2012      	movs	r0, #18
 80011f2:	f7ff fe45 	bl	8000e80 <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 80011f6:	f7ff ffaa 	bl	800114e <LoRa_SetRxContinuous>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 800120a:	2012      	movs	r0, #18
 800120c:	f7ff fe64 	bl	8000ed8 <LoRa_ReadReg>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d025      	beq.n	800126a <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f003 0320 	and.w	r3, r3, #32
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 8001228:	21ff      	movs	r1, #255	@ 0xff
 800122a:	2012      	movs	r0, #18
 800122c:	f7ff fe28 	bl	8000e80 <LoRa_WriteReg>
            return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e01b      	b.n	800126c <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 8001234:	2013      	movs	r0, #19
 8001236:	f7ff fe4f 	bl	8000ed8 <LoRa_ReadReg>
 800123a:	4603      	mov	r3, r0
 800123c:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 800123e:	2010      	movs	r0, #16
 8001240:	f7ff fe4a 	bl	8000ed8 <LoRa_ReadReg>
 8001244:	4603      	mov	r3, r0
 8001246:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	4619      	mov	r1, r3
 800124c:	200d      	movs	r0, #13
 800124e:	f7ff fe17 	bl	8000e80 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	461a      	mov	r2, r3
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fea1 	bl	8000fa0 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 800125e:	21ff      	movs	r1, #255	@ 0xff
 8001260:	2012      	movs	r0, #18
 8001262:	f7ff fe0d 	bl	8000e80 <LoRa_WriteReg>
        return nb;
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	e000      	b.n	800126c <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b098      	sub	sp, #96	@ 0x60
 8001278:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 800127a:	4bb0      	ldr	r3, [pc, #704]	@ (800153c <LoRa_Task+0x2c8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <LoRa_Task+0x16>
 8001282:	4bae      	ldr	r3, [pc, #696]	@ (800153c <LoRa_Task+0x2c8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d105      	bne.n	8001296 <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 800128a:	f7ff ff60 	bl	800114e <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 800128e:	48ac      	ldr	r0, [pc, #688]	@ (8001540 <LoRa_Task+0x2cc>)
 8001290:	f000 f9e8 	bl	8001664 <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001294:	e004      	b.n	80012a0 <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 8001296:	f7ff ff4f 	bl	8001138 <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 800129a:	48aa      	ldr	r0, [pc, #680]	@ (8001544 <LoRa_Task+0x2d0>)
 800129c:	f000 f9e2 	bl	8001664 <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 80012a0:	2042      	movs	r0, #66	@ 0x42
 80012a2:	f7ff fe19 	bl	8000ed8 <LoRa_ReadReg>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 80012ac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d012      	beq.n	80012da <LoRa_Task+0x66>
        z = 1;
 80012b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001548 <LoRa_Task+0x2d4>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 80012ba:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80012be:	463b      	mov	r3, r7
 80012c0:	49a2      	ldr	r1, [pc, #648]	@ (800154c <LoRa_Task+0x2d8>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 fd8a 	bl	8007ddc <siprintf>
        Debug_Print(errMsg);
 80012c8:	463b      	mov	r3, r7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f9ca 	bl	8001664 <Debug_Print>
        HAL_Delay(2000);
 80012d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012d4:	f002 f836 	bl	8003344 <HAL_Delay>
 80012d8:	e188      	b.n	80015ec <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 80012da:	4b98      	ldr	r3, [pc, #608]	@ (800153c <LoRa_Task+0x2c8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	f000 80c1 	beq.w	8001466 <LoRa_Task+0x1f2>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	f300 8179 	bgt.w	80015dc <LoRa_Task+0x368>
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d002      	beq.n	80012f4 <LoRa_Task+0x80>
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d01a      	beq.n	8001328 <LoRa_Task+0xb4>
 80012f2:	e173      	b.n	80015dc <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 80012f4:	4896      	ldr	r0, [pc, #600]	@ (8001550 <LoRa_Task+0x2dc>)
 80012f6:	f000 f9b5 	bl	8001664 <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 80012fa:	4a96      	ldr	r2, [pc, #600]	@ (8001554 <LoRa_Task+0x2e0>)
 80012fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001300:	ca07      	ldmia	r2, {r0, r1, r2}
 8001302:	c303      	stmia	r3!, {r0, r1}
 8001304:	701a      	strb	r2, [r3, #0]
            z = 5;
 8001306:	4b90      	ldr	r3, [pc, #576]	@ (8001548 <LoRa_Task+0x2d4>)
 8001308:	2205      	movs	r2, #5
 800130a:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 800130c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001310:	2108      	movs	r1, #8
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff31 	bl	800117a <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 8001318:	488f      	ldr	r0, [pc, #572]	@ (8001558 <LoRa_Task+0x2e4>)
 800131a:	f000 f9a3 	bl	8001664 <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 800131e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001322:	f002 f80f 	bl	8003344 <HAL_Delay>
            break;
 8001326:	e161      	b.n	80015ec <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 8001328:	488c      	ldr	r0, [pc, #560]	@ (800155c <LoRa_Task+0x2e8>)
 800132a:	f000 f99b 	bl	8001664 <Debug_Print>
            connectionStatus = 0; // Reset connection status
 800132e:	4b8c      	ldr	r3, [pc, #560]	@ (8001560 <LoRa_Task+0x2ec>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8001334:	2300      	movs	r3, #0
 8001336:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001338:	e038      	b.n	80013ac <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 800133a:	488a      	ldr	r0, [pc, #552]	@ (8001564 <LoRa_Task+0x2f0>)
 800133c:	f7ff ff61 	bl	8001202 <LoRa_ReceivePacket>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 8001346:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800134a:	2b00      	cmp	r3, #0
 800134c:	d028      	beq.n	80013a0 <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 800134e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001352:	4a84      	ldr	r2, [pc, #528]	@ (8001564 <LoRa_Task+0x2f0>)
 8001354:	2100      	movs	r1, #0
 8001356:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 8001358:	463b      	mov	r3, r7
 800135a:	4a82      	ldr	r2, [pc, #520]	@ (8001564 <LoRa_Task+0x2f0>)
 800135c:	4982      	ldr	r1, [pc, #520]	@ (8001568 <LoRa_Task+0x2f4>)
 800135e:	4618      	mov	r0, r3
 8001360:	f006 fd3c 	bl	8007ddc <siprintf>
                    Debug_Print(dbg_rx);
 8001364:	463b      	mov	r3, r7
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f97c 	bl	8001664 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 800136c:	2204      	movs	r2, #4
 800136e:	497f      	ldr	r1, [pc, #508]	@ (800156c <LoRa_Task+0x2f8>)
 8001370:	487c      	ldr	r0, [pc, #496]	@ (8001564 <LoRa_Task+0x2f0>)
 8001372:	f006 fd8b 	bl	8007e8c <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d111      	bne.n	80013a0 <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 800137c:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <LoRa_Task+0x2fc>)
 800137e:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8001380:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001384:	2103      	movs	r1, #3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fef7 	bl	800117a <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 800138c:	4879      	ldr	r0, [pc, #484]	@ (8001574 <LoRa_Task+0x300>)
 800138e:	f000 f969 	bl	8001664 <Debug_Print>

                        connectionStatus = 1;
 8001392:	4b73      	ldr	r3, [pc, #460]	@ (8001560 <LoRa_Task+0x2ec>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 8001398:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <LoRa_Task+0x2d4>)
 800139a:	2206      	movs	r2, #6
 800139c:	701a      	strb	r2, [r3, #0]
                        break;
 800139e:	e008      	b.n	80013b2 <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 80013a0:	2019      	movs	r0, #25
 80013a2:	f001 ffcf 	bl	8003344 <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 80013a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a8:	3301      	adds	r3, #1
 80013aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ae:	2b27      	cmp	r3, #39	@ 0x27
 80013b0:	ddc3      	ble.n	800133a <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 80013b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001560 <LoRa_Task+0x2ec>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10a      	bne.n	80013d0 <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 80013ba:	486f      	ldr	r0, [pc, #444]	@ (8001578 <LoRa_Task+0x304>)
 80013bc:	f000 f952 	bl	8001664 <Debug_Print>
                z = 7;
 80013c0:	4b61      	ldr	r3, [pc, #388]	@ (8001548 <LoRa_Task+0x2d4>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 80013c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ca:	f001 ffbb 	bl	8003344 <HAL_Delay>
 80013ce:	e046      	b.n	800145e <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 80013d0:	486a      	ldr	r0, [pc, #424]	@ (800157c <LoRa_Task+0x308>)
 80013d2:	f000 f947 	bl	8001664 <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 80013d6:	4b62      	ldr	r3, [pc, #392]	@ (8001560 <LoRa_Task+0x2ec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 80013dc:	2300      	movs	r3, #0
 80013de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013e0:	e030      	b.n	8001444 <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 80013e2:	4860      	ldr	r0, [pc, #384]	@ (8001564 <LoRa_Task+0x2f0>)
 80013e4:	f7ff ff0d 	bl	8001202 <LoRa_ReceivePacket>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 80013ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d020      	beq.n	8001438 <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 80013f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <LoRa_Task+0x2f0>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 8001400:	463b      	mov	r3, r7
 8001402:	4a58      	ldr	r2, [pc, #352]	@ (8001564 <LoRa_Task+0x2f0>)
 8001404:	495e      	ldr	r1, [pc, #376]	@ (8001580 <LoRa_Task+0x30c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f006 fce8 	bl	8007ddc <siprintf>
                        Debug_Print(dbg_rx2);
 800140c:	463b      	mov	r3, r7
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f928 	bl	8001664 <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 8001414:	2205      	movs	r2, #5
 8001416:	495b      	ldr	r1, [pc, #364]	@ (8001584 <LoRa_Task+0x310>)
 8001418:	4852      	ldr	r0, [pc, #328]	@ (8001564 <LoRa_Task+0x2f0>)
 800141a:	f006 fd37 	bl	8007e8c <strncmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 8001424:	4858      	ldr	r0, [pc, #352]	@ (8001588 <LoRa_Task+0x314>)
 8001426:	f000 f91d 	bl	8001664 <Debug_Print>
                            connectionStatus = 1;
 800142a:	4b4d      	ldr	r3, [pc, #308]	@ (8001560 <LoRa_Task+0x2ec>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 8001430:	4b45      	ldr	r3, [pc, #276]	@ (8001548 <LoRa_Task+0x2d4>)
 8001432:	2208      	movs	r2, #8
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e008      	b.n	800144a <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 8001438:	2019      	movs	r0, #25
 800143a:	f001 ff83 	bl	8003344 <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 800143e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001440:	3301      	adds	r3, #1
 8001442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001446:	2b27      	cmp	r3, #39	@ 0x27
 8001448:	ddcb      	ble.n	80013e2 <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 800144a:	4b45      	ldr	r3, [pc, #276]	@ (8001560 <LoRa_Task+0x2ec>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 8001452:	484e      	ldr	r0, [pc, #312]	@ (800158c <LoRa_Task+0x318>)
 8001454:	f000 f906 	bl	8001664 <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 8001458:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <LoRa_Task+0x2d4>)
 800145a:	2209      	movs	r2, #9
 800145c:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 800145e:	2064      	movs	r0, #100	@ 0x64
 8001460:	f001 ff70 	bl	8003344 <HAL_Delay>
            break;
 8001464:	e0c2      	b.n	80015ec <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 8001466:	484a      	ldr	r0, [pc, #296]	@ (8001590 <LoRa_Task+0x31c>)
 8001468:	f000 f8fc 	bl	8001664 <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 800146c:	483d      	ldr	r0, [pc, #244]	@ (8001564 <LoRa_Task+0x2f0>)
 800146e:	f7ff fec8 	bl	8001202 <LoRa_ReceivePacket>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 8001478:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 8001480:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001484:	4a37      	ldr	r2, [pc, #220]	@ (8001564 <LoRa_Task+0x2f0>)
 8001486:	2100      	movs	r1, #0
 8001488:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 800148a:	463b      	mov	r3, r7
 800148c:	4a35      	ldr	r2, [pc, #212]	@ (8001564 <LoRa_Task+0x2f0>)
 800148e:	4936      	ldr	r1, [pc, #216]	@ (8001568 <LoRa_Task+0x2f4>)
 8001490:	4618      	mov	r0, r3
 8001492:	f006 fca3 	bl	8007ddc <siprintf>
                Debug_Print(dbg_rx_tr);
 8001496:	463b      	mov	r3, r7
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f8e3 	bl	8001664 <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 800149e:	2204      	movs	r2, #4
 80014a0:	4932      	ldr	r1, [pc, #200]	@ (800156c <LoRa_Task+0x2f8>)
 80014a2:	4830      	ldr	r0, [pc, #192]	@ (8001564 <LoRa_Task+0x2f0>)
 80014a4:	f006 fcf2 	bl	8007e8c <strncmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 80014ae:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <LoRa_Task+0x2fc>)
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 80014b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014b6:	2103      	movs	r1, #3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe5e 	bl	800117a <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <LoRa_Task+0x300>)
 80014c0:	f000 f8d0 	bl	8001664 <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 80014c4:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <LoRa_Task+0x320>)
 80014c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 80014ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014d2:	2104      	movs	r1, #4
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe50 	bl	800117a <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 80014da:	482f      	ldr	r0, [pc, #188]	@ (8001598 <LoRa_Task+0x324>)
 80014dc:	f000 f8c2 	bl	8001664 <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <LoRa_Task+0x2ec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 80014e6:	2300      	movs	r3, #0
 80014e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80014ea:	e061      	b.n	80015b0 <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80014ec:	481d      	ldr	r0, [pc, #116]	@ (8001564 <LoRa_Task+0x2f0>)
 80014ee:	f7ff fe88 	bl	8001202 <LoRa_ReceivePacket>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 80014f8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d051      	beq.n	80015a4 <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 8001500:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001504:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <LoRa_Task+0x2f0>)
 8001506:	2100      	movs	r1, #0
 8001508:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 800150a:	463b      	mov	r3, r7
 800150c:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <LoRa_Task+0x2f0>)
 800150e:	4923      	ldr	r1, [pc, #140]	@ (800159c <LoRa_Task+0x328>)
 8001510:	4618      	mov	r0, r3
 8001512:	f006 fc63 	bl	8007ddc <siprintf>
                    Debug_Print(dbg_ack);
 8001516:	463b      	mov	r3, r7
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f8a3 	bl	8001664 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 800151e:	2203      	movs	r2, #3
 8001520:	491f      	ldr	r1, [pc, #124]	@ (80015a0 <LoRa_Task+0x32c>)
 8001522:	4810      	ldr	r0, [pc, #64]	@ (8001564 <LoRa_Task+0x2f0>)
 8001524:	f006 fcb2 	bl	8007e8c <strncmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d13a      	bne.n	80015a4 <LoRa_Task+0x330>
                        connectionStatus = 1;
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <LoRa_Task+0x2ec>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
                        z = 3;
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <LoRa_Task+0x2d4>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e03c      	b.n	80015b6 <LoRa_Task+0x342>
 800153c:	20000000 	.word	0x20000000
 8001540:	08009140 	.word	0x08009140
 8001544:	08009164 	.word	0x08009164
 8001548:	200000f8 	.word	0x200000f8
 800154c:	08009180 	.word	0x08009180
 8001550:	080091a4 	.word	0x080091a4
 8001554:	0800934c 	.word	0x0800934c
 8001558:	080091c0 	.word	0x080091c0
 800155c:	080091d4 	.word	0x080091d4
 8001560:	200000f9 	.word	0x200000f9
 8001564:	200000d8 	.word	0x200000d8
 8001568:	080091ec 	.word	0x080091ec
 800156c:	080091fc 	.word	0x080091fc
 8001570:	004b4341 	.word	0x004b4341
 8001574:	08009204 	.word	0x08009204
 8001578:	08009210 	.word	0x08009210
 800157c:	08009238 	.word	0x08009238
 8001580:	08009250 	.word	0x08009250
 8001584:	08009264 	.word	0x08009264
 8001588:	0800926c 	.word	0x0800926c
 800158c:	080092a0 	.word	0x080092a0
 8001590:	080092c0 	.word	0x080092c0
 8001594:	474e4950 	.word	0x474e4950
 8001598:	080092dc 	.word	0x080092dc
 800159c:	080092ec 	.word	0x080092ec
 80015a0:	08009308 	.word	0x08009308
                        break;
                    }
                }
                HAL_Delay(25);
 80015a4:	2019      	movs	r0, #25
 80015a6:	f001 fecd 	bl	8003344 <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 80015aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ac:	3301      	adds	r3, #1
 80015ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80015b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b2:	2b13      	cmp	r3, #19
 80015b4:	dd9a      	ble.n	80014ec <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <LoRa_Task+0x380>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <LoRa_Task+0x384>)
 80015c0:	f000 f850 	bl	8001664 <Debug_Print>
                z = 4;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <LoRa_Task+0x388>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e002      	b.n	80015d2 <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoRa_Task+0x38c>)
 80015ce:	f000 f849 	bl	8001664 <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 80015d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d6:	f001 feb5 	bl	8003344 <HAL_Delay>
            break;
 80015da:	e007      	b.n	80015ec <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <LoRa_Task+0x390>)
 80015de:	f000 f841 	bl	8001664 <Debug_Print>
            HAL_Delay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e6:	f001 fead 	bl	8003344 <HAL_Delay>
            break;
 80015ea:	bf00      	nop
    }
}
 80015ec:	3760      	adds	r7, #96	@ 0x60
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000f9 	.word	0x200000f9
 80015f8:	0800930c 	.word	0x0800930c
 80015fc:	200000f8 	.word	0x200000f8
 8001600:	08009320 	.word	0x08009320
 8001604:	08009334 	.word	0x08009334

08001608 <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i < 128; i++) {
 800160e:	2301      	movs	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e017      	b.n	8001644 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (i << 1), 2, 10) == HAL_OK) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	b29b      	uxth	r3, r3
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	b299      	uxth	r1, r3
 800161c:	230a      	movs	r3, #10
 800161e:	2202      	movs	r2, #2
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <I2C_Scan+0x50>)
 8001622:	f003 faed 	bl	8004c00 <HAL_I2C_IsDeviceReady>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <I2C_Scan+0x36>
            sprintf(buf, "Found device at 0x%02X\r\n", i);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	461a      	mov	r2, r3
 8001630:	490a      	ldr	r1, [pc, #40]	@ (800165c <I2C_Scan+0x54>)
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <I2C_Scan+0x58>)
 8001634:	f006 fbd2 	bl	8007ddc <siprintf>
            Debug_Print(buf);
 8001638:	4809      	ldr	r0, [pc, #36]	@ (8001660 <I2C_Scan+0x58>)
 800163a:	f000 f813 	bl	8001664 <Debug_Print>
    for (uint8_t i = 1; i < 128; i++) {
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3301      	adds	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	dae3      	bge.n	8001614 <I2C_Scan+0xc>
        }
    }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000014c 	.word	0x2000014c
 800165c:	08009358 	.word	0x08009358
 8001660:	200000fc 	.word	0x200000fc

08001664 <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4803      	ldr	r0, [pc, #12]	@ (800167c <Debug_Print+0x18>)
 8001670:	f001 fd8a 	bl	8003188 <UART_TransmitString>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000020c 	.word	0x2000020c

08001680 <ProcessUartCommand>:

// Function to process received UART commands
void ProcessUartCommand(const char* command) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    // Example processing:
    if (strcmp(command, "@MOTOR_ON#") == 0) {
 8001688:	490f      	ldr	r1, [pc, #60]	@ (80016c8 <ProcessUartCommand+0x48>)
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fd5e 	bl	800014c <strcmp>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <ProcessUartCommand+0x24>
        // Turn motor on logic
        Debug_Print("Received command: MOTOR ON\r\n");
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <ProcessUartCommand+0x4c>)
 8001698:	f7ff ffe4 	bl	8001664 <Debug_Print>
        motorStatus = 1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <ProcessUartCommand+0x50>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
        // Turn motor off logic
        Debug_Print("Received command: MOTOR OFF\r\n");
        motorStatus = 0;
    }
    // Add more command processing as needed
}
 80016a2:	e00c      	b.n	80016be <ProcessUartCommand+0x3e>
    } else if (strcmp(command, "@MOTOR_OFF#") == 0) {
 80016a4:	490b      	ldr	r1, [pc, #44]	@ (80016d4 <ProcessUartCommand+0x54>)
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7fe fd50 	bl	800014c <strcmp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <ProcessUartCommand+0x3e>
        Debug_Print("Received command: MOTOR OFF\r\n");
 80016b2:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <ProcessUartCommand+0x58>)
 80016b4:	f7ff ffd6 	bl	8001664 <Debug_Print>
        motorStatus = 0;
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <ProcessUartCommand+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08009374 	.word	0x08009374
 80016cc:	08009380 	.word	0x08009380
 80016d0:	200002cc 	.word	0x200002cc
 80016d4:	080093a0 	.word	0x080093a0
 80016d8:	080093ac 	.word	0x080093ac

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ae      	sub	sp, #184	@ 0xb8
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e2:	f001 fdcd 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e6:	f000 f88f 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ea:	f000 fa1b 	bl	8001b24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016ee:	f000 f8e9 	bl	80018c4 <MX_ADC1_Init>
  MX_RTC_Init();
 80016f2:	f000 f953 	bl	800199c <MX_RTC_Init>
  MX_SPI1_Init();
 80016f6:	f000 f9b5 	bl	8001a64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016fa:	f000 f9e9 	bl	8001ad0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80016fe:	f000 f91f 	bl	8001940 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001702:	f7ff fb6e 	bl	8000de2 <lcd_init>
  ADC_Init(&hadc1);
 8001706:	4835      	ldr	r0, [pc, #212]	@ (80017dc <main+0x100>)
 8001708:	f7ff f9a0 	bl	8000a4c <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 800170c:	f7ff fcce 	bl	80010ac <LoRa_Init>
  I2C_Scan();
 8001710:	f7ff ff7a 	bl	8001608 <I2C_Scan>

  UART_Init(); // Initialize UART reception (starts the first IT)
 8001714:	f001 fd1a 	bl	800314c <UART_Init>

  Debug_Print("System Initialized\r\n");
 8001718:	4831      	ldr	r0, [pc, #196]	@ (80017e0 <main+0x104>)
 800171a:	f7ff ffa3 	bl	8001664 <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 800171e:	201d      	movs	r0, #29
 8001720:	f7ff fbda 	bl	8000ed8 <LoRa_ReadReg>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 800172a:	201e      	movs	r0, #30
 800172c:	f7ff fbd4 	bl	8000ed8 <LoRa_ReadReg>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  char dbg[50];

  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 8001736:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800173a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800173e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8001742:	4928      	ldr	r1, [pc, #160]	@ (80017e4 <main+0x108>)
 8001744:	f006 fb4a 	bl	8007ddc <siprintf>
  Debug_Print(dbg);
 8001748:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff89 	bl	8001664 <Debug_Print>
  if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDRESS, 2, 100) != HAL_OK) {
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	2202      	movs	r2, #2
 8001756:	21d0      	movs	r1, #208	@ 0xd0
 8001758:	4823      	ldr	r0, [pc, #140]	@ (80017e8 <main+0x10c>)
 800175a:	f003 fa51 	bl	8004c00 <HAL_I2C_IsDeviceReady>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <main+0x90>
      Debug_Print("❌ DS3231 not responding!\r\n");
 8001764:	4821      	ldr	r0, [pc, #132]	@ (80017ec <main+0x110>)
 8001766:	f7ff ff7d 	bl	8001664 <Debug_Print>
 800176a:	e002      	b.n	8001772 <main+0x96>
  } else {
      Debug_Print("✅ DS3231 detected!\r\n");
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <main+0x114>)
 800176e:	f7ff ff79 	bl	8001664 <Debug_Print>
  }
  // DELETE this whole block in main.c (right after peripheral init)
  if (packetReady) {
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <main+0x118>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <main+0xb8>
      char buffer[128];
      if (UART_GetReceivedPacket(buffer, sizeof(buffer))) {
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fd15 	bl	80031b0 <UART_GetReceivedPacket>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <main+0xb8>
          ModelHandle_ProcessReceivedPacket(buffer);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa80 	bl	8001c94 <ModelHandle_ProcessReceivedPacket>
      }
  }

         // Process all active modes
         ModelHandle_Process();
 8001794:	f001 fa20 	bl	8002bd8 <ModelHandle_Process>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LoRa_Task(); // Call the LoRa task to handle communication
 8001798:	f7ff fd6c 	bl	8001274 <LoRa_Task>
	  Get_Time();
 800179c:	f001 fa3a 	bl	8002c14 <Get_Time>
	  ADC_ReadAllChannels(&hadc1, &adcData);
 80017a0:	4915      	ldr	r1, [pc, #84]	@ (80017f8 <main+0x11c>)
 80017a2:	480e      	ldr	r0, [pc, #56]	@ (80017dc <main+0x100>)
 80017a4:	f7ff f962 	bl	8000a6c <ADC_ReadAllChannels>

      // Check for and process received UART packets
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80017a8:	2140      	movs	r1, #64	@ 0x40
 80017aa:	4814      	ldr	r0, [pc, #80]	@ (80017fc <main+0x120>)
 80017ac:	f001 fd00 	bl	80031b0 <UART_GetReceivedPacket>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <main+0xe0>
          ProcessUartCommand(receivedUartPacket);
 80017b6:	4811      	ldr	r0, [pc, #68]	@ (80017fc <main+0x120>)
 80017b8:	f7ff ff62 	bl	8001680 <ProcessUartCommand>
      }

	  lcd_put_cur(0,0);
 80017bc:	2100      	movs	r1, #0
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff faf0 	bl	8000da4 <lcd_put_cur>
	  lcd_send_string("Hello, World!");
 80017c4:	480e      	ldr	r0, [pc, #56]	@ (8001800 <main+0x124>)
 80017c6:	f7ff fb46 	bl	8000e56 <lcd_send_string>
	  lcd_put_cur(1,0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fae9 	bl	8000da4 <lcd_put_cur>
	  lcd_send_string("STM32 + I2C LCD");
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <main+0x128>)
 80017d4:	f7ff fb3f 	bl	8000e56 <lcd_send_string>
	  LoRa_Task(); // Call the LoRa task to handle communication
 80017d8:	e7de      	b.n	8001798 <main+0xbc>
 80017da:	bf00      	nop
 80017dc:	2000011c 	.word	0x2000011c
 80017e0:	080093cc 	.word	0x080093cc
 80017e4:	080093e4 	.word	0x080093e4
 80017e8:	2000014c 	.word	0x2000014c
 80017ec:	0800940c 	.word	0x0800940c
 80017f0:	0800942c 	.word	0x0800942c
 80017f4:	200000d6 	.word	0x200000d6
 80017f8:	20000254 	.word	0x20000254
 80017fc:	2000028c 	.word	0x2000028c
 8001800:	08009444 	.word	0x08009444
 8001804:	08009454 	.word	0x08009454

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001812:	2228      	movs	r2, #40	@ 0x28
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fb30 	bl	8007e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	2301      	movs	r3, #1
 8001848:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001854:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001858:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185e:	4618      	mov	r0, r3
 8001860:	f003 feb4 	bl	80055cc <HAL_RCC_OscConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800186a:	f000 f9e1 	bl	8001c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186e:	230f      	movs	r3, #15
 8001870:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2102      	movs	r1, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f920 	bl	8005ad0 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001896:	f000 f9cb 	bl	8001c30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800189a:	2303      	movs	r3, #3
 800189c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800189e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fa9d 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018b8:	f000 f9ba 	bl	8001c30 <Error_Handler>
  }
}
 80018bc:	bf00      	nop
 80018be:	3750      	adds	r7, #80	@ 0x50
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018d6:	4a19      	ldr	r2, [pc, #100]	@ (800193c <MX_ADC1_Init+0x78>)
 80018d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80018f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_ADC1_Init+0x74>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <MX_ADC1_Init+0x74>)
 8001902:	f001 fd43 	bl	800338c <HAL_ADC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800190c:	f000 f990 	bl	8001c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001914:	2301      	movs	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_ADC1_Init+0x74>)
 8001922:	f001 ffcb 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800192c:	f000 f980 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000011c 	.word	0x2000011c
 800193c:	40012400 	.word	0x40012400

08001940 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001946:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <MX_I2C2_Init+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_I2C2_Init+0x50>)
 800194c:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <MX_I2C2_Init+0x58>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_I2C2_Init+0x50>)
 800195e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_I2C2_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_I2C2_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	@ (8001990 <MX_I2C2_Init+0x50>)
 800197e:	f002 fc89 	bl	8004294 <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001988:	f000 f952 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000014c 	.word	0x2000014c
 8001994:	40005800 	.word	0x40005800
 8001998:	000186a0 	.word	0x000186a0

0800199c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2100      	movs	r1, #0
 80019a8:	460a      	mov	r2, r1
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	460a      	mov	r2, r1
 80019ae:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <MX_RTC_Init+0xc0>)
 80019be:	4a28      	ldr	r2, [pc, #160]	@ (8001a60 <MX_RTC_Init+0xc4>)
 80019c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <MX_RTC_Init+0xc0>)
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80019ca:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <MX_RTC_Init+0xc0>)
 80019cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019d2:	4822      	ldr	r0, [pc, #136]	@ (8001a5c <MX_RTC_Init+0xc0>)
 80019d4:	f004 fb76 	bl	80060c4 <HAL_RTC_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f927 	bl	8001c30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80019e2:	2313      	movs	r3, #19
 80019e4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2201      	movs	r2, #1
 80019f4:	4619      	mov	r1, r3
 80019f6:	4819      	ldr	r0, [pc, #100]	@ (8001a5c <MX_RTC_Init+0xc0>)
 80019f8:	f004 fbf0 	bl	80061dc <HAL_RTC_SetTime>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f000 f915 	bl	8001c30 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a06:	2301      	movs	r3, #1
 8001a08:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <MX_RTC_Init+0xc0>)
 8001a20:	f004 fd4c 	bl	80064bc <HAL_RTC_SetDate>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a2a:	f000 f901 	bl	8001c30 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8001a2e:	2313      	movs	r3, #19
 8001a30:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2201      	movs	r2, #1
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_RTC_Init+0xc0>)
 8001a46:	f004 fdef 	bl	8006628 <HAL_RTC_SetAlarm_IT>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001a50:	f000 f8ee 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200001a0 	.word	0x200001a0
 8001a60:	40002800 	.word	0x40002800

08001a64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a98:	2218      	movs	r2, #24
 8001a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab6:	f005 f943 	bl	8006d40 <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ac0:	f000 f8b6 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200001b4 	.word	0x200001b4
 8001acc:	40013000 	.word	0x40013000

08001ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <MX_USART1_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b08:	f005 feaf 	bl	800786a <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f88d 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000020c 	.word	0x2000020c
 8001b20:	40013800 	.word	0x40013800

08001b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b38:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a39      	ldr	r2, [pc, #228]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	4b34      	ldr	r3, [pc, #208]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a33      	ldr	r2, [pc, #204]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a27      	ldr	r2, [pc, #156]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <MX_GPIO_Init+0x100>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f248 3147 	movw	r1, #33607	@ 0x8347
 8001b9e:	4822      	ldr	r0, [pc, #136]	@ (8001c28 <MX_GPIO_Init+0x104>)
 8001ba0:	f002 fb60 	bl	8004264 <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001baa:	4820      	ldr	r0, [pc, #128]	@ (8001c2c <MX_GPIO_Init+0x108>)
 8001bac:	f002 fb5a 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001bb0:	23c0      	movs	r3, #192	@ 0xc0
 8001bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481b      	ldr	r0, [pc, #108]	@ (8001c2c <MX_GPIO_Init+0x108>)
 8001bc0:	f002 f9cc 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001bc4:	f248 3347 	movw	r3, #33607	@ 0x8347
 8001bc8:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4812      	ldr	r0, [pc, #72]	@ (8001c28 <MX_GPIO_Init+0x104>)
 8001bde:	f002 f9bd 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin RF_DATA_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|RF_DATA_Pin;
 8001be2:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8001be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <MX_GPIO_Init+0x104>)
 8001bf8:	f002 f9b0 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001bfc:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_GPIO_Init+0x108>)
 8001c16:	f002 f9a1 	bl	8003f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40010800 	.word	0x40010800

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <Error_Handler+0x8>

08001c3c <Motor_On>:
    .currentState = false,
    .stateChangeTime = 0
};

// Motor control functions
void Motor_On(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    motorStatus = 1;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <Motor_On+0x20>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
    // Add hardware-specific code to turn motor ON
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Example GPIO
 8001c46:	2201      	movs	r2, #1
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <Motor_On+0x24>)
 8001c4c:	f002 fb0a 	bl	8004264 <HAL_GPIO_WritePin>
    ModelHandle_DebugPrint("Motor turned ON");
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <Motor_On+0x28>)
 8001c52:	f000 ff9f 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002cc 	.word	0x200002cc
 8001c60:	40010800 	.word	0x40010800
 8001c64:	08009464 	.word	0x08009464

08001c68 <Motor_Off>:

void Motor_Off(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    motorStatus = 0;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <Motor_Off+0x20>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
    // Add hardware-specific code to turn motor OFF
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Example GPIO
 8001c72:	2200      	movs	r2, #0
 8001c74:	2101      	movs	r1, #1
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <Motor_Off+0x24>)
 8001c78:	f002 faf4 	bl	8004264 <HAL_GPIO_WritePin>
    ModelHandle_DebugPrint("Motor turned OFF");
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <Motor_Off+0x28>)
 8001c7e:	f000 ff89 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002cc 	.word	0x200002cc
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	08009474 	.word	0x08009474

08001c94 <ModelHandle_ProcessReceivedPacket>:
bool Motor_GetStatus(void) {
    return motorStatus;
}

// Command processing
void ModelHandle_ProcessReceivedPacket(const char* packet) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    if (packet == NULL || strlen(packet) == 0) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <ModelHandle_ProcessReceivedPacket+0x2a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <ModelHandle_ProcessReceivedPacket+0x2a>
        return;
    }

    ModelHandle_DebugPrint("Received packet:");
 8001caa:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <ModelHandle_ProcessReceivedPacket+0x34>)
 8001cac:	f000 ff72 	bl	8002b94 <ModelHandle_DebugPrint>
    ModelHandle_DebugPrint(packet);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 ff6f 	bl	8002b94 <ModelHandle_DebugPrint>

    ModelHandle_ProcessUartCommand(packet);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f808 	bl	8001ccc <ModelHandle_ProcessUartCommand>
 8001cbc:	e000      	b.n	8001cc0 <ModelHandle_ProcessReceivedPacket+0x2c>
        return;
 8001cbe:	bf00      	nop
}
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08009488 	.word	0x08009488

08001ccc <ModelHandle_ProcessUartCommand>:

void ModelHandle_ProcessUartCommand(const char* command) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b090      	sub	sp, #64	@ 0x40
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    if (command == NULL) return;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80e6 	beq.w	8001ea8 <ModelHandle_ProcessUartCommand+0x1dc>

    // Manual mode commands
    if (strcmp(command, "MOTOR_ON") == 0) {
 8001cdc:	4974      	ldr	r1, [pc, #464]	@ (8001eb0 <ModelHandle_ProcessUartCommand+0x1e4>)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fa34 	bl	800014c <strcmp>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <ModelHandle_ProcessUartCommand+0x26>
        ModelHandle_ManualMode(command);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f908 	bl	8001f00 <ModelHandle_ManualMode>
 8001cf0:	e0db      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strcmp(command, "MOTOR_OFF") == 0) {
 8001cf2:	4970      	ldr	r1, [pc, #448]	@ (8001eb4 <ModelHandle_ProcessUartCommand+0x1e8>)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fa29 	bl	800014c <strcmp>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <ModelHandle_ProcessUartCommand+0x3c>
        ModelHandle_ManualMode(command);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8fd 	bl	8001f00 <ModelHandle_ManualMode>
 8001d06:	e0d0      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Countdown mode
    else if (strncmp(command, "COUNTDOWN_ON:", 13) == 0) {
 8001d08:	220d      	movs	r2, #13
 8001d0a:	496b      	ldr	r1, [pc, #428]	@ (8001eb8 <ModelHandle_ProcessUartCommand+0x1ec>)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f006 f8bd 	bl	8007e8c <strncmp>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d103      	bne.n	8001d20 <ModelHandle_ProcessUartCommand+0x54>
        ModelHandle_CountdownMode(command);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f911 	bl	8001f40 <ModelHandle_CountdownMode>
 8001d1e:	e0c4      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "COUNTDOWN_OFF:", 14) == 0) {
 8001d20:	220e      	movs	r2, #14
 8001d22:	4966      	ldr	r1, [pc, #408]	@ (8001ebc <ModelHandle_ProcessUartCommand+0x1f0>)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f006 f8b1 	bl	8007e8c <strncmp>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <ModelHandle_ProcessUartCommand+0x6c>
        ModelHandle_CountdownMode(command);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f905 	bl	8001f40 <ModelHandle_CountdownMode>
 8001d36:	e0b8      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strcmp(command, "COUNTDOWN_END_ON") == 0 ||
 8001d38:	4961      	ldr	r1, [pc, #388]	@ (8001ec0 <ModelHandle_ProcessUartCommand+0x1f4>)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fa06 	bl	800014c <strcmp>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <ModelHandle_ProcessUartCommand+0x88>
             strcmp(command, "COUNTDOWN_END_OFF") == 0) {
 8001d46:	495f      	ldr	r1, [pc, #380]	@ (8001ec4 <ModelHandle_ProcessUartCommand+0x1f8>)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe f9ff 	bl	800014c <strcmp>
 8001d4e:	4603      	mov	r3, r0
    else if (strcmp(command, "COUNTDOWN_END_ON") == 0 ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <ModelHandle_ProcessUartCommand+0x90>
        ModelHandle_CountdownMode(command);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8f3 	bl	8001f40 <ModelHandle_CountdownMode>
 8001d5a:	e0a6      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Timer mode
    else if (strcmp(command, "TIMER_CLEAR") == 0) {
 8001d5c:	495a      	ldr	r1, [pc, #360]	@ (8001ec8 <ModelHandle_ProcessUartCommand+0x1fc>)
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe f9f4 	bl	800014c <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <ModelHandle_ProcessUartCommand+0xa6>
        ModelHandle_TimerMode(command);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9a4 	bl	80020b8 <ModelHandle_TimerMode>
 8001d70:	e09b      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "TIMER_SET:", 10) == 0) {
 8001d72:	220a      	movs	r2, #10
 8001d74:	4955      	ldr	r1, [pc, #340]	@ (8001ecc <ModelHandle_ProcessUartCommand+0x200>)
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f006 f888 	bl	8007e8c <strncmp>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <ModelHandle_ProcessUartCommand+0xbe>
        ModelHandle_TimerMode(command);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f998 	bl	80020b8 <ModelHandle_TimerMode>
 8001d88:	e08f      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Search mode
    else if (strncmp(command, "SEARCH_GAP:", 11) == 0) {
 8001d8a:	220b      	movs	r2, #11
 8001d8c:	4950      	ldr	r1, [pc, #320]	@ (8001ed0 <ModelHandle_ProcessUartCommand+0x204>)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f006 f87c 	bl	8007e8c <strncmp>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <ModelHandle_ProcessUartCommand+0xd6>
        ModelHandle_SearchMode(command);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa48 	bl	8002230 <ModelHandle_SearchMode>
 8001da0:	e083      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "SEARCH_DRYRUN:", 14) == 0) {
 8001da2:	220e      	movs	r2, #14
 8001da4:	494b      	ldr	r1, [pc, #300]	@ (8001ed4 <ModelHandle_ProcessUartCommand+0x208>)
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f006 f870 	bl	8007e8c <strncmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <ModelHandle_ProcessUartCommand+0xee>
        ModelHandle_SearchMode(command);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fa3c 	bl	8002230 <ModelHandle_SearchMode>
 8001db8:	e077      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "SEARCH_DAYS:", 12) == 0) {
 8001dba:	220c      	movs	r2, #12
 8001dbc:	4946      	ldr	r1, [pc, #280]	@ (8001ed8 <ModelHandle_ProcessUartCommand+0x20c>)
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f006 f864 	bl	8007e8c <strncmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <ModelHandle_ProcessUartCommand+0x106>
        ModelHandle_SearchMode(command);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa30 	bl	8002230 <ModelHandle_SearchMode>
 8001dd0:	e06b      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Twist mode
    else if (strncmp(command, "TWIST_ONDUR:", 12) == 0) {
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4941      	ldr	r1, [pc, #260]	@ (8001edc <ModelHandle_ProcessUartCommand+0x210>)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f006 f858 	bl	8007e8c <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <ModelHandle_ProcessUartCommand+0x11e>
        ModelHandle_TwistMode(command);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fabc 	bl	8002360 <ModelHandle_TwistMode>
 8001de8:	e05f      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "TWIST_OFFDUR:", 13) == 0) {
 8001dea:	220d      	movs	r2, #13
 8001dec:	493c      	ldr	r1, [pc, #240]	@ (8001ee0 <ModelHandle_ProcessUartCommand+0x214>)
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f006 f84c 	bl	8007e8c <strncmp>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <ModelHandle_ProcessUartCommand+0x136>
        ModelHandle_TwistMode(command);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fab0 	bl	8002360 <ModelHandle_TwistMode>
 8001e00:	e053      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "TWIST_ONTIME:", 13) == 0) {
 8001e02:	220d      	movs	r2, #13
 8001e04:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <ModelHandle_ProcessUartCommand+0x218>)
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f006 f840 	bl	8007e8c <strncmp>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <ModelHandle_ProcessUartCommand+0x14e>
        ModelHandle_TwistMode(command);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 faa4 	bl	8002360 <ModelHandle_TwistMode>
 8001e18:	e047      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "TWIST_OFFTIME:", 14) == 0) {
 8001e1a:	220e      	movs	r2, #14
 8001e1c:	4932      	ldr	r1, [pc, #200]	@ (8001ee8 <ModelHandle_ProcessUartCommand+0x21c>)
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f006 f834 	bl	8007e8c <strncmp>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <ModelHandle_ProcessUartCommand+0x166>
        ModelHandle_TwistMode(command);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa98 	bl	8002360 <ModelHandle_TwistMode>
 8001e30:	e03b      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strncmp(command, "TWIST_DAYS:", 11) == 0) {
 8001e32:	220b      	movs	r2, #11
 8001e34:	492d      	ldr	r1, [pc, #180]	@ (8001eec <ModelHandle_ProcessUartCommand+0x220>)
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f006 f828 	bl	8007e8c <strncmp>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <ModelHandle_ProcessUartCommand+0x17e>
        ModelHandle_TwistMode(command);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fa8c 	bl	8002360 <ModelHandle_TwistMode>
 8001e48:	e02f      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Semi-auto mode
    else if (strcmp(command, "SEMI_ON") == 0) {
 8001e4a:	4929      	ldr	r1, [pc, #164]	@ (8001ef0 <ModelHandle_ProcessUartCommand+0x224>)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe f97d 	bl	800014c <strcmp>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <ModelHandle_ProcessUartCommand+0x194>
        ModelHandle_SemiAutoMode(command);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb87 	bl	800256c <ModelHandle_SemiAutoMode>
 8001e5e:	e024      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else if (strcmp(command, "SEMI_OFF") == 0) {
 8001e60:	4924      	ldr	r1, [pc, #144]	@ (8001ef4 <ModelHandle_ProcessUartCommand+0x228>)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe f972 	bl	800014c <strcmp>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <ModelHandle_ProcessUartCommand+0x1aa>
        ModelHandle_SemiAutoMode(command);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb7c 	bl	800256c <ModelHandle_SemiAutoMode>
 8001e74:	e019      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    // Error mode
    else if (strncmp(command, "ERROR_MSG:", 10) == 0) {
 8001e76:	220a      	movs	r2, #10
 8001e78:	491f      	ldr	r1, [pc, #124]	@ (8001ef8 <ModelHandle_ProcessUartCommand+0x22c>)
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f006 f806 	bl	8007e8c <strncmp>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <ModelHandle_ProcessUartCommand+0x1c2>
        ModelHandle_ErrorMode(command);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fb9a 	bl	80025c0 <ModelHandle_ErrorMode>
 8001e8c:	e00d      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    }
    else {
        char debugMsg[50];
        snprintf(debugMsg, sizeof(debugMsg), "Unknown command: %s", command);
 8001e8e:	f107 000c 	add.w	r0, r7, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <ModelHandle_ProcessUartCommand+0x230>)
 8001e96:	2132      	movs	r1, #50	@ 0x32
 8001e98:	f005 ff6a 	bl	8007d70 <sniprintf>
        ModelHandle_DebugPrint(debugMsg);
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fe77 	bl	8002b94 <ModelHandle_DebugPrint>
 8001ea6:	e000      	b.n	8001eaa <ModelHandle_ProcessUartCommand+0x1de>
    if (command == NULL) return;
 8001ea8:	bf00      	nop
    }
}
 8001eaa:	3740      	adds	r7, #64	@ 0x40
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	0800949c 	.word	0x0800949c
 8001eb4:	080094a8 	.word	0x080094a8
 8001eb8:	080094b4 	.word	0x080094b4
 8001ebc:	080094c4 	.word	0x080094c4
 8001ec0:	080094d4 	.word	0x080094d4
 8001ec4:	080094e8 	.word	0x080094e8
 8001ec8:	080094fc 	.word	0x080094fc
 8001ecc:	08009508 	.word	0x08009508
 8001ed0:	08009514 	.word	0x08009514
 8001ed4:	08009520 	.word	0x08009520
 8001ed8:	08009530 	.word	0x08009530
 8001edc:	08009540 	.word	0x08009540
 8001ee0:	08009550 	.word	0x08009550
 8001ee4:	08009560 	.word	0x08009560
 8001ee8:	08009570 	.word	0x08009570
 8001eec:	08009580 	.word	0x08009580
 8001ef0:	0800958c 	.word	0x0800958c
 8001ef4:	08009594 	.word	0x08009594
 8001ef8:	080095a0 	.word	0x080095a0
 8001efc:	080095ac 	.word	0x080095ac

08001f00 <ModelHandle_ManualMode>:

// Mode specific handlers
void ModelHandle_ManualMode(const char* command) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    if (strcmp(command, "MOTOR_ON") == 0) {
 8001f08:	490b      	ldr	r1, [pc, #44]	@ (8001f38 <ModelHandle_ManualMode+0x38>)
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe f91e 	bl	800014c <strcmp>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <ModelHandle_ManualMode+0x1c>
        Motor_On();
 8001f16:	f7ff fe91 	bl	8001c3c <Motor_On>
    }
    else if (strcmp(command, "MOTOR_OFF") == 0) {
        Motor_Off();
    }
}
 8001f1a:	e008      	b.n	8001f2e <ModelHandle_ManualMode+0x2e>
    else if (strcmp(command, "MOTOR_OFF") == 0) {
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <ModelHandle_ManualMode+0x3c>)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe f914 	bl	800014c <strcmp>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <ModelHandle_ManualMode+0x2e>
        Motor_Off();
 8001f2a:	f7ff fe9d 	bl	8001c68 <Motor_Off>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	0800949c 	.word	0x0800949c
 8001f3c:	080094a8 	.word	0x080094a8

08001f40 <ModelHandle_CountdownMode>:

void ModelHandle_CountdownMode(const char* command) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b092      	sub	sp, #72	@ 0x48
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    if (strncmp(command, "COUNTDOWN_ON:", 13) == 0) {
 8001f48:	220d      	movs	r2, #13
 8001f4a:	494d      	ldr	r1, [pc, #308]	@ (8002080 <ModelHandle_CountdownMode+0x140>)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f005 ff9d 	bl	8007e8c <strncmp>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d134      	bne.n	8001fc2 <ModelHandle_CountdownMode+0x82>
        int duration;
        if (sscanf(command + 13, "%d", &duration) == 1) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	330d      	adds	r3, #13
 8001f5c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001f60:	4948      	ldr	r1, [pc, #288]	@ (8002084 <ModelHandle_CountdownMode+0x144>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f005 ff5c 	bl	8007e20 <siscanf>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 8084 	bne.w	8002078 <ModelHandle_CountdownMode+0x138>
            countdownDuration = duration * 60; // Convert minutes to seconds
 8001f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <ModelHandle_CountdownMode+0x148>)
 8001f7e:	601a      	str	r2, [r3, #0]
            countdownEndTime = HAL_GetTick() / 1000 + countdownDuration;
 8001f80:	f001 f9d6 	bl	8003330 <HAL_GetTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a41      	ldr	r2, [pc, #260]	@ (800208c <ModelHandle_CountdownMode+0x14c>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099a      	lsrs	r2, r3, #6
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <ModelHandle_CountdownMode+0x148>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <ModelHandle_CountdownMode+0x150>)
 8001f96:	6013      	str	r3, [r2, #0]
            countdownActive = true;
 8001f98:	4b3e      	ldr	r3, [pc, #248]	@ (8002094 <ModelHandle_CountdownMode+0x154>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
            countdownMode = true; // ON countdown
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <ModelHandle_CountdownMode+0x158>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
            Motor_On();
 8001fa4:	f7ff fe4a 	bl	8001c3c <Motor_On>

            char debugMsg[50];
            snprintf(debugMsg, sizeof(debugMsg), "Countdown ON started: %d min", duration);
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001faa:	f107 000c 	add.w	r0, r7, #12
 8001fae:	4a3b      	ldr	r2, [pc, #236]	@ (800209c <ModelHandle_CountdownMode+0x15c>)
 8001fb0:	2132      	movs	r1, #50	@ 0x32
 8001fb2:	f005 fedd 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fdea 	bl	8002b94 <ModelHandle_DebugPrint>
    else if (strcmp(command, "COUNTDOWN_END_OFF") == 0) {
        countdownActive = false;
        Motor_Off();
        ModelHandle_DebugPrint("Countdown ended - Motor OFF");
    }
}
 8001fc0:	e05a      	b.n	8002078 <ModelHandle_CountdownMode+0x138>
    else if (strncmp(command, "COUNTDOWN_OFF:", 14) == 0) {
 8001fc2:	220e      	movs	r2, #14
 8001fc4:	4936      	ldr	r1, [pc, #216]	@ (80020a0 <ModelHandle_CountdownMode+0x160>)
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f005 ff60 	bl	8007e8c <strncmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d133      	bne.n	800203a <ModelHandle_CountdownMode+0xfa>
        if (sscanf(command + 14, "%d", &duration) == 1) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	330e      	adds	r3, #14
 8001fd6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001fda:	492a      	ldr	r1, [pc, #168]	@ (8002084 <ModelHandle_CountdownMode+0x144>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f005 ff1f 	bl	8007e20 <siscanf>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d147      	bne.n	8002078 <ModelHandle_CountdownMode+0x138>
            countdownDuration = duration * 60; // Convert minutes to seconds
 8001fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <ModelHandle_CountdownMode+0x148>)
 8001ff6:	601a      	str	r2, [r3, #0]
            countdownEndTime = HAL_GetTick() / 1000 + countdownDuration;
 8001ff8:	f001 f99a 	bl	8003330 <HAL_GetTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a23      	ldr	r2, [pc, #140]	@ (800208c <ModelHandle_CountdownMode+0x14c>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099a      	lsrs	r2, r3, #6
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <ModelHandle_CountdownMode+0x148>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <ModelHandle_CountdownMode+0x150>)
 800200e:	6013      	str	r3, [r2, #0]
            countdownActive = true;
 8002010:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <ModelHandle_CountdownMode+0x154>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
            countdownMode = false; // OFF countdown
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <ModelHandle_CountdownMode+0x158>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
            Motor_Off();
 800201c:	f7ff fe24 	bl	8001c68 <Motor_Off>
            snprintf(debugMsg, sizeof(debugMsg), "Countdown OFF started: %d min", duration);
 8002020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002022:	f107 000c 	add.w	r0, r7, #12
 8002026:	4a1f      	ldr	r2, [pc, #124]	@ (80020a4 <ModelHandle_CountdownMode+0x164>)
 8002028:	2132      	movs	r1, #50	@ 0x32
 800202a:	f005 fea1 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fdae 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002038:	e01e      	b.n	8002078 <ModelHandle_CountdownMode+0x138>
    else if (strcmp(command, "COUNTDOWN_END_ON") == 0) {
 800203a:	491b      	ldr	r1, [pc, #108]	@ (80020a8 <ModelHandle_CountdownMode+0x168>)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe f885 	bl	800014c <strcmp>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d108      	bne.n	800205a <ModelHandle_CountdownMode+0x11a>
        countdownActive = false;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <ModelHandle_CountdownMode+0x154>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
        Motor_On();
 800204e:	f7ff fdf5 	bl	8001c3c <Motor_On>
        ModelHandle_DebugPrint("Countdown ended - Motor ON");
 8002052:	4816      	ldr	r0, [pc, #88]	@ (80020ac <ModelHandle_CountdownMode+0x16c>)
 8002054:	f000 fd9e 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002058:	e00e      	b.n	8002078 <ModelHandle_CountdownMode+0x138>
    else if (strcmp(command, "COUNTDOWN_END_OFF") == 0) {
 800205a:	4915      	ldr	r1, [pc, #84]	@ (80020b0 <ModelHandle_CountdownMode+0x170>)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7fe f875 	bl	800014c <strcmp>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <ModelHandle_CountdownMode+0x138>
        countdownActive = false;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <ModelHandle_CountdownMode+0x154>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
        Motor_Off();
 800206e:	f7ff fdfb 	bl	8001c68 <Motor_Off>
        ModelHandle_DebugPrint("Countdown ended - Motor OFF");
 8002072:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <ModelHandle_CountdownMode+0x174>)
 8002074:	f000 fd8e 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002078:	bf00      	nop
 800207a:	3748      	adds	r7, #72	@ 0x48
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	080094b4 	.word	0x080094b4
 8002084:	080095c0 	.word	0x080095c0
 8002088:	200002d4 	.word	0x200002d4
 800208c:	10624dd3 	.word	0x10624dd3
 8002090:	200002d0 	.word	0x200002d0
 8002094:	200002cd 	.word	0x200002cd
 8002098:	200002d8 	.word	0x200002d8
 800209c:	080095c4 	.word	0x080095c4
 80020a0:	080094c4 	.word	0x080094c4
 80020a4:	080095e4 	.word	0x080095e4
 80020a8:	080094d4 	.word	0x080094d4
 80020ac:	08009604 	.word	0x08009604
 80020b0:	080094e8 	.word	0x080094e8
 80020b4:	08009620 	.word	0x08009620

080020b8 <ModelHandle_TimerMode>:

void ModelHandle_TimerMode(const char* command) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b0a5      	sub	sp, #148	@ 0x94
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
    if (strcmp(command, "TIMER_CLEAR") == 0) {
 80020c0:	4955      	ldr	r1, [pc, #340]	@ (8002218 <ModelHandle_TimerMode+0x160>)
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe f842 	bl	800014c <strcmp>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d120      	bne.n	8002110 <ModelHandle_TimerMode+0x58>
        // Clear all timer slots
        for (int i = 0; i < 5; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020d4:	e014      	b.n	8002100 <ModelHandle_TimerMode+0x48>
            timerSlots[i].active = false;
 80020d6:	4a51      	ldr	r2, [pc, #324]	@ (800221c <ModelHandle_TimerMode+0x164>)
 80020d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	330c      	adds	r3, #12
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
            timerSlots[i].executedToday = false;
 80020e6:	4a4d      	ldr	r2, [pc, #308]	@ (800221c <ModelHandle_TimerMode+0x164>)
 80020e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4413      	add	r3, r2
 80020f0:	330d      	adds	r3, #13
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 5; i++) {
 80020f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002104:	2b04      	cmp	r3, #4
 8002106:	dde6      	ble.n	80020d6 <ModelHandle_TimerMode+0x1e>
        }
        ModelHandle_DebugPrint("All timers cleared");
 8002108:	4845      	ldr	r0, [pc, #276]	@ (8002220 <ModelHandle_TimerMode+0x168>)
 800210a:	f000 fd43 	bl	8002b94 <ModelHandle_DebugPrint>
                    ModelHandle_DebugPrint(debugMsg);
                }
            }
        }
    }
}
 800210e:	e07e      	b.n	800220e <ModelHandle_TimerMode+0x156>
    else if (strncmp(command, "TIMER_SET:", 10) == 0) {
 8002110:	220a      	movs	r2, #10
 8002112:	4944      	ldr	r1, [pc, #272]	@ (8002224 <ModelHandle_TimerMode+0x16c>)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f005 feb9 	bl	8007e8c <strncmp>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d176      	bne.n	800220e <ModelHandle_TimerMode+0x156>
        if (sscanf(command + 10, "%d:%5[^:]:%5s", &slot, onTime, offTime) == 3) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 000a 	add.w	r0, r3, #10
 8002126:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800212a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800212e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	493c      	ldr	r1, [pc, #240]	@ (8002228 <ModelHandle_TimerMode+0x170>)
 8002138:	f005 fe72 	bl	8007e20 <siscanf>
 800213c:	4603      	mov	r3, r0
 800213e:	2b03      	cmp	r3, #3
 8002140:	d165      	bne.n	800220e <ModelHandle_TimerMode+0x156>
            if (slot >= 1 && slot <= 5) {
 8002142:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	dd61      	ble.n	800220e <ModelHandle_TimerMode+0x156>
 800214a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800214e:	2b05      	cmp	r3, #5
 8002150:	dc5d      	bgt.n	800220e <ModelHandle_TimerMode+0x156>
                if (ModelHandle_ParseTime(onTime, &onHours, &onMinutes) &&
 8002152:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8002156:	f107 016f 	add.w	r1, r7, #111	@ 0x6f
 800215a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fbea 	bl	8002938 <ModelHandle_ParseTime>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d051      	beq.n	800220e <ModelHandle_TimerMode+0x156>
                    ModelHandle_ParseTime(offTime, &offHours, &offMinutes)) {
 800216a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800216e:	f107 016d 	add.w	r1, r7, #109	@ 0x6d
 8002172:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fbde 	bl	8002938 <ModelHandle_ParseTime>
 800217c:	4603      	mov	r3, r0
                if (ModelHandle_ParseTime(onTime, &onHours, &onMinutes) &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d045      	beq.n	800220e <ModelHandle_TimerMode+0x156>
                    timerSlots[slot-1].onTimeSeconds = ModelHandle_TimeToSeconds(onHours, onMinutes);
 8002182:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002186:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
 800218a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800218e:	1e5c      	subs	r4, r3, #1
 8002190:	4610      	mov	r0, r2
 8002192:	f000 fc45 	bl	8002a20 <ModelHandle_TimeToSeconds>
 8002196:	4602      	mov	r2, r0
 8002198:	4920      	ldr	r1, [pc, #128]	@ (800221c <ModelHandle_TimerMode+0x164>)
 800219a:	0123      	lsls	r3, r4, #4
 800219c:	440b      	add	r3, r1
 800219e:	3304      	adds	r3, #4
 80021a0:	601a      	str	r2, [r3, #0]
                    timerSlots[slot-1].offTimeSeconds = ModelHandle_TimeToSeconds(offHours, offMinutes);
 80021a2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80021a6:	f897 106c 	ldrb.w	r1, [r7, #108]	@ 0x6c
 80021aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ae:	1e5c      	subs	r4, r3, #1
 80021b0:	4610      	mov	r0, r2
 80021b2:	f000 fc35 	bl	8002a20 <ModelHandle_TimeToSeconds>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4918      	ldr	r1, [pc, #96]	@ (800221c <ModelHandle_TimerMode+0x164>)
 80021ba:	0123      	lsls	r3, r4, #4
 80021bc:	440b      	add	r3, r1
 80021be:	3308      	adds	r3, #8
 80021c0:	601a      	str	r2, [r3, #0]
                    timerSlots[slot-1].active = true;
 80021c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <ModelHandle_TimerMode+0x164>)
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	330c      	adds	r3, #12
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
                    timerSlots[slot-1].executedToday = false;
 80021d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d8:	3b01      	subs	r3, #1
 80021da:	4a10      	ldr	r2, [pc, #64]	@ (800221c <ModelHandle_TimerMode+0x164>)
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4413      	add	r3, r2
 80021e0:	330d      	adds	r3, #13
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
                    snprintf(debugMsg, sizeof(debugMsg), "Timer slot %d: ON@%s, OFF@%s",
 80021e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021ea:	f107 0008 	add.w	r0, r7, #8
 80021ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <ModelHandle_TimerMode+0x174>)
 80021fe:	2164      	movs	r1, #100	@ 0x64
 8002200:	f005 fdb6 	bl	8007d70 <sniprintf>
                    ModelHandle_DebugPrint(debugMsg);
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fcc3 	bl	8002b94 <ModelHandle_DebugPrint>
}
 800220e:	bf00      	nop
 8002210:	378c      	adds	r7, #140	@ 0x8c
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	080094fc 	.word	0x080094fc
 800221c:	20000004 	.word	0x20000004
 8002220:	0800963c 	.word	0x0800963c
 8002224:	08009508 	.word	0x08009508
 8002228:	08009650 	.word	0x08009650
 800222c:	08009660 	.word	0x08009660

08002230 <ModelHandle_SearchMode>:

void ModelHandle_SearchMode(const char* command) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b092      	sub	sp, #72	@ 0x48
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
    if (strncmp(command, "SEARCH_GAP:", 11) == 0) {
 8002238:	220b      	movs	r2, #11
 800223a:	4942      	ldr	r1, [pc, #264]	@ (8002344 <ModelHandle_SearchMode+0x114>)
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f005 fe25 	bl	8007e8c <strncmp>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d129      	bne.n	800229c <ModelHandle_SearchMode+0x6c>
        uint8_t gapMin, gapSec;
        if (ModelHandle_ParseDuration(command + 11, &gapMin, &gapSec)) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	330b      	adds	r3, #11
 800224c:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 8002250:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fba9 	bl	80029ac <ModelHandle_ParseDuration>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d06c      	beq.n	800233a <ModelHandle_SearchMode+0x10a>
            searchSettings.testingGapSeconds = ModelHandle_DurationToSeconds(gapMin, gapSec);
 8002260:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002264:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fbf0 	bl	8002a50 <ModelHandle_DurationToSeconds>
 8002270:	4603      	mov	r3, r0
 8002272:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <ModelHandle_SearchMode+0x118>)
 8002274:	6013      	str	r3, [r2, #0]
            char debugMsg[50];
            snprintf(debugMsg, sizeof(debugMsg), "Search gap: %dm %ds", gapMin, gapSec);
 8002276:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800227a:	461a      	mov	r2, r3
 800227c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002280:	f107 0008 	add.w	r0, r7, #8
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	4a30      	ldr	r2, [pc, #192]	@ (800234c <ModelHandle_SearchMode+0x11c>)
 800228a:	2132      	movs	r1, #50	@ 0x32
 800228c:	f005 fd70 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fc7d 	bl	8002b94 <ModelHandle_DebugPrint>
    else if (strncmp(command, "SEARCH_DAYS:", 12) == 0) {
        searchSettings.activeDays = ModelHandle_ParseDayBits(command + 12);
        searchSettings.searchActive = (searchSettings.activeDays != 0);
        ModelHandle_DebugPrint("Search days configured");
    }
}
 800229a:	e04e      	b.n	800233a <ModelHandle_SearchMode+0x10a>
    else if (strncmp(command, "SEARCH_DRYRUN:", 14) == 0) {
 800229c:	220e      	movs	r2, #14
 800229e:	492c      	ldr	r1, [pc, #176]	@ (8002350 <ModelHandle_SearchMode+0x120>)
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f005 fdf3 	bl	8007e8c <strncmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d129      	bne.n	8002300 <ModelHandle_SearchMode+0xd0>
        if (ModelHandle_ParseDuration(command + 14, &dryMin, &drySec)) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	330e      	adds	r3, #14
 80022b0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80022b4:	f107 013d 	add.w	r1, r7, #61	@ 0x3d
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fb77 	bl	80029ac <ModelHandle_ParseDuration>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03a      	beq.n	800233a <ModelHandle_SearchMode+0x10a>
            searchSettings.dryRunTimeSeconds = ModelHandle_DurationToSeconds(dryMin, drySec);
 80022c4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80022c8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fbbe 	bl	8002a50 <ModelHandle_DurationToSeconds>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <ModelHandle_SearchMode+0x118>)
 80022d8:	6053      	str	r3, [r2, #4]
            snprintf(debugMsg, sizeof(debugMsg), "Dry run time: %dm %ds", dryMin, drySec);
 80022da:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80022de:	461a      	mov	r2, r3
 80022e0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80022e4:	f107 0008 	add.w	r0, r7, #8
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <ModelHandle_SearchMode+0x124>)
 80022ee:	2132      	movs	r1, #50	@ 0x32
 80022f0:	f005 fd3e 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fc4b 	bl	8002b94 <ModelHandle_DebugPrint>
}
 80022fe:	e01c      	b.n	800233a <ModelHandle_SearchMode+0x10a>
    else if (strncmp(command, "SEARCH_DAYS:", 12) == 0) {
 8002300:	220c      	movs	r2, #12
 8002302:	4915      	ldr	r1, [pc, #84]	@ (8002358 <ModelHandle_SearchMode+0x128>)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f005 fdc1 	bl	8007e8c <strncmp>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d114      	bne.n	800233a <ModelHandle_SearchMode+0x10a>
        searchSettings.activeDays = ModelHandle_ParseDayBits(command + 12);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	330c      	adds	r3, #12
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fbb1 	bl	8002a7c <ModelHandle_ParseDayBits>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <ModelHandle_SearchMode+0x118>)
 8002320:	721a      	strb	r2, [r3, #8]
        searchSettings.searchActive = (searchSettings.activeDays != 0);
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <ModelHandle_SearchMode+0x118>)
 8002324:	7a1b      	ldrb	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <ModelHandle_SearchMode+0x118>)
 8002332:	725a      	strb	r2, [r3, #9]
        ModelHandle_DebugPrint("Search days configured");
 8002334:	4809      	ldr	r0, [pc, #36]	@ (800235c <ModelHandle_SearchMode+0x12c>)
 8002336:	f000 fc2d 	bl	8002b94 <ModelHandle_DebugPrint>
}
 800233a:	bf00      	nop
 800233c:	3740      	adds	r7, #64	@ 0x40
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	08009514 	.word	0x08009514
 8002348:	200002dc 	.word	0x200002dc
 800234c:	08009680 	.word	0x08009680
 8002350:	08009520 	.word	0x08009520
 8002354:	08009694 	.word	0x08009694
 8002358:	08009530 	.word	0x08009530
 800235c:	080096ac 	.word	0x080096ac

08002360 <ModelHandle_TwistMode>:

void ModelHandle_TwistMode(const char* command) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b094      	sub	sp, #80	@ 0x50
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
    if (strncmp(command, "TWIST_ONDUR:", 12) == 0) {
 8002368:	220c      	movs	r2, #12
 800236a:	4975      	ldr	r1, [pc, #468]	@ (8002540 <ModelHandle_TwistMode+0x1e0>)
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f005 fd8d 	bl	8007e8c <strncmp>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d12a      	bne.n	80023ce <ModelHandle_TwistMode+0x6e>
        uint8_t onMin, onSec;
        if (ModelHandle_ParseDuration(command + 12, &onMin, &onSec)) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	330c      	adds	r3, #12
 800237c:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8002380:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fb11 	bl	80029ac <ModelHandle_ParseDuration>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80d2 	beq.w	8002536 <ModelHandle_TwistMode+0x1d6>
            twistSettings.onDurationSeconds = ModelHandle_DurationToSeconds(onMin, onSec);
 8002392:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002396:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fb57 	bl	8002a50 <ModelHandle_DurationToSeconds>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4a67      	ldr	r2, [pc, #412]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 80023a6:	6013      	str	r3, [r2, #0]
            char debugMsg[50];
            snprintf(debugMsg, sizeof(debugMsg), "Twist ON duration: %dm %ds", onMin, onSec);
 80023a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023ac:	461a      	mov	r2, r3
 80023ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80023b2:	f107 000c 	add.w	r0, r7, #12
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	4a63      	ldr	r2, [pc, #396]	@ (8002548 <ModelHandle_TwistMode+0x1e8>)
 80023bc:	2132      	movs	r1, #50	@ 0x32
 80023be:	f005 fcd7 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fbe4 	bl	8002b94 <ModelHandle_DebugPrint>
    else if (strncmp(command, "TWIST_DAYS:", 11) == 0) {
        twistSettings.activeDays = ModelHandle_ParseDayBits(command + 11);
        twistSettings.twistActive = (twistSettings.activeDays != 0);
        ModelHandle_DebugPrint("Twist days configured");
    }
}
 80023cc:	e0b3      	b.n	8002536 <ModelHandle_TwistMode+0x1d6>
    else if (strncmp(command, "TWIST_OFFDUR:", 13) == 0) {
 80023ce:	220d      	movs	r2, #13
 80023d0:	495e      	ldr	r1, [pc, #376]	@ (800254c <ModelHandle_TwistMode+0x1ec>)
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f005 fd5a 	bl	8007e8c <strncmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <ModelHandle_TwistMode+0xd4>
        if (ModelHandle_ParseDuration(command + 13, &offMin, &offSec)) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	330d      	adds	r3, #13
 80023e2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80023e6:	f107 0145 	add.w	r1, r7, #69	@ 0x45
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fade 	bl	80029ac <ModelHandle_ParseDuration>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 809f 	beq.w	8002536 <ModelHandle_TwistMode+0x1d6>
            twistSettings.offDurationSeconds = ModelHandle_DurationToSeconds(offMin, offSec);
 80023f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023fc:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fb24 	bl	8002a50 <ModelHandle_DurationToSeconds>
 8002408:	4603      	mov	r3, r0
 800240a:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 800240c:	6053      	str	r3, [r2, #4]
            snprintf(debugMsg, sizeof(debugMsg), "Twist OFF duration: %dm %ds", offMin, offSec);
 800240e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002412:	461a      	mov	r2, r3
 8002414:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002418:	f107 000c 	add.w	r0, r7, #12
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	4a4b      	ldr	r2, [pc, #300]	@ (8002550 <ModelHandle_TwistMode+0x1f0>)
 8002422:	2132      	movs	r1, #50	@ 0x32
 8002424:	f005 fca4 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fbb1 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002432:	e080      	b.n	8002536 <ModelHandle_TwistMode+0x1d6>
    else if (strncmp(command, "TWIST_ONTIME:", 13) == 0) {
 8002434:	220d      	movs	r2, #13
 8002436:	4947      	ldr	r1, [pc, #284]	@ (8002554 <ModelHandle_TwistMode+0x1f4>)
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f005 fd27 	bl	8007e8c <strncmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d129      	bne.n	8002498 <ModelHandle_TwistMode+0x138>
        if (ModelHandle_ParseTime(command + 13, &onHours, &onMinutes)) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	330d      	adds	r3, #13
 8002448:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800244c:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa71 	bl	8002938 <ModelHandle_ParseTime>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d06c      	beq.n	8002536 <ModelHandle_TwistMode+0x1d6>
            twistSettings.startTimeSeconds = ModelHandle_TimeToSeconds(onHours, onMinutes);
 800245c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002460:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fada 	bl	8002a20 <ModelHandle_TimeToSeconds>
 800246c:	4603      	mov	r3, r0
 800246e:	4a35      	ldr	r2, [pc, #212]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 8002470:	6093      	str	r3, [r2, #8]
            snprintf(debugMsg, sizeof(debugMsg), "Twist start time: %02d:%02d", onHours, onMinutes);
 8002472:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002476:	461a      	mov	r2, r3
 8002478:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800247c:	f107 000c 	add.w	r0, r7, #12
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	4a34      	ldr	r2, [pc, #208]	@ (8002558 <ModelHandle_TwistMode+0x1f8>)
 8002486:	2132      	movs	r1, #50	@ 0x32
 8002488:	f005 fc72 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fb7f 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002496:	e04e      	b.n	8002536 <ModelHandle_TwistMode+0x1d6>
    else if (strncmp(command, "TWIST_OFFTIME:", 14) == 0) {
 8002498:	220e      	movs	r2, #14
 800249a:	4930      	ldr	r1, [pc, #192]	@ (800255c <ModelHandle_TwistMode+0x1fc>)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f005 fcf5 	bl	8007e8c <strncmp>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d129      	bne.n	80024fc <ModelHandle_TwistMode+0x19c>
        if (ModelHandle_ParseTime(command + 14, &offHours, &offMinutes)) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	330e      	adds	r3, #14
 80024ac:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80024b0:	f107 0141 	add.w	r1, r7, #65	@ 0x41
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fa3f 	bl	8002938 <ModelHandle_ParseTime>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03a      	beq.n	8002536 <ModelHandle_TwistMode+0x1d6>
            twistSettings.endTimeSeconds = ModelHandle_TimeToSeconds(offHours, offMinutes);
 80024c0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80024c4:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 faa8 	bl	8002a20 <ModelHandle_TimeToSeconds>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 80024d4:	60d3      	str	r3, [r2, #12]
            snprintf(debugMsg, sizeof(debugMsg), "Twist end time: %02d:%02d", offHours, offMinutes);
 80024d6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80024da:	461a      	mov	r2, r3
 80024dc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80024e0:	f107 000c 	add.w	r0, r7, #12
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <ModelHandle_TwistMode+0x200>)
 80024ea:	2132      	movs	r1, #50	@ 0x32
 80024ec:	f005 fc40 	bl	8007d70 <sniprintf>
            ModelHandle_DebugPrint(debugMsg);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fb4d 	bl	8002b94 <ModelHandle_DebugPrint>
}
 80024fa:	e01c      	b.n	8002536 <ModelHandle_TwistMode+0x1d6>
    else if (strncmp(command, "TWIST_DAYS:", 11) == 0) {
 80024fc:	220b      	movs	r2, #11
 80024fe:	4919      	ldr	r1, [pc, #100]	@ (8002564 <ModelHandle_TwistMode+0x204>)
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f005 fcc3 	bl	8007e8c <strncmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d114      	bne.n	8002536 <ModelHandle_TwistMode+0x1d6>
        twistSettings.activeDays = ModelHandle_ParseDayBits(command + 11);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	330b      	adds	r3, #11
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fab3 	bl	8002a7c <ModelHandle_ParseDayBits>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 800251c:	741a      	strb	r2, [r3, #16]
        twistSettings.twistActive = (twistSettings.activeDays != 0);
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 8002520:	7c1b      	ldrb	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <ModelHandle_TwistMode+0x1e4>)
 800252e:	745a      	strb	r2, [r3, #17]
        ModelHandle_DebugPrint("Twist days configured");
 8002530:	480d      	ldr	r0, [pc, #52]	@ (8002568 <ModelHandle_TwistMode+0x208>)
 8002532:	f000 fb2f 	bl	8002b94 <ModelHandle_DebugPrint>
}
 8002536:	bf00      	nop
 8002538:	3748      	adds	r7, #72	@ 0x48
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	08009540 	.word	0x08009540
 8002544:	200002ec 	.word	0x200002ec
 8002548:	080096c4 	.word	0x080096c4
 800254c:	08009550 	.word	0x08009550
 8002550:	080096e0 	.word	0x080096e0
 8002554:	08009560 	.word	0x08009560
 8002558:	080096fc 	.word	0x080096fc
 800255c:	08009570 	.word	0x08009570
 8002560:	08009718 	.word	0x08009718
 8002564:	08009580 	.word	0x08009580
 8002568:	08009734 	.word	0x08009734

0800256c <ModelHandle_SemiAutoMode>:

void ModelHandle_SemiAutoMode(const char* command) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    if (strcmp(command, "SEMI_ON") == 0) {
 8002574:	490e      	ldr	r1, [pc, #56]	@ (80025b0 <ModelHandle_SemiAutoMode+0x44>)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fd fde8 	bl	800014c <strcmp>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <ModelHandle_SemiAutoMode+0x22>
        Motor_On();
 8002582:	f7ff fb5b 	bl	8001c3c <Motor_On>
        ModelHandle_DebugPrint("Semi-auto mode: Motor ON");
 8002586:	480b      	ldr	r0, [pc, #44]	@ (80025b4 <ModelHandle_SemiAutoMode+0x48>)
 8002588:	f000 fb04 	bl	8002b94 <ModelHandle_DebugPrint>
    }
    else if (strcmp(command, "SEMI_OFF") == 0) {
        Motor_Off();
        ModelHandle_DebugPrint("Semi-auto mode: Motor OFF");
    }
}
 800258c:	e00b      	b.n	80025a6 <ModelHandle_SemiAutoMode+0x3a>
    else if (strcmp(command, "SEMI_OFF") == 0) {
 800258e:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <ModelHandle_SemiAutoMode+0x4c>)
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fd fddb 	bl	800014c <strcmp>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <ModelHandle_SemiAutoMode+0x3a>
        Motor_Off();
 800259c:	f7ff fb64 	bl	8001c68 <Motor_Off>
        ModelHandle_DebugPrint("Semi-auto mode: Motor OFF");
 80025a0:	4806      	ldr	r0, [pc, #24]	@ (80025bc <ModelHandle_SemiAutoMode+0x50>)
 80025a2:	f000 faf7 	bl	8002b94 <ModelHandle_DebugPrint>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800958c 	.word	0x0800958c
 80025b4:	0800974c 	.word	0x0800974c
 80025b8:	08009594 	.word	0x08009594
 80025bc:	08009768 	.word	0x08009768

080025c0 <ModelHandle_ErrorMode>:

void ModelHandle_ErrorMode(const char* command) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0c2      	sub	sp, #264	@ 0x108
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80025ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025ce:	6018      	str	r0, [r3, #0]
    if (strncmp(command, "ERROR_MSG:", 10) == 0) {
 80025d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80025d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025d8:	220a      	movs	r2, #10
 80025da:	4914      	ldr	r1, [pc, #80]	@ (800262c <ModelHandle_ErrorMode+0x6c>)
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f005 fc55 	bl	8007e8c <strncmp>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11c      	bne.n	8002622 <ModelHandle_ErrorMode+0x62>
        char errorMsg[100];
        strncpy(errorMsg, command + 10, sizeof(errorMsg) - 1);
 80025e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80025ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f103 010a 	add.w	r1, r3, #10
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2263      	movs	r2, #99	@ 0x63
 80025fc:	4618      	mov	r0, r3
 80025fe:	f005 fc57 	bl	8007eb0 <strncpy>
        errorMsg[sizeof(errorMsg) - 1] = '\0';
 8002602:	2300      	movs	r3, #0
 8002604:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

        char debugMsg[150];
        snprintf(debugMsg, sizeof(debugMsg), "Error message received: %s", errorMsg);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8002610:	4a07      	ldr	r2, [pc, #28]	@ (8002630 <ModelHandle_ErrorMode+0x70>)
 8002612:	2196      	movs	r1, #150	@ 0x96
 8002614:	f005 fbac 	bl	8007d70 <sniprintf>
        ModelHandle_DebugPrint(debugMsg);
 8002618:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fab9 	bl	8002b94 <ModelHandle_DebugPrint>

        // Here you could add code to display the error on an LCD or trigger an alarm
    }
}
 8002622:	bf00      	nop
 8002624:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	080095a0 	.word	0x080095a0
 8002630:	08009784 	.word	0x08009784

08002634 <ModelHandle_RunTimers>:

// Timer and countdown management
// ... [Previous content remains the same until the incomplete function] ...

// Timer and countdown management
void ModelHandle_RunTimers(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b090      	sub	sp, #64	@ 0x40
 8002638:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick() / 1000; // Current time in seconds
 800263a:	f000 fe79 	bl	8003330 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a3d      	ldr	r2, [pc, #244]	@ (8002738 <ModelHandle_RunTimers+0x104>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < 5; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800264e:	e06a      	b.n	8002726 <ModelHandle_RunTimers+0xf2>
        if (timerSlots[i].active) {
 8002650:	4a3a      	ldr	r2, [pc, #232]	@ (800273c <ModelHandle_RunTimers+0x108>)
 8002652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	330c      	adds	r3, #12
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05f      	beq.n	8002720 <ModelHandle_RunTimers+0xec>
            if (currentTime >= timerSlots[i].onTimeSeconds &&
 8002660:	4a36      	ldr	r2, [pc, #216]	@ (800273c <ModelHandle_RunTimers+0x108>)
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800266e:	429a      	cmp	r2, r3
 8002670:	d31f      	bcc.n	80026b2 <ModelHandle_RunTimers+0x7e>
                !timerSlots[i].executedToday) {
 8002672:	4a32      	ldr	r2, [pc, #200]	@ (800273c <ModelHandle_RunTimers+0x108>)
 8002674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	330d      	adds	r3, #13
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
            if (currentTime >= timerSlots[i].onTimeSeconds &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d014      	beq.n	80026b2 <ModelHandle_RunTimers+0x7e>
                Motor_On();
 8002688:	f7ff fad8 	bl	8001c3c <Motor_On>
                timerSlots[i].executedToday = true;
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <ModelHandle_RunTimers+0x108>)
 800268e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	330d      	adds	r3, #13
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]

                char debugMsg[50];
                snprintf(debugMsg, sizeof(debugMsg), "Timer slot %d: Motor ON", i+1);
 800269a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269c:	3301      	adds	r3, #1
 800269e:	1d38      	adds	r0, r7, #4
 80026a0:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <ModelHandle_RunTimers+0x10c>)
 80026a2:	2132      	movs	r1, #50	@ 0x32
 80026a4:	f005 fb64 	bl	8007d70 <sniprintf>
                ModelHandle_DebugPrint(debugMsg);
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa72 	bl	8002b94 <ModelHandle_DebugPrint>
                !timerSlots[i].executedToday) {
 80026b0:	e024      	b.n	80026fc <ModelHandle_RunTimers+0xc8>
            }
            else if (currentTime >= timerSlots[i].offTimeSeconds &&
 80026b2:	4a22      	ldr	r2, [pc, #136]	@ (800273c <ModelHandle_RunTimers+0x108>)
 80026b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	3308      	adds	r3, #8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d31b      	bcc.n	80026fc <ModelHandle_RunTimers+0xc8>
                    timerSlots[i].executedToday) {
 80026c4:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <ModelHandle_RunTimers+0x108>)
 80026c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	330d      	adds	r3, #13
 80026ce:	781b      	ldrb	r3, [r3, #0]
            else if (currentTime >= timerSlots[i].offTimeSeconds &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <ModelHandle_RunTimers+0xc8>
                Motor_Off();
 80026d4:	f7ff fac8 	bl	8001c68 <Motor_Off>
                timerSlots[i].executedToday = false;
 80026d8:	4a18      	ldr	r2, [pc, #96]	@ (800273c <ModelHandle_RunTimers+0x108>)
 80026da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	330d      	adds	r3, #13
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]

                char debugMsg[50];
                snprintf(debugMsg, sizeof(debugMsg), "Timer slot %d: Motor OFF", i+1);
 80026e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e8:	3301      	adds	r3, #1
 80026ea:	1d38      	adds	r0, r7, #4
 80026ec:	4a15      	ldr	r2, [pc, #84]	@ (8002744 <ModelHandle_RunTimers+0x110>)
 80026ee:	2132      	movs	r1, #50	@ 0x32
 80026f0:	f005 fb3e 	bl	8007d70 <sniprintf>
                ModelHandle_DebugPrint(debugMsg);
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fa4c 	bl	8002b94 <ModelHandle_DebugPrint>
            }

            // Reset executedToday flag at midnight (new day)
            if (currentTime % 86400 == 0) { // 86400 seconds = 24 hours
 80026fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <ModelHandle_RunTimers+0x114>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	4911      	ldr	r1, [pc, #68]	@ (800274c <ModelHandle_RunTimers+0x118>)
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <ModelHandle_RunTimers+0xec>
                timerSlots[i].executedToday = false;
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <ModelHandle_RunTimers+0x108>)
 8002714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	330d      	adds	r3, #13
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8002720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002722:	3301      	adds	r3, #1
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002728:	2b04      	cmp	r3, #4
 800272a:	dd91      	ble.n	8002650 <ModelHandle_RunTimers+0x1c>
            }
        }
    }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3740      	adds	r7, #64	@ 0x40
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	10624dd3 	.word	0x10624dd3
 800273c:	20000004 	.word	0x20000004
 8002740:	080097a0 	.word	0x080097a0
 8002744:	080097b8 	.word	0x080097b8
 8002748:	c22e4507 	.word	0xc22e4507
 800274c:	00015180 	.word	0x00015180

08002750 <ModelHandle_RunCountdown>:

void ModelHandle_RunCountdown(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
    if (countdownActive) {
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <ModelHandle_RunCountdown+0x58>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01f      	beq.n	80027a0 <ModelHandle_RunCountdown+0x50>
        uint32_t currentTime = HAL_GetTick() / 1000;
 8002760:	f000 fde6 	bl	8003330 <HAL_GetTick>
 8002764:	4603      	mov	r3, r0
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <ModelHandle_RunCountdown+0x5c>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	607b      	str	r3, [r7, #4]

        if (currentTime >= countdownEndTime) {
 8002770:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <ModelHandle_RunCountdown+0x60>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d312      	bcc.n	80027a0 <ModelHandle_RunCountdown+0x50>
            countdownActive = false;
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <ModelHandle_RunCountdown+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

            if (countdownMode) {
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <ModelHandle_RunCountdown+0x64>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <ModelHandle_RunCountdown+0x46>
                // Countdown was for ON, so turn OFF when finished
                Motor_Off();
 800278a:	f7ff fa6d 	bl	8001c68 <Motor_Off>
                ModelHandle_DebugPrint("Countdown finished: Motor OFF");
 800278e:	480a      	ldr	r0, [pc, #40]	@ (80027b8 <ModelHandle_RunCountdown+0x68>)
 8002790:	f000 fa00 	bl	8002b94 <ModelHandle_DebugPrint>
                Motor_On();
                ModelHandle_DebugPrint("Countdown finished: Motor ON");
            }
        }
    }
}
 8002794:	e004      	b.n	80027a0 <ModelHandle_RunCountdown+0x50>
                Motor_On();
 8002796:	f7ff fa51 	bl	8001c3c <Motor_On>
                ModelHandle_DebugPrint("Countdown finished: Motor ON");
 800279a:	4808      	ldr	r0, [pc, #32]	@ (80027bc <ModelHandle_RunCountdown+0x6c>)
 800279c:	f000 f9fa 	bl	8002b94 <ModelHandle_DebugPrint>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200002cd 	.word	0x200002cd
 80027ac:	10624dd3 	.word	0x10624dd3
 80027b0:	200002d0 	.word	0x200002d0
 80027b4:	200002d8 	.word	0x200002d8
 80027b8:	080097d4 	.word	0x080097d4
 80027bc:	080097f4 	.word	0x080097f4

080027c0 <ModelHandle_RunSearchLogic>:

void ModelHandle_RunSearchLogic(void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
    if (searchSettings.searchActive && searchSettings.testingGapSeconds > 0) {
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 80027c8:	7a5b      	ldrb	r3, [r3, #9]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02d      	beq.n	800282a <ModelHandle_RunSearchLogic+0x6a>
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d029      	beq.n	800282a <ModelHandle_RunSearchLogic+0x6a>
        uint32_t currentTime = HAL_GetTick() / 1000;
 80027d6:	f000 fdab 	bl	8003330 <HAL_GetTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <ModelHandle_RunSearchLogic+0x78>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	607b      	str	r3, [r7, #4]
        uint8_t currentDay = ModelHandle_GetCurrentDayOfWeek();
 80027e6:	f000 f9cd 	bl	8002b84 <ModelHandle_GetCurrentDayOfWeek>
 80027ea:	4603      	mov	r3, r0
 80027ec:	70fb      	strb	r3, [r7, #3]

        // Check if today is an active day
        if (ModelHandle_IsDayActive(searchSettings.activeDays, currentDay)) {
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 80027f0:	7a1b      	ldrb	r3, [r3, #8]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f9ac 	bl	8002b54 <ModelHandle_IsDayActive>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <ModelHandle_RunSearchLogic+0x6a>
            if (currentTime - searchSettings.lastTestTime >= searchSettings.testingGapSeconds) {
 8002802:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	1ad2      	subs	r2, r2, r3
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d30b      	bcc.n	800282a <ModelHandle_RunSearchLogic+0x6a>
                // Time for a test run
                Motor_On();
 8002812:	f7ff fa13 	bl	8001c3c <Motor_On>
                searchSettings.lastTestTime = currentTime;
 8002816:	4a07      	ldr	r2, [pc, #28]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60d3      	str	r3, [r2, #12]

                // Schedule motor off after dry run time
                // Note: This is simplified - in a real implementation, you'd need
                // to track this as another timer/countdown
                if (searchSettings.dryRunTimeSeconds > 0) {
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <ModelHandle_RunSearchLogic+0x74>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <ModelHandle_RunSearchLogic+0x6a>
                    // You'd implement this with a separate timer
                    ModelHandle_DebugPrint("Search mode: Dry run started");
 8002824:	4805      	ldr	r0, [pc, #20]	@ (800283c <ModelHandle_RunSearchLogic+0x7c>)
 8002826:	f000 f9b5 	bl	8002b94 <ModelHandle_DebugPrint>
                }
            }
        }
    }
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200002dc 	.word	0x200002dc
 8002838:	10624dd3 	.word	0x10624dd3
 800283c:	08009814 	.word	0x08009814

08002840 <ModelHandle_RunTwistLogic>:

void ModelHandle_RunTwistLogic(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
    if (twistSettings.twistActive) {
 8002846:	4b31      	ldr	r3, [pc, #196]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 8002848:	7c5b      	ldrb	r3, [r3, #17]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d059      	beq.n	8002902 <ModelHandle_RunTwistLogic+0xc2>
        uint32_t currentTime = HAL_GetTick() / 1000;
 800284e:	f000 fd6f 	bl	8003330 <HAL_GetTick>
 8002852:	4603      	mov	r3, r0
 8002854:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <ModelHandle_RunTwistLogic+0xd0>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	607b      	str	r3, [r7, #4]
        uint8_t currentDay = ModelHandle_GetCurrentDayOfWeek();
 800285e:	f000 f991 	bl	8002b84 <ModelHandle_GetCurrentDayOfWeek>
 8002862:	4603      	mov	r3, r0
 8002864:	70fb      	strb	r3, [r7, #3]

        // Check if we're within the operational time window and active day
        if (ModelHandle_IsDayActive(twistSettings.activeDays, currentDay) &&
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 8002868:	7c1b      	ldrb	r3, [r3, #16]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f970 	bl	8002b54 <ModelHandle_IsDayActive>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d035      	beq.n	80028e6 <ModelHandle_RunTwistLogic+0xa6>
            currentTime >= twistSettings.startTimeSeconds &&
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 800287c:	689b      	ldr	r3, [r3, #8]
        if (ModelHandle_IsDayActive(twistSettings.activeDays, currentDay) &&
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d330      	bcc.n	80028e6 <ModelHandle_RunTwistLogic+0xa6>
            currentTime < twistSettings.endTimeSeconds) {
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 8002886:	68db      	ldr	r3, [r3, #12]
            currentTime >= twistSettings.startTimeSeconds &&
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d22b      	bcs.n	80028e6 <ModelHandle_RunTwistLogic+0xa6>

            if (twistSettings.currentState) {
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 8002890:	7c9b      	ldrb	r3, [r3, #18]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <ModelHandle_RunTwistLogic+0x7e>
                // Currently ON, check if time to turn OFF
                if (currentTime - twistSettings.stateChangeTime >= twistSettings.onDurationSeconds) {
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	1ad2      	subs	r2, r2, r3
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d32c      	bcc.n	8002900 <ModelHandle_RunTwistLogic+0xc0>
                    Motor_Off();
 80028a6:	f7ff f9df 	bl	8001c68 <Motor_Off>
                    twistSettings.currentState = false;
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	749a      	strb	r2, [r3, #18]
                    twistSettings.stateChangeTime = currentTime;
 80028b0:	4a16      	ldr	r2, [pc, #88]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6153      	str	r3, [r2, #20]
                    ModelHandle_DebugPrint("Twist mode: Motor OFF");
 80028b6:	4817      	ldr	r0, [pc, #92]	@ (8002914 <ModelHandle_RunTwistLogic+0xd4>)
 80028b8:	f000 f96c 	bl	8002b94 <ModelHandle_DebugPrint>
            if (twistSettings.currentState) {
 80028bc:	e020      	b.n	8002900 <ModelHandle_RunTwistLogic+0xc0>
                }
            } else {
                // Currently OFF, check if time to turn ON
                if (currentTime - twistSettings.stateChangeTime >= twistSettings.offDurationSeconds) {
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d318      	bcc.n	8002900 <ModelHandle_RunTwistLogic+0xc0>
                    Motor_On();
 80028ce:	f7ff f9b5 	bl	8001c3c <Motor_On>
                    twistSettings.currentState = true;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	749a      	strb	r2, [r3, #18]
                    twistSettings.stateChangeTime = currentTime;
 80028d8:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6153      	str	r3, [r2, #20]
                    ModelHandle_DebugPrint("Twist mode: Motor ON");
 80028de:	480e      	ldr	r0, [pc, #56]	@ (8002918 <ModelHandle_RunTwistLogic+0xd8>)
 80028e0:	f000 f958 	bl	8002b94 <ModelHandle_DebugPrint>
            if (twistSettings.currentState) {
 80028e4:	e00c      	b.n	8002900 <ModelHandle_RunTwistLogic+0xc0>
                }
            }
        } else {
            // Outside operational window or inactive day, ensure motor is OFF
            if (twistSettings.currentState) {
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028e8:	7c9b      	ldrb	r3, [r3, #18]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <ModelHandle_RunTwistLogic+0xc2>
                Motor_Off();
 80028ee:	f7ff f9bb 	bl	8001c68 <Motor_Off>
                twistSettings.currentState = false;
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <ModelHandle_RunTwistLogic+0xcc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	749a      	strb	r2, [r3, #18]
                ModelHandle_DebugPrint("Twist mode: Outside schedule, Motor OFF");
 80028f8:	4808      	ldr	r0, [pc, #32]	@ (800291c <ModelHandle_RunTwistLogic+0xdc>)
 80028fa:	f000 f94b 	bl	8002b94 <ModelHandle_DebugPrint>
            }
        }
    }
}
 80028fe:	e000      	b.n	8002902 <ModelHandle_RunTwistLogic+0xc2>
            if (twistSettings.currentState) {
 8002900:	bf00      	nop
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200002ec 	.word	0x200002ec
 8002910:	10624dd3 	.word	0x10624dd3
 8002914:	08009834 	.word	0x08009834
 8002918:	0800984c 	.word	0x0800984c
 800291c:	08009864 	.word	0x08009864

08002920 <ModelHandle_CheckAllModes>:

void ModelHandle_CheckAllModes(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
    ModelHandle_RunTimers();
 8002924:	f7ff fe86 	bl	8002634 <ModelHandle_RunTimers>
    ModelHandle_RunCountdown();
 8002928:	f7ff ff12 	bl	8002750 <ModelHandle_RunCountdown>
    ModelHandle_RunSearchLogic();
 800292c:	f7ff ff48 	bl	80027c0 <ModelHandle_RunSearchLogic>
    ModelHandle_RunTwistLogic();
 8002930:	f7ff ff86 	bl	8002840 <ModelHandle_RunTwistLogic>
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <ModelHandle_ParseTime>:

// Utility functions
bool ModelHandle_ParseTime(const char* timeStr, uint8_t* hours, uint8_t* minutes) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
    if (timeStr == NULL || hours == NULL || minutes == NULL) return false;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <ModelHandle_ParseTime+0x1e>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <ModelHandle_ParseTime+0x1e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <ModelHandle_ParseTime+0x22>
 8002956:	2300      	movs	r3, #0
 8002958:	e021      	b.n	800299e <ModelHandle_ParseTime+0x66>

    int h, m;
    if (sscanf(timeStr, "%d:%d", &h, &m) == 2) {
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	f107 0214 	add.w	r2, r7, #20
 8002962:	4911      	ldr	r1, [pc, #68]	@ (80029a8 <ModelHandle_ParseTime+0x70>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f005 fa5b 	bl	8007e20 <siscanf>
 800296a:	4603      	mov	r3, r0
 800296c:	2b02      	cmp	r3, #2
 800296e:	d115      	bne.n	800299c <ModelHandle_ParseTime+0x64>
        if (h >= 0 && h <= 23 && m >= 0 && m <= 59) {
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db12      	blt.n	800299c <ModelHandle_ParseTime+0x64>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b17      	cmp	r3, #23
 800297a:	dc0f      	bgt.n	800299c <ModelHandle_ParseTime+0x64>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0c      	blt.n	800299c <ModelHandle_ParseTime+0x64>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b3b      	cmp	r3, #59	@ 0x3b
 8002986:	dc09      	bgt.n	800299c <ModelHandle_ParseTime+0x64>
            *hours = (uint8_t)h;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	701a      	strb	r2, [r3, #0]
            *minutes = (uint8_t)m;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	701a      	strb	r2, [r3, #0]
            return true;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <ModelHandle_ParseTime+0x66>
        }
    }
    return false;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800988c 	.word	0x0800988c

080029ac <ModelHandle_ParseDuration>:

bool ModelHandle_ParseDuration(const char* durationStr, uint8_t* minutes, uint8_t* seconds) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    if (durationStr == NULL || minutes == NULL || seconds == NULL) return false;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <ModelHandle_ParseDuration+0x1e>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <ModelHandle_ParseDuration+0x1e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <ModelHandle_ParseDuration+0x22>
 80029ca:	2300      	movs	r3, #0
 80029cc:	e021      	b.n	8002a12 <ModelHandle_ParseDuration+0x66>

    int m, s;
    if (sscanf(durationStr, "%d:%d", &m, &s) == 2) {
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	f107 0214 	add.w	r2, r7, #20
 80029d6:	4911      	ldr	r1, [pc, #68]	@ (8002a1c <ModelHandle_ParseDuration+0x70>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f005 fa21 	bl	8007e20 <siscanf>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d115      	bne.n	8002a10 <ModelHandle_ParseDuration+0x64>
        if (m >= 0 && m <= 59 && s >= 0 && s <= 59) {
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db12      	blt.n	8002a10 <ModelHandle_ParseDuration+0x64>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80029ee:	dc0f      	bgt.n	8002a10 <ModelHandle_ParseDuration+0x64>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0c      	blt.n	8002a10 <ModelHandle_ParseDuration+0x64>
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80029fa:	dc09      	bgt.n	8002a10 <ModelHandle_ParseDuration+0x64>
            *minutes = (uint8_t)m;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	701a      	strb	r2, [r3, #0]
            *seconds = (uint8_t)s;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	701a      	strb	r2, [r3, #0]
            return true;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <ModelHandle_ParseDuration+0x66>
        }
    }
    return false;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0800988c 	.word	0x0800988c

08002a20 <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hours, uint8_t minutes) {
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	460a      	mov	r2, r1
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71bb      	strb	r3, [r7, #6]
    return hours * 3600 + minutes * 60;
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002a36:	fb02 f103 	mul.w	r1, r2, r3
 8002a3a:	79ba      	ldrb	r2, [r7, #6]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <ModelHandle_DurationToSeconds>:

uint32_t ModelHandle_DurationToSeconds(uint8_t minutes, uint8_t seconds) {
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71bb      	strb	r3, [r7, #6]
    return minutes * 60 + seconds;
 8002a60:	79fa      	ldrb	r2, [r7, #7]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	79bb      	ldrb	r3, [r7, #6]
 8002a6e:	4413      	add	r3, r2
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <ModelHandle_ParseDayBits>:
        *hours = (seconds / 3600) % 24;
        *minutes = (seconds % 3600) / 60;
    }
}

uint8_t ModelHandle_ParseDayBits(const char* daysStr) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    uint8_t dayBits = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
    if (daysStr == NULL) return dayBits;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <ModelHandle_ParseDayBits+0x16>
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	e04d      	b.n	8002b2e <ModelHandle_ParseDayBits+0xb2>

    // Simple implementation - assumes days are sent as space-separated names
    // You might need to adjust this based on how ESP32 sends the data
    if (strstr(daysStr, "sun") != NULL) dayBits |= (1 << SUNDAY);
 8002a92:	4929      	ldr	r1, [pc, #164]	@ (8002b38 <ModelHandle_ParseDayBits+0xbc>)
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f005 fa1e 	bl	8007ed6 <strstr>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <ModelHandle_ParseDayBits+0x2c>
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "mon") != NULL) dayBits |= (1 << MONDAY);
 8002aa8:	4924      	ldr	r1, [pc, #144]	@ (8002b3c <ModelHandle_ParseDayBits+0xc0>)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f005 fa13 	bl	8007ed6 <strstr>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <ModelHandle_ParseDayBits+0x42>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "tue") != NULL) dayBits |= (1 << TUESDAY);
 8002abe:	4920      	ldr	r1, [pc, #128]	@ (8002b40 <ModelHandle_ParseDayBits+0xc4>)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 fa08 	bl	8007ed6 <strstr>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <ModelHandle_ParseDayBits+0x58>
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "wed") != NULL) dayBits |= (1 << WEDNESDAY);
 8002ad4:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <ModelHandle_ParseDayBits+0xc8>)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f005 f9fd 	bl	8007ed6 <strstr>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <ModelHandle_ParseDayBits+0x6e>
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "thu") != NULL) dayBits |= (1 << THURSDAY);
 8002aea:	4917      	ldr	r1, [pc, #92]	@ (8002b48 <ModelHandle_ParseDayBits+0xcc>)
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 f9f2 	bl	8007ed6 <strstr>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <ModelHandle_ParseDayBits+0x84>
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	f043 0310 	orr.w	r3, r3, #16
 8002afe:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "fri") != NULL) dayBits |= (1 << FRIDAY);
 8002b00:	4912      	ldr	r1, [pc, #72]	@ (8002b4c <ModelHandle_ParseDayBits+0xd0>)
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 f9e7 	bl	8007ed6 <strstr>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <ModelHandle_ParseDayBits+0x9a>
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	73fb      	strb	r3, [r7, #15]
    if (strstr(daysStr, "sat") != NULL) dayBits |= (1 << SATURDAY);
 8002b16:	490e      	ldr	r1, [pc, #56]	@ (8002b50 <ModelHandle_ParseDayBits+0xd4>)
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f005 f9dc 	bl	8007ed6 <strstr>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <ModelHandle_ParseDayBits+0xb0>
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b2a:	73fb      	strb	r3, [r7, #15]

    return dayBits;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	08009894 	.word	0x08009894
 8002b3c:	08009898 	.word	0x08009898
 8002b40:	0800989c 	.word	0x0800989c
 8002b44:	080098a0 	.word	0x080098a0
 8002b48:	080098a4 	.word	0x080098a4
 8002b4c:	080098a8 	.word	0x080098a8
 8002b50:	080098ac 	.word	0x080098ac

08002b54 <ModelHandle_IsDayActive>:

bool ModelHandle_IsDayActive(uint8_t dayBitmask, uint8_t currentDay) {
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71bb      	strb	r3, [r7, #6]
    return (dayBitmask & (1 << currentDay)) != 0;
 8002b64:	79fa      	ldrb	r2, [r7, #7]
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	fa42 f303 	asr.w	r3, r2, r3
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <ModelHandle_GetCurrentDayOfWeek>:

uint8_t ModelHandle_GetCurrentDayOfWeek(void) {
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
    // This is a placeholder - you'd implement actual RTC or timekeeping logic
    // For now, return a fixed day (Monday) as an example
    return MONDAY;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <ModelHandle_DebugPrint>:

void ModelHandle_DebugPrint(const char* message) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b0a2      	sub	sp, #136	@ 0x88
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    // Send debug message over UART
    char debugBuffer[128];
    snprintf(debugBuffer, sizeof(debugBuffer), "[DEBUG] %s\r\n", message);
 8002b9c:	f107 0008 	add.w	r0, r7, #8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <ModelHandle_DebugPrint+0x3c>)
 8002ba4:	2180      	movs	r1, #128	@ 0x80
 8002ba6:	f005 f8e3 	bl	8007d70 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fad6 	bl	8000160 <strlen>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	f107 0108 	add.w	r1, r7, #8
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <ModelHandle_DebugPrint+0x40>)
 8002bc2:	f004 fea2 	bl	800790a <HAL_UART_Transmit>
}
 8002bc6:	bf00      	nop
 8002bc8:	3788      	adds	r7, #136	@ 0x88
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	080098b0 	.word	0x080098b0
 8002bd4:	2000020c 	.word	0x2000020c

08002bd8 <ModelHandle_Process>:

// Main processing function to be called from main loop
void ModelHandle_Process(void) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
    // This function should be called regularly from main loop
    ModelHandle_CheckAllModes();
 8002bdc:	f7ff fea0 	bl	8002920 <ModelHandle_CheckAllModes>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4413      	add	r3, r2
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b0a5      	sub	sp, #148	@ 0x94
 8002c18:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 8002c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2307      	movs	r3, #7
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	21d0      	movs	r1, #208	@ 0xd0
 8002c30:	4849      	ldr	r0, [pc, #292]	@ (8002d58 <Get_Time+0x144>)
 8002c32:	f001 fd71 	bl	8004718 <HAL_I2C_Mem_Read>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d028      	beq.n	8002c8e <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 8002c3c:	4846      	ldr	r0, [pc, #280]	@ (8002d58 <Get_Time+0x144>)
 8002c3e:	f002 f90d 	bl	8004e5c <HAL_I2C_GetError>
 8002c42:	4602      	mov	r2, r0
 8002c44:	463b      	mov	r3, r7
 8002c46:	4945      	ldr	r1, [pc, #276]	@ (8002d5c <Get_Time+0x148>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 f8c7 	bl	8007ddc <siprintf>
        Debug_Print(err);
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fd07 	bl	8001664 <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 8002c56:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <Get_Time+0x14c>)
 8002c58:	22ff      	movs	r2, #255	@ 0xff
 8002c5a:	719a      	strb	r2, [r3, #6]
 8002c5c:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <Get_Time+0x14c>)
 8002c5e:	799a      	ldrb	r2, [r3, #6]
 8002c60:	4b3f      	ldr	r3, [pc, #252]	@ (8002d60 <Get_Time+0x14c>)
 8002c62:	715a      	strb	r2, [r3, #5]
 8002c64:	4b3e      	ldr	r3, [pc, #248]	@ (8002d60 <Get_Time+0x14c>)
 8002c66:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 8002c68:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <Get_Time+0x14c>)
 8002c6a:	711a      	strb	r2, [r3, #4]
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d60 <Get_Time+0x14c>)
 8002c6e:	791a      	ldrb	r2, [r3, #4]
 8002c70:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <Get_Time+0x14c>)
 8002c72:	70da      	strb	r2, [r3, #3]
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <Get_Time+0x14c>)
 8002c76:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <Get_Time+0x14c>)
 8002c7a:	709a      	strb	r2, [r3, #2]
 8002c7c:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <Get_Time+0x14c>)
 8002c7e:	789a      	ldrb	r2, [r3, #2]
 8002c80:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <Get_Time+0x14c>)
 8002c82:	705a      	strb	r2, [r3, #1]
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <Get_Time+0x14c>)
 8002c86:	785a      	ldrb	r2, [r3, #1]
 8002c88:	4b35      	ldr	r3, [pc, #212]	@ (8002d60 <Get_Time+0x14c>)
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e061      	b.n	8002d52 <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 8002c8e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c92:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 8002c94:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002c98:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 8002c9a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002c9e:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8002ca2:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8002ca6:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002caa:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002cac:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002cb6:	9504      	str	r5, [sp, #16]
 8002cb8:	9403      	str	r4, [sp, #12]
 8002cba:	9102      	str	r1, [sp, #8]
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4663      	mov	r3, ip
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	4927      	ldr	r1, [pc, #156]	@ (8002d64 <Get_Time+0x150>)
 8002cc6:	f005 f889 	bl	8007ddc <siprintf>
    Debug_Print(dbg);
 8002cca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fcc8 	bl	8001664 <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 8002cd4:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff83 	bl	8002be4 <bcdToDec>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <Get_Time+0x14c>)
 8002ce4:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 8002ce6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff7a 	bl	8002be4 <bcdToDec>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <Get_Time+0x14c>)
 8002cf6:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 8002cf8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff71 	bl	8002be4 <bcdToDec>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <Get_Time+0x14c>)
 8002d08:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 8002d0a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff68 	bl	8002be4 <bcdToDec>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <Get_Time+0x14c>)
 8002d1a:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 8002d1c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5f 	bl	8002be4 <bcdToDec>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <Get_Time+0x14c>)
 8002d2c:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 8002d2e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff56 	bl	8002be4 <bcdToDec>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <Get_Time+0x14c>)
 8002d3e:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 8002d40:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff4d 	bl	8002be4 <bcdToDec>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <Get_Time+0x14c>)
 8002d50:	719a      	strb	r2, [r3, #6]
}
 8002d52:	377c      	adds	r7, #124	@ 0x7c
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d58:	2000014c 	.word	0x2000014c
 8002d5c:	080098d8 	.word	0x080098d8
 8002d60:	20000304 	.word	0x20000304
 8002d64:	080098f0 	.word	0x080098f0

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	4a14      	ldr	r2, [pc, #80]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6193      	str	r3, [r2, #24]
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <HAL_MspInit+0x5c>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_MspInit+0x60>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_MspInit+0x60>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000

08002dcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a14      	ldr	r2, [pc, #80]	@ (8002e38 <HAL_ADC_MspInit+0x6c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d121      	bne.n	8002e30 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002df6:	6193      	str	r3, [r2, #24]
 8002df8:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e04:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_ADC_MspInit+0x70>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e1c:	233f      	movs	r3, #63	@ 0x3f
 8002e1e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e20:	2303      	movs	r3, #3
 8002e22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4805      	ldr	r0, [pc, #20]	@ (8002e40 <HAL_ADC_MspInit+0x74>)
 8002e2c:	f001 f896 	bl	8003f5c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e30:	bf00      	nop
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40012400 	.word	0x40012400
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010800 	.word	0x40010800

08002e44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <HAL_I2C_MspInit+0x74>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d124      	bne.n	8002eae <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e82:	2312      	movs	r3, #18
 8002e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480b      	ldr	r0, [pc, #44]	@ (8002ec0 <HAL_I2C_MspInit+0x7c>)
 8002e92:	f001 f863 	bl	8003f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002e9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ea0:	61d3      	str	r3, [r2, #28]
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_I2C_MspInit+0x78>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002eae:	bf00      	nop
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40005800 	.word	0x40005800
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010c00 	.word	0x40010c00

08002ec4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f10 <HAL_RTC_MspInit+0x4c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d118      	bne.n	8002f08 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002ed6:	f002 fb6d 	bl	80055b4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_RTC_MspInit+0x50>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_RTC_MspInit+0x50>)
 8002ee0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ee4:	61d3      	str	r3, [r2, #28]
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RTC_MspInit+0x50>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RTC_MspInit+0x54>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	2029      	movs	r0, #41	@ 0x29
 8002efe:	f000 fff6 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002f02:	2029      	movs	r0, #41	@ 0x29
 8002f04:	f001 f80f 	bl	8003f26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40002800 	.word	0x40002800
 8002f14:	40021000 	.word	0x40021000
 8002f18:	4242043c 	.word	0x4242043c

08002f1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <HAL_SPI_MspInit+0xa4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d13d      	bne.n	8002fb8 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a20      	ldr	r2, [pc, #128]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f5a:	f043 0308 	orr.w	r3, r3, #8
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_SPI_MspInit+0xa8>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002f6c:	2328      	movs	r3, #40	@ 0x28
 8002f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4812      	ldr	r0, [pc, #72]	@ (8002fc8 <HAL_SPI_MspInit+0xac>)
 8002f80:	f000 ffec 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f84:	2310      	movs	r3, #16
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4619      	mov	r1, r3
 8002f96:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <HAL_SPI_MspInit+0xac>)
 8002f98:	f000 ffe0 	bl	8003f5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_SPI_MspInit+0xb0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb2:	4a06      	ldr	r2, [pc, #24]	@ (8002fcc <HAL_SPI_MspInit+0xb0>)
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	@ 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40013000 	.word	0x40013000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010c00 	.word	0x40010c00
 8002fcc:	40010000 	.word	0x40010000

08002fd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <HAL_UART_MspInit+0x8c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d131      	bne.n	8003054 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_UART_MspInit+0x90>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8003060 <HAL_UART_MspInit+0x90>)
 8002ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_UART_MspInit+0x90>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <HAL_UART_MspInit+0x90>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <HAL_UART_MspInit+0x90>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_UART_MspInit+0x90>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800302a:	2303      	movs	r3, #3
 800302c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	4619      	mov	r1, r3
 8003034:	480b      	ldr	r0, [pc, #44]	@ (8003064 <HAL_UART_MspInit+0x94>)
 8003036:	f000 ff91 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800303a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800303e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f107 0310 	add.w	r3, r7, #16
 800304c:	4619      	mov	r1, r3
 800304e:	4805      	ldr	r0, [pc, #20]	@ (8003064 <HAL_UART_MspInit+0x94>)
 8003050:	f000 ff84 	bl	8003f5c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003054:	bf00      	nop
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40013800 	.word	0x40013800
 8003060:	40021000 	.word	0x40021000
 8003064:	40010800 	.word	0x40010800

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <NMI_Handler+0x4>

08003070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <HardFault_Handler+0x4>

08003078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <MemManage_Handler+0x4>

08003080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <UsageFault_Handler+0x4>

08003090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b8:	f000 f928 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030c4:	4802      	ldr	r0, [pc, #8]	@ (80030d0 <RTC_Alarm_IRQHandler+0x10>)
 80030c6:	f003 fb67 	bl	8006798 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200001a0 	.word	0x200001a0

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	@ (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f004 fefe 	bl	8007f04 <__errno>
 8003108:	4603      	mov	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	4a05      	ldr	r2, [pc, #20]	@ (8003138 <_sbrk+0x64>)
 8003124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20005000 	.word	0x20005000
 8003134:	00000400 	.word	0x00000400
 8003138:	2000030c 	.word	0x2000030c
 800313c:	200004a8 	.word	0x200004a8

08003140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	2100      	movs	r1, #0
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <UART_Init+0x28>)
 8003156:	f004 fe91 	bl	8007e7c <memset>
    rxIndex = 0;
 800315a:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <UART_Init+0x2c>)
 800315c:	2200      	movs	r2, #0
 800315e:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <UART_Init+0x30>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	4905      	ldr	r1, [pc, #20]	@ (8003180 <UART_Init+0x34>)
 800316a:	4806      	ldr	r0, [pc, #24]	@ (8003184 <UART_Init+0x38>)
 800316c:	f004 fc58 	bl	8007a20 <HAL_UART_Receive_IT>
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000314 	.word	0x20000314
 8003178:	20000354 	.word	0x20000354
 800317c:	20000356 	.word	0x20000356
 8003180:	20000310 	.word	0x20000310
 8003184:	2000020c 	.word	0x2000020c

08003188 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f7fc ffe4 	bl	8000160 <strlen>
 8003198:	4603      	mov	r3, r0
 800319a:	b29a      	uxth	r2, r3
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f004 fbb1 	bl	800790a <HAL_UART_Transmit>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    if (packetReady)
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <UART_GetReceivedPacket+0x78>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d02c      	beq.n	800321c <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 80031c2:	481a      	ldr	r0, [pc, #104]	@ (800322c <UART_GetReceivedPacket+0x7c>)
 80031c4:	f7fc ffcc 	bl	8000160 <strlen>
 80031c8:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d219      	bcs.n	8003206 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	461a      	mov	r2, r3
 80031d8:	4914      	ldr	r1, [pc, #80]	@ (800322c <UART_GetReceivedPacket+0x7c>)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f004 fe68 	bl	8007eb0 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	2100      	movs	r1, #0
 80031f0:	480e      	ldr	r0, [pc, #56]	@ (800322c <UART_GetReceivedPacket+0x7c>)
 80031f2:	f004 fe43 	bl	8007e7c <memset>
            rxIndex = 0;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <UART_GetReceivedPacket+0x80>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <UART_GetReceivedPacket+0x78>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
            return true;
 8003202:	2301      	movs	r3, #1
 8003204:	e00b      	b.n	800321e <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003206:	2240      	movs	r2, #64	@ 0x40
 8003208:	2100      	movs	r1, #0
 800320a:	4808      	ldr	r0, [pc, #32]	@ (800322c <UART_GetReceivedPacket+0x7c>)
 800320c:	f004 fe36 	bl	8007e7c <memset>
            rxIndex = 0;
 8003210:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <UART_GetReceivedPacket+0x80>)
 8003212:	2200      	movs	r2, #0
 8003214:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003216:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <UART_GetReceivedPacket+0x78>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000356 	.word	0x20000356
 800322c:	20000314 	.word	0x20000314
 8003230:	20000354 	.word	0x20000354

08003234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003234:	f7ff ff84 	bl	8003140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003238:	480b      	ldr	r0, [pc, #44]	@ (8003268 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800323a:	490c      	ldr	r1, [pc, #48]	@ (800326c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800323c:	4a0c      	ldr	r2, [pc, #48]	@ (8003270 <LoopFillZerobss+0x16>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003240:	e002      	b.n	8003248 <LoopCopyDataInit>

08003242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003246:	3304      	adds	r3, #4

08003248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800324c:	d3f9      	bcc.n	8003242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324e:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003250:	4c09      	ldr	r4, [pc, #36]	@ (8003278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003254:	e001      	b.n	800325a <LoopFillZerobss>

08003256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003258:	3204      	adds	r2, #4

0800325a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800325c:	d3fb      	bcc.n	8003256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800325e:	f004 fe57 	bl	8007f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003262:	f7fe fa3b 	bl	80016dc <main>
  bx lr
 8003266:	4770      	bx	lr
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800326c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003270:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8003274:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003278:	200004a4 	.word	0x200004a4

0800327c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC1_2_IRQHandler>
	...

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <HAL_Init+0x28>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	@ (80032a8 <HAL_Init+0x28>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 fe21 	bl	8003ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7ff fd64 	bl	8002d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fe39 	bl	8003f42 <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 fe01 	bl	8003eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	@ (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000054 	.word	0x20000054
 8003304:	2000005c 	.word	0x2000005c
 8003308:	20000058 	.word	0x20000058

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_IncTick+0x1c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_IncTick+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a03      	ldr	r2, [pc, #12]	@ (800332c <HAL_IncTick+0x20>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000005c 	.word	0x2000005c
 800332c:	20000358 	.word	0x20000358

08003330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b02      	ldr	r3, [pc, #8]	@ (8003340 <HAL_GetTick+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000358 	.word	0x20000358

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fff0 	bl	8003330 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffe0 	bl	8003330 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000005c 	.word	0x2000005c

0800338c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0be      	b.n	800352c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fcfe 	bl	8002dcc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fbc5 	bl	8003b60 <ADC_ConversionStop_Disable>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8099 	bne.w	800351a <HAL_ADC_Init+0x18e>
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 8095 	bne.w	800351a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033f8:	f023 0302 	bic.w	r3, r3, #2
 80033fc:	f043 0202 	orr.w	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800340c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7b1b      	ldrb	r3, [r3, #12]
 8003412:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003414:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4313      	orrs	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003424:	d003      	beq.n	800342e <HAL_ADC_Init+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_ADC_Init+0xa8>
 800342e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003432:	e000      	b.n	8003436 <HAL_ADC_Init+0xaa>
 8003434:	2300      	movs	r3, #0
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7d1b      	ldrb	r3, [r3, #20]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d119      	bne.n	8003478 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7b1b      	ldrb	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	3b01      	subs	r3, #1
 8003452:	035a      	lsls	r2, r3, #13
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e00b      	b.n	8003478 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_ADC_Init+0x1a8>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	430b      	orrs	r3, r1
 800349e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a8:	d003      	beq.n	80034b2 <HAL_ADC_Init+0x126>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d104      	bne.n	80034bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	051b      	lsls	r3, r3, #20
 80034ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <HAL_ADC_Init+0x1ac>)
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d10b      	bne.n	80034f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034f6:	e018      	b.n	800352a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	f023 0312 	bic.w	r3, r3, #18
 8003500:	f043 0210 	orr.w	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003518:	e007      	b.n	800352a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f043 0210 	orr.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ffe1f7fd 	.word	0xffe1f7fd
 8003538:	ff1f0efe 	.word	0xff1f0efe

0800353c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_ADC_Start+0x1a>
 8003552:	2302      	movs	r3, #2
 8003554:	e098      	b.n	8003688 <HAL_ADC_Start+0x14c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 faa4 	bl	8003aac <ADC_Enable>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8087 	bne.w	800367e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a41      	ldr	r2, [pc, #260]	@ (8003690 <HAL_ADC_Start+0x154>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d105      	bne.n	800359a <HAL_ADC_Start+0x5e>
 800358e:	4b41      	ldr	r3, [pc, #260]	@ (8003694 <HAL_ADC_Start+0x158>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d026      	beq.n	8003602 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035c4:	e01d      	b.n	8003602 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003694 <HAL_ADC_Start+0x158>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_ADC_Start+0xaa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003690 <HAL_ADC_Start+0x154>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10d      	bne.n	8003602 <HAL_ADC_Start+0xc6>
 80035e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_ADC_Start+0x158>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	f023 0206 	bic.w	r2, r3, #6
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800361a:	e002      	b.n	8003622 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0202 	mvn.w	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800363e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003642:	d113      	bne.n	800366c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003648:	4a11      	ldr	r2, [pc, #68]	@ (8003690 <HAL_ADC_Start+0x154>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <HAL_ADC_Start+0x158>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	e00c      	b.n	8003686 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	e003      	b.n	8003686 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40012800 	.word	0x40012800
 8003694:	40012400 	.word	0x40012400

08003698 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036ae:	f7ff fe3f 	bl	8003330 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0d3      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d131      	bne.n	800374c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12a      	bne.n	800374c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036f6:	e021      	b.n	800373c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d01d      	beq.n	800373c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_ADC_PollForConversion+0x7e>
 8003706:	f7ff fe13 	bl	8003330 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d212      	bcs.n	800373c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0a2      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0d6      	beq.n	80036f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800374a:	e070      	b.n	800382e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800374c:	4b4f      	ldr	r3, [pc, #316]	@ (800388c <HAL_ADC_PollForConversion+0x1f4>)
 800374e:	681c      	ldr	r4, [r3, #0]
 8003750:	2002      	movs	r0, #2
 8003752:	f002 fc01 	bl	8005f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003756:	4603      	mov	r3, r0
 8003758:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6919      	ldr	r1, [r3, #16]
 8003762:	4b4b      	ldr	r3, [pc, #300]	@ (8003890 <HAL_ADC_PollForConversion+0x1f8>)
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_ADC_PollForConversion+0x104>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	4b48      	ldr	r3, [pc, #288]	@ (8003894 <HAL_ADC_PollForConversion+0x1fc>)
 8003772:	400b      	ands	r3, r1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_ADC_PollForConversion+0x104>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <HAL_ADC_PollForConversion+0x200>)
 8003780:	400b      	ands	r3, r1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_ADC_PollForConversion+0x100>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68d9      	ldr	r1, [r3, #12]
 800378c:	4b43      	ldr	r3, [pc, #268]	@ (800389c <HAL_ADC_PollForConversion+0x204>)
 800378e:	400b      	ands	r3, r1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_PollForConversion+0x100>
 8003794:	2314      	movs	r3, #20
 8003796:	e020      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 8003798:	2329      	movs	r3, #41	@ 0x29
 800379a:	e01e      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_ADC_PollForConversion+0x200>)
 80037a4:	400b      	ands	r3, r1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_ADC_PollForConversion+0x120>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	4b3a      	ldr	r3, [pc, #232]	@ (800389c <HAL_ADC_PollForConversion+0x204>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_ADC_PollForConversion+0x13c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <HAL_ADC_PollForConversion+0x208>)
 80037c0:	400b      	ands	r3, r1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x140>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_ADC_PollForConversion+0x208>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x140>
 80037d4:	2354      	movs	r3, #84	@ 0x54
 80037d6:	e000      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 80037d8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037e0:	e021      	b.n	8003826 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d01a      	beq.n	8003820 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_ADC_PollForConversion+0x168>
 80037f0:	f7ff fd9e 	bl	8003330 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d20f      	bcs.n	8003820 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d90b      	bls.n	8003820 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e030      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d8d9      	bhi.n	80037e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0212 	mvn.w	r2, #18
 8003836:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800384e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003852:	d115      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	20000054 	.word	0x20000054
 8003890:	24924924 	.word	0x24924924
 8003894:	00924924 	.word	0x00924924
 8003898:	12492492 	.word	0x12492492
 800389c:	00492492 	.word	0x00492492
 80038a0:	00249249 	.word	0x00249249

080038a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x20>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0dc      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x1da>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d81c      	bhi.n	8003926 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b05      	subs	r3, #5
 80038fe:	221f      	movs	r2, #31
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	4019      	ands	r1, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	3b05      	subs	r3, #5
 8003918:	fa00 f203 	lsl.w	r2, r0, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	@ 0x34
 8003924:	e03c      	b.n	80039a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d81c      	bhi.n	8003968 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b23      	subs	r3, #35	@ 0x23
 8003940:	221f      	movs	r2, #31
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	4019      	ands	r1, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b23      	subs	r3, #35	@ 0x23
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b41      	subs	r3, #65	@ 0x41
 800397a:	221f      	movs	r2, #31
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	4019      	ands	r1, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	3b41      	subs	r3, #65	@ 0x41
 8003994:	fa00 f203 	lsl.w	r2, r0, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d91c      	bls.n	80039e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68d9      	ldr	r1, [r3, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	3b1e      	subs	r3, #30
 80039ba:	2207      	movs	r2, #7
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4019      	ands	r1, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6898      	ldr	r0, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	3b1e      	subs	r3, #30
 80039d4:	fa00 f203 	lsl.w	r2, r0, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e019      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6919      	ldr	r1, [r3, #16]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d003      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a22:	2b11      	cmp	r3, #17
 8003a24:	d132      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d126      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003a4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d11a      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a56:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a13      	ldr	r2, [pc, #76]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9a      	lsrs	r2, r3, #18
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a6c:	e002      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f9      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x1b2>
 8003a7a:	e007      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012400 	.word	0x40012400
 8003aa4:	20000054 	.word	0x20000054
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d040      	beq.n	8003b4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ada:	4b1f      	ldr	r3, [pc, #124]	@ (8003b58 <ADC_Enable+0xac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <ADC_Enable+0xb0>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ae8:	e002      	b.n	8003af0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f9      	bne.n	8003aea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003af6:	f7ff fc1b 	bl	8003330 <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003afc:	e01f      	b.n	8003b3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afe:	f7ff fc17 	bl	8003330 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d918      	bls.n	8003b3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d011      	beq.n	8003b3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d1d8      	bne.n	8003afe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000054 	.word	0x20000054
 8003b5c:	431bde83 	.word	0x431bde83

08003b60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12e      	bne.n	8003bd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b8a:	f7ff fbd1 	bl	8003330 <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b90:	e01b      	b.n	8003bca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b92:	f7ff fbcd 	bl	8003330 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d0dc      	beq.n	8003b92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADCEx_Calibration_Start+0x1e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e097      	b.n	8003d32 <HAL_ADCEx_Calibration_Start+0x14e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffa8 	bl	8003b60 <ADC_ConversionStop_Disable>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff49 	bl	8003aac <ADC_Enable>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8081 	bne.w	8003d28 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c2e:	f023 0302 	bic.w	r3, r3, #2
 8003c32:	f043 0202 	orr.w	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c3a:	4b40      	ldr	r3, [pc, #256]	@ (8003d3c <HAL_ADCEx_Calibration_Start+0x158>)
 8003c3c:	681c      	ldr	r4, [r3, #0]
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f002 f98a 	bl	8005f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c44:	4603      	mov	r3, r0
 8003c46:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c4a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c4c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c4e:	e002      	b.n	8003c56 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0208 	orr.w	r2, r2, #8
 8003c6a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c6c:	f7ff fb60 	bl	8003330 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c72:	e01b      	b.n	8003cac <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c74:	f7ff fb5c 	bl	8003330 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b0a      	cmp	r3, #10
 8003c80:	d914      	bls.n	8003cac <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	f023 0312 	bic.w	r3, r3, #18
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e042      	b.n	8003d32 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1dc      	bne.n	8003c74 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0204 	orr.w	r2, r2, #4
 8003cc8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cca:	f7ff fb31 	bl	8003330 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cd0:	e01b      	b.n	8003d0a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cd2:	f7ff fb2d 	bl	8003330 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b0a      	cmp	r3, #10
 8003cde:	d914      	bls.n	8003d0a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	f023 0312 	bic.w	r3, r3, #18
 8003cf6:	f043 0210 	orr.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e013      	b.n	8003d32 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1dc      	bne.n	8003cd2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000054 	.word	0x20000054

08003d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	60d3      	str	r3, [r2, #12]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 0307 	and.w	r3, r3, #7
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db0b      	blt.n	8003dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	4906      	ldr	r1, [pc, #24]	@ (8003dd8 <__NVIC_EnableIRQ+0x34>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	@ (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	@ (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	@ 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
         );
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	@ 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ea4:	d301      	bcc.n	8003eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00f      	b.n	8003eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <SysTick_Config+0x40>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f7ff ff90 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec2:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	e000e010 	.word	0xe000e010

08003ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff2d 	bl	8003d40 <__NVIC_SetPriorityGrouping>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f00:	f7ff ff42 	bl	8003d88 <__NVIC_GetPriorityGrouping>
 8003f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	6978      	ldr	r0, [r7, #20]
 8003f0c:	f7ff ff90 	bl	8003e30 <NVIC_EncodePriority>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff5f 	bl	8003ddc <__NVIC_SetPriority>
}
 8003f1e:	bf00      	nop
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff35 	bl	8003da4 <__NVIC_EnableIRQ>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffa2 	bl	8003e94 <SysTick_Config>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b08b      	sub	sp, #44	@ 0x2c
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6e:	e169      	b.n	8004244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f70:	2201      	movs	r2, #1
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	f040 8158 	bne.w	800423e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4a9a      	ldr	r2, [pc, #616]	@ (80041fc <HAL_GPIO_Init+0x2a0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d05e      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
 8003f98:	4a98      	ldr	r2, [pc, #608]	@ (80041fc <HAL_GPIO_Init+0x2a0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d875      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003f9e:	4a98      	ldr	r2, [pc, #608]	@ (8004200 <HAL_GPIO_Init+0x2a4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d058      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
 8003fa4:	4a96      	ldr	r2, [pc, #600]	@ (8004200 <HAL_GPIO_Init+0x2a4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d86f      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003faa:	4a96      	ldr	r2, [pc, #600]	@ (8004204 <HAL_GPIO_Init+0x2a8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d052      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
 8003fb0:	4a94      	ldr	r2, [pc, #592]	@ (8004204 <HAL_GPIO_Init+0x2a8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d869      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003fb6:	4a94      	ldr	r2, [pc, #592]	@ (8004208 <HAL_GPIO_Init+0x2ac>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d04c      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
 8003fbc:	4a92      	ldr	r2, [pc, #584]	@ (8004208 <HAL_GPIO_Init+0x2ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d863      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003fc2:	4a92      	ldr	r2, [pc, #584]	@ (800420c <HAL_GPIO_Init+0x2b0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d046      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
 8003fc8:	4a90      	ldr	r2, [pc, #576]	@ (800420c <HAL_GPIO_Init+0x2b0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d85d      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003fce:	2b12      	cmp	r3, #18
 8003fd0:	d82a      	bhi.n	8004028 <HAL_GPIO_Init+0xcc>
 8003fd2:	2b12      	cmp	r3, #18
 8003fd4:	d859      	bhi.n	800408a <HAL_GPIO_Init+0x12e>
 8003fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fdc <HAL_GPIO_Init+0x80>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08004057 	.word	0x08004057
 8003fe0:	08004031 	.word	0x08004031
 8003fe4:	08004043 	.word	0x08004043
 8003fe8:	08004085 	.word	0x08004085
 8003fec:	0800408b 	.word	0x0800408b
 8003ff0:	0800408b 	.word	0x0800408b
 8003ff4:	0800408b 	.word	0x0800408b
 8003ff8:	0800408b 	.word	0x0800408b
 8003ffc:	0800408b 	.word	0x0800408b
 8004000:	0800408b 	.word	0x0800408b
 8004004:	0800408b 	.word	0x0800408b
 8004008:	0800408b 	.word	0x0800408b
 800400c:	0800408b 	.word	0x0800408b
 8004010:	0800408b 	.word	0x0800408b
 8004014:	0800408b 	.word	0x0800408b
 8004018:	0800408b 	.word	0x0800408b
 800401c:	0800408b 	.word	0x0800408b
 8004020:	08004039 	.word	0x08004039
 8004024:	0800404d 	.word	0x0800404d
 8004028:	4a79      	ldr	r2, [pc, #484]	@ (8004210 <HAL_GPIO_Init+0x2b4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800402e:	e02c      	b.n	800408a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	623b      	str	r3, [r7, #32]
          break;
 8004036:	e029      	b.n	800408c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	623b      	str	r3, [r7, #32]
          break;
 8004040:	e024      	b.n	800408c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	3308      	adds	r3, #8
 8004048:	623b      	str	r3, [r7, #32]
          break;
 800404a:	e01f      	b.n	800408c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	330c      	adds	r3, #12
 8004052:	623b      	str	r3, [r7, #32]
          break;
 8004054:	e01a      	b.n	800408c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800405e:	2304      	movs	r3, #4
 8004060:	623b      	str	r3, [r7, #32]
          break;
 8004062:	e013      	b.n	800408c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800406c:	2308      	movs	r3, #8
 800406e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	611a      	str	r2, [r3, #16]
          break;
 8004076:	e009      	b.n	800408c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004078:	2308      	movs	r3, #8
 800407a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	615a      	str	r2, [r3, #20]
          break;
 8004082:	e003      	b.n	800408c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
          break;
 8004088:	e000      	b.n	800408c <HAL_GPIO_Init+0x130>
          break;
 800408a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2bff      	cmp	r3, #255	@ 0xff
 8004090:	d801      	bhi.n	8004096 <HAL_GPIO_Init+0x13a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	e001      	b.n	800409a <HAL_GPIO_Init+0x13e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2bff      	cmp	r3, #255	@ 0xff
 80040a0:	d802      	bhi.n	80040a8 <HAL_GPIO_Init+0x14c>
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	e002      	b.n	80040ae <HAL_GPIO_Init+0x152>
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	3b08      	subs	r3, #8
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	210f      	movs	r1, #15
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	6a39      	ldr	r1, [r7, #32]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80b1 	beq.w	800423e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6193      	str	r3, [r2, #24]
 80040e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040f4:	4a48      	ldr	r2, [pc, #288]	@ (8004218 <HAL_GPIO_Init+0x2bc>)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	@ (800421c <HAL_GPIO_Init+0x2c0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_GPIO_Init+0x1ec>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3f      	ldr	r2, [pc, #252]	@ (8004220 <HAL_GPIO_Init+0x2c4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00d      	beq.n	8004144 <HAL_GPIO_Init+0x1e8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3e      	ldr	r2, [pc, #248]	@ (8004224 <HAL_GPIO_Init+0x2c8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <HAL_GPIO_Init+0x1e4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3d      	ldr	r2, [pc, #244]	@ (8004228 <HAL_GPIO_Init+0x2cc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_GPIO_Init+0x1e0>
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <HAL_GPIO_Init+0x1ee>
 800413c:	2304      	movs	r3, #4
 800413e:	e004      	b.n	800414a <HAL_GPIO_Init+0x1ee>
 8004140:	2302      	movs	r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x1ee>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_GPIO_Init+0x1ee>
 8004148:	2300      	movs	r3, #0
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	f002 0203 	and.w	r2, r2, #3
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	4093      	lsls	r3, r2
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800415a:	492f      	ldr	r1, [pc, #188]	@ (8004218 <HAL_GPIO_Init+0x2bc>)
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004174:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	492c      	ldr	r1, [pc, #176]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004182:	4b2a      	ldr	r3, [pc, #168]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	43db      	mvns	r3, r3
 800418a:	4928      	ldr	r1, [pc, #160]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 800418c:	4013      	ands	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800419c:	4b23      	ldr	r3, [pc, #140]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	4922      	ldr	r1, [pc, #136]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041aa:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	491e      	ldr	r1, [pc, #120]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4918      	ldr	r1, [pc, #96]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041d2:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	4914      	ldr	r1, [pc, #80]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d021      	beq.n	8004230 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	490e      	ldr	r1, [pc, #56]	@ (800422c <HAL_GPIO_Init+0x2d0>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
 80041f8:	e021      	b.n	800423e <HAL_GPIO_Init+0x2e2>
 80041fa:	bf00      	nop
 80041fc:	10320000 	.word	0x10320000
 8004200:	10310000 	.word	0x10310000
 8004204:	10220000 	.word	0x10220000
 8004208:	10210000 	.word	0x10210000
 800420c:	10120000 	.word	0x10120000
 8004210:	10110000 	.word	0x10110000
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	40010800 	.word	0x40010800
 8004220:	40010c00 	.word	0x40010c00
 8004224:	40011000 	.word	0x40011000
 8004228:	40011400 	.word	0x40011400
 800422c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <HAL_GPIO_Init+0x304>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	43db      	mvns	r3, r3
 8004238:	4909      	ldr	r1, [pc, #36]	@ (8004260 <HAL_GPIO_Init+0x304>)
 800423a:	4013      	ands	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	3301      	adds	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	f47f ae8e 	bne.w	8003f70 <HAL_GPIO_Init+0x14>
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	372c      	adds	r7, #44	@ 0x2c
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
 8004270:	4613      	mov	r3, r2
 8004272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004274:	787b      	ldrb	r3, [r7, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004280:	e003      	b.n	800428a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	041a      	lsls	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e12b      	b.n	80044fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fdc2 	bl	8002e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	@ 0x24
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042f8:	f001 fd32 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a81      	ldr	r2, [pc, #516]	@ (8004508 <HAL_I2C_Init+0x274>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d807      	bhi.n	8004318 <HAL_I2C_Init+0x84>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a80      	ldr	r2, [pc, #512]	@ (800450c <HAL_I2C_Init+0x278>)
 800430c:	4293      	cmp	r3, r2
 800430e:	bf94      	ite	ls
 8004310:	2301      	movls	r3, #1
 8004312:	2300      	movhi	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e006      	b.n	8004326 <HAL_I2C_Init+0x92>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a7d      	ldr	r2, [pc, #500]	@ (8004510 <HAL_I2C_Init+0x27c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0e7      	b.n	80044fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a78      	ldr	r2, [pc, #480]	@ (8004514 <HAL_I2C_Init+0x280>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a6a      	ldr	r2, [pc, #424]	@ (8004508 <HAL_I2C_Init+0x274>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d802      	bhi.n	8004368 <HAL_I2C_Init+0xd4>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3301      	adds	r3, #1
 8004366:	e009      	b.n	800437c <HAL_I2C_Init+0xe8>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	4a69      	ldr	r2, [pc, #420]	@ (8004518 <HAL_I2C_Init+0x284>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	3301      	adds	r3, #1
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	430b      	orrs	r3, r1
 8004382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800438e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	495c      	ldr	r1, [pc, #368]	@ (8004508 <HAL_I2C_Init+0x274>)
 8004398:	428b      	cmp	r3, r1
 800439a:	d819      	bhi.n	80043d0 <HAL_I2C_Init+0x13c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e59      	subs	r1, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043b0:	400b      	ands	r3, r1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_I2C_Init+0x138>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e59      	subs	r1, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	e051      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e04f      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d111      	bne.n	80043fc <HAL_I2C_Init+0x168>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e012      	b.n	8004422 <HAL_I2C_Init+0x18e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	0099      	lsls	r1, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x196>
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <HAL_I2C_Init+0x1bc>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e58      	subs	r0, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	440b      	add	r3, r1
 8004440:	fbb0 f3f3 	udiv	r3, r0, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444e:	e00f      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	0099      	lsls	r1, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800449e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6911      	ldr	r1, [r2, #16]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	000186a0 	.word	0x000186a0
 800450c:	001e847f 	.word	0x001e847f
 8004510:	003d08ff 	.word	0x003d08ff
 8004514:	431bde83 	.word	0x431bde83
 8004518:	10624dd3 	.word	0x10624dd3

0800451c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
 800452c:	4613      	mov	r3, r2
 800452e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7fe fefe 	bl	8003330 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	f040 80e0 	bne.w	8004704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2319      	movs	r3, #25
 800454a:	2201      	movs	r2, #1
 800454c:	4970      	ldr	r1, [pc, #448]	@ (8004710 <HAL_I2C_Master_Transmit+0x1f4>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fdfa 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	e0d3      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2C_Master_Transmit+0x50>
 8004568:	2302      	movs	r3, #2
 800456a:	e0cc      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d007      	beq.n	8004592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2221      	movs	r2, #33	@ 0x21
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2210      	movs	r2, #16
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	893a      	ldrh	r2, [r7, #8]
 80045c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a50      	ldr	r2, [pc, #320]	@ (8004714 <HAL_I2C_Master_Transmit+0x1f8>)
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc4a 	bl	8004e74 <I2C_MasterRequestWrite>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e08d      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004600:	e066      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 feb8 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b04      	cmp	r3, #4
 8004618:	d107      	bne.n	800462a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06b      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d11b      	bne.n	80046a4 <HAL_I2C_Master_Transmit+0x188>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6a39      	ldr	r1, [r7, #32]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 feaf 	bl	800540c <I2C_WaitOnBTFFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d107      	bne.n	80046cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01a      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d194      	bne.n	8004602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	00100002 	.word	0x00100002
 8004714:	ffff0000 	.word	0xffff0000

08004718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	@ 0x30
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004736:	f7fe fdfb 	bl	8003330 <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	f040 8250 	bne.w	8004bea <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2319      	movs	r3, #25
 8004750:	2201      	movs	r2, #1
 8004752:	4982      	ldr	r1, [pc, #520]	@ (800495c <HAL_I2C_Mem_Read+0x244>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fcf7 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
 8004762:	e243      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_I2C_Mem_Read+0x5a>
 800476e:	2302      	movs	r3, #2
 8004770:	e23c      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d007      	beq.n	8004798 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2222      	movs	r2, #34	@ 0x22
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a62      	ldr	r2, [pc, #392]	@ (8004960 <HAL_I2C_Mem_Read+0x248>)
 80047d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047da:	88f8      	ldrh	r0, [r7, #6]
 80047dc:	893a      	ldrh	r2, [r7, #8]
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fbc4 	bl	8004f78 <I2C_RequestMemoryRead>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1f8      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e1cc      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d11e      	bne.n	8004870 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004840:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004842:	b672      	cpsid	i
}
 8004844:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800486a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800486c:	b662      	cpsie	i
}
 800486e:	e035      	b.n	80048dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11e      	bne.n	80048b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004886:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004888:	b672      	cpsid	i
}
 800488a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048b2:	b662      	cpsie	i
}
 80048b4:	e012      	b.n	80048dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048dc:	e172      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	f200 811f 	bhi.w	8004b26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d123      	bne.n	8004938 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fdd1 	bl	800549c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e173      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004936:	e145      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	2b02      	cmp	r3, #2
 800493e:	d152      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004946:	2200      	movs	r2, #0
 8004948:	4906      	ldr	r1, [pc, #24]	@ (8004964 <HAL_I2C_Mem_Read+0x24c>)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fbfc 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e148      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
 800495a:	bf00      	nop
 800495c:	00100002 	.word	0x00100002
 8004960:	ffff0000 	.word	0xffff0000
 8004964:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004968:	b672      	cpsid	i
}
 800496a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049ae:	b662      	cpsie	i
}
 80049b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049e4:	e0ee      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	4981      	ldr	r1, [pc, #516]	@ (8004bf4 <HAL_I2C_Mem_Read+0x4dc>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fba9 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0f5      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a10:	b672      	cpsid	i
}
 8004a12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a46:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf8 <HAL_I2C_Mem_Read+0x4e0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	08db      	lsrs	r3, r3, #3
 8004a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bfc <HAL_I2C_Mem_Read+0x4e4>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0a1a      	lsrs	r2, r3, #8
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00da      	lsls	r2, r3, #3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d118      	bne.n	8004a9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a8e:	b662      	cpsie	i
}
 8004a90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0a6      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d1d9      	bne.n	8004a60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004aee:	b662      	cpsie	i
}
 8004af0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b24:	e04e      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fcb6 	bl	800549c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e058      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d124      	bne.n	8004bc4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d107      	bne.n	8004b92 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f ae88 	bne.w	80048de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	@ 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010004 	.word	0x00010004
 8004bf8:	20000054 	.word	0x20000054
 8004bfc:	14f8b589 	.word	0x14f8b589

08004c00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fe fb8e 	bl	8003330 <HAL_GetTick>
 8004c14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	f040 8111 	bne.w	8004e4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2319      	movs	r3, #25
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4988      	ldr	r1, [pc, #544]	@ (8004e54 <HAL_I2C_IsDeviceReady+0x254>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fa88 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e104      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_IsDeviceReady+0x50>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0fd      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d007      	beq.n	8004c76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2224      	movs	r2, #36	@ 0x24
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a70      	ldr	r2, [pc, #448]	@ (8004e58 <HAL_I2C_IsDeviceReady+0x258>)
 8004c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fa46 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd0:	d103      	bne.n	8004cda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0b6      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fe fb1f 	bl	8003330 <HAL_GetTick>
 8004cf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d22:	e025      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fe fb04 	bl	8003330 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <HAL_I2C_IsDeviceReady+0x13a>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22a0      	movs	r2, #160	@ 0xa0
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d7a:	d005      	beq.n	8004d88 <HAL_I2C_IsDeviceReady+0x188>
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_I2C_IsDeviceReady+0x188>
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0cd      	beq.n	8004d24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d129      	bne.n	8004df2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2319      	movs	r3, #25
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4921      	ldr	r1, [pc, #132]	@ (8004e54 <HAL_I2C_IsDeviceReady+0x254>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f9ba 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e036      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e02c      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2319      	movs	r3, #25
 8004e12:	2201      	movs	r2, #1
 8004e14:	490f      	ldr	r1, [pc, #60]	@ (8004e54 <HAL_I2C_IsDeviceReady+0x254>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f996 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e012      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	f4ff af32 	bcc.w	8004c9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00100002 	.word	0x00100002
 8004e58:	ffff0000 	.word	0xffff0000

08004e5c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
	...

08004e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d006      	beq.n	8004e9e <I2C_MasterRequestWrite+0x2a>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d003      	beq.n	8004e9e <I2C_MasterRequestWrite+0x2a>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e9c:	d108      	bne.n	8004eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	2b12      	cmp	r3, #18
 8004eb6:	d107      	bne.n	8004ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f937 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	d103      	bne.n	8004ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e035      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f04:	d108      	bne.n	8004f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e01b      	b.n	8004f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	11db      	asrs	r3, r3, #7
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f063 030f 	orn	r3, r3, #15
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	490e      	ldr	r1, [pc, #56]	@ (8004f70 <I2C_MasterRequestWrite+0xfc>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f980 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e010      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <I2C_MasterRequestWrite+0x100>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f970 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	00010008 	.word	0x00010008
 8004f74:	00010002 	.word	0x00010002

08004f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f8c2 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd8:	d103      	bne.n	8004fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0aa      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fe6:	897b      	ldrh	r3, [r7, #10]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	4952      	ldr	r1, [pc, #328]	@ (8005144 <I2C_RequestMemoryRead+0x1cc>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f91d 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e097      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f9a8 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	2b04      	cmp	r3, #4
 8005038:	d107      	bne.n	800504a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e076      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]
 800505e:	e021      	b.n	80050a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b29b      	uxth	r3, r3
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005070:	6a39      	ldr	r1, [r7, #32]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f982 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2b04      	cmp	r3, #4
 8005084:	d107      	bne.n	8005096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e050      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	6a39      	ldr	r1, [r7, #32]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f967 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d107      	bne.n	80050cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e035      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f82b 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00d      	beq.n	8005114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005106:	d103      	bne.n	8005110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e013      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005114:	897b      	ldrh	r3, [r7, #10]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	4906      	ldr	r1, [pc, #24]	@ (8005144 <I2C_RequestMemoryRead+0x1cc>)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f886 	bl	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	00010002 	.word	0x00010002

08005148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005158:	e048      	b.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d044      	beq.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fe f8e5 	bl	8003330 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d139      	bne.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10d      	bne.n	800519e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	43da      	mvns	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	e00c      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	43da      	mvns	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d116      	bne.n	80051ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e023      	b.n	8005234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10d      	bne.n	8005212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	e00c      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	43da      	mvns	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	429a      	cmp	r2, r3
 8005230:	d093      	beq.n	800515a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524a:	e071      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d123      	bne.n	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e067      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d041      	beq.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe f840 	bl	8003330 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d136      	bne.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10c      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	43da      	mvns	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	e00b      	b.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	43da      	mvns	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e021      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10c      	bne.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	43da      	mvns	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e00b      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f af6d 	bne.w	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005388:	e034      	b.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f8e3 	bl	8005556 <I2C_IsAcknowledgeFailed>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e034      	b.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d028      	beq.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fd ffc5 	bl	8003330 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11d      	bne.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d016      	beq.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e007      	b.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d1c3      	bne.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005418:	e034      	b.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f89b 	bl	8005556 <I2C_IsAcknowledgeFailed>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e034      	b.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d028      	beq.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fd ff7d 	bl	8003330 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11d      	bne.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d016      	beq.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e007      	b.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b04      	cmp	r3, #4
 8005490:	d1c3      	bne.n	800541a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a8:	e049      	b.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d119      	bne.n	80054ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e030      	b.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ec:	f7fd ff20 	bl	8003330 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d016      	beq.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e007      	b.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d1ae      	bne.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d11b      	bne.n	80055a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f043 0204 	orr.w	r2, r3, #4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80055b8:	4b03      	ldr	r3, [pc, #12]	@ (80055c8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	420e0020 	.word	0x420e0020

080055cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e272      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8087 	beq.w	80056fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ec:	4b92      	ldr	r3, [pc, #584]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d00c      	beq.n	8005612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d112      	bne.n	800562a <HAL_RCC_OscConfig+0x5e>
 8005604:	4b8c      	ldr	r3, [pc, #560]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005610:	d10b      	bne.n	800562a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005612:	4b89      	ldr	r3, [pc, #548]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d06c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x12c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d168      	bne.n	80056f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e24c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x76>
 8005634:	4b80      	ldr	r3, [pc, #512]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7f      	ldr	r2, [pc, #508]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e02e      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x98>
 800564a:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7a      	ldr	r2, [pc, #488]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b78      	ldr	r3, [pc, #480]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a77      	ldr	r2, [pc, #476]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800565c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0xbc>
 800566e:	4b72      	ldr	r3, [pc, #456]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a71      	ldr	r2, [pc, #452]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b6f      	ldr	r3, [pc, #444]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6e      	ldr	r2, [pc, #440]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xd4>
 8005688:	4b6b      	ldr	r3, [pc, #428]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6a      	ldr	r2, [pc, #424]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b68      	ldr	r3, [pc, #416]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a67      	ldr	r2, [pc, #412]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fd fe42 	bl	8003330 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fd fe3e 	bl	8003330 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e200      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xe4>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fd fe2e 	bl	8003330 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fd fe2a 	bl	8003330 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1ec      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b53      	ldr	r3, [pc, #332]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x10c>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d063      	beq.n	80057ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005706:	4b4c      	ldr	r3, [pc, #304]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005712:	4b49      	ldr	r3, [pc, #292]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x18c>
 800571e:	4b46      	ldr	r3, [pc, #280]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b43      	ldr	r3, [pc, #268]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x176>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1c0      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4939      	ldr	r1, [pc, #228]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e03a      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b36      	ldr	r3, [pc, #216]	@ (800583c <HAL_RCC_OscConfig+0x270>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fd fde3 	bl	8003330 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576e:	f7fd fddf 	bl	8003330 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1a1      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578c:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4927      	ldr	r1, [pc, #156]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a2:	4b26      	ldr	r3, [pc, #152]	@ (800583c <HAL_RCC_OscConfig+0x270>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fd fdc2 	bl	8003330 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b0:	f7fd fdbe 	bl	8003330 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e180      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03a      	beq.n	8005850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d019      	beq.n	8005816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <HAL_RCC_OscConfig+0x274>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e8:	f7fd fda2 	bl	8003330 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fd fd9e 	bl	8003330 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e160      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_RCC_OscConfig+0x26c>)
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800580e:	2001      	movs	r0, #1
 8005810:	f000 face 	bl	8005db0 <RCC_Delay>
 8005814:	e01c      	b.n	8005850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <HAL_RCC_OscConfig+0x274>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581c:	f7fd fd88 	bl	8003330 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005822:	e00f      	b.n	8005844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005824:	f7fd fd84 	bl	8003330 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d908      	bls.n	8005844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e146      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	42420000 	.word	0x42420000
 8005840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	4b92      	ldr	r3, [pc, #584]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e9      	bne.n	8005824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a6 	beq.w	80059aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005862:	4b8b      	ldr	r3, [pc, #556]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4b88      	ldr	r3, [pc, #544]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4a87      	ldr	r2, [pc, #540]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005878:	61d3      	str	r3, [r2, #28]
 800587a:	4b85      	ldr	r3, [pc, #532]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b82      	ldr	r3, [pc, #520]	@ (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d118      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b7f      	ldr	r3, [pc, #508]	@ (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fd fd45 	bl	8003330 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fd fd41 	bl	8003330 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b64      	cmp	r3, #100	@ 0x64
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e103      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b75      	ldr	r3, [pc, #468]	@ (8005a94 <HAL_RCC_OscConfig+0x4c8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x312>
 80058d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6213      	str	r3, [r2, #32]
 80058dc:	e02d      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10c      	bne.n	8005900 <HAL_RCC_OscConfig+0x334>
 80058e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	4a69      	ldr	r2, [pc, #420]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6213      	str	r3, [r2, #32]
 80058f2:	4b67      	ldr	r3, [pc, #412]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4a66      	ldr	r2, [pc, #408]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	6213      	str	r3, [r2, #32]
 80058fe:	e01c      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d10c      	bne.n	8005922 <HAL_RCC_OscConfig+0x356>
 8005908:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	4a60      	ldr	r2, [pc, #384]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	6213      	str	r3, [r2, #32]
 8005914:	4b5e      	ldr	r3, [pc, #376]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	4a5d      	ldr	r2, [pc, #372]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	6213      	str	r3, [r2, #32]
 8005920:	e00b      	b.n	800593a <HAL_RCC_OscConfig+0x36e>
 8005922:	4b5b      	ldr	r3, [pc, #364]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	4a5a      	ldr	r2, [pc, #360]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6213      	str	r3, [r2, #32]
 800592e:	4b58      	ldr	r3, [pc, #352]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	4a57      	ldr	r2, [pc, #348]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	f023 0304 	bic.w	r3, r3, #4
 8005938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d015      	beq.n	800596e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fd fcf5 	bl	8003330 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	e00a      	b.n	8005960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fd fcf1 	bl	8003330 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0b1      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005960:	4b4b      	ldr	r3, [pc, #300]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RCC_OscConfig+0x37e>
 800596c:	e014      	b.n	8005998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596e:	f7fd fcdf 	bl	8003330 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd fcdb 	bl	8003330 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e09b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598c:	4b40      	ldr	r3, [pc, #256]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ee      	bne.n	8005976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b4:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d061      	beq.n	8005a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d146      	bne.n	8005a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c8:	4b33      	ldr	r3, [pc, #204]	@ (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fd fcaf 	bl	8003330 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d6:	f7fd fcab 	bl	8003330 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e06d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e8:	4b29      	ldr	r3, [pc, #164]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059fc:	d108      	bne.n	8005a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059fe:	4b24      	ldr	r3, [pc, #144]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	4921      	ldr	r1, [pc, #132]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a10:	4b1f      	ldr	r3, [pc, #124]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a19      	ldr	r1, [r3, #32]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	430b      	orrs	r3, r1
 8005a22:	491b      	ldr	r1, [pc, #108]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fd fc7f 	bl	8003330 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fd fc7b 	bl	8003330 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e03d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a48:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x46a>
 8005a54:	e035      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCC_OscConfig+0x4cc>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fd fc68 	bl	8003330 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fd fc64 	bl	8003330 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e026      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCC_OscConfig+0x4c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x498>
 8005a82:	e01e      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e019      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <HAL_RCC_OscConfig+0x500>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d106      	bne.n	8005abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d0      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d910      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b67      	ldr	r3, [pc, #412]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 0207 	bic.w	r2, r3, #7
 8005afa:	4965      	ldr	r1, [pc, #404]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b63      	ldr	r3, [pc, #396]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0b8      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b2c:	4b59      	ldr	r3, [pc, #356]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a58      	ldr	r2, [pc, #352]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b44:	4b53      	ldr	r3, [pc, #332]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a52      	ldr	r2, [pc, #328]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b50:	4b50      	ldr	r3, [pc, #320]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	494d      	ldr	r1, [pc, #308]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d040      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	4b47      	ldr	r3, [pc, #284]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d115      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e07f      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b41      	ldr	r3, [pc, #260]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e073      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06b      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bae:	4b39      	ldr	r3, [pc, #228]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f023 0203 	bic.w	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4936      	ldr	r1, [pc, #216]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fd fbb6 	bl	8003330 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7fd fbb2 	bl	8003330 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e053      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	4b2d      	ldr	r3, [pc, #180]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 020c 	and.w	r2, r3, #12
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1eb      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b27      	ldr	r3, [pc, #156]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d210      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	4922      	ldr	r1, [pc, #136]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b20      	ldr	r3, [pc, #128]	@ (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e032      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4916      	ldr	r1, [pc, #88]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c4a:	4b12      	ldr	r3, [pc, #72]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	490e      	ldr	r1, [pc, #56]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c5e:	f000 f821 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	490a      	ldr	r1, [pc, #40]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c70:	5ccb      	ldrb	r3, [r1, r3]
 8005c72:	fa22 f303 	lsr.w	r3, r2, r3
 8005c76:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <HAL_RCC_ClockConfig+0x1cc>)
 8005c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fd fb14 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	080099ac 	.word	0x080099ac
 8005c9c:	20000054 	.word	0x20000054
 8005ca0:	20000058 	.word	0x20000058

08005ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d002      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d003      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x36>
 8005cd2:	e027      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cd4:	4b19      	ldr	r3, [pc, #100]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005cd6:	613b      	str	r3, [r7, #16]
      break;
 8005cd8:	e027      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0c9b      	lsrs	r3, r3, #18
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ce4:	5cd3      	ldrb	r3, [r2, r3]
 8005ce6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cf2:	4b11      	ldr	r3, [pc, #68]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0c5b      	lsrs	r3, r3, #17
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	4a11      	ldr	r2, [pc, #68]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d06:	fb03 f202 	mul.w	r2, r3, r2
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e004      	b.n	8005d1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	613b      	str	r3, [r7, #16]
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d26:	613b      	str	r3, [r7, #16]
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	693b      	ldr	r3, [r7, #16]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	007a1200 	.word	0x007a1200
 8005d40:	080099c4 	.word	0x080099c4
 8005d44:	080099d4 	.word	0x080099d4
 8005d48:	003d0900 	.word	0x003d0900

08005d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d50:	4b02      	ldr	r3, [pc, #8]	@ (8005d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	20000054 	.word	0x20000054

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d64:	f7ff fff2 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	@ (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	080099bc 	.word	0x080099bc

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffde 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0adb      	lsrs	r3, r3, #11
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	@ (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40021000 	.word	0x40021000
 8005dac:	080099bc 	.word	0x080099bc

08005db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005db8:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <RCC_Delay+0x34>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005de8 <RCC_Delay+0x38>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0a5b      	lsrs	r3, r3, #9
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dcc:	bf00      	nop
  }
  while (Delay --);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1e5a      	subs	r2, r3, #1
 8005dd2:	60fa      	str	r2, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f9      	bne.n	8005dcc <RCC_Delay+0x1c>
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	20000054 	.word	0x20000054
 8005de8:	10624dd3 	.word	0x10624dd3

08005dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d07d      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b4c      	ldr	r3, [pc, #304]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e22:	61d3      	str	r3, [r2, #28]
 8005e24:	4b49      	ldr	r3, [pc, #292]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	4b46      	ldr	r3, [pc, #280]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d118      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e40:	4b43      	ldr	r3, [pc, #268]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a42      	ldr	r2, [pc, #264]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4c:	f7fd fa70 	bl	8003330 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e54:	f7fd fa6c 	bl	8003330 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	@ 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e06d      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	4b3a      	ldr	r3, [pc, #232]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e72:	4b36      	ldr	r3, [pc, #216]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d027      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e90:	4b2e      	ldr	r3, [pc, #184]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ea6:	4a29      	ldr	r2, [pc, #164]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fd fa3b 	bl	8003330 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fd fa37 	bl	8003330 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e036      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ee      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4917      	ldr	r1, [pc, #92]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef8:	4b14      	ldr	r3, [pc, #80]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4a13      	ldr	r2, [pc, #76]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	490b      	ldr	r1, [pc, #44]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f2e:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4904      	ldr	r1, [pc, #16]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40007000 	.word	0x40007000
 8005f54:	42420440 	.word	0x42420440

08005f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	2300      	movs	r3, #0
 8005f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	f200 808a 	bhi.w	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d045      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d075      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f8e:	e082      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005f90:	4b46      	ldr	r3, [pc, #280]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f96:	4b45      	ldr	r3, [pc, #276]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d07b      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	0c9b      	lsrs	r3, r3, #18
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	4a41      	ldr	r2, [pc, #260]	@ (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005fac:	5cd3      	ldrb	r3, [r2, r3]
 8005fae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d015      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fba:	4b3c      	ldr	r3, [pc, #240]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	0c5b      	lsrs	r3, r3, #17
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005fc6:	5cd3      	ldrb	r3, [r2, r3]
 8005fc8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005fd4:	4a38      	ldr	r2, [pc, #224]	@ (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4a34      	ldr	r2, [pc, #208]	@ (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	61bb      	str	r3, [r7, #24]
      break;
 8006002:	e04a      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
      break;
 8006012:	e042      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006014:	4b25      	ldr	r3, [pc, #148]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006024:	d108      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e01f      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006042:	d109      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006044:	4b19      	ldr	r3, [pc, #100]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006050:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00f      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800605e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006062:	d11c      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006064:	4b11      	ldr	r3, [pc, #68]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d016      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006070:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006074:	61bb      	str	r3, [r7, #24]
      break;
 8006076:	e012      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006078:	e011      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800607a:	f7ff fe85 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 800607e:	4602      	mov	r2, r0
 8006080:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0b9b      	lsrs	r3, r3, #14
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	61bb      	str	r3, [r7, #24]
      break;
 8006094:	e004      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800609e:	bf00      	nop
    }
  }
  return (frequency);
 80060a0:	69bb      	ldr	r3, [r7, #24]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	080099d8 	.word	0x080099d8
 80060b4:	080099e8 	.word	0x080099e8
 80060b8:	007a1200 	.word	0x007a1200
 80060bc:	003d0900 	.word	0x003d0900
 80060c0:	aaaaaaab 	.word	0xaaaaaaab

080060c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07a      	b.n	80061d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7c5b      	ldrb	r3, [r3, #17]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc feea 	bl	8002ec4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb81 	bl	80067fe <HAL_RTC_WaitForSynchro>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e061      	b.n	80061d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc3a 	bl	8006986 <RTC_EnterInitMode>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e056      	b.n	80061d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0207 	bic.w	r2, r2, #7
 8006130:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800613a:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <HAL_RTC_Init+0x114>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	4a26      	ldr	r2, [pc, #152]	@ (80061d8 <HAL_RTC_Init+0x114>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006146:	4b24      	ldr	r3, [pc, #144]	@ (80061d8 <HAL_RTC_Init+0x114>)
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4921      	ldr	r1, [pc, #132]	@ (80061d8 <HAL_RTC_Init+0x114>)
 8006154:	4313      	orrs	r3, r2
 8006156:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d003      	beq.n	800616a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e00e      	b.n	8006188 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800616a:	2001      	movs	r0, #1
 800616c:	f7ff fef4 	bl	8005f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8006170:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2204      	movs	r2, #4
 800617c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e026      	b.n	80061d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b01      	subs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	0c1a      	lsrs	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 020f 	and.w	r2, r2, #15
 8006194:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	b292      	uxth	r2, r2
 800619e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fc18 	bl	80069d6 <RTC_ExitInitMode>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2204      	movs	r2, #4
 80061b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00c      	b.n	80061d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40006c00 	.word	0x40006c00

080061dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_RTC_SetTime+0x20>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e080      	b.n	8006302 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	7c1b      	ldrb	r3, [r3, #16]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_RTC_SetTime+0x30>
 8006208:	2302      	movs	r3, #2
 800620a:	e07a      	b.n	8006302 <HAL_RTC_SetTime+0x126>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006228:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	4619      	mov	r1, r3
 8006232:	460b      	mov	r3, r1
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800623a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e01e      	b.n	8006284 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc08 	bl	8006a60 <RTC_Bcd2ToByte>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006258:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fbfd 	bl	8006a60 <RTC_Bcd2ToByte>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006272:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	789b      	ldrb	r3, [r3, #2]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fbf1 	bl	8006a60 <RTC_Bcd2ToByte>
 800627e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006280:	4423      	add	r3, r4
 8006282:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fb16 	bl	80068b8 <RTC_WriteTimeCounter>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2204      	movs	r2, #4
 8006296:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e02f      	b.n	8006302 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0205 	bic.w	r2, r2, #5
 80062b0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb27 	bl	8006906 <RTC_ReadAlarmCounter>
 80062b8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d018      	beq.n	80062f4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d214      	bcs.n	80062f4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80062d0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80062d4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80062d6:	6939      	ldr	r1, [r7, #16]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fb2d 	bl	8006938 <RTC_WriteAlarmCounter>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2204      	movs	r2, #4
 80062e8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e006      	b.n	8006302 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006300:	2300      	movs	r3, #0
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd90      	pop	{r4, r7, pc}
	...

0800630c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_RTC_GetTime+0x28>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b5      	b.n	80064a4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e0ac      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fa84 	bl	8006858 <RTC_ReadTimeCounter>
 8006350:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4a55      	ldr	r2, [pc, #340]	@ (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0adb      	lsrs	r3, r3, #11
 800635c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4b52      	ldr	r3, [pc, #328]	@ (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006362:	fba3 1302 	umull	r1, r3, r3, r2
 8006366:	0adb      	lsrs	r3, r3, #11
 8006368:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	4a4f      	ldr	r2, [pc, #316]	@ (80064b0 <HAL_RTC_GetTime+0x1a4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	4a4a      	ldr	r2, [pc, #296]	@ (80064ac <HAL_RTC_GetTime+0x1a0>)
 8006384:	fba2 1203 	umull	r1, r2, r2, r3
 8006388:	0ad2      	lsrs	r2, r2, #11
 800638a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800638e:	fb01 f202 	mul.w	r2, r1, r2
 8006392:	1a9a      	subs	r2, r3, r2
 8006394:	4b46      	ldr	r3, [pc, #280]	@ (80064b0 <HAL_RTC_GetTime+0x1a4>)
 8006396:	fba3 1302 	umull	r1, r3, r3, r2
 800639a:	0959      	lsrs	r1, r3, #5
 800639c:	460b      	mov	r3, r1
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	1a5b      	subs	r3, r3, r1
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	1ad1      	subs	r1, r2, r3
 80063a6:	b2ca      	uxtb	r2, r1
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b17      	cmp	r3, #23
 80063b0:	d955      	bls.n	800645e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4a3f      	ldr	r2, [pc, #252]	@ (80064b4 <HAL_RTC_GetTime+0x1a8>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80063be:	6939      	ldr	r1, [r7, #16]
 80063c0:	4b3c      	ldr	r3, [pc, #240]	@ (80064b4 <HAL_RTC_GetTime+0x1a8>)
 80063c2:	fba3 2301 	umull	r2, r3, r3, r1
 80063c6:	091a      	lsrs	r2, r3, #4
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1aca      	subs	r2, r1, r3
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fa94 	bl	8006906 <RTC_ReadAlarmCounter>
 80063de:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d008      	beq.n	80063fa <HAL_RTC_GetTime+0xee>
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d904      	bls.n	80063fa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e002      	b.n	8006400 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <HAL_RTC_GetTime+0x1ac>)
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa51 	bl	80068b8 <RTC_WriteTimeCounter>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e041      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d00c      	beq.n	8006442 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006430:	69f9      	ldr	r1, [r7, #28]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fa80 	bl	8006938 <RTC_WriteAlarmCounter>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e030      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006442:	69f9      	ldr	r1, [r7, #28]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fa77 	bl	8006938 <RTC_WriteAlarmCounter>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e027      	b.n	80064a4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fb1f 	bl	8006a9a <RTC_DateUpdate>
 800645c:	e003      	b.n	8006466 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fad8 	bl	8006a26 <RTC_ByteToBcd2>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 facf 	bl	8006a26 <RTC_ByteToBcd2>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	789b      	ldrb	r3, [r3, #2]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fac6 	bl	8006a26 <RTC_ByteToBcd2>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3720      	adds	r7, #32
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	91a2b3c5 	.word	0x91a2b3c5
 80064b0:	88888889 	.word	0x88888889
 80064b4:	aaaaaaab 	.word	0xaaaaaaab
 80064b8:	00015180 	.word	0x00015180

080064bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_RTC_SetDate+0x24>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e097      	b.n	8006614 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7c1b      	ldrb	r3, [r3, #16]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_RTC_SetDate+0x34>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e091      	b.n	8006614 <HAL_RTC_SetDate+0x158>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78da      	ldrb	r2, [r3, #3]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	785a      	ldrb	r2, [r3, #1]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	789a      	ldrb	r2, [r3, #2]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	739a      	strb	r2, [r3, #14]
 800651a:	e01a      	b.n	8006552 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fa9d 	bl	8006a60 <RTC_Bcd2ToByte>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fa94 	bl	8006a60 <RTC_Bcd2ToByte>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	789b      	ldrb	r3, [r3, #2]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fa8b 	bl	8006a60 <RTC_Bcd2ToByte>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7bdb      	ldrb	r3, [r3, #15]
 8006556:	4618      	mov	r0, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7b59      	ldrb	r1, [r3, #13]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7b9b      	ldrb	r3, [r3, #14]
 8006560:	461a      	mov	r2, r3
 8006562:	f000 fb75 	bl	8006c50 <RTC_WeekDayNum>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7b1a      	ldrb	r2, [r3, #12]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f96e 	bl	8006858 <RTC_ReadTimeCounter>
 800657c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4a26      	ldr	r2, [pc, #152]	@ (800661c <HAL_RTC_SetDate+0x160>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0adb      	lsrs	r3, r3, #11
 8006588:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b18      	cmp	r3, #24
 800658e:	d93a      	bls.n	8006606 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4a23      	ldr	r2, [pc, #140]	@ (8006620 <HAL_RTC_SetDate+0x164>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	4a22      	ldr	r2, [pc, #136]	@ (8006624 <HAL_RTC_SetDate+0x168>)
 800659c:	fb02 f303 	mul.w	r3, r2, r3
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f985 	bl	80068b8 <RTC_WriteTimeCounter>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2204      	movs	r2, #4
 80065b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e027      	b.n	8006614 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f99e 	bl	8006906 <RTC_ReadAlarmCounter>
 80065ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d018      	beq.n	8006606 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d214      	bcs.n	8006606 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80065e2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80065e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80065e8:	69b9      	ldr	r1, [r7, #24]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f9a4 	bl	8006938 <RTC_WriteAlarmCounter>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2204      	movs	r2, #4
 80065fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e006      	b.n	8006614 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	91a2b3c5 	.word	0x91a2b3c5
 8006620:	aaaaaaab 	.word	0xaaaaaaab
 8006624:	00015180 	.word	0x00015180

08006628 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b089      	sub	sp, #36	@ 0x24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	2100      	movs	r1, #0
 800663e:	460a      	mov	r2, r1
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	460a      	mov	r2, r1
 8006644:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_RTC_SetAlarm_IT+0x2a>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e099      	b.n	800678a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7c1b      	ldrb	r3, [r3, #16]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_RTC_SetAlarm_IT+0x3a>
 800665e:	2302      	movs	r3, #2
 8006660:	e093      	b.n	800678a <HAL_RTC_SetAlarm_IT+0x162>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2202      	movs	r2, #2
 800666c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	2200      	movs	r2, #0
 8006674:	4619      	mov	r1, r3
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fe48 	bl	800630c <HAL_RTC_GetTime>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e081      	b.n	800678a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006686:	7d3b      	ldrb	r3, [r7, #20]
 8006688:	461a      	mov	r2, r3
 800668a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800668e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8006692:	7d7b      	ldrb	r3, [r7, #21]
 8006694:	4619      	mov	r1, r3
 8006696:	460b      	mov	r3, r1
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800669e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80066a0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80066a2:	4413      	add	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d113      	bne.n	80066d4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80066b6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4619      	mov	r1, r3
 80066c0:	460b      	mov	r3, r1
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	1a5b      	subs	r3, r3, r1
 80066c6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80066c8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80066ce:	4413      	add	r3, r2
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	e01e      	b.n	8006712 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f9c1 	bl	8006a60 <RTC_Bcd2ToByte>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80066e6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f9b6 	bl	8006a60 <RTC_Bcd2ToByte>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	4613      	mov	r3, r2
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006700:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f9aa 	bl	8006a60 <RTC_Bcd2ToByte>
 800670c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800670e:	4423      	add	r3, r4
 8006710:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d205      	bcs.n	8006726 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006720:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006724:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006726:	69f9      	ldr	r1, [r7, #28]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f905 	bl	8006938 <RTC_WriteAlarmCounter>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2204      	movs	r2, #4
 8006738:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e022      	b.n	800678a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0202 	bic.w	r2, r2, #2
 8006752:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0202 	orr.w	r2, r2, #2
 8006762:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <HAL_RTC_SetAlarm_IT+0x16c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a0a      	ldr	r2, [pc, #40]	@ (8006794 <HAL_RTC_SetAlarm_IT+0x16c>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006770:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <HAL_RTC_SetAlarm_IT+0x16c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4a07      	ldr	r2, [pc, #28]	@ (8006794 <HAL_RTC_SetAlarm_IT+0x16c>)
 8006776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800677a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006788:	2300      	movs	r3, #0
  }
}
 800678a:	4618      	mov	r0, r3
 800678c:	3724      	adds	r7, #36	@ 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}
 8006792:	bf00      	nop
 8006794:	40010400 	.word	0x40010400

08006798 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d011      	beq.n	80067d2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f815 	bl	80067ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0202 	bic.w	r2, r2, #2
 80067d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80067d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80067d8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	745a      	strb	r2, [r3, #17]
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40010400 	.word	0x40010400

080067ec <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr

080067fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e01d      	b.n	8006850 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0208 	bic.w	r2, r2, #8
 8006822:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006824:	f7fc fd84 	bl	8003330 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800682a:	e009      	b.n	8006840 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800682c:	f7fc fd80 	bl	8003330 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800683a:	d901      	bls.n	8006840 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e007      	b.n	8006850 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0ee      	beq.n	800682c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	827b      	strh	r3, [r7, #18]
 8006864:	2300      	movs	r3, #0
 8006866:	823b      	strh	r3, [r7, #16]
 8006868:	2300      	movs	r3, #0
 800686a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006888:	8a7a      	ldrh	r2, [r7, #18]
 800688a:	8a3b      	ldrh	r3, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d008      	beq.n	80068a2 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006890:	8a3b      	ldrh	r3, [r7, #16]
 8006892:	041a      	lsls	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	b29b      	uxth	r3, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e004      	b.n	80068ac <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80068a2:	8a7b      	ldrh	r3, [r7, #18]
 80068a4:	041a      	lsls	r2, r3, #16
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80068ac:	697b      	ldr	r3, [r7, #20]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f85d 	bl	8006986 <RTC_EnterInitMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
 80068d6:	e011      	b.n	80068fc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	0c12      	lsrs	r2, r2, #16
 80068e0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	b292      	uxth	r2, r2
 80068ea:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f872 	bl	80069d6 <RTC_ExitInitMode>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	81fb      	strh	r3, [r7, #14]
 8006912:	2300      	movs	r3, #0
 8006914:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006926:	89fb      	ldrh	r3, [r7, #14]
 8006928:	041a      	lsls	r2, r3, #16
 800692a:	89bb      	ldrh	r3, [r7, #12]
 800692c:	4313      	orrs	r3, r2
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f81d 	bl	8006986 <RTC_EnterInitMode>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e011      	b.n	800697c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	0c12      	lsrs	r2, r2, #16
 8006960:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	b292      	uxth	r2, r2
 800696a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f832 	bl	80069d6 <RTC_ExitInitMode>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006992:	f7fc fccd 	bl	8003330 <HAL_GetTick>
 8006996:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006998:	e009      	b.n	80069ae <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800699a:	f7fc fcc9 	bl	8003330 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069a8:	d901      	bls.n	80069ae <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e00f      	b.n	80069ce <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0ee      	beq.n	800699a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0210 	orr.w	r2, r2, #16
 80069ca:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0210 	bic.w	r2, r2, #16
 80069f0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80069f2:	f7fc fc9d 	bl	8003330 <HAL_GetTick>
 80069f6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069f8:	e009      	b.n	8006a0e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80069fa:	f7fc fc99 	bl	8003330 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a08:	d901      	bls.n	8006a0e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e007      	b.n	8006a1e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0ee      	beq.n	80069fa <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006a34:	e005      	b.n	8006a42 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	3b0a      	subs	r3, #10
 8006a40:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d8f6      	bhi.n	8006a36 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b2db      	uxtb	r3, r3
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	b2db      	uxtb	r3, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7bdb      	ldrb	r3, [r3, #15]
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7b5b      	ldrb	r3, [r3, #13]
 8006abe:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7b9b      	ldrb	r3, [r3, #14]
 8006ac4:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	e06f      	b.n	8006bac <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d011      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d00e      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d00b      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d008      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d005      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b0a      	cmp	r3, #10
 8006aee:	d002      	beq.n	8006af6 <RTC_DateUpdate+0x5c>
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d117      	bne.n	8006b26 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b1e      	cmp	r3, #30
 8006afa:	d803      	bhi.n	8006b04 <RTC_DateUpdate+0x6a>
      {
        day++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b02:	e050      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b0c      	cmp	r3, #12
 8006b08:	d005      	beq.n	8006b16 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b14:	e047      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006b16:	2301      	movs	r3, #1
 8006b18:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
          year++;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006b24:	e03f      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d008      	beq.n	8006b3e <RTC_DateUpdate+0xa4>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d005      	beq.n	8006b3e <RTC_DateUpdate+0xa4>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b09      	cmp	r3, #9
 8006b36:	d002      	beq.n	8006b3e <RTC_DateUpdate+0xa4>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b0b      	cmp	r3, #11
 8006b3c:	d10c      	bne.n	8006b58 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b1d      	cmp	r3, #29
 8006b42:	d803      	bhi.n	8006b4c <RTC_DateUpdate+0xb2>
      {
        day++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b4a:	e02c      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006b52:	2301      	movs	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b56:	e026      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d123      	bne.n	8006ba6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b1b      	cmp	r3, #27
 8006b62:	d803      	bhi.n	8006b6c <RTC_DateUpdate+0xd2>
      {
        day++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	e01c      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b1c      	cmp	r3, #28
 8006b70:	d111      	bne.n	8006b96 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f838 	bl	8006bec <RTC_IsLeapYear>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <RTC_DateUpdate+0xf0>
        {
          day++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e00d      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b90:	2301      	movs	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e007      	b.n	8006ba6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b1d      	cmp	r3, #29
 8006b9a:	d104      	bne.n	8006ba6 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d38b      	bcc.n	8006acc <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f000 f83a 	bl	8006c50 <RTC_WeekDayNum>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	731a      	strb	r2, [r3, #12]
}
 8006be4:	bf00      	nop
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e01d      	b.n	8006c42 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	4a10      	ldr	r2, [pc, #64]	@ (8006c4c <RTC_IsLeapYear+0x60>)
 8006c0a:	fba2 1203 	umull	r1, r2, r2, r3
 8006c0e:	0952      	lsrs	r2, r2, #5
 8006c10:	2164      	movs	r1, #100	@ 0x64
 8006c12:	fb01 f202 	mul.w	r2, r1, r2
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e00f      	b.n	8006c42 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	4a09      	ldr	r2, [pc, #36]	@ (8006c4c <RTC_IsLeapYear+0x60>)
 8006c26:	fba2 1203 	umull	r1, r2, r2, r3
 8006c2a:	09d2      	lsrs	r2, r2, #7
 8006c2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006c30:	fb01 f202 	mul.w	r2, r1, r2
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006c40:	2300      	movs	r3, #0
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr
 8006c4c:	51eb851f 	.word	0x51eb851f

08006c50 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006c6e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d82d      	bhi.n	8006cd2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	4a2c      	ldr	r2, [pc, #176]	@ (8006d34 <RTC_WeekDayNum+0xe4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	085a      	lsrs	r2, r3, #1
 8006c8a:	78bb      	ldrb	r3, [r7, #2]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	441a      	add	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	089b      	lsrs	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4926      	ldr	r1, [pc, #152]	@ (8006d38 <RTC_WeekDayNum+0xe8>)
 8006ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	4922      	ldr	r1, [pc, #136]	@ (8006d38 <RTC_WeekDayNum+0xe8>)
 8006cae:	fba1 1303 	umull	r1, r3, r1, r3
 8006cb2:	09db      	lsrs	r3, r3, #7
 8006cb4:	4413      	add	r3, r2
 8006cb6:	1d1a      	adds	r2, r3, #4
 8006cb8:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <RTC_WeekDayNum+0xec>)
 8006cba:	fba3 1302 	umull	r1, r3, r3, r2
 8006cbe:	1ad1      	subs	r1, r2, r3
 8006cc0:	0849      	lsrs	r1, r1, #1
 8006cc2:	440b      	add	r3, r1
 8006cc4:	0899      	lsrs	r1, r3, #2
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e029      	b.n	8006d26 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <RTC_WeekDayNum+0xe4>)
 8006ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce4:	085a      	lsrs	r2, r3, #1
 8006ce6:	78bb      	ldrb	r3, [r7, #2]
 8006ce8:	441a      	add	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	441a      	add	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4910      	ldr	r1, [pc, #64]	@ (8006d38 <RTC_WeekDayNum+0xe8>)
 8006cf8:	fba1 1303 	umull	r1, r3, r1, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	490d      	ldr	r1, [pc, #52]	@ (8006d38 <RTC_WeekDayNum+0xe8>)
 8006d04:	fba1 1303 	umull	r1, r3, r1, r3
 8006d08:	09db      	lsrs	r3, r3, #7
 8006d0a:	4413      	add	r3, r2
 8006d0c:	1c9a      	adds	r2, r3, #2
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <RTC_WeekDayNum+0xec>)
 8006d10:	fba3 1302 	umull	r1, r3, r3, r2
 8006d14:	1ad1      	subs	r1, r2, r3
 8006d16:	0849      	lsrs	r1, r1, #1
 8006d18:	440b      	add	r3, r1
 8006d1a:	0899      	lsrs	r1, r3, #2
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	1a5b      	subs	r3, r3, r1
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	b2db      	uxtb	r3, r3
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr
 8006d34:	38e38e39 	.word	0x38e38e39
 8006d38:	51eb851f 	.word	0x51eb851f
 8006d3c:	24924925 	.word	0x24924925

08006d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e076      	b.n	8006e40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d108      	bne.n	8006d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d62:	d009      	beq.n	8006d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	61da      	str	r2, [r3, #28]
 8006d6a:	e005      	b.n	8006d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fc f8c2 	bl	8002f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfc:	ea42 0103 	orr.w	r1, r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	0c1a      	lsrs	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f002 0204 	and.w	r2, r2, #4
 8006e1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69da      	ldr	r2, [r3, #28]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e58:	f7fc fa6a 	bl	8003330 <HAL_GetTick>
 8006e5c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e12a      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_SPI_Transmit+0x36>
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e122      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_SPI_Transmit+0x48>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e11b      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ede:	d10f      	bne.n	8006f00 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0a:	2b40      	cmp	r3, #64	@ 0x40
 8006f0c:	d007      	beq.n	8006f1e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f26:	d152      	bne.n	8006fce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_SPI_Transmit+0xee>
 8006f30:	8b7b      	ldrh	r3, [r7, #26]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d145      	bne.n	8006fc2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	881a      	ldrh	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	1c9a      	adds	r2, r3, #2
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f5a:	e032      	b.n	8006fc2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d112      	bne.n	8006f90 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	881a      	ldrh	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	1c9a      	adds	r2, r3, #2
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f8e:	e018      	b.n	8006fc2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f90:	f7fc f9ce 	bl	8003330 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d803      	bhi.n	8006fa8 <HAL_SPI_Transmit+0x160>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d102      	bne.n	8006fae <HAL_SPI_Transmit+0x166>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e082      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1c7      	bne.n	8006f5c <HAL_SPI_Transmit+0x114>
 8006fcc:	e053      	b.n	8007076 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Transmit+0x194>
 8006fd6:	8b7b      	ldrh	r3, [r7, #26]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d147      	bne.n	800706c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007002:	e033      	b.n	800706c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d113      	bne.n	800703a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007038:	e018      	b.n	800706c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800703a:	f7fc f979 	bl	8003330 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d803      	bhi.n	8007052 <HAL_SPI_Transmit+0x20a>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d102      	bne.n	8007058 <HAL_SPI_Transmit+0x210>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e02d      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1c6      	bne.n	8007004 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fbc4 	bl	8007808 <SPI_EndRxTxTransaction>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80070c6:	2300      	movs	r3, #0
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
 80070ee:	e104      	b.n	80072fa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070f8:	d112      	bne.n	8007120 <HAL_SPI_Receive+0x50>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10e      	bne.n	8007120 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2204      	movs	r2, #4
 8007106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4613      	mov	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f8f3 	bl	8007302 <HAL_SPI_TransmitReceive>
 800711c:	4603      	mov	r3, r0
 800711e:	e0ec      	b.n	80072fa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007120:	f7fc f906 	bl	8003330 <HAL_GetTick>
 8007124:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Receive+0x62>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e0e1      	b.n	80072fa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_SPI_Receive+0x74>
 8007140:	2302      	movs	r3, #2
 8007142:	e0da      	b.n	80072fa <HAL_SPI_Receive+0x22a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2204      	movs	r2, #4
 8007150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	88fa      	ldrh	r2, [r7, #6]
 800716a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007192:	d10f      	bne.n	80071b4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d007      	beq.n	80071d2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d170      	bne.n	80072bc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071da:	e035      	b.n	8007248 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d115      	bne.n	8007216 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f103 020c 	add.w	r2, r3, #12
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007214:	e018      	b.n	8007248 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007216:	f7fc f88b 	bl	8003330 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d803      	bhi.n	800722e <HAL_SPI_Receive+0x15e>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d102      	bne.n	8007234 <HAL_SPI_Receive+0x164>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e058      	b.n	80072fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1c4      	bne.n	80071dc <HAL_SPI_Receive+0x10c>
 8007252:	e038      	b.n	80072c6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d113      	bne.n	800728a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	b292      	uxth	r2, r2
 800726e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	1c9a      	adds	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007288:	e018      	b.n	80072bc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728a:	f7fc f851 	bl	8003330 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d803      	bhi.n	80072a2 <HAL_SPI_Receive+0x1d2>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d102      	bne.n	80072a8 <HAL_SPI_Receive+0x1d8>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d109      	bne.n	80072bc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e01e      	b.n	80072fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1c6      	bne.n	8007254 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fa4a 	bl	8007764 <SPI_EndRxTransaction>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b08a      	sub	sp, #40	@ 0x28
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007310:	2301      	movs	r3, #1
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007314:	f7fc f80c 	bl	8003330 <HAL_GetTick>
 8007318:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007320:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800732c:	7ffb      	ldrb	r3, [r7, #31]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d00c      	beq.n	800734c <HAL_SPI_TransmitReceive+0x4a>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007338:	d106      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x46>
 8007342:	7ffb      	ldrb	r3, [r7, #31]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d001      	beq.n	800734c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
 800734a:	e17f      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_SPI_TransmitReceive+0x5c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_SPI_TransmitReceive+0x5c>
 8007358:	887b      	ldrh	r3, [r7, #2]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e174      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x6e>
 800736c:	2302      	movs	r3, #2
 800736e:	e16d      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b04      	cmp	r3, #4
 8007382:	d003      	beq.n	800738c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2205      	movs	r2, #5
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	887a      	ldrh	r2, [r7, #2]
 800739c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	887a      	ldrh	r2, [r7, #2]
 80073a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	887a      	ldrh	r2, [r7, #2]
 80073ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	887a      	ldrh	r2, [r7, #2]
 80073b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d007      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e8:	d17e      	bne.n	80074e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0xf6>
 80073f2:	8afb      	ldrh	r3, [r7, #22]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d16c      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	1c9a      	adds	r2, r3, #2
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741c:	e059      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11b      	bne.n	8007464 <HAL_SPI_TransmitReceive+0x162>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d016      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x162>
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	2b01      	cmp	r3, #1
 800743a:	d113      	bne.n	8007464 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b01      	cmp	r3, #1
 8007470:	d119      	bne.n	80074a6 <HAL_SPI_TransmitReceive+0x1a4>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d014      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007486:	b292      	uxth	r2, r2
 8007488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074a2:	2301      	movs	r3, #1
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074a6:	f7fb ff43 	bl	8003330 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d80d      	bhi.n	80074d2 <HAL_SPI_TransmitReceive+0x1d0>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d009      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e0bc      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1a0      	bne.n	800741e <HAL_SPI_TransmitReceive+0x11c>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d19b      	bne.n	800741e <HAL_SPI_TransmitReceive+0x11c>
 80074e6:	e082      	b.n	80075ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x1f4>
 80074f0:	8afb      	ldrh	r3, [r7, #22]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d171      	bne.n	80075da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800751c:	e05d      	b.n	80075da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d11c      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x264>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d017      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x264>
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	2b01      	cmp	r3, #1
 800753a:	d114      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	330c      	adds	r3, #12
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d119      	bne.n	80075a8 <HAL_SPI_TransmitReceive+0x2a6>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d014      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075a4:	2301      	movs	r3, #1
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075a8:	f7fb fec2 	bl	8003330 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d803      	bhi.n	80075c0 <HAL_SPI_TransmitReceive+0x2be>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d102      	bne.n	80075c6 <HAL_SPI_TransmitReceive+0x2c4>
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e038      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d19c      	bne.n	800751e <HAL_SPI_TransmitReceive+0x21c>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d197      	bne.n	800751e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ee:	6a3a      	ldr	r2, [r7, #32]
 80075f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f908 	bl	8007808 <SPI_EndRxTxTransaction>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e01d      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800764a:	2300      	movs	r3, #0
  }
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	@ 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	4613      	mov	r3, r2
 8007662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007664:	f7fb fe64 	bl	8003330 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	4413      	add	r3, r2
 8007672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007674:	f7fb fe5c 	bl	8003330 <HAL_GetTick>
 8007678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800767a:	4b39      	ldr	r3, [pc, #228]	@ (8007760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	015b      	lsls	r3, r3, #5
 8007680:	0d1b      	lsrs	r3, r3, #20
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800768a:	e054      	b.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d050      	beq.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007694:	f7fb fe4c 	bl	8003330 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d902      	bls.n	80076aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d13d      	bne.n	8007726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076c2:	d111      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076cc:	d004      	beq.n	80076d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d6:	d107      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f0:	d10f      	bne.n	8007712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e017      	b.n	8007756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	3b01      	subs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	429a      	cmp	r2, r3
 8007752:	d19b      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000054 	.word	0x20000054

08007764 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007778:	d111      	bne.n	800779e <SPI_EndRxTransaction+0x3a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007782:	d004      	beq.n	800778e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778c:	d107      	bne.n	800779e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800779c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077a6:	d117      	bne.n	80077d8 <SPI_EndRxTransaction+0x74>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b0:	d112      	bne.n	80077d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2101      	movs	r1, #1
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff ff49 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e013      	b.n	8007800 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	2180      	movs	r1, #128	@ 0x80
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f7ff ff36 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	f043 0220 	orr.w	r2, r3, #32
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e000      	b.n	8007800 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2201      	movs	r2, #1
 800781c:	2102      	movs	r1, #2
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff ff18 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f043 0220 	orr.w	r2, r3, #32
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e013      	b.n	8007862 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	2180      	movs	r1, #128	@ 0x80
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff ff05 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e000      	b.n	8007862 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e042      	b.n	8007902 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7fb fb9d 	bl	8002fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2224      	movs	r2, #36	@ 0x24
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9d0 	bl	8007c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b08a      	sub	sp, #40	@ 0x28
 800790e:	af02      	add	r7, sp, #8
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b20      	cmp	r3, #32
 8007928:	d175      	bne.n	8007a16 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_UART_Transmit+0x2c>
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e06e      	b.n	8007a18 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2221      	movs	r2, #33	@ 0x21
 8007944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007948:	f7fb fcf2 	bl	8003330 <HAL_GetTick>
 800794c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007962:	d108      	bne.n	8007976 <HAL_UART_Transmit+0x6c>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	e003      	b.n	800797e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800797e:	e02e      	b.n	80079de <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2200      	movs	r2, #0
 8007988:	2180      	movs	r1, #128	@ 0x80
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f86d 	bl	8007a6a <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e03a      	b.n	8007a18 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	3302      	adds	r3, #2
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e007      	b.n	80079d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1cb      	bne.n	8007980 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2140      	movs	r1, #64	@ 0x40
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f839 	bl	8007a6a <UART_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e006      	b.n	8007a18 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e000      	b.n	8007a18 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a16:	2302      	movs	r3, #2
  }
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d112      	bne.n	8007a60 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_UART_Receive_IT+0x26>
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e00b      	b.n	8007a62 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	461a      	mov	r2, r3
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f860 	bl	8007b1c <UART_Start_Receive_IT>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	e000      	b.n	8007a62 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b086      	sub	sp, #24
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	603b      	str	r3, [r7, #0]
 8007a76:	4613      	mov	r3, r2
 8007a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a7a:	e03b      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d037      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a84:	f7fb fc54 	bl	8003330 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	6a3a      	ldr	r2, [r7, #32]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e03a      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d023      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b80      	cmp	r3, #128	@ 0x80
 8007ab0:	d020      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b40      	cmp	r3, #64	@ 0x40
 8007ab6:	d01d      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d116      	bne.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f856 	bl	8007b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e00f      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4013      	ands	r3, r2
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d0b4      	beq.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2222      	movs	r2, #34	@ 0x22
 8007b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0220 	orr.w	r2, r2, #32
 8007b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b095      	sub	sp, #84	@ 0x54
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e5      	bne.n	8007b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3314      	adds	r3, #20
 8007be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e5      	bne.n	8007bca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d119      	bne.n	8007c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	330c      	adds	r3, #12
 8007c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f023 0310 	bic.w	r3, r3, #16
 8007c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c26:	61ba      	str	r2, [r7, #24]
 8007c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6979      	ldr	r1, [r7, #20]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	613b      	str	r3, [r7, #16]
   return(result);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c48:	bf00      	nop
 8007c4a:	3754      	adds	r7, #84	@ 0x54
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
	...

08007c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007c8e:	f023 030c 	bic.w	r3, r3, #12
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d68 <UART_SetConfig+0x114>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d103      	bne.n	8007cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007cbc:	f7fe f864 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	e002      	b.n	8007cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f7fe f84c 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009a      	lsls	r2, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	4a22      	ldr	r2, [pc, #136]	@ (8007d6c <UART_SetConfig+0x118>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	0119      	lsls	r1, r3, #4
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d00:	4b1a      	ldr	r3, [pc, #104]	@ (8007d6c <UART_SetConfig+0x118>)
 8007d02:	fba3 0302 	umull	r0, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	2064      	movs	r0, #100	@ 0x64
 8007d0a:	fb00 f303 	mul.w	r3, r0, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	3332      	adds	r3, #50	@ 0x32
 8007d14:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <UART_SetConfig+0x118>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d20:	4419      	add	r1, r3
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009a      	lsls	r2, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d38:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <UART_SetConfig+0x118>)
 8007d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2064      	movs	r0, #100	@ 0x64
 8007d42:	fb00 f303 	mul.w	r3, r0, r3
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	3332      	adds	r3, #50	@ 0x32
 8007d4c:	4a07      	ldr	r2, [pc, #28]	@ (8007d6c <UART_SetConfig+0x118>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f003 020f 	and.w	r2, r3, #15
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	51eb851f 	.word	0x51eb851f

08007d70 <sniprintf>:
 8007d70:	b40c      	push	{r2, r3}
 8007d72:	b530      	push	{r4, r5, lr}
 8007d74:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <sniprintf+0x68>)
 8007d76:	1e0c      	subs	r4, r1, #0
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	b09d      	sub	sp, #116	@ 0x74
 8007d7c:	da08      	bge.n	8007d90 <sniprintf+0x20>
 8007d7e:	238b      	movs	r3, #139	@ 0x8b
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	b01d      	add	sp, #116	@ 0x74
 8007d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d8c:	b002      	add	sp, #8
 8007d8e:	4770      	bx	lr
 8007d90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d9e:	bf0c      	ite	eq
 8007da0:	4623      	moveq	r3, r4
 8007da2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dae:	9002      	str	r0, [sp, #8]
 8007db0:	9006      	str	r0, [sp, #24]
 8007db2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007db6:	4628      	mov	r0, r5
 8007db8:	ab21      	add	r3, sp, #132	@ 0x84
 8007dba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dbc:	a902      	add	r1, sp, #8
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	f000 fa1e 	bl	8008200 <_svfiprintf_r>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	bfbc      	itt	lt
 8007dc8:	238b      	movlt	r3, #139	@ 0x8b
 8007dca:	602b      	strlt	r3, [r5, #0]
 8007dcc:	2c00      	cmp	r4, #0
 8007dce:	d0da      	beq.n	8007d86 <sniprintf+0x16>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e7d6      	b.n	8007d86 <sniprintf+0x16>
 8007dd8:	20000060 	.word	0x20000060

08007ddc <siprintf>:
 8007ddc:	b40e      	push	{r1, r2, r3}
 8007dde:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007de2:	b510      	push	{r4, lr}
 8007de4:	2400      	movs	r4, #0
 8007de6:	b09d      	sub	sp, #116	@ 0x74
 8007de8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007dea:	9002      	str	r0, [sp, #8]
 8007dec:	9006      	str	r0, [sp, #24]
 8007dee:	9107      	str	r1, [sp, #28]
 8007df0:	9104      	str	r1, [sp, #16]
 8007df2:	4809      	ldr	r0, [pc, #36]	@ (8007e18 <siprintf+0x3c>)
 8007df4:	4909      	ldr	r1, [pc, #36]	@ (8007e1c <siprintf+0x40>)
 8007df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfa:	9105      	str	r1, [sp, #20]
 8007dfc:	6800      	ldr	r0, [r0, #0]
 8007dfe:	a902      	add	r1, sp, #8
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e04:	f000 f9fc 	bl	8008200 <_svfiprintf_r>
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	701c      	strb	r4, [r3, #0]
 8007e0c:	b01d      	add	sp, #116	@ 0x74
 8007e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e12:	b003      	add	sp, #12
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20000060 	.word	0x20000060
 8007e1c:	ffff0208 	.word	0xffff0208

08007e20 <siscanf>:
 8007e20:	b40e      	push	{r1, r2, r3}
 8007e22:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007e26:	b570      	push	{r4, r5, r6, lr}
 8007e28:	2500      	movs	r5, #0
 8007e2a:	b09d      	sub	sp, #116	@ 0x74
 8007e2c:	ac21      	add	r4, sp, #132	@ 0x84
 8007e2e:	f854 6b04 	ldr.w	r6, [r4], #4
 8007e32:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e36:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007e38:	9002      	str	r0, [sp, #8]
 8007e3a:	9006      	str	r0, [sp, #24]
 8007e3c:	f7f8 f990 	bl	8000160 <strlen>
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <siscanf+0x50>)
 8007e42:	9003      	str	r0, [sp, #12]
 8007e44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e4a:	9007      	str	r0, [sp, #28]
 8007e4c:	4809      	ldr	r0, [pc, #36]	@ (8007e74 <siscanf+0x54>)
 8007e4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e52:	4632      	mov	r2, r6
 8007e54:	4623      	mov	r3, r4
 8007e56:	a902      	add	r1, sp, #8
 8007e58:	6800      	ldr	r0, [r0, #0]
 8007e5a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007e5c:	9514      	str	r5, [sp, #80]	@ 0x50
 8007e5e:	9401      	str	r4, [sp, #4]
 8007e60:	f000 fb24 	bl	80084ac <__ssvfiscanf_r>
 8007e64:	b01d      	add	sp, #116	@ 0x74
 8007e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e6a:	b003      	add	sp, #12
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	08007e79 	.word	0x08007e79
 8007e74:	20000060 	.word	0x20000060

08007e78 <__seofread>:
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4770      	bx	lr

08007e7c <memset>:
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4402      	add	r2, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memset+0xa>
 8007e84:	4770      	bx	lr
 8007e86:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8a:	e7f9      	b.n	8007e80 <memset+0x4>

08007e8c <strncmp>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	b16a      	cbz	r2, 8007eac <strncmp+0x20>
 8007e90:	3901      	subs	r1, #1
 8007e92:	1884      	adds	r4, r0, r2
 8007e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d103      	bne.n	8007ea8 <strncmp+0x1c>
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d001      	beq.n	8007ea8 <strncmp+0x1c>
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d1f5      	bne.n	8007e94 <strncmp+0x8>
 8007ea8:	1ad0      	subs	r0, r2, r3
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	4610      	mov	r0, r2
 8007eae:	e7fc      	b.n	8007eaa <strncmp+0x1e>

08007eb0 <strncpy>:
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	3901      	subs	r1, #1
 8007eb6:	b132      	cbz	r2, 8007ec6 <strncpy+0x16>
 8007eb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ebc:	3a01      	subs	r2, #1
 8007ebe:	f803 4b01 	strb.w	r4, [r3], #1
 8007ec2:	2c00      	cmp	r4, #0
 8007ec4:	d1f7      	bne.n	8007eb6 <strncpy+0x6>
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	441a      	add	r2, r3
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d100      	bne.n	8007ed0 <strncpy+0x20>
 8007ece:	bd10      	pop	{r4, pc}
 8007ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed4:	e7f9      	b.n	8007eca <strncpy+0x1a>

08007ed6 <strstr>:
 8007ed6:	780a      	ldrb	r2, [r1, #0]
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	b96a      	cbnz	r2, 8007ef8 <strstr+0x22>
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d109      	bne.n	8007ef6 <strstr+0x20>
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f6      	beq.n	8007edc <strstr+0x6>
 8007eee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ef2:	429e      	cmp	r6, r3
 8007ef4:	d0f7      	beq.n	8007ee6 <strstr+0x10>
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	7803      	ldrb	r3, [r0, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1ef      	bne.n	8007ede <strstr+0x8>
 8007efe:	4618      	mov	r0, r3
 8007f00:	e7ec      	b.n	8007edc <strstr+0x6>
	...

08007f04 <__errno>:
 8007f04:	4b01      	ldr	r3, [pc, #4]	@ (8007f0c <__errno+0x8>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000060 	.word	0x20000060

08007f10 <__libc_init_array>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	2600      	movs	r6, #0
 8007f14:	4d0c      	ldr	r5, [pc, #48]	@ (8007f48 <__libc_init_array+0x38>)
 8007f16:	4c0d      	ldr	r4, [pc, #52]	@ (8007f4c <__libc_init_array+0x3c>)
 8007f18:	1b64      	subs	r4, r4, r5
 8007f1a:	10a4      	asrs	r4, r4, #2
 8007f1c:	42a6      	cmp	r6, r4
 8007f1e:	d109      	bne.n	8007f34 <__libc_init_array+0x24>
 8007f20:	f001 f8ee 	bl	8009100 <_init>
 8007f24:	2600      	movs	r6, #0
 8007f26:	4d0a      	ldr	r5, [pc, #40]	@ (8007f50 <__libc_init_array+0x40>)
 8007f28:	4c0a      	ldr	r4, [pc, #40]	@ (8007f54 <__libc_init_array+0x44>)
 8007f2a:	1b64      	subs	r4, r4, r5
 8007f2c:	10a4      	asrs	r4, r4, #2
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d105      	bne.n	8007f3e <__libc_init_array+0x2e>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f38:	4798      	blx	r3
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7ee      	b.n	8007f1c <__libc_init_array+0xc>
 8007f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f42:	4798      	blx	r3
 8007f44:	3601      	adds	r6, #1
 8007f46:	e7f2      	b.n	8007f2e <__libc_init_array+0x1e>
 8007f48:	08009b44 	.word	0x08009b44
 8007f4c:	08009b44 	.word	0x08009b44
 8007f50:	08009b44 	.word	0x08009b44
 8007f54:	08009b48 	.word	0x08009b48

08007f58 <__retarget_lock_acquire_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__retarget_lock_release_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <_free_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4605      	mov	r5, r0
 8007f60:	2900      	cmp	r1, #0
 8007f62:	d040      	beq.n	8007fe6 <_free_r+0x8a>
 8007f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f68:	1f0c      	subs	r4, r1, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfb8      	it	lt
 8007f6e:	18e4      	addlt	r4, r4, r3
 8007f70:	f000 f8de 	bl	8008130 <__malloc_lock>
 8007f74:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe8 <_free_r+0x8c>)
 8007f76:	6813      	ldr	r3, [r2, #0]
 8007f78:	b933      	cbnz	r3, 8007f88 <_free_r+0x2c>
 8007f7a:	6063      	str	r3, [r4, #4]
 8007f7c:	6014      	str	r4, [r2, #0]
 8007f7e:	4628      	mov	r0, r5
 8007f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f84:	f000 b8da 	b.w	800813c <__malloc_unlock>
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	d908      	bls.n	8007f9e <_free_r+0x42>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	1821      	adds	r1, r4, r0
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf01      	itttt	eq
 8007f94:	6819      	ldreq	r1, [r3, #0]
 8007f96:	685b      	ldreq	r3, [r3, #4]
 8007f98:	1809      	addeq	r1, r1, r0
 8007f9a:	6021      	streq	r1, [r4, #0]
 8007f9c:	e7ed      	b.n	8007f7a <_free_r+0x1e>
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b10b      	cbz	r3, 8007fa8 <_free_r+0x4c>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d9fa      	bls.n	8007f9e <_free_r+0x42>
 8007fa8:	6811      	ldr	r1, [r2, #0]
 8007faa:	1850      	adds	r0, r2, r1
 8007fac:	42a0      	cmp	r0, r4
 8007fae:	d10b      	bne.n	8007fc8 <_free_r+0x6c>
 8007fb0:	6820      	ldr	r0, [r4, #0]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	1850      	adds	r0, r2, r1
 8007fb6:	4283      	cmp	r3, r0
 8007fb8:	6011      	str	r1, [r2, #0]
 8007fba:	d1e0      	bne.n	8007f7e <_free_r+0x22>
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	4408      	add	r0, r1
 8007fc2:	6010      	str	r0, [r2, #0]
 8007fc4:	6053      	str	r3, [r2, #4]
 8007fc6:	e7da      	b.n	8007f7e <_free_r+0x22>
 8007fc8:	d902      	bls.n	8007fd0 <_free_r+0x74>
 8007fca:	230c      	movs	r3, #12
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	e7d6      	b.n	8007f7e <_free_r+0x22>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	1821      	adds	r1, r4, r0
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	bf01      	itttt	eq
 8007fd8:	6819      	ldreq	r1, [r3, #0]
 8007fda:	685b      	ldreq	r3, [r3, #4]
 8007fdc:	1809      	addeq	r1, r1, r0
 8007fde:	6021      	streq	r1, [r4, #0]
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	6054      	str	r4, [r2, #4]
 8007fe4:	e7cb      	b.n	8007f7e <_free_r+0x22>
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	200004a0 	.word	0x200004a0

08007fec <sbrk_aligned>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	4e0f      	ldr	r6, [pc, #60]	@ (800802c <sbrk_aligned+0x40>)
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	6831      	ldr	r1, [r6, #0]
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	b911      	cbnz	r1, 8007ffe <sbrk_aligned+0x12>
 8007ff8:	f000 ff34 	bl	8008e64 <_sbrk_r>
 8007ffc:	6030      	str	r0, [r6, #0]
 8007ffe:	4621      	mov	r1, r4
 8008000:	4628      	mov	r0, r5
 8008002:	f000 ff2f 	bl	8008e64 <_sbrk_r>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	d103      	bne.n	8008012 <sbrk_aligned+0x26>
 800800a:	f04f 34ff 	mov.w	r4, #4294967295
 800800e:	4620      	mov	r0, r4
 8008010:	bd70      	pop	{r4, r5, r6, pc}
 8008012:	1cc4      	adds	r4, r0, #3
 8008014:	f024 0403 	bic.w	r4, r4, #3
 8008018:	42a0      	cmp	r0, r4
 800801a:	d0f8      	beq.n	800800e <sbrk_aligned+0x22>
 800801c:	1a21      	subs	r1, r4, r0
 800801e:	4628      	mov	r0, r5
 8008020:	f000 ff20 	bl	8008e64 <_sbrk_r>
 8008024:	3001      	adds	r0, #1
 8008026:	d1f2      	bne.n	800800e <sbrk_aligned+0x22>
 8008028:	e7ef      	b.n	800800a <sbrk_aligned+0x1e>
 800802a:	bf00      	nop
 800802c:	2000049c 	.word	0x2000049c

08008030 <_malloc_r>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	1ccd      	adds	r5, r1, #3
 8008036:	f025 0503 	bic.w	r5, r5, #3
 800803a:	3508      	adds	r5, #8
 800803c:	2d0c      	cmp	r5, #12
 800803e:	bf38      	it	cc
 8008040:	250c      	movcc	r5, #12
 8008042:	2d00      	cmp	r5, #0
 8008044:	4606      	mov	r6, r0
 8008046:	db01      	blt.n	800804c <_malloc_r+0x1c>
 8008048:	42a9      	cmp	r1, r5
 800804a:	d904      	bls.n	8008056 <_malloc_r+0x26>
 800804c:	230c      	movs	r3, #12
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	2000      	movs	r0, #0
 8008052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800812c <_malloc_r+0xfc>
 800805a:	f000 f869 	bl	8008130 <__malloc_lock>
 800805e:	f8d8 3000 	ldr.w	r3, [r8]
 8008062:	461c      	mov	r4, r3
 8008064:	bb44      	cbnz	r4, 80080b8 <_malloc_r+0x88>
 8008066:	4629      	mov	r1, r5
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff ffbf 	bl	8007fec <sbrk_aligned>
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	4604      	mov	r4, r0
 8008072:	d158      	bne.n	8008126 <_malloc_r+0xf6>
 8008074:	f8d8 4000 	ldr.w	r4, [r8]
 8008078:	4627      	mov	r7, r4
 800807a:	2f00      	cmp	r7, #0
 800807c:	d143      	bne.n	8008106 <_malloc_r+0xd6>
 800807e:	2c00      	cmp	r4, #0
 8008080:	d04b      	beq.n	800811a <_malloc_r+0xea>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	4639      	mov	r1, r7
 8008086:	4630      	mov	r0, r6
 8008088:	eb04 0903 	add.w	r9, r4, r3
 800808c:	f000 feea 	bl	8008e64 <_sbrk_r>
 8008090:	4581      	cmp	r9, r0
 8008092:	d142      	bne.n	800811a <_malloc_r+0xea>
 8008094:	6821      	ldr	r1, [r4, #0]
 8008096:	4630      	mov	r0, r6
 8008098:	1a6d      	subs	r5, r5, r1
 800809a:	4629      	mov	r1, r5
 800809c:	f7ff ffa6 	bl	8007fec <sbrk_aligned>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d03a      	beq.n	800811a <_malloc_r+0xea>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	442b      	add	r3, r5
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	f8d8 3000 	ldr.w	r3, [r8]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	bb62      	cbnz	r2, 800810c <_malloc_r+0xdc>
 80080b2:	f8c8 7000 	str.w	r7, [r8]
 80080b6:	e00f      	b.n	80080d8 <_malloc_r+0xa8>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	1b52      	subs	r2, r2, r5
 80080bc:	d420      	bmi.n	8008100 <_malloc_r+0xd0>
 80080be:	2a0b      	cmp	r2, #11
 80080c0:	d917      	bls.n	80080f2 <_malloc_r+0xc2>
 80080c2:	1961      	adds	r1, r4, r5
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	6025      	str	r5, [r4, #0]
 80080c8:	bf18      	it	ne
 80080ca:	6059      	strne	r1, [r3, #4]
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	bf08      	it	eq
 80080d0:	f8c8 1000 	streq.w	r1, [r8]
 80080d4:	5162      	str	r2, [r4, r5]
 80080d6:	604b      	str	r3, [r1, #4]
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 f82f 	bl	800813c <__malloc_unlock>
 80080de:	f104 000b 	add.w	r0, r4, #11
 80080e2:	1d23      	adds	r3, r4, #4
 80080e4:	f020 0007 	bic.w	r0, r0, #7
 80080e8:	1ac2      	subs	r2, r0, r3
 80080ea:	bf1c      	itt	ne
 80080ec:	1a1b      	subne	r3, r3, r0
 80080ee:	50a3      	strne	r3, [r4, r2]
 80080f0:	e7af      	b.n	8008052 <_malloc_r+0x22>
 80080f2:	6862      	ldr	r2, [r4, #4]
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	bf0c      	ite	eq
 80080f8:	f8c8 2000 	streq.w	r2, [r8]
 80080fc:	605a      	strne	r2, [r3, #4]
 80080fe:	e7eb      	b.n	80080d8 <_malloc_r+0xa8>
 8008100:	4623      	mov	r3, r4
 8008102:	6864      	ldr	r4, [r4, #4]
 8008104:	e7ae      	b.n	8008064 <_malloc_r+0x34>
 8008106:	463c      	mov	r4, r7
 8008108:	687f      	ldr	r7, [r7, #4]
 800810a:	e7b6      	b.n	800807a <_malloc_r+0x4a>
 800810c:	461a      	mov	r2, r3
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	42a3      	cmp	r3, r4
 8008112:	d1fb      	bne.n	800810c <_malloc_r+0xdc>
 8008114:	2300      	movs	r3, #0
 8008116:	6053      	str	r3, [r2, #4]
 8008118:	e7de      	b.n	80080d8 <_malloc_r+0xa8>
 800811a:	230c      	movs	r3, #12
 800811c:	4630      	mov	r0, r6
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	f000 f80c 	bl	800813c <__malloc_unlock>
 8008124:	e794      	b.n	8008050 <_malloc_r+0x20>
 8008126:	6005      	str	r5, [r0, #0]
 8008128:	e7d6      	b.n	80080d8 <_malloc_r+0xa8>
 800812a:	bf00      	nop
 800812c:	200004a0 	.word	0x200004a0

08008130 <__malloc_lock>:
 8008130:	4801      	ldr	r0, [pc, #4]	@ (8008138 <__malloc_lock+0x8>)
 8008132:	f7ff bf11 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8008136:	bf00      	nop
 8008138:	20000498 	.word	0x20000498

0800813c <__malloc_unlock>:
 800813c:	4801      	ldr	r0, [pc, #4]	@ (8008144 <__malloc_unlock+0x8>)
 800813e:	f7ff bf0c 	b.w	8007f5a <__retarget_lock_release_recursive>
 8008142:	bf00      	nop
 8008144:	20000498 	.word	0x20000498

08008148 <__ssputs_r>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	461f      	mov	r7, r3
 800814e:	688e      	ldr	r6, [r1, #8]
 8008150:	4682      	mov	sl, r0
 8008152:	42be      	cmp	r6, r7
 8008154:	460c      	mov	r4, r1
 8008156:	4690      	mov	r8, r2
 8008158:	680b      	ldr	r3, [r1, #0]
 800815a:	d82d      	bhi.n	80081b8 <__ssputs_r+0x70>
 800815c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008164:	d026      	beq.n	80081b4 <__ssputs_r+0x6c>
 8008166:	6965      	ldr	r5, [r4, #20]
 8008168:	6909      	ldr	r1, [r1, #16]
 800816a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800816e:	eba3 0901 	sub.w	r9, r3, r1
 8008172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008176:	1c7b      	adds	r3, r7, #1
 8008178:	444b      	add	r3, r9
 800817a:	106d      	asrs	r5, r5, #1
 800817c:	429d      	cmp	r5, r3
 800817e:	bf38      	it	cc
 8008180:	461d      	movcc	r5, r3
 8008182:	0553      	lsls	r3, r2, #21
 8008184:	d527      	bpl.n	80081d6 <__ssputs_r+0x8e>
 8008186:	4629      	mov	r1, r5
 8008188:	f7ff ff52 	bl	8008030 <_malloc_r>
 800818c:	4606      	mov	r6, r0
 800818e:	b360      	cbz	r0, 80081ea <__ssputs_r+0xa2>
 8008190:	464a      	mov	r2, r9
 8008192:	6921      	ldr	r1, [r4, #16]
 8008194:	f000 fe84 	bl	8008ea0 <memcpy>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800819e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	6126      	str	r6, [r4, #16]
 80081a6:	444e      	add	r6, r9
 80081a8:	6026      	str	r6, [r4, #0]
 80081aa:	463e      	mov	r6, r7
 80081ac:	6165      	str	r5, [r4, #20]
 80081ae:	eba5 0509 	sub.w	r5, r5, r9
 80081b2:	60a5      	str	r5, [r4, #8]
 80081b4:	42be      	cmp	r6, r7
 80081b6:	d900      	bls.n	80081ba <__ssputs_r+0x72>
 80081b8:	463e      	mov	r6, r7
 80081ba:	4632      	mov	r2, r6
 80081bc:	4641      	mov	r1, r8
 80081be:	6820      	ldr	r0, [r4, #0]
 80081c0:	f000 fe35 	bl	8008e2e <memmove>
 80081c4:	2000      	movs	r0, #0
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	4433      	add	r3, r6
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	462a      	mov	r2, r5
 80081d8:	f000 fe70 	bl	8008ebc <_realloc_r>
 80081dc:	4606      	mov	r6, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1e0      	bne.n	80081a4 <__ssputs_r+0x5c>
 80081e2:	4650      	mov	r0, sl
 80081e4:	6921      	ldr	r1, [r4, #16]
 80081e6:	f7ff feb9 	bl	8007f5c <_free_r>
 80081ea:	230c      	movs	r3, #12
 80081ec:	f8ca 3000 	str.w	r3, [sl]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	e7e9      	b.n	80081d2 <__ssputs_r+0x8a>
	...

08008200 <_svfiprintf_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4698      	mov	r8, r3
 8008206:	898b      	ldrh	r3, [r1, #12]
 8008208:	4607      	mov	r7, r0
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	460d      	mov	r5, r1
 800820e:	4614      	mov	r4, r2
 8008210:	b09d      	sub	sp, #116	@ 0x74
 8008212:	d510      	bpl.n	8008236 <_svfiprintf_r+0x36>
 8008214:	690b      	ldr	r3, [r1, #16]
 8008216:	b973      	cbnz	r3, 8008236 <_svfiprintf_r+0x36>
 8008218:	2140      	movs	r1, #64	@ 0x40
 800821a:	f7ff ff09 	bl	8008030 <_malloc_r>
 800821e:	6028      	str	r0, [r5, #0]
 8008220:	6128      	str	r0, [r5, #16]
 8008222:	b930      	cbnz	r0, 8008232 <_svfiprintf_r+0x32>
 8008224:	230c      	movs	r3, #12
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	b01d      	add	sp, #116	@ 0x74
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	2340      	movs	r3, #64	@ 0x40
 8008234:	616b      	str	r3, [r5, #20]
 8008236:	2300      	movs	r3, #0
 8008238:	9309      	str	r3, [sp, #36]	@ 0x24
 800823a:	2320      	movs	r3, #32
 800823c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008240:	2330      	movs	r3, #48	@ 0x30
 8008242:	f04f 0901 	mov.w	r9, #1
 8008246:	f8cd 800c 	str.w	r8, [sp, #12]
 800824a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80083e4 <_svfiprintf_r+0x1e4>
 800824e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008252:	4623      	mov	r3, r4
 8008254:	469a      	mov	sl, r3
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	b10a      	cbz	r2, 8008260 <_svfiprintf_r+0x60>
 800825c:	2a25      	cmp	r2, #37	@ 0x25
 800825e:	d1f9      	bne.n	8008254 <_svfiprintf_r+0x54>
 8008260:	ebba 0b04 	subs.w	fp, sl, r4
 8008264:	d00b      	beq.n	800827e <_svfiprintf_r+0x7e>
 8008266:	465b      	mov	r3, fp
 8008268:	4622      	mov	r2, r4
 800826a:	4629      	mov	r1, r5
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff ff6b 	bl	8008148 <__ssputs_r>
 8008272:	3001      	adds	r0, #1
 8008274:	f000 80a7 	beq.w	80083c6 <_svfiprintf_r+0x1c6>
 8008278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827a:	445a      	add	r2, fp
 800827c:	9209      	str	r2, [sp, #36]	@ 0x24
 800827e:	f89a 3000 	ldrb.w	r3, [sl]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 809f 	beq.w	80083c6 <_svfiprintf_r+0x1c6>
 8008288:	2300      	movs	r3, #0
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008292:	f10a 0a01 	add.w	sl, sl, #1
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	9307      	str	r3, [sp, #28]
 800829a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800829e:	931a      	str	r3, [sp, #104]	@ 0x68
 80082a0:	4654      	mov	r4, sl
 80082a2:	2205      	movs	r2, #5
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	484e      	ldr	r0, [pc, #312]	@ (80083e4 <_svfiprintf_r+0x1e4>)
 80082aa:	f000 fdeb 	bl	8008e84 <memchr>
 80082ae:	9a04      	ldr	r2, [sp, #16]
 80082b0:	b9d8      	cbnz	r0, 80082ea <_svfiprintf_r+0xea>
 80082b2:	06d0      	lsls	r0, r2, #27
 80082b4:	bf44      	itt	mi
 80082b6:	2320      	movmi	r3, #32
 80082b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082bc:	0711      	lsls	r1, r2, #28
 80082be:	bf44      	itt	mi
 80082c0:	232b      	movmi	r3, #43	@ 0x2b
 80082c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80082cc:	d015      	beq.n	80082fa <_svfiprintf_r+0xfa>
 80082ce:	4654      	mov	r4, sl
 80082d0:	2000      	movs	r0, #0
 80082d2:	f04f 0c0a 	mov.w	ip, #10
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	4621      	mov	r1, r4
 80082da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082de:	3b30      	subs	r3, #48	@ 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d94b      	bls.n	800837c <_svfiprintf_r+0x17c>
 80082e4:	b1b0      	cbz	r0, 8008314 <_svfiprintf_r+0x114>
 80082e6:	9207      	str	r2, [sp, #28]
 80082e8:	e014      	b.n	8008314 <_svfiprintf_r+0x114>
 80082ea:	eba0 0308 	sub.w	r3, r0, r8
 80082ee:	fa09 f303 	lsl.w	r3, r9, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	46a2      	mov	sl, r4
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	e7d2      	b.n	80082a0 <_svfiprintf_r+0xa0>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	1d19      	adds	r1, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	9103      	str	r1, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfbb      	ittet	lt
 8008306:	425b      	neglt	r3, r3
 8008308:	f042 0202 	orrlt.w	r2, r2, #2
 800830c:	9307      	strge	r3, [sp, #28]
 800830e:	9307      	strlt	r3, [sp, #28]
 8008310:	bfb8      	it	lt
 8008312:	9204      	strlt	r2, [sp, #16]
 8008314:	7823      	ldrb	r3, [r4, #0]
 8008316:	2b2e      	cmp	r3, #46	@ 0x2e
 8008318:	d10a      	bne.n	8008330 <_svfiprintf_r+0x130>
 800831a:	7863      	ldrb	r3, [r4, #1]
 800831c:	2b2a      	cmp	r3, #42	@ 0x2a
 800831e:	d132      	bne.n	8008386 <_svfiprintf_r+0x186>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	3402      	adds	r4, #2
 8008324:	1d1a      	adds	r2, r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	9203      	str	r2, [sp, #12]
 800832a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80083e8 <_svfiprintf_r+0x1e8>
 8008334:	2203      	movs	r2, #3
 8008336:	4650      	mov	r0, sl
 8008338:	7821      	ldrb	r1, [r4, #0]
 800833a:	f000 fda3 	bl	8008e84 <memchr>
 800833e:	b138      	cbz	r0, 8008350 <_svfiprintf_r+0x150>
 8008340:	2240      	movs	r2, #64	@ 0x40
 8008342:	9b04      	ldr	r3, [sp, #16]
 8008344:	eba0 000a 	sub.w	r0, r0, sl
 8008348:	4082      	lsls	r2, r0
 800834a:	4313      	orrs	r3, r2
 800834c:	3401      	adds	r4, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008354:	2206      	movs	r2, #6
 8008356:	4825      	ldr	r0, [pc, #148]	@ (80083ec <_svfiprintf_r+0x1ec>)
 8008358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800835c:	f000 fd92 	bl	8008e84 <memchr>
 8008360:	2800      	cmp	r0, #0
 8008362:	d036      	beq.n	80083d2 <_svfiprintf_r+0x1d2>
 8008364:	4b22      	ldr	r3, [pc, #136]	@ (80083f0 <_svfiprintf_r+0x1f0>)
 8008366:	bb1b      	cbnz	r3, 80083b0 <_svfiprintf_r+0x1b0>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	3307      	adds	r3, #7
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	3308      	adds	r3, #8
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008376:	4433      	add	r3, r6
 8008378:	9309      	str	r3, [sp, #36]	@ 0x24
 800837a:	e76a      	b.n	8008252 <_svfiprintf_r+0x52>
 800837c:	460c      	mov	r4, r1
 800837e:	2001      	movs	r0, #1
 8008380:	fb0c 3202 	mla	r2, ip, r2, r3
 8008384:	e7a8      	b.n	80082d8 <_svfiprintf_r+0xd8>
 8008386:	2300      	movs	r3, #0
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4619      	mov	r1, r3
 800838e:	3401      	adds	r4, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	4620      	mov	r0, r4
 8008394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008398:	3a30      	subs	r2, #48	@ 0x30
 800839a:	2a09      	cmp	r2, #9
 800839c:	d903      	bls.n	80083a6 <_svfiprintf_r+0x1a6>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c6      	beq.n	8008330 <_svfiprintf_r+0x130>
 80083a2:	9105      	str	r1, [sp, #20]
 80083a4:	e7c4      	b.n	8008330 <_svfiprintf_r+0x130>
 80083a6:	4604      	mov	r4, r0
 80083a8:	2301      	movs	r3, #1
 80083aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ae:	e7f0      	b.n	8008392 <_svfiprintf_r+0x192>
 80083b0:	ab03      	add	r3, sp, #12
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	462a      	mov	r2, r5
 80083b6:	4638      	mov	r0, r7
 80083b8:	4b0e      	ldr	r3, [pc, #56]	@ (80083f4 <_svfiprintf_r+0x1f4>)
 80083ba:	a904      	add	r1, sp, #16
 80083bc:	f3af 8000 	nop.w
 80083c0:	1c42      	adds	r2, r0, #1
 80083c2:	4606      	mov	r6, r0
 80083c4:	d1d6      	bne.n	8008374 <_svfiprintf_r+0x174>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	065b      	lsls	r3, r3, #25
 80083ca:	f53f af2d 	bmi.w	8008228 <_svfiprintf_r+0x28>
 80083ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083d0:	e72c      	b.n	800822c <_svfiprintf_r+0x2c>
 80083d2:	ab03      	add	r3, sp, #12
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	462a      	mov	r2, r5
 80083d8:	4638      	mov	r0, r7
 80083da:	4b06      	ldr	r3, [pc, #24]	@ (80083f4 <_svfiprintf_r+0x1f4>)
 80083dc:	a904      	add	r1, sp, #16
 80083de:	f000 fa4b 	bl	8008878 <_printf_i>
 80083e2:	e7ed      	b.n	80083c0 <_svfiprintf_r+0x1c0>
 80083e4:	080099ea 	.word	0x080099ea
 80083e8:	080099f0 	.word	0x080099f0
 80083ec:	080099f4 	.word	0x080099f4
 80083f0:	00000000 	.word	0x00000000
 80083f4:	08008149 	.word	0x08008149

080083f8 <_sungetc_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	1c4b      	adds	r3, r1, #1
 80083fc:	4614      	mov	r4, r2
 80083fe:	d103      	bne.n	8008408 <_sungetc_r+0x10>
 8008400:	f04f 35ff 	mov.w	r5, #4294967295
 8008404:	4628      	mov	r0, r5
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	8993      	ldrh	r3, [r2, #12]
 800840a:	b2cd      	uxtb	r5, r1
 800840c:	f023 0320 	bic.w	r3, r3, #32
 8008410:	8193      	strh	r3, [r2, #12]
 8008412:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008414:	6852      	ldr	r2, [r2, #4]
 8008416:	b18b      	cbz	r3, 800843c <_sungetc_r+0x44>
 8008418:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800841a:	4293      	cmp	r3, r2
 800841c:	dd08      	ble.n	8008430 <_sungetc_r+0x38>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	1e5a      	subs	r2, r3, #1
 8008422:	6022      	str	r2, [r4, #0]
 8008424:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	3301      	adds	r3, #1
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	e7e9      	b.n	8008404 <_sungetc_r+0xc>
 8008430:	4621      	mov	r1, r4
 8008432:	f000 fcc4 	bl	8008dbe <__submore>
 8008436:	2800      	cmp	r0, #0
 8008438:	d0f1      	beq.n	800841e <_sungetc_r+0x26>
 800843a:	e7e1      	b.n	8008400 <_sungetc_r+0x8>
 800843c:	6921      	ldr	r1, [r4, #16]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	b151      	cbz	r1, 8008458 <_sungetc_r+0x60>
 8008442:	4299      	cmp	r1, r3
 8008444:	d208      	bcs.n	8008458 <_sungetc_r+0x60>
 8008446:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800844a:	42a9      	cmp	r1, r5
 800844c:	d104      	bne.n	8008458 <_sungetc_r+0x60>
 800844e:	3b01      	subs	r3, #1
 8008450:	3201      	adds	r2, #1
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	6062      	str	r2, [r4, #4]
 8008456:	e7d5      	b.n	8008404 <_sungetc_r+0xc>
 8008458:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800845c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008460:	6363      	str	r3, [r4, #52]	@ 0x34
 8008462:	2303      	movs	r3, #3
 8008464:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008466:	4623      	mov	r3, r4
 8008468:	f803 5f46 	strb.w	r5, [r3, #70]!
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	2301      	movs	r3, #1
 8008470:	e7dc      	b.n	800842c <_sungetc_r+0x34>

08008472 <__ssrefill_r>:
 8008472:	b510      	push	{r4, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008478:	b169      	cbz	r1, 8008496 <__ssrefill_r+0x24>
 800847a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800847e:	4299      	cmp	r1, r3
 8008480:	d001      	beq.n	8008486 <__ssrefill_r+0x14>
 8008482:	f7ff fd6b 	bl	8007f5c <_free_r>
 8008486:	2000      	movs	r0, #0
 8008488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800848a:	6360      	str	r0, [r4, #52]	@ 0x34
 800848c:	6063      	str	r3, [r4, #4]
 800848e:	b113      	cbz	r3, 8008496 <__ssrefill_r+0x24>
 8008490:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	bd10      	pop	{r4, pc}
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	2300      	movs	r3, #0
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f043 0320 	orr.w	r3, r3, #32
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	e7f3      	b.n	8008494 <__ssrefill_r+0x22>

080084ac <__ssvfiscanf_r>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	460c      	mov	r4, r1
 80084b2:	2100      	movs	r1, #0
 80084b4:	4606      	mov	r6, r0
 80084b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80084ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80084be:	49ab      	ldr	r1, [pc, #684]	@ (800876c <__ssvfiscanf_r+0x2c0>)
 80084c0:	f10d 0804 	add.w	r8, sp, #4
 80084c4:	91a0      	str	r1, [sp, #640]	@ 0x280
 80084c6:	49aa      	ldr	r1, [pc, #680]	@ (8008770 <__ssvfiscanf_r+0x2c4>)
 80084c8:	4faa      	ldr	r7, [pc, #680]	@ (8008774 <__ssvfiscanf_r+0x2c8>)
 80084ca:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80084ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	f892 9000 	ldrb.w	r9, [r2]
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	f000 8159 	beq.w	8008790 <__ssvfiscanf_r+0x2e4>
 80084de:	f817 3009 	ldrb.w	r3, [r7, r9]
 80084e2:	1c55      	adds	r5, r2, #1
 80084e4:	f013 0308 	ands.w	r3, r3, #8
 80084e8:	d019      	beq.n	800851e <__ssvfiscanf_r+0x72>
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd0f      	ble.n	8008510 <__ssvfiscanf_r+0x64>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	781a      	ldrb	r2, [r3, #0]
 80084f4:	5cba      	ldrb	r2, [r7, r2]
 80084f6:	0712      	lsls	r2, r2, #28
 80084f8:	d401      	bmi.n	80084fe <__ssvfiscanf_r+0x52>
 80084fa:	462a      	mov	r2, r5
 80084fc:	e7e9      	b.n	80084d2 <__ssvfiscanf_r+0x26>
 80084fe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008500:	3301      	adds	r3, #1
 8008502:	3201      	adds	r2, #1
 8008504:	9245      	str	r2, [sp, #276]	@ 0x114
 8008506:	6862      	ldr	r2, [r4, #4]
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	3a01      	subs	r2, #1
 800850c:	6062      	str	r2, [r4, #4]
 800850e:	e7ec      	b.n	80084ea <__ssvfiscanf_r+0x3e>
 8008510:	4621      	mov	r1, r4
 8008512:	4630      	mov	r0, r6
 8008514:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008516:	4798      	blx	r3
 8008518:	2800      	cmp	r0, #0
 800851a:	d0e9      	beq.n	80084f0 <__ssvfiscanf_r+0x44>
 800851c:	e7ed      	b.n	80084fa <__ssvfiscanf_r+0x4e>
 800851e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008522:	f040 8086 	bne.w	8008632 <__ssvfiscanf_r+0x186>
 8008526:	9341      	str	r3, [sp, #260]	@ 0x104
 8008528:	9343      	str	r3, [sp, #268]	@ 0x10c
 800852a:	7853      	ldrb	r3, [r2, #1]
 800852c:	2b2a      	cmp	r3, #42	@ 0x2a
 800852e:	bf04      	itt	eq
 8008530:	2310      	moveq	r3, #16
 8008532:	1c95      	addeq	r5, r2, #2
 8008534:	f04f 020a 	mov.w	r2, #10
 8008538:	bf08      	it	eq
 800853a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800853c:	46aa      	mov	sl, r5
 800853e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008542:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008546:	2b09      	cmp	r3, #9
 8008548:	d91e      	bls.n	8008588 <__ssvfiscanf_r+0xdc>
 800854a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8008778 <__ssvfiscanf_r+0x2cc>
 800854e:	2203      	movs	r2, #3
 8008550:	4658      	mov	r0, fp
 8008552:	f000 fc97 	bl	8008e84 <memchr>
 8008556:	b138      	cbz	r0, 8008568 <__ssvfiscanf_r+0xbc>
 8008558:	2301      	movs	r3, #1
 800855a:	4655      	mov	r5, sl
 800855c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800855e:	eba0 000b 	sub.w	r0, r0, fp
 8008562:	4083      	lsls	r3, r0
 8008564:	4313      	orrs	r3, r2
 8008566:	9341      	str	r3, [sp, #260]	@ 0x104
 8008568:	f815 3b01 	ldrb.w	r3, [r5], #1
 800856c:	2b78      	cmp	r3, #120	@ 0x78
 800856e:	d806      	bhi.n	800857e <__ssvfiscanf_r+0xd2>
 8008570:	2b57      	cmp	r3, #87	@ 0x57
 8008572:	d810      	bhi.n	8008596 <__ssvfiscanf_r+0xea>
 8008574:	2b25      	cmp	r3, #37	@ 0x25
 8008576:	d05c      	beq.n	8008632 <__ssvfiscanf_r+0x186>
 8008578:	d856      	bhi.n	8008628 <__ssvfiscanf_r+0x17c>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d074      	beq.n	8008668 <__ssvfiscanf_r+0x1bc>
 800857e:	2303      	movs	r3, #3
 8008580:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008582:	230a      	movs	r3, #10
 8008584:	9342      	str	r3, [sp, #264]	@ 0x108
 8008586:	e087      	b.n	8008698 <__ssvfiscanf_r+0x1ec>
 8008588:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800858a:	4655      	mov	r5, sl
 800858c:	fb02 1103 	mla	r1, r2, r3, r1
 8008590:	3930      	subs	r1, #48	@ 0x30
 8008592:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008594:	e7d2      	b.n	800853c <__ssvfiscanf_r+0x90>
 8008596:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800859a:	2a20      	cmp	r2, #32
 800859c:	d8ef      	bhi.n	800857e <__ssvfiscanf_r+0xd2>
 800859e:	a101      	add	r1, pc, #4	@ (adr r1, 80085a4 <__ssvfiscanf_r+0xf8>)
 80085a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085a4:	08008677 	.word	0x08008677
 80085a8:	0800857f 	.word	0x0800857f
 80085ac:	0800857f 	.word	0x0800857f
 80085b0:	080086d1 	.word	0x080086d1
 80085b4:	0800857f 	.word	0x0800857f
 80085b8:	0800857f 	.word	0x0800857f
 80085bc:	0800857f 	.word	0x0800857f
 80085c0:	0800857f 	.word	0x0800857f
 80085c4:	0800857f 	.word	0x0800857f
 80085c8:	0800857f 	.word	0x0800857f
 80085cc:	0800857f 	.word	0x0800857f
 80085d0:	080086e7 	.word	0x080086e7
 80085d4:	080086cd 	.word	0x080086cd
 80085d8:	0800862f 	.word	0x0800862f
 80085dc:	0800862f 	.word	0x0800862f
 80085e0:	0800862f 	.word	0x0800862f
 80085e4:	0800857f 	.word	0x0800857f
 80085e8:	08008689 	.word	0x08008689
 80085ec:	0800857f 	.word	0x0800857f
 80085f0:	0800857f 	.word	0x0800857f
 80085f4:	0800857f 	.word	0x0800857f
 80085f8:	0800857f 	.word	0x0800857f
 80085fc:	080086f7 	.word	0x080086f7
 8008600:	08008691 	.word	0x08008691
 8008604:	0800866f 	.word	0x0800866f
 8008608:	0800857f 	.word	0x0800857f
 800860c:	0800857f 	.word	0x0800857f
 8008610:	080086f3 	.word	0x080086f3
 8008614:	0800857f 	.word	0x0800857f
 8008618:	080086cd 	.word	0x080086cd
 800861c:	0800857f 	.word	0x0800857f
 8008620:	0800857f 	.word	0x0800857f
 8008624:	08008677 	.word	0x08008677
 8008628:	3b45      	subs	r3, #69	@ 0x45
 800862a:	2b02      	cmp	r3, #2
 800862c:	d8a7      	bhi.n	800857e <__ssvfiscanf_r+0xd2>
 800862e:	2305      	movs	r3, #5
 8008630:	e031      	b.n	8008696 <__ssvfiscanf_r+0x1ea>
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd0d      	ble.n	8008654 <__ssvfiscanf_r+0x1a8>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	454a      	cmp	r2, r9
 800863e:	f040 80a7 	bne.w	8008790 <__ssvfiscanf_r+0x2e4>
 8008642:	3301      	adds	r3, #1
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800864a:	3a01      	subs	r2, #1
 800864c:	3301      	adds	r3, #1
 800864e:	6062      	str	r2, [r4, #4]
 8008650:	9345      	str	r3, [sp, #276]	@ 0x114
 8008652:	e752      	b.n	80084fa <__ssvfiscanf_r+0x4e>
 8008654:	4621      	mov	r1, r4
 8008656:	4630      	mov	r0, r6
 8008658:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800865a:	4798      	blx	r3
 800865c:	2800      	cmp	r0, #0
 800865e:	d0eb      	beq.n	8008638 <__ssvfiscanf_r+0x18c>
 8008660:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008662:	2800      	cmp	r0, #0
 8008664:	f040 808c 	bne.w	8008780 <__ssvfiscanf_r+0x2d4>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	e08c      	b.n	8008788 <__ssvfiscanf_r+0x2dc>
 800866e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008670:	f042 0220 	orr.w	r2, r2, #32
 8008674:	9241      	str	r2, [sp, #260]	@ 0x104
 8008676:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800867c:	9241      	str	r2, [sp, #260]	@ 0x104
 800867e:	2210      	movs	r2, #16
 8008680:	2b6e      	cmp	r3, #110	@ 0x6e
 8008682:	9242      	str	r2, [sp, #264]	@ 0x108
 8008684:	d902      	bls.n	800868c <__ssvfiscanf_r+0x1e0>
 8008686:	e005      	b.n	8008694 <__ssvfiscanf_r+0x1e8>
 8008688:	2300      	movs	r3, #0
 800868a:	9342      	str	r3, [sp, #264]	@ 0x108
 800868c:	2303      	movs	r3, #3
 800868e:	e002      	b.n	8008696 <__ssvfiscanf_r+0x1ea>
 8008690:	2308      	movs	r3, #8
 8008692:	9342      	str	r3, [sp, #264]	@ 0x108
 8008694:	2304      	movs	r3, #4
 8008696:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	dd39      	ble.n	8008712 <__ssvfiscanf_r+0x266>
 800869e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086a0:	0659      	lsls	r1, r3, #25
 80086a2:	d404      	bmi.n	80086ae <__ssvfiscanf_r+0x202>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	5cba      	ldrb	r2, [r7, r2]
 80086aa:	0712      	lsls	r2, r2, #28
 80086ac:	d438      	bmi.n	8008720 <__ssvfiscanf_r+0x274>
 80086ae:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	dc47      	bgt.n	8008744 <__ssvfiscanf_r+0x298>
 80086b4:	466b      	mov	r3, sp
 80086b6:	4622      	mov	r2, r4
 80086b8:	4630      	mov	r0, r6
 80086ba:	a941      	add	r1, sp, #260	@ 0x104
 80086bc:	f000 f9fa 	bl	8008ab4 <_scanf_chars>
 80086c0:	2801      	cmp	r0, #1
 80086c2:	d065      	beq.n	8008790 <__ssvfiscanf_r+0x2e4>
 80086c4:	2802      	cmp	r0, #2
 80086c6:	f47f af18 	bne.w	80084fa <__ssvfiscanf_r+0x4e>
 80086ca:	e7c9      	b.n	8008660 <__ssvfiscanf_r+0x1b4>
 80086cc:	220a      	movs	r2, #10
 80086ce:	e7d7      	b.n	8008680 <__ssvfiscanf_r+0x1d4>
 80086d0:	4629      	mov	r1, r5
 80086d2:	4640      	mov	r0, r8
 80086d4:	f000 fb3a 	bl	8008d4c <__sccl>
 80086d8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086da:	4605      	mov	r5, r0
 80086dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7d7      	b.n	8008696 <__ssvfiscanf_r+0x1ea>
 80086e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80086ee:	2300      	movs	r3, #0
 80086f0:	e7d1      	b.n	8008696 <__ssvfiscanf_r+0x1ea>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e7cf      	b.n	8008696 <__ssvfiscanf_r+0x1ea>
 80086f6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80086f8:	06c3      	lsls	r3, r0, #27
 80086fa:	f53f aefe 	bmi.w	80084fa <__ssvfiscanf_r+0x4e>
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008702:	1d19      	adds	r1, r3, #4
 8008704:	9100      	str	r1, [sp, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	07c0      	lsls	r0, r0, #31
 800870a:	bf4c      	ite	mi
 800870c:	801a      	strhmi	r2, [r3, #0]
 800870e:	601a      	strpl	r2, [r3, #0]
 8008710:	e6f3      	b.n	80084fa <__ssvfiscanf_r+0x4e>
 8008712:	4621      	mov	r1, r4
 8008714:	4630      	mov	r0, r6
 8008716:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008718:	4798      	blx	r3
 800871a:	2800      	cmp	r0, #0
 800871c:	d0bf      	beq.n	800869e <__ssvfiscanf_r+0x1f2>
 800871e:	e79f      	b.n	8008660 <__ssvfiscanf_r+0x1b4>
 8008720:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008722:	3201      	adds	r2, #1
 8008724:	9245      	str	r2, [sp, #276]	@ 0x114
 8008726:	6862      	ldr	r2, [r4, #4]
 8008728:	3a01      	subs	r2, #1
 800872a:	2a00      	cmp	r2, #0
 800872c:	6062      	str	r2, [r4, #4]
 800872e:	dd02      	ble.n	8008736 <__ssvfiscanf_r+0x28a>
 8008730:	3301      	adds	r3, #1
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	e7b6      	b.n	80086a4 <__ssvfiscanf_r+0x1f8>
 8008736:	4621      	mov	r1, r4
 8008738:	4630      	mov	r0, r6
 800873a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800873c:	4798      	blx	r3
 800873e:	2800      	cmp	r0, #0
 8008740:	d0b0      	beq.n	80086a4 <__ssvfiscanf_r+0x1f8>
 8008742:	e78d      	b.n	8008660 <__ssvfiscanf_r+0x1b4>
 8008744:	2b04      	cmp	r3, #4
 8008746:	dc06      	bgt.n	8008756 <__ssvfiscanf_r+0x2aa>
 8008748:	466b      	mov	r3, sp
 800874a:	4622      	mov	r2, r4
 800874c:	4630      	mov	r0, r6
 800874e:	a941      	add	r1, sp, #260	@ 0x104
 8008750:	f000 fa0a 	bl	8008b68 <_scanf_i>
 8008754:	e7b4      	b.n	80086c0 <__ssvfiscanf_r+0x214>
 8008756:	4b09      	ldr	r3, [pc, #36]	@ (800877c <__ssvfiscanf_r+0x2d0>)
 8008758:	2b00      	cmp	r3, #0
 800875a:	f43f aece 	beq.w	80084fa <__ssvfiscanf_r+0x4e>
 800875e:	466b      	mov	r3, sp
 8008760:	4622      	mov	r2, r4
 8008762:	4630      	mov	r0, r6
 8008764:	a941      	add	r1, sp, #260	@ 0x104
 8008766:	f3af 8000 	nop.w
 800876a:	e7a9      	b.n	80086c0 <__ssvfiscanf_r+0x214>
 800876c:	080083f9 	.word	0x080083f9
 8008770:	08008473 	.word	0x08008473
 8008774:	08009a39 	.word	0x08009a39
 8008778:	080099f0 	.word	0x080099f0
 800877c:	00000000 	.word	0x00000000
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	065b      	lsls	r3, r3, #25
 8008784:	f53f af70 	bmi.w	8008668 <__ssvfiscanf_r+0x1bc>
 8008788:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008792:	e7f9      	b.n	8008788 <__ssvfiscanf_r+0x2dc>

08008794 <_printf_common>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	4616      	mov	r6, r2
 800879a:	4698      	mov	r8, r3
 800879c:	688a      	ldr	r2, [r1, #8]
 800879e:	690b      	ldr	r3, [r1, #16]
 80087a0:	4607      	mov	r7, r0
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bfb8      	it	lt
 80087a6:	4613      	movlt	r3, r2
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087ae:	460c      	mov	r4, r1
 80087b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087b4:	b10a      	cbz	r2, 80087ba <_printf_common+0x26>
 80087b6:	3301      	adds	r3, #1
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	0699      	lsls	r1, r3, #26
 80087be:	bf42      	ittt	mi
 80087c0:	6833      	ldrmi	r3, [r6, #0]
 80087c2:	3302      	addmi	r3, #2
 80087c4:	6033      	strmi	r3, [r6, #0]
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	f015 0506 	ands.w	r5, r5, #6
 80087cc:	d106      	bne.n	80087dc <_printf_common+0x48>
 80087ce:	f104 0a19 	add.w	sl, r4, #25
 80087d2:	68e3      	ldr	r3, [r4, #12]
 80087d4:	6832      	ldr	r2, [r6, #0]
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	42ab      	cmp	r3, r5
 80087da:	dc2b      	bgt.n	8008834 <_printf_common+0xa0>
 80087dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	3b00      	subs	r3, #0
 80087e4:	bf18      	it	ne
 80087e6:	2301      	movne	r3, #1
 80087e8:	0692      	lsls	r2, r2, #26
 80087ea:	d430      	bmi.n	800884e <_printf_common+0xba>
 80087ec:	4641      	mov	r1, r8
 80087ee:	4638      	mov	r0, r7
 80087f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087f4:	47c8      	blx	r9
 80087f6:	3001      	adds	r0, #1
 80087f8:	d023      	beq.n	8008842 <_printf_common+0xae>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	f003 0306 	and.w	r3, r3, #6
 8008802:	2b04      	cmp	r3, #4
 8008804:	bf14      	ite	ne
 8008806:	2500      	movne	r5, #0
 8008808:	6833      	ldreq	r3, [r6, #0]
 800880a:	f04f 0600 	mov.w	r6, #0
 800880e:	bf08      	it	eq
 8008810:	68e5      	ldreq	r5, [r4, #12]
 8008812:	f104 041a 	add.w	r4, r4, #26
 8008816:	bf08      	it	eq
 8008818:	1aed      	subeq	r5, r5, r3
 800881a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800881e:	bf08      	it	eq
 8008820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008824:	4293      	cmp	r3, r2
 8008826:	bfc4      	itt	gt
 8008828:	1a9b      	subgt	r3, r3, r2
 800882a:	18ed      	addgt	r5, r5, r3
 800882c:	42b5      	cmp	r5, r6
 800882e:	d11a      	bne.n	8008866 <_printf_common+0xd2>
 8008830:	2000      	movs	r0, #0
 8008832:	e008      	b.n	8008846 <_printf_common+0xb2>
 8008834:	2301      	movs	r3, #1
 8008836:	4652      	mov	r2, sl
 8008838:	4641      	mov	r1, r8
 800883a:	4638      	mov	r0, r7
 800883c:	47c8      	blx	r9
 800883e:	3001      	adds	r0, #1
 8008840:	d103      	bne.n	800884a <_printf_common+0xb6>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884a:	3501      	adds	r5, #1
 800884c:	e7c1      	b.n	80087d2 <_printf_common+0x3e>
 800884e:	2030      	movs	r0, #48	@ 0x30
 8008850:	18e1      	adds	r1, r4, r3
 8008852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800885c:	4422      	add	r2, r4
 800885e:	3302      	adds	r3, #2
 8008860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008864:	e7c2      	b.n	80087ec <_printf_common+0x58>
 8008866:	2301      	movs	r3, #1
 8008868:	4622      	mov	r2, r4
 800886a:	4641      	mov	r1, r8
 800886c:	4638      	mov	r0, r7
 800886e:	47c8      	blx	r9
 8008870:	3001      	adds	r0, #1
 8008872:	d0e6      	beq.n	8008842 <_printf_common+0xae>
 8008874:	3601      	adds	r6, #1
 8008876:	e7d9      	b.n	800882c <_printf_common+0x98>

08008878 <_printf_i>:
 8008878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	7e0f      	ldrb	r7, [r1, #24]
 800887e:	4691      	mov	r9, r2
 8008880:	2f78      	cmp	r7, #120	@ 0x78
 8008882:	4680      	mov	r8, r0
 8008884:	460c      	mov	r4, r1
 8008886:	469a      	mov	sl, r3
 8008888:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800888a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800888e:	d807      	bhi.n	80088a0 <_printf_i+0x28>
 8008890:	2f62      	cmp	r7, #98	@ 0x62
 8008892:	d80a      	bhi.n	80088aa <_printf_i+0x32>
 8008894:	2f00      	cmp	r7, #0
 8008896:	f000 80d1 	beq.w	8008a3c <_printf_i+0x1c4>
 800889a:	2f58      	cmp	r7, #88	@ 0x58
 800889c:	f000 80b8 	beq.w	8008a10 <_printf_i+0x198>
 80088a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088a8:	e03a      	b.n	8008920 <_printf_i+0xa8>
 80088aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088ae:	2b15      	cmp	r3, #21
 80088b0:	d8f6      	bhi.n	80088a0 <_printf_i+0x28>
 80088b2:	a101      	add	r1, pc, #4	@ (adr r1, 80088b8 <_printf_i+0x40>)
 80088b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b8:	08008911 	.word	0x08008911
 80088bc:	08008925 	.word	0x08008925
 80088c0:	080088a1 	.word	0x080088a1
 80088c4:	080088a1 	.word	0x080088a1
 80088c8:	080088a1 	.word	0x080088a1
 80088cc:	080088a1 	.word	0x080088a1
 80088d0:	08008925 	.word	0x08008925
 80088d4:	080088a1 	.word	0x080088a1
 80088d8:	080088a1 	.word	0x080088a1
 80088dc:	080088a1 	.word	0x080088a1
 80088e0:	080088a1 	.word	0x080088a1
 80088e4:	08008a23 	.word	0x08008a23
 80088e8:	0800894f 	.word	0x0800894f
 80088ec:	080089dd 	.word	0x080089dd
 80088f0:	080088a1 	.word	0x080088a1
 80088f4:	080088a1 	.word	0x080088a1
 80088f8:	08008a45 	.word	0x08008a45
 80088fc:	080088a1 	.word	0x080088a1
 8008900:	0800894f 	.word	0x0800894f
 8008904:	080088a1 	.word	0x080088a1
 8008908:	080088a1 	.word	0x080088a1
 800890c:	080089e5 	.word	0x080089e5
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6032      	str	r2, [r6, #0]
 8008918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800891c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008920:	2301      	movs	r3, #1
 8008922:	e09c      	b.n	8008a5e <_printf_i+0x1e6>
 8008924:	6833      	ldr	r3, [r6, #0]
 8008926:	6820      	ldr	r0, [r4, #0]
 8008928:	1d19      	adds	r1, r3, #4
 800892a:	6031      	str	r1, [r6, #0]
 800892c:	0606      	lsls	r6, r0, #24
 800892e:	d501      	bpl.n	8008934 <_printf_i+0xbc>
 8008930:	681d      	ldr	r5, [r3, #0]
 8008932:	e003      	b.n	800893c <_printf_i+0xc4>
 8008934:	0645      	lsls	r5, r0, #25
 8008936:	d5fb      	bpl.n	8008930 <_printf_i+0xb8>
 8008938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800893c:	2d00      	cmp	r5, #0
 800893e:	da03      	bge.n	8008948 <_printf_i+0xd0>
 8008940:	232d      	movs	r3, #45	@ 0x2d
 8008942:	426d      	negs	r5, r5
 8008944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008948:	230a      	movs	r3, #10
 800894a:	4858      	ldr	r0, [pc, #352]	@ (8008aac <_printf_i+0x234>)
 800894c:	e011      	b.n	8008972 <_printf_i+0xfa>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	6833      	ldr	r3, [r6, #0]
 8008952:	0608      	lsls	r0, r1, #24
 8008954:	f853 5b04 	ldr.w	r5, [r3], #4
 8008958:	d402      	bmi.n	8008960 <_printf_i+0xe8>
 800895a:	0649      	lsls	r1, r1, #25
 800895c:	bf48      	it	mi
 800895e:	b2ad      	uxthmi	r5, r5
 8008960:	2f6f      	cmp	r7, #111	@ 0x6f
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	bf14      	ite	ne
 8008966:	230a      	movne	r3, #10
 8008968:	2308      	moveq	r3, #8
 800896a:	4850      	ldr	r0, [pc, #320]	@ (8008aac <_printf_i+0x234>)
 800896c:	2100      	movs	r1, #0
 800896e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008972:	6866      	ldr	r6, [r4, #4]
 8008974:	2e00      	cmp	r6, #0
 8008976:	60a6      	str	r6, [r4, #8]
 8008978:	db05      	blt.n	8008986 <_printf_i+0x10e>
 800897a:	6821      	ldr	r1, [r4, #0]
 800897c:	432e      	orrs	r6, r5
 800897e:	f021 0104 	bic.w	r1, r1, #4
 8008982:	6021      	str	r1, [r4, #0]
 8008984:	d04b      	beq.n	8008a1e <_printf_i+0x1a6>
 8008986:	4616      	mov	r6, r2
 8008988:	fbb5 f1f3 	udiv	r1, r5, r3
 800898c:	fb03 5711 	mls	r7, r3, r1, r5
 8008990:	5dc7      	ldrb	r7, [r0, r7]
 8008992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008996:	462f      	mov	r7, r5
 8008998:	42bb      	cmp	r3, r7
 800899a:	460d      	mov	r5, r1
 800899c:	d9f4      	bls.n	8008988 <_printf_i+0x110>
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d10b      	bne.n	80089ba <_printf_i+0x142>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	07df      	lsls	r7, r3, #31
 80089a6:	d508      	bpl.n	80089ba <_printf_i+0x142>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	6861      	ldr	r1, [r4, #4]
 80089ac:	4299      	cmp	r1, r3
 80089ae:	bfde      	ittt	le
 80089b0:	2330      	movle	r3, #48	@ 0x30
 80089b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089ba:	1b92      	subs	r2, r2, r6
 80089bc:	6122      	str	r2, [r4, #16]
 80089be:	464b      	mov	r3, r9
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f8cd a000 	str.w	sl, [sp]
 80089c8:	aa03      	add	r2, sp, #12
 80089ca:	f7ff fee3 	bl	8008794 <_printf_common>
 80089ce:	3001      	adds	r0, #1
 80089d0:	d14a      	bne.n	8008a68 <_printf_i+0x1f0>
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	b004      	add	sp, #16
 80089d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	f043 0320 	orr.w	r3, r3, #32
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	2778      	movs	r7, #120	@ 0x78
 80089e6:	4832      	ldr	r0, [pc, #200]	@ (8008ab0 <_printf_i+0x238>)
 80089e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	6831      	ldr	r1, [r6, #0]
 80089f0:	061f      	lsls	r7, r3, #24
 80089f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80089f6:	d402      	bmi.n	80089fe <_printf_i+0x186>
 80089f8:	065f      	lsls	r7, r3, #25
 80089fa:	bf48      	it	mi
 80089fc:	b2ad      	uxthmi	r5, r5
 80089fe:	6031      	str	r1, [r6, #0]
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	bf44      	itt	mi
 8008a04:	f043 0320 	orrmi.w	r3, r3, #32
 8008a08:	6023      	strmi	r3, [r4, #0]
 8008a0a:	b11d      	cbz	r5, 8008a14 <_printf_i+0x19c>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	e7ad      	b.n	800896c <_printf_i+0xf4>
 8008a10:	4826      	ldr	r0, [pc, #152]	@ (8008aac <_printf_i+0x234>)
 8008a12:	e7e9      	b.n	80089e8 <_printf_i+0x170>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	f023 0320 	bic.w	r3, r3, #32
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	e7f6      	b.n	8008a0c <_printf_i+0x194>
 8008a1e:	4616      	mov	r6, r2
 8008a20:	e7bd      	b.n	800899e <_printf_i+0x126>
 8008a22:	6833      	ldr	r3, [r6, #0]
 8008a24:	6825      	ldr	r5, [r4, #0]
 8008a26:	1d18      	adds	r0, r3, #4
 8008a28:	6961      	ldr	r1, [r4, #20]
 8008a2a:	6030      	str	r0, [r6, #0]
 8008a2c:	062e      	lsls	r6, r5, #24
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	d501      	bpl.n	8008a36 <_printf_i+0x1be>
 8008a32:	6019      	str	r1, [r3, #0]
 8008a34:	e002      	b.n	8008a3c <_printf_i+0x1c4>
 8008a36:	0668      	lsls	r0, r5, #25
 8008a38:	d5fb      	bpl.n	8008a32 <_printf_i+0x1ba>
 8008a3a:	8019      	strh	r1, [r3, #0]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4616      	mov	r6, r2
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	e7bc      	b.n	80089be <_printf_i+0x146>
 8008a44:	6833      	ldr	r3, [r6, #0]
 8008a46:	2100      	movs	r1, #0
 8008a48:	1d1a      	adds	r2, r3, #4
 8008a4a:	6032      	str	r2, [r6, #0]
 8008a4c:	681e      	ldr	r6, [r3, #0]
 8008a4e:	6862      	ldr	r2, [r4, #4]
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 fa17 	bl	8008e84 <memchr>
 8008a56:	b108      	cbz	r0, 8008a5c <_printf_i+0x1e4>
 8008a58:	1b80      	subs	r0, r0, r6
 8008a5a:	6060      	str	r0, [r4, #4]
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	6123      	str	r3, [r4, #16]
 8008a60:	2300      	movs	r3, #0
 8008a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a66:	e7aa      	b.n	80089be <_printf_i+0x146>
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	47d0      	blx	sl
 8008a72:	3001      	adds	r0, #1
 8008a74:	d0ad      	beq.n	80089d2 <_printf_i+0x15a>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	079b      	lsls	r3, r3, #30
 8008a7a:	d413      	bmi.n	8008aa4 <_printf_i+0x22c>
 8008a7c:	68e0      	ldr	r0, [r4, #12]
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	4298      	cmp	r0, r3
 8008a82:	bfb8      	it	lt
 8008a84:	4618      	movlt	r0, r3
 8008a86:	e7a6      	b.n	80089d6 <_printf_i+0x15e>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	4640      	mov	r0, r8
 8008a90:	47d0      	blx	sl
 8008a92:	3001      	adds	r0, #1
 8008a94:	d09d      	beq.n	80089d2 <_printf_i+0x15a>
 8008a96:	3501      	adds	r5, #1
 8008a98:	68e3      	ldr	r3, [r4, #12]
 8008a9a:	9903      	ldr	r1, [sp, #12]
 8008a9c:	1a5b      	subs	r3, r3, r1
 8008a9e:	42ab      	cmp	r3, r5
 8008aa0:	dcf2      	bgt.n	8008a88 <_printf_i+0x210>
 8008aa2:	e7eb      	b.n	8008a7c <_printf_i+0x204>
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	f104 0619 	add.w	r6, r4, #25
 8008aaa:	e7f5      	b.n	8008a98 <_printf_i+0x220>
 8008aac:	080099fb 	.word	0x080099fb
 8008ab0:	08009a0c 	.word	0x08009a0c

08008ab4 <_scanf_chars>:
 8008ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	4615      	mov	r5, r2
 8008aba:	688a      	ldr	r2, [r1, #8]
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b932      	cbnz	r2, 8008ad0 <_scanf_chars+0x1c>
 8008ac2:	698a      	ldr	r2, [r1, #24]
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	f04f 32ff 	movne.w	r2, #4294967295
 8008acc:	2201      	moveq	r2, #1
 8008ace:	608a      	str	r2, [r1, #8]
 8008ad0:	2700      	movs	r7, #0
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008b64 <_scanf_chars+0xb0>
 8008ad8:	06d1      	lsls	r1, r2, #27
 8008ada:	bf5f      	itttt	pl
 8008adc:	681a      	ldrpl	r2, [r3, #0]
 8008ade:	1d11      	addpl	r1, r2, #4
 8008ae0:	6019      	strpl	r1, [r3, #0]
 8008ae2:	6816      	ldrpl	r6, [r2, #0]
 8008ae4:	69a0      	ldr	r0, [r4, #24]
 8008ae6:	b188      	cbz	r0, 8008b0c <_scanf_chars+0x58>
 8008ae8:	2801      	cmp	r0, #1
 8008aea:	d107      	bne.n	8008afc <_scanf_chars+0x48>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	6963      	ldr	r3, [r4, #20]
 8008af2:	5c9b      	ldrb	r3, [r3, r2]
 8008af4:	b953      	cbnz	r3, 8008b0c <_scanf_chars+0x58>
 8008af6:	2f00      	cmp	r7, #0
 8008af8:	d031      	beq.n	8008b5e <_scanf_chars+0xaa>
 8008afa:	e022      	b.n	8008b42 <_scanf_chars+0x8e>
 8008afc:	2802      	cmp	r0, #2
 8008afe:	d120      	bne.n	8008b42 <_scanf_chars+0x8e>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	d41a      	bmi.n	8008b42 <_scanf_chars+0x8e>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	3701      	adds	r7, #1
 8008b10:	06da      	lsls	r2, r3, #27
 8008b12:	bf5e      	ittt	pl
 8008b14:	682b      	ldrpl	r3, [r5, #0]
 8008b16:	781b      	ldrbpl	r3, [r3, #0]
 8008b18:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b1c:	682a      	ldr	r2, [r5, #0]
 8008b1e:	686b      	ldr	r3, [r5, #4]
 8008b20:	3201      	adds	r2, #1
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	68a2      	ldr	r2, [r4, #8]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	3a01      	subs	r2, #1
 8008b2a:	606b      	str	r3, [r5, #4]
 8008b2c:	60a2      	str	r2, [r4, #8]
 8008b2e:	b142      	cbz	r2, 8008b42 <_scanf_chars+0x8e>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dcd7      	bgt.n	8008ae4 <_scanf_chars+0x30>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4640      	mov	r0, r8
 8008b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b3c:	4798      	blx	r3
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0d0      	beq.n	8008ae4 <_scanf_chars+0x30>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	f013 0310 	ands.w	r3, r3, #16
 8008b48:	d105      	bne.n	8008b56 <_scanf_chars+0xa2>
 8008b4a:	68e2      	ldr	r2, [r4, #12]
 8008b4c:	3201      	adds	r2, #1
 8008b4e:	60e2      	str	r2, [r4, #12]
 8008b50:	69a2      	ldr	r2, [r4, #24]
 8008b52:	b102      	cbz	r2, 8008b56 <_scanf_chars+0xa2>
 8008b54:	7033      	strb	r3, [r6, #0]
 8008b56:	2000      	movs	r0, #0
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	443b      	add	r3, r7
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b62:	bf00      	nop
 8008b64:	08009a39 	.word	0x08009a39

08008b68 <_scanf_i>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	4698      	mov	r8, r3
 8008b70:	4b72      	ldr	r3, [pc, #456]	@ (8008d3c <_scanf_i+0x1d4>)
 8008b72:	b087      	sub	sp, #28
 8008b74:	4682      	mov	sl, r0
 8008b76:	4616      	mov	r6, r2
 8008b78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b82:	4b6f      	ldr	r3, [pc, #444]	@ (8008d40 <_scanf_i+0x1d8>)
 8008b84:	69a1      	ldr	r1, [r4, #24]
 8008b86:	4a6f      	ldr	r2, [pc, #444]	@ (8008d44 <_scanf_i+0x1dc>)
 8008b88:	4627      	mov	r7, r4
 8008b8a:	2903      	cmp	r1, #3
 8008b8c:	bf08      	it	eq
 8008b8e:	461a      	moveq	r2, r3
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	9201      	str	r2, [sp, #4]
 8008b94:	1e5a      	subs	r2, r3, #1
 8008b96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b9a:	bf81      	itttt	hi
 8008b9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ba0:	eb03 0905 	addhi.w	r9, r3, r5
 8008ba4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ba8:	60a3      	strhi	r3, [r4, #8]
 8008baa:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008bae:	bf98      	it	ls
 8008bb0:	f04f 0900 	movls.w	r9, #0
 8008bb4:	463d      	mov	r5, r7
 8008bb6:	f04f 0b00 	mov.w	fp, #0
 8008bba:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	6831      	ldr	r1, [r6, #0]
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	7809      	ldrb	r1, [r1, #0]
 8008bc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008bcc:	f000 f95a 	bl	8008e84 <memchr>
 8008bd0:	b328      	cbz	r0, 8008c1e <_scanf_i+0xb6>
 8008bd2:	f1bb 0f01 	cmp.w	fp, #1
 8008bd6:	d159      	bne.n	8008c8c <_scanf_i+0x124>
 8008bd8:	6862      	ldr	r2, [r4, #4]
 8008bda:	b92a      	cbnz	r2, 8008be8 <_scanf_i+0x80>
 8008bdc:	2108      	movs	r1, #8
 8008bde:	6822      	ldr	r2, [r4, #0]
 8008be0:	6061      	str	r1, [r4, #4]
 8008be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	68a2      	ldr	r2, [r4, #8]
 8008bf2:	1e51      	subs	r1, r2, #1
 8008bf4:	60a1      	str	r1, [r4, #8]
 8008bf6:	b192      	cbz	r2, 8008c1e <_scanf_i+0xb6>
 8008bf8:	6832      	ldr	r2, [r6, #0]
 8008bfa:	1c51      	adds	r1, r2, #1
 8008bfc:	6031      	str	r1, [r6, #0]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	f805 2b01 	strb.w	r2, [r5], #1
 8008c04:	6872      	ldr	r2, [r6, #4]
 8008c06:	3a01      	subs	r2, #1
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	6072      	str	r2, [r6, #4]
 8008c0c:	dc07      	bgt.n	8008c1e <_scanf_i+0xb6>
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4650      	mov	r0, sl
 8008c12:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008c16:	4790      	blx	r2
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f040 8085 	bne.w	8008d28 <_scanf_i+0x1c0>
 8008c1e:	f10b 0b01 	add.w	fp, fp, #1
 8008c22:	f1bb 0f03 	cmp.w	fp, #3
 8008c26:	d1cb      	bne.n	8008bc0 <_scanf_i+0x58>
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	b90b      	cbnz	r3, 8008c30 <_scanf_i+0xc8>
 8008c2c:	230a      	movs	r3, #10
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	4945      	ldr	r1, [pc, #276]	@ (8008d48 <_scanf_i+0x1e0>)
 8008c34:	6960      	ldr	r0, [r4, #20]
 8008c36:	1ac9      	subs	r1, r1, r3
 8008c38:	f000 f888 	bl	8008d4c <__sccl>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d03d      	beq.n	8008cc4 <_scanf_i+0x15c>
 8008c48:	6831      	ldr	r1, [r6, #0]
 8008c4a:	6960      	ldr	r0, [r4, #20]
 8008c4c:	f891 c000 	ldrb.w	ip, [r1]
 8008c50:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d035      	beq.n	8008cc4 <_scanf_i+0x15c>
 8008c58:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008c5c:	d124      	bne.n	8008ca8 <_scanf_i+0x140>
 8008c5e:	0510      	lsls	r0, r2, #20
 8008c60:	d522      	bpl.n	8008ca8 <_scanf_i+0x140>
 8008c62:	f10b 0b01 	add.w	fp, fp, #1
 8008c66:	f1b9 0f00 	cmp.w	r9, #0
 8008c6a:	d003      	beq.n	8008c74 <_scanf_i+0x10c>
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	6873      	ldr	r3, [r6, #4]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	6073      	str	r3, [r6, #4]
 8008c7c:	dd1b      	ble.n	8008cb6 <_scanf_i+0x14e>
 8008c7e:	6833      	ldr	r3, [r6, #0]
 8008c80:	3301      	adds	r3, #1
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	60a3      	str	r3, [r4, #8]
 8008c8a:	e7d9      	b.n	8008c40 <_scanf_i+0xd8>
 8008c8c:	f1bb 0f02 	cmp.w	fp, #2
 8008c90:	d1ae      	bne.n	8008bf0 <_scanf_i+0x88>
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008c98:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008c9c:	d1c4      	bne.n	8008c28 <_scanf_i+0xc0>
 8008c9e:	2110      	movs	r1, #16
 8008ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ca4:	6061      	str	r1, [r4, #4]
 8008ca6:	e7a2      	b.n	8008bee <_scanf_i+0x86>
 8008ca8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	780b      	ldrb	r3, [r1, #0]
 8008cb0:	f805 3b01 	strb.w	r3, [r5], #1
 8008cb4:	e7de      	b.n	8008c74 <_scanf_i+0x10c>
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4650      	mov	r0, sl
 8008cba:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cbe:	4798      	blx	r3
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d0df      	beq.n	8008c84 <_scanf_i+0x11c>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	05d9      	lsls	r1, r3, #23
 8008cc8:	d50d      	bpl.n	8008ce6 <_scanf_i+0x17e>
 8008cca:	42bd      	cmp	r5, r7
 8008ccc:	d909      	bls.n	8008ce2 <_scanf_i+0x17a>
 8008cce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cda:	f105 39ff 	add.w	r9, r5, #4294967295
 8008cde:	4798      	blx	r3
 8008ce0:	464d      	mov	r5, r9
 8008ce2:	42bd      	cmp	r5, r7
 8008ce4:	d028      	beq.n	8008d38 <_scanf_i+0x1d0>
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	f012 0210 	ands.w	r2, r2, #16
 8008cec:	d113      	bne.n	8008d16 <_scanf_i+0x1ae>
 8008cee:	702a      	strb	r2, [r5, #0]
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	9e01      	ldr	r6, [sp, #4]
 8008cf8:	47b0      	blx	r6
 8008cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	f8c8 2000 	str.w	r2, [r8]
 8008d06:	f011 0f20 	tst.w	r1, #32
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	d00f      	beq.n	8008d2e <_scanf_i+0x1c6>
 8008d0e:	6018      	str	r0, [r3, #0]
 8008d10:	68e3      	ldr	r3, [r4, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60e3      	str	r3, [r4, #12]
 8008d16:	2000      	movs	r0, #0
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	1bed      	subs	r5, r5, r7
 8008d1c:	445d      	add	r5, fp
 8008d1e:	442b      	add	r3, r5
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	b007      	add	sp, #28
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	e7ca      	b.n	8008cc4 <_scanf_i+0x15c>
 8008d2e:	07ca      	lsls	r2, r1, #31
 8008d30:	bf4c      	ite	mi
 8008d32:	8018      	strhmi	r0, [r3, #0]
 8008d34:	6018      	strpl	r0, [r3, #0]
 8008d36:	e7eb      	b.n	8008d10 <_scanf_i+0x1a8>
 8008d38:	2001      	movs	r0, #1
 8008d3a:	e7f2      	b.n	8008d22 <_scanf_i+0x1ba>
 8008d3c:	08009988 	.word	0x08009988
 8008d40:	0800900d 	.word	0x0800900d
 8008d44:	080090ed 	.word	0x080090ed
 8008d48:	08009a2d 	.word	0x08009a2d

08008d4c <__sccl>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	780b      	ldrb	r3, [r1, #0]
 8008d50:	4604      	mov	r4, r0
 8008d52:	2b5e      	cmp	r3, #94	@ 0x5e
 8008d54:	bf0b      	itete	eq
 8008d56:	784b      	ldrbeq	r3, [r1, #1]
 8008d58:	1c4a      	addne	r2, r1, #1
 8008d5a:	1c8a      	addeq	r2, r1, #2
 8008d5c:	2100      	movne	r1, #0
 8008d5e:	bf08      	it	eq
 8008d60:	2101      	moveq	r1, #1
 8008d62:	3801      	subs	r0, #1
 8008d64:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008d68:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008d6c:	42a8      	cmp	r0, r5
 8008d6e:	d1fb      	bne.n	8008d68 <__sccl+0x1c>
 8008d70:	b90b      	cbnz	r3, 8008d76 <__sccl+0x2a>
 8008d72:	1e50      	subs	r0, r2, #1
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	f081 0101 	eor.w	r1, r1, #1
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	54e1      	strb	r1, [r4, r3]
 8008d7e:	4602      	mov	r2, r0
 8008d80:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008d84:	2d2d      	cmp	r5, #45	@ 0x2d
 8008d86:	d005      	beq.n	8008d94 <__sccl+0x48>
 8008d88:	2d5d      	cmp	r5, #93	@ 0x5d
 8008d8a:	d016      	beq.n	8008dba <__sccl+0x6e>
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	d0f1      	beq.n	8008d74 <__sccl+0x28>
 8008d90:	462b      	mov	r3, r5
 8008d92:	e7f2      	b.n	8008d7a <__sccl+0x2e>
 8008d94:	7846      	ldrb	r6, [r0, #1]
 8008d96:	2e5d      	cmp	r6, #93	@ 0x5d
 8008d98:	d0fa      	beq.n	8008d90 <__sccl+0x44>
 8008d9a:	42b3      	cmp	r3, r6
 8008d9c:	dcf8      	bgt.n	8008d90 <__sccl+0x44>
 8008d9e:	461a      	mov	r2, r3
 8008da0:	3002      	adds	r0, #2
 8008da2:	3201      	adds	r2, #1
 8008da4:	4296      	cmp	r6, r2
 8008da6:	54a1      	strb	r1, [r4, r2]
 8008da8:	dcfb      	bgt.n	8008da2 <__sccl+0x56>
 8008daa:	1af2      	subs	r2, r6, r3
 8008dac:	3a01      	subs	r2, #1
 8008dae:	42b3      	cmp	r3, r6
 8008db0:	bfa8      	it	ge
 8008db2:	2200      	movge	r2, #0
 8008db4:	1c5d      	adds	r5, r3, #1
 8008db6:	18ab      	adds	r3, r5, r2
 8008db8:	e7e1      	b.n	8008d7e <__sccl+0x32>
 8008dba:	4610      	mov	r0, r2
 8008dbc:	e7da      	b.n	8008d74 <__sccl+0x28>

08008dbe <__submore>:
 8008dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008dc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	d11b      	bne.n	8008e06 <__submore+0x48>
 8008dce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008dd2:	f7ff f92d 	bl	8008030 <_malloc_r>
 8008dd6:	b918      	cbnz	r0, 8008de0 <__submore+0x22>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008de4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008de6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008dea:	6360      	str	r0, [r4, #52]	@ 0x34
 8008dec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008df0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008df4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008df8:	7043      	strb	r3, [r0, #1]
 8008dfa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008dfe:	7003      	strb	r3, [r0, #0]
 8008e00:	6020      	str	r0, [r4, #0]
 8008e02:	2000      	movs	r0, #0
 8008e04:	e7ea      	b.n	8008ddc <__submore+0x1e>
 8008e06:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008e08:	0077      	lsls	r7, r6, #1
 8008e0a:	463a      	mov	r2, r7
 8008e0c:	f000 f856 	bl	8008ebc <_realloc_r>
 8008e10:	4605      	mov	r5, r0
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d0e0      	beq.n	8008dd8 <__submore+0x1a>
 8008e16:	eb00 0806 	add.w	r8, r0, r6
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f000 f83e 	bl	8008ea0 <memcpy>
 8008e24:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008e28:	f8c4 8000 	str.w	r8, [r4]
 8008e2c:	e7e9      	b.n	8008e02 <__submore+0x44>

08008e2e <memmove>:
 8008e2e:	4288      	cmp	r0, r1
 8008e30:	b510      	push	{r4, lr}
 8008e32:	eb01 0402 	add.w	r4, r1, r2
 8008e36:	d902      	bls.n	8008e3e <memmove+0x10>
 8008e38:	4284      	cmp	r4, r0
 8008e3a:	4623      	mov	r3, r4
 8008e3c:	d807      	bhi.n	8008e4e <memmove+0x20>
 8008e3e:	1e43      	subs	r3, r0, #1
 8008e40:	42a1      	cmp	r1, r4
 8008e42:	d008      	beq.n	8008e56 <memmove+0x28>
 8008e44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e4c:	e7f8      	b.n	8008e40 <memmove+0x12>
 8008e4e:	4601      	mov	r1, r0
 8008e50:	4402      	add	r2, r0
 8008e52:	428a      	cmp	r2, r1
 8008e54:	d100      	bne.n	8008e58 <memmove+0x2a>
 8008e56:	bd10      	pop	{r4, pc}
 8008e58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e60:	e7f7      	b.n	8008e52 <memmove+0x24>
	...

08008e64 <_sbrk_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	2300      	movs	r3, #0
 8008e68:	4d05      	ldr	r5, [pc, #20]	@ (8008e80 <_sbrk_r+0x1c>)
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	602b      	str	r3, [r5, #0]
 8008e70:	f7fa f930 	bl	80030d4 <_sbrk>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_sbrk_r+0x1a>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_sbrk_r+0x1a>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20000494 	.word	0x20000494

08008e84 <memchr>:
 8008e84:	4603      	mov	r3, r0
 8008e86:	b510      	push	{r4, lr}
 8008e88:	b2c9      	uxtb	r1, r1
 8008e8a:	4402      	add	r2, r0
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	d101      	bne.n	8008e96 <memchr+0x12>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e003      	b.n	8008e9e <memchr+0x1a>
 8008e96:	7804      	ldrb	r4, [r0, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	428c      	cmp	r4, r1
 8008e9c:	d1f6      	bne.n	8008e8c <memchr+0x8>
 8008e9e:	bd10      	pop	{r4, pc}

08008ea0 <memcpy>:
 8008ea0:	440a      	add	r2, r1
 8008ea2:	4291      	cmp	r1, r2
 8008ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea8:	d100      	bne.n	8008eac <memcpy+0xc>
 8008eaa:	4770      	bx	lr
 8008eac:	b510      	push	{r4, lr}
 8008eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb2:	4291      	cmp	r1, r2
 8008eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb8:	d1f9      	bne.n	8008eae <memcpy+0xe>
 8008eba:	bd10      	pop	{r4, pc}

08008ebc <_realloc_r>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	4614      	mov	r4, r2
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	b921      	cbnz	r1, 8008ed2 <_realloc_r+0x16>
 8008ec8:	4611      	mov	r1, r2
 8008eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	f7ff b8af 	b.w	8008030 <_malloc_r>
 8008ed2:	b92a      	cbnz	r2, 8008ee0 <_realloc_r+0x24>
 8008ed4:	f7ff f842 	bl	8007f5c <_free_r>
 8008ed8:	4625      	mov	r5, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	f000 f906 	bl	80090f0 <_malloc_usable_size_r>
 8008ee4:	4284      	cmp	r4, r0
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	d802      	bhi.n	8008ef0 <_realloc_r+0x34>
 8008eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008eee:	d8f4      	bhi.n	8008eda <_realloc_r+0x1e>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff f89c 	bl	8008030 <_malloc_r>
 8008ef8:	4680      	mov	r8, r0
 8008efa:	b908      	cbnz	r0, 8008f00 <_realloc_r+0x44>
 8008efc:	4645      	mov	r5, r8
 8008efe:	e7ec      	b.n	8008eda <_realloc_r+0x1e>
 8008f00:	42b4      	cmp	r4, r6
 8008f02:	4622      	mov	r2, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	bf28      	it	cs
 8008f08:	4632      	movcs	r2, r6
 8008f0a:	f7ff ffc9 	bl	8008ea0 <memcpy>
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff f823 	bl	8007f5c <_free_r>
 8008f16:	e7f1      	b.n	8008efc <_realloc_r+0x40>

08008f18 <_strtol_l.isra.0>:
 8008f18:	2b24      	cmp	r3, #36	@ 0x24
 8008f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1e:	4686      	mov	lr, r0
 8008f20:	4690      	mov	r8, r2
 8008f22:	d801      	bhi.n	8008f28 <_strtol_l.isra.0+0x10>
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d106      	bne.n	8008f36 <_strtol_l.isra.0+0x1e>
 8008f28:	f7fe ffec 	bl	8007f04 <__errno>
 8008f2c:	2316      	movs	r3, #22
 8008f2e:	6003      	str	r3, [r0, #0]
 8008f30:	2000      	movs	r0, #0
 8008f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f36:	460d      	mov	r5, r1
 8008f38:	4833      	ldr	r0, [pc, #204]	@ (8009008 <_strtol_l.isra.0+0xf0>)
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f40:	5d06      	ldrb	r6, [r0, r4]
 8008f42:	f016 0608 	ands.w	r6, r6, #8
 8008f46:	d1f8      	bne.n	8008f3a <_strtol_l.isra.0+0x22>
 8008f48:	2c2d      	cmp	r4, #45	@ 0x2d
 8008f4a:	d110      	bne.n	8008f6e <_strtol_l.isra.0+0x56>
 8008f4c:	2601      	movs	r6, #1
 8008f4e:	782c      	ldrb	r4, [r5, #0]
 8008f50:	1c95      	adds	r5, r2, #2
 8008f52:	f033 0210 	bics.w	r2, r3, #16
 8008f56:	d115      	bne.n	8008f84 <_strtol_l.isra.0+0x6c>
 8008f58:	2c30      	cmp	r4, #48	@ 0x30
 8008f5a:	d10d      	bne.n	8008f78 <_strtol_l.isra.0+0x60>
 8008f5c:	782a      	ldrb	r2, [r5, #0]
 8008f5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f62:	2a58      	cmp	r2, #88	@ 0x58
 8008f64:	d108      	bne.n	8008f78 <_strtol_l.isra.0+0x60>
 8008f66:	786c      	ldrb	r4, [r5, #1]
 8008f68:	3502      	adds	r5, #2
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	e00a      	b.n	8008f84 <_strtol_l.isra.0+0x6c>
 8008f6e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f70:	bf04      	itt	eq
 8008f72:	782c      	ldrbeq	r4, [r5, #0]
 8008f74:	1c95      	addeq	r5, r2, #2
 8008f76:	e7ec      	b.n	8008f52 <_strtol_l.isra.0+0x3a>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f6      	bne.n	8008f6a <_strtol_l.isra.0+0x52>
 8008f7c:	2c30      	cmp	r4, #48	@ 0x30
 8008f7e:	bf14      	ite	ne
 8008f80:	230a      	movne	r3, #10
 8008f82:	2308      	moveq	r3, #8
 8008f84:	2200      	movs	r2, #0
 8008f86:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008f8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f8e:	fbbc f9f3 	udiv	r9, ip, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f9c:	2f09      	cmp	r7, #9
 8008f9e:	d80f      	bhi.n	8008fc0 <_strtol_l.isra.0+0xa8>
 8008fa0:	463c      	mov	r4, r7
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	dd1b      	ble.n	8008fde <_strtol_l.isra.0+0xc6>
 8008fa6:	1c57      	adds	r7, r2, #1
 8008fa8:	d007      	beq.n	8008fba <_strtol_l.isra.0+0xa2>
 8008faa:	4581      	cmp	r9, r0
 8008fac:	d314      	bcc.n	8008fd8 <_strtol_l.isra.0+0xc0>
 8008fae:	d101      	bne.n	8008fb4 <_strtol_l.isra.0+0x9c>
 8008fb0:	45a2      	cmp	sl, r4
 8008fb2:	db11      	blt.n	8008fd8 <_strtol_l.isra.0+0xc0>
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	fb00 4003 	mla	r0, r0, r3, r4
 8008fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fbe:	e7eb      	b.n	8008f98 <_strtol_l.isra.0+0x80>
 8008fc0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008fc4:	2f19      	cmp	r7, #25
 8008fc6:	d801      	bhi.n	8008fcc <_strtol_l.isra.0+0xb4>
 8008fc8:	3c37      	subs	r4, #55	@ 0x37
 8008fca:	e7ea      	b.n	8008fa2 <_strtol_l.isra.0+0x8a>
 8008fcc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008fd0:	2f19      	cmp	r7, #25
 8008fd2:	d804      	bhi.n	8008fde <_strtol_l.isra.0+0xc6>
 8008fd4:	3c57      	subs	r4, #87	@ 0x57
 8008fd6:	e7e4      	b.n	8008fa2 <_strtol_l.isra.0+0x8a>
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fdc:	e7ed      	b.n	8008fba <_strtol_l.isra.0+0xa2>
 8008fde:	1c53      	adds	r3, r2, #1
 8008fe0:	d108      	bne.n	8008ff4 <_strtol_l.isra.0+0xdc>
 8008fe2:	2322      	movs	r3, #34	@ 0x22
 8008fe4:	4660      	mov	r0, ip
 8008fe6:	f8ce 3000 	str.w	r3, [lr]
 8008fea:	f1b8 0f00 	cmp.w	r8, #0
 8008fee:	d0a0      	beq.n	8008f32 <_strtol_l.isra.0+0x1a>
 8008ff0:	1e69      	subs	r1, r5, #1
 8008ff2:	e006      	b.n	8009002 <_strtol_l.isra.0+0xea>
 8008ff4:	b106      	cbz	r6, 8008ff8 <_strtol_l.isra.0+0xe0>
 8008ff6:	4240      	negs	r0, r0
 8008ff8:	f1b8 0f00 	cmp.w	r8, #0
 8008ffc:	d099      	beq.n	8008f32 <_strtol_l.isra.0+0x1a>
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	d1f6      	bne.n	8008ff0 <_strtol_l.isra.0+0xd8>
 8009002:	f8c8 1000 	str.w	r1, [r8]
 8009006:	e794      	b.n	8008f32 <_strtol_l.isra.0+0x1a>
 8009008:	08009a39 	.word	0x08009a39

0800900c <_strtol_r>:
 800900c:	f7ff bf84 	b.w	8008f18 <_strtol_l.isra.0>

08009010 <_strtoul_l.isra.0>:
 8009010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009014:	4686      	mov	lr, r0
 8009016:	460d      	mov	r5, r1
 8009018:	4e33      	ldr	r6, [pc, #204]	@ (80090e8 <_strtoul_l.isra.0+0xd8>)
 800901a:	4628      	mov	r0, r5
 800901c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009020:	5d37      	ldrb	r7, [r6, r4]
 8009022:	f017 0708 	ands.w	r7, r7, #8
 8009026:	d1f8      	bne.n	800901a <_strtoul_l.isra.0+0xa>
 8009028:	2c2d      	cmp	r4, #45	@ 0x2d
 800902a:	d110      	bne.n	800904e <_strtoul_l.isra.0+0x3e>
 800902c:	2701      	movs	r7, #1
 800902e:	782c      	ldrb	r4, [r5, #0]
 8009030:	1c85      	adds	r5, r0, #2
 8009032:	f033 0010 	bics.w	r0, r3, #16
 8009036:	d115      	bne.n	8009064 <_strtoul_l.isra.0+0x54>
 8009038:	2c30      	cmp	r4, #48	@ 0x30
 800903a:	d10d      	bne.n	8009058 <_strtoul_l.isra.0+0x48>
 800903c:	7828      	ldrb	r0, [r5, #0]
 800903e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009042:	2858      	cmp	r0, #88	@ 0x58
 8009044:	d108      	bne.n	8009058 <_strtoul_l.isra.0+0x48>
 8009046:	786c      	ldrb	r4, [r5, #1]
 8009048:	3502      	adds	r5, #2
 800904a:	2310      	movs	r3, #16
 800904c:	e00a      	b.n	8009064 <_strtoul_l.isra.0+0x54>
 800904e:	2c2b      	cmp	r4, #43	@ 0x2b
 8009050:	bf04      	itt	eq
 8009052:	782c      	ldrbeq	r4, [r5, #0]
 8009054:	1c85      	addeq	r5, r0, #2
 8009056:	e7ec      	b.n	8009032 <_strtoul_l.isra.0+0x22>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1f6      	bne.n	800904a <_strtoul_l.isra.0+0x3a>
 800905c:	2c30      	cmp	r4, #48	@ 0x30
 800905e:	bf14      	ite	ne
 8009060:	230a      	movne	r3, #10
 8009062:	2308      	moveq	r3, #8
 8009064:	f04f 38ff 	mov.w	r8, #4294967295
 8009068:	fbb8 f8f3 	udiv	r8, r8, r3
 800906c:	2600      	movs	r6, #0
 800906e:	fb03 f908 	mul.w	r9, r3, r8
 8009072:	4630      	mov	r0, r6
 8009074:	ea6f 0909 	mvn.w	r9, r9
 8009078:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800907c:	f1bc 0f09 	cmp.w	ip, #9
 8009080:	d810      	bhi.n	80090a4 <_strtoul_l.isra.0+0x94>
 8009082:	4664      	mov	r4, ip
 8009084:	42a3      	cmp	r3, r4
 8009086:	dd1e      	ble.n	80090c6 <_strtoul_l.isra.0+0xb6>
 8009088:	f1b6 3fff 	cmp.w	r6, #4294967295
 800908c:	d007      	beq.n	800909e <_strtoul_l.isra.0+0x8e>
 800908e:	4580      	cmp	r8, r0
 8009090:	d316      	bcc.n	80090c0 <_strtoul_l.isra.0+0xb0>
 8009092:	d101      	bne.n	8009098 <_strtoul_l.isra.0+0x88>
 8009094:	45a1      	cmp	r9, r4
 8009096:	db13      	blt.n	80090c0 <_strtoul_l.isra.0+0xb0>
 8009098:	2601      	movs	r6, #1
 800909a:	fb00 4003 	mla	r0, r0, r3, r4
 800909e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090a2:	e7e9      	b.n	8009078 <_strtoul_l.isra.0+0x68>
 80090a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80090a8:	f1bc 0f19 	cmp.w	ip, #25
 80090ac:	d801      	bhi.n	80090b2 <_strtoul_l.isra.0+0xa2>
 80090ae:	3c37      	subs	r4, #55	@ 0x37
 80090b0:	e7e8      	b.n	8009084 <_strtoul_l.isra.0+0x74>
 80090b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80090b6:	f1bc 0f19 	cmp.w	ip, #25
 80090ba:	d804      	bhi.n	80090c6 <_strtoul_l.isra.0+0xb6>
 80090bc:	3c57      	subs	r4, #87	@ 0x57
 80090be:	e7e1      	b.n	8009084 <_strtoul_l.isra.0+0x74>
 80090c0:	f04f 36ff 	mov.w	r6, #4294967295
 80090c4:	e7eb      	b.n	800909e <_strtoul_l.isra.0+0x8e>
 80090c6:	1c73      	adds	r3, r6, #1
 80090c8:	d106      	bne.n	80090d8 <_strtoul_l.isra.0+0xc8>
 80090ca:	2322      	movs	r3, #34	@ 0x22
 80090cc:	4630      	mov	r0, r6
 80090ce:	f8ce 3000 	str.w	r3, [lr]
 80090d2:	b932      	cbnz	r2, 80090e2 <_strtoul_l.isra.0+0xd2>
 80090d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d8:	b107      	cbz	r7, 80090dc <_strtoul_l.isra.0+0xcc>
 80090da:	4240      	negs	r0, r0
 80090dc:	2a00      	cmp	r2, #0
 80090de:	d0f9      	beq.n	80090d4 <_strtoul_l.isra.0+0xc4>
 80090e0:	b106      	cbz	r6, 80090e4 <_strtoul_l.isra.0+0xd4>
 80090e2:	1e69      	subs	r1, r5, #1
 80090e4:	6011      	str	r1, [r2, #0]
 80090e6:	e7f5      	b.n	80090d4 <_strtoul_l.isra.0+0xc4>
 80090e8:	08009a39 	.word	0x08009a39

080090ec <_strtoul_r>:
 80090ec:	f7ff bf90 	b.w	8009010 <_strtoul_l.isra.0>

080090f0 <_malloc_usable_size_r>:
 80090f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f4:	1f18      	subs	r0, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfbc      	itt	lt
 80090fa:	580b      	ldrlt	r3, [r1, r0]
 80090fc:	18c0      	addlt	r0, r0, r3
 80090fe:	4770      	bx	lr

08009100 <_init>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr

0800910c <_fini>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr
