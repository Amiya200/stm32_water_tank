
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003e9c  08003e9c  00004e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f34  08003f34  00004f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f3c  08003f3c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f40  08003f40  00004f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  08003f50  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003f50  000051a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1c0  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264c  00000000  00000000  000141f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00016848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b46  00000000  00000000  000176c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a71  00000000  00000000  00018206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125da  00000000  00000000  00030c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1c0  00000000  00000000  00043251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d2c  00000000  00000000  000d0454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d4180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e84 	.word	0x08003e84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003e84 	.word	0x08003e84

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f001 fab1 	bl	8001c88 <HAL_ADCEx_Calibration_Start>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <ADC_Init+0x18>
    {
        Error_Handler();
 800072c:	f000 fbb4 	bl	8000e98 <Error_Handler>
    }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08f      	sub	sp, #60	@ 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000752:	2306      	movs	r3, #6
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000756:	4b86      	ldr	r3, [pc, #536]	@ (8000970 <ADC_ReadAllChannels+0x238>)
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    const float DRY_RUN_THRESHOLD = 1.0f; // Threshold for dry run detection
 800075a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000766:	e0ee      	b.n	8000946 <ADC_ReadAllChannels+0x20e>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800076c:	4a81      	ldr	r2, [pc, #516]	@ (8000974 <ADC_ReadAllChannels+0x23c>)
 800076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000772:	623b      	str	r3, [r7, #32]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4619      	mov	r1, r3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f001 f8f0 	bl	8001960 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 ff2d 	bl	80015e0 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000786:	210a      	movs	r1, #10
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 ffd7 	bl	800173c <HAL_ADC_PollForConversion>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	f040 80bc 	bne.w	800090e <ADC_ReadAllChannels+0x1d6>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000796:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f001 f8d4 	bl	8001948 <HAL_ADC_GetValue>
 80007a0:	4602      	mov	r2, r0
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 80007a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fd92 	bl	80002dc <__aeabi_ui2f>
 80007b8:	4603      	mov	r3, r0
 80007ba:	496f      	ldr	r1, [pc, #444]	@ (8000978 <ADC_ReadAllChannels+0x240>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fde5 	bl	800038c <__aeabi_fmul>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 80007c8:	496c      	ldr	r1, [pc, #432]	@ (800097c <ADC_ReadAllChannels+0x244>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe92 	bl	80004f4 <__aeabi_fdiv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4619      	mov	r1, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	1da2      	adds	r2, r4, #6
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 80007dc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3206      	adds	r2, #6
 80007e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4614      	mov	r4, r2
 80007ec:	4964      	ldr	r1, [pc, #400]	@ (8000980 <ADC_ReadAllChannels+0x248>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff7e 	bl	80006f0 <__aeabi_fcmpge>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <ADC_ReadAllChannels+0xc6>
 80007fa:	2300      	movs	r3, #0
 80007fc:	461c      	mov	r4, r3
 80007fe:	b2e2      	uxtb	r2, r4
 8000800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000804:	4611      	mov	r1, r2
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	460a      	mov	r2, r1
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000810:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	3206      	adds	r2, #6
 8000818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081c:	4619      	mov	r1, r3
 800081e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000820:	f7ff ff5c 	bl	80006dc <__aeabi_fcmple>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d053      	beq.n	80008d2 <ADC_ReadAllChannels+0x19a>
            {
                switch (i)
 800082a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800082e:	2b04      	cmp	r3, #4
 8000830:	f200 8083 	bhi.w	800093a <ADC_ReadAllChannels+0x202>
 8000834:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <ADC_ReadAllChannels+0x104>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	08000851 	.word	0x08000851
 8000840:	0800086b 	.word	0x0800086b
 8000844:	08000885 	.word	0x08000885
 8000848:	0800089f 	.word	0x0800089f
 800084c:	080008b9 	.word	0x080008b9
                {
                    case 0: // IN0
                        UART_ReadDataPacket(dataPacket, "@10W#", sizeof("@10W#") - 1);
 8000850:	2205      	movs	r2, #5
 8000852:	494c      	ldr	r1, [pc, #304]	@ (8000984 <ADC_ReadAllChannels+0x24c>)
 8000854:	484c      	ldr	r0, [pc, #304]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 8000856:	f000 fce3 	bl	8001220 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 800085a:	494b      	ldr	r1, [pc, #300]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 800085c:	484b      	ldr	r0, [pc, #300]	@ (800098c <ADC_ReadAllChannels+0x254>)
 800085e:	f000 fccb 	bl	80011f8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000862:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
                        break;
 8000868:	e068      	b.n	800093c <ADC_ReadAllChannels+0x204>
                    case 1: // IN1
                        UART_ReadDataPacket(dataPacket, "@30W#", sizeof("@30W#") - 1);
 800086a:	2205      	movs	r2, #5
 800086c:	4949      	ldr	r1, [pc, #292]	@ (8000994 <ADC_ReadAllChannels+0x25c>)
 800086e:	4846      	ldr	r0, [pc, #280]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 8000870:	f000 fcd6 	bl	8001220 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000874:	4944      	ldr	r1, [pc, #272]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 8000876:	4845      	ldr	r0, [pc, #276]	@ (800098c <ADC_ReadAllChannels+0x254>)
 8000878:	f000 fcbe 	bl	80011f8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 800087c:	4b44      	ldr	r3, [pc, #272]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
                        break;
 8000882:	e05b      	b.n	800093c <ADC_ReadAllChannels+0x204>
                    case 2: // IN2
                        UART_ReadDataPacket(dataPacket, "@70W#", sizeof("@70W#") - 1);
 8000884:	2205      	movs	r2, #5
 8000886:	4944      	ldr	r1, [pc, #272]	@ (8000998 <ADC_ReadAllChannels+0x260>)
 8000888:	483f      	ldr	r0, [pc, #252]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 800088a:	f000 fcc9 	bl	8001220 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 800088e:	493e      	ldr	r1, [pc, #248]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 8000890:	483e      	ldr	r0, [pc, #248]	@ (800098c <ADC_ReadAllChannels+0x254>)
 8000892:	f000 fcb1 	bl	80011f8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000896:	4b3e      	ldr	r3, [pc, #248]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
                        break;
 800089c:	e04e      	b.n	800093c <ADC_ReadAllChannels+0x204>
                    case 3: // IN3
                        UART_ReadDataPacket(dataPacket, "@1:W#", sizeof("@1:W#") - 1);
 800089e:	2205      	movs	r2, #5
 80008a0:	493e      	ldr	r1, [pc, #248]	@ (800099c <ADC_ReadAllChannels+0x264>)
 80008a2:	4839      	ldr	r0, [pc, #228]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 80008a4:	f000 fcbc 	bl	8001220 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008a8:	4937      	ldr	r1, [pc, #220]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 80008aa:	4838      	ldr	r0, [pc, #224]	@ (800098c <ADC_ReadAllChannels+0x254>)
 80008ac:	f000 fca4 	bl	80011f8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008b0:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
                        break;
 80008b6:	e041      	b.n	800093c <ADC_ReadAllChannels+0x204>
                    case 4: // IN4
                        UART_ReadDataPacket(dataPacket, "@DRY#", sizeof("@DRY#") - 1);
 80008b8:	2205      	movs	r2, #5
 80008ba:	4939      	ldr	r1, [pc, #228]	@ (80009a0 <ADC_ReadAllChannels+0x268>)
 80008bc:	4832      	ldr	r0, [pc, #200]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 80008be:	f000 fcaf 	bl	8001220 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008c2:	4931      	ldr	r1, [pc, #196]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 80008c4:	4831      	ldr	r0, [pc, #196]	@ (800098c <ADC_ReadAllChannels+0x254>)
 80008c6:	f000 fc97 	bl	80011f8 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
                        break;
 80008d0:	e034      	b.n	800093c <ADC_ReadAllChannels+0x204>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 80008d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3206      	adds	r2, #6
 80008da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008de:	4619      	mov	r1, r3
 80008e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008e2:	f7ff ff0f 	bl	8000704 <__aeabi_fcmpgt>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d027      	beq.n	800093c <ADC_ReadAllChannels+0x204>
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d123      	bne.n	800093c <ADC_ReadAllChannels+0x204>
            {
                // If the voltage is below the dry run threshold and the motor is on
                UART_ReadDataPacket(dataPacket, "@MT0#", sizeof("@MT0#") - 1);
 80008f4:	2205      	movs	r2, #5
 80008f6:	492b      	ldr	r1, [pc, #172]	@ (80009a4 <ADC_ReadAllChannels+0x26c>)
 80008f8:	4823      	ldr	r0, [pc, #140]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 80008fa:	f000 fc91 	bl	8001220 <UART_ReadDataPacket>
                UART_TransmitString(&huart1, dataPacket);
 80008fe:	4922      	ldr	r1, [pc, #136]	@ (8000988 <ADC_ReadAllChannels+0x250>)
 8000900:	4822      	ldr	r0, [pc, #136]	@ (800098c <ADC_ReadAllChannels+0x254>)
 8000902:	f000 fc79 	bl	80011f8 <UART_TransmitString>
                motorStatus = 0; // Set motor status to off
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <ADC_ReadAllChannels+0x258>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e016      	b.n	800093c <ADC_ReadAllChannels+0x204>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 800090e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2100      	movs	r1, #0
 8000916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 800091a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3206      	adds	r2, #6
 8000922:	f04f 0100 	mov.w	r1, #0
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 800092a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000938:	e000      	b.n	800093c <ADC_ReadAllChannels+0x204>
                        break;
 800093a:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 800093c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000940:	3301      	adds	r3, #1
 8000942:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000946:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800094a:	2b05      	cmp	r3, #5
 800094c:	f67f af0c 	bls.w	8000768 <ADC_ReadAllChannels+0x30>
        }
    }

    // Check for incoming UART data
    char receivedData[20]; // Buffer to hold received data
    UART_ReceiveString(&huart1, receivedData, sizeof(receivedData)); // Receive data from UART
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2214      	movs	r2, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <ADC_ReadAllChannels+0x254>)
 800095a:	f000 fc7e 	bl	800125a <UART_ReceiveString>
    UART_ProcessReceivedData(receivedData); // Process the received data
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fc94 	bl	8001290 <UART_ProcessReceivedData>
}
 8000968:	bf00      	nop
 800096a:	373c      	adds	r7, #60	@ 0x3c
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40400000 	.word	0x40400000
 8000974:	08003edc 	.word	0x08003edc
 8000978:	40533333 	.word	0x40533333
 800097c:	457ff000 	.word	0x457ff000
 8000980:	404ccccd 	.word	0x404ccccd
 8000984:	08003e9c 	.word	0x08003e9c
 8000988:	20000028 	.word	0x20000028
 800098c:	20000124 	.word	0x20000124
 8000990:	20000031 	.word	0x20000031
 8000994:	08003ea4 	.word	0x08003ea4
 8000998:	08003eac 	.word	0x08003eac
 800099c:	08003eb4 	.word	0x08003eb4
 80009a0:	08003ebc 	.word	0x08003ebc
 80009a4:	08003ec4 	.word	0x08003ec4

080009a8 <ADC_CheckMaxVoltage>:
  * @param data: Pointer to ADC_Data struct
  * @param threshold: Voltage threshold (e.g., 3.2V)
  * @return 1 if any channel reached max, 0 otherwise
  */
uint8_t ADC_CheckMaxVoltage(ADC_Data* data, float threshold)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e010      	b.n	80009da <ADC_CheckMaxVoltage+0x32>
    {
        if (data->voltages[i] >= threshold)
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3206      	adds	r2, #6
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	4619      	mov	r1, r3
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f7ff fe89 	bl	80006dc <__aeabi_fcmple>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <ADC_CheckMaxVoltage+0x2c>
        {
            return 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e006      	b.n	80009e2 <ADC_CheckMaxVoltage+0x3a>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	3301      	adds	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b05      	cmp	r3, #5
 80009de:	d9eb      	bls.n	80009b8 <ADC_CheckMaxVoltage+0x10>
        }
    }
    return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fc97 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f847 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 f9a5 	bl	8000d48 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009fe:	f000 f8a1 	bl	8000b44 <MX_ADC1_Init>
  MX_RTC_Init();
 8000a02:	f000 f8f7 	bl	8000bf4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000a06:	f000 f93f 	bl	8000c88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 f973 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000a0e:	f000 f8c3 	bl	8000b98 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize ADC
  ADC_Init(&hadc1);
 8000a12:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <main+0x8c>)
 8000a14:	f7ff fe80 	bl	8000718 <ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Initialize LED pin (PC13)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <main+0x90>)
 8000a3c:	f001 fab6 	bl	8001fac <HAL_GPIO_Init>

  while (1)
  {
      // Read all ADC channels
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000a40:	490f      	ldr	r1, [pc, #60]	@ (8000a80 <main+0x94>)
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <main+0x8c>)
 8000a44:	f7ff fe78 	bl	8000738 <ADC_ReadAllChannels>

      // Check if any channel reached max voltage (3.3V)
      if (ADC_CheckMaxVoltage(&adcData, 3.2f))
 8000a48:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <main+0x98>)
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <main+0x94>)
 8000a4c:	f7ff ffac 	bl	80009a8 <ADC_CheckMaxVoltage>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <main+0x78>
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED ON
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <main+0x90>)
 8000a5e:	f001 fc29 	bl	80022b4 <HAL_GPIO_WritePin>
 8000a62:	e005      	b.n	8000a70 <main+0x84>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED OFF
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6a:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <main+0x90>)
 8000a6c:	f001 fc22 	bl	80022b4 <HAL_GPIO_WritePin>
      }

      HAL_Delay(100); // Main loop delay
 8000a70:	2064      	movs	r0, #100	@ 0x64
 8000a72:	f000 fcb9 	bl	80013e8 <HAL_Delay>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000a76:	e7e3      	b.n	8000a40 <main+0x54>
 8000a78:	20000034 	.word	0x20000034
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	2000016c 	.word	0x2000016c
 8000a84:	404ccccd 	.word	0x404ccccd

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	@ 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a92:	2228      	movs	r2, #40	@ 0x28
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f9b4 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ad4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fd50 	bl	8002584 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000aea:	f000 f9d5 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 ffbc 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b16:	f000 f9bf 	bl	8000e98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000b1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b22:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b28:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f939 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b38:	f000 f9ae 	bl	8000e98 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	@ 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <MX_ADC1_Init>:
  * @param None
  * @retval None
  */

static void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]

    hadc1.Instance = ADC1;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b56:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <MX_ADC1_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b6e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b72:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
    HAL_ADC_Init(&hadc1);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <MX_ADC1_Init+0x4c>)
 8000b82:	f000 fc55 	bl	8001430 <HAL_ADC_Init>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000034 	.word	0x20000034
 8000b94:	40012400 	.word	0x40012400

08000b98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_I2C2_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_I2C2_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2C2_Init+0x50>)
 8000bd6:	f001 fb85 	bl	80022e4 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f95a 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000064 	.word	0x20000064
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	460a      	mov	r2, r1
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	460a      	mov	r2, r1
 8000c04:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c84 <MX_RTC_Init+0x90>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c12:	f04f 32ff 	mov.w	r2, #4294967295
 8000c16:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c1e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c20:	4817      	ldr	r0, [pc, #92]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c22:	f002 fa2b 	bl	800307c <HAL_RTC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000c2c:	f000 f934 	bl	8000e98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4619      	mov	r1, r3
 8000c42:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c44:	f002 faa6 	bl	8003194 <HAL_RTC_SetTime>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000c4e:	f000 f923 	bl	8000e98 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c52:	2301      	movs	r3, #1
 8000c54:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c56:	2301      	movs	r3, #1
 8000c58:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2201      	movs	r2, #1
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_RTC_Init+0x8c>)
 8000c6a:	f002 fb2b 	bl	80032c4 <HAL_RTC_SetDate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000c74:	f000 f910 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000b8 	.word	0x200000b8
 8000c84:	40002800 	.word	0x40002800

08000c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <MX_SPI1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cda:	f002 fd53 	bl	8003784 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f000 f8d8 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000cc 	.word	0x200000cc
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f002 fdae 	bl	800388c <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f8af 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000124 	.word	0x20000124
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a49      	ldr	r2, [pc, #292]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a43      	ldr	r2, [pc, #268]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a37      	ldr	r2, [pc, #220]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b35      	ldr	r3, [pc, #212]	@ (8000e88 <MX_GPIO_Init+0x140>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc2:	4832      	ldr	r0, [pc, #200]	@ (8000e8c <MX_GPIO_Init+0x144>)
 8000dc4:	f001 fa76 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f248 01c7 	movw	r1, #32967	@ 0x80c7
 8000dce:	4830      	ldr	r0, [pc, #192]	@ (8000e90 <MX_GPIO_Init+0x148>)
 8000dd0:	f001 fa70 	bl	80022b4 <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin|RF_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000dda:	482e      	ldr	r0, [pc, #184]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000ddc:	f001 fa6a 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000de6:	482b      	ldr	r0, [pc, #172]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000de8:	f001 fa64 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000df2:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0x148>)
 8000df4:	f001 fa5e 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481e      	ldr	r0, [pc, #120]	@ (8000e8c <MX_GPIO_Init+0x144>)
 8000e12:	f001 f8cb 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8000e16:	23c0      	movs	r3, #192	@ 0xc0
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	481b      	ldr	r0, [pc, #108]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000e26:	f001 f8c1 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin RF_DATA_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000e2a:	f248 33c7 	movw	r3, #33735	@ 0x83c7
 8000e2e:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|RF_DATA_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <MX_GPIO_Init+0x148>)
 8000e44:	f001 f8b2 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin;
 8000e48:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <MX_GPIO_Init+0x148>)
 8000e5e:	f001 f8a5 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8000e62:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000e7c:	f001 f896 	bl	8001fac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40010800 	.word	0x40010800

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_MspInit+0x60>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_MspInit+0x60>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000

08000f08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <HAL_ADC_MspInit+0x6c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d121      	bne.n	8000f6c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_ADC_MspInit+0x70>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f58:	233f      	movs	r3, #63	@ 0x3f
 8000f5a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <HAL_ADC_MspInit+0x74>)
 8000f68:	f001 f820 	bl	8001fac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40012400 	.word	0x40012400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a16      	ldr	r2, [pc, #88]	@ (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d124      	bne.n	8000fea <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fb8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <HAL_I2C_MspInit+0x7c>)
 8000fce:	f000 ffed 	bl	8001fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40005800 	.word	0x40005800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_RTC_MspInit+0x3c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d110      	bne.n	8001034 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001012:	f001 faab 	bl	800256c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_RTC_MspInit+0x40>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <HAL_RTC_MspInit+0x40>)
 800101c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_RTC_MspInit+0x40>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_RTC_MspInit+0x44>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40002800 	.word	0x40002800
 8001040:	40021000 	.word	0x40021000
 8001044:	4242043c 	.word	0x4242043c

08001048 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <HAL_SPI_MspInit+0xa4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d13d      	bne.n	80010e4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001068:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a20      	ldr	r2, [pc, #128]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 800106e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a1a      	ldr	r2, [pc, #104]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_SPI_MspInit+0xa8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001098:	2328      	movs	r3, #40	@ 0x28
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4812      	ldr	r0, [pc, #72]	@ (80010f4 <HAL_SPI_MspInit+0xac>)
 80010ac:	f000 ff7e 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b0:	2310      	movs	r3, #16
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <HAL_SPI_MspInit+0xac>)
 80010c4:	f000 ff72 	bl	8001fac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_SPI_MspInit+0xb0>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_SPI_MspInit+0xb0>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40010000 	.word	0x40010000

080010fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <HAL_UART_MspInit+0x8c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d131      	bne.n	8001180 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_UART_MspInit+0x90>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a1a      	ldr	r2, [pc, #104]	@ (800118c <HAL_UART_MspInit+0x90>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_UART_MspInit+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_UART_MspInit+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_UART_MspInit+0x90>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_UART_MspInit+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	@ (8001190 <HAL_UART_MspInit+0x94>)
 8001162:	f000 ff23 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <HAL_UART_MspInit+0x94>)
 800117c:	f000 ff16 	bl	8001fac <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013800 	.word	0x40013800
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <UsageFault_Handler+0x4>

080011bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f8e4 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <UART_TransmitString>:
  * @param huart: Pointer to the UART handle (e.g., &huart1)
  * @param str: Pointer to the string to transmit
  * @retval None
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7fe ffac 	bl	8000160 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f002 fb8a 	bl	800392c <HAL_UART_Transmit>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <UART_ReadDataPacket>:
  * @param data: Pointer to the data to be copied
  * @param size: Size of the data to be copied
  * @retval None
  */
void UART_ReadDataPacket(char *buffer, const char *data, size_t size)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    if (buffer != NULL && data != NULL && size > 0)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00f      	beq.n	8001252 <UART_ReadDataPacket+0x32>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <UART_ReadDataPacket+0x32>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <UART_ReadDataPacket+0x32>
    {
        strncpy(buffer, data, size);
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f002 fde6 	bl	8003e14 <strncpy>
        buffer[size] = '\0'; // Null-terminate the string
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    }
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <UART_ReceiveString>:
  * @param buffer: Pointer to the buffer where the received string will be stored
  * @param size: Maximum size of the buffer
  * @retval None
  */
void UART_ReceiveString(UART_HandleTypeDef *huart, char *buffer, size_t size)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive(huart, (uint8_t *)buffer, size - 1, HAL_MAX_DELAY); // Leave space for null terminator
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f002 fbe4 	bl	8003a42 <HAL_UART_Receive>
    buffer[size - 1] = '\0'; // Ensure null termination
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3b01      	subs	r3, #1
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <UART_ProcessReceivedData>:
  * @brief Processes received data and updates the motor status.
  * @param buffer: Pointer to the buffer containing the received data
  * @retval None
  */
void UART_ProcessReceivedData(char *buffer)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (strcmp(buffer, "@MT1#") == 0)
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <UART_ProcessReceivedData+0x3c>)
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7fe ff56 	bl	800014c <strcmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <UART_ProcessReceivedData+0x1e>
    {
        // Set motor status to ON
        motorStatus = 1; // Now this will work as motorStatus is declared extern
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <UART_ProcessReceivedData+0x40>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
    else if (strcmp(buffer, "@MT0#") == 0)
    {
        // Set motor status to OFF
        motorStatus = 0; // Now this will work as motorStatus is declared extern
    }
}
 80012ac:	e009      	b.n	80012c2 <UART_ProcessReceivedData+0x32>
    else if (strcmp(buffer, "@MT0#") == 0)
 80012ae:	4909      	ldr	r1, [pc, #36]	@ (80012d4 <UART_ProcessReceivedData+0x44>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7fe ff4b 	bl	800014c <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <UART_ProcessReceivedData+0x32>
        motorStatus = 0; // Now this will work as motorStatus is declared extern
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <UART_ProcessReceivedData+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08003ecc 	.word	0x08003ecc
 80012d0:	20000031 	.word	0x20000031
 80012d4:	08003ed4 	.word	0x08003ed4

080012d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d8:	f7ff ff88 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	@ (800130c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012de:	490c      	ldr	r1, [pc, #48]	@ (8001310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f4:	4c09      	ldr	r4, [pc, #36]	@ (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f002 fd9b 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff fb71 	bl	80009ec <main>
  bx lr
 800130a:	4770      	bx	lr
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001314:	08003f44 	.word	0x08003f44
  ldr r2, =_sbss
 8001318:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800131c:	200001a8 	.word	0x200001a8

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_Init+0x28>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_Init+0x28>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 fe05 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fdb0 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fe0f 	bl	8001f92 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 fde5 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_IncTick+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <HAL_IncTick+0x20>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000008 	.word	0x20000008
 80013d0:	200001a4 	.word	0x200001a4

080013d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <HAL_GetTick+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	200001a4 	.word	0x200001a4

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffe0 	bl	80013d4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0be      	b.n	80015d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fd4a 	bl	8000f08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fbc5 	bl	8001c04 <ADC_ConversionStop_Disable>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 8099 	bne.w	80015be <HAL_ADC_Init+0x18e>
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 8095 	bne.w	80015be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	f043 0202 	orr.w	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7b1b      	ldrb	r3, [r3, #12]
 80014b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014c8:	d003      	beq.n	80014d2 <HAL_ADC_Init+0xa2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_ADC_Init+0xa8>
 80014d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d6:	e000      	b.n	80014da <HAL_ADC_Init+0xaa>
 80014d8:	2300      	movs	r3, #0
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7d1b      	ldrb	r3, [r3, #20]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d119      	bne.n	800151c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	035a      	lsls	r2, r3, #13
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	e00b      	b.n	800151c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	f043 0220 	orr.w	r2, r3, #32
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <HAL_ADC_Init+0x1a8>)
 8001538:	4013      	ands	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	430b      	orrs	r3, r1
 8001542:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800154c:	d003      	beq.n	8001556 <HAL_ADC_Init+0x126>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d104      	bne.n	8001560 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	3b01      	subs	r3, #1
 800155c:	051b      	lsls	r3, r3, #20
 800155e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	430a      	orrs	r2, r1
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_ADC_Init+0x1ac>)
 800157c:	4013      	ands	r3, r2
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	429a      	cmp	r2, r3
 8001582:	d10b      	bne.n	800159c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158e:	f023 0303 	bic.w	r3, r3, #3
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800159a:	e018      	b.n	80015ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	f023 0312 	bic.w	r3, r3, #18
 80015a4:	f043 0210 	orr.w	r2, r3, #16
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015bc:	e007      	b.n	80015ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	f043 0210 	orr.w	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	ffe1f7fd 	.word	0xffe1f7fd
 80015dc:	ff1f0efe 	.word	0xff1f0efe

080015e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Start+0x1a>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e098      	b.n	800172c <HAL_ADC_Start+0x14c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 faa4 	bl	8001b50 <ADC_Enable>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8087 	bne.w	8001722 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a41      	ldr	r2, [pc, #260]	@ (8001734 <HAL_ADC_Start+0x154>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d105      	bne.n	800163e <HAL_ADC_Start+0x5e>
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <HAL_ADC_Start+0x158>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d115      	bne.n	800166a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d026      	beq.n	80016a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001660:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001668:	e01d      	b.n	80016a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_ADC_Start+0x158>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d004      	beq.n	800168a <HAL_ADC_Start+0xaa>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2b      	ldr	r2, [pc, #172]	@ (8001734 <HAL_ADC_Start+0x154>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10d      	bne.n	80016a6 <HAL_ADC_Start+0xc6>
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_ADC_Start+0x158>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800169e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	f023 0206 	bic.w	r2, r3, #6
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016be:	e002      	b.n	80016c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f06f 0202 	mvn.w	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016e6:	d113      	bne.n	8001710 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <HAL_ADC_Start+0x154>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d105      	bne.n	80016fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_ADC_Start+0x158>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	e00c      	b.n	800172a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e003      	b.n	800172a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40012800 	.word	0x40012800
 8001738:	40012400 	.word	0x40012400

0800173c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001752:	f7ff fe3f 	bl	80013d4 <HAL_GetTick>
 8001756:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0d3      	b.n	8001926 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d131      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d12a      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800179a:	e021      	b.n	80017e0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a2:	d01d      	beq.n	80017e0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_PollForConversion+0x7e>
 80017aa:	f7ff fe13 	bl	80013d4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d212      	bcs.n	80017e0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f043 0204 	orr.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0a2      	b.n	8001926 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0d6      	beq.n	800179c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017ee:	e070      	b.n	80018d2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001930 <HAL_ADC_PollForConversion+0x1f4>)
 80017f2:	681c      	ldr	r4, [r3, #0]
 80017f4:	2002      	movs	r0, #2
 80017f6:	f001 fb8b 	bl	8002f10 <HAL_RCCEx_GetPeriphCLKFreq>
 80017fa:	4603      	mov	r3, r0
 80017fc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6919      	ldr	r1, [r3, #16]
 8001806:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <HAL_ADC_PollForConversion+0x1f8>)
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_ADC_PollForConversion+0x104>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <HAL_ADC_PollForConversion+0x1fc>)
 8001816:	400b      	ands	r3, r1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d111      	bne.n	8001840 <HAL_ADC_PollForConversion+0x104>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6919      	ldr	r1, [r3, #16]
 8001822:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_ADC_PollForConversion+0x200>)
 8001824:	400b      	ands	r3, r1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_ADC_PollForConversion+0x100>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68d9      	ldr	r1, [r3, #12]
 8001830:	4b43      	ldr	r3, [pc, #268]	@ (8001940 <HAL_ADC_PollForConversion+0x204>)
 8001832:	400b      	ands	r3, r1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_PollForConversion+0x100>
 8001838:	2314      	movs	r3, #20
 800183a:	e020      	b.n	800187e <HAL_ADC_PollForConversion+0x142>
 800183c:	2329      	movs	r3, #41	@ 0x29
 800183e:	e01e      	b.n	800187e <HAL_ADC_PollForConversion+0x142>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6919      	ldr	r1, [r3, #16]
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_ADC_PollForConversion+0x200>)
 8001848:	400b      	ands	r3, r1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_ADC_PollForConversion+0x120>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68d9      	ldr	r1, [r3, #12]
 8001854:	4b3a      	ldr	r3, [pc, #232]	@ (8001940 <HAL_ADC_PollForConversion+0x204>)
 8001856:	400b      	ands	r3, r1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_ADC_PollForConversion+0x13c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <HAL_ADC_PollForConversion+0x208>)
 8001864:	400b      	ands	r3, r1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_ADC_PollForConversion+0x140>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68d9      	ldr	r1, [r3, #12]
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <HAL_ADC_PollForConversion+0x208>)
 8001872:	400b      	ands	r3, r1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_ADC_PollForConversion+0x140>
 8001878:	2354      	movs	r3, #84	@ 0x54
 800187a:	e000      	b.n	800187e <HAL_ADC_PollForConversion+0x142>
 800187c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001884:	e021      	b.n	80018ca <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d01a      	beq.n	80018c4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_ADC_PollForConversion+0x168>
 8001894:	f7ff fd9e 	bl	80013d4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d20f      	bcs.n	80018c4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d90b      	bls.n	80018c4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e030      	b.n	8001926 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d8d9      	bhi.n	8001886 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f06f 0212 	mvn.w	r2, #18
 80018da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018f6:	d115      	bne.n	8001924 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000
 8001934:	24924924 	.word	0x24924924
 8001938:	00924924 	.word	0x00924924
 800193c:	12492492 	.word	0x12492492
 8001940:	00492492 	.word	0x00492492
 8001944:	00249249 	.word	0x00249249

08001948 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x20>
 800197c:	2302      	movs	r3, #2
 800197e:	e0dc      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x1da>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b06      	cmp	r3, #6
 800198e:	d81c      	bhi.n	80019ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b05      	subs	r3, #5
 80019a2:	221f      	movs	r2, #31
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4019      	ands	r1, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3b05      	subs	r3, #5
 80019bc:	fa00 f203 	lsl.w	r2, r0, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c8:	e03c      	b.n	8001a44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d81c      	bhi.n	8001a0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b23      	subs	r3, #35	@ 0x23
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4019      	ands	r1, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b23      	subs	r3, #35	@ 0x23
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a0a:	e01b      	b.n	8001a44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b41      	subs	r3, #65	@ 0x41
 8001a1e:	221f      	movs	r2, #31
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b41      	subs	r3, #65	@ 0x41
 8001a38:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d91c      	bls.n	8001a86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68d9      	ldr	r1, [r3, #12]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b1e      	subs	r3, #30
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	e019      	b.n	8001aba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6919      	ldr	r1, [r3, #16]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d003      	beq.n	8001aca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d132      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1d      	ldr	r2, [pc, #116]	@ (8001b44 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d125      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d126      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001af0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d11a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_ADC_ConfigChannel+0x1e8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9a      	lsrs	r2, r3, #18
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	e002      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x1b2>
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40012400 	.word	0x40012400
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d040      	beq.n	8001bf0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <ADC_Enable+0xac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <ADC_Enable+0xb0>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	0c9b      	lsrs	r3, r3, #18
 8001b8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b8c:	e002      	b.n	8001b94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b9a:	f7ff fc1b 	bl	80013d4 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ba0:	e01f      	b.n	8001be2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ba2:	f7ff fc17 	bl	80013d4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d918      	bls.n	8001be2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d011      	beq.n	8001be2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc2:	f043 0210 	orr.w	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d1d8      	bne.n	8001ba2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12e      	bne.n	8001c7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff fbd1 	bl	80013d4 <HAL_GetTick>
 8001c32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c34:	e01b      	b.n	8001c6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c36:	f7ff fbcd 	bl	80013d4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d914      	bls.n	8001c6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10d      	bne.n	8001c6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	f043 0210 	orr.w	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e007      	b.n	8001c7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d0dc      	beq.n	8001c36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e097      	b.n	8001dd6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa8 	bl	8001c04 <ADC_ConversionStop_Disable>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff49 	bl	8001b50 <ADC_Enable>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 8081 	bne.w	8001dcc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001ce0:	681c      	ldr	r4, [r3, #0]
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f001 f914 	bl	8002f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001cee:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001cf0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001cf2:	e002      	b.n	8001cfa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f9      	bne.n	8001cf4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0208 	orr.w	r2, r2, #8
 8001d0e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d10:	f7ff fb60 	bl	80013d4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d16:	e01b      	b.n	8001d50 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d18:	f7ff fb5c 	bl	80013d4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d914      	bls.n	8001d50 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d38:	f023 0312 	bic.w	r3, r3, #18
 8001d3c:	f043 0210 	orr.w	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e042      	b.n	8001dd6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1dc      	bne.n	8001d18 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d6e:	f7ff fb31 	bl	80013d4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d74:	e01b      	b.n	8001dae <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d76:	f7ff fb2d 	bl	80013d4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b0a      	cmp	r3, #10
 8001d82:	d914      	bls.n	8001dae <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f023 0312 	bic.w	r3, r3, #18
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e013      	b.n	8001dd6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1dc      	bne.n	8001d76 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	f023 0303 	bic.w	r3, r3, #3
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff90 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff49 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff5e 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff90 	bl	8001e9c <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5f 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffb0 	bl	8001f00 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	@ 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e169      	b.n	8002294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8158 	bne.w	800228e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a9a      	ldr	r2, [pc, #616]	@ (800224c <HAL_GPIO_Init+0x2a0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d05e      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001fe8:	4a98      	ldr	r2, [pc, #608]	@ (800224c <HAL_GPIO_Init+0x2a0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d875      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001fee:	4a98      	ldr	r2, [pc, #608]	@ (8002250 <HAL_GPIO_Init+0x2a4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d058      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a96      	ldr	r2, [pc, #600]	@ (8002250 <HAL_GPIO_Init+0x2a4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d86f      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001ffa:	4a96      	ldr	r2, [pc, #600]	@ (8002254 <HAL_GPIO_Init+0x2a8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d052      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002000:	4a94      	ldr	r2, [pc, #592]	@ (8002254 <HAL_GPIO_Init+0x2a8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d869      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002006:	4a94      	ldr	r2, [pc, #592]	@ (8002258 <HAL_GPIO_Init+0x2ac>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04c      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 800200c:	4a92      	ldr	r2, [pc, #584]	@ (8002258 <HAL_GPIO_Init+0x2ac>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d863      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002012:	4a92      	ldr	r2, [pc, #584]	@ (800225c <HAL_GPIO_Init+0x2b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d046      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002018:	4a90      	ldr	r2, [pc, #576]	@ (800225c <HAL_GPIO_Init+0x2b0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d85d      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 800201e:	2b12      	cmp	r3, #18
 8002020:	d82a      	bhi.n	8002078 <HAL_GPIO_Init+0xcc>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d859      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002026:	a201      	add	r2, pc, #4	@ (adr r2, 800202c <HAL_GPIO_Init+0x80>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	080020a7 	.word	0x080020a7
 8002030:	08002081 	.word	0x08002081
 8002034:	08002093 	.word	0x08002093
 8002038:	080020d5 	.word	0x080020d5
 800203c:	080020db 	.word	0x080020db
 8002040:	080020db 	.word	0x080020db
 8002044:	080020db 	.word	0x080020db
 8002048:	080020db 	.word	0x080020db
 800204c:	080020db 	.word	0x080020db
 8002050:	080020db 	.word	0x080020db
 8002054:	080020db 	.word	0x080020db
 8002058:	080020db 	.word	0x080020db
 800205c:	080020db 	.word	0x080020db
 8002060:	080020db 	.word	0x080020db
 8002064:	080020db 	.word	0x080020db
 8002068:	080020db 	.word	0x080020db
 800206c:	080020db 	.word	0x080020db
 8002070:	08002089 	.word	0x08002089
 8002074:	0800209d 	.word	0x0800209d
 8002078:	4a79      	ldr	r2, [pc, #484]	@ (8002260 <HAL_GPIO_Init+0x2b4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800207e:	e02c      	b.n	80020da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e029      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	3304      	adds	r3, #4
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e024      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	3308      	adds	r3, #8
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e01f      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	330c      	adds	r3, #12
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e01a      	b.n	80020dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ae:	2304      	movs	r3, #4
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e013      	b.n	80020dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	611a      	str	r2, [r3, #16]
          break;
 80020c6:	e009      	b.n	80020dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	615a      	str	r2, [r3, #20]
          break;
 80020d2:	e003      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x130>
          break;
 80020da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2bff      	cmp	r3, #255	@ 0xff
 80020e0:	d801      	bhi.n	80020e6 <HAL_GPIO_Init+0x13a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_Init+0x13e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2bff      	cmp	r3, #255	@ 0xff
 80020f0:	d802      	bhi.n	80020f8 <HAL_GPIO_Init+0x14c>
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x152>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	3b08      	subs	r3, #8
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	210f      	movs	r1, #15
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	6a39      	ldr	r1, [r7, #32]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80b1 	beq.w	800228e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212c:	4b4d      	ldr	r3, [pc, #308]	@ (8002264 <HAL_GPIO_Init+0x2b8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a4c      	ldr	r2, [pc, #304]	@ (8002264 <HAL_GPIO_Init+0x2b8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b4a      	ldr	r3, [pc, #296]	@ (8002264 <HAL_GPIO_Init+0x2b8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002144:	4a48      	ldr	r2, [pc, #288]	@ (8002268 <HAL_GPIO_Init+0x2bc>)
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	@ (800226c <HAL_GPIO_Init+0x2c0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_GPIO_Init+0x1ec>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <HAL_GPIO_Init+0x2c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00d      	beq.n	8002194 <HAL_GPIO_Init+0x1e8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3e      	ldr	r2, [pc, #248]	@ (8002274 <HAL_GPIO_Init+0x2c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x1e4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <HAL_GPIO_Init+0x2cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_GPIO_Init+0x1e0>
 8002188:	2303      	movs	r3, #3
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 800218c:	2304      	movs	r3, #4
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002190:	2302      	movs	r3, #2
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002198:	2300      	movs	r3, #0
 800219a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021aa:	492f      	ldr	r1, [pc, #188]	@ (8002268 <HAL_GPIO_Init+0x2bc>)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	492c      	ldr	r1, [pc, #176]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	4928      	ldr	r1, [pc, #160]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4922      	ldr	r1, [pc, #136]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	491e      	ldr	r1, [pc, #120]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4918      	ldr	r1, [pc, #96]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	43db      	mvns	r3, r3
 800222a:	4914      	ldr	r1, [pc, #80]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 800222c:	4013      	ands	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d021      	beq.n	8002280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800223c:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	490e      	ldr	r1, [pc, #56]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e021      	b.n	800228e <HAL_GPIO_Init+0x2e2>
 800224a:	bf00      	nop
 800224c:	10320000 	.word	0x10320000
 8002250:	10310000 	.word	0x10310000
 8002254:	10220000 	.word	0x10220000
 8002258:	10210000 	.word	0x10210000
 800225c:	10120000 	.word	0x10120000
 8002260:	10110000 	.word	0x10110000
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00
 8002274:	40011000 	.word	0x40011000
 8002278:	40011400 	.word	0x40011400
 800227c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_GPIO_Init+0x304>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	43db      	mvns	r3, r3
 8002288:	4909      	ldr	r1, [pc, #36]	@ (80022b0 <HAL_GPIO_Init+0x304>)
 800228a:	4013      	ands	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f47f ae8e 	bne.w	8001fc0 <HAL_GPIO_Init+0x14>
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	372c      	adds	r7, #44	@ 0x2c
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	611a      	str	r2, [r3, #16]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e12b      	b.n	800254e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fe38 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	@ 0x24
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002348:	f000 fce6 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800234c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a81      	ldr	r2, [pc, #516]	@ (8002558 <HAL_I2C_Init+0x274>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d807      	bhi.n	8002368 <HAL_I2C_Init+0x84>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a80      	ldr	r2, [pc, #512]	@ (800255c <HAL_I2C_Init+0x278>)
 800235c:	4293      	cmp	r3, r2
 800235e:	bf94      	ite	ls
 8002360:	2301      	movls	r3, #1
 8002362:	2300      	movhi	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e006      	b.n	8002376 <HAL_I2C_Init+0x92>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a7d      	ldr	r2, [pc, #500]	@ (8002560 <HAL_I2C_Init+0x27c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0e7      	b.n	800254e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a78      	ldr	r2, [pc, #480]	@ (8002564 <HAL_I2C_Init+0x280>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9b      	lsrs	r3, r3, #18
 8002388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002558 <HAL_I2C_Init+0x274>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d802      	bhi.n	80023b8 <HAL_I2C_Init+0xd4>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	e009      	b.n	80023cc <HAL_I2C_Init+0xe8>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	4a69      	ldr	r2, [pc, #420]	@ (8002568 <HAL_I2C_Init+0x284>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	3301      	adds	r3, #1
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	495c      	ldr	r1, [pc, #368]	@ (8002558 <HAL_I2C_Init+0x274>)
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d819      	bhi.n	8002420 <HAL_I2C_Init+0x13c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e59      	subs	r1, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002400:	400b      	ands	r3, r1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_I2C_Init+0x138>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e59      	subs	r1, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fbb1 f3f3 	udiv	r3, r1, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	e051      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 800241c:	2304      	movs	r3, #4
 800241e:	e04f      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_I2C_Init+0x168>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e012      	b.n	8002472 <HAL_I2C_Init+0x18e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	0099      	lsls	r1, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Init+0x196>
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10e      	bne.n	80024a0 <HAL_I2C_Init+0x1bc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e58      	subs	r0, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	440b      	add	r3, r1
 8002490:	fbb0 f3f3 	udiv	r3, r0, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249e:	e00f      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6809      	ldr	r1, [r1, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6911      	ldr	r1, [r2, #16]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	000186a0 	.word	0x000186a0
 800255c:	001e847f 	.word	0x001e847f
 8002560:	003d08ff 	.word	0x003d08ff
 8002564:	431bde83 	.word	0x431bde83
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	420e0020 	.word	0x420e0020

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e272      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b92      	ldr	r3, [pc, #584]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b0:	4b8f      	ldr	r3, [pc, #572]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
 80025bc:	4b8c      	ldr	r3, [pc, #560]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x12c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d168      	bne.n	80026b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e24c      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x76>
 80025ec:	4b80      	ldr	r3, [pc, #512]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7f      	ldr	r2, [pc, #508]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e02e      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7a      	ldr	r2, [pc, #488]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b78      	ldr	r3, [pc, #480]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a77      	ldr	r2, [pc, #476]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0xbc>
 8002626:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a71      	ldr	r2, [pc, #452]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002640:	4b6b      	ldr	r3, [pc, #428]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6a      	ldr	r2, [pc, #424]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe feb8 	bl	80013d4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe feb4 	bl	80013d4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e200      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xe4>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fea4 	bl	80013d4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fea0 	bl	80013d4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1ec      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x10c>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026be:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
 80026d6:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1c0      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4939      	ldr	r1, [pc, #228]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e03a      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe fe59 	bl	80013d4 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fe55 	bl	80013d4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1a1      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4927      	ldr	r1, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fe38 	bl	80013d4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7fe fe34 	bl	80013d4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e180      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03a      	beq.n	8002808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe fe18 	bl	80013d4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7fe fe14 	bl	80013d4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e160      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 face 	bl	8002d68 <RCC_Delay>
 80027cc:	e01c      	b.n	8002808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe fdfe 	bl	80013d4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	e00f      	b.n	80027fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe fdfa 	bl	80013d4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e146      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	42420000 	.word	0x42420000
 80027f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b92      	ldr	r3, [pc, #584]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e9      	bne.n	80027dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a6 	beq.w	8002962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a87      	ldr	r2, [pc, #540]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7e      	ldr	r2, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7fe fdbb 	bl	80013d4 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fdb7 	bl	80013d4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e103      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x4c8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x312>
 8002888:	4b6f      	ldr	r3, [pc, #444]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e02d      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x334>
 800289e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a69      	ldr	r2, [pc, #420]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b67      	ldr	r3, [pc, #412]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a66      	ldr	r2, [pc, #408]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	e01c      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x356>
 80028c0:	4b61      	ldr	r3, [pc, #388]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a60      	ldr	r2, [pc, #384]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028da:	4b5b      	ldr	r3, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a5a      	ldr	r2, [pc, #360]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b58      	ldr	r3, [pc, #352]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a57      	ldr	r2, [pc, #348]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d015      	beq.n	8002926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fd6b 	bl	80013d4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fd67 	bl	80013d4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0b1      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	4b4b      	ldr	r3, [pc, #300]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ee      	beq.n	8002902 <HAL_RCC_OscConfig+0x37e>
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe fd55 	bl	80013d4 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fd51 	bl	80013d4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e09b      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8087 	beq.w	8002a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d061      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d146      	bne.n	8002a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b33      	ldr	r3, [pc, #204]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe fd25 	bl	80013d4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fd21 	bl	80013d4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e06d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b4:	d108      	bne.n	80029c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b6:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4921      	ldr	r1, [pc, #132]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a19      	ldr	r1, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	430b      	orrs	r3, r1
 80029da:	491b      	ldr	r1, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fcf5 	bl	80013d4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fcf1 	bl	80013d4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x46a>
 8002a0c:	e035      	b.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_RCC_OscConfig+0x4cc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fcde 	bl	80013d4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fcda 	bl	80013d4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e026      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x498>
 8002a3a:	e01e      	b.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e019      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCC_OscConfig+0x500>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0d0      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4965      	ldr	r1, [pc, #404]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d040      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d115      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e073      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e06b      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4936      	ldr	r1, [pc, #216]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe fc2c 	bl	80013d4 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fc28 	bl	80013d4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e053      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d210      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0207 	bic.w	r2, r3, #7
 8002bbe:	4922      	ldr	r1, [pc, #136]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f821 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	@ (8002c54 <HAL_RCC_ClockConfig+0x1cc>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1d0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fb8a 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08003ef4 	.word	0x08003ef4
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x30>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x36>
 8002c8a:	e027      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	e027      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0c5b      	lsrs	r3, r3, #17
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	4a11      	ldr	r2, [pc, #68]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbe:	fb03 f202 	mul.w	r2, r3, r2
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e004      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	693b      	ldr	r3, [r7, #16]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	08003f0c 	.word	0x08003f0c
 8002cfc:	08003f1c 	.word	0x08003f1c
 8002d00:	003d0900 	.word	0x003d0900

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff2 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08003f04 	.word	0x08003f04

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0adb      	lsrs	r3, r3, #11
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08003f04 	.word	0x08003f04

08002d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <RCC_Delay+0x34>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <RCC_Delay+0x38>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0a5b      	lsrs	r3, r3, #9
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d84:	bf00      	nop
  }
  while (Delay --);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <RCC_Delay+0x1c>
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	10624dd3 	.word	0x10624dd3

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d07d      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	61d3      	str	r3, [r2, #28]
 8002ddc:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	4b46      	ldr	r3, [pc, #280]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d118      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e04:	f7fe fae6 	bl	80013d4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe fae2 	bl	80013d4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e06d      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2a:	4b36      	ldr	r3, [pc, #216]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02e      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d027      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e48:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e5e:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d014      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fab1 	bl	80013d4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe faad 	bl	80013d4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e036      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4917      	ldr	r1, [pc, #92]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb0:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	490b      	ldr	r1, [pc, #44]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42420440 	.word	0x42420440

08002f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	f200 808a 	bhi.w	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d045      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d075      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f46:	e082      	b.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f48:	4b46      	ldr	r3, [pc, #280]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f4e:	4b45      	ldr	r3, [pc, #276]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d07b      	beq.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a41      	ldr	r2, [pc, #260]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d015      	beq.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f72:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0c5b      	lsrs	r3, r3, #17
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f8c:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e004      	b.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a34      	ldr	r2, [pc, #208]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	61bb      	str	r3, [r7, #24]
      break;
 8002fba:	e04a      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	61bb      	str	r3, [r7, #24]
      break;
 8002fca:	e042      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e01f      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffa:	d109      	bne.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003008:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e00f      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800301a:	d11c      	bne.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800301c:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d016      	beq.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003028:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800302c:	61bb      	str	r3, [r7, #24]
      break;
 800302e:	e012      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003030:	e011      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003032:	f7ff fe85 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0b9b      	lsrs	r3, r3, #14
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	3301      	adds	r3, #1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	61bb      	str	r3, [r7, #24]
      break;
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003056:	bf00      	nop
    }
  }
  return (frequency);
 8003058:	69bb      	ldr	r3, [r7, #24]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	08003f20 	.word	0x08003f20
 800306c:	08003f30 	.word	0x08003f30
 8003070:	007a1200 	.word	0x007a1200
 8003074:	003d0900 	.word	0x003d0900
 8003078:	aaaaaaab 	.word	0xaaaaaaab

0800307c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07a      	b.n	8003188 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7c5b      	ldrb	r3, [r3, #17]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd ffac 	bl	8001000 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9be 	bl	8003430 <HAL_RTC_WaitForSynchro>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e061      	b.n	8003188 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa77 	bl	80035b8 <RTC_EnterInitMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2204      	movs	r2, #4
 80030d4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e056      	b.n	8003188 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0207 	bic.w	r2, r2, #7
 80030e8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <HAL_RTC_Init+0x114>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <HAL_RTC_Init+0x114>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RTC_Init+0x114>)
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4921      	ldr	r1, [pc, #132]	@ (8003190 <HAL_RTC_Init+0x114>)
 800310c:	4313      	orrs	r3, r2
 800310e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d003      	beq.n	8003122 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e00e      	b.n	8003140 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff fef4 	bl	8002f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003128:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2204      	movs	r2, #4
 8003134:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e026      	b.n	8003188 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b01      	subs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0c1a      	lsrs	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 020f 	and.w	r2, r2, #15
 800314c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	b292      	uxth	r2, r2
 8003156:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa55 	bl	8003608 <RTC_ExitInitMode>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00c      	b.n	8003188 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003186:	2300      	movs	r3, #0
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40006c00 	.word	0x40006c00

08003194 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_RTC_SetTime+0x20>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e080      	b.n	80032ba <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7c1b      	ldrb	r3, [r3, #16]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RTC_SetTime+0x30>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e07a      	b.n	80032ba <HAL_RTC_SetTime+0x126>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d113      	bne.n	80031fe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80031e0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	4619      	mov	r1, r3
 80031ea:	460b      	mov	r3, r1
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a5b      	subs	r3, r3, r1
 80031f0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031f2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e01e      	b.n	800323c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa28 	bl	8003658 <RTC_Bcd2ToByte>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003210:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa1d 	bl	8003658 <RTC_Bcd2ToByte>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800322a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fa11 	bl	8003658 <RTC_Bcd2ToByte>
 8003236:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003238:	4423      	add	r3, r4
 800323a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f953 	bl	80034ea <RTC_WriteTimeCounter>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2204      	movs	r2, #4
 800324e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e02f      	b.n	80032ba <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0205 	bic.w	r2, r2, #5
 8003268:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f964 	bl	8003538 <RTC_ReadAlarmCounter>
 8003270:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d018      	beq.n	80032ac <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	d214      	bcs.n	80032ac <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003288:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800328c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800328e:	6939      	ldr	r1, [r7, #16]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f96a 	bl	800356a <RTC_WriteAlarmCounter>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2204      	movs	r2, #4
 80032a0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e006      	b.n	80032ba <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd90      	pop	{r4, r7, pc}
	...

080032c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RTC_SetDate+0x24>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e097      	b.n	800341c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	7c1b      	ldrb	r3, [r3, #16]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_RTC_SetDate+0x34>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e091      	b.n	800341c <HAL_RTC_SetDate+0x158>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	78da      	ldrb	r2, [r3, #3]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	785a      	ldrb	r2, [r3, #1]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	789a      	ldrb	r2, [r3, #2]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	739a      	strb	r2, [r3, #14]
 8003322:	e01a      	b.n	800335a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	78db      	ldrb	r3, [r3, #3]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f995 	bl	8003658 <RTC_Bcd2ToByte>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f98c 	bl	8003658 <RTC_Bcd2ToByte>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	789b      	ldrb	r3, [r3, #2]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f983 	bl	8003658 <RTC_Bcd2ToByte>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	7bdb      	ldrb	r3, [r3, #15]
 800335e:	4618      	mov	r0, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	7b59      	ldrb	r1, [r3, #13]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	7b9b      	ldrb	r3, [r3, #14]
 8003368:	461a      	mov	r2, r3
 800336a:	f000 f993 	bl	8003694 <RTC_WeekDayNum>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	7b1a      	ldrb	r2, [r3, #12]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f883 	bl	800348a <RTC_ReadTimeCounter>
 8003384:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <HAL_RTC_SetDate+0x160>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0adb      	lsrs	r3, r3, #11
 8003390:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b18      	cmp	r3, #24
 8003396:	d93a      	bls.n	800340e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4a23      	ldr	r2, [pc, #140]	@ (8003428 <HAL_RTC_SetDate+0x164>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	4a22      	ldr	r2, [pc, #136]	@ (800342c <HAL_RTC_SetDate+0x168>)
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f89a 	bl	80034ea <RTC_WriteTimeCounter>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2204      	movs	r2, #4
 80033c0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e027      	b.n	800341c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8b3 	bl	8003538 <RTC_ReadAlarmCounter>
 80033d2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d018      	beq.n	800340e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d214      	bcs.n	800340e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80033ea:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80033ee:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8b9 	bl	800356a <RTC_WriteAlarmCounter>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2204      	movs	r2, #4
 8003402:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e006      	b.n	800341c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	91a2b3c5 	.word	0x91a2b3c5
 8003428:	aaaaaaab 	.word	0xaaaaaaab
 800342c:	00015180 	.word	0x00015180

08003430 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e01d      	b.n	8003482 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0208 	bic.w	r2, r2, #8
 8003454:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003456:	f7fd ffbd 	bl	80013d4 <HAL_GetTick>
 800345a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800345c:	e009      	b.n	8003472 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800345e:	f7fd ffb9 	bl	80013d4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800346c:	d901      	bls.n	8003472 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e007      	b.n	8003482 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ee      	beq.n	800345e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	827b      	strh	r3, [r7, #18]
 8003496:	2300      	movs	r3, #0
 8003498:	823b      	strh	r3, [r7, #16]
 800349a:	2300      	movs	r3, #0
 800349c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80034ba:	8a7a      	ldrh	r2, [r7, #18]
 80034bc:	8a3b      	ldrh	r3, [r7, #16]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d008      	beq.n	80034d4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80034c2:	8a3b      	ldrh	r3, [r7, #16]
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e004      	b.n	80034de <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80034d4:	8a7b      	ldrh	r3, [r7, #18]
 80034d6:	041a      	lsls	r2, r3, #16
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80034de:	697b      	ldr	r3, [r7, #20]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f85d 	bl	80035b8 <RTC_EnterInitMode>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e011      	b.n	800352e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	0c12      	lsrs	r2, r2, #16
 8003512:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b292      	uxth	r2, r2
 800351c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f872 	bl	8003608 <RTC_ExitInitMode>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	81fb      	strh	r3, [r7, #14]
 8003544:	2300      	movs	r3, #0
 8003546:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	041a      	lsls	r2, r3, #16
 800355c:	89bb      	ldrh	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f81d 	bl	80035b8 <RTC_EnterInitMode>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e011      	b.n	80035ae <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	0c12      	lsrs	r2, r2, #16
 8003592:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	b292      	uxth	r2, r2
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f832 	bl	8003608 <RTC_ExitInitMode>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80035c4:	f7fd ff06 	bl	80013d4 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80035ca:	e009      	b.n	80035e0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80035cc:	f7fd ff02 	bl	80013d4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035da:	d901      	bls.n	80035e0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e00f      	b.n	8003600 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0210 	orr.w	r2, r2, #16
 80035fc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0210 	bic.w	r2, r2, #16
 8003622:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003624:	f7fd fed6 	bl	80013d4 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800362a:	e009      	b.n	8003640 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800362c:	f7fd fed2 	bl	80013d4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800363a:	d901      	bls.n	8003640 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e007      	b.n	8003650 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4413      	add	r3, r2
 8003686:	b2db      	uxtb	r3, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
 80036a0:	4613      	mov	r3, r2
 80036a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80036b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d82d      	bhi.n	8003716 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <RTC_WeekDayNum+0xe4>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	085a      	lsrs	r2, r3, #1
 80036ce:	78bb      	ldrb	r3, [r7, #2]
 80036d0:	441a      	add	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	441a      	add	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3b01      	subs	r3, #1
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4926      	ldr	r1, [pc, #152]	@ (800377c <RTC_WeekDayNum+0xe8>)
 80036e4:	fba1 1303 	umull	r1, r3, r1, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	4922      	ldr	r1, [pc, #136]	@ (800377c <RTC_WeekDayNum+0xe8>)
 80036f2:	fba1 1303 	umull	r1, r3, r1, r3
 80036f6:	09db      	lsrs	r3, r3, #7
 80036f8:	4413      	add	r3, r2
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <RTC_WeekDayNum+0xec>)
 80036fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003702:	1ad1      	subs	r1, r2, r3
 8003704:	0849      	lsrs	r1, r1, #1
 8003706:	440b      	add	r3, r1
 8003708:	0899      	lsrs	r1, r3, #2
 800370a:	460b      	mov	r3, r1
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a5b      	subs	r3, r3, r1
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e029      	b.n	800376a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <RTC_WeekDayNum+0xe4>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	085a      	lsrs	r2, r3, #1
 800372a:	78bb      	ldrb	r3, [r7, #2]
 800372c:	441a      	add	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	441a      	add	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	441a      	add	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4910      	ldr	r1, [pc, #64]	@ (800377c <RTC_WeekDayNum+0xe8>)
 800373c:	fba1 1303 	umull	r1, r3, r1, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	490d      	ldr	r1, [pc, #52]	@ (800377c <RTC_WeekDayNum+0xe8>)
 8003748:	fba1 1303 	umull	r1, r3, r1, r3
 800374c:	09db      	lsrs	r3, r3, #7
 800374e:	4413      	add	r3, r2
 8003750:	1c9a      	adds	r2, r3, #2
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <RTC_WeekDayNum+0xec>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	1ad1      	subs	r1, r2, r3
 800375a:	0849      	lsrs	r1, r1, #1
 800375c:	440b      	add	r3, r1
 800375e:	0899      	lsrs	r1, r3, #2
 8003760:	460b      	mov	r3, r1
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a5b      	subs	r3, r3, r1
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	b2db      	uxtb	r3, r3
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	38e38e39 	.word	0x38e38e39
 800377c:	51eb851f 	.word	0x51eb851f
 8003780:	24924925 	.word	0x24924925

08003784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e076      	b.n	8003884 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037a6:	d009      	beq.n	80037bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
 80037ae:	e005      	b.n	80037bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fc36 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	0c1a      	lsrs	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f002 0204 	and.w	r2, r2, #4
 8003862:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003872:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e042      	b.n	8003924 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fc22 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	@ 0x24
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa09 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	@ 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b20      	cmp	r3, #32
 800394a:	d175      	bne.n	8003a38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_UART_Transmit+0x2c>
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e06e      	b.n	8003a3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2221      	movs	r2, #33	@ 0x21
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396a:	f7fd fd33 	bl	80013d4 <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a0:	e02e      	b.n	8003a00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	@ 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f8df 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03a      	b.n	8003a3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3302      	adds	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1cb      	bne.n	80039a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2140      	movs	r1, #64	@ 0x40
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f8ab 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e006      	b.n	8003a3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	@ 0x28
 8003a46:	af02      	add	r7, sp, #8
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	f040 8081 	bne.w	8003b66 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Receive+0x2e>
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e079      	b.n	8003b68 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2222      	movs	r2, #34	@ 0x22
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a88:	f7fd fca4 	bl	80013d4 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa2:	d108      	bne.n	8003ab6 <HAL_UART_Receive+0x74>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e003      	b.n	8003abe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003abe:	e047      	b.n	8003b50 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2120      	movs	r1, #32
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f850 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e042      	b.n	8003b68 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	3302      	adds	r3, #2
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e01f      	b.n	8003b42 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0a:	d007      	beq.n	8003b1c <HAL_UART_Receive+0xda>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_UART_Receive+0xe8>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e008      	b.n	8003b3c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1b2      	bne.n	8003ac0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b80:	e03b      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d037      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fd fc23 	bl	80013d4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6a3a      	ldr	r2, [r7, #32]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e03a      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d023      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b80      	cmp	r3, #128	@ 0x80
 8003bb6:	d020      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d01d      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d116      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f81d 	bl	8003c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2208      	movs	r2, #8
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d0b4      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b095      	sub	sp, #84	@ 0x54
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d119      	bne.n	8003cce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cba:	61ba      	str	r2, [r7, #24]
 8003cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cdc:	bf00      	nop
 8003cde:	3754      	adds	r7, #84	@ 0x54
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d22:	f023 030c 	bic.w	r3, r3, #12
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dfc <UART_SetConfig+0x114>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d50:	f7fe fff6 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	e002      	b.n	8003d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe ffde 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009a      	lsls	r2, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <UART_SetConfig+0x118>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	0119      	lsls	r1, r3, #4
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <UART_SetConfig+0x118>)
 8003d96:	fba3 0302 	umull	r0, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2064      	movs	r0, #100	@ 0x64
 8003d9e:	fb00 f303 	mul.w	r3, r0, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	@ 0x32
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <UART_SetConfig+0x118>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db4:	4419      	add	r1, r3
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <UART_SetConfig+0x118>)
 8003dce:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2064      	movs	r0, #100	@ 0x64
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	@ 0x32
 8003de0:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <UART_SetConfig+0x118>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	440a      	add	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	51eb851f 	.word	0x51eb851f

08003e04 <memset>:
 8003e04:	4603      	mov	r3, r0
 8003e06:	4402      	add	r2, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <strncpy>:
 8003e14:	4603      	mov	r3, r0
 8003e16:	b510      	push	{r4, lr}
 8003e18:	3901      	subs	r1, #1
 8003e1a:	b132      	cbz	r2, 8003e2a <strncpy+0x16>
 8003e1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e20:	3a01      	subs	r2, #1
 8003e22:	f803 4b01 	strb.w	r4, [r3], #1
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d1f7      	bne.n	8003e1a <strncpy+0x6>
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	441a      	add	r2, r3
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d100      	bne.n	8003e34 <strncpy+0x20>
 8003e32:	bd10      	pop	{r4, pc}
 8003e34:	f803 1b01 	strb.w	r1, [r3], #1
 8003e38:	e7f9      	b.n	8003e2e <strncpy+0x1a>
	...

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	2600      	movs	r6, #0
 8003e40:	4d0c      	ldr	r5, [pc, #48]	@ (8003e74 <__libc_init_array+0x38>)
 8003e42:	4c0d      	ldr	r4, [pc, #52]	@ (8003e78 <__libc_init_array+0x3c>)
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	f000 f81a 	bl	8003e84 <_init>
 8003e50:	2600      	movs	r6, #0
 8003e52:	4d0a      	ldr	r5, [pc, #40]	@ (8003e7c <__libc_init_array+0x40>)
 8003e54:	4c0a      	ldr	r4, [pc, #40]	@ (8003e80 <__libc_init_array+0x44>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08003f3c 	.word	0x08003f3c
 8003e78:	08003f3c 	.word	0x08003f3c
 8003e7c:	08003f3c 	.word	0x08003f3c
 8003e80:	08003f40 	.word	0x08003f40

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
