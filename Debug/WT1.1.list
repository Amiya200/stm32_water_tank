
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff0  08007ff0  000090b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ff0  08007ff0  00008ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff8  08007ff8  000090b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff8  08007ff8  00008ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08008000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200000b8  080080b8  000090b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080080b8  000095a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f90  00000000  00000000  000090e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359e  00000000  00000000  0001b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4c  00000000  00000000  0001f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a531  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eaa  00000000  00000000  0003a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eff4  00000000  00000000  0005183f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b88  00000000  00000000  000e0878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e5400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c68 	.word	0x08007c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	08007c68 	.word	0x08007c68

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b98c 	b.w	8000a88 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	468e      	mov	lr, r1
 8000790:	4604      	mov	r4, r0
 8000792:	4688      	mov	r8, r1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d14a      	bne.n	800082e <__udivmoddi4+0xa6>
 8000798:	428a      	cmp	r2, r1
 800079a:	4617      	mov	r7, r2
 800079c:	d962      	bls.n	8000864 <__udivmoddi4+0xdc>
 800079e:	fab2 f682 	clz	r6, r2
 80007a2:	b14e      	cbz	r6, 80007b8 <__udivmoddi4+0x30>
 80007a4:	f1c6 0320 	rsb	r3, r6, #32
 80007a8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ac:	fa20 f303 	lsr.w	r3, r0, r3
 80007b0:	40b7      	lsls	r7, r6
 80007b2:	ea43 0808 	orr.w	r8, r3, r8
 80007b6:	40b4      	lsls	r4, r6
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	fbb8 f1fe 	udiv	r1, r8, lr
 80007c0:	fa1f fc87 	uxth.w	ip, r7
 80007c4:	fb0e 8811 	mls	r8, lr, r1, r8
 80007c8:	fb01 f20c 	mul.w	r2, r1, ip
 80007cc:	0c23      	lsrs	r3, r4, #16
 80007ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0x62>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007dc:	f080 80eb 	bcs.w	80009b6 <__udivmoddi4+0x22e>
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f240 80e8 	bls.w	80009b6 <__udivmoddi4+0x22e>
 80007e6:	3902      	subs	r1, #2
 80007e8:	443b      	add	r3, r7
 80007ea:	1a9a      	subs	r2, r3, r2
 80007ec:	fbb2 f0fe 	udiv	r0, r2, lr
 80007f0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007f8:	b2a3      	uxth	r3, r4
 80007fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007fe:	459c      	cmp	ip, r3
 8000800:	d909      	bls.n	8000816 <__udivmoddi4+0x8e>
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	f100 32ff 	add.w	r2, r0, #4294967295
 8000808:	f080 80d7 	bcs.w	80009ba <__udivmoddi4+0x232>
 800080c:	459c      	cmp	ip, r3
 800080e:	f240 80d4 	bls.w	80009ba <__udivmoddi4+0x232>
 8000812:	443b      	add	r3, r7
 8000814:	3802      	subs	r0, #2
 8000816:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800081a:	2100      	movs	r1, #0
 800081c:	eba3 030c 	sub.w	r3, r3, ip
 8000820:	b11d      	cbz	r5, 800082a <__udivmoddi4+0xa2>
 8000822:	2200      	movs	r2, #0
 8000824:	40f3      	lsrs	r3, r6
 8000826:	e9c5 3200 	strd	r3, r2, [r5]
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	428b      	cmp	r3, r1
 8000830:	d905      	bls.n	800083e <__udivmoddi4+0xb6>
 8000832:	b10d      	cbz	r5, 8000838 <__udivmoddi4+0xb0>
 8000834:	e9c5 0100 	strd	r0, r1, [r5]
 8000838:	2100      	movs	r1, #0
 800083a:	4608      	mov	r0, r1
 800083c:	e7f5      	b.n	800082a <__udivmoddi4+0xa2>
 800083e:	fab3 f183 	clz	r1, r3
 8000842:	2900      	cmp	r1, #0
 8000844:	d146      	bne.n	80008d4 <__udivmoddi4+0x14c>
 8000846:	4573      	cmp	r3, lr
 8000848:	d302      	bcc.n	8000850 <__udivmoddi4+0xc8>
 800084a:	4282      	cmp	r2, r0
 800084c:	f200 8108 	bhi.w	8000a60 <__udivmoddi4+0x2d8>
 8000850:	1a84      	subs	r4, r0, r2
 8000852:	eb6e 0203 	sbc.w	r2, lr, r3
 8000856:	2001      	movs	r0, #1
 8000858:	4690      	mov	r8, r2
 800085a:	2d00      	cmp	r5, #0
 800085c:	d0e5      	beq.n	800082a <__udivmoddi4+0xa2>
 800085e:	e9c5 4800 	strd	r4, r8, [r5]
 8000862:	e7e2      	b.n	800082a <__udivmoddi4+0xa2>
 8000864:	2a00      	cmp	r2, #0
 8000866:	f000 8091 	beq.w	800098c <__udivmoddi4+0x204>
 800086a:	fab2 f682 	clz	r6, r2
 800086e:	2e00      	cmp	r6, #0
 8000870:	f040 80a5 	bne.w	80009be <__udivmoddi4+0x236>
 8000874:	1a8a      	subs	r2, r1, r2
 8000876:	2101      	movs	r1, #1
 8000878:	0c03      	lsrs	r3, r0, #16
 800087a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087e:	b280      	uxth	r0, r0
 8000880:	b2bc      	uxth	r4, r7
 8000882:	fbb2 fcfe 	udiv	ip, r2, lr
 8000886:	fb0e 221c 	mls	r2, lr, ip, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb04 f20c 	mul.w	r2, r4, ip
 8000892:	429a      	cmp	r2, r3
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x11e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f10c 38ff 	add.w	r8, ip, #4294967295
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0x11c>
 800089e:	429a      	cmp	r2, r3
 80008a0:	f200 80e3 	bhi.w	8000a6a <__udivmoddi4+0x2e2>
 80008a4:	46c4      	mov	ip, r8
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ac:	fb0e 3312 	mls	r3, lr, r2, r3
 80008b0:	fb02 f404 	mul.w	r4, r2, r4
 80008b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x144>
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	f102 30ff 	add.w	r0, r2, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x142>
 80008c4:	429c      	cmp	r4, r3
 80008c6:	f200 80cd 	bhi.w	8000a64 <__udivmoddi4+0x2dc>
 80008ca:	4602      	mov	r2, r0
 80008cc:	1b1b      	subs	r3, r3, r4
 80008ce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008d2:	e7a5      	b.n	8000820 <__udivmoddi4+0x98>
 80008d4:	f1c1 0620 	rsb	r6, r1, #32
 80008d8:	408b      	lsls	r3, r1
 80008da:	fa22 f706 	lsr.w	r7, r2, r6
 80008de:	431f      	orrs	r7, r3
 80008e0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008e8:	fbba f8f9 	udiv	r8, sl, r9
 80008ec:	fa0e fe01 	lsl.w	lr, lr, r1
 80008f0:	fa20 f306 	lsr.w	r3, r0, r6
 80008f4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008f8:	fa1f fc87 	uxth.w	ip, r7
 80008fc:	ea43 030e 	orr.w	r3, r3, lr
 8000900:	fa00 fe01 	lsl.w	lr, r0, r1
 8000904:	fb08 f00c 	mul.w	r0, r8, ip
 8000908:	0c1c      	lsrs	r4, r3, #16
 800090a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800090e:	42a0      	cmp	r0, r4
 8000910:	fa02 f201 	lsl.w	r2, r2, r1
 8000914:	d90a      	bls.n	800092c <__udivmoddi4+0x1a4>
 8000916:	193c      	adds	r4, r7, r4
 8000918:	f108 3aff 	add.w	sl, r8, #4294967295
 800091c:	f080 809e 	bcs.w	8000a5c <__udivmoddi4+0x2d4>
 8000920:	42a0      	cmp	r0, r4
 8000922:	f240 809b 	bls.w	8000a5c <__udivmoddi4+0x2d4>
 8000926:	f1a8 0802 	sub.w	r8, r8, #2
 800092a:	443c      	add	r4, r7
 800092c:	1a24      	subs	r4, r4, r0
 800092e:	b298      	uxth	r0, r3
 8000930:	fbb4 f3f9 	udiv	r3, r4, r9
 8000934:	fb09 4413 	mls	r4, r9, r3, r4
 8000938:	fb03 fc0c 	mul.w	ip, r3, ip
 800093c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000940:	45a4      	cmp	ip, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x1d0>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f103 30ff 	add.w	r0, r3, #4294967295
 800094a:	f080 8085 	bcs.w	8000a58 <__udivmoddi4+0x2d0>
 800094e:	45a4      	cmp	ip, r4
 8000950:	f240 8082 	bls.w	8000a58 <__udivmoddi4+0x2d0>
 8000954:	3b02      	subs	r3, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800095c:	eba4 040c 	sub.w	r4, r4, ip
 8000960:	fba0 8c02 	umull	r8, ip, r0, r2
 8000964:	4564      	cmp	r4, ip
 8000966:	4643      	mov	r3, r8
 8000968:	46e1      	mov	r9, ip
 800096a:	d364      	bcc.n	8000a36 <__udivmoddi4+0x2ae>
 800096c:	d061      	beq.n	8000a32 <__udivmoddi4+0x2aa>
 800096e:	b15d      	cbz	r5, 8000988 <__udivmoddi4+0x200>
 8000970:	ebbe 0203 	subs.w	r2, lr, r3
 8000974:	eb64 0409 	sbc.w	r4, r4, r9
 8000978:	fa04 f606 	lsl.w	r6, r4, r6
 800097c:	fa22 f301 	lsr.w	r3, r2, r1
 8000980:	431e      	orrs	r6, r3
 8000982:	40cc      	lsrs	r4, r1
 8000984:	e9c5 6400 	strd	r6, r4, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	e74e      	b.n	800082a <__udivmoddi4+0xa2>
 800098c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000990:	0c01      	lsrs	r1, r0, #16
 8000992:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000996:	b280      	uxth	r0, r0
 8000998:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800099c:	463b      	mov	r3, r7
 800099e:	fbb1 f1f7 	udiv	r1, r1, r7
 80009a2:	4638      	mov	r0, r7
 80009a4:	463c      	mov	r4, r7
 80009a6:	46b8      	mov	r8, r7
 80009a8:	46be      	mov	lr, r7
 80009aa:	2620      	movs	r6, #32
 80009ac:	eba2 0208 	sub.w	r2, r2, r8
 80009b0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009b4:	e765      	b.n	8000882 <__udivmoddi4+0xfa>
 80009b6:	4601      	mov	r1, r0
 80009b8:	e717      	b.n	80007ea <__udivmoddi4+0x62>
 80009ba:	4610      	mov	r0, r2
 80009bc:	e72b      	b.n	8000816 <__udivmoddi4+0x8e>
 80009be:	f1c6 0120 	rsb	r1, r6, #32
 80009c2:	fa2e fc01 	lsr.w	ip, lr, r1
 80009c6:	40b7      	lsls	r7, r6
 80009c8:	fa0e fe06 	lsl.w	lr, lr, r6
 80009cc:	fa20 f101 	lsr.w	r1, r0, r1
 80009d0:	ea41 010e 	orr.w	r1, r1, lr
 80009d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d8:	fbbc f8fe 	udiv	r8, ip, lr
 80009dc:	b2bc      	uxth	r4, r7
 80009de:	fb0e cc18 	mls	ip, lr, r8, ip
 80009e2:	fb08 f904 	mul.w	r9, r8, r4
 80009e6:	0c0a      	lsrs	r2, r1, #16
 80009e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ec:	40b0      	lsls	r0, r6
 80009ee:	4591      	cmp	r9, r2
 80009f0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	d93e      	bls.n	8000a76 <__udivmoddi4+0x2ee>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f108 3cff 	add.w	ip, r8, #4294967295
 80009fe:	d201      	bcs.n	8000a04 <__udivmoddi4+0x27c>
 8000a00:	4591      	cmp	r9, r2
 8000a02:	d81f      	bhi.n	8000a44 <__udivmoddi4+0x2bc>
 8000a04:	eba2 0209 	sub.w	r2, r2, r9
 8000a08:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0c:	fb09 f804 	mul.w	r8, r9, r4
 8000a10:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a14:	b28a      	uxth	r2, r1
 8000a16:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a1a:	4542      	cmp	r2, r8
 8000a1c:	d229      	bcs.n	8000a72 <__udivmoddi4+0x2ea>
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a24:	d2c2      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a26:	4542      	cmp	r2, r8
 8000a28:	d2c0      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a2a:	f1a9 0102 	sub.w	r1, r9, #2
 8000a2e:	443a      	add	r2, r7
 8000a30:	e7bc      	b.n	80009ac <__udivmoddi4+0x224>
 8000a32:	45c6      	cmp	lr, r8
 8000a34:	d29b      	bcs.n	800096e <__udivmoddi4+0x1e6>
 8000a36:	ebb8 0302 	subs.w	r3, r8, r2
 8000a3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a3e:	3801      	subs	r0, #1
 8000a40:	46e1      	mov	r9, ip
 8000a42:	e794      	b.n	800096e <__udivmoddi4+0x1e6>
 8000a44:	eba7 0909 	sub.w	r9, r7, r9
 8000a48:	444a      	add	r2, r9
 8000a4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a4e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a52:	fb09 f804 	mul.w	r8, r9, r4
 8000a56:	e7db      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e77d      	b.n	8000958 <__udivmoddi4+0x1d0>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e765      	b.n	800092c <__udivmoddi4+0x1a4>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e6fa      	b.n	800085a <__udivmoddi4+0xd2>
 8000a64:	443b      	add	r3, r7
 8000a66:	3a02      	subs	r2, #2
 8000a68:	e730      	b.n	80008cc <__udivmoddi4+0x144>
 8000a6a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	e719      	b.n	80008a6 <__udivmoddi4+0x11e>
 8000a72:	4649      	mov	r1, r9
 8000a74:	e79a      	b.n	80009ac <__udivmoddi4+0x224>
 8000a76:	eba2 0209 	sub.w	r2, r2, r9
 8000a7a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a7e:	46c4      	mov	ip, r8
 8000a80:	fb09 f804 	mul.w	r8, r9, r4
 8000a84:	e7c4      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a86:	bf00      	nop

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f003 f979 	bl	8003dac <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <readChannelVoltage+0x3a>
        return 0.0f;
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e029      	b.n	8000b1a <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f002 ff84 	bl	80039d4 <HAL_ADC_Start>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <readChannelVoltage+0x4c>
        return 0.0f;
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	e020      	b.n	8000b1a <readChannelVoltage+0x8e>

    float v = 0.0f;
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000ade:	210a      	movs	r1, #10
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f003 f851 	bl	8003b88 <HAL_ADC_PollForConversion>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d112      	bne.n	8000b12 <readChannelVoltage+0x86>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f003 f951 	bl	8003d94 <HAL_ADC_GetValue>
 8000af2:	61b8      	str	r0, [r7, #24]
        v = (raw * 3.3f) / 4095.0f;
 8000af4:	69b8      	ldr	r0, [r7, #24]
 8000af6:	f7ff fbf1 	bl	80002dc <__aeabi_ui2f>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4909      	ldr	r1, [pc, #36]	@ (8000b24 <readChannelVoltage+0x98>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc44 	bl	800038c <__aeabi_fmul>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <readChannelVoltage+0x9c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fcf3 	bl	80004f4 <__aeabi_fdiv>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f003 f80c 	bl	8003b30 <HAL_ADC_Stop>
    return v;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40533333 	.word	0x40533333
 8000b28:	457ff000 	.word	0x457ff000

08000b2c <ADC_Init>:

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f003 facd 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <ADC_Init+0x18>
    {
        Error_Handler();
 8000b40:	f000 ff76 	bl	8001a30 <Error_Handler>
    }
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b0a6      	sub	sp, #152	@ 0x98
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    bool changed = false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b62:	e147      	b.n	8000df4 <ADC_ReadAllChannels+0x2a8>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 8000b64:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b68:	4aba      	ldr	r2, [pc, #744]	@ (8000e54 <ADC_ReadAllChannels+0x308>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff8b 	bl	8000a8c <readChannelVoltage>
 8000b76:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

        if (s_filtered[i] == 0.0f)
 8000b7a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b7e:	4ab6      	ldr	r2, [pc, #728]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	f04f 0100 	mov.w	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd93 	bl	80006b4 <__aeabi_fcmpeq>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 8000b94:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b98:	49af      	ldr	r1, [pc, #700]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000b9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ba2:	e01b      	b.n	8000bdc <ADC_ReadAllChannels+0x90>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8000ba4:	49ad      	ldr	r1, [pc, #692]	@ (8000e5c <ADC_ReadAllChannels+0x310>)
 8000ba6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000baa:	f7ff fbef 	bl	800038c <__aeabi_fmul>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000bb6:	4aa8      	ldr	r2, [pc, #672]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	49a8      	ldr	r1, [pc, #672]	@ (8000e60 <ADC_ReadAllChannels+0x314>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fbe4 	bl	800038c <__aeabi_fmul>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f897 4096 	ldrb.w	r4, [r7, #150]	@ 0x96
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f7ff fad5 	bl	800017c <__addsf3>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000bd8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 8000bdc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000be0:	4a9d      	ldr	r2, [pc, #628]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        if (v < GROUND_THRESHOLD)
 8000bea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bee:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000bf2:	f7ff fd69 	bl	80006c8 <__aeabi_fcmplt>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <ADC_ReadAllChannels+0xb8>
            v = 0.0f;
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        data->voltages[i] = v;
 8000c04:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c14:	605a      	str	r2, [r3, #4]
        data->rawValues[i] = (uint16_t)((v * 4095.0f) / 3.3f);
 8000c16:	4993      	ldr	r1, [pc, #588]	@ (8000e64 <ADC_ReadAllChannels+0x318>)
 8000c18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c1c:	f7ff fbb6 	bl	800038c <__aeabi_fmul>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4991      	ldr	r1, [pc, #580]	@ (8000e68 <ADC_ReadAllChannels+0x31c>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc65 	bl	80004f4 <__aeabi_fdiv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f897 4096 	ldrb.w	r4, [r7, #150]	@ 0x96
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd71 	bl	8000718 <__aeabi_f2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 8000c40:	2301      	movs	r3, #1
 8000c42:	461c      	mov	r4, r3
 8000c44:	4989      	ldr	r1, [pc, #548]	@ (8000e6c <ADC_ReadAllChannels+0x320>)
 8000c46:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c4a:	f7ff fd51 	bl	80006f0 <__aeabi_fcmpge>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <ADC_ReadAllChannels+0x10c>
 8000c54:	2300      	movs	r3, #0
 8000c56:	461c      	mov	r4, r3
 8000c58:	b2e2      	uxtb	r2, r4
 8000c5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c5e:	4611      	mov	r1, r2
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	460a      	mov	r2, r1
 8000c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        // ✅ NEW: export to debugger live
        g_adcVoltages[i] = v;
 8000c6a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	4980      	ldr	r1, [pc, #512]	@ (8000e70 <ADC_ReadAllChannels+0x324>)
 8000c70:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 8000c78:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8000e74 <ADC_ReadAllChannels+0x328>)
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	4619      	mov	r1, r3
 8000c84:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c88:	f7ff fa76 	bl	8000178 <__aeabi_fsub>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c92:	4979      	ldr	r1, [pc, #484]	@ (8000e78 <ADC_ReadAllChannels+0x32c>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd35 	bl	8000704 <__aeabi_fcmpgt>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <ADC_ReadAllChannels+0x168>
            changed = true;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            s_prev_volt[i] = v;
 8000ca6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000caa:	4972      	ldr	r1, [pc, #456]	@ (8000e74 <ADC_ReadAllChannels+0x328>)
 8000cac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        /* --- threshold and debounce logic --- */
        if (!s_level_flags[i] && v >= THR)
 8000cb4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb8:	4a70      	ldr	r2, [pc, #448]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d152      	bne.n	8000d66 <ADC_ReadAllChannels+0x21a>
 8000cc0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000cc4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000cc8:	f7ff fd12 	bl	80006f0 <__aeabi_fcmpge>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d049      	beq.n	8000d66 <ADC_ReadAllChannels+0x21a>
        {
            s_level_flags[i] = 1;
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	4a69      	ldr	r2, [pc, #420]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	54d1      	strb	r1, [r2, r3]
            switch (i)
 8000cdc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d82b      	bhi.n	8000d3c <ADC_ReadAllChannels+0x1f0>
 8000ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cec <ADC_ReadAllChannels+0x1a0>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d0d 	.word	0x08000d0d
 8000cf4:	08000d19 	.word	0x08000d19
 8000cf8:	08000d25 	.word	0x08000d25
 8000cfc:	08000d31 	.word	0x08000d31
            {
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 8000d00:	4a5f      	ldr	r2, [pc, #380]	@ (8000e80 <ADC_ReadAllChannels+0x334>)
 8000d02:	2110      	movs	r1, #16
 8000d04:	485f      	ldr	r0, [pc, #380]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d06:	f006 fad7 	bl	80072b8 <sniprintf>
 8000d0a:	e01b      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 8000d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e88 <ADC_ReadAllChannels+0x33c>)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	485c      	ldr	r0, [pc, #368]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d12:	f006 fad1 	bl	80072b8 <sniprintf>
 8000d16:	e015      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 8000d18:	4a5c      	ldr	r2, [pc, #368]	@ (8000e8c <ADC_ReadAllChannels+0x340>)
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4859      	ldr	r0, [pc, #356]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d1e:	f006 facb 	bl	80072b8 <sniprintf>
 8000d22:	e00f      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 8000d24:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <ADC_ReadAllChannels+0x344>)
 8000d26:	2110      	movs	r1, #16
 8000d28:	4856      	ldr	r0, [pc, #344]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d2a:	f006 fac5 	bl	80072b8 <sniprintf>
 8000d2e:	e009      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 8000d30:	4a58      	ldr	r2, [pc, #352]	@ (8000e94 <ADC_ReadAllChannels+0x348>)
 8000d32:	2110      	movs	r1, #16
 8000d34:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d36:	f006 fabf 	bl	80072b8 <sniprintf>
 8000d3a:	e003      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                default: dataPacketTx[0] = '\0'; break;
 8000d3c:	4b51      	ldr	r3, [pc, #324]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	bf00      	nop
            }
            if (dataPacketTx[0])
 8000d44:	4b4f      	ldr	r3, [pc, #316]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <ADC_ReadAllChannels+0x208>
                UART_TransmitString(&huart1, dataPacketTx);
 8000d4c:	494d      	ldr	r1, [pc, #308]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d4e:	4852      	ldr	r0, [pc, #328]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000d50:	f002 fc66 	bl	8003620 <UART_TransmitString>

            motorStatus = 1;
 8000d54:	4b51      	ldr	r3, [pc, #324]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 8000d5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d5e:	4a50      	ldr	r2, [pc, #320]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	54d1      	strb	r1, [r2, r3]
 8000d64:	e012      	b.n	8000d8c <ADC_ReadAllChannels+0x240>
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA))
 8000d66:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d6a:	4a44      	ldr	r2, [pc, #272]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00c      	beq.n	8000d8c <ADC_ReadAllChannels+0x240>
 8000d72:	494c      	ldr	r1, [pc, #304]	@ (8000ea4 <ADC_ReadAllChannels+0x358>)
 8000d74:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d78:	f7ff fca6 	bl	80006c8 <__aeabi_fcmplt>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <ADC_ReadAllChannels+0x240>
        {
            s_level_flags[i] = 0;
 8000d82:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d86:	4a3d      	ldr	r2, [pc, #244]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	54d1      	strb	r1, [r2, r3]
        }

        if (v < DRY_VOLTAGE_THRESHOLD)
 8000d8c:	493a      	ldr	r1, [pc, #232]	@ (8000e78 <ADC_ReadAllChannels+0x32c>)
 8000d8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d92:	f7ff fc99 	bl	80006c8 <__aeabi_fcmplt>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <ADC_ReadAllChannels+0x26e>
        {
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8000d9c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000da0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	2bff      	cmp	r3, #255	@ 0xff
 8000da6:	d00d      	beq.n	8000dc4 <ADC_ReadAllChannels+0x278>
 8000da8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dac:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dae:	5cd2      	ldrb	r2, [r2, r3]
 8000db0:	3201      	adds	r2, #1
 8000db2:	b2d1      	uxtb	r1, r2
 8000db4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000db6:	54d1      	strb	r1, [r2, r3]
 8000db8:	e004      	b.n	8000dc4 <ADC_ReadAllChannels+0x278>
        }
        else
        {
            s_low_counts[i] = 0;
 8000dba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dbe:	4a38      	ldr	r2, [pc, #224]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	54d1      	strb	r1, [r2, r3]
        }

        if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD)
 8000dc4:	4b35      	ldr	r3, [pc, #212]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10d      	bne.n	8000dea <ADC_ReadAllChannels+0x29e>
 8000dce:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dd2:	4a33      	ldr	r2, [pc, #204]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d907      	bls.n	8000dea <ADC_ReadAllChannels+0x29e>
        {
            motorStatus = 0;
 8000dda:	4b30      	ldr	r3, [pc, #192]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
            memset(s_low_counts, 0, sizeof(s_low_counts));
 8000de0:	2206      	movs	r2, #6
 8000de2:	2100      	movs	r1, #0
 8000de4:	482e      	ldr	r0, [pc, #184]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000de6:	f006 fa9d 	bl	8007324 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000dea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dee:	3301      	adds	r3, #1
 8000df0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000df4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	f67f aeb3 	bls.w	8000b64 <ADC_ReadAllChannels+0x18>
        }
    }

    /* print only if changed */
    if (changed)
 8000dfe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d022      	beq.n	8000e4c <ADC_ReadAllChannels+0x300>
    {
        char dbg[128];
        int pos = snprintf(dbg, sizeof(dbg), "[ADC] ");
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ea8 <ADC_ReadAllChannels+0x35c>)
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fa52 	bl	80072b8 <sniprintf>
 8000e14:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000e1e:	e004      	b.n	8000e2a <ADC_ReadAllChannels+0x2de>
 8000e20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000e2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d9f6      	bls.n	8000e20 <ADC_ReadAllChannels+0x2d4>
//                            i,
//                            data->rawValues[i],
//                            data->voltages[i],
//                            data->maxReached[i] ? "!" : "");
        }
        dbg[sizeof(dbg)-1] = '\0';
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        UART_TransmitString(&huart1, dbg);
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4816      	ldr	r0, [pc, #88]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000e40:	f002 fbee 	bl	8003620 <UART_TransmitString>
        UART_TransmitString(&huart1, "\r\n");
 8000e44:	4919      	ldr	r1, [pc, #100]	@ (8000eac <ADC_ReadAllChannels+0x360>)
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000e48:	f002 fbea 	bl	8003620 <UART_TransmitString>
    }
}
 8000e4c:	bf00      	nop
 8000e4e:	3798      	adds	r7, #152	@ 0x98
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	08007f28 	.word	0x08007f28
 8000e58:	200000ec 	.word	0x200000ec
 8000e5c:	3e99999a 	.word	0x3e99999a
 8000e60:	3f333333 	.word	0x3f333333
 8000e64:	457ff000 	.word	0x457ff000
 8000e68:	40533333 	.word	0x40533333
 8000e6c:	404ccccd 	.word	0x404ccccd
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	20000114 	.word	0x20000114
 8000e78:	3d4ccccd 	.word	0x3d4ccccd
 8000e7c:	20000104 	.word	0x20000104
 8000e80:	08007c80 	.word	0x08007c80
 8000e84:	2000012c 	.word	0x2000012c
 8000e88:	08007c88 	.word	0x08007c88
 8000e8c:	08007c90 	.word	0x08007c90
 8000e90:	08007c98 	.word	0x08007c98
 8000e94:	08007ca0 	.word	0x08007ca0
 8000e98:	2000023c 	.word	0x2000023c
 8000e9c:	20000354 	.word	0x20000354
 8000ea0:	2000010c 	.word	0x2000010c
 8000ea4:	3f666666 	.word	0x3f666666
 8000ea8:	08007ca8 	.word	0x08007ca8
 8000eac:	08007cb0 	.word	0x08007cb0

08000eb0 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8000ee6:	793b      	ldrb	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <map_nibble_ctrl+0x40>
 8000eec:	2208      	movs	r2, #8
 8000eee:	e000      	b.n	8000ef2 <map_nibble_ctrl+0x42>
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8000efc:	797b      	ldrb	r3, [r7, #5]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <map_nibble_ctrl+0x56>
 8000f02:	2204      	movs	r2, #4
 8000f04:	e000      	b.n	8000f08 <map_nibble_ctrl+0x58>
 8000f06:	2200      	movs	r2, #0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
    return b;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc90      	pop	{r4, r7}
 8000f34:	4770      	bx	lr
	...

08000f38 <expander_write>:

static void expander_write(uint8_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	2364      	movs	r3, #100	@ 0x64
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	214e      	movs	r1, #78	@ 0x4e
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <expander_write+0x24>)
 8000f4e:	f003 fd63 	bl	8004a18 <HAL_I2C_Master_Transmit>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000190 	.word	0x20000190

08000f60 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffe0 	bl	8000f38 <expander_write>
    HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fc2f 	bl	80037dc <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffd6 	bl	8000f38 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f002 fc25 	bl	80037dc <HAL_Delay>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	71bb      	strb	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	79b9      	ldrb	r1, [r7, #6]
 8000fb0:	79f8      	ldrb	r0, [r7, #7]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f7ff ff7c 	bl	8000eb0 <map_nibble_ctrl>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffba 	bl	8000f38 <expander_write>
    pulse_enable(x);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffca 	bl	8000f60 <pulse_enable>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8000fda:	2308      	movs	r3, #8
 8000fdc:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffa9 	bl	8000f38 <expander_write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2201      	movs	r2, #1
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffc8 	bl	8000f9a <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffc0 	bl	8000f9a <write4bits>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f023 030f 	bic.w	r3, r3, #15
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2201      	movs	r2, #1
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffae 	bl	8000f9a <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ffa6 	bl	8000f9a <write4bits>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <lcd_clear>:

void lcd_clear(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff ffc7 	bl	8000fee <lcd_send_cmd>
    HAL_Delay(2);
 8001060:	2002      	movs	r0, #2
 8001062:	f002 fbbb 	bl	80037dc <HAL_Delay>
    lcd_send_cmd(0x80);
 8001066:	2080      	movs	r0, #128	@ 0x80
 8001068:	f7ff ffc1 	bl	8000fee <lcd_send_cmd>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d901      	bls.n	800108a <lcd_put_cur+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <lcd_put_cur+0x40>)
 800108e:	5cd2      	ldrb	r2, [r2, r3]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffa4 	bl	8000fee <lcd_send_cmd>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08007f40 	.word	0x08007f40

080010b4 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 80010bc:	e006      	b.n	80010cc <lcd_send_string+0x18>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffab 	bl	8001022 <lcd_send_data>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <lcd_send_string+0xa>
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <lcd_init>:

void lcd_init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80010e2:	2032      	movs	r0, #50	@ 0x32
 80010e4:	f002 fb7a 	bl	80037dc <HAL_Delay>
    lcd_backlight_on();
 80010e8:	f7ff ff74 	bl	8000fd4 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	2030      	movs	r0, #48	@ 0x30
 80010f2:	f7ff ff52 	bl	8000f9a <write4bits>
 80010f6:	2005      	movs	r0, #5
 80010f8:	f002 fb70 	bl	80037dc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	2030      	movs	r0, #48	@ 0x30
 8001102:	f7ff ff4a 	bl	8000f9a <write4bits>
 8001106:	2001      	movs	r0, #1
 8001108:	f002 fb68 	bl	80037dc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 800110c:	2201      	movs	r2, #1
 800110e:	2100      	movs	r1, #0
 8001110:	2030      	movs	r0, #48	@ 0x30
 8001112:	f7ff ff42 	bl	8000f9a <write4bits>
 8001116:	2001      	movs	r0, #1
 8001118:	f002 fb60 	bl	80037dc <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	2020      	movs	r0, #32
 8001122:	f7ff ff3a 	bl	8000f9a <write4bits>
 8001126:	2001      	movs	r0, #1
 8001128:	f002 fb58 	bl	80037dc <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 800112c:	2028      	movs	r0, #40	@ 0x28
 800112e:	f7ff ff5e 	bl	8000fee <lcd_send_cmd>
 8001132:	2001      	movs	r0, #1
 8001134:	f002 fb52 	bl	80037dc <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001138:	2008      	movs	r0, #8
 800113a:	f7ff ff58 	bl	8000fee <lcd_send_cmd>
 800113e:	2001      	movs	r0, #1
 8001140:	f002 fb4c 	bl	80037dc <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001144:	f7ff ff87 	bl	8001056 <lcd_clear>
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fb47 	bl	80037dc <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 800114e:	2006      	movs	r0, #6
 8001150:	f7ff ff4d 	bl	8000fee <lcd_send_cmd>
 8001154:	2001      	movs	r0, #1
 8001156:	f002 fb41 	bl	80037dc <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 800115a:	200c      	movs	r0, #12
 800115c:	f7ff ff47 	bl	8000fee <lcd_send_cmd>
 8001160:	2001      	movs	r0, #1
 8001162:	f002 fb3b 	bl	80037dc <HAL_Delay>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}

0800116a <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
 800116e:	f002 fb2b 	bl	80037c8 <HAL_GetTick>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}

08001178 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <led_write+0x30>)
 800118c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <led_write+0x34>)
 8001194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	4619      	mov	r1, r3
 800119c:	f003 fac7 	bl	800472e <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000010 	.word	0x20000010

080011b0 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffda 	bl	8001178 <led_write>
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffcc 	bl	8001178 <led_write>
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LED_Init>:

void LED_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 80011ee:	2210      	movs	r2, #16
 80011f0:	2100      	movs	r1, #0
 80011f2:	4815      	ldr	r0, [pc, #84]	@ (8001248 <LED_Init+0x60>)
 80011f4:	f006 f896 	bl	8007324 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 80011f8:	2204      	movs	r2, #4
 80011fa:	2100      	movs	r1, #0
 80011fc:	4813      	ldr	r0, [pc, #76]	@ (800124c <LED_Init+0x64>)
 80011fe:	f006 f891 	bl	8007324 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001202:	2210      	movs	r2, #16
 8001204:	2100      	movs	r1, #0
 8001206:	4812      	ldr	r0, [pc, #72]	@ (8001250 <LED_Init+0x68>)
 8001208:	f006 f88c 	bl	8007324 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	e012      	b.n	8001238 <LED_Init+0x50>
        led_off((LedColor)i);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffd8 	bl	80011cc <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LED_Init+0x60>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2100      	movs	r1, #0
 8001222:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <LED_Init+0x60>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	2200      	movs	r2, #0
 8001230:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b03      	cmp	r3, #3
 800123c:	dde9      	ble.n	8001212 <LED_Init+0x2a>
    }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000013c 	.word	0x2000013c
 800124c:	2000014c 	.word	0x2000014c
 8001250:	20000150 	.word	0x20000150

08001254 <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 800125a:	f7ff ff86 	bl	800116a <now_ms>
 800125e:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	e064      	b.n	8001330 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001266:	4a36      	ldr	r2, [pc, #216]	@ (8001340 <LED_Task+0xec>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <LED_Task+0x24>
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00b      	beq.n	800128e <LED_Task+0x3a>
 8001276:	e015      	b.n	80012a4 <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001278:	4a32      	ldr	r2, [pc, #200]	@ (8001344 <LED_Task+0xf0>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffa0 	bl	80011cc <led_off>
            break;
 800128c:	e04d      	b.n	800132a <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 800128e:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <LED_Task+0xf0>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff87 	bl	80011b0 <led_on>
            break;
 80012a2:	e042      	b.n	800132a <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 80012a4:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <LED_Task+0xec>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	885b      	ldrh	r3, [r3, #2]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <LED_Task+0x6c>
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <LED_Task+0xec>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012be:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 80012c0:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <LED_Task+0xf4>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dc2b      	bgt.n	8001328 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 80012d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <LED_Task+0xf0>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <LED_Task+0xf0>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <LED_Task+0xf0>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <LED_Task+0xb2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff56 	bl	80011b0 <led_on>
 8001304:	e004      	b.n	8001310 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff5e 	bl	80011cc <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001310:	4a0b      	ldr	r2, [pc, #44]	@ (8001340 <LED_Task+0xec>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	885b      	ldrh	r3, [r3, #2]
 800131a:	461a      	mov	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	441a      	add	r2, r3
 8001320:	4909      	ldr	r1, [pc, #36]	@ (8001348 <LED_Task+0xf4>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001328:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b03      	cmp	r3, #3
 8001334:	dd97      	ble.n	8001266 <LED_Task+0x12>
        }
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000013c 	.word	0x2000013c
 8001344:	2000014c 	.word	0x2000014c
 8001348:	20000150 	.word	0x20000150

0800134c <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	e00d      	b.n	8001374 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <LED_ClearAllIntents+0x3c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2100      	movs	r1, #0
 800135e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <LED_ClearAllIntents+0x3c>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	2200      	movs	r2, #0
 800136c:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b03      	cmp	r3, #3
 8001378:	ddee      	ble.n	8001358 <LED_ClearAllIntents+0xc>
    }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	2000013c 	.word	0x2000013c

0800138c <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d80b      	bhi.n	80013bc <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <LED_SetIntent+0x3c>)
 80013a8:	79ba      	ldrb	r2, [r7, #6]
 80013aa:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <LED_SetIntent+0x3c>)
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	88ba      	ldrh	r2, [r7, #4]
 80013b8:	805a      	strh	r2, [r3, #2]
 80013ba:	e000      	b.n	80013be <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80013bc:	bf00      	nop
}
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000013c 	.word	0x2000013c

080013cc <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // LoRa RX
uint8_t txBuffer[64]; // LoRa TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	733b      	strb	r3, [r7, #12]
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013fc:	480a      	ldr	r0, [pc, #40]	@ (8001428 <LoRa_WriteReg+0x50>)
 80013fe:	f003 f996 	bl	800472e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001402:	f107 010c 	add.w	r1, r7, #12
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2202      	movs	r2, #2
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <LoRa_WriteReg+0x54>)
 800140e:	f005 fad3 	bl	80069b8 <HAL_SPI_Transmit>
    NSS_HIGH();
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <LoRa_WriteReg+0x50>)
 800141a:	f003 f988 	bl	800472e <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010800 	.word	0x40010800
 800142c:	200001e4 	.word	0x200001e4

08001430 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2140      	movs	r1, #64	@ 0x40
 8001438:	4807      	ldr	r0, [pc, #28]	@ (8001458 <LoRa_Reset+0x28>)
 800143a:	f003 f978 	bl	800472e <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800143e:	2002      	movs	r0, #2
 8001440:	f002 f9cc 	bl	80037dc <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2140      	movs	r1, #64	@ 0x40
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <LoRa_Reset+0x28>)
 800144a:	f003 f970 	bl	800472e <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f002 f9c4 	bl	80037dc <HAL_Delay>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010c00 	.word	0x40010c00

0800145c <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	2000      	movs	r0, #0
 8001468:	460a      	mov	r2, r1
 800146a:	4603      	mov	r3, r0
 800146c:	0b55      	lsrs	r5, r2, #13
 800146e:	04d4      	lsls	r4, r2, #19
 8001470:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <LoRa_SetFrequency+0x78>)
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f96d 	bl	8000758 <__aeabi_uldivmod>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8001486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	0c02      	lsrs	r2, r0, #16
 8001494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001498:	0c0b      	lsrs	r3, r1, #16
 800149a:	b2d3      	uxtb	r3, r2
 800149c:	4619      	mov	r1, r3
 800149e:	2006      	movs	r0, #6
 80014a0:	f7ff ff9a 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 80014a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	0a02      	lsrs	r2, r0, #8
 80014b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014b6:	0a0b      	lsrs	r3, r1, #8
 80014b8:	b2d3      	uxtb	r3, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	2007      	movs	r0, #7
 80014be:	f7ff ff8b 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 80014c2:	7a3b      	ldrb	r3, [r7, #8]
 80014c4:	4619      	mov	r1, r3
 80014c6:	2008      	movs	r0, #8
 80014c8:	f7ff ff86 	bl	80013d8 <LoRa_WriteReg>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bdb0      	pop	{r4, r5, r7, pc}
 80014d4:	01e84800 	.word	0x01e84800

080014d8 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80014dc:	f7ff ffa8 	bl	8001430 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 80014e0:	2100      	movs	r1, #0
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff ff78 	bl	80013d8 <LoRa_WriteReg>
    HAL_Delay(2);
 80014e8:	2002      	movs	r0, #2
 80014ea:	f002 f977 	bl	80037dc <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff ff71 	bl	80013d8 <LoRa_WriteReg>
    HAL_Delay(2);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f002 f970 	bl	80037dc <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 80014fc:	4818      	ldr	r0, [pc, #96]	@ (8001560 <LoRa_Init+0x88>)
 80014fe:	f7ff ffad 	bl	800145c <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8001502:	218f      	movs	r1, #143	@ 0x8f
 8001504:	2009      	movs	r0, #9
 8001506:	f7ff ff67 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800150a:	2187      	movs	r1, #135	@ 0x87
 800150c:	204d      	movs	r0, #77	@ 0x4d
 800150e:	f7ff ff63 	bl	80013d8 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8001512:	2123      	movs	r1, #35	@ 0x23
 8001514:	200c      	movs	r0, #12
 8001516:	f7ff ff5f 	bl	80013d8 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800151a:	2172      	movs	r1, #114	@ 0x72
 800151c:	201d      	movs	r0, #29
 800151e:	f7ff ff5b 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8001522:	2174      	movs	r1, #116	@ 0x74
 8001524:	201e      	movs	r0, #30
 8001526:	f7ff ff57 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800152a:	2104      	movs	r1, #4
 800152c:	2026      	movs	r0, #38	@ 0x26
 800152e:	f7ff ff53 	bl	80013d8 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 8001532:	2100      	movs	r1, #0
 8001534:	2020      	movs	r0, #32
 8001536:	f7ff ff4f 	bl	80013d8 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800153a:	2108      	movs	r1, #8
 800153c:	2021      	movs	r0, #33	@ 0x21
 800153e:	f7ff ff4b 	bl	80013d8 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 8001542:	2122      	movs	r1, #34	@ 0x22
 8001544:	2039      	movs	r0, #57	@ 0x39
 8001546:	f7ff ff47 	bl	80013d8 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 800154a:	2100      	movs	r1, #0
 800154c:	2040      	movs	r0, #64	@ 0x40
 800154e:	f7ff ff43 	bl	80013d8 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8001552:	21ff      	movs	r1, #255	@ 0xff
 8001554:	2012      	movs	r0, #18
 8001556:	f7ff ff3f 	bl	80013d8 <LoRa_WriteReg>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	19cf0e40 	.word	0x19cf0e40

08001564 <Debug_Print>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);

void Debug_Print(char *msg) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <Debug_Print+0x18>)
 8001570:	f002 f856 	bl	8003620 <UART_TransmitString>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000023c 	.word	0x2000023c

08001580 <main>:

/* -------------------------------------------------------------------------- */
/* Main Program                                                               */
/* -------------------------------------------------------------------------- */
int main(void)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b08b      	sub	sp, #44	@ 0x2c
 8001584:	af06      	add	r7, sp, #24
    HAL_Init();
 8001586:	f002 f8c7 	bl	8003718 <HAL_Init>
    SystemClock_Config();
 800158a:	f000 f899 	bl	80016c0 <SystemClock_Config>

    MX_GPIO_Init();
 800158e:	f000 f9bb 	bl	8001908 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8001592:	f000 f98f 	bl	80018b4 <MX_USART1_UART_Init>
    UART_Init();
 8001596:	f002 f825 	bl	80035e4 <UART_Init>
    MX_ADC1_Init();
 800159a:	f000 f8e9 	bl	8001770 <MX_ADC1_Init>
    MX_SPI1_Init();
 800159e:	f000 f953 	bl	8001848 <MX_SPI1_Init>
    MX_I2C2_Init();
 80015a2:	f000 f923 	bl	80017ec <MX_I2C2_Init>

    lcd_init();
 80015a6:	f7ff fd9a 	bl	80010de <lcd_init>
    ADC_Init(&hadc1);
 80015aa:	483e      	ldr	r0, [pc, #248]	@ (80016a4 <main+0x124>)
 80015ac:	f7ff fabe 	bl	8000b2c <ADC_Init>
    LoRa_Init();
 80015b0:	f7ff ff92 	bl	80014d8 <LoRa_Init>
    Screen_Init();
 80015b4:	f001 fa52 	bl	8002a5c <Screen_Init>
    UART_Init();
 80015b8:	f002 f814 	bl	80035e4 <UART_Init>
    Switches_Init();
 80015bc:	f001 ff7e 	bl	80034bc <Switches_Init>
    Relay_Init();
 80015c0:	f000 fcea 	bl	8001f98 <Relay_Init>
    LED_Init();
 80015c4:	f7ff fe10 	bl	80011e8 <LED_Init>

    /* === RTC Initialization === */
    RTC_Init();                   /* probe + clear CH */
 80015c8:	f000 fd6c 	bl	80020a4 <RTC_Init>
    RTC_GetTimeDate();            /* read once */
 80015cc:	f000 fdba 	bl	8002144 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 31, 11, 25, 9, 2025);

    Debug_Print("System Initialized\r\n");
 80015d0:	4835      	ldr	r0, [pc, #212]	@ (80016a8 <main+0x128>)
 80015d2:	f7ff ffc7 	bl	8001564 <Debug_Print>

    uint8_t lastSecond = 255;
 80015d6:	23ff      	movs	r3, #255	@ 0xff
 80015d8:	73fb      	strb	r3, [r7, #15]


    while (1)
    {
        /* App tasks */
        Screen_HandleSwitches();
 80015da:	f001 fd97 	bl	800310c <Screen_HandleSwitches>
        Screen_Update();
 80015de:	f001 f93b 	bl	8002858 <Screen_Update>
        ADC_ReadAllChannels(&hadc1, &adcData);
 80015e2:	4932      	ldr	r1, [pc, #200]	@ (80016ac <main+0x12c>)
 80015e4:	482f      	ldr	r0, [pc, #188]	@ (80016a4 <main+0x124>)
 80015e6:	f7ff fab1 	bl	8000b4c <ADC_ReadAllChannels>

        /* === Update time once per second === */
        RTC_GetTimeDate();
 80015ea:	f000 fdab 	bl	8002144 <RTC_GetTimeDate>
        if (time.seconds != lastSecond) {
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <main+0x130>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d025      	beq.n	8001644 <main+0xc4>
            lastSecond = time.seconds;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <main+0x130>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	73fb      	strb	r3, [r7, #15]

            snprintf(dbg, sizeof(dbg),
                     "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                     time.hour, time.minutes, time.seconds,
 80015fe:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <main+0x130>)
 8001600:	789b      	ldrb	r3, [r3, #2]
            snprintf(dbg, sizeof(dbg),
 8001602:	461e      	mov	r6, r3
                     time.hour, time.minutes, time.seconds,
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <main+0x130>)
 8001606:	785b      	ldrb	r3, [r3, #1]
            snprintf(dbg, sizeof(dbg),
 8001608:	461a      	mov	r2, r3
                     time.hour, time.minutes, time.seconds,
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <main+0x130>)
 800160c:	781b      	ldrb	r3, [r3, #0]
            snprintf(dbg, sizeof(dbg),
 800160e:	4619      	mov	r1, r3
                     time.dayofmonth, time.month, time.year,
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <main+0x130>)
 8001612:	791b      	ldrb	r3, [r3, #4]
            snprintf(dbg, sizeof(dbg),
 8001614:	4618      	mov	r0, r3
                     time.dayofmonth, time.month, time.year,
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <main+0x130>)
 8001618:	795b      	ldrb	r3, [r3, #5]
            snprintf(dbg, sizeof(dbg),
 800161a:	461c      	mov	r4, r3
                     time.dayofmonth, time.month, time.year,
 800161c:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <main+0x130>)
 800161e:	88db      	ldrh	r3, [r3, #6]
            snprintf(dbg, sizeof(dbg),
 8001620:	461d      	mov	r5, r3
                     time.dayofweek);
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <main+0x130>)
 8001624:	78db      	ldrb	r3, [r3, #3]
            snprintf(dbg, sizeof(dbg),
 8001626:	9305      	str	r3, [sp, #20]
 8001628:	9504      	str	r5, [sp, #16]
 800162a:	9403      	str	r4, [sp, #12]
 800162c:	9002      	str	r0, [sp, #8]
 800162e:	9101      	str	r1, [sp, #4]
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	4633      	mov	r3, r6
 8001634:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <main+0x134>)
 8001636:	2164      	movs	r1, #100	@ 0x64
 8001638:	481f      	ldr	r0, [pc, #124]	@ (80016b8 <main+0x138>)
 800163a:	f005 fe3d 	bl	80072b8 <sniprintf>
            Debug_Print(dbg);
 800163e:	481e      	ldr	r0, [pc, #120]	@ (80016b8 <main+0x138>)
 8001640:	f7ff ff90 	bl	8001564 <Debug_Print>
        }

        /* UART command handling */
        if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8001644:	2140      	movs	r1, #64	@ 0x40
 8001646:	481d      	ldr	r0, [pc, #116]	@ (80016bc <main+0x13c>)
 8001648:	f001 fffe 	bl	8003648 <UART_GetReceivedPacket>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01f      	beq.n	8001692 <main+0x112>
            char *p = receivedUartPacket;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <main+0x13c>)
 8001654:	60bb      	str	r3, [r7, #8]
            size_t n = strlen(receivedUartPacket);
 8001656:	4819      	ldr	r0, [pc, #100]	@ (80016bc <main+0x13c>)
 8001658:	f7fe fd82 	bl	8000160 <strlen>
 800165c:	6078      	str	r0, [r7, #4]
            if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d913      	bls.n	800168c <main+0x10c>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b40      	cmp	r3, #64	@ 0x40
 800166a:	d10f      	bne.n	800168c <main+0x10c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b23      	cmp	r3, #35	@ 0x23
 8001678:	d108      	bne.n	800168c <main+0x10c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	4413      	add	r3, r2
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
            ModelHandle_ProcessUartCommand(p);
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 fc39 	bl	8001f04 <ModelHandle_ProcessUartCommand>
        }

        /* Other tasks */
        ModelHandle_Process();
 8001692:	f000 fc61 	bl	8001f58 <ModelHandle_Process>
        // ❌ Relay_All(false);  <-- removed, was overriding relay control
        LED_Task();
 8001696:	f7ff fddd 	bl	8001254 <LED_Task>

        HAL_Delay(20);  // faster responsiveness (was 50)
 800169a:	2014      	movs	r0, #20
 800169c:	f002 f89e 	bl	80037dc <HAL_Delay>
    {
 80016a0:	e79b      	b.n	80015da <main+0x5a>
 80016a2:	bf00      	nop
 80016a4:	20000160 	.word	0x20000160
 80016a8:	08007cb4 	.word	0x08007cb4
 80016ac:	20000284 	.word	0x20000284
 80016b0:	200003b8 	.word	0x200003b8
 80016b4:	08007ccc 	.word	0x08007ccc
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	200002b0 	.word	0x200002b0

080016c0 <SystemClock_Config>:


/* -------------------------------------------------------------------------- */
/* System Clock Configuration                                                 */
/* -------------------------------------------------------------------------- */
void SystemClock_Config(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	@ 0x50
 80016c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ca:	2228      	movs	r2, #40	@ 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 fe28 	bl	8007324 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f8:	2310      	movs	r3, #16
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	2302      	movs	r3, #2
 80016fe:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16; // 64 MHz
 8001704:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800170a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800170e:	4618      	mov	r0, r3
 8001710:	f004 fb52 	bl	8005db8 <HAL_RCC_OscConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x5e>
 800171a:	f000 f989 	bl	8001a30 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172e:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fdbe 	bl	80062bc <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x8a>
 8001746:	f000 f973 	bl	8001a30 <Error_Handler>

    // Use HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800174a:	2302      	movs	r3, #2
 800174c:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800174e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001752:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4618      	mov	r0, r3
 8001758:	f004 ff3e 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xa6>
 8001762:	f000 f965 	bl	8001a30 <Error_Handler>
}
 8001766:	bf00      	nop
 8001768:	3750      	adds	r7, #80	@ 0x50
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <MX_ADC1_Init>:

/* -------------------------------------------------------------------------- */
/* ADC1 Initialization Function                                               */
/* -------------------------------------------------------------------------- */
static void MX_ADC1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_ADC1_Init+0x74>)
 8001782:	4a19      	ldr	r2, [pc, #100]	@ (80017e8 <MX_ADC1_Init+0x78>)
 8001784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_ADC1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_ADC1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_ADC1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <MX_ADC1_Init+0x74>)
 800179a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800179e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_ADC1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_ADC1_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 80017ac:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_ADC1_Init+0x74>)
 80017ae:	f002 f839 	bl	8003824 <HAL_ADC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x4c>
 80017b8:	f000 f93a 	bl	8001a30 <Error_Handler>

  sConfig.Channel = ADC_CHANNEL_0;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_ADC1_Init+0x74>)
 80017ce:	f002 faed 	bl	8003dac <HAL_ADC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x6c>
 80017d8:	f000 f92a 	bl	8001a30 <Error_Handler>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000160 	.word	0x20000160
 80017e8:	40012400 	.word	0x40012400

080017ec <MX_I2C2_Init>:

/* -------------------------------------------------------------------------- */
/* I2C2 Initialization Function                                               */
/* -------------------------------------------------------------------------- */
static void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_I2C2_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <MX_I2C2_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_I2C2_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <MX_I2C2_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_I2C2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_I2C2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_I2C2_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_I2C2_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_I2C2_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_I2C2_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_I2C2_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) { Error_Handler(); }
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_I2C2_Init+0x50>)
 800182a:	f002 ffb1 	bl	8004790 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C2_Init+0x4c>
 8001834:	f000 f8fc 	bl	8001a30 <Error_Handler>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000190 	.word	0x20000190
 8001840:	40005800 	.word	0x40005800
 8001844:	000186a0 	.word	0x000186a0

08001848 <MX_SPI1_Init>:

/* -------------------------------------------------------------------------- */
/* SPI1 Initialization Function                                               */
/* -------------------------------------------------------------------------- */
static void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_SPI1_Init+0x64>)
 800184e:	4a18      	ldr	r2, [pc, #96]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_SPI1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_SPI1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_SPI1_Init+0x64>)
 800187c:	2218      	movs	r2, #24
 800187e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001880:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001894:	220a      	movs	r2, #10
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) { Error_Handler(); }
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <MX_SPI1_Init+0x64>)
 800189a:	f005 f809 	bl	80068b0 <HAL_SPI_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_SPI1_Init+0x60>
 80018a4:	f000 f8c4 	bl	8001a30 <Error_Handler>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200001e4 	.word	0x200001e4
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_USART1_UART_Init>:

/* -------------------------------------------------------------------------- */
/* USART1 Initialization Function                                             */
/* -------------------------------------------------------------------------- */
static void MX_USART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <MX_USART1_UART_Init+0x50>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) { Error_Handler(); }
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ec:	f005 fa61 	bl	8006db2 <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART1_UART_Init+0x46>
 80018f6:	f000 f89b 	bl	8001a30 <Error_Handler>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000023c 	.word	0x2000023c
 8001904:	40013800 	.word	0x40013800

08001908 <MX_GPIO_Init>:

/* -------------------------------------------------------------------------- */
/* GPIO Initialization Function                                               */
/* -------------------------------------------------------------------------- */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a3f      	ldr	r2, [pc, #252]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a33      	ldr	r2, [pc, #204]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a2d      	ldr	r2, [pc, #180]	@ (8001a20 <MX_GPIO_Init+0x118>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <MX_GPIO_Init+0x118>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 800197c:	2200      	movs	r2, #0
 800197e:	f240 3147 	movw	r1, #839	@ 0x347
 8001982:	4828      	ldr	r0, [pc, #160]	@ (8001a24 <MX_GPIO_Init+0x11c>)
 8001984:	f002 fed3 	bl	800472e <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 800198e:	4826      	ldr	r0, [pc, #152]	@ (8001a28 <MX_GPIO_Init+0x120>)
 8001990:	f002 fecd 	bl	800472e <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001994:	23c0      	movs	r3, #192	@ 0xc0
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001998:	2303      	movs	r3, #3
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4821      	ldr	r0, [pc, #132]	@ (8001a28 <MX_GPIO_Init+0x120>)
 80019a4:	f002 fd28 	bl	80043f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80019a8:	f240 3347 	movw	r3, #839	@ 0x347
 80019ac:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	4818      	ldr	r0, [pc, #96]	@ (8001a24 <MX_GPIO_Init+0x11c>)
 80019c2:	f002 fd19 	bl	80043f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80019c6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <MX_GPIO_Init+0x124>)
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4812      	ldr	r0, [pc, #72]	@ (8001a24 <MX_GPIO_Init+0x11c>)
 80019dc:	f002 fd0c 	bl	80043f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80019e0:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80019e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	@ (8001a28 <MX_GPIO_Init+0x120>)
 80019fa:	f002 fcfd 	bl	80043f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RF_DATA_Pin;
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <MX_GPIO_Init+0x11c>)
 8001a12:	f002 fcf1 	bl	80043f8 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	10310000 	.word	0x10310000

08001a30 <Error_Handler>:

/* -------------------------------------------------------------------------- */
/* Error Handler                                                              */
/* -------------------------------------------------------------------------- */
void Error_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    Debug_Print("** Error_Handler entered **\r\n");
 8001a34:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <Error_Handler+0x20>)
 8001a36:	f7ff fd95 	bl	8001564 <Debug_Print>
    for (;;) {
        HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <Error_Handler+0x24>)
 8001a40:	f002 fe8d 	bl	800475e <HAL_GPIO_TogglePin>
        HAL_Delay(250);
 8001a44:	20fa      	movs	r0, #250	@ 0xfa
 8001a46:	f001 fec9 	bl	80037dc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001a4a:	bf00      	nop
 8001a4c:	e7f5      	b.n	8001a3a <Error_Handler+0xa>
 8001a4e:	bf00      	nop
 8001a50:	08007d00 	.word	0x08007d00
 8001a54:	40010800 	.word	0x40010800

08001a58 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	f001 feb4 	bl	80037c8 <HAL_GetTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fad8 	bl	800202c <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <motor_apply+0x1e>
 8001a82:	2201      	movs	r2, #1
 8001a84:	e000      	b.n	8001a88 <motor_apply+0x20>
 8001a86:	2200      	movs	r2, #0
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <motor_apply+0x58>)
 8001a8a:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00f      	beq.n	8001ab2 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <motor_apply+0x5c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <motor_apply+0x5c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8001aa6:	f7ff ffd7 	bl	8001a58 <now_ms>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a06      	ldr	r2, [pc, #24]	@ (8001ac8 <motor_apply+0x60>)
 8001aae:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8001ab0:	e002      	b.n	8001ab8 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <motor_apply+0x5c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000354 	.word	0x20000354
 8001ac4:	200003a0 	.word	0x200003a0
 8001ac8:	200003a4 	.word	0x200003a4

08001acc <ModelHandle_SetMotor>:

/* Public API for motor control */
void ModelHandle_SetMotor(bool on)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    motor_apply(on);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ffc5 	bl	8001a68 <motor_apply>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <countdown_tick>:
    if (onMode) motor_apply(true);
    else        motor_apply(false);
}

static void countdown_tick(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <countdown_tick+0x74>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12a      	bne.n	8001b54 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8001afe:	f7ff ffab 	bl	8001a58 <now_ms>
 8001b02:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <countdown_tick+0x78>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	dc12      	bgt.n	8001b36 <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <countdown_tick+0x7c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <countdown_tick+0x3a>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffa4 	bl	8001a68 <motor_apply>
 8001b20:	e002      	b.n	8001b28 <countdown_tick+0x40>
        else               motor_apply(true);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff ffa0 	bl	8001a68 <motor_apply>
        countdownActive   = false;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <countdown_tick+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <countdown_tick+0x80>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
        return;
 8001b34:	e00f      	b.n	8001b56 <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <countdown_tick+0x78>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <countdown_tick+0x84>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <countdown_tick+0x80>)
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e000      	b.n	8001b56 <countdown_tick+0x6e>
    if (!countdownActive) return;
 8001b54:	bf00      	nop
}
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000355 	.word	0x20000355
 8001b60:	2000035c 	.word	0x2000035c
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000358 	.word	0x20000358
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <twist_tick+0x94>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d139      	bne.n	8001bf8 <twist_tick+0x88>

    uint32_t tnow = now_ms();
 8001b84:	f7ff ff68 	bl	8001a58 <now_ms>
 8001b88:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <twist_tick+0x98>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dc32      	bgt.n	8001bfc <twist_tick+0x8c>

    twist_on_phase = !twist_on_phase;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <twist_tick+0x9c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <twist_tick+0x9c>)
 8001bb2:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <twist_tick+0x9c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00e      	beq.n	8001bda <twist_tick+0x6a>
        motor_apply(true);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff ff53 	bl	8001a68 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <twist_tick+0x94>)
 8001bc4:	885b      	ldrh	r3, [r3, #2]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bcc:	fb03 f202 	mul.w	r2, r3, r2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <twist_tick+0x98>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e011      	b.n	8001bfe <twist_tick+0x8e>
    } else {
        motor_apply(false);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff ff44 	bl	8001a68 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <twist_tick+0x94>)
 8001be2:	889b      	ldrh	r3, [r3, #4]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <twist_tick+0x98>)
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e002      	b.n	8001bfe <twist_tick+0x8e>
    if (!twistSettings.twistActive) return;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <twist_tick+0x8e>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001bfc:	bf00      	nop
    }
}
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000024 	.word	0x20000024
 8001c08:	200003ac 	.word	0x200003ac
 8001c0c:	200003a8 	.word	0x200003a8

08001c10 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <search_tick+0x88>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d133      	bne.n	8001c8c <search_tick+0x7c>

    uint32_t tnow = now_ms();
 8001c24:	f7ff ff18 	bl	8001a58 <now_ms>
 8001c28:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <search_tick+0x8c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dc2c      	bgt.n	8001c90 <search_tick+0x80>

    if (!search_in_test) {
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <search_tick+0x90>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d011      	beq.n	8001c68 <search_tick+0x58>
        search_in_test = true;
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <search_tick+0x90>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff ff0c 	bl	8001a68 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <search_tick+0x88>)
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <search_tick+0x8c>)
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e014      	b.n	8001c92 <search_tick+0x82>
    } else {
        motor_apply(false);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fefd 	bl	8001a68 <motor_apply>
        search_in_test = false;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <search_tick+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <search_tick+0x88>)
 8001c76:	885b      	ldrh	r3, [r3, #2]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fb03 f202 	mul.w	r2, r3, r2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <search_tick+0x8c>)
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e002      	b.n	8001c92 <search_tick+0x82>
    if (!searchSettings.searchActive) return;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <search_tick+0x82>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001c90:	bf00      	nop
    }
}
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000001c 	.word	0x2000001c
 8001c9c:	200003b4 	.word	0x200003b4
 8001ca0:	200003b0 	.word	0x200003b0

08001ca4 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 8001caa:	f7ff fed5 	bl	8001a58 <now_ms>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <seconds_since_midnight+0x30>)
 8001cb2:	fba2 1203 	umull	r1, r2, r2, r3
 8001cb6:	0e12      	lsrs	r2, r2, #24
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <seconds_since_midnight+0x34>)
 8001cba:	fb01 f202 	mul.w	r2, r1, r2
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <seconds_since_midnight+0x38>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	099b      	lsrs	r3, r3, #6
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	31b5d43b 	.word	0x31b5d43b
 8001cd8:	05265c00 	.word	0x05265c00
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <timer_tick>:

static void timer_tick(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 8001ce6:	f7ff ffdd 	bl	8001ca4 <seconds_since_midnight>
 8001cea:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e045      	b.n	8001d7e <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <timer_tick+0xb0>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d132      	bne.n	8001d76 <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d812      	bhi.n	8001d42 <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d306      	bcc.n	8001d34 <timer_tick+0x54>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d201      	bcs.n	8001d34 <timer_tick+0x54>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <timer_tick+0x56>
 8001d34:	2300      	movs	r3, #0
 8001d36:	72fb      	strb	r3, [r7, #11]
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	72fb      	strb	r3, [r7, #11]
 8001d40:	e011      	b.n	8001d66 <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d204      	bcs.n	8001d56 <timer_tick+0x76>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d201      	bcs.n	8001d5a <timer_tick+0x7a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <timer_tick+0x7c>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	72fb      	strb	r3, [r7, #11]
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <timer_tick+0x98>
            motor_apply(inWindow);
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe7a 	bl	8001a68 <motor_apply>
 8001d74:	e000      	b.n	8001d78 <timer_tick+0x98>
        if (!s->active) continue;
 8001d76:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	ddb6      	ble.n	8001cf2 <timer_tick+0x12>
        }
    }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000360 	.word	0x20000360

08001d94 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
    /* ✅ Dry run: motor ON but ADC channel 0 shows water missing */
    if (motorStatus == 1U && adcData.voltages[0] < 0.1f) {
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <protections_tick+0x90>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10f      	bne.n	8001dc2 <protections_tick+0x2e>
 8001da2:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <protections_tick+0x94>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4921      	ldr	r1, [pc, #132]	@ (8001e2c <protections_tick+0x98>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fc8d 	bl	80006c8 <__aeabi_fcmplt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <protections_tick+0x2e>
        senseDryRun = true;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <protections_tick+0x9c>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fe54 	bl	8001a68 <motor_apply>
 8001dc0:	e002      	b.n	8001dc8 <protections_tick+0x34>
    } else {
        senseDryRun = false;
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <protections_tick+0x9c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    }

    if (senseOverLoad && motorStatus == 1U) {
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <protections_tick+0xa0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <protections_tick+0x4e>
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <protections_tick+0x90>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <protections_tick+0x4e>
        motor_apply(false);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fe43 	bl	8001a68 <motor_apply>
    }

    if (senseOverUnderVolt) {
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <protections_tick+0xa4>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <protections_tick+0x5e>
        motor_apply(false);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fe3b 	bl	8001a68 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8001df2:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <protections_tick+0xa8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d011      	beq.n	8001e1e <protections_tick+0x8a>
 8001dfa:	f7ff fe2d 	bl	8001a58 <now_ms>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <protections_tick+0xac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <protections_tick+0xb0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d308      	bcc.n	8001e1e <protections_tick+0x8a>
        motor_apply(false);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fe2b 	bl	8001a68 <motor_apply>
        senseMaxRunReached = true;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <protections_tick+0xb4>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <protections_tick+0xa8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    }
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000354 	.word	0x20000354
 8001e28:	20000284 	.word	0x20000284
 8001e2c:	3dcccccd 	.word	0x3dcccccd
 8001e30:	2000039c 	.word	0x2000039c
 8001e34:	2000039d 	.word	0x2000039d
 8001e38:	2000039e 	.word	0x2000039e
 8001e3c:	200003a0 	.word	0x200003a0
 8001e40:	200003a4 	.word	0x200003a4
 8001e44:	006ddd00 	.word	0x006ddd00
 8001e48:	2000039f 	.word	0x2000039f

08001e4c <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8001e50:	f7ff fa7c 	bl	800134c <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <leds_from_model+0x9c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d104      	bne.n	8001e68 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fa92 	bl	800138c <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 8001e68:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <leds_from_model+0xa0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <leds_from_model+0x3c>
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <leds_from_model+0xa4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8001e7c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e80:	2102      	movs	r1, #2
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fa82 	bl	800138c <LED_SetIntent>
    }
    if (senseDryRun) {
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <leds_from_model+0xa8>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff fa78 	bl	800138c <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8001e9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <leds_from_model+0xac>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8001ea6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001eaa:	2102      	movs	r1, #2
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff fa6d 	bl	800138c <LED_SetIntent>
    }
    if (senseOverLoad) {
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <leds_from_model+0xb0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8001ebc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff fa62 	bl	800138c <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <leds_from_model+0xb4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8001ed2:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f7ff fa57 	bl	800138c <LED_SetIntent>
    }

    LED_ApplyIntents();
 8001ede:	f7ff fa75 	bl	80013cc <LED_ApplyIntents>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000354 	.word	0x20000354
 8001eec:	20000355 	.word	0x20000355
 8001ef0:	20000018 	.word	0x20000018
 8001ef4:	2000039c 	.word	0x2000039c
 8001ef8:	2000039f 	.word	0x2000039f
 8001efc:	2000039d 	.word	0x2000039d
 8001f00:	2000039e 	.word	0x2000039e

08001f04 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <ModelHandle_ProcessUartCommand+0x42>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <ModelHandle_ProcessUartCommand+0x42>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <ModelHandle_ProcessUartCommand+0x4c>)
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7fe f915 	bl	800014c <strcmp>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <ModelHandle_ProcessUartCommand+0x2c>
        motor_apply(true);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff fd9d 	bl	8001a68 <motor_apply>
 8001f2e:	e00b      	b.n	8001f48 <ModelHandle_ProcessUartCommand+0x44>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8001f30:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <ModelHandle_ProcessUartCommand+0x50>)
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe f90a 	bl	800014c <strcmp>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <ModelHandle_ProcessUartCommand+0x44>
        motor_apply(false);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fd92 	bl	8001a68 <motor_apply>
 8001f44:	e000      	b.n	8001f48 <ModelHandle_ProcessUartCommand+0x44>
    if (!cmd || !*cmd) return;
 8001f46:	bf00      	nop
    }
    /* ... add other commands as needed ... */
}
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	08007d20 	.word	0x08007d20
 8001f54:	08007d2c 	.word	0x08007d2c

08001f58 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    countdown_tick();
 8001f5c:	f7ff fdc4 	bl	8001ae8 <countdown_tick>
    twist_tick();
 8001f60:	f7ff fe06 	bl	8001b70 <twist_tick>
    search_tick();
 8001f64:	f7ff fe54 	bl	8001c10 <search_tick>
    timer_tick();
 8001f68:	f7ff feba 	bl	8001ce0 <timer_tick>
    protections_tick();
 8001f6c:	f7ff ff12 	bl	8001d94 <protections_tick>
    leds_from_model();
 8001f70:	f7ff ff6c 	bl	8001e4c <leds_from_model>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <Motor_GetStatus>:

/* ===== Public getter ===== */
bool Motor_GetStatus(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    return (motorStatus == 1U);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <Motor_GetStatus+0x1c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000354 	.word	0x20000354

08001f98 <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <Relay_Init+0x8c>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <Relay_Init+0x8c>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6193      	str	r3, [r2, #24]
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <Relay_Init+0x8c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e01e      	b.n	8002012 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <Relay_Init+0x90>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	889b      	ldrh	r3, [r3, #4]
 8001fde:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <Relay_Init+0x90>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fe8:	1d3a      	adds	r2, r7, #4
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fa03 	bl	80043f8 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <Relay_Init+0x90>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <Relay_Init+0x90>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	f002 fb91 	bl	800472e <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b02      	cmp	r3, #2
 8002016:	dddd      	ble.n	8001fd4 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	08007f44 	.word	0x08007f44

0800202c <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <Relay_Set+0x3c>
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d80f      	bhi.n	8002068 <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	3b01      	subs	r3, #1
 800204c:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <Relay_Set+0x44>)
 800204e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	3b01      	subs	r3, #1
 8002056:	4a06      	ldr	r2, [pc, #24]	@ (8002070 <Relay_Set+0x44>)
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 800205e:	79ba      	ldrb	r2, [r7, #6]
 8002060:	4619      	mov	r1, r3
 8002062:	f002 fb64 	bl	800472e <HAL_GPIO_WritePin>
 8002066:	e000      	b.n	800206a <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8002068:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08007f44 	.word	0x08007f44

08002074 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 80020aa:	2332      	movs	r3, #50	@ 0x32
 80020ac:	2202      	movs	r2, #2
 80020ae:	21d0      	movs	r1, #208	@ 0xd0
 80020b0:	4822      	ldr	r0, [pc, #136]	@ (800213c <RTC_Init+0x98>)
 80020b2:	f003 f91d 	bl	80052f0 <HAL_I2C_IsDeviceReady>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <RTC_Init+0x9c>)
 80020be:	22d0      	movs	r2, #208	@ 0xd0
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	e010      	b.n	80020e6 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 80020c4:	2332      	movs	r3, #50	@ 0x32
 80020c6:	2202      	movs	r2, #2
 80020c8:	21ae      	movs	r1, #174	@ 0xae
 80020ca:	481c      	ldr	r0, [pc, #112]	@ (800213c <RTC_Init+0x98>)
 80020cc:	f003 f910 	bl	80052f0 <HAL_I2C_IsDeviceReady>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <RTC_Init+0x9c>)
 80020d8:	22ae      	movs	r2, #174	@ 0xae
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e003      	b.n	80020e6 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <RTC_Init+0x9c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e027      	b.n	8002136 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <RTC_Init+0x9c>)
 80020e8:	8819      	ldrh	r1, [r3, #0]
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	2301      	movs	r3, #1
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2200      	movs	r2, #0
 80020fc:	480f      	ldr	r0, [pc, #60]	@ (800213c <RTC_Init+0x98>)
 80020fe:	f002 fe83 	bl	8004e08 <HAL_I2C_Mem_Read>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d116      	bne.n	8002136 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	b25b      	sxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	da12      	bge.n	8002136 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002116:	b2db      	uxtb	r3, r3
 8002118:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <RTC_Init+0x9c>)
 800211c:	8819      	ldrh	r1, [r3, #0]
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2301      	movs	r3, #1
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2301      	movs	r3, #1
 800212e:	2200      	movs	r2, #0
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <RTC_Init+0x98>)
 8002132:	f002 fd6f 	bl	8004c14 <HAL_I2C_Mem_Write>
        }
    }
}
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000190 	.word	0x20000190
 8002140:	200003c0 	.word	0x200003c0

08002144 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 800214a:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <RTC_GetTimeDate+0x130>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8089 	beq.w	8002266 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8002154:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <RTC_GetTimeDate+0x130>)
 8002156:	8819      	ldrh	r1, [r3, #0]
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2307      	movs	r3, #7
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	2200      	movs	r2, #0
 800216a:	4843      	ldr	r0, [pc, #268]	@ (8002278 <RTC_GetTimeDate+0x134>)
 800216c:	f002 fe4c 	bl	8004e08 <HAL_I2C_Mem_Read>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d179      	bne.n	800226a <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8002176:	793b      	ldrb	r3, [r7, #4]
 8002178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff78 	bl	8002074 <bcd2dec>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <RTC_GetTimeDate+0x138>)
 800218a:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 800218c:	797b      	ldrb	r3, [r7, #5]
 800218e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff6d 	bl	8002074 <bcd2dec>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	4b37      	ldr	r3, [pc, #220]	@ (800227c <RTC_GetTimeDate+0x138>)
 80021a0:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d025      	beq.n	80021f8 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <bcd2dec>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d108      	bne.n	80021e2 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <RTC_GetTimeDate+0x96>
 80021d6:	220c      	movs	r2, #12
 80021d8:	e000      	b.n	80021dc <RTC_GetTimeDate+0x98>
 80021da:	2200      	movs	r2, #0
 80021dc:	4b27      	ldr	r3, [pc, #156]	@ (800227c <RTC_GetTimeDate+0x138>)
 80021de:	709a      	strb	r2, [r3, #2]
 80021e0:	e015      	b.n	800220e <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <RTC_GetTimeDate+0xac>
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	330c      	adds	r3, #12
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e000      	b.n	80021f2 <RTC_GetTimeDate+0xae>
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	4a22      	ldr	r2, [pc, #136]	@ (800227c <RTC_GetTimeDate+0x138>)
 80021f4:	7093      	strb	r3, [r2, #2]
 80021f6:	e00a      	b.n	800220e <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff37 	bl	8002074 <bcd2dec>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <RTC_GetTimeDate+0x138>)
 800220c:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff2c 	bl	8002074 <bcd2dec>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	4b16      	ldr	r3, [pc, #88]	@ (800227c <RTC_GetTimeDate+0x138>)
 8002222:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8002224:	7a3b      	ldrb	r3, [r7, #8]
 8002226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff21 	bl	8002074 <bcd2dec>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <RTC_GetTimeDate+0x138>)
 8002238:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 800223a:	7a7b      	ldrb	r3, [r7, #9]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff16 	bl	8002074 <bcd2dec>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <RTC_GetTimeDate+0x138>)
 800224e:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 8002250:	7abb      	ldrb	r3, [r7, #10]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff0e 	bl	8002074 <bcd2dec>
 8002258:	4603      	mov	r3, r0
 800225a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <RTC_GetTimeDate+0x138>)
 8002262:	80da      	strh	r2, [r3, #6]
 8002264:	e002      	b.n	800226c <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <RTC_GetTimeDate+0x128>
        return;
 800226a:	bf00      	nop
}
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200003c0 	.word	0x200003c0
 8002278:	20000190 	.word	0x20000190
 800227c:	200003b8 	.word	0x200003b8

08002280 <lcd_line>:
static uint16_t edit_search_gap_s = 60, edit_search_dry_s = 10;
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 800228c:	f107 000c 	add.w	r0, r7, #12
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <lcd_line+0x38>)
 8002294:	2111      	movs	r1, #17
 8002296:	f005 f80f 	bl	80072b8 <sniprintf>
    lcd_put_cur(row, 0);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fee6 	bl	8001070 <lcd_put_cur>
    lcd_send_string(ln);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ff03 	bl	80010b4 <lcd_send_string>
}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08007d94 	.word	0x08007d94

080022bc <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff ffda 	bl	8002280 <lcd_line>
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff ffce 	bl	8002280 <lcd_line>
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	f001 fa6a 	bl	80037c8 <HAL_GetTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a02      	ldr	r2, [pc, #8]	@ (8002300 <refreshInactivityTimer+0x14>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200003d0 	.word	0x200003d0

08002304 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <goto_menu_top+0x18>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <goto_menu_top+0x1c>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	200003d8 	.word	0x200003d8
 8002320:	200003dc 	.word	0x200003dc

08002324 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	70fb      	strb	r3, [r7, #3]
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d820      	bhi.n	800237a <format_menu_line+0x56>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db1d      	blt.n	800237a <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <format_menu_line+0x24>
 8002344:	233e      	movs	r3, #62	@ 0x3e
 8002346:	e000      	b.n	800234a <format_menu_line+0x26>
 8002348:	2320      	movs	r3, #32
 800234a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <format_menu_line+0x6c>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	f107 0014 	add.w	r0, r7, #20
 800235a:	4a0e      	ldr	r2, [pc, #56]	@ (8002394 <format_menu_line+0x70>)
 800235c:	2110      	movs	r1, #16
 800235e:	f004 ffab 	bl	80072b8 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8002362:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <format_menu_line+0x74>)
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f004 ffa0 	bl	80072b8 <sniprintf>
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8002378:	e005      	b.n	8002386 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <format_menu_line+0x78>)
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f004 ff9a 	bl	80072b8 <sniprintf>
    }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	@ 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000002c 	.word	0x2000002c
 8002394:	08007da0 	.word	0x08007da0
 8002398:	08007dac 	.word	0x08007dac
 800239c:	08007db4 	.word	0x08007db4

080023a0 <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
    lcd_clear();
 80023a4:	f7fe fe57 	bl	8001056 <lcd_clear>
    lcd_line0("  Welcome to ");
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <show_welcome+0x18>)
 80023aa:	f7ff ff87 	bl	80022bc <lcd_line0>
    lcd_line1("   HELONIX   ");
 80023ae:	4803      	ldr	r0, [pc, #12]	@ (80023bc <show_welcome+0x1c>)
 80023b0:	f7ff ff90 	bl	80022d4 <lcd_line1>
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	08007dc8 	.word	0x08007dc8
 80023bc:	08007dd8 	.word	0x08007dd8

080023c0 <show_dash>:

static void show_dash(void) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	@ 0x38
 80023c4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON" : "OFF";
 80023c6:	f7ff fdd7 	bl	8001f78 <Motor_GetStatus>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <show_dash+0x14>
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <show_dash+0xbc>)
 80023d2:	e000      	b.n	80023d6 <show_dash+0x16>
 80023d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <show_dash+0xc0>)
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    snprintf(line0,sizeof(line0),"Motor:%-3s",motor);
 80023d8:	f107 0014 	add.w	r0, r7, #20
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	4a29      	ldr	r2, [pc, #164]	@ (8002484 <show_dash+0xc4>)
 80023e0:	2111      	movs	r1, #17
 80023e2:	f004 ff69 	bl	80072b8 <sniprintf>

    int submergedCount = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ee:	e012      	b.n	8002416 <show_dash+0x56>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 80023f0:	4a25      	ldr	r2, [pc, #148]	@ (8002488 <show_dash+0xc8>)
 80023f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f4:	3302      	adds	r3, #2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4923      	ldr	r1, [pc, #140]	@ (800248c <show_dash+0xcc>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f962 	bl	80006c8 <__aeabi_fcmplt>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <show_dash+0x50>
 800240a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240c:	3301      	adds	r3, #1
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 8002410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002412:	3301      	adds	r3, #1
 8002414:	633b      	str	r3, [r7, #48]	@ 0x30
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	2b04      	cmp	r3, #4
 800241a:	dde9      	ble.n	80023f0 <show_dash+0x30>
    }

    const char *level;
    switch (submergedCount) {
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	2b03      	cmp	r3, #3
 8002420:	d816      	bhi.n	8002450 <show_dash+0x90>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <show_dash+0x68>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002439 	.word	0x08002439
 800242c:	0800243f 	.word	0x0800243f
 8002430:	08002445 	.word	0x08002445
 8002434:	0800244b 	.word	0x0800244b
        case 0:  level = "EMPTY"; break;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <show_dash+0xd0>)
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800243c:	e00b      	b.n	8002456 <show_dash+0x96>
        case 1:  level = "LOW";   break;
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <show_dash+0xd4>)
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002442:	e008      	b.n	8002456 <show_dash+0x96>
        case 2:  level = "HALF";  break;
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <show_dash+0xd8>)
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002448:	e005      	b.n	8002456 <show_dash+0x96>
        case 3:  level = "3/4";   break;
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <show_dash+0xdc>)
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800244e:	e002      	b.n	8002456 <show_dash+0x96>
        default: level = "FULL";  break;
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <show_dash+0xe0>)
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002454:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 8002456:	4638      	mov	r0, r7
 8002458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <show_dash+0xe4>)
 800245c:	2111      	movs	r1, #17
 800245e:	f004 ff2b 	bl	80072b8 <sniprintf>

    lcd_line0(line0);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff28 	bl	80022bc <lcd_line0>
    lcd_line1(line1);
 800246c:	463b      	mov	r3, r7
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff30 	bl	80022d4 <lcd_line1>
}
 8002474:	bf00      	nop
 8002476:	3738      	adds	r7, #56	@ 0x38
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	08007de8 	.word	0x08007de8
 8002480:	08007dec 	.word	0x08007dec
 8002484:	08007df0 	.word	0x08007df0
 8002488:	20000284 	.word	0x20000284
 800248c:	3dcccccd 	.word	0x3dcccccd
 8002490:	08007dfc 	.word	0x08007dfc
 8002494:	08007e04 	.word	0x08007e04
 8002498:	08007e08 	.word	0x08007e08
 800249c:	08007e10 	.word	0x08007e10
 80024a0:	08007e14 	.word	0x08007e14
 80024a4:	08007e1c 	.word	0x08007e1c

080024a8 <show_menu>:

static void show_menu(void){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <show_menu+0xb0>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <show_menu+0xb4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	da04      	bge.n	80024c4 <show_menu+0x1c>
 80024ba:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <show_menu+0xb0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a27      	ldr	r2, [pc, #156]	@ (800255c <show_menu+0xb4>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <show_menu+0xb4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <show_menu+0xb0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	da04      	bge.n	80024dc <show_menu+0x34>
 80024d2:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <show_menu+0xb0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	4a20      	ldr	r2, [pc, #128]	@ (800255c <show_menu+0xb4>)
 80024da:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <show_menu+0xb4>)
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <show_menu+0xb0>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <show_menu+0xb4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d105      	bne.n	80024f8 <show_menu+0x50>
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <show_menu+0xb8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <show_menu+0x50>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <show_menu+0x52>
 80024f8:	2300      	movs	r3, #0
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f107 0014 	add.w	r0, r7, #20
 8002504:	460a      	mov	r2, r1
 8002506:	2111      	movs	r1, #17
 8002508:	f7ff ff0c 	bl	8002324 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <show_menu+0xb4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1c59      	adds	r1, r3, #1
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <show_menu+0xb4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <show_menu+0xb0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d105      	bne.n	800252c <show_menu+0x84>
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <show_menu+0xb8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <show_menu+0x84>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <show_menu+0x86>
 800252c:	2300      	movs	r3, #0
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4638      	mov	r0, r7
 8002536:	460a      	mov	r2, r1
 8002538:	2111      	movs	r1, #17
 800253a:	f7ff fef3 	bl	8002324 <format_menu_line>
    lcd_line0(line0);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff feba 	bl	80022bc <lcd_line0>
    lcd_line1(line1);
 8002548:	463b      	mov	r3, r7
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fec2 	bl	80022d4 <lcd_line1>
}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	@ 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200003d8 	.word	0x200003d8
 800255c:	200003dc 	.word	0x200003dc
 8002560:	2000002b 	.word	0x2000002b

08002564 <show_manual>:

static void show_manual(void){
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <show_manual+0x54>)
 8002570:	2111      	movs	r1, #17
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fea0 	bl	80072b8 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8002578:	f7ff fcfe 	bl	8001f78 <Motor_GetStatus>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <show_manual+0x2c>
 8002582:	463b      	mov	r3, r7
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <show_manual+0x58>)
 8002586:	2111      	movs	r1, #17
 8002588:	4618      	mov	r0, r3
 800258a:	f004 fe95 	bl	80072b8 <sniprintf>
 800258e:	e005      	b.n	800259c <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 8002590:	463b      	mov	r3, r7
 8002592:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <show_manual+0x5c>)
 8002594:	2111      	movs	r1, #17
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fe8e 	bl	80072b8 <sniprintf>
    lcd_line0(line0);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe8b 	bl	80022bc <lcd_line0>
    lcd_line1(line1);
 80025a6:	463b      	mov	r3, r7
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe93 	bl	80022d4 <lcd_line1>
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	08007d38 	.word	0x08007d38
 80025bc:	08007e28 	.word	0x08007e28
 80025c0:	08007e38 	.word	0x08007e38

080025c4 <show_semi_auto>:

static void show_semi_auto(void){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <show_semi_auto+0x50>)
 80025d0:	2111      	movs	r1, #17
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 fe70 	bl	80072b8 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <show_semi_auto+0x54>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <show_semi_auto+0x2a>
 80025e0:	463b      	mov	r3, r7
 80025e2:	4a0e      	ldr	r2, [pc, #56]	@ (800261c <show_semi_auto+0x58>)
 80025e4:	2111      	movs	r1, #17
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fe66 	bl	80072b8 <sniprintf>
 80025ec:	e005      	b.n	80025fa <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 80025ee:	463b      	mov	r3, r7
 80025f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002620 <show_semi_auto+0x5c>)
 80025f2:	2111      	movs	r1, #17
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 fe5f 	bl	80072b8 <sniprintf>
    lcd_line0(line0);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fe5c 	bl	80022bc <lcd_line0>
    lcd_line1(line1);
 8002604:	463b      	mov	r3, r7
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fe64 	bl	80022d4 <lcd_line1>
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	@ 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08007d44 	.word	0x08007d44
 8002618:	200003d4 	.word	0x200003d4
 800261c:	08007e48 	.word	0x08007e48
 8002620:	08007e58 	.word	0x08007e58

08002624 <show_timer>:

static void show_timer(void){
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	@ 0x30
 8002628:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 800262a:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <show_timer+0x54>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <show_timer+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f107 0014 	add.w	r0, r7, #20
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	4a10      	ldr	r2, [pc, #64]	@ (8002680 <show_timer+0x5c>)
 800263e:	2111      	movs	r1, #17
 8002640:	f004 fe3a 	bl	80072b8 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <show_timer+0x60>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <show_timer+0x64>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4638      	mov	r0, r7
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <show_timer+0x68>)
 8002656:	2111      	movs	r1, #17
 8002658:	f004 fe2e 	bl	80072b8 <sniprintf>
    lcd_line0(l0);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fe2b 	bl	80022bc <lcd_line0>
    lcd_line1(l1);
 8002666:	463b      	mov	r3, r7
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fe33 	bl	80022d4 <lcd_line1>
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000048 	.word	0x20000048
 800267c:	20000049 	.word	0x20000049
 8002680:	08007e68 	.word	0x08007e68
 8002684:	2000004a 	.word	0x2000004a
 8002688:	2000004b 	.word	0x2000004b
 800268c:	08007e78 	.word	0x08007e78

08002690 <show_search>:

static void show_search(void){
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds",edit_search_gap_s,edit_search_dry_s);
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <show_search+0x48>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <show_search+0x4c>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	f107 0014 	add.w	r0, r7, #20
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <show_search+0x50>)
 80026aa:	2111      	movs	r1, #17
 80026ac:	f004 fe04 	bl	80072b8 <sniprintf>
    snprintf(l1,sizeof(l1),">Edit     Back");
 80026b0:	463b      	mov	r3, r7
 80026b2:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <show_search+0x54>)
 80026b4:	2111      	movs	r1, #17
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fdfe 	bl	80072b8 <sniprintf>
    lcd_line0(l0);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fdfb 	bl	80022bc <lcd_line0>
    lcd_line1(l1);
 80026c6:	463b      	mov	r3, r7
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fe03 	bl	80022d4 <lcd_line1>
}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000004c 	.word	0x2000004c
 80026dc:	2000004e 	.word	0x2000004e
 80026e0:	08007e8c 	.word	0x08007e8c
 80026e4:	08007ea0 	.word	0x08007ea0

080026e8 <show_countdown>:

static void show_countdown(void){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b090      	sub	sp, #64	@ 0x40
 80026ec:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    if (countdownActive) {
 80026ee:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <show_countdown+0x84>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01e      	beq.n	8002736 <show_countdown+0x4e>
        uint32_t sec = countdownDuration;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <show_countdown+0x88>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 80026fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002700:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <show_countdown+0x8c>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s = sec%60;
 800270a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <show_countdown+0x8c>)
 800270e:	fba3 1302 	umull	r1, r3, r3, r2
 8002712:	0959      	lsrs	r1, r3, #5
 8002714:	460b      	mov	r3, r1
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a5b      	subs	r3, r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Count %02d:%02d",(int)min,(int)s);
 8002720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	f107 0018 	add.w	r0, r7, #24
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <show_countdown+0x90>)
 800272e:	2111      	movs	r1, #17
 8002730:	f004 fdc2 	bl	80072b8 <sniprintf>
 8002734:	e006      	b.n	8002744 <show_countdown+0x5c>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8002736:	f107 0318 	add.w	r3, r7, #24
 800273a:	4a10      	ldr	r2, [pc, #64]	@ (800277c <show_countdown+0x94>)
 800273c:	2111      	movs	r1, #17
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fdba 	bl	80072b8 <sniprintf>
    }
    snprintf(l1,sizeof(l1),">Set Start Back");
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <show_countdown+0x98>)
 8002748:	2111      	movs	r1, #17
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fdb4 	bl	80072b8 <sniprintf>
    lcd_line0(l0);
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fdb1 	bl	80022bc <lcd_line0>
    lcd_line1(l1);
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fdb9 	bl	80022d4 <lcd_line1>
}
 8002762:	bf00      	nop
 8002764:	3738      	adds	r7, #56	@ 0x38
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000355 	.word	0x20000355
 8002770:	20000358 	.word	0x20000358
 8002774:	88888889 	.word	0x88888889
 8002778:	08007eb0 	.word	0x08007eb0
 800277c:	08007ec0 	.word	0x08007ec0
 8002780:	08007ed0 	.word	0x08007ed0

08002784 <show_twist>:

static void show_twist(void){
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds",edit_twist_on_s);
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <show_twist+0x40>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	f107 0014 	add.w	r0, r7, #20
 8002792:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <show_twist+0x44>)
 8002794:	2111      	movs	r1, #17
 8002796:	f004 fd8f 	bl	80072b8 <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds",edit_twist_off_s);
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <show_twist+0x48>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	4638      	mov	r0, r7
 80027a0:	4a0b      	ldr	r2, [pc, #44]	@ (80027d0 <show_twist+0x4c>)
 80027a2:	2111      	movs	r1, #17
 80027a4:	f004 fd88 	bl	80072b8 <sniprintf>
    lcd_line0(l0);
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fd85 	bl	80022bc <lcd_line0>
    lcd_line1(l1);
 80027b2:	463b      	mov	r3, r7
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fd8d 	bl	80022d4 <lcd_line1>
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	@ 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000050 	.word	0x20000050
 80027c8:	08007ee0 	.word	0x08007ee0
 80027cc:	20000052 	.word	0x20000052
 80027d0:	08007ef0 	.word	0x08007ef0

080027d4 <apply_search_settings>:

/* ===== Apply functions ===== */
static void apply_search_settings(void){
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <apply_search_settings+0x1c>)
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <apply_search_settings+0x20>)
 80027de:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <apply_search_settings+0x24>)
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <apply_search_settings+0x20>)
 80027e6:	809a      	strh	r2, [r3, #4]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	2000004c 	.word	0x2000004c
 80027f4:	2000001c 	.word	0x2000001c
 80027f8:	2000004e 	.word	0x2000004e

080027fc <apply_twist_settings>:
static void apply_twist_settings(void){
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <apply_twist_settings+0x1c>)
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <apply_twist_settings+0x20>)
 8002806:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <apply_twist_settings+0x24>)
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <apply_twist_settings+0x20>)
 800280e:	809a      	strh	r2, [r3, #4]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000050 	.word	0x20000050
 800281c:	20000024 	.word	0x20000024
 8002820:	20000052 	.word	0x20000052

08002824 <apply_countdown_settings>:
static void apply_countdown_settings(void){
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <apply_countdown_settings+0x20>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <apply_countdown_settings+0x24>)
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000054 	.word	0x20000054
 8002848:	20000358 	.word	0x20000358

0800284c <apply_timer_settings>:
static void apply_timer_settings(void){
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
    (void)edit_timer_on_h;
    (void)edit_timer_on_m;
    (void)edit_timer_off_h;
    (void)edit_timer_off_m;
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800285e:	f000 ffb3 	bl	80037c8 <HAL_GetTick>
 8002862:	60b8      	str	r0, [r7, #8]
    bool cursorBlinkActive = false;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]

    switch (ui) {
 8002868:	4b72      	ldr	r3, [pc, #456]	@ (8002a34 <Screen_Update+0x1dc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b11      	cmp	r3, #17
 800286e:	bf8c      	ite	hi
 8002870:	2201      	movhi	r2, #1
 8002872:	2200      	movls	r2, #0
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	2a00      	cmp	r2, #0
 8002878:	d10e      	bne.n	8002898 <Screen_Update+0x40>
 800287a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a38 <Screen_Update+0x1e0>)
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <Screen_Update+0x40>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
            break;
 8002896:	e005      	b.n	80028a4 <Screen_Update+0x4c>
        default:
            cursorBlinkActive = false;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
            cursorVisible = true;
 800289c:	4b67      	ldr	r3, [pc, #412]	@ (8002a3c <Screen_Update+0x1e4>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
            break;
 80028a2:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <Screen_Update+0x8c>
 80028aa:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <Screen_Update+0x1e8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d314      	bcc.n	80028e4 <Screen_Update+0x8c>
        cursorVisible = !cursorVisible;
 80028ba:	4b60      	ldr	r3, [pc, #384]	@ (8002a3c <Screen_Update+0x1e4>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <Screen_Update+0x1e4>)
 80028d6:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 80028d8:	4a59      	ldr	r2, [pc, #356]	@ (8002a40 <Screen_Update+0x1e8>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 80028de:	4b59      	ldr	r3, [pc, #356]	@ (8002a44 <Screen_Update+0x1ec>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 80028e4:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <Screen_Update+0x1dc>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d110      	bne.n	800290e <Screen_Update+0xb6>
 80028ec:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <Screen_Update+0x1f0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d308      	bcc.n	800290e <Screen_Update+0xb6>
        ui = UI_DASH;
 80028fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a34 <Screen_Update+0x1dc>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002902:	4a51      	ldr	r2, [pc, #324]	@ (8002a48 <Screen_Update+0x1f0>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002908:	4b4e      	ldr	r3, [pc, #312]	@ (8002a44 <Screen_Update+0x1ec>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 800290e:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <Screen_Update+0x1dc>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <Screen_Update+0xe2>
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <Screen_Update+0x1dc>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d00d      	beq.n	800293a <Screen_Update+0xe2>
 800291e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <Screen_Update+0x1f4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800292a:	4293      	cmp	r3, r2
 800292c:	d305      	bcc.n	800293a <Screen_Update+0xe2>
        ui = UI_DASH;
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <Screen_Update+0x1dc>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <Screen_Update+0x1ec>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 800293a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a34 <Screen_Update+0x1dc>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10c      	bne.n	800295c <Screen_Update+0x104>
 8002942:	4b41      	ldr	r3, [pc, #260]	@ (8002a48 <Screen_Update+0x1f0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800294e:	d305      	bcc.n	800295c <Screen_Update+0x104>
        screenNeedsRefresh = true;
 8002950:	4b3c      	ldr	r3, [pc, #240]	@ (8002a44 <Screen_Update+0x1ec>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002956:	4a3c      	ldr	r2, [pc, #240]	@ (8002a48 <Screen_Update+0x1f0>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <Screen_Update+0x1ec>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <Screen_Update+0x118>
 8002964:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <Screen_Update+0x1dc>)
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	4b39      	ldr	r3, [pc, #228]	@ (8002a50 <Screen_Update+0x1f8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d05d      	beq.n	8002a2c <Screen_Update+0x1d4>
        bool fullRedraw = (ui != last_ui);
 8002970:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <Screen_Update+0x1dc>)
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <Screen_Update+0x1f8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	71fb      	strb	r3, [r7, #7]
        last_ui = ui;
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <Screen_Update+0x1dc>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <Screen_Update+0x1f8>)
 8002988:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 800298a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a44 <Screen_Update+0x1ec>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
        if (fullRedraw) lcd_clear();
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <Screen_Update+0x142>
 8002996:	f7fe fb5e 	bl	8001056 <lcd_clear>

        switch (ui) {
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <Screen_Update+0x1dc>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d83d      	bhi.n	8002a1e <Screen_Update+0x1c6>
 80029a2:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <Screen_Update+0x150>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029e9 	.word	0x080029e9
 80029ac:	080029ef 	.word	0x080029ef
 80029b0:	080029f5 	.word	0x080029f5
 80029b4:	080029fb 	.word	0x080029fb
 80029b8:	08002a01 	.word	0x08002a01
 80029bc:	08002a07 	.word	0x08002a07
 80029c0:	08002a1f 	.word	0x08002a1f
 80029c4:	08002a1f 	.word	0x08002a1f
 80029c8:	08002a1f 	.word	0x08002a1f
 80029cc:	08002a1f 	.word	0x08002a1f
 80029d0:	08002a0d 	.word	0x08002a0d
 80029d4:	08002a1f 	.word	0x08002a1f
 80029d8:	08002a1f 	.word	0x08002a1f
 80029dc:	08002a13 	.word	0x08002a13
 80029e0:	08002a1f 	.word	0x08002a1f
 80029e4:	08002a19 	.word	0x08002a19
            case UI_WELCOME: show_welcome(); break;
 80029e8:	f7ff fcda 	bl	80023a0 <show_welcome>
 80029ec:	e01e      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_DASH: show_dash(); break;
 80029ee:	f7ff fce7 	bl	80023c0 <show_dash>
 80029f2:	e01b      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_MENU: show_menu(); break;
 80029f4:	f7ff fd58 	bl	80024a8 <show_menu>
 80029f8:	e018      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_MANUAL: show_manual(); break;
 80029fa:	f7ff fdb3 	bl	8002564 <show_manual>
 80029fe:	e015      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8002a00:	f7ff fde0 	bl	80025c4 <show_semi_auto>
 8002a04:	e012      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_TIMER: show_timer(); break;
 8002a06:	f7ff fe0d 	bl	8002624 <show_timer>
 8002a0a:	e00f      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_SEARCH: show_search(); break;
 8002a0c:	f7ff fe40 	bl	8002690 <show_search>
 8002a10:	e00c      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_COUNTDOWN: show_countdown(); break;
 8002a12:	f7ff fe69 	bl	80026e8 <show_countdown>
 8002a16:	e009      	b.n	8002a2c <Screen_Update+0x1d4>
            case UI_TWIST: show_twist(); break;
 8002a18:	f7ff feb4 	bl	8002784 <show_twist>
 8002a1c:	e006      	b.n	8002a2c <Screen_Update+0x1d4>
            default: lcd_line0("Not Implemented   "); lcd_line1("                  "); break;
 8002a1e:	480d      	ldr	r0, [pc, #52]	@ (8002a54 <Screen_Update+0x1fc>)
 8002a20:	f7ff fc4c 	bl	80022bc <lcd_line0>
 8002a24:	480c      	ldr	r0, [pc, #48]	@ (8002a58 <Screen_Update+0x200>)
 8002a26:	f7ff fc55 	bl	80022d4 <lcd_line1>
 8002a2a:	bf00      	nop
        }
    }
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200003c8 	.word	0x200003c8
 8002a38:	00035bc4 	.word	0x00035bc4
 8002a3c:	2000002b 	.word	0x2000002b
 8002a40:	200003cc 	.word	0x200003cc
 8002a44:	200003c9 	.word	0x200003c9
 8002a48:	200003c4 	.word	0x200003c4
 8002a4c:	200003d0 	.word	0x200003d0
 8002a50:	2000002a 	.word	0x2000002a
 8002a54:	08007f00 	.word	0x08007f00
 8002a58:	08007f14 	.word	0x08007f14

08002a5c <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
    lcd_init();
 8002a60:	f7fe fb3d 	bl	80010de <lcd_init>
    ui = UI_WELCOME;
 8002a64:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <Screen_Init+0x60>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <Screen_Init+0x64>)
 8002a6c:	2212      	movs	r2, #18
 8002a6e:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <Screen_Init+0x68>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002a76:	f000 fea7 	bl	80037c8 <HAL_GetTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <Screen_Init+0x6c>)
 8002a7e:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8002a80:	f7ff fc34 	bl	80022ec <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <Screen_Init+0x70>)
 8002a86:	885a      	ldrh	r2, [r3, #2]
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <Screen_Init+0x74>)
 8002a8a:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <Screen_Init+0x70>)
 8002a8e:	889a      	ldrh	r2, [r3, #4]
 8002a90:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <Screen_Init+0x78>)
 8002a92:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <Screen_Init+0x7c>)
 8002a96:	885a      	ldrh	r2, [r3, #2]
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <Screen_Init+0x80>)
 8002a9a:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <Screen_Init+0x7c>)
 8002a9e:	889a      	ldrh	r2, [r3, #4]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <Screen_Init+0x84>)
 8002aa2:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <Screen_Init+0x88>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae8 <Screen_Init+0x8c>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <Screen_Init+0x90>)
 8002ab4:	801a      	strh	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200003c8 	.word	0x200003c8
 8002ac0:	2000002a 	.word	0x2000002a
 8002ac4:	200003c9 	.word	0x200003c9
 8002ac8:	200003c4 	.word	0x200003c4
 8002acc:	2000001c 	.word	0x2000001c
 8002ad0:	2000004c 	.word	0x2000004c
 8002ad4:	2000004e 	.word	0x2000004e
 8002ad8:	20000024 	.word	0x20000024
 8002adc:	20000050 	.word	0x20000050
 8002ae0:	20000052 	.word	0x20000052
 8002ae4:	20000358 	.word	0x20000358
 8002ae8:	88888889 	.word	0x88888889
 8002aec:	20000054 	.word	0x20000054

08002af0 <menu_move_up>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Button actions ===== */
static void menu_move_up(void){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8002af4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c74 <menu_move_up+0x184>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d116      	bne.n	8002b2a <menu_move_up+0x3a>
        if (menu_idx > 0) menu_idx--;
 8002afc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c78 <menu_move_up+0x188>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dd04      	ble.n	8002b0e <menu_move_up+0x1e>
 8002b04:	4b5c      	ldr	r3, [pc, #368]	@ (8002c78 <menu_move_up+0x188>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c78 <menu_move_up+0x188>)
 8002b0c:	6013      	str	r3, [r2, #0]
        if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c78 <menu_move_up+0x188>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b5a      	ldr	r3, [pc, #360]	@ (8002c7c <menu_move_up+0x18c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	da03      	bge.n	8002b22 <menu_move_up+0x32>
 8002b1a:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <menu_move_up+0x188>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a57      	ldr	r2, [pc, #348]	@ (8002c7c <menu_move_up+0x18c>)
 8002b20:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002b22:	4b57      	ldr	r3, [pc, #348]	@ (8002c80 <menu_move_up+0x190>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e09f      	b.n	8002c6a <menu_move_up+0x17a>
    } else {
        switch (ui){
 8002b2a:	4b52      	ldr	r3, [pc, #328]	@ (8002c74 <menu_move_up+0x184>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3b06      	subs	r3, #6
 8002b30:	2b0b      	cmp	r3, #11
 8002b32:	f200 8084 	bhi.w	8002c3e <menu_move_up+0x14e>
 8002b36:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <menu_move_up+0x4c>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b6d 	.word	0x08002b6d
 8002b40:	08002b83 	.word	0x08002b83
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002baf 	.word	0x08002baf
 8002b4c:	08002c3f 	.word	0x08002c3f
 8002b50:	08002bc5 	.word	0x08002bc5
 8002b54:	08002bdd 	.word	0x08002bdd
 8002b58:	08002c3f 	.word	0x08002c3f
 8002b5c:	08002bf5 	.word	0x08002bf5
 8002b60:	08002c3f 	.word	0x08002c3f
 8002b64:	08002c0f 	.word	0x08002c0f
 8002b68:	08002c27 	.word	0x08002c27
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8002b6c:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <menu_move_up+0x194>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b16      	cmp	r3, #22
 8002b72:	d866      	bhi.n	8002c42 <menu_move_up+0x152>
 8002b74:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <menu_move_up+0x194>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <menu_move_up+0x194>)
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e05f      	b.n	8002c42 <menu_move_up+0x152>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8002b82:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <menu_move_up+0x198>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b3a      	cmp	r3, #58	@ 0x3a
 8002b88:	d85d      	bhi.n	8002c46 <menu_move_up+0x156>
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c88 <menu_move_up+0x198>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <menu_move_up+0x198>)
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e056      	b.n	8002c46 <menu_move_up+0x156>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8002b98:	4b3c      	ldr	r3, [pc, #240]	@ (8002c8c <menu_move_up+0x19c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b16      	cmp	r3, #22
 8002b9e:	d854      	bhi.n	8002c4a <menu_move_up+0x15a>
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <menu_move_up+0x19c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b38      	ldr	r3, [pc, #224]	@ (8002c8c <menu_move_up+0x19c>)
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e04d      	b.n	8002c4a <menu_move_up+0x15a>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8002bae:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <menu_move_up+0x1a0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b3a      	cmp	r3, #58	@ 0x3a
 8002bb4:	d84b      	bhi.n	8002c4e <menu_move_up+0x15e>
 8002bb6:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <menu_move_up+0x1a0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <menu_move_up+0x1a0>)
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e044      	b.n	8002c4e <menu_move_up+0x15e>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8002bc4:	4b33      	ldr	r3, [pc, #204]	@ (8002c94 <menu_move_up+0x1a4>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002bcc:	d241      	bcs.n	8002c52 <menu_move_up+0x162>
 8002bce:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <menu_move_up+0x1a4>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c94 <menu_move_up+0x1a4>)
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	e03a      	b.n	8002c52 <menu_move_up+0x162>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c98 <menu_move_up+0x1a8>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002be4:	d237      	bcs.n	8002c56 <menu_move_up+0x166>
 8002be6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c98 <menu_move_up+0x1a8>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <menu_move_up+0x1a8>)
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e030      	b.n	8002c56 <menu_move_up+0x166>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8002bf4:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <menu_move_up+0x1ac>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d82c      	bhi.n	8002c5a <menu_move_up+0x16a>
 8002c00:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <menu_move_up+0x1ac>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <menu_move_up+0x1ac>)
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e025      	b.n	8002c5a <menu_move_up+0x16a>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <menu_move_up+0x1b0>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c16:	d222      	bcs.n	8002c5e <menu_move_up+0x16e>
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <menu_move_up+0x1b0>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <menu_move_up+0x1b0>)
 8002c22:	801a      	strh	r2, [r3, #0]
 8002c24:	e01b      	b.n	8002c5e <menu_move_up+0x16e>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <menu_move_up+0x1b4>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c2e:	d218      	bcs.n	8002c62 <menu_move_up+0x172>
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <menu_move_up+0x1b4>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <menu_move_up+0x1b4>)
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	e011      	b.n	8002c62 <menu_move_up+0x172>
            default: break;
 8002c3e:	bf00      	nop
 8002c40:	e010      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8002c42:	bf00      	nop
 8002c44:	e00e      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8002c46:	bf00      	nop
 8002c48:	e00c      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <menu_move_up+0x174>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <menu_move_up+0x174>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <menu_move_up+0x174>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <menu_move_up+0x174>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8002c62:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <menu_move_up+0x190>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 8002c6a:	f7ff fb3f 	bl	80022ec <refreshInactivityTimer>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200003c8 	.word	0x200003c8
 8002c78:	200003d8 	.word	0x200003d8
 8002c7c:	200003dc 	.word	0x200003dc
 8002c80:	200003c9 	.word	0x200003c9
 8002c84:	20000048 	.word	0x20000048
 8002c88:	20000049 	.word	0x20000049
 8002c8c:	2000004a 	.word	0x2000004a
 8002c90:	2000004b 	.word	0x2000004b
 8002c94:	2000004c 	.word	0x2000004c
 8002c98:	2000004e 	.word	0x2000004e
 8002c9c:	20000054 	.word	0x20000054
 8002ca0:	20000050 	.word	0x20000050
 8002ca4:	20000052 	.word	0x20000052

08002ca8 <menu_move_down>:

static void menu_move_down(void){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8002cac:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <menu_move_down+0x17c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d118      	bne.n	8002ce6 <menu_move_down+0x3e>
        if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++;
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <menu_move_down+0x180>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d804      	bhi.n	8002cc6 <menu_move_down+0x1e>
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e28 <menu_move_down+0x180>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a59      	ldr	r2, [pc, #356]	@ (8002e28 <menu_move_down+0x180>)
 8002cc4:	6013      	str	r3, [r2, #0]
        if (menu_idx > menu_view_top + 1) menu_view_top = menu_idx - 1;
 8002cc6:	4b59      	ldr	r3, [pc, #356]	@ (8002e2c <menu_move_down+0x184>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4b56      	ldr	r3, [pc, #344]	@ (8002e28 <menu_move_down+0x180>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	da04      	bge.n	8002cde <menu_move_down+0x36>
 8002cd4:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <menu_move_down+0x180>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	4a54      	ldr	r2, [pc, #336]	@ (8002e2c <menu_move_down+0x184>)
 8002cdc:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002cde:	4b54      	ldr	r3, [pc, #336]	@ (8002e30 <menu_move_down+0x188>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e099      	b.n	8002e1a <menu_move_down+0x172>
    } else {
        switch (ui){
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <menu_move_down+0x17c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	3b06      	subs	r3, #6
 8002cec:	2b0b      	cmp	r3, #11
 8002cee:	d87e      	bhi.n	8002dee <menu_move_down+0x146>
 8002cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <menu_move_down+0x50>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d29 	.word	0x08002d29
 8002cfc:	08002d3f 	.word	0x08002d3f
 8002d00:	08002d55 	.word	0x08002d55
 8002d04:	08002d6b 	.word	0x08002d6b
 8002d08:	08002def 	.word	0x08002def
 8002d0c:	08002d81 	.word	0x08002d81
 8002d10:	08002d97 	.word	0x08002d97
 8002d14:	08002def 	.word	0x08002def
 8002d18:	08002dad 	.word	0x08002dad
 8002d1c:	08002def 	.word	0x08002def
 8002d20:	08002dc3 	.word	0x08002dc3
 8002d24:	08002dd9 	.word	0x08002dd9
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8002d28:	4b42      	ldr	r3, [pc, #264]	@ (8002e34 <menu_move_down+0x18c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d060      	beq.n	8002df2 <menu_move_down+0x14a>
 8002d30:	4b40      	ldr	r3, [pc, #256]	@ (8002e34 <menu_move_down+0x18c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <menu_move_down+0x18c>)
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e059      	b.n	8002df2 <menu_move_down+0x14a>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e38 <menu_move_down+0x190>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d057      	beq.n	8002df6 <menu_move_down+0x14e>
 8002d46:	4b3c      	ldr	r3, [pc, #240]	@ (8002e38 <menu_move_down+0x190>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <menu_move_down+0x190>)
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e050      	b.n	8002df6 <menu_move_down+0x14e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <menu_move_down+0x194>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d04e      	beq.n	8002dfa <menu_move_down+0x152>
 8002d5c:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <menu_move_down+0x194>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b35      	ldr	r3, [pc, #212]	@ (8002e3c <menu_move_down+0x194>)
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e047      	b.n	8002dfa <menu_move_down+0x152>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8002d6a:	4b35      	ldr	r3, [pc, #212]	@ (8002e40 <menu_move_down+0x198>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d045      	beq.n	8002dfe <menu_move_down+0x156>
 8002d72:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <menu_move_down+0x198>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <menu_move_down+0x198>)
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e03e      	b.n	8002dfe <menu_move_down+0x156>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 8002d80:	4b30      	ldr	r3, [pc, #192]	@ (8002e44 <menu_move_down+0x19c>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d93c      	bls.n	8002e02 <menu_move_down+0x15a>
 8002d88:	4b2e      	ldr	r3, [pc, #184]	@ (8002e44 <menu_move_down+0x19c>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b2c      	ldr	r3, [pc, #176]	@ (8002e44 <menu_move_down+0x19c>)
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e035      	b.n	8002e02 <menu_move_down+0x15a>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8002d96:	4b2c      	ldr	r3, [pc, #176]	@ (8002e48 <menu_move_down+0x1a0>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d933      	bls.n	8002e06 <menu_move_down+0x15e>
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <menu_move_down+0x1a0>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <menu_move_down+0x1a0>)
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	e02c      	b.n	8002e06 <menu_move_down+0x15e>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 8002dac:	4b27      	ldr	r3, [pc, #156]	@ (8002e4c <menu_move_down+0x1a4>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02a      	beq.n	8002e0a <menu_move_down+0x162>
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <menu_move_down+0x1a4>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <menu_move_down+0x1a4>)
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e023      	b.n	8002e0a <menu_move_down+0x162>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <menu_move_down+0x1a8>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d921      	bls.n	8002e0e <menu_move_down+0x166>
 8002dca:	4b21      	ldr	r3, [pc, #132]	@ (8002e50 <menu_move_down+0x1a8>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e50 <menu_move_down+0x1a8>)
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e01a      	b.n	8002e0e <menu_move_down+0x166>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <menu_move_down+0x1ac>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d918      	bls.n	8002e12 <menu_move_down+0x16a>
 8002de0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <menu_move_down+0x1ac>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <menu_move_down+0x1ac>)
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e011      	b.n	8002e12 <menu_move_down+0x16a>
            default: break;
 8002dee:	bf00      	nop
 8002df0:	e010      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8002df2:	bf00      	nop
 8002df4:	e00e      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8002df6:	bf00      	nop
 8002df8:	e00c      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8002dfa:	bf00      	nop
 8002dfc:	e00a      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8002dfe:	bf00      	nop
 8002e00:	e008      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 8002e02:	bf00      	nop
 8002e04:	e006      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8002e06:	bf00      	nop
 8002e08:	e004      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 8002e12:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <menu_move_down+0x188>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 8002e1a:	f7ff fa67 	bl	80022ec <refreshInactivityTimer>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200003c8 	.word	0x200003c8
 8002e28:	200003d8 	.word	0x200003d8
 8002e2c:	200003dc 	.word	0x200003dc
 8002e30:	200003c9 	.word	0x200003c9
 8002e34:	20000048 	.word	0x20000048
 8002e38:	20000049 	.word	0x20000049
 8002e3c:	2000004a 	.word	0x2000004a
 8002e40:	2000004b 	.word	0x2000004b
 8002e44:	2000004c 	.word	0x2000004c
 8002e48:	2000004e 	.word	0x2000004e
 8002e4c:	20000054 	.word	0x20000054
 8002e50:	20000050 	.word	0x20000050
 8002e54:	20000052 	.word	0x20000052

08002e58 <menu_select>:

static void menu_select(void){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8002e5c:	f7ff fa46 	bl	80022ec <refreshInactivityTimer>
    switch (ui){
 8002e60:	4b71      	ldr	r3, [pc, #452]	@ (8003028 <menu_select+0x1d0>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	f200 80d5 	bhi.w	8003014 <menu_select+0x1bc>
 8002e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <menu_select+0x18>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002ec1 	.word	0x08002ec1
 8002e78:	08002ecd 	.word	0x08002ecd
 8002e7c:	08002f3b 	.word	0x08002f3b
 8002e80:	08002f5b 	.word	0x08002f5b
 8002e84:	08002f81 	.word	0x08002f81
 8002e88:	08002f89 	.word	0x08002f89
 8002e8c:	08002f91 	.word	0x08002f91
 8002e90:	08002f99 	.word	0x08002f99
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002fad 	.word	0x08002fad
 8002e9c:	08002fb5 	.word	0x08002fb5
 8002ea0:	08002fc1 	.word	0x08002fc1
 8002ea4:	08002fcd 	.word	0x08002fcd
 8002ea8:	08002fe7 	.word	0x08002fe7
 8002eac:	08002ff9 	.word	0x08002ff9
 8002eb0:	08003001 	.word	0x08003001
 8002eb4:	08003009 	.word	0x08003009
        case UI_WELCOME: ui = UI_DASH; break;
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003028 <menu_select+0x1d0>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e0ad      	b.n	800301c <menu_select+0x1c4>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <menu_select+0x1d0>)
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	f7ff fa1d 	bl	8002304 <goto_menu_top>
 8002eca:	e0a7      	b.n	800301c <menu_select+0x1c4>
        case UI_MENU:
            switch (menu_idx){
 8002ecc:	4b57      	ldr	r3, [pc, #348]	@ (800302c <menu_select+0x1d4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d82d      	bhi.n	8002f30 <menu_select+0xd8>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <menu_select+0x84>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002ef9 	.word	0x08002ef9
 8002ee0:	08002f01 	.word	0x08002f01
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f29 	.word	0x08002f29
                case 0: ui = UI_MANUAL; break;
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <menu_select+0x1d0>)
 8002efa:	2203      	movs	r2, #3
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e01b      	b.n	8002f38 <menu_select+0xe0>
                case 1: ui = UI_SEMI_AUTO; break;
 8002f00:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <menu_select+0x1d0>)
 8002f02:	2204      	movs	r2, #4
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e017      	b.n	8002f38 <menu_select+0xe0>
                case 2: ui = UI_TIMER; break;
 8002f08:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <menu_select+0x1d0>)
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e013      	b.n	8002f38 <menu_select+0xe0>
                case 3: ui = UI_SEARCH; break;
 8002f10:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <menu_select+0x1d0>)
 8002f12:	220a      	movs	r2, #10
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e00f      	b.n	8002f38 <menu_select+0xe0>
                case 4: ui = UI_COUNTDOWN; break;
 8002f18:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <menu_select+0x1d0>)
 8002f1a:	220d      	movs	r2, #13
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e00b      	b.n	8002f38 <menu_select+0xe0>
                case 5: ui = UI_TWIST; break;
 8002f20:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <menu_select+0x1d0>)
 8002f22:	220f      	movs	r2, #15
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e007      	b.n	8002f38 <menu_select+0xe0>
                case 6: ui = UI_DASH; break;
 8002f28:	4b3f      	ldr	r3, [pc, #252]	@ (8003028 <menu_select+0x1d0>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e003      	b.n	8002f38 <menu_select+0xe0>
                default: ui = UI_DASH; break;
 8002f30:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <menu_select+0x1d0>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	bf00      	nop
            }
            break;
 8002f38:	e070      	b.n	800301c <menu_select+0x1c4>

        case UI_MANUAL:
            if (Motor_GetStatus()) ModelHandle_SetMotor(false);
 8002f3a:	f7ff f81d 	bl	8001f78 <Motor_GetStatus>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <menu_select+0xf4>
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fe fdc1 	bl	8001acc <ModelHandle_SetMotor>
 8002f4a:	e002      	b.n	8002f52 <menu_select+0xfa>
            else ModelHandle_SetMotor(true);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fdbd 	bl	8001acc <ModelHandle_SetMotor>
            screenNeedsRefresh = true;
 8002f52:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <menu_select+0x1d8>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
            break;
 8002f58:	e060      	b.n	800301c <menu_select+0x1c4>

        case UI_SEMI_AUTO:
            semiAutoEnabled = !semiAutoEnabled;
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <menu_select+0x1dc>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <menu_select+0x1dc>)
 8002f76:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <menu_select+0x1d8>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
            break;
 8002f7e:	e04d      	b.n	800301c <menu_select+0x1c4>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <menu_select+0x1d0>)
 8002f82:	2206      	movs	r2, #6
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e049      	b.n	800301c <menu_select+0x1c4>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <menu_select+0x1d0>)
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e045      	b.n	800301c <menu_select+0x1c4>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <menu_select+0x1d0>)
 8002f92:	2208      	movs	r2, #8
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e041      	b.n	800301c <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8002f98:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <menu_select+0x1d0>)
 8002f9a:	2209      	movs	r2, #9
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e03d      	b.n	800301c <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_M: apply_timer_settings(); ui = UI_TIMER; break;
 8002fa0:	f7ff fc54 	bl	800284c <apply_timer_settings>
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <menu_select+0x1d0>)
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e037      	b.n	800301c <menu_select+0x1c4>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8002fac:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <menu_select+0x1d0>)
 8002fae:	220b      	movs	r2, #11
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e033      	b.n	800301c <menu_select+0x1c4>
        case UI_SEARCH_EDIT_GAP: apply_search_settings(); ui = UI_SEARCH_EDIT_DRY; break;
 8002fb4:	f7ff fc0e 	bl	80027d4 <apply_search_settings>
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <menu_select+0x1d0>)
 8002fba:	220c      	movs	r2, #12
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e02d      	b.n	800301c <menu_select+0x1c4>
        case UI_SEARCH_EDIT_DRY: apply_search_settings(); ui = UI_SEARCH; break;
 8002fc0:	f7ff fc08 	bl	80027d4 <apply_search_settings>
 8002fc4:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <menu_select+0x1d0>)
 8002fc6:	220a      	movs	r2, #10
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e027      	b.n	800301c <menu_select+0x1c4>

        case UI_COUNTDOWN:
            if (countdownActive) countdownActive = false;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <menu_select+0x1e0>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <menu_select+0x186>
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <menu_select+0x1e0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
            else ui = UI_COUNTDOWN_EDIT_MIN;
            break;
 8002fdc:	e01e      	b.n	800301c <menu_select+0x1c4>
            else ui = UI_COUNTDOWN_EDIT_MIN;
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <menu_select+0x1d0>)
 8002fe0:	220e      	movs	r2, #14
 8002fe2:	701a      	strb	r2, [r3, #0]
            break;
 8002fe4:	e01a      	b.n	800301c <menu_select+0x1c4>
        case UI_COUNTDOWN_EDIT_MIN: apply_countdown_settings(); countdownActive = true; ui = UI_COUNTDOWN; break;
 8002fe6:	f7ff fc1d 	bl	8002824 <apply_countdown_settings>
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <menu_select+0x1e0>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <menu_select+0x1d0>)
 8002ff2:	220d      	movs	r2, #13
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e011      	b.n	800301c <menu_select+0x1c4>

        case UI_TWIST: ui = UI_TWIST_EDIT_ON; break;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <menu_select+0x1d0>)
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e00d      	b.n	800301c <menu_select+0x1c4>
        case UI_TWIST_EDIT_ON: ui = UI_TWIST_EDIT_OFF; break;
 8003000:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <menu_select+0x1d0>)
 8003002:	2211      	movs	r2, #17
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e009      	b.n	800301c <menu_select+0x1c4>
        case UI_TWIST_EDIT_OFF: apply_twist_settings(); ui = UI_TWIST; break;
 8003008:	f7ff fbf8 	bl	80027fc <apply_twist_settings>
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <menu_select+0x1d0>)
 800300e:	220f      	movs	r2, #15
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e003      	b.n	800301c <menu_select+0x1c4>

        default: ui = UI_DASH; break;
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <menu_select+0x1d0>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	bf00      	nop
    }
    screenNeedsRefresh = true;
 800301c:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <menu_select+0x1d8>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200003c8 	.word	0x200003c8
 800302c:	200003d8 	.word	0x200003d8
 8003030:	200003c9 	.word	0x200003c9
 8003034:	200003d4 	.word	0x200003d4
 8003038:	20000355 	.word	0x20000355

0800303c <menu_reset>:

static void menu_reset(void){
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8003040:	f7ff f954 	bl	80022ec <refreshInactivityTimer>
    switch (ui){
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <menu_reset+0x88>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <menu_reset+0x7a>
 800304c:	2b00      	cmp	r3, #0
 800304e:	db2e      	blt.n	80030ae <menu_reset+0x72>
 8003050:	2b0f      	cmp	r3, #15
 8003052:	dc2c      	bgt.n	80030ae <menu_reset+0x72>
 8003054:	2b00      	cmp	r3, #0
 8003056:	dd2a      	ble.n	80030ae <menu_reset+0x72>
 8003058:	461a      	mov	r2, r3
 800305a:	2301      	movs	r3, #1
 800305c:	4093      	lsls	r3, r2
 800305e:	f24a 4238 	movw	r2, #42040	@ 0xa438
 8003062:	401a      	ands	r2, r3
 8003064:	2a00      	cmp	r2, #0
 8003066:	bf14      	ite	ne
 8003068:	2201      	movne	r2, #1
 800306a:	2200      	moveq	r2, #0
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	2a00      	cmp	r2, #0
 8003070:	d119      	bne.n	80030a6 <menu_reset+0x6a>
 8003072:	f003 0204 	and.w	r2, r3, #4
 8003076:	2a00      	cmp	r2, #0
 8003078:	bf14      	ite	ne
 800307a:	2201      	movne	r2, #1
 800307c:	2200      	moveq	r2, #0
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	2a00      	cmp	r2, #0
 8003082:	d10c      	bne.n	800309e <menu_reset+0x62>
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <menu_reset+0x72>
        case UI_WELCOME: break;
        case UI_DASH: ui = UI_WELCOME; break;
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <menu_reset+0x88>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e00c      	b.n	80030b8 <menu_reset+0x7c>
        case UI_MENU: ui = UI_DASH; break;
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <menu_reset+0x88>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e008      	b.n	80030b8 <menu_reset+0x7c>
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <menu_reset+0x88>)
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e004      	b.n	80030b8 <menu_reset+0x7c>
        default: ui = UI_MENU; break;
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <menu_reset+0x88>)
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e000      	b.n	80030b8 <menu_reset+0x7c>
        case UI_WELCOME: break;
 80030b6:	bf00      	nop
    }
    screenNeedsRefresh = true;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <menu_reset+0x8c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200003c8 	.word	0x200003c8
 80030c8:	200003c9 	.word	0x200003c9

080030cc <Screen_HandleButton>:

/* Public button handler */
void Screen_HandleButton(UiButton b){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){ menu_reset(); return; }
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <Screen_HandleButton+0x16>
 80030dc:	f7ff ffae 	bl	800303c <menu_reset>
 80030e0:	e011      	b.n	8003106 <Screen_HandleButton+0x3a>
    if (b == BTN_UP) { menu_move_up(); return; }
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d102      	bne.n	80030ee <Screen_HandleButton+0x22>
 80030e8:	f7ff fd02 	bl	8002af0 <menu_move_up>
 80030ec:	e00b      	b.n	8003106 <Screen_HandleButton+0x3a>
    if (b == BTN_DOWN) { menu_move_down(); return; }
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d102      	bne.n	80030fa <Screen_HandleButton+0x2e>
 80030f4:	f7ff fdd8 	bl	8002ca8 <menu_move_down>
 80030f8:	e005      	b.n	8003106 <Screen_HandleButton+0x3a>
    if (b == BTN_SELECT) { menu_select(); return; }
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d102      	bne.n	8003106 <Screen_HandleButton+0x3a>
 8003100:	f7ff feaa 	bl	8002e58 <menu_select>
 8003104:	bf00      	nop
}
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <Screen_HandleSwitches>:

/* Switch polling */
void Screen_HandleSwitches(void){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
        {SWITCH3_GPIO_Port, SWITCH3_Pin, BTN_UP},
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN}
    };
    static bool prev[4] = {true,true,true,true};

    for (int i=0; i<4; i++){
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e037      	b.n	8003188 <Screen_HandleSwitches+0x7c>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8003118:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <Screen_HandleSwitches+0x8c>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003120:	491d      	ldr	r1, [pc, #116]	@ (8003198 <Screen_HandleSwitches+0x8c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	889b      	ldrh	r3, [r3, #4]
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f001 fae7 	bl	8004700 <HAL_GPIO_ReadPin>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	70fb      	strb	r3, [r7, #3]
        if (pressed && prev[i]) {
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <Screen_HandleSwitches+0x60>
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <Screen_HandleSwitches+0x90>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <Screen_HandleSwitches+0x60>
            prev[i] = false;
 8003150:	4a12      	ldr	r2, [pc, #72]	@ (800319c <Screen_HandleSwitches+0x90>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
            Screen_HandleButton(switchMap[i].btn);
 800315a:	4a0f      	ldr	r2, [pc, #60]	@ (8003198 <Screen_HandleSwitches+0x8c>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffb1 	bl	80030cc <Screen_HandleButton>
 800316a:	e00a      	b.n	8003182 <Screen_HandleSwitches+0x76>
        } else if (!pressed) prev[i] = true;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <Screen_HandleSwitches+0x76>
 8003178:	4a08      	ldr	r2, [pc, #32]	@ (800319c <Screen_HandleSwitches+0x90>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; i++){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3301      	adds	r3, #1
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b03      	cmp	r3, #3
 800318c:	ddc4      	ble.n	8003118 <Screen_HandleSwitches+0xc>
    }
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	08007f5c 	.word	0x08007f5c
 800319c:	20000058 	.word	0x20000058

080031a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_MspInit+0x5c>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	4a14      	ldr	r2, [pc, #80]	@ (80031fc <HAL_MspInit+0x5c>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6193      	str	r3, [r2, #24]
 80031b2:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <HAL_MspInit+0x5c>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <HAL_MspInit+0x5c>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a0e      	ldr	r2, [pc, #56]	@ (80031fc <HAL_MspInit+0x5c>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <HAL_MspInit+0x5c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <HAL_MspInit+0x60>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	4a04      	ldr	r2, [pc, #16]	@ (8003200 <HAL_MspInit+0x60>)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010000 	.word	0x40010000

08003204 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <HAL_ADC_MspInit+0x6c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d121      	bne.n	8003268 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6193      	str	r3, [r2, #24]
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_ADC_MspInit+0x70>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003254:	233f      	movs	r3, #63	@ 0x3f
 8003256:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003258:	2303      	movs	r3, #3
 800325a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	4619      	mov	r1, r3
 8003262:	4805      	ldr	r0, [pc, #20]	@ (8003278 <HAL_ADC_MspInit+0x74>)
 8003264:	f001 f8c8 	bl	80043f8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003268:	bf00      	nop
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012400 	.word	0x40012400
 8003274:	40021000 	.word	0x40021000
 8003278:	40010800 	.word	0x40010800

0800327c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_I2C_MspInit+0x74>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d124      	bne.n	80032e6 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ba:	2312      	movs	r3, #18
 80032bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	4619      	mov	r1, r3
 80032c8:	480b      	ldr	r0, [pc, #44]	@ (80032f8 <HAL_I2C_MspInit+0x7c>)
 80032ca:	f001 f895 	bl	80043f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_I2C_MspInit+0x78>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80032e6:	bf00      	nop
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40005800 	.word	0x40005800
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010c00 	.word	0x40010c00

080032fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	@ 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_SPI_MspInit+0xa4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d13d      	bne.n	8003398 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800331c:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a20      	ldr	r2, [pc, #128]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 8003322:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <HAL_SPI_MspInit+0xa8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800334c:	2328      	movs	r3, #40	@ 0x28
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4812      	ldr	r0, [pc, #72]	@ (80033a8 <HAL_SPI_MspInit+0xac>)
 8003360:	f001 f84a 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003364:	2310      	movs	r3, #16
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480c      	ldr	r0, [pc, #48]	@ (80033a8 <HAL_SPI_MspInit+0xac>)
 8003378:	f001 f83e 	bl	80043f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_SPI_MspInit+0xb0>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
 8003392:	4a06      	ldr	r2, [pc, #24]	@ (80033ac <HAL_SPI_MspInit+0xb0>)
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003398:	bf00      	nop
 800339a:	3728      	adds	r7, #40	@ 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40013000 	.word	0x40013000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40010c00 	.word	0x40010c00
 80033ac:	40010000 	.word	0x40010000

080033b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_UART_MspInit+0x8c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d131      	bne.n	8003434 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033da:	6193      	str	r3, [r2, #24]
 80033dc:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b12      	ldr	r3, [pc, #72]	@ (8003440 <HAL_UART_MspInit+0x90>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4619      	mov	r1, r3
 8003414:	480b      	ldr	r0, [pc, #44]	@ (8003444 <HAL_UART_MspInit+0x94>)
 8003416:	f000 ffef 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800341a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800341e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	4619      	mov	r1, r3
 800342e:	4805      	ldr	r0, [pc, #20]	@ (8003444 <HAL_UART_MspInit+0x94>)
 8003430:	f000 ffe2 	bl	80043f8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003434:	bf00      	nop
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40013800 	.word	0x40013800
 8003440:	40021000 	.word	0x40021000
 8003444:	40010800 	.word	0x40010800

08003448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <NMI_Handler+0x4>

08003450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <HardFault_Handler+0x4>

08003458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <MemManage_Handler+0x4>

08003460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <UsageFault_Handler+0x4>

08003470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003498:	f000 f984 	bl	80037a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}

080034a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTC_Alarm_IRQn 0 */
//  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	f000 f98a 	bl	80037c8 <HAL_GetTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <Switches_Init+0x94>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <Switches_Init+0x94>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6193      	str	r3, [r2, #24]
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <Switches_Init+0x94>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80034ee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80034f2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4816      	ldr	r0, [pc, #88]	@ (8003554 <Switches_Init+0x98>)
 80034fa:	f000 ff7d 	bl	80043f8 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e01d      	b.n	8003540 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <Switches_Init+0x9c>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4413      	add	r3, r2
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800350e:	4a13      	ldr	r2, [pc, #76]	@ (800355c <Switches_Init+0xa0>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	4413      	add	r3, r2
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8003518:	f7ff ffc8 	bl	80034ac <now_ms>
 800351c:	4602      	mov	r2, r0
 800351e:	4910      	ldr	r1, [pc, #64]	@ (8003560 <Switches_Init+0xa4>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8003526:	4a0f      	ldr	r2, [pc, #60]	@ (8003564 <Switches_Init+0xa8>)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2100      	movs	r1, #0
 800352c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <Switches_Init+0xac>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4413      	add	r3, r2
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b03      	cmp	r3, #3
 8003544:	ddde      	ble.n	8003504 <Switches_Init+0x48>
    }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	40010c00 	.word	0x40010c00
 8003558:	200003e0 	.word	0x200003e0
 800355c:	200003f4 	.word	0x200003f4
 8003560:	200003e4 	.word	0x200003e4
 8003564:	200003f8 	.word	0x200003f8
 8003568:	20000408 	.word	0x20000408

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f003 fede 	bl	800735c <__errno>
 80035a0:	4603      	mov	r3, r0
 80035a2:	220c      	movs	r2, #12
 80035a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20005000 	.word	0x20005000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	2000040c 	.word	0x2000040c
 80035d4:	200005a8 	.word	0x200005a8

080035d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 80035e8:	2240      	movs	r2, #64	@ 0x40
 80035ea:	2100      	movs	r1, #0
 80035ec:	4807      	ldr	r0, [pc, #28]	@ (800360c <UART_Init+0x28>)
 80035ee:	f003 fe99 	bl	8007324 <memset>
    rxIndex = 0;
 80035f2:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <UART_Init+0x2c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <UART_Init+0x30>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80035fe:	2201      	movs	r2, #1
 8003600:	4905      	ldr	r1, [pc, #20]	@ (8003618 <UART_Init+0x34>)
 8003602:	4806      	ldr	r0, [pc, #24]	@ (800361c <UART_Init+0x38>)
 8003604:	f003 fcb0 	bl	8006f68 <HAL_UART_Receive_IT>
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000414 	.word	0x20000414
 8003610:	20000454 	.word	0x20000454
 8003614:	20000456 	.word	0x20000456
 8003618:	20000410 	.word	0x20000410
 800361c:	2000023c 	.word	0x2000023c

08003620 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800362a:	6838      	ldr	r0, [r7, #0]
 800362c:	f7fc fd98 	bl	8000160 <strlen>
 8003630:	4603      	mov	r3, r0
 8003632:	b29a      	uxth	r2, r3
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f003 fc09 	bl	8006e52 <HAL_UART_Transmit>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8003652:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <UART_GetReceivedPacket+0x78>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02c      	beq.n	80036b4 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800365a:	481a      	ldr	r0, [pc, #104]	@ (80036c4 <UART_GetReceivedPacket+0x7c>)
 800365c:	f7fc fd80 	bl	8000160 <strlen>
 8003660:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d219      	bcs.n	800369e <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	461a      	mov	r2, r3
 8003670:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <UART_GetReceivedPacket+0x7c>)
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f003 fe5e 	bl	8007334 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003684:	2240      	movs	r2, #64	@ 0x40
 8003686:	2100      	movs	r1, #0
 8003688:	480e      	ldr	r0, [pc, #56]	@ (80036c4 <UART_GetReceivedPacket+0x7c>)
 800368a:	f003 fe4b 	bl	8007324 <memset>
            rxIndex = 0;
 800368e:	4b0e      	ldr	r3, [pc, #56]	@ (80036c8 <UART_GetReceivedPacket+0x80>)
 8003690:	2200      	movs	r2, #0
 8003692:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <UART_GetReceivedPacket+0x78>)
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
            return true;
 800369a:	2301      	movs	r3, #1
 800369c:	e00b      	b.n	80036b6 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	2100      	movs	r1, #0
 80036a2:	4808      	ldr	r0, [pc, #32]	@ (80036c4 <UART_GetReceivedPacket+0x7c>)
 80036a4:	f003 fe3e 	bl	8007324 <memset>
            rxIndex = 0;
 80036a8:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <UART_GetReceivedPacket+0x80>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80036ae:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <UART_GetReceivedPacket+0x78>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000456 	.word	0x20000456
 80036c4:	20000414 	.word	0x20000414
 80036c8:	20000454 	.word	0x20000454

080036cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036cc:	f7ff ff84 	bl	80035d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d0:	480b      	ldr	r0, [pc, #44]	@ (8003700 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036d2:	490c      	ldr	r1, [pc, #48]	@ (8003704 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003708 <LoopFillZerobss+0x16>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a09      	ldr	r2, [pc, #36]	@ (800370c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036e8:	4c09      	ldr	r4, [pc, #36]	@ (8003710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036f6:	f003 fe37 	bl	8007368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036fa:	f7fd ff41 	bl	8001580 <main>
  bx lr
 80036fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003704:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8003708:	08008000 	.word	0x08008000
  ldr r2, =_sbss
 800370c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8003710:	200005a4 	.word	0x200005a4

08003714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC1_2_IRQHandler>
	...

08003718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <HAL_Init+0x28>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <HAL_Init+0x28>)
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003728:	2003      	movs	r0, #3
 800372a:	f000 fe31 	bl	8004390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800372e:	2000      	movs	r0, #0
 8003730:	f000 f808 	bl	8003744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003734:	f7ff fd34 	bl	80031a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000

08003744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_InitTick+0x54>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_InitTick+0x58>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4619      	mov	r1, r3
 8003756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800375a:	fbb3 f3f1 	udiv	r3, r3, r1
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fe3b 	bl	80043de <HAL_SYSTICK_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e00e      	b.n	8003790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b0f      	cmp	r3, #15
 8003776:	d80a      	bhi.n	800378e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003778:	2200      	movs	r2, #0
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	f000 fe11 	bl	80043a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003784:	4a06      	ldr	r2, [pc, #24]	@ (80037a0 <HAL_InitTick+0x5c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	2000005c 	.word	0x2000005c
 800379c:	20000064 	.word	0x20000064
 80037a0:	20000060 	.word	0x20000060

080037a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_IncTick+0x1c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_IncTick+0x20>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	4a03      	ldr	r2, [pc, #12]	@ (80037c4 <HAL_IncTick+0x20>)
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000064 	.word	0x20000064
 80037c4:	20000458 	.word	0x20000458

080037c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return uwTick;
 80037cc:	4b02      	ldr	r3, [pc, #8]	@ (80037d8 <HAL_GetTick+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000458 	.word	0x20000458

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003802:	bf00      	nop
 8003804:	f7ff ffe0 	bl	80037c8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000064 	.word	0x20000064

08003824 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0be      	b.n	80039c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fcce 	bl	8003204 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fbf1 	bl	8004050 <ADC_ConversionStop_Disable>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8099 	bne.w	80039b2 <HAL_ADC_Init+0x18e>
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8095 	bne.w	80039b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003890:	f023 0302 	bic.w	r3, r3, #2
 8003894:	f043 0202 	orr.w	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7b1b      	ldrb	r3, [r3, #12]
 80038aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038bc:	d003      	beq.n	80038c6 <HAL_ADC_Init+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_ADC_Init+0xa8>
 80038c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ca:	e000      	b.n	80038ce <HAL_ADC_Init+0xaa>
 80038cc:	2300      	movs	r3, #0
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7d1b      	ldrb	r3, [r3, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d119      	bne.n	8003910 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7b1b      	ldrb	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	035a      	lsls	r2, r3, #13
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e00b      	b.n	8003910 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_ADC_Init+0x1a8>)
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003940:	d003      	beq.n	800394a <HAL_ADC_Init+0x126>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d104      	bne.n	8003954 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	3b01      	subs	r3, #1
 8003950:	051b      	lsls	r3, r3, #20
 8003952:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	430a      	orrs	r2, r1
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <HAL_ADC_Init+0x1ac>)
 8003970:	4013      	ands	r3, r2
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800398e:	e018      	b.n	80039c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	f023 0312 	bic.w	r3, r3, #18
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039b0:	e007      	b.n	80039c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	ffe1f7fd 	.word	0xffe1f7fd
 80039d0:	ff1f0efe 	.word	0xff1f0efe

080039d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Start+0x1a>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e098      	b.n	8003b20 <HAL_ADC_Start+0x14c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fad0 	bl	8003f9c <ADC_Enable>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8087 	bne.w	8003b16 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a41      	ldr	r2, [pc, #260]	@ (8003b28 <HAL_ADC_Start+0x154>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d105      	bne.n	8003a32 <HAL_ADC_Start+0x5e>
 8003a26:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_ADC_Start+0x158>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d115      	bne.n	8003a5e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d026      	beq.n	8003a9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a5c:	e01d      	b.n	8003a9a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b2c <HAL_ADC_Start+0x158>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_ADC_Start+0xaa>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_ADC_Start+0x154>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <HAL_ADC_Start+0xc6>
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_ADC_Start+0x158>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	f023 0206 	bic.w	r2, r3, #6
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ab2:	e002      	b.n	8003aba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0202 	mvn.w	r2, #2
 8003aca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003ad6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ada:	d113      	bne.n	8003b04 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <HAL_ADC_Start+0x154>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d105      	bne.n	8003af2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_ADC_Start+0x158>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d108      	bne.n	8003b04 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	e00c      	b.n	8003b1e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e003      	b.n	8003b1e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40012800 	.word	0x40012800
 8003b2c:	40012400 	.word	0x40012400

08003b30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_Stop+0x1a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e01a      	b.n	8003b80 <HAL_ADC_Stop+0x50>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa7c 	bl	8004050 <ADC_ConversionStop_Disable>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b9e:	f7ff fe13 	bl	80037c8 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0d3      	b.n	8003d72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d131      	bne.n	8003c3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12a      	bne.n	8003c3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003be6:	e021      	b.n	8003c2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d01d      	beq.n	8003c2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_ADC_PollForConversion+0x7e>
 8003bf6:	f7ff fde7 	bl	80037c8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d212      	bcs.n	8003c2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	f043 0204 	orr.w	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0a2      	b.n	8003d72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0d6      	beq.n	8003be8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003c3a:	e070      	b.n	8003d1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d7c <HAL_ADC_PollForConversion+0x1f4>)
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	2002      	movs	r0, #2
 8003c42:	f002 fd7f 	bl	8006744 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c46:	4603      	mov	r3, r0
 8003c48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	4b4b      	ldr	r3, [pc, #300]	@ (8003d80 <HAL_ADC_PollForConversion+0x1f8>)
 8003c54:	400b      	ands	r3, r1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_ADC_PollForConversion+0x104>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68d9      	ldr	r1, [r3, #12]
 8003c60:	4b48      	ldr	r3, [pc, #288]	@ (8003d84 <HAL_ADC_PollForConversion+0x1fc>)
 8003c62:	400b      	ands	r3, r1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d111      	bne.n	8003c8c <HAL_ADC_PollForConversion+0x104>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6919      	ldr	r1, [r3, #16]
 8003c6e:	4b46      	ldr	r3, [pc, #280]	@ (8003d88 <HAL_ADC_PollForConversion+0x200>)
 8003c70:	400b      	ands	r3, r1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_ADC_PollForConversion+0x100>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68d9      	ldr	r1, [r3, #12]
 8003c7c:	4b43      	ldr	r3, [pc, #268]	@ (8003d8c <HAL_ADC_PollForConversion+0x204>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_PollForConversion+0x100>
 8003c84:	2314      	movs	r3, #20
 8003c86:	e020      	b.n	8003cca <HAL_ADC_PollForConversion+0x142>
 8003c88:	2329      	movs	r3, #41	@ 0x29
 8003c8a:	e01e      	b.n	8003cca <HAL_ADC_PollForConversion+0x142>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6919      	ldr	r1, [r3, #16]
 8003c92:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <HAL_ADC_PollForConversion+0x200>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_ADC_PollForConversion+0x120>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8003d8c <HAL_ADC_PollForConversion+0x204>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_ADC_PollForConversion+0x13c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6919      	ldr	r1, [r3, #16]
 8003cae:	4b38      	ldr	r3, [pc, #224]	@ (8003d90 <HAL_ADC_PollForConversion+0x208>)
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_ADC_PollForConversion+0x140>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68d9      	ldr	r1, [r3, #12]
 8003cbc:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_ADC_PollForConversion+0x208>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_PollForConversion+0x140>
 8003cc4:	2354      	movs	r3, #84	@ 0x54
 8003cc6:	e000      	b.n	8003cca <HAL_ADC_PollForConversion+0x142>
 8003cc8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003cd0:	e021      	b.n	8003d16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d01a      	beq.n	8003d10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_ADC_PollForConversion+0x168>
 8003ce0:	f7ff fd72 	bl	80037c8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d20f      	bcs.n	8003d10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d90b      	bls.n	8003d10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e030      	b.n	8003d72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d8d9      	bhi.n	8003cd2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0212 	mvn.w	r2, #18
 8003d26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003d3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003d42:	d115      	bne.n	8003d70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000005c 	.word	0x2000005c
 8003d80:	24924924 	.word	0x24924924
 8003d84:	00924924 	.word	0x00924924
 8003d88:	12492492 	.word	0x12492492
 8003d8c:	00492492 	.word	0x00492492
 8003d90:	00249249 	.word	0x00249249

08003d94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x20>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0dc      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x1da>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d81c      	bhi.n	8003e16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	3b05      	subs	r3, #5
 8003dee:	221f      	movs	r2, #31
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	4019      	ands	r1, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	3b05      	subs	r3, #5
 8003e08:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e14:	e03c      	b.n	8003e90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d81c      	bhi.n	8003e58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3b23      	subs	r3, #35	@ 0x23
 8003e30:	221f      	movs	r2, #31
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	4019      	ands	r1, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	3b23      	subs	r3, #35	@ 0x23
 8003e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e56:	e01b      	b.n	8003e90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	3b41      	subs	r3, #65	@ 0x41
 8003e6a:	221f      	movs	r2, #31
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	4019      	ands	r1, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	3b41      	subs	r3, #65	@ 0x41
 8003e84:	fa00 f203 	lsl.w	r2, r0, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d91c      	bls.n	8003ed2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68d9      	ldr	r1, [r3, #12]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3b1e      	subs	r3, #30
 8003eaa:	2207      	movs	r2, #7
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	4019      	ands	r1, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6898      	ldr	r0, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b1e      	subs	r3, #30
 8003ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e019      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4019      	ands	r1, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6898      	ldr	r0, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	fa00 f203 	lsl.w	r2, r0, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d003      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f12:	2b11      	cmp	r3, #17
 8003f14:	d132      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d125      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d126      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003f3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d11a      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f46:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <HAL_ADC_ConfigChannel+0x1e8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <HAL_ADC_ConfigChannel+0x1ec>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	0c9a      	lsrs	r2, r3, #18
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f5c:	e002      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f9      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x1b2>
 8003f6a:	e007      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40012400 	.word	0x40012400
 8003f94:	2000005c 	.word	0x2000005c
 8003f98:	431bde83 	.word	0x431bde83

08003f9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d040      	beq.n	800403c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <ADC_Enable+0xac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <ADC_Enable+0xb0>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	0c9b      	lsrs	r3, r3, #18
 8003fd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fd8:	e002      	b.n	8003fe0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f9      	bne.n	8003fda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fe6:	f7ff fbef 	bl	80037c8 <HAL_GetTick>
 8003fea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fec:	e01f      	b.n	800402e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fee:	f7ff fbeb 	bl	80037c8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d918      	bls.n	800402e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d011      	beq.n	800402e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	f043 0210 	orr.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e007      	b.n	800403e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d1d8      	bne.n	8003fee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000005c 	.word	0x2000005c
 800404c:	431bde83 	.word	0x431bde83

08004050 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d12e      	bne.n	80040c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800407a:	f7ff fba5 	bl	80037c8 <HAL_GetTick>
 800407e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004080:	e01b      	b.n	80040ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004082:	f7ff fba1 	bl	80037c8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d914      	bls.n	80040ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	f043 0210 	orr.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e007      	b.n	80040ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d0dc      	beq.n	8004082 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e097      	b.n	8004222 <HAL_ADCEx_Calibration_Start+0x14e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffa8 	bl	8004050 <ADC_ConversionStop_Disable>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff49 	bl	8003f9c <ADC_Enable>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8081 	bne.w	8004218 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800411e:	f023 0302 	bic.w	r3, r3, #2
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <HAL_ADCEx_Calibration_Start+0x158>)
 800412c:	681c      	ldr	r4, [r3, #0]
 800412e:	2002      	movs	r0, #2
 8004130:	f002 fb08 	bl	8006744 <HAL_RCCEx_GetPeriphCLKFreq>
 8004134:	4603      	mov	r3, r0
 8004136:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800413a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800413c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800413e:	e002      	b.n	8004146 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f9      	bne.n	8004140 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800415c:	f7ff fb34 	bl	80037c8 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004162:	e01b      	b.n	800419c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004164:	f7ff fb30 	bl	80037c8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b0a      	cmp	r3, #10
 8004170:	d914      	bls.n	800419c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	f023 0312 	bic.w	r3, r3, #18
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e042      	b.n	8004222 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1dc      	bne.n	8004164 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0204 	orr.w	r2, r2, #4
 80041b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80041ba:	f7ff fb05 	bl	80037c8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80041c0:	e01b      	b.n	80041fa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80041c2:	f7ff fb01 	bl	80037c8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	d914      	bls.n	80041fa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	f023 0312 	bic.w	r3, r3, #18
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e013      	b.n	8004222 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1dc      	bne.n	80041c2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
}
 8004222:	4618      	mov	r0, r3
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bd90      	pop	{r4, r7, pc}
 800422a:	bf00      	nop
 800422c:	2000005c 	.word	0x2000005c

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	6039      	str	r1, [r7, #0]
 800429e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	db0a      	blt.n	80042be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	490c      	ldr	r1, [pc, #48]	@ (80042e0 <__NVIC_SetPriority+0x4c>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	440b      	add	r3, r1
 80042b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042bc:	e00a      	b.n	80042d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4908      	ldr	r1, [pc, #32]	@ (80042e4 <__NVIC_SetPriority+0x50>)
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	3b04      	subs	r3, #4
 80042cc:	0112      	lsls	r2, r2, #4
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	440b      	add	r3, r1
 80042d2:	761a      	strb	r2, [r3, #24]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e100 	.word	0xe000e100
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	@ 0x24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f1c3 0307 	rsb	r3, r3, #7
 8004302:	2b04      	cmp	r3, #4
 8004304:	bf28      	it	cs
 8004306:	2304      	movcs	r3, #4
 8004308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3304      	adds	r3, #4
 800430e:	2b06      	cmp	r3, #6
 8004310:	d902      	bls.n	8004318 <NVIC_EncodePriority+0x30>
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3b03      	subs	r3, #3
 8004316:	e000      	b.n	800431a <NVIC_EncodePriority+0x32>
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	401a      	ands	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004330:	f04f 31ff 	mov.w	r1, #4294967295
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	43d9      	mvns	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004340:	4313      	orrs	r3, r2
         );
}
 8004342:	4618      	mov	r0, r3
 8004344:	3724      	adds	r7, #36	@ 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800435c:	d301      	bcc.n	8004362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435e:	2301      	movs	r3, #1
 8004360:	e00f      	b.n	8004382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004362:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <SysTick_Config+0x40>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800436a:	210f      	movs	r1, #15
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	f7ff ff90 	bl	8004294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <SysTick_Config+0x40>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <SysTick_Config+0x40>)
 800437c:	2207      	movs	r2, #7
 800437e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	e000e010 	.word	0xe000e010

08004390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff49 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b8:	f7ff ff5e 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7ff ff90 	bl	80042e8 <NVIC_EncodePriority>
 80043c8:	4602      	mov	r2, r0
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff5f 	bl	8004294 <__NVIC_SetPriority>
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ffb0 	bl	800434c <SysTick_Config>
 80043ec:	4603      	mov	r3, r0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b08b      	sub	sp, #44	@ 0x2c
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440a:	e169      	b.n	80046e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800440c:	2201      	movs	r2, #1
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	429a      	cmp	r2, r3
 8004426:	f040 8158 	bne.w	80046da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4a9a      	ldr	r2, [pc, #616]	@ (8004698 <HAL_GPIO_Init+0x2a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d05e      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
 8004434:	4a98      	ldr	r2, [pc, #608]	@ (8004698 <HAL_GPIO_Init+0x2a0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d875      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 800443a:	4a98      	ldr	r2, [pc, #608]	@ (800469c <HAL_GPIO_Init+0x2a4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d058      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
 8004440:	4a96      	ldr	r2, [pc, #600]	@ (800469c <HAL_GPIO_Init+0x2a4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d86f      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 8004446:	4a96      	ldr	r2, [pc, #600]	@ (80046a0 <HAL_GPIO_Init+0x2a8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d052      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
 800444c:	4a94      	ldr	r2, [pc, #592]	@ (80046a0 <HAL_GPIO_Init+0x2a8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d869      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 8004452:	4a94      	ldr	r2, [pc, #592]	@ (80046a4 <HAL_GPIO_Init+0x2ac>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04c      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
 8004458:	4a92      	ldr	r2, [pc, #584]	@ (80046a4 <HAL_GPIO_Init+0x2ac>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d863      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 800445e:	4a92      	ldr	r2, [pc, #584]	@ (80046a8 <HAL_GPIO_Init+0x2b0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d046      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
 8004464:	4a90      	ldr	r2, [pc, #576]	@ (80046a8 <HAL_GPIO_Init+0x2b0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d85d      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 800446a:	2b12      	cmp	r3, #18
 800446c:	d82a      	bhi.n	80044c4 <HAL_GPIO_Init+0xcc>
 800446e:	2b12      	cmp	r3, #18
 8004470:	d859      	bhi.n	8004526 <HAL_GPIO_Init+0x12e>
 8004472:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <HAL_GPIO_Init+0x80>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	080044f3 	.word	0x080044f3
 800447c:	080044cd 	.word	0x080044cd
 8004480:	080044df 	.word	0x080044df
 8004484:	08004521 	.word	0x08004521
 8004488:	08004527 	.word	0x08004527
 800448c:	08004527 	.word	0x08004527
 8004490:	08004527 	.word	0x08004527
 8004494:	08004527 	.word	0x08004527
 8004498:	08004527 	.word	0x08004527
 800449c:	08004527 	.word	0x08004527
 80044a0:	08004527 	.word	0x08004527
 80044a4:	08004527 	.word	0x08004527
 80044a8:	08004527 	.word	0x08004527
 80044ac:	08004527 	.word	0x08004527
 80044b0:	08004527 	.word	0x08004527
 80044b4:	08004527 	.word	0x08004527
 80044b8:	08004527 	.word	0x08004527
 80044bc:	080044d5 	.word	0x080044d5
 80044c0:	080044e9 	.word	0x080044e9
 80044c4:	4a79      	ldr	r2, [pc, #484]	@ (80046ac <HAL_GPIO_Init+0x2b4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ca:	e02c      	b.n	8004526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	623b      	str	r3, [r7, #32]
          break;
 80044d2:	e029      	b.n	8004528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	3304      	adds	r3, #4
 80044da:	623b      	str	r3, [r7, #32]
          break;
 80044dc:	e024      	b.n	8004528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	3308      	adds	r3, #8
 80044e4:	623b      	str	r3, [r7, #32]
          break;
 80044e6:	e01f      	b.n	8004528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	330c      	adds	r3, #12
 80044ee:	623b      	str	r3, [r7, #32]
          break;
 80044f0:	e01a      	b.n	8004528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044fa:	2304      	movs	r3, #4
 80044fc:	623b      	str	r3, [r7, #32]
          break;
 80044fe:	e013      	b.n	8004528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004508:	2308      	movs	r3, #8
 800450a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	611a      	str	r2, [r3, #16]
          break;
 8004512:	e009      	b.n	8004528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004514:	2308      	movs	r3, #8
 8004516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	615a      	str	r2, [r3, #20]
          break;
 800451e:	e003      	b.n	8004528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
          break;
 8004524:	e000      	b.n	8004528 <HAL_GPIO_Init+0x130>
          break;
 8004526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2bff      	cmp	r3, #255	@ 0xff
 800452c:	d801      	bhi.n	8004532 <HAL_GPIO_Init+0x13a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_Init+0x13e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2bff      	cmp	r3, #255	@ 0xff
 800453c:	d802      	bhi.n	8004544 <HAL_GPIO_Init+0x14c>
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	e002      	b.n	800454a <HAL_GPIO_Init+0x152>
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	3b08      	subs	r3, #8
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	210f      	movs	r1, #15
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	6a39      	ldr	r1, [r7, #32]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	431a      	orrs	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80b1 	beq.w	80046da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004578:	4b4d      	ldr	r3, [pc, #308]	@ (80046b0 <HAL_GPIO_Init+0x2b8>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4a4c      	ldr	r2, [pc, #304]	@ (80046b0 <HAL_GPIO_Init+0x2b8>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	4b4a      	ldr	r3, [pc, #296]	@ (80046b0 <HAL_GPIO_Init+0x2b8>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004590:	4a48      	ldr	r2, [pc, #288]	@ (80046b4 <HAL_GPIO_Init+0x2bc>)
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	3302      	adds	r3, #2
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	220f      	movs	r2, #15
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a40      	ldr	r2, [pc, #256]	@ (80046b8 <HAL_GPIO_Init+0x2c0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_GPIO_Init+0x1ec>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <HAL_GPIO_Init+0x2c4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00d      	beq.n	80045e0 <HAL_GPIO_Init+0x1e8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	@ (80046c0 <HAL_GPIO_Init+0x2c8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <HAL_GPIO_Init+0x1e4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	@ (80046c4 <HAL_GPIO_Init+0x2cc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_GPIO_Init+0x1e0>
 80045d4:	2303      	movs	r3, #3
 80045d6:	e006      	b.n	80045e6 <HAL_GPIO_Init+0x1ee>
 80045d8:	2304      	movs	r3, #4
 80045da:	e004      	b.n	80045e6 <HAL_GPIO_Init+0x1ee>
 80045dc:	2302      	movs	r3, #2
 80045de:	e002      	b.n	80045e6 <HAL_GPIO_Init+0x1ee>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_GPIO_Init+0x1ee>
 80045e4:	2300      	movs	r3, #0
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	f002 0203 	and.w	r2, r2, #3
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	4093      	lsls	r3, r2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045f6:	492f      	ldr	r1, [pc, #188]	@ (80046b4 <HAL_GPIO_Init+0x2bc>)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004610:	4b2d      	ldr	r3, [pc, #180]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	492c      	ldr	r1, [pc, #176]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]
 800461c:	e006      	b.n	800462c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800461e:	4b2a      	ldr	r3, [pc, #168]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	43db      	mvns	r3, r3
 8004626:	4928      	ldr	r1, [pc, #160]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004628:	4013      	ands	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004638:	4b23      	ldr	r3, [pc, #140]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4922      	ldr	r1, [pc, #136]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	e006      	b.n	8004654 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004646:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	43db      	mvns	r3, r3
 800464e:	491e      	ldr	r1, [pc, #120]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004650:	4013      	ands	r3, r2
 8004652:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004660:	4b19      	ldr	r3, [pc, #100]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4918      	ldr	r1, [pc, #96]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466e:	4b16      	ldr	r3, [pc, #88]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	43db      	mvns	r3, r3
 8004676:	4914      	ldr	r1, [pc, #80]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 8004678:	4013      	ands	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d021      	beq.n	80046cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004688:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	490e      	ldr	r1, [pc, #56]	@ (80046c8 <HAL_GPIO_Init+0x2d0>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
 8004694:	e021      	b.n	80046da <HAL_GPIO_Init+0x2e2>
 8004696:	bf00      	nop
 8004698:	10320000 	.word	0x10320000
 800469c:	10310000 	.word	0x10310000
 80046a0:	10220000 	.word	0x10220000
 80046a4:	10210000 	.word	0x10210000
 80046a8:	10120000 	.word	0x10120000
 80046ac:	10110000 	.word	0x10110000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40010800 	.word	0x40010800
 80046bc:	40010c00 	.word	0x40010c00
 80046c0:	40011000 	.word	0x40011000
 80046c4:	40011400 	.word	0x40011400
 80046c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_GPIO_Init+0x304>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	4909      	ldr	r1, [pc, #36]	@ (80046fc <HAL_GPIO_Init+0x304>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	3301      	adds	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47f ae8e 	bne.w	800440c <HAL_GPIO_Init+0x14>
  }
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	372c      	adds	r7, #44	@ 0x2c
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40010400 	.word	0x40010400

08004700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
 800471c:	e001      	b.n	8004722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	807b      	strh	r3, [r7, #2]
 800473a:	4613      	mov	r3, r2
 800473c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800473e:	787b      	ldrb	r3, [r7, #1]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004744:	887a      	ldrh	r2, [r7, #2]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800474a:	e003      	b.n	8004754 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	041a      	lsls	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	041a      	lsls	r2, r3, #16
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	43d9      	mvns	r1, r3
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	400b      	ands	r3, r1
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e12b      	b.n	80049fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe fd60 	bl	800327c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047f4:	f001 feaa 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 80047f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a81      	ldr	r2, [pc, #516]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d807      	bhi.n	8004814 <HAL_I2C_Init+0x84>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a80      	ldr	r2, [pc, #512]	@ (8004a08 <HAL_I2C_Init+0x278>)
 8004808:	4293      	cmp	r3, r2
 800480a:	bf94      	ite	ls
 800480c:	2301      	movls	r3, #1
 800480e:	2300      	movhi	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e006      	b.n	8004822 <HAL_I2C_Init+0x92>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a7d      	ldr	r2, [pc, #500]	@ (8004a0c <HAL_I2C_Init+0x27c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	bf94      	ite	ls
 800481c:	2301      	movls	r3, #1
 800481e:	2300      	movhi	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0e7      	b.n	80049fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a78      	ldr	r2, [pc, #480]	@ (8004a10 <HAL_I2C_Init+0x280>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0c9b      	lsrs	r3, r3, #18
 8004834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a6a      	ldr	r2, [pc, #424]	@ (8004a04 <HAL_I2C_Init+0x274>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <HAL_I2C_Init+0xd4>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	e009      	b.n	8004878 <HAL_I2C_Init+0xe8>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	4a69      	ldr	r2, [pc, #420]	@ (8004a14 <HAL_I2C_Init+0x284>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	099b      	lsrs	r3, r3, #6
 8004876:	3301      	adds	r3, #1
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800488a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	495c      	ldr	r1, [pc, #368]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004894:	428b      	cmp	r3, r1
 8004896:	d819      	bhi.n	80048cc <HAL_I2C_Init+0x13c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e59      	subs	r1, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048ac:	400b      	ands	r3, r1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_I2C_Init+0x138>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1e59      	subs	r1, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c6:	e051      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e04f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <HAL_I2C_Init+0x168>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e58      	subs	r0, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	440b      	add	r3, r1
 80048e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e012      	b.n	800491e <HAL_I2C_Init+0x18e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Init+0x196>
 8004922:	2301      	movs	r3, #1
 8004924:	e022      	b.n	800496c <HAL_I2C_Init+0x1dc>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <HAL_I2C_Init+0x1bc>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e58      	subs	r0, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	440b      	add	r3, r1
 800493c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494a:	e00f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e58      	subs	r0, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	0099      	lsls	r1, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	6809      	ldr	r1, [r1, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800499a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6911      	ldr	r1, [r2, #16]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	000186a0 	.word	0x000186a0
 8004a08:	001e847f 	.word	0x001e847f
 8004a0c:	003d08ff 	.word	0x003d08ff
 8004a10:	431bde83 	.word	0x431bde83
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	461a      	mov	r2, r3
 8004a24:	460b      	mov	r3, r1
 8004a26:	817b      	strh	r3, [r7, #10]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7fe fecc 	bl	80037c8 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	f040 80e0 	bne.w	8004c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2319      	movs	r3, #25
 8004a46:	2201      	movs	r2, #1
 8004a48:	4970      	ldr	r1, [pc, #448]	@ (8004c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 ff7e 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0d3      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x50>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0cc      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d007      	beq.n	8004a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2221      	movs	r2, #33	@ 0x21
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	893a      	ldrh	r2, [r7, #8]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fd38 	bl	800554c <I2C_MasterRequestWrite>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08d      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004afc:	e066      	b.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f001 f83c 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d107      	bne.n	8004b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06b      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d11b      	bne.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f001 f833 	bl	8005c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e01a      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d194      	bne.n	8004afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	00100002 	.word	0x00100002
 8004c10:	ffff0000 	.word	0xffff0000

08004c14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	461a      	mov	r2, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	817b      	strh	r3, [r7, #10]
 8004c26:	460b      	mov	r3, r1
 8004c28:	813b      	strh	r3, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c2e:	f7fe fdcb 	bl	80037c8 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	f040 80d9 	bne.w	8004df4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2319      	movs	r3, #25
 8004c48:	2201      	movs	r2, #1
 8004c4a:	496d      	ldr	r1, [pc, #436]	@ (8004e00 <HAL_I2C_Mem_Write+0x1ec>)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fe7d 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0cc      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Mem_Write+0x56>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e0c5      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d007      	beq.n	8004c90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2221      	movs	r2, #33	@ 0x21
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2240      	movs	r2, #64	@ 0x40
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a4d      	ldr	r2, [pc, #308]	@ (8004e04 <HAL_I2C_Mem_Write+0x1f0>)
 8004cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd2:	88f8      	ldrh	r0, [r7, #6]
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	8979      	ldrh	r1, [r7, #10]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fcb4 	bl	8005650 <I2C_RequestMemoryWrite>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d052      	beq.n	8004d94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e081      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 ff42 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d107      	bne.n	8004d1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06b      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d11b      	bne.n	8004d94 <HAL_I2C_Mem_Write+0x180>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d017      	beq.n	8004d94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1aa      	bne.n	8004cf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 ff35 	bl	8005c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d107      	bne.n	8004dc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e016      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	00100002 	.word	0x00100002
 8004e04:	ffff0000 	.word	0xffff0000

08004e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	@ 0x30
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	817b      	strh	r3, [r7, #10]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	813b      	strh	r3, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e26:	f7fe fccf 	bl	80037c8 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	f040 8250 	bne.w	80052da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2319      	movs	r3, #25
 8004e40:	2201      	movs	r2, #1
 8004e42:	4982      	ldr	r1, [pc, #520]	@ (800504c <HAL_I2C_Mem_Read+0x244>)
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fd81 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e243      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2C_Mem_Read+0x5a>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e23c      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d007      	beq.n	8004e88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	@ 0x22
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2240      	movs	r2, #64	@ 0x40
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a62      	ldr	r2, [pc, #392]	@ (8005050 <HAL_I2C_Mem_Read+0x248>)
 8004ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eca:	88f8      	ldrh	r0, [r7, #6]
 8004ecc:	893a      	ldrh	r2, [r7, #8]
 8004ece:	8979      	ldrh	r1, [r7, #10]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc4e 	bl	800577c <I2C_RequestMemoryRead>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1f8      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d113      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e1cc      	b.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d11e      	bne.n	8004f60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f32:	b672      	cpsid	i
}
 8004f34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f5c:	b662      	cpsie	i
}
 8004f5e:	e035      	b.n	8004fcc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11e      	bne.n	8004fa6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f78:	b672      	cpsid	i
}
 8004f7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004fa2:	b662      	cpsie	i
}
 8004fa4:	e012      	b.n	8004fcc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004fcc:	e172      	b.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	f200 811f 	bhi.w	8005216 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d123      	bne.n	8005028 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fe5b 	bl	8005ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e173      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005026:	e145      	b.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	2b02      	cmp	r3, #2
 800502e:	d152      	bne.n	80050d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	2200      	movs	r2, #0
 8005038:	4906      	ldr	r1, [pc, #24]	@ (8005054 <HAL_I2C_Mem_Read+0x24c>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fc86 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e148      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
 800504a:	bf00      	nop
 800504c:	00100002 	.word	0x00100002
 8005050:	ffff0000 	.word	0xffff0000
 8005054:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005058:	b672      	cpsid	i
}
 800505a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800509e:	b662      	cpsie	i
}
 80050a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050d4:	e0ee      	b.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	2200      	movs	r2, #0
 80050de:	4981      	ldr	r1, [pc, #516]	@ (80052e4 <HAL_I2C_Mem_Read+0x4dc>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fc33 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0f5      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005100:	b672      	cpsid	i
}
 8005102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005136:	4b6c      	ldr	r3, [pc, #432]	@ (80052e8 <HAL_I2C_Mem_Read+0x4e0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	4a6b      	ldr	r2, [pc, #428]	@ (80052ec <HAL_I2C_Mem_Read+0x4e4>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0a1a      	lsrs	r2, r3, #8
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00da      	lsls	r2, r3, #3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3b01      	subs	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d118      	bne.n	800518e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800517e:	b662      	cpsie	i
}
 8005180:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0a6      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d1d9      	bne.n	8005150 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051de:	b662      	cpsie	i
}
 80051e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005214:	e04e      	b.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005218:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fd40 	bl	8005ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e058      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d124      	bne.n	80052b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526e:	2b03      	cmp	r3, #3
 8005270:	d107      	bne.n	8005282 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005280:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae88 	bne.w	8004fce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	@ 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010004 	.word	0x00010004
 80052e8:	2000005c 	.word	0x2000005c
 80052ec:	14f8b589 	.word	0x14f8b589

080052f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	@ 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005300:	f7fe fa62 	bl	80037c8 <HAL_GetTick>
 8005304:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	f040 8111 	bne.w	800553a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2319      	movs	r3, #25
 800531e:	2201      	movs	r2, #1
 8005320:	4988      	ldr	r1, [pc, #544]	@ (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb12 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
 8005330:	e104      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_I2C_IsDeviceReady+0x50>
 800533c:	2302      	movs	r3, #2
 800533e:	e0fd      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d007      	beq.n	8005366 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2224      	movs	r2, #36	@ 0x24
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a70      	ldr	r2, [pc, #448]	@ (8005548 <HAL_I2C_IsDeviceReady+0x258>)
 8005388:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005398:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fad0 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c0:	d103      	bne.n	80053ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0b6      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053de:	f7fe f9f3 	bl	80037c8 <HAL_GetTick>
 80053e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005412:	e025      	b.n	8005460 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7fe f9d8 	bl	80037c8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <HAL_I2C_IsDeviceReady+0x13a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22a0      	movs	r2, #160	@ 0xa0
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2ba0      	cmp	r3, #160	@ 0xa0
 800546a:	d005      	beq.n	8005478 <HAL_I2C_IsDeviceReady+0x188>
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_I2C_IsDeviceReady+0x188>
 8005472:	7dbb      	ldrb	r3, [r7, #22]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0cd      	beq.n	8005414 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d129      	bne.n	80054e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2319      	movs	r3, #25
 80054ba:	2201      	movs	r2, #1
 80054bc:	4921      	ldr	r1, [pc, #132]	@ (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fa44 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e036      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e02c      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	2319      	movs	r3, #25
 8005502:	2201      	movs	r2, #1
 8005504:	490f      	ldr	r1, [pc, #60]	@ (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fa20 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e012      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3301      	adds	r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	f4ff af32 	bcc.w	800538a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00100002 	.word	0x00100002
 8005548:	ffff0000 	.word	0xffff0000

0800554c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	460b      	mov	r3, r1
 800555a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d006      	beq.n	8005576 <I2C_MasterRequestWrite+0x2a>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d003      	beq.n	8005576 <I2C_MasterRequestWrite+0x2a>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005574:	d108      	bne.n	8005588 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e00b      	b.n	80055a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	2b12      	cmp	r3, #18
 800558e:	d107      	bne.n	80055a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800559e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f9cd 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d103      	bne.n	80055d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e035      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055dc:	d108      	bne.n	80055f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	e01b      	b.n	8005628 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	11db      	asrs	r3, r3, #7
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0306 	and.w	r3, r3, #6
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f063 030f 	orn	r3, r3, #15
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	490e      	ldr	r1, [pc, #56]	@ (8005648 <I2C_MasterRequestWrite+0xfc>)
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fa16 	bl	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e010      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800561e:	897b      	ldrh	r3, [r7, #10]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4907      	ldr	r1, [pc, #28]	@ (800564c <I2C_MasterRequestWrite+0x100>)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa06 	bl	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	00010008 	.word	0x00010008
 800564c:	00010002 	.word	0x00010002

08005650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4603      	mov	r3, r0
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	460b      	mov	r3, r1
 8005664:	813b      	strh	r3, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	2200      	movs	r2, #0
 8005682:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f960 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a0:	d103      	bne.n	80056aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e05f      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ae:	897b      	ldrh	r3, [r7, #10]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	492d      	ldr	r1, [pc, #180]	@ (8005778 <I2C_RequestMemoryWrite+0x128>)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f9bb 	bl	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e04c      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa46 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d107      	bne.n	8005712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e02b      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e021      	b.n	800576c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	6a39      	ldr	r1, [r7, #32]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fa20 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b04      	cmp	r3, #4
 800574c:	d107      	bne.n	800575e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800575c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e005      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	00010002 	.word	0x00010002

0800577c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	461a      	mov	r2, r3
 800578a:	4603      	mov	r3, r0
 800578c:	817b      	strh	r3, [r7, #10]
 800578e:	460b      	mov	r3, r1
 8005790:	813b      	strh	r3, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	2200      	movs	r2, #0
 80057be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8c2 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057dc:	d103      	bne.n	80057e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0aa      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	6a3a      	ldr	r2, [r7, #32]
 80057fe:	4952      	ldr	r1, [pc, #328]	@ (8005948 <I2C_RequestMemoryRead+0x1cc>)
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f91d 	bl	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e097      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	6a39      	ldr	r1, [r7, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9a8 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	2b04      	cmp	r3, #4
 800583c:	d107      	bne.n	800584e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e076      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005858:	893b      	ldrh	r3, [r7, #8]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	611a      	str	r2, [r3, #16]
 8005862:	e021      	b.n	80058a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005864:	893b      	ldrh	r3, [r7, #8]
 8005866:	0a1b      	lsrs	r3, r3, #8
 8005868:	b29b      	uxth	r3, r3
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005874:	6a39      	ldr	r1, [r7, #32]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f982 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2b04      	cmp	r3, #4
 8005888:	d107      	bne.n	800589a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e050      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800589e:	893b      	ldrh	r3, [r7, #8]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058aa:	6a39      	ldr	r1, [r7, #32]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f967 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d107      	bne.n	80058d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e035      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f82b 	bl	800594c <I2C_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590a:	d103      	bne.n	8005914 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e013      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005918:	897b      	ldrh	r3, [r7, #10]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	4906      	ldr	r1, [pc, #24]	@ (8005948 <I2C_RequestMemoryRead+0x1cc>)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f886 	bl	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	00010002 	.word	0x00010002

0800594c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800595c:	e048      	b.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d044      	beq.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fd ff2f 	bl	80037c8 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d139      	bne.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10d      	bne.n	80059a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	43da      	mvns	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	e00c      	b.n	80059bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	43da      	mvns	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d116      	bne.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e023      	b.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10d      	bne.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0xca>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	43da      	mvns	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	e00c      	b.n	8005a30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d093      	beq.n	800595e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a4e:	e071      	b.n	8005b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d123      	bne.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e067      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d041      	beq.n	8005b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fd fe8a 	bl	80037c8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d136      	bne.n	8005b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10c      	bne.n	8005aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e00b      	b.n	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	43da      	mvns	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e021      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10c      	bne.n	8005b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	43da      	mvns	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e00b      	b.n	8005b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af6d 	bne.w	8005a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8c:	e034      	b.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f8e3 	bl	8005d5a <I2C_IsAcknowledgeFailed>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e034      	b.n	8005c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d028      	beq.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba6:	f7fd fe0f 	bl	80037c8 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11d      	bne.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc6:	2b80      	cmp	r3, #128	@ 0x80
 8005bc8:	d016      	beq.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c02:	2b80      	cmp	r3, #128	@ 0x80
 8005c04:	d1c3      	bne.n	8005b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c1c:	e034      	b.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f89b 	bl	8005d5a <I2C_IsAcknowledgeFailed>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e034      	b.n	8005c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d028      	beq.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c36:	f7fd fdc7 	bl	80037c8 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11d      	bne.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d016      	beq.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	f043 0220 	orr.w	r2, r3, #32
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e007      	b.n	8005c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d1c3      	bne.n	8005c1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cac:	e049      	b.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d119      	bne.n	8005cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0210 	mvn.w	r2, #16
 8005cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e030      	b.n	8005d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf0:	f7fd fd6a 	bl	80037c8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11d      	bne.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b40      	cmp	r3, #64	@ 0x40
 8005d12:	d016      	beq.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e007      	b.n	8005d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d1ae      	bne.n	8005cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d70:	d11b      	bne.n	8005daa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	f043 0204 	orr.w	r2, r3, #4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e272      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8087 	beq.w	8005ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dd8:	4b92      	ldr	r3, [pc, #584]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f003 030c 	and.w	r3, r3, #12
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d00c      	beq.n	8005dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005de4:	4b8f      	ldr	r3, [pc, #572]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d112      	bne.n	8005e16 <HAL_RCC_OscConfig+0x5e>
 8005df0:	4b8c      	ldr	r3, [pc, #560]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfc:	d10b      	bne.n	8005e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfe:	4b89      	ldr	r3, [pc, #548]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d06c      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x12c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d168      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e24c      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x76>
 8005e20:	4b80      	ldr	r3, [pc, #512]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7f      	ldr	r2, [pc, #508]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e02e      	b.n	8005e8c <HAL_RCC_OscConfig+0xd4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x98>
 8005e36:	4b7b      	ldr	r3, [pc, #492]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b78      	ldr	r3, [pc, #480]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a77      	ldr	r2, [pc, #476]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e01d      	b.n	8005e8c <HAL_RCC_OscConfig+0xd4>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCC_OscConfig+0xbc>
 8005e5a:	4b72      	ldr	r3, [pc, #456]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a71      	ldr	r2, [pc, #452]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	4b6f      	ldr	r3, [pc, #444]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e00b      	b.n	8005e8c <HAL_RCC_OscConfig+0xd4>
 8005e74:	4b6b      	ldr	r3, [pc, #428]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a6a      	ldr	r2, [pc, #424]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b68      	ldr	r3, [pc, #416]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a67      	ldr	r2, [pc, #412]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fd fc98 	bl	80037c8 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fd fc94 	bl	80037c8 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	@ 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e200      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b5d      	ldr	r3, [pc, #372]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0xe4>
 8005eba:	e014      	b.n	8005ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fd fc84 	bl	80037c8 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fd fc80 	bl	80037c8 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	@ 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e1ec      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed6:	4b53      	ldr	r3, [pc, #332]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x10c>
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d063      	beq.n	8005fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005efe:	4b49      	ldr	r3, [pc, #292]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d11c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x18c>
 8005f0a:	4b46      	ldr	r3, [pc, #280]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d116      	bne.n	8005f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f16:	4b43      	ldr	r3, [pc, #268]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x176>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e1c0      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4939      	ldr	r1, [pc, #228]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f42:	e03a      	b.n	8005fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d020      	beq.n	8005f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f4c:	4b36      	ldr	r3, [pc, #216]	@ (8006028 <HAL_RCC_OscConfig+0x270>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f52:	f7fd fc39 	bl	80037c8 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f5a:	f7fd fc35 	bl	80037c8 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1a1      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f78:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4927      	ldr	r1, [pc, #156]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	e015      	b.n	8005fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8e:	4b26      	ldr	r3, [pc, #152]	@ (8006028 <HAL_RCC_OscConfig+0x270>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fd fc18 	bl	80037c8 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fd fc14 	bl	80037c8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e180      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d03a      	beq.n	800603c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d019      	beq.n	8006002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fce:	4b17      	ldr	r3, [pc, #92]	@ (800602c <HAL_RCC_OscConfig+0x274>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd4:	f7fd fbf8 	bl	80037c8 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fdc:	f7fd fbf4 	bl	80037c8 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e160      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fee:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <HAL_RCC_OscConfig+0x26c>)
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f000 face 	bl	800659c <RCC_Delay>
 8006000:	e01c      	b.n	800603c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006002:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <HAL_RCC_OscConfig+0x274>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006008:	f7fd fbde 	bl	80037c8 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600e:	e00f      	b.n	8006030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006010:	f7fd fbda 	bl	80037c8 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d908      	bls.n	8006030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e146      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	42420000 	.word	0x42420000
 800602c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006030:	4b92      	ldr	r3, [pc, #584]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e9      	bne.n	8006010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a6 	beq.w	8006196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604e:	4b8b      	ldr	r3, [pc, #556]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	4b88      	ldr	r3, [pc, #544]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4a87      	ldr	r2, [pc, #540]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006064:	61d3      	str	r3, [r2, #28]
 8006066:	4b85      	ldr	r3, [pc, #532]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006076:	4b82      	ldr	r3, [pc, #520]	@ (8006280 <HAL_RCC_OscConfig+0x4c8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d118      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006082:	4b7f      	ldr	r3, [pc, #508]	@ (8006280 <HAL_RCC_OscConfig+0x4c8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a7e      	ldr	r2, [pc, #504]	@ (8006280 <HAL_RCC_OscConfig+0x4c8>)
 8006088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608e:	f7fd fb9b 	bl	80037c8 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006096:	f7fd fb97 	bl	80037c8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b64      	cmp	r3, #100	@ 0x64
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e103      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a8:	4b75      	ldr	r3, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x4c8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <HAL_RCC_OscConfig+0x312>
 80060bc:	4b6f      	ldr	r3, [pc, #444]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	4a6e      	ldr	r2, [pc, #440]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6213      	str	r3, [r2, #32]
 80060c8:	e02d      	b.n	8006126 <HAL_RCC_OscConfig+0x36e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0x334>
 80060d2:	4b6a      	ldr	r3, [pc, #424]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	4a69      	ldr	r2, [pc, #420]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	6213      	str	r3, [r2, #32]
 80060de:	4b67      	ldr	r3, [pc, #412]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	4a66      	ldr	r2, [pc, #408]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060e4:	f023 0304 	bic.w	r3, r3, #4
 80060e8:	6213      	str	r3, [r2, #32]
 80060ea:	e01c      	b.n	8006126 <HAL_RCC_OscConfig+0x36e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d10c      	bne.n	800610e <HAL_RCC_OscConfig+0x356>
 80060f4:	4b61      	ldr	r3, [pc, #388]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4a60      	ldr	r2, [pc, #384]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80060fa:	f043 0304 	orr.w	r3, r3, #4
 80060fe:	6213      	str	r3, [r2, #32]
 8006100:	4b5e      	ldr	r3, [pc, #376]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4a5d      	ldr	r2, [pc, #372]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6213      	str	r3, [r2, #32]
 800610c:	e00b      	b.n	8006126 <HAL_RCC_OscConfig+0x36e>
 800610e:	4b5b      	ldr	r3, [pc, #364]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	4a5a      	ldr	r2, [pc, #360]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	6213      	str	r3, [r2, #32]
 800611a:	4b58      	ldr	r3, [pc, #352]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4a57      	ldr	r2, [pc, #348]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006120:	f023 0304 	bic.w	r3, r3, #4
 8006124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d015      	beq.n	800615a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612e:	f7fd fb4b 	bl	80037c8 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	e00a      	b.n	800614c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fd fb47 	bl	80037c8 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006144:	4293      	cmp	r3, r2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e0b1      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614c:	4b4b      	ldr	r3, [pc, #300]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0ee      	beq.n	8006136 <HAL_RCC_OscConfig+0x37e>
 8006158:	e014      	b.n	8006184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800615a:	f7fd fb35 	bl	80037c8 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006160:	e00a      	b.n	8006178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006162:	f7fd fb31 	bl	80037c8 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006170:	4293      	cmp	r3, r2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e09b      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006178:	4b40      	ldr	r3, [pc, #256]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ee      	bne.n	8006162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d105      	bne.n	8006196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800618a:	4b3c      	ldr	r3, [pc, #240]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	4a3b      	ldr	r2, [pc, #236]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8087 	beq.w	80062ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061a0:	4b36      	ldr	r3, [pc, #216]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d061      	beq.n	8006270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d146      	bne.n	8006242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b4:	4b33      	ldr	r3, [pc, #204]	@ (8006284 <HAL_RCC_OscConfig+0x4cc>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ba:	f7fd fb05 	bl	80037c8 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c2:	f7fd fb01 	bl	80037c8 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e06d      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d4:	4b29      	ldr	r3, [pc, #164]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f0      	bne.n	80061c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e8:	d108      	bne.n	80061fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061ea:	4b24      	ldr	r3, [pc, #144]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	4921      	ldr	r1, [pc, #132]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061fc:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a19      	ldr	r1, [r3, #32]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	430b      	orrs	r3, r1
 800620e:	491b      	ldr	r1, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <HAL_RCC_OscConfig+0x4cc>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621a:	f7fd fad5 	bl	80037c8 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006222:	f7fd fad1 	bl	80037c8 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e03d      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006234:	4b11      	ldr	r3, [pc, #68]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x46a>
 8006240:	e035      	b.n	80062ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <HAL_RCC_OscConfig+0x4cc>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd fabe 	bl	80037c8 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd faba 	bl	80037c8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e026      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCC_OscConfig+0x4c4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x498>
 800626e:	e01e      	b.n	80062ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e019      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
 800627c:	40021000 	.word	0x40021000
 8006280:	40007000 	.word	0x40007000
 8006284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_RCC_OscConfig+0x500>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000

080062bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0d0      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d0:	4b6a      	ldr	r3, [pc, #424]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d910      	bls.n	8006300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b67      	ldr	r3, [pc, #412]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 0207 	bic.w	r2, r3, #7
 80062e6:	4965      	ldr	r1, [pc, #404]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b63      	ldr	r3, [pc, #396]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0b8      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d020      	beq.n	800634e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006318:	4b59      	ldr	r3, [pc, #356]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a58      	ldr	r2, [pc, #352]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800631e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006330:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a52      	ldr	r2, [pc, #328]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800633a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800633c:	4b50      	ldr	r3, [pc, #320]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	494d      	ldr	r1, [pc, #308]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800634a:	4313      	orrs	r3, r2
 800634c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d040      	beq.n	80063dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d107      	bne.n	8006372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006362:	4b47      	ldr	r3, [pc, #284]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d115      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e07f      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d107      	bne.n	800638a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637a:	4b41      	ldr	r3, [pc, #260]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e073      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638a:	4b3d      	ldr	r3, [pc, #244]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e06b      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800639a:	4b39      	ldr	r3, [pc, #228]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f023 0203 	bic.w	r2, r3, #3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4936      	ldr	r1, [pc, #216]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ac:	f7fd fa0c 	bl	80037c8 <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b2:	e00a      	b.n	80063ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b4:	f7fd fa08 	bl	80037c8 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e053      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 020c 	and.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1eb      	bne.n	80063b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d210      	bcs.n	800640c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b24      	ldr	r3, [pc, #144]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 0207 	bic.w	r2, r3, #7
 80063f2:	4922      	ldr	r1, [pc, #136]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b20      	ldr	r3, [pc, #128]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e032      	b.n	8006472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006418:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4916      	ldr	r1, [pc, #88]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006426:	4313      	orrs	r3, r2
 8006428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	490e      	ldr	r1, [pc, #56]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006446:	4313      	orrs	r3, r2
 8006448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800644a:	f000 f821 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 800644e:	4602      	mov	r2, r0
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	091b      	lsrs	r3, r3, #4
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	490a      	ldr	r1, [pc, #40]	@ (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800645c:	5ccb      	ldrb	r3, [r1, r3]
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	4a09      	ldr	r2, [pc, #36]	@ (8006488 <HAL_RCC_ClockConfig+0x1cc>)
 8006464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006466:	4b09      	ldr	r3, [pc, #36]	@ (800648c <HAL_RCC_ClockConfig+0x1d0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd f96a 	bl	8003744 <HAL_InitTick>

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40022000 	.word	0x40022000
 8006480:	40021000 	.word	0x40021000
 8006484:	08007f7c 	.word	0x08007f7c
 8006488:	2000005c 	.word	0x2000005c
 800648c:	20000060 	.word	0x20000060

08006490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x94>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 030c 	and.w	r3, r3, #12
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d002      	beq.n	80064c0 <HAL_RCC_GetSysClockFreq+0x30>
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d003      	beq.n	80064c6 <HAL_RCC_GetSysClockFreq+0x36>
 80064be:	e027      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064c0:	4b19      	ldr	r3, [pc, #100]	@ (8006528 <HAL_RCC_GetSysClockFreq+0x98>)
 80064c2:	613b      	str	r3, [r7, #16]
      break;
 80064c4:	e027      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	0c9b      	lsrs	r3, r3, #18
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	4a17      	ldr	r2, [pc, #92]	@ (800652c <HAL_RCC_GetSysClockFreq+0x9c>)
 80064d0:	5cd3      	ldrb	r3, [r2, r3]
 80064d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064de:	4b11      	ldr	r3, [pc, #68]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x94>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	0c5b      	lsrs	r3, r3, #17
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	4a11      	ldr	r2, [pc, #68]	@ (8006530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80064ea:	5cd3      	ldrb	r3, [r2, r3]
 80064ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006528 <HAL_RCC_GetSysClockFreq+0x98>)
 80064f2:	fb03 f202 	mul.w	r2, r3, r2
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e004      	b.n	800650a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0c      	ldr	r2, [pc, #48]	@ (8006534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006504:	fb02 f303 	mul.w	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	613b      	str	r3, [r7, #16]
      break;
 800650e:	e002      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <HAL_RCC_GetSysClockFreq+0x98>)
 8006512:	613b      	str	r3, [r7, #16]
      break;
 8006514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006516:	693b      	ldr	r3, [r7, #16]
}
 8006518:	4618      	mov	r0, r3
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
 8006528:	007a1200 	.word	0x007a1200
 800652c:	08007f94 	.word	0x08007f94
 8006530:	08007fa4 	.word	0x08007fa4
 8006534:	003d0900 	.word	0x003d0900

08006538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800653c:	4b02      	ldr	r3, [pc, #8]	@ (8006548 <HAL_RCC_GetHCLKFreq+0x10>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	2000005c 	.word	0x2000005c

0800654c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006550:	f7ff fff2 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b05      	ldr	r3, [pc, #20]	@ (800656c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4903      	ldr	r1, [pc, #12]	@ (8006570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40021000 	.word	0x40021000
 8006570:	08007f8c 	.word	0x08007f8c

08006574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006578:	f7ff ffde 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	0adb      	lsrs	r3, r3, #11
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	@ (8006598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40021000 	.word	0x40021000
 8006598:	08007f8c 	.word	0x08007f8c

0800659c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065a4:	4b0a      	ldr	r3, [pc, #40]	@ (80065d0 <RCC_Delay+0x34>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0a      	ldr	r2, [pc, #40]	@ (80065d4 <RCC_Delay+0x38>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	0a5b      	lsrs	r3, r3, #9
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065b8:	bf00      	nop
  }
  while (Delay --);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1e5a      	subs	r2, r3, #1
 80065be:	60fa      	str	r2, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f9      	bne.n	80065b8 <RCC_Delay+0x1c>
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	2000005c 	.word	0x2000005c
 80065d4:	10624dd3 	.word	0x10624dd3

080065d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d07d      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10d      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006604:	4b4c      	ldr	r3, [pc, #304]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4a4b      	ldr	r2, [pc, #300]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800660e:	61d3      	str	r3, [r2, #28]
 8006610:	4b49      	ldr	r3, [pc, #292]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b46      	ldr	r3, [pc, #280]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d118      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662c:	4b43      	ldr	r3, [pc, #268]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a42      	ldr	r2, [pc, #264]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006638:	f7fd f8c6 	bl	80037c8 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	e008      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006640:	f7fd f8c2 	bl	80037c8 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	@ 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e06d      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006652:	4b3a      	ldr	r3, [pc, #232]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800665e:	4b36      	ldr	r3, [pc, #216]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02e      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	429a      	cmp	r2, r3
 800667a:	d027      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800667c:	4b2e      	ldr	r3, [pc, #184]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006684:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006686:	4b2e      	ldr	r3, [pc, #184]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800668c:	4b2c      	ldr	r3, [pc, #176]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006692:	4a29      	ldr	r2, [pc, #164]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fd f891 	bl	80037c8 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fd f88d 	bl	80037c8 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e036      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ee      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4917      	ldr	r1, [pc, #92]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e4:	4b14      	ldr	r3, [pc, #80]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4a13      	ldr	r2, [pc, #76]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	490b      	ldr	r1, [pc, #44]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	4313      	orrs	r3, r2
 800670c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800671a:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	4904      	ldr	r1, [pc, #16]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000
 800673c:	40007000 	.word	0x40007000
 8006740:	42420440 	.word	0x42420440

08006744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	2300      	movs	r3, #0
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b10      	cmp	r3, #16
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b10      	cmp	r3, #16
 800676a:	f200 808a 	bhi.w	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d045      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d075      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800677a:	e082      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800677c:	4b46      	ldr	r3, [pc, #280]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006782:	4b45      	ldr	r3, [pc, #276]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d07b      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	0c9b      	lsrs	r3, r3, #18
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	4a41      	ldr	r2, [pc, #260]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006798:	5cd3      	ldrb	r3, [r2, r3]
 800679a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	0c5b      	lsrs	r3, r3, #17
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	4a3b      	ldr	r2, [pc, #236]	@ (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80067b2:	5cd3      	ldrb	r3, [r2, r3]
 80067b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00d      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067c0:	4a38      	ldr	r2, [pc, #224]	@ (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	fb02 f303 	mul.w	r3, r2, r3
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4a34      	ldr	r2, [pc, #208]	@ (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067e8:	d102      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	61bb      	str	r3, [r7, #24]
      break;
 80067ee:	e04a      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4a2d      	ldr	r2, [pc, #180]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	61bb      	str	r3, [r7, #24]
      break;
 80067fe:	e042      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006800:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800680c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006810:	d108      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800681c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e01f      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800682a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682e:	d109      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006830:	4b19      	ldr	r3, [pc, #100]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800683c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e00f      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684e:	d11c      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006850:	4b11      	ldr	r3, [pc, #68]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d016      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800685c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006860:	61bb      	str	r3, [r7, #24]
      break;
 8006862:	e012      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006864:	e011      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006866:	f7ff fe85 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	0b9b      	lsrs	r3, r3, #14
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	3301      	adds	r3, #1
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	61bb      	str	r3, [r7, #24]
      break;
 8006880:	e004      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006882:	bf00      	nop
 8006884:	e002      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006886:	bf00      	nop
 8006888:	e000      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800688a:	bf00      	nop
    }
  }
  return (frequency);
 800688c:	69bb      	ldr	r3, [r7, #24]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
 800689c:	08007fa8 	.word	0x08007fa8
 80068a0:	08007fb8 	.word	0x08007fb8
 80068a4:	007a1200 	.word	0x007a1200
 80068a8:	003d0900 	.word	0x003d0900
 80068ac:	aaaaaaab 	.word	0xaaaaaaab

080068b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e076      	b.n	80069b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068d2:	d009      	beq.n	80068e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	61da      	str	r2, [r3, #28]
 80068da:	e005      	b.n	80068e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fc fcfa 	bl	80032fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800691e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696c:	ea42 0103 	orr.w	r1, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	0c1a      	lsrs	r2, r3, #16
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f002 0204 	and.w	r2, r2, #4
 800698e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800699e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c8:	f7fc fefe 	bl	80037c8 <HAL_GetTick>
 80069cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	e12a      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Transmit+0x36>
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e122      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_SPI_Transmit+0x48>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e11b      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	88fa      	ldrh	r2, [r7, #6]
 8006a26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4e:	d10f      	bne.n	8006a70 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d007      	beq.n	8006a8e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a96:	d152      	bne.n	8006b3e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_SPI_Transmit+0xee>
 8006aa0:	8b7b      	ldrh	r3, [r7, #26]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d145      	bne.n	8006b32 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	881a      	ldrh	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006aca:	e032      	b.n	8006b32 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d112      	bne.n	8006b00 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ade:	881a      	ldrh	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006afe:	e018      	b.n	8006b32 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b00:	f7fc fe62 	bl	80037c8 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d803      	bhi.n	8006b18 <HAL_SPI_Transmit+0x160>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Transmit+0x166>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e082      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1c7      	bne.n	8006acc <HAL_SPI_Transmit+0x114>
 8006b3c:	e053      	b.n	8006be6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Transmit+0x194>
 8006b46:	8b7b      	ldrh	r3, [r7, #26]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d147      	bne.n	8006bdc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b72:	e033      	b.n	8006bdc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d113      	bne.n	8006baa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ba8:	e018      	b.n	8006bdc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006baa:	f7fc fe0d 	bl	80037c8 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d803      	bhi.n	8006bc2 <HAL_SPI_Transmit+0x20a>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d102      	bne.n	8006bc8 <HAL_SPI_Transmit+0x210>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e02d      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1c6      	bne.n	8006b74 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8b0 	bl	8006d50 <SPI_EndRxTxTransaction>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c36:	2300      	movs	r3, #0
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c50:	f7fc fdba 	bl	80037c8 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c60:	f7fc fdb2 	bl	80037c8 <HAL_GetTick>
 8006c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c66:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c76:	e054      	b.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d050      	beq.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c80:	f7fc fda2 	bl	80037c8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d902      	bls.n	8006c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cae:	d111      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	d004      	beq.n	8006cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d107      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cdc:	d10f      	bne.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e017      	b.n	8006d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d19b      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	2000005c 	.word	0x2000005c

08006d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2201      	movs	r2, #1
 8006d64:	2102      	movs	r1, #2
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff ff6a 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e013      	b.n	8006daa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2180      	movs	r1, #128	@ 0x80
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff ff57 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9c:	f043 0220 	orr.w	r2, r3, #32
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e000      	b.n	8006daa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e042      	b.n	8006e4a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fc fae9 	bl	80033b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2224      	movs	r2, #36	@ 0x24
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006df4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9d0 	bl	800719c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b08a      	sub	sp, #40	@ 0x28
 8006e56:	af02      	add	r7, sp, #8
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	603b      	str	r3, [r7, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d175      	bne.n	8006f5e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_UART_Transmit+0x2c>
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e06e      	b.n	8006f60 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2221      	movs	r2, #33	@ 0x21
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e90:	f7fc fc9a 	bl	80037c8 <HAL_GetTick>
 8006e94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	88fa      	ldrh	r2, [r7, #6]
 8006ea0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eaa:	d108      	bne.n	8006ebe <HAL_UART_Transmit+0x6c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e003      	b.n	8006ec6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ec6:	e02e      	b.n	8006f26 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2180      	movs	r1, #128	@ 0x80
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f86d 	bl	8006fb2 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e03a      	b.n	8006f60 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006efe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	3302      	adds	r3, #2
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e007      	b.n	8006f18 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	3301      	adds	r3, #1
 8006f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1cb      	bne.n	8006ec8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	2140      	movs	r1, #64	@ 0x40
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f839 	bl	8006fb2 <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e006      	b.n	8006f60 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d112      	bne.n	8006fa8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_UART_Receive_IT+0x26>
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e00b      	b.n	8006faa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f860 	bl	8007064 <UART_Start_Receive_IT>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b086      	sub	sp, #24
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc2:	e03b      	b.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d037      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fcc:	f7fc fbfc 	bl	80037c8 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d302      	bcc.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e03a      	b.n	800705c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d023      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b80      	cmp	r3, #128	@ 0x80
 8006ff8:	d020      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d01d      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b08      	cmp	r3, #8
 800700c:	d116      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f856 	bl	80070d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2208      	movs	r2, #8
 800702e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e00f      	b.n	800705c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4013      	ands	r3, r2
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	429a      	cmp	r2, r3
 8007058:	d0b4      	beq.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2222      	movs	r2, #34	@ 0x22
 800708e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0220 	orr.w	r2, r2, #32
 80070c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b095      	sub	sp, #84	@ 0x54
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	61fb      	str	r3, [r7, #28]
   return(result);
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	2b01      	cmp	r3, #1
 800714c:	d119      	bne.n	8007182 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	60bb      	str	r3, [r7, #8]
   return(result);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	647b      	str	r3, [r7, #68]	@ 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800716e:	61ba      	str	r2, [r7, #24]
 8007170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	613b      	str	r3, [r7, #16]
   return(result);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007190:	bf00      	nop
 8007192:	3754      	adds	r7, #84	@ 0x54
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
	...

0800719c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80071d6:	f023 030c 	bic.w	r3, r3, #12
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	430b      	orrs	r3, r1
 80071e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	@ (80072b0 <UART_SetConfig+0x114>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d103      	bne.n	800720c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007204:	f7ff f9b6 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	e002      	b.n	8007212 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800720c:	f7ff f99e 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 8007210:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009a      	lsls	r2, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <UART_SetConfig+0x118>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	0119      	lsls	r1, r3, #4
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009a      	lsls	r2, r3, #2
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	fbb2 f2f3 	udiv	r2, r2, r3
 8007248:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <UART_SetConfig+0x118>)
 800724a:	fba3 0302 	umull	r0, r3, r3, r2
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	2064      	movs	r0, #100	@ 0x64
 8007252:	fb00 f303 	mul.w	r3, r0, r3
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	3332      	adds	r3, #50	@ 0x32
 800725c:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <UART_SetConfig+0x118>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007268:	4419      	add	r1, r3
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009a      	lsls	r2, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007280:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <UART_SetConfig+0x118>)
 8007282:	fba3 0302 	umull	r0, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2064      	movs	r0, #100	@ 0x64
 800728a:	fb00 f303 	mul.w	r3, r0, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	3332      	adds	r3, #50	@ 0x32
 8007294:	4a07      	ldr	r2, [pc, #28]	@ (80072b4 <UART_SetConfig+0x118>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	440a      	add	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40013800 	.word	0x40013800
 80072b4:	51eb851f 	.word	0x51eb851f

080072b8 <sniprintf>:
 80072b8:	b40c      	push	{r2, r3}
 80072ba:	b530      	push	{r4, r5, lr}
 80072bc:	4b18      	ldr	r3, [pc, #96]	@ (8007320 <sniprintf+0x68>)
 80072be:	1e0c      	subs	r4, r1, #0
 80072c0:	681d      	ldr	r5, [r3, #0]
 80072c2:	b09d      	sub	sp, #116	@ 0x74
 80072c4:	da08      	bge.n	80072d8 <sniprintf+0x20>
 80072c6:	238b      	movs	r3, #139	@ 0x8b
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	602b      	str	r3, [r5, #0]
 80072ce:	b01d      	add	sp, #116	@ 0x74
 80072d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072d4:	b002      	add	sp, #8
 80072d6:	4770      	bx	lr
 80072d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80072e6:	bf0c      	ite	eq
 80072e8:	4623      	moveq	r3, r4
 80072ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072f6:	9002      	str	r0, [sp, #8]
 80072f8:	9006      	str	r0, [sp, #24]
 80072fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072fe:	4628      	mov	r0, r5
 8007300:	ab21      	add	r3, sp, #132	@ 0x84
 8007302:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007304:	a902      	add	r1, sp, #8
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f000 f9a6 	bl	8007658 <_svfiprintf_r>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	bfbc      	itt	lt
 8007310:	238b      	movlt	r3, #139	@ 0x8b
 8007312:	602b      	strlt	r3, [r5, #0]
 8007314:	2c00      	cmp	r4, #0
 8007316:	d0da      	beq.n	80072ce <sniprintf+0x16>
 8007318:	2200      	movs	r2, #0
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	e7d6      	b.n	80072ce <sniprintf+0x16>
 8007320:	20000068 	.word	0x20000068

08007324 <memset>:
 8007324:	4603      	mov	r3, r0
 8007326:	4402      	add	r2, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <strncpy>:
 8007334:	4603      	mov	r3, r0
 8007336:	b510      	push	{r4, lr}
 8007338:	3901      	subs	r1, #1
 800733a:	b132      	cbz	r2, 800734a <strncpy+0x16>
 800733c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007340:	3a01      	subs	r2, #1
 8007342:	f803 4b01 	strb.w	r4, [r3], #1
 8007346:	2c00      	cmp	r4, #0
 8007348:	d1f7      	bne.n	800733a <strncpy+0x6>
 800734a:	2100      	movs	r1, #0
 800734c:	441a      	add	r2, r3
 800734e:	4293      	cmp	r3, r2
 8007350:	d100      	bne.n	8007354 <strncpy+0x20>
 8007352:	bd10      	pop	{r4, pc}
 8007354:	f803 1b01 	strb.w	r1, [r3], #1
 8007358:	e7f9      	b.n	800734e <strncpy+0x1a>
	...

0800735c <__errno>:
 800735c:	4b01      	ldr	r3, [pc, #4]	@ (8007364 <__errno+0x8>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000068 	.word	0x20000068

08007368 <__libc_init_array>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	2600      	movs	r6, #0
 800736c:	4d0c      	ldr	r5, [pc, #48]	@ (80073a0 <__libc_init_array+0x38>)
 800736e:	4c0d      	ldr	r4, [pc, #52]	@ (80073a4 <__libc_init_array+0x3c>)
 8007370:	1b64      	subs	r4, r4, r5
 8007372:	10a4      	asrs	r4, r4, #2
 8007374:	42a6      	cmp	r6, r4
 8007376:	d109      	bne.n	800738c <__libc_init_array+0x24>
 8007378:	f000 fc76 	bl	8007c68 <_init>
 800737c:	2600      	movs	r6, #0
 800737e:	4d0a      	ldr	r5, [pc, #40]	@ (80073a8 <__libc_init_array+0x40>)
 8007380:	4c0a      	ldr	r4, [pc, #40]	@ (80073ac <__libc_init_array+0x44>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	42a6      	cmp	r6, r4
 8007388:	d105      	bne.n	8007396 <__libc_init_array+0x2e>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007390:	4798      	blx	r3
 8007392:	3601      	adds	r6, #1
 8007394:	e7ee      	b.n	8007374 <__libc_init_array+0xc>
 8007396:	f855 3b04 	ldr.w	r3, [r5], #4
 800739a:	4798      	blx	r3
 800739c:	3601      	adds	r6, #1
 800739e:	e7f2      	b.n	8007386 <__libc_init_array+0x1e>
 80073a0:	08007ff8 	.word	0x08007ff8
 80073a4:	08007ff8 	.word	0x08007ff8
 80073a8:	08007ff8 	.word	0x08007ff8
 80073ac:	08007ffc 	.word	0x08007ffc

080073b0 <__retarget_lock_acquire_recursive>:
 80073b0:	4770      	bx	lr

080073b2 <__retarget_lock_release_recursive>:
 80073b2:	4770      	bx	lr

080073b4 <_free_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4605      	mov	r5, r0
 80073b8:	2900      	cmp	r1, #0
 80073ba:	d040      	beq.n	800743e <_free_r+0x8a>
 80073bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c0:	1f0c      	subs	r4, r1, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bfb8      	it	lt
 80073c6:	18e4      	addlt	r4, r4, r3
 80073c8:	f000 f8de 	bl	8007588 <__malloc_lock>
 80073cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007440 <_free_r+0x8c>)
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	b933      	cbnz	r3, 80073e0 <_free_r+0x2c>
 80073d2:	6063      	str	r3, [r4, #4]
 80073d4:	6014      	str	r4, [r2, #0]
 80073d6:	4628      	mov	r0, r5
 80073d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073dc:	f000 b8da 	b.w	8007594 <__malloc_unlock>
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d908      	bls.n	80073f6 <_free_r+0x42>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	1821      	adds	r1, r4, r0
 80073e8:	428b      	cmp	r3, r1
 80073ea:	bf01      	itttt	eq
 80073ec:	6819      	ldreq	r1, [r3, #0]
 80073ee:	685b      	ldreq	r3, [r3, #4]
 80073f0:	1809      	addeq	r1, r1, r0
 80073f2:	6021      	streq	r1, [r4, #0]
 80073f4:	e7ed      	b.n	80073d2 <_free_r+0x1e>
 80073f6:	461a      	mov	r2, r3
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	b10b      	cbz	r3, 8007400 <_free_r+0x4c>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d9fa      	bls.n	80073f6 <_free_r+0x42>
 8007400:	6811      	ldr	r1, [r2, #0]
 8007402:	1850      	adds	r0, r2, r1
 8007404:	42a0      	cmp	r0, r4
 8007406:	d10b      	bne.n	8007420 <_free_r+0x6c>
 8007408:	6820      	ldr	r0, [r4, #0]
 800740a:	4401      	add	r1, r0
 800740c:	1850      	adds	r0, r2, r1
 800740e:	4283      	cmp	r3, r0
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	d1e0      	bne.n	80073d6 <_free_r+0x22>
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4408      	add	r0, r1
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	e7da      	b.n	80073d6 <_free_r+0x22>
 8007420:	d902      	bls.n	8007428 <_free_r+0x74>
 8007422:	230c      	movs	r3, #12
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	e7d6      	b.n	80073d6 <_free_r+0x22>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	1821      	adds	r1, r4, r0
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1809      	addeq	r1, r1, r0
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	6054      	str	r4, [r2, #4]
 800743c:	e7cb      	b.n	80073d6 <_free_r+0x22>
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	200005a0 	.word	0x200005a0

08007444 <sbrk_aligned>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4e0f      	ldr	r6, [pc, #60]	@ (8007484 <sbrk_aligned+0x40>)
 8007448:	460c      	mov	r4, r1
 800744a:	6831      	ldr	r1, [r6, #0]
 800744c:	4605      	mov	r5, r0
 800744e:	b911      	cbnz	r1, 8007456 <sbrk_aligned+0x12>
 8007450:	f000 fba8 	bl	8007ba4 <_sbrk_r>
 8007454:	6030      	str	r0, [r6, #0]
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f000 fba3 	bl	8007ba4 <_sbrk_r>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d103      	bne.n	800746a <sbrk_aligned+0x26>
 8007462:	f04f 34ff 	mov.w	r4, #4294967295
 8007466:	4620      	mov	r0, r4
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	1cc4      	adds	r4, r0, #3
 800746c:	f024 0403 	bic.w	r4, r4, #3
 8007470:	42a0      	cmp	r0, r4
 8007472:	d0f8      	beq.n	8007466 <sbrk_aligned+0x22>
 8007474:	1a21      	subs	r1, r4, r0
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fb94 	bl	8007ba4 <_sbrk_r>
 800747c:	3001      	adds	r0, #1
 800747e:	d1f2      	bne.n	8007466 <sbrk_aligned+0x22>
 8007480:	e7ef      	b.n	8007462 <sbrk_aligned+0x1e>
 8007482:	bf00      	nop
 8007484:	2000059c 	.word	0x2000059c

08007488 <_malloc_r>:
 8007488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748c:	1ccd      	adds	r5, r1, #3
 800748e:	f025 0503 	bic.w	r5, r5, #3
 8007492:	3508      	adds	r5, #8
 8007494:	2d0c      	cmp	r5, #12
 8007496:	bf38      	it	cc
 8007498:	250c      	movcc	r5, #12
 800749a:	2d00      	cmp	r5, #0
 800749c:	4606      	mov	r6, r0
 800749e:	db01      	blt.n	80074a4 <_malloc_r+0x1c>
 80074a0:	42a9      	cmp	r1, r5
 80074a2:	d904      	bls.n	80074ae <_malloc_r+0x26>
 80074a4:	230c      	movs	r3, #12
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	2000      	movs	r0, #0
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007584 <_malloc_r+0xfc>
 80074b2:	f000 f869 	bl	8007588 <__malloc_lock>
 80074b6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ba:	461c      	mov	r4, r3
 80074bc:	bb44      	cbnz	r4, 8007510 <_malloc_r+0x88>
 80074be:	4629      	mov	r1, r5
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff ffbf 	bl	8007444 <sbrk_aligned>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	4604      	mov	r4, r0
 80074ca:	d158      	bne.n	800757e <_malloc_r+0xf6>
 80074cc:	f8d8 4000 	ldr.w	r4, [r8]
 80074d0:	4627      	mov	r7, r4
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d143      	bne.n	800755e <_malloc_r+0xd6>
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	d04b      	beq.n	8007572 <_malloc_r+0xea>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	4639      	mov	r1, r7
 80074de:	4630      	mov	r0, r6
 80074e0:	eb04 0903 	add.w	r9, r4, r3
 80074e4:	f000 fb5e 	bl	8007ba4 <_sbrk_r>
 80074e8:	4581      	cmp	r9, r0
 80074ea:	d142      	bne.n	8007572 <_malloc_r+0xea>
 80074ec:	6821      	ldr	r1, [r4, #0]
 80074ee:	4630      	mov	r0, r6
 80074f0:	1a6d      	subs	r5, r5, r1
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7ff ffa6 	bl	8007444 <sbrk_aligned>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d03a      	beq.n	8007572 <_malloc_r+0xea>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	442b      	add	r3, r5
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	f8d8 3000 	ldr.w	r3, [r8]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	bb62      	cbnz	r2, 8007564 <_malloc_r+0xdc>
 800750a:	f8c8 7000 	str.w	r7, [r8]
 800750e:	e00f      	b.n	8007530 <_malloc_r+0xa8>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	1b52      	subs	r2, r2, r5
 8007514:	d420      	bmi.n	8007558 <_malloc_r+0xd0>
 8007516:	2a0b      	cmp	r2, #11
 8007518:	d917      	bls.n	800754a <_malloc_r+0xc2>
 800751a:	1961      	adds	r1, r4, r5
 800751c:	42a3      	cmp	r3, r4
 800751e:	6025      	str	r5, [r4, #0]
 8007520:	bf18      	it	ne
 8007522:	6059      	strne	r1, [r3, #4]
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	bf08      	it	eq
 8007528:	f8c8 1000 	streq.w	r1, [r8]
 800752c:	5162      	str	r2, [r4, r5]
 800752e:	604b      	str	r3, [r1, #4]
 8007530:	4630      	mov	r0, r6
 8007532:	f000 f82f 	bl	8007594 <__malloc_unlock>
 8007536:	f104 000b 	add.w	r0, r4, #11
 800753a:	1d23      	adds	r3, r4, #4
 800753c:	f020 0007 	bic.w	r0, r0, #7
 8007540:	1ac2      	subs	r2, r0, r3
 8007542:	bf1c      	itt	ne
 8007544:	1a1b      	subne	r3, r3, r0
 8007546:	50a3      	strne	r3, [r4, r2]
 8007548:	e7af      	b.n	80074aa <_malloc_r+0x22>
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	42a3      	cmp	r3, r4
 800754e:	bf0c      	ite	eq
 8007550:	f8c8 2000 	streq.w	r2, [r8]
 8007554:	605a      	strne	r2, [r3, #4]
 8007556:	e7eb      	b.n	8007530 <_malloc_r+0xa8>
 8007558:	4623      	mov	r3, r4
 800755a:	6864      	ldr	r4, [r4, #4]
 800755c:	e7ae      	b.n	80074bc <_malloc_r+0x34>
 800755e:	463c      	mov	r4, r7
 8007560:	687f      	ldr	r7, [r7, #4]
 8007562:	e7b6      	b.n	80074d2 <_malloc_r+0x4a>
 8007564:	461a      	mov	r2, r3
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	42a3      	cmp	r3, r4
 800756a:	d1fb      	bne.n	8007564 <_malloc_r+0xdc>
 800756c:	2300      	movs	r3, #0
 800756e:	6053      	str	r3, [r2, #4]
 8007570:	e7de      	b.n	8007530 <_malloc_r+0xa8>
 8007572:	230c      	movs	r3, #12
 8007574:	4630      	mov	r0, r6
 8007576:	6033      	str	r3, [r6, #0]
 8007578:	f000 f80c 	bl	8007594 <__malloc_unlock>
 800757c:	e794      	b.n	80074a8 <_malloc_r+0x20>
 800757e:	6005      	str	r5, [r0, #0]
 8007580:	e7d6      	b.n	8007530 <_malloc_r+0xa8>
 8007582:	bf00      	nop
 8007584:	200005a0 	.word	0x200005a0

08007588 <__malloc_lock>:
 8007588:	4801      	ldr	r0, [pc, #4]	@ (8007590 <__malloc_lock+0x8>)
 800758a:	f7ff bf11 	b.w	80073b0 <__retarget_lock_acquire_recursive>
 800758e:	bf00      	nop
 8007590:	20000598 	.word	0x20000598

08007594 <__malloc_unlock>:
 8007594:	4801      	ldr	r0, [pc, #4]	@ (800759c <__malloc_unlock+0x8>)
 8007596:	f7ff bf0c 	b.w	80073b2 <__retarget_lock_release_recursive>
 800759a:	bf00      	nop
 800759c:	20000598 	.word	0x20000598

080075a0 <__ssputs_r>:
 80075a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	461f      	mov	r7, r3
 80075a6:	688e      	ldr	r6, [r1, #8]
 80075a8:	4682      	mov	sl, r0
 80075aa:	42be      	cmp	r6, r7
 80075ac:	460c      	mov	r4, r1
 80075ae:	4690      	mov	r8, r2
 80075b0:	680b      	ldr	r3, [r1, #0]
 80075b2:	d82d      	bhi.n	8007610 <__ssputs_r+0x70>
 80075b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075bc:	d026      	beq.n	800760c <__ssputs_r+0x6c>
 80075be:	6965      	ldr	r5, [r4, #20]
 80075c0:	6909      	ldr	r1, [r1, #16]
 80075c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075c6:	eba3 0901 	sub.w	r9, r3, r1
 80075ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075ce:	1c7b      	adds	r3, r7, #1
 80075d0:	444b      	add	r3, r9
 80075d2:	106d      	asrs	r5, r5, #1
 80075d4:	429d      	cmp	r5, r3
 80075d6:	bf38      	it	cc
 80075d8:	461d      	movcc	r5, r3
 80075da:	0553      	lsls	r3, r2, #21
 80075dc:	d527      	bpl.n	800762e <__ssputs_r+0x8e>
 80075de:	4629      	mov	r1, r5
 80075e0:	f7ff ff52 	bl	8007488 <_malloc_r>
 80075e4:	4606      	mov	r6, r0
 80075e6:	b360      	cbz	r0, 8007642 <__ssputs_r+0xa2>
 80075e8:	464a      	mov	r2, r9
 80075ea:	6921      	ldr	r1, [r4, #16]
 80075ec:	f000 faf8 	bl	8007be0 <memcpy>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	6126      	str	r6, [r4, #16]
 80075fe:	444e      	add	r6, r9
 8007600:	6026      	str	r6, [r4, #0]
 8007602:	463e      	mov	r6, r7
 8007604:	6165      	str	r5, [r4, #20]
 8007606:	eba5 0509 	sub.w	r5, r5, r9
 800760a:	60a5      	str	r5, [r4, #8]
 800760c:	42be      	cmp	r6, r7
 800760e:	d900      	bls.n	8007612 <__ssputs_r+0x72>
 8007610:	463e      	mov	r6, r7
 8007612:	4632      	mov	r2, r6
 8007614:	4641      	mov	r1, r8
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	f000 faaa 	bl	8007b70 <memmove>
 800761c:	2000      	movs	r0, #0
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	1b9b      	subs	r3, r3, r6
 8007622:	60a3      	str	r3, [r4, #8]
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	4433      	add	r3, r6
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	462a      	mov	r2, r5
 8007630:	f000 fae4 	bl	8007bfc <_realloc_r>
 8007634:	4606      	mov	r6, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d1e0      	bne.n	80075fc <__ssputs_r+0x5c>
 800763a:	4650      	mov	r0, sl
 800763c:	6921      	ldr	r1, [r4, #16]
 800763e:	f7ff feb9 	bl	80073b4 <_free_r>
 8007642:	230c      	movs	r3, #12
 8007644:	f8ca 3000 	str.w	r3, [sl]
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	e7e9      	b.n	800762a <__ssputs_r+0x8a>
	...

08007658 <_svfiprintf_r>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	4698      	mov	r8, r3
 800765e:	898b      	ldrh	r3, [r1, #12]
 8007660:	4607      	mov	r7, r0
 8007662:	061b      	lsls	r3, r3, #24
 8007664:	460d      	mov	r5, r1
 8007666:	4614      	mov	r4, r2
 8007668:	b09d      	sub	sp, #116	@ 0x74
 800766a:	d510      	bpl.n	800768e <_svfiprintf_r+0x36>
 800766c:	690b      	ldr	r3, [r1, #16]
 800766e:	b973      	cbnz	r3, 800768e <_svfiprintf_r+0x36>
 8007670:	2140      	movs	r1, #64	@ 0x40
 8007672:	f7ff ff09 	bl	8007488 <_malloc_r>
 8007676:	6028      	str	r0, [r5, #0]
 8007678:	6128      	str	r0, [r5, #16]
 800767a:	b930      	cbnz	r0, 800768a <_svfiprintf_r+0x32>
 800767c:	230c      	movs	r3, #12
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	b01d      	add	sp, #116	@ 0x74
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	2340      	movs	r3, #64	@ 0x40
 800768c:	616b      	str	r3, [r5, #20]
 800768e:	2300      	movs	r3, #0
 8007690:	9309      	str	r3, [sp, #36]	@ 0x24
 8007692:	2320      	movs	r3, #32
 8007694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007698:	2330      	movs	r3, #48	@ 0x30
 800769a:	f04f 0901 	mov.w	r9, #1
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800783c <_svfiprintf_r+0x1e4>
 80076a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076aa:	4623      	mov	r3, r4
 80076ac:	469a      	mov	sl, r3
 80076ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b2:	b10a      	cbz	r2, 80076b8 <_svfiprintf_r+0x60>
 80076b4:	2a25      	cmp	r2, #37	@ 0x25
 80076b6:	d1f9      	bne.n	80076ac <_svfiprintf_r+0x54>
 80076b8:	ebba 0b04 	subs.w	fp, sl, r4
 80076bc:	d00b      	beq.n	80076d6 <_svfiprintf_r+0x7e>
 80076be:	465b      	mov	r3, fp
 80076c0:	4622      	mov	r2, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff ff6b 	bl	80075a0 <__ssputs_r>
 80076ca:	3001      	adds	r0, #1
 80076cc:	f000 80a7 	beq.w	800781e <_svfiprintf_r+0x1c6>
 80076d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d2:	445a      	add	r2, fp
 80076d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076d6:	f89a 3000 	ldrb.w	r3, [sl]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 809f 	beq.w	800781e <_svfiprintf_r+0x1c6>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ea:	f10a 0a01 	add.w	sl, sl, #1
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	9307      	str	r3, [sp, #28]
 80076f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80076f8:	4654      	mov	r4, sl
 80076fa:	2205      	movs	r2, #5
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	484e      	ldr	r0, [pc, #312]	@ (800783c <_svfiprintf_r+0x1e4>)
 8007702:	f000 fa5f 	bl	8007bc4 <memchr>
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	b9d8      	cbnz	r0, 8007742 <_svfiprintf_r+0xea>
 800770a:	06d0      	lsls	r0, r2, #27
 800770c:	bf44      	itt	mi
 800770e:	2320      	movmi	r3, #32
 8007710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007714:	0711      	lsls	r1, r2, #28
 8007716:	bf44      	itt	mi
 8007718:	232b      	movmi	r3, #43	@ 0x2b
 800771a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800771e:	f89a 3000 	ldrb.w	r3, [sl]
 8007722:	2b2a      	cmp	r3, #42	@ 0x2a
 8007724:	d015      	beq.n	8007752 <_svfiprintf_r+0xfa>
 8007726:	4654      	mov	r4, sl
 8007728:	2000      	movs	r0, #0
 800772a:	f04f 0c0a 	mov.w	ip, #10
 800772e:	9a07      	ldr	r2, [sp, #28]
 8007730:	4621      	mov	r1, r4
 8007732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007736:	3b30      	subs	r3, #48	@ 0x30
 8007738:	2b09      	cmp	r3, #9
 800773a:	d94b      	bls.n	80077d4 <_svfiprintf_r+0x17c>
 800773c:	b1b0      	cbz	r0, 800776c <_svfiprintf_r+0x114>
 800773e:	9207      	str	r2, [sp, #28]
 8007740:	e014      	b.n	800776c <_svfiprintf_r+0x114>
 8007742:	eba0 0308 	sub.w	r3, r0, r8
 8007746:	fa09 f303 	lsl.w	r3, r9, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	46a2      	mov	sl, r4
 800774e:	9304      	str	r3, [sp, #16]
 8007750:	e7d2      	b.n	80076f8 <_svfiprintf_r+0xa0>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	9103      	str	r1, [sp, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbb      	ittet	lt
 800775e:	425b      	neglt	r3, r3
 8007760:	f042 0202 	orrlt.w	r2, r2, #2
 8007764:	9307      	strge	r3, [sp, #28]
 8007766:	9307      	strlt	r3, [sp, #28]
 8007768:	bfb8      	it	lt
 800776a:	9204      	strlt	r2, [sp, #16]
 800776c:	7823      	ldrb	r3, [r4, #0]
 800776e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007770:	d10a      	bne.n	8007788 <_svfiprintf_r+0x130>
 8007772:	7863      	ldrb	r3, [r4, #1]
 8007774:	2b2a      	cmp	r3, #42	@ 0x2a
 8007776:	d132      	bne.n	80077de <_svfiprintf_r+0x186>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	3402      	adds	r4, #2
 800777c:	1d1a      	adds	r2, r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9203      	str	r2, [sp, #12]
 8007782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007840 <_svfiprintf_r+0x1e8>
 800778c:	2203      	movs	r2, #3
 800778e:	4650      	mov	r0, sl
 8007790:	7821      	ldrb	r1, [r4, #0]
 8007792:	f000 fa17 	bl	8007bc4 <memchr>
 8007796:	b138      	cbz	r0, 80077a8 <_svfiprintf_r+0x150>
 8007798:	2240      	movs	r2, #64	@ 0x40
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	eba0 000a 	sub.w	r0, r0, sl
 80077a0:	4082      	lsls	r2, r0
 80077a2:	4313      	orrs	r3, r2
 80077a4:	3401      	adds	r4, #1
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ac:	2206      	movs	r2, #6
 80077ae:	4825      	ldr	r0, [pc, #148]	@ (8007844 <_svfiprintf_r+0x1ec>)
 80077b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077b4:	f000 fa06 	bl	8007bc4 <memchr>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d036      	beq.n	800782a <_svfiprintf_r+0x1d2>
 80077bc:	4b22      	ldr	r3, [pc, #136]	@ (8007848 <_svfiprintf_r+0x1f0>)
 80077be:	bb1b      	cbnz	r3, 8007808 <_svfiprintf_r+0x1b0>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	3307      	adds	r3, #7
 80077c4:	f023 0307 	bic.w	r3, r3, #7
 80077c8:	3308      	adds	r3, #8
 80077ca:	9303      	str	r3, [sp, #12]
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	4433      	add	r3, r6
 80077d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d2:	e76a      	b.n	80076aa <_svfiprintf_r+0x52>
 80077d4:	460c      	mov	r4, r1
 80077d6:	2001      	movs	r0, #1
 80077d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077dc:	e7a8      	b.n	8007730 <_svfiprintf_r+0xd8>
 80077de:	2300      	movs	r3, #0
 80077e0:	f04f 0c0a 	mov.w	ip, #10
 80077e4:	4619      	mov	r1, r3
 80077e6:	3401      	adds	r4, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4620      	mov	r0, r4
 80077ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f0:	3a30      	subs	r2, #48	@ 0x30
 80077f2:	2a09      	cmp	r2, #9
 80077f4:	d903      	bls.n	80077fe <_svfiprintf_r+0x1a6>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0c6      	beq.n	8007788 <_svfiprintf_r+0x130>
 80077fa:	9105      	str	r1, [sp, #20]
 80077fc:	e7c4      	b.n	8007788 <_svfiprintf_r+0x130>
 80077fe:	4604      	mov	r4, r0
 8007800:	2301      	movs	r3, #1
 8007802:	fb0c 2101 	mla	r1, ip, r1, r2
 8007806:	e7f0      	b.n	80077ea <_svfiprintf_r+0x192>
 8007808:	ab03      	add	r3, sp, #12
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	462a      	mov	r2, r5
 800780e:	4638      	mov	r0, r7
 8007810:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <_svfiprintf_r+0x1f4>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	f3af 8000 	nop.w
 8007818:	1c42      	adds	r2, r0, #1
 800781a:	4606      	mov	r6, r0
 800781c:	d1d6      	bne.n	80077cc <_svfiprintf_r+0x174>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	065b      	lsls	r3, r3, #25
 8007822:	f53f af2d 	bmi.w	8007680 <_svfiprintf_r+0x28>
 8007826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007828:	e72c      	b.n	8007684 <_svfiprintf_r+0x2c>
 800782a:	ab03      	add	r3, sp, #12
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	462a      	mov	r2, r5
 8007830:	4638      	mov	r0, r7
 8007832:	4b06      	ldr	r3, [pc, #24]	@ (800784c <_svfiprintf_r+0x1f4>)
 8007834:	a904      	add	r1, sp, #16
 8007836:	f000 f87d 	bl	8007934 <_printf_i>
 800783a:	e7ed      	b.n	8007818 <_svfiprintf_r+0x1c0>
 800783c:	08007fba 	.word	0x08007fba
 8007840:	08007fc0 	.word	0x08007fc0
 8007844:	08007fc4 	.word	0x08007fc4
 8007848:	00000000 	.word	0x00000000
 800784c:	080075a1 	.word	0x080075a1

08007850 <_printf_common>:
 8007850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	4616      	mov	r6, r2
 8007856:	4698      	mov	r8, r3
 8007858:	688a      	ldr	r2, [r1, #8]
 800785a:	690b      	ldr	r3, [r1, #16]
 800785c:	4607      	mov	r7, r0
 800785e:	4293      	cmp	r3, r2
 8007860:	bfb8      	it	lt
 8007862:	4613      	movlt	r3, r2
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800786a:	460c      	mov	r4, r1
 800786c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007870:	b10a      	cbz	r2, 8007876 <_printf_common+0x26>
 8007872:	3301      	adds	r3, #1
 8007874:	6033      	str	r3, [r6, #0]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	0699      	lsls	r1, r3, #26
 800787a:	bf42      	ittt	mi
 800787c:	6833      	ldrmi	r3, [r6, #0]
 800787e:	3302      	addmi	r3, #2
 8007880:	6033      	strmi	r3, [r6, #0]
 8007882:	6825      	ldr	r5, [r4, #0]
 8007884:	f015 0506 	ands.w	r5, r5, #6
 8007888:	d106      	bne.n	8007898 <_printf_common+0x48>
 800788a:	f104 0a19 	add.w	sl, r4, #25
 800788e:	68e3      	ldr	r3, [r4, #12]
 8007890:	6832      	ldr	r2, [r6, #0]
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	42ab      	cmp	r3, r5
 8007896:	dc2b      	bgt.n	80078f0 <_printf_common+0xa0>
 8007898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	3b00      	subs	r3, #0
 80078a0:	bf18      	it	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	0692      	lsls	r2, r2, #26
 80078a6:	d430      	bmi.n	800790a <_printf_common+0xba>
 80078a8:	4641      	mov	r1, r8
 80078aa:	4638      	mov	r0, r7
 80078ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078b0:	47c8      	blx	r9
 80078b2:	3001      	adds	r0, #1
 80078b4:	d023      	beq.n	80078fe <_printf_common+0xae>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	f003 0306 	and.w	r3, r3, #6
 80078be:	2b04      	cmp	r3, #4
 80078c0:	bf14      	ite	ne
 80078c2:	2500      	movne	r5, #0
 80078c4:	6833      	ldreq	r3, [r6, #0]
 80078c6:	f04f 0600 	mov.w	r6, #0
 80078ca:	bf08      	it	eq
 80078cc:	68e5      	ldreq	r5, [r4, #12]
 80078ce:	f104 041a 	add.w	r4, r4, #26
 80078d2:	bf08      	it	eq
 80078d4:	1aed      	subeq	r5, r5, r3
 80078d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078da:	bf08      	it	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bfc4      	itt	gt
 80078e4:	1a9b      	subgt	r3, r3, r2
 80078e6:	18ed      	addgt	r5, r5, r3
 80078e8:	42b5      	cmp	r5, r6
 80078ea:	d11a      	bne.n	8007922 <_printf_common+0xd2>
 80078ec:	2000      	movs	r0, #0
 80078ee:	e008      	b.n	8007902 <_printf_common+0xb2>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	4641      	mov	r1, r8
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c8      	blx	r9
 80078fa:	3001      	adds	r0, #1
 80078fc:	d103      	bne.n	8007906 <_printf_common+0xb6>
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007906:	3501      	adds	r5, #1
 8007908:	e7c1      	b.n	800788e <_printf_common+0x3e>
 800790a:	2030      	movs	r0, #48	@ 0x30
 800790c:	18e1      	adds	r1, r4, r3
 800790e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007918:	4422      	add	r2, r4
 800791a:	3302      	adds	r3, #2
 800791c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007920:	e7c2      	b.n	80078a8 <_printf_common+0x58>
 8007922:	2301      	movs	r3, #1
 8007924:	4622      	mov	r2, r4
 8007926:	4641      	mov	r1, r8
 8007928:	4638      	mov	r0, r7
 800792a:	47c8      	blx	r9
 800792c:	3001      	adds	r0, #1
 800792e:	d0e6      	beq.n	80078fe <_printf_common+0xae>
 8007930:	3601      	adds	r6, #1
 8007932:	e7d9      	b.n	80078e8 <_printf_common+0x98>

08007934 <_printf_i>:
 8007934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	7e0f      	ldrb	r7, [r1, #24]
 800793a:	4691      	mov	r9, r2
 800793c:	2f78      	cmp	r7, #120	@ 0x78
 800793e:	4680      	mov	r8, r0
 8007940:	460c      	mov	r4, r1
 8007942:	469a      	mov	sl, r3
 8007944:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800794a:	d807      	bhi.n	800795c <_printf_i+0x28>
 800794c:	2f62      	cmp	r7, #98	@ 0x62
 800794e:	d80a      	bhi.n	8007966 <_printf_i+0x32>
 8007950:	2f00      	cmp	r7, #0
 8007952:	f000 80d1 	beq.w	8007af8 <_printf_i+0x1c4>
 8007956:	2f58      	cmp	r7, #88	@ 0x58
 8007958:	f000 80b8 	beq.w	8007acc <_printf_i+0x198>
 800795c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007964:	e03a      	b.n	80079dc <_printf_i+0xa8>
 8007966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800796a:	2b15      	cmp	r3, #21
 800796c:	d8f6      	bhi.n	800795c <_printf_i+0x28>
 800796e:	a101      	add	r1, pc, #4	@ (adr r1, 8007974 <_printf_i+0x40>)
 8007970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079e1 	.word	0x080079e1
 800797c:	0800795d 	.word	0x0800795d
 8007980:	0800795d 	.word	0x0800795d
 8007984:	0800795d 	.word	0x0800795d
 8007988:	0800795d 	.word	0x0800795d
 800798c:	080079e1 	.word	0x080079e1
 8007990:	0800795d 	.word	0x0800795d
 8007994:	0800795d 	.word	0x0800795d
 8007998:	0800795d 	.word	0x0800795d
 800799c:	0800795d 	.word	0x0800795d
 80079a0:	08007adf 	.word	0x08007adf
 80079a4:	08007a0b 	.word	0x08007a0b
 80079a8:	08007a99 	.word	0x08007a99
 80079ac:	0800795d 	.word	0x0800795d
 80079b0:	0800795d 	.word	0x0800795d
 80079b4:	08007b01 	.word	0x08007b01
 80079b8:	0800795d 	.word	0x0800795d
 80079bc:	08007a0b 	.word	0x08007a0b
 80079c0:	0800795d 	.word	0x0800795d
 80079c4:	0800795d 	.word	0x0800795d
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	6833      	ldr	r3, [r6, #0]
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6032      	str	r2, [r6, #0]
 80079d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079dc:	2301      	movs	r3, #1
 80079de:	e09c      	b.n	8007b1a <_printf_i+0x1e6>
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	1d19      	adds	r1, r3, #4
 80079e6:	6031      	str	r1, [r6, #0]
 80079e8:	0606      	lsls	r6, r0, #24
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0xbc>
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	e003      	b.n	80079f8 <_printf_i+0xc4>
 80079f0:	0645      	lsls	r5, r0, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0xb8>
 80079f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079f8:	2d00      	cmp	r5, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xd0>
 80079fc:	232d      	movs	r3, #45	@ 0x2d
 80079fe:	426d      	negs	r5, r5
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a04:	230a      	movs	r3, #10
 8007a06:	4858      	ldr	r0, [pc, #352]	@ (8007b68 <_printf_i+0x234>)
 8007a08:	e011      	b.n	8007a2e <_printf_i+0xfa>
 8007a0a:	6821      	ldr	r1, [r4, #0]
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	0608      	lsls	r0, r1, #24
 8007a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a14:	d402      	bmi.n	8007a1c <_printf_i+0xe8>
 8007a16:	0649      	lsls	r1, r1, #25
 8007a18:	bf48      	it	mi
 8007a1a:	b2ad      	uxthmi	r5, r5
 8007a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	bf14      	ite	ne
 8007a22:	230a      	movne	r3, #10
 8007a24:	2308      	moveq	r3, #8
 8007a26:	4850      	ldr	r0, [pc, #320]	@ (8007b68 <_printf_i+0x234>)
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a2e:	6866      	ldr	r6, [r4, #4]
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	60a6      	str	r6, [r4, #8]
 8007a34:	db05      	blt.n	8007a42 <_printf_i+0x10e>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	432e      	orrs	r6, r5
 8007a3a:	f021 0104 	bic.w	r1, r1, #4
 8007a3e:	6021      	str	r1, [r4, #0]
 8007a40:	d04b      	beq.n	8007ada <_printf_i+0x1a6>
 8007a42:	4616      	mov	r6, r2
 8007a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a48:	fb03 5711 	mls	r7, r3, r1, r5
 8007a4c:	5dc7      	ldrb	r7, [r0, r7]
 8007a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a52:	462f      	mov	r7, r5
 8007a54:	42bb      	cmp	r3, r7
 8007a56:	460d      	mov	r5, r1
 8007a58:	d9f4      	bls.n	8007a44 <_printf_i+0x110>
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d10b      	bne.n	8007a76 <_printf_i+0x142>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07df      	lsls	r7, r3, #31
 8007a62:	d508      	bpl.n	8007a76 <_printf_i+0x142>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	6861      	ldr	r1, [r4, #4]
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	bfde      	ittt	le
 8007a6c:	2330      	movle	r3, #48	@ 0x30
 8007a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a76:	1b92      	subs	r2, r2, r6
 8007a78:	6122      	str	r2, [r4, #16]
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f8cd a000 	str.w	sl, [sp]
 8007a84:	aa03      	add	r2, sp, #12
 8007a86:	f7ff fee3 	bl	8007850 <_printf_common>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d14a      	bne.n	8007b24 <_printf_i+0x1f0>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b004      	add	sp, #16
 8007a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f043 0320 	orr.w	r3, r3, #32
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	2778      	movs	r7, #120	@ 0x78
 8007aa2:	4832      	ldr	r0, [pc, #200]	@ (8007b6c <_printf_i+0x238>)
 8007aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	6831      	ldr	r1, [r6, #0]
 8007aac:	061f      	lsls	r7, r3, #24
 8007aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ab2:	d402      	bmi.n	8007aba <_printf_i+0x186>
 8007ab4:	065f      	lsls	r7, r3, #25
 8007ab6:	bf48      	it	mi
 8007ab8:	b2ad      	uxthmi	r5, r5
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	07d9      	lsls	r1, r3, #31
 8007abe:	bf44      	itt	mi
 8007ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac4:	6023      	strmi	r3, [r4, #0]
 8007ac6:	b11d      	cbz	r5, 8007ad0 <_printf_i+0x19c>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	e7ad      	b.n	8007a28 <_printf_i+0xf4>
 8007acc:	4826      	ldr	r0, [pc, #152]	@ (8007b68 <_printf_i+0x234>)
 8007ace:	e7e9      	b.n	8007aa4 <_printf_i+0x170>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f023 0320 	bic.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e7f6      	b.n	8007ac8 <_printf_i+0x194>
 8007ada:	4616      	mov	r6, r2
 8007adc:	e7bd      	b.n	8007a5a <_printf_i+0x126>
 8007ade:	6833      	ldr	r3, [r6, #0]
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1d18      	adds	r0, r3, #4
 8007ae4:	6961      	ldr	r1, [r4, #20]
 8007ae6:	6030      	str	r0, [r6, #0]
 8007ae8:	062e      	lsls	r6, r5, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	d501      	bpl.n	8007af2 <_printf_i+0x1be>
 8007aee:	6019      	str	r1, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <_printf_i+0x1c4>
 8007af2:	0668      	lsls	r0, r5, #25
 8007af4:	d5fb      	bpl.n	8007aee <_printf_i+0x1ba>
 8007af6:	8019      	strh	r1, [r3, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	4616      	mov	r6, r2
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	e7bc      	b.n	8007a7a <_printf_i+0x146>
 8007b00:	6833      	ldr	r3, [r6, #0]
 8007b02:	2100      	movs	r1, #0
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	6032      	str	r2, [r6, #0]
 8007b08:	681e      	ldr	r6, [r3, #0]
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 f859 	bl	8007bc4 <memchr>
 8007b12:	b108      	cbz	r0, 8007b18 <_printf_i+0x1e4>
 8007b14:	1b80      	subs	r0, r0, r6
 8007b16:	6060      	str	r0, [r4, #4]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b22:	e7aa      	b.n	8007a7a <_printf_i+0x146>
 8007b24:	4632      	mov	r2, r6
 8007b26:	4649      	mov	r1, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	47d0      	blx	sl
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0ad      	beq.n	8007a8e <_printf_i+0x15a>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	079b      	lsls	r3, r3, #30
 8007b36:	d413      	bmi.n	8007b60 <_printf_i+0x22c>
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	4298      	cmp	r0, r3
 8007b3e:	bfb8      	it	lt
 8007b40:	4618      	movlt	r0, r3
 8007b42:	e7a6      	b.n	8007a92 <_printf_i+0x15e>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4632      	mov	r2, r6
 8007b48:	4649      	mov	r1, r9
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	47d0      	blx	sl
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d09d      	beq.n	8007a8e <_printf_i+0x15a>
 8007b52:	3501      	adds	r5, #1
 8007b54:	68e3      	ldr	r3, [r4, #12]
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	1a5b      	subs	r3, r3, r1
 8007b5a:	42ab      	cmp	r3, r5
 8007b5c:	dcf2      	bgt.n	8007b44 <_printf_i+0x210>
 8007b5e:	e7eb      	b.n	8007b38 <_printf_i+0x204>
 8007b60:	2500      	movs	r5, #0
 8007b62:	f104 0619 	add.w	r6, r4, #25
 8007b66:	e7f5      	b.n	8007b54 <_printf_i+0x220>
 8007b68:	08007fcb 	.word	0x08007fcb
 8007b6c:	08007fdc 	.word	0x08007fdc

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0402 	add.w	r4, r1, r2
 8007b78:	d902      	bls.n	8007b80 <memmove+0x10>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	d807      	bhi.n	8007b90 <memmove+0x20>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	d008      	beq.n	8007b98 <memmove+0x28>
 8007b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b8e:	e7f8      	b.n	8007b82 <memmove+0x12>
 8007b90:	4601      	mov	r1, r0
 8007b92:	4402      	add	r2, r0
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d100      	bne.n	8007b9a <memmove+0x2a>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x24>

08007ba4 <_sbrk_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4d05      	ldr	r5, [pc, #20]	@ (8007bc0 <_sbrk_r+0x1c>)
 8007baa:	4604      	mov	r4, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	f7fb fcdc 	bl	800356c <_sbrk>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_sbrk_r+0x1a>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_sbrk_r+0x1a>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	20000594 	.word	0x20000594

08007bc4 <memchr>:
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	b2c9      	uxtb	r1, r1
 8007bca:	4402      	add	r2, r0
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	d101      	bne.n	8007bd6 <memchr+0x12>
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e003      	b.n	8007bde <memchr+0x1a>
 8007bd6:	7804      	ldrb	r4, [r0, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	428c      	cmp	r4, r1
 8007bdc:	d1f6      	bne.n	8007bcc <memchr+0x8>
 8007bde:	bd10      	pop	{r4, pc}

08007be0 <memcpy>:
 8007be0:	440a      	add	r2, r1
 8007be2:	4291      	cmp	r1, r2
 8007be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be8:	d100      	bne.n	8007bec <memcpy+0xc>
 8007bea:	4770      	bx	lr
 8007bec:	b510      	push	{r4, lr}
 8007bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf8:	d1f9      	bne.n	8007bee <memcpy+0xe>
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <_realloc_r>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	4607      	mov	r7, r0
 8007c02:	4614      	mov	r4, r2
 8007c04:	460d      	mov	r5, r1
 8007c06:	b921      	cbnz	r1, 8007c12 <_realloc_r+0x16>
 8007c08:	4611      	mov	r1, r2
 8007c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	f7ff bc3b 	b.w	8007488 <_malloc_r>
 8007c12:	b92a      	cbnz	r2, 8007c20 <_realloc_r+0x24>
 8007c14:	f7ff fbce 	bl	80073b4 <_free_r>
 8007c18:	4625      	mov	r5, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	f000 f81a 	bl	8007c58 <_malloc_usable_size_r>
 8007c24:	4284      	cmp	r4, r0
 8007c26:	4606      	mov	r6, r0
 8007c28:	d802      	bhi.n	8007c30 <_realloc_r+0x34>
 8007c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c2e:	d8f4      	bhi.n	8007c1a <_realloc_r+0x1e>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4638      	mov	r0, r7
 8007c34:	f7ff fc28 	bl	8007488 <_malloc_r>
 8007c38:	4680      	mov	r8, r0
 8007c3a:	b908      	cbnz	r0, 8007c40 <_realloc_r+0x44>
 8007c3c:	4645      	mov	r5, r8
 8007c3e:	e7ec      	b.n	8007c1a <_realloc_r+0x1e>
 8007c40:	42b4      	cmp	r4, r6
 8007c42:	4622      	mov	r2, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	bf28      	it	cs
 8007c48:	4632      	movcs	r2, r6
 8007c4a:	f7ff ffc9 	bl	8007be0 <memcpy>
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff fbaf 	bl	80073b4 <_free_r>
 8007c56:	e7f1      	b.n	8007c3c <_realloc_r+0x40>

08007c58 <_malloc_usable_size_r>:
 8007c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5c:	1f18      	subs	r0, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbc      	itt	lt
 8007c62:	580b      	ldrlt	r3, [r1, r0]
 8007c64:	18c0      	addlt	r0, r0, r3
 8007c66:	4770      	bx	lr

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
