
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a514  0800a514  0000c0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a514  0800a514  0000b514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a51c  0800a51c  0000c0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a51c  0800a51c  0000b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a520  0800a520  0000b520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800a524  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200000a0  0800a5c4  0000c0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800a5c4  0000c518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138d2  00000000  00000000  0000c0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb4  00000000  00000000  0001f99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00023550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de4  00000000  00000000  00024778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a795  00000000  00000000  0002555c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dac  00000000  00000000  0003fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecfe  00000000  00000000  00058a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e779b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005384  00000000  00000000  000e77e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ecb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009b40 	.word	0x08009b40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08009b40 	.word	0x08009b40

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b98c 	b.w	8000a48 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	468e      	mov	lr, r1
 8000750:	4604      	mov	r4, r0
 8000752:	4688      	mov	r8, r1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d14a      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d962      	bls.n	8000824 <__udivmoddi4+0xdc>
 800075e:	fab2 f682 	clz	r6, r2
 8000762:	b14e      	cbz	r6, 8000778 <__udivmoddi4+0x30>
 8000764:	f1c6 0320 	rsb	r3, r6, #32
 8000768:	fa01 f806 	lsl.w	r8, r1, r6
 800076c:	fa20 f303 	lsr.w	r3, r0, r3
 8000770:	40b7      	lsls	r7, r6
 8000772:	ea43 0808 	orr.w	r8, r3, r8
 8000776:	40b4      	lsls	r4, r6
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000780:	fa1f fc87 	uxth.w	ip, r7
 8000784:	fb0e 8811 	mls	r8, lr, r1, r8
 8000788:	fb01 f20c 	mul.w	r2, r1, ip
 800078c:	0c23      	lsrs	r3, r4, #16
 800078e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000792:	429a      	cmp	r2, r3
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0x62>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f101 30ff 	add.w	r0, r1, #4294967295
 800079c:	f080 80eb 	bcs.w	8000976 <__udivmoddi4+0x22e>
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f240 80e8 	bls.w	8000976 <__udivmoddi4+0x22e>
 80007a6:	3902      	subs	r1, #2
 80007a8:	443b      	add	r3, r7
 80007aa:	1a9a      	subs	r2, r3, r2
 80007ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80007b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007b8:	b2a3      	uxth	r3, r4
 80007ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007be:	459c      	cmp	ip, r3
 80007c0:	d909      	bls.n	80007d6 <__udivmoddi4+0x8e>
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	f080 80d7 	bcs.w	800097a <__udivmoddi4+0x232>
 80007cc:	459c      	cmp	ip, r3
 80007ce:	f240 80d4 	bls.w	800097a <__udivmoddi4+0x232>
 80007d2:	443b      	add	r3, r7
 80007d4:	3802      	subs	r0, #2
 80007d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007da:	2100      	movs	r1, #0
 80007dc:	eba3 030c 	sub.w	r3, r3, ip
 80007e0:	b11d      	cbz	r5, 80007ea <__udivmoddi4+0xa2>
 80007e2:	2200      	movs	r2, #0
 80007e4:	40f3      	lsrs	r3, r6
 80007e6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d905      	bls.n	80007fe <__udivmoddi4+0xb6>
 80007f2:	b10d      	cbz	r5, 80007f8 <__udivmoddi4+0xb0>
 80007f4:	e9c5 0100 	strd	r0, r1, [r5]
 80007f8:	2100      	movs	r1, #0
 80007fa:	4608      	mov	r0, r1
 80007fc:	e7f5      	b.n	80007ea <__udivmoddi4+0xa2>
 80007fe:	fab3 f183 	clz	r1, r3
 8000802:	2900      	cmp	r1, #0
 8000804:	d146      	bne.n	8000894 <__udivmoddi4+0x14c>
 8000806:	4573      	cmp	r3, lr
 8000808:	d302      	bcc.n	8000810 <__udivmoddi4+0xc8>
 800080a:	4282      	cmp	r2, r0
 800080c:	f200 8108 	bhi.w	8000a20 <__udivmoddi4+0x2d8>
 8000810:	1a84      	subs	r4, r0, r2
 8000812:	eb6e 0203 	sbc.w	r2, lr, r3
 8000816:	2001      	movs	r0, #1
 8000818:	4690      	mov	r8, r2
 800081a:	2d00      	cmp	r5, #0
 800081c:	d0e5      	beq.n	80007ea <__udivmoddi4+0xa2>
 800081e:	e9c5 4800 	strd	r4, r8, [r5]
 8000822:	e7e2      	b.n	80007ea <__udivmoddi4+0xa2>
 8000824:	2a00      	cmp	r2, #0
 8000826:	f000 8091 	beq.w	800094c <__udivmoddi4+0x204>
 800082a:	fab2 f682 	clz	r6, r2
 800082e:	2e00      	cmp	r6, #0
 8000830:	f040 80a5 	bne.w	800097e <__udivmoddi4+0x236>
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	2101      	movs	r1, #1
 8000838:	0c03      	lsrs	r3, r0, #16
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	b280      	uxth	r0, r0
 8000840:	b2bc      	uxth	r4, r7
 8000842:	fbb2 fcfe 	udiv	ip, r2, lr
 8000846:	fb0e 221c 	mls	r2, lr, ip, r2
 800084a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084e:	fb04 f20c 	mul.w	r2, r4, ip
 8000852:	429a      	cmp	r2, r3
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x11e>
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	f10c 38ff 	add.w	r8, ip, #4294967295
 800085c:	d202      	bcs.n	8000864 <__udivmoddi4+0x11c>
 800085e:	429a      	cmp	r2, r3
 8000860:	f200 80e3 	bhi.w	8000a2a <__udivmoddi4+0x2e2>
 8000864:	46c4      	mov	ip, r8
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	fbb3 f2fe 	udiv	r2, r3, lr
 800086c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000870:	fb02 f404 	mul.w	r4, r2, r4
 8000874:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000878:	429c      	cmp	r4, r3
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x144>
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x142>
 8000884:	429c      	cmp	r4, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2dc>
 800088a:	4602      	mov	r2, r0
 800088c:	1b1b      	subs	r3, r3, r4
 800088e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000892:	e7a5      	b.n	80007e0 <__udivmoddi4+0x98>
 8000894:	f1c1 0620 	rsb	r6, r1, #32
 8000898:	408b      	lsls	r3, r1
 800089a:	fa22 f706 	lsr.w	r7, r2, r6
 800089e:	431f      	orrs	r7, r3
 80008a0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a8:	fbba f8f9 	udiv	r8, sl, r9
 80008ac:	fa0e fe01 	lsl.w	lr, lr, r1
 80008b0:	fa20 f306 	lsr.w	r3, r0, r6
 80008b4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008b8:	fa1f fc87 	uxth.w	ip, r7
 80008bc:	ea43 030e 	orr.w	r3, r3, lr
 80008c0:	fa00 fe01 	lsl.w	lr, r0, r1
 80008c4:	fb08 f00c 	mul.w	r0, r8, ip
 80008c8:	0c1c      	lsrs	r4, r3, #16
 80008ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ce:	42a0      	cmp	r0, r4
 80008d0:	fa02 f201 	lsl.w	r2, r2, r1
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x1a4>
 80008d6:	193c      	adds	r4, r7, r4
 80008d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008dc:	f080 809e 	bcs.w	8000a1c <__udivmoddi4+0x2d4>
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	f240 809b 	bls.w	8000a1c <__udivmoddi4+0x2d4>
 80008e6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ea:	443c      	add	r4, r7
 80008ec:	1a24      	subs	r4, r4, r0
 80008ee:	b298      	uxth	r0, r3
 80008f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f4:	fb09 4413 	mls	r4, r9, r3, r4
 80008f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80008fc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000900:	45a4      	cmp	ip, r4
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1d0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f103 30ff 	add.w	r0, r3, #4294967295
 800090a:	f080 8085 	bcs.w	8000a18 <__udivmoddi4+0x2d0>
 800090e:	45a4      	cmp	ip, r4
 8000910:	f240 8082 	bls.w	8000a18 <__udivmoddi4+0x2d0>
 8000914:	3b02      	subs	r3, #2
 8000916:	443c      	add	r4, r7
 8000918:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800091c:	eba4 040c 	sub.w	r4, r4, ip
 8000920:	fba0 8c02 	umull	r8, ip, r0, r2
 8000924:	4564      	cmp	r4, ip
 8000926:	4643      	mov	r3, r8
 8000928:	46e1      	mov	r9, ip
 800092a:	d364      	bcc.n	80009f6 <__udivmoddi4+0x2ae>
 800092c:	d061      	beq.n	80009f2 <__udivmoddi4+0x2aa>
 800092e:	b15d      	cbz	r5, 8000948 <__udivmoddi4+0x200>
 8000930:	ebbe 0203 	subs.w	r2, lr, r3
 8000934:	eb64 0409 	sbc.w	r4, r4, r9
 8000938:	fa04 f606 	lsl.w	r6, r4, r6
 800093c:	fa22 f301 	lsr.w	r3, r2, r1
 8000940:	431e      	orrs	r6, r3
 8000942:	40cc      	lsrs	r4, r1
 8000944:	e9c5 6400 	strd	r6, r4, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	e74e      	b.n	80007ea <__udivmoddi4+0xa2>
 800094c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000950:	0c01      	lsrs	r1, r0, #16
 8000952:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000956:	b280      	uxth	r0, r0
 8000958:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800095c:	463b      	mov	r3, r7
 800095e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000962:	4638      	mov	r0, r7
 8000964:	463c      	mov	r4, r7
 8000966:	46b8      	mov	r8, r7
 8000968:	46be      	mov	lr, r7
 800096a:	2620      	movs	r6, #32
 800096c:	eba2 0208 	sub.w	r2, r2, r8
 8000970:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000974:	e765      	b.n	8000842 <__udivmoddi4+0xfa>
 8000976:	4601      	mov	r1, r0
 8000978:	e717      	b.n	80007aa <__udivmoddi4+0x62>
 800097a:	4610      	mov	r0, r2
 800097c:	e72b      	b.n	80007d6 <__udivmoddi4+0x8e>
 800097e:	f1c6 0120 	rsb	r1, r6, #32
 8000982:	fa2e fc01 	lsr.w	ip, lr, r1
 8000986:	40b7      	lsls	r7, r6
 8000988:	fa0e fe06 	lsl.w	lr, lr, r6
 800098c:	fa20 f101 	lsr.w	r1, r0, r1
 8000990:	ea41 010e 	orr.w	r1, r1, lr
 8000994:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000998:	fbbc f8fe 	udiv	r8, ip, lr
 800099c:	b2bc      	uxth	r4, r7
 800099e:	fb0e cc18 	mls	ip, lr, r8, ip
 80009a2:	fb08 f904 	mul.w	r9, r8, r4
 80009a6:	0c0a      	lsrs	r2, r1, #16
 80009a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ac:	40b0      	lsls	r0, r6
 80009ae:	4591      	cmp	r9, r2
 80009b0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	d93e      	bls.n	8000a36 <__udivmoddi4+0x2ee>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80009be:	d201      	bcs.n	80009c4 <__udivmoddi4+0x27c>
 80009c0:	4591      	cmp	r9, r2
 80009c2:	d81f      	bhi.n	8000a04 <__udivmoddi4+0x2bc>
 80009c4:	eba2 0209 	sub.w	r2, r2, r9
 80009c8:	fbb2 f9fe 	udiv	r9, r2, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80009d4:	b28a      	uxth	r2, r1
 80009d6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80009da:	4542      	cmp	r2, r8
 80009dc:	d229      	bcs.n	8000a32 <__udivmoddi4+0x2ea>
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	f109 31ff 	add.w	r1, r9, #4294967295
 80009e4:	d2c2      	bcs.n	800096c <__udivmoddi4+0x224>
 80009e6:	4542      	cmp	r2, r8
 80009e8:	d2c0      	bcs.n	800096c <__udivmoddi4+0x224>
 80009ea:	f1a9 0102 	sub.w	r1, r9, #2
 80009ee:	443a      	add	r2, r7
 80009f0:	e7bc      	b.n	800096c <__udivmoddi4+0x224>
 80009f2:	45c6      	cmp	lr, r8
 80009f4:	d29b      	bcs.n	800092e <__udivmoddi4+0x1e6>
 80009f6:	ebb8 0302 	subs.w	r3, r8, r2
 80009fa:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009fe:	3801      	subs	r0, #1
 8000a00:	46e1      	mov	r9, ip
 8000a02:	e794      	b.n	800092e <__udivmoddi4+0x1e6>
 8000a04:	eba7 0909 	sub.w	r9, r7, r9
 8000a08:	444a      	add	r2, r9
 8000a0a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a12:	fb09 f804 	mul.w	r8, r9, r4
 8000a16:	e7db      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e77d      	b.n	8000918 <__udivmoddi4+0x1d0>
 8000a1c:	46d0      	mov	r8, sl
 8000a1e:	e765      	b.n	80008ec <__udivmoddi4+0x1a4>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e6fa      	b.n	800081a <__udivmoddi4+0xd2>
 8000a24:	443b      	add	r3, r7
 8000a26:	3a02      	subs	r2, #2
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x144>
 8000a2a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a2e:	443b      	add	r3, r7
 8000a30:	e719      	b.n	8000866 <__udivmoddi4+0x11e>
 8000a32:	4649      	mov	r1, r9
 8000a34:	e79a      	b.n	800096c <__udivmoddi4+0x224>
 8000a36:	eba2 0209 	sub.w	r2, r2, r9
 8000a3a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a3e:	46c4      	mov	ip, r8
 8000a40:	fb09 f804 	mul.w	r8, r9, r4
 8000a44:	e7c4      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a46:	bf00      	nop

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f003 fdd5 	bl	8004604 <HAL_ADCEx_Calibration_Start>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <ADC_Init+0x18>
    {
        Error_Handler();
 8000a60:	f001 f932 	bl	8001cc8 <Error_Handler>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a86:	2306      	movs	r3, #6
 8000a88:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000a8a:	4b88      	ldr	r3, [pc, #544]	@ (8000cac <ADC_ReadAllChannels+0x240>)
 8000a8c:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000a94:	4b86      	ldr	r3, [pc, #536]	@ (8000cb0 <ADC_ReadAllChannels+0x244>)
 8000a96:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a9e:	e0fb      	b.n	8000c98 <ADC_ReadAllChannels+0x22c>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aa4:	4a83      	ldr	r2, [pc, #524]	@ (8000cb4 <ADC_ReadAllChannels+0x248>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f003 fc12 	bl	80042dc <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f003 fa4f 	bl	8003f5c <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000abe:	210a      	movs	r1, #10
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f003 faf9 	bl	80040b8 <HAL_ADC_PollForConversion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80c9 	bne.w	8000c60 <ADC_ReadAllChannels+0x1f4>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000ace:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f003 fbf6 	bl	80042c4 <HAL_ADC_GetValue>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fbf6 	bl	80002dc <__aeabi_ui2f>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4971      	ldr	r1, [pc, #452]	@ (8000cb8 <ADC_ReadAllChannels+0x24c>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc49 	bl	800038c <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000b00:	496e      	ldr	r1, [pc, #440]	@ (8000cbc <ADC_ReadAllChannels+0x250>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fcf6 	bl	80004f4 <__aeabi_fdiv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	1da2      	adds	r2, r4, #6
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000b14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3206      	adds	r2, #6
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4614      	mov	r4, r2
 8000b24:	4966      	ldr	r1, [pc, #408]	@ (8000cc0 <ADC_ReadAllChannels+0x254>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fde2 	bl	80006f0 <__aeabi_fcmpge>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <ADC_ReadAllChannels+0xca>
 8000b32:	2300      	movs	r3, #0
 8000b34:	461c      	mov	r4, r3
 8000b36:	b2e2      	uxtb	r2, r4
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000b48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	3206      	adds	r2, #6
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	f7ff fdd4 	bl	8000704 <__aeabi_fcmpgt>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000b62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3206      	adds	r2, #6
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3206      	adds	r2, #6
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6a38      	ldr	r0, [r7, #32]
 8000b8e:	f7ff fda5 	bl	80006dc <__aeabi_fcmple>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d04d      	beq.n	8000c34 <ADC_ReadAllChannels+0x1c8>
            {
                switch (i)
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d875      	bhi.n	8000c8c <ADC_ReadAllChannels+0x220>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ADC_ReadAllChannels+0x13c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000bed 	.word	0x08000bed
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c1d 	.word	0x08000c1d
                {
                    case 0: // IN0
                        sprintf(dataPacketTx, "@10W#"); // Use sprintf to format the string
 8000bbc:	4941      	ldr	r1, [pc, #260]	@ (8000cc4 <ADC_ReadAllChannels+0x258>)
 8000bbe:	4842      	ldr	r0, [pc, #264]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc0:	f007 febe 	bl	8008940 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc6:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bc8:	f002 ffee 	bl	8003ba8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
                        break;
 8000bd2:	e05c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 1: // IN1
                        sprintf(dataPacketTx, "@30W#");
 8000bd4:	493f      	ldr	r1, [pc, #252]	@ (8000cd4 <ADC_ReadAllChannels+0x268>)
 8000bd6:	483c      	ldr	r0, [pc, #240]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bd8:	f007 feb2 	bl	8008940 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bdc:	493a      	ldr	r1, [pc, #232]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bde:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000be0:	f002 ffe2 	bl	8003ba8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
                        break;
 8000bea:	e050      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 2: // IN2
                        sprintf(dataPacketTx, "@70W#");
 8000bec:	493a      	ldr	r1, [pc, #232]	@ (8000cd8 <ADC_ReadAllChannels+0x26c>)
 8000bee:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf0:	f007 fea6 	bl	8008940 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bf4:	4934      	ldr	r1, [pc, #208]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf6:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bf8:	f002 ffd6 	bl	8003ba8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
                        break;
 8000c02:	e044      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 3: // IN3
                        sprintf(dataPacketTx, "@1:W#");
 8000c04:	4935      	ldr	r1, [pc, #212]	@ (8000cdc <ADC_ReadAllChannels+0x270>)
 8000c06:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c08:	f007 fe9a 	bl	8008940 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c0c:	492e      	ldr	r1, [pc, #184]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c10:	f002 ffca 	bl	8003ba8 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
                        break;
 8000c1a:	e038      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 4: // IN4
                        sprintf(dataPacketTx, "@DRY#");
 8000c1c:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <ADC_ReadAllChannels+0x274>)
 8000c1e:	482a      	ldr	r0, [pc, #168]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c20:	f007 fe8e 	bl	8008940 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c24:	4928      	ldr	r1, [pc, #160]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c28:	f002 ffbe 	bl	8003ba8 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
                        break;
 8000c32:	e02c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000c34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3206      	adds	r2, #6
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	4619      	mov	r1, r3
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f7ff fd5e 	bl	8000704 <__aeabi_fcmpgt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <ADC_ReadAllChannels+0x222>
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <ADC_ReadAllChannels+0x222>
            {
                // If the voltage is below the dry run threshold and the motor is on
                // This part was commented out in the original, keeping it commented for consistency
                // sprintf(dataPacketTx, "@MT0#");
                // UART_TransmitString(&huart1, dataPacketTx);
                motorStatus = 0; // Set motor status to off
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e016      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3206      	adds	r2, #6
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000c8a:	e000      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                        break;
 8000c8c:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	f67f aeff 	bls.w	8000aa0 <ADC_ReadAllChannels+0x34>
        }
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	372c      	adds	r7, #44	@ 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40400000 	.word	0x40400000
 8000cb0:	3dcccccd 	.word	0x3dcccccd
 8000cb4:	0800a36c 	.word	0x0800a36c
 8000cb8:	40533333 	.word	0x40533333
 8000cbc:	457ff000 	.word	0x457ff000
 8000cc0:	404ccccd 	.word	0x404ccccd
 8000cc4:	08009b58 	.word	0x08009b58
 8000cc8:	200000bc 	.word	0x200000bc
 8000ccc:	2000020c 	.word	0x2000020c
 8000cd0:	200002cc 	.word	0x200002cc
 8000cd4:	08009b60 	.word	0x08009b60
 8000cd8:	08009b68 	.word	0x08009b68
 8000cdc:	08009b70 	.word	0x08009b70
 8000ce0:	08009b78 	.word	0x08009b78

08000ce4 <lcd_send_cmd>:
/** Put this in the src folder **/

extern I2C_HandleTypeDef hi2c2;  // use your I2C handler

void lcd_send_cmd(char cmd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f023 030f 	bic.w	r3, r3, #15
 8000cf4:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	73bb      	strb	r3, [r7, #14]

    // Always keep backlight ON
    data_t[0] = data_u | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f043 030c 	orr.w	r3, r3, #12
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	f043 030c 	orr.w	r3, r3, #12
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	214e      	movs	r1, #78	@ 0x4e
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <lcd_send_cmd+0x5c>)
 8000d32:	f004 f91b 	bl	8004f6c <HAL_I2C_Master_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000014c 	.word	0x2000014c

08000d44 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f023 030f 	bic.w	r3, r3, #15
 8000d54:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	73bb      	strb	r3, [r7, #14]

    // Always keep backlight ON
    data_t[0] = data_u | 0x0D | LCD_BACKLIGHT;  // en=1, rs=1
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	f043 030d 	orr.w	r3, r3, #13
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09 | LCD_BACKLIGHT;  // en=0, rs=1
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f043 0309 	orr.w	r3, r3, #9
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D | LCD_BACKLIGHT;  // en=1, rs=1
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	f043 030d 	orr.w	r3, r3, #13
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09 | LCD_BACKLIGHT;  // en=0, rs=1
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	f043 0309 	orr.w	r3, r3, #9
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000d84:	f107 0208 	add.w	r2, r7, #8
 8000d88:	2364      	movs	r3, #100	@ 0x64
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	214e      	movs	r1, #78	@ 0x4e
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <lcd_send_data+0x5c>)
 8000d92:	f004 f8eb 	bl	8004f6c <HAL_I2C_Master_Transmit>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000014c 	.word	0x2000014c

08000da4 <lcd_clear>:

void lcd_clear(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01); // Clear display
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff9b 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(2);       // Wait for clear command to execute
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 ffd8 	bl	8003d64 <HAL_Delay>
    lcd_send_cmd(0x80); // Set cursor to 0,0
 8000db4:	2080      	movs	r0, #128	@ 0x80
 8000db6:	f7ff ff95 	bl	8000ce4 <lcd_send_cmd>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <lcd_put_cur+0x18>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d005      	beq.n	8000de0 <lcd_put_cur+0x22>
 8000dd4:	e009      	b.n	8000dea <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Line 1
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	603b      	str	r3, [r7, #0]
            break;
 8000dde:	e004      	b.n	8000dea <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Line 2
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000de6:	603b      	str	r3, [r7, #0]
            break;
 8000de8:	bf00      	nop
    }
    lcd_send_cmd(col);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff78 	bl	8000ce4 <lcd_send_cmd>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <lcd_init>:

void lcd_init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // wait >40ms after power-on
 8000e00:	2032      	movs	r0, #50	@ 0x32
 8000e02:	f002 ffaf 	bl	8003d64 <HAL_Delay>

    // 4-bit init sequence
    lcd_send_cmd(0x30);
 8000e06:	2030      	movs	r0, #48	@ 0x30
 8000e08:	f7ff ff6c 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(5);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f002 ffa9 	bl	8003d64 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000e12:	2030      	movs	r0, #48	@ 0x30
 8000e14:	f7ff ff66 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f002 ffa3 	bl	8003d64 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000e1e:	2030      	movs	r0, #48	@ 0x30
 8000e20:	f7ff ff60 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f002 ff9d 	bl	8003d64 <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8000e2a:	2020      	movs	r0, #32
 8000e2c:	f7ff ff5a 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f002 ff97 	bl	8003d64 <HAL_Delay>

    // Function set: 2-line, 5x8 dots
    lcd_send_cmd(0x28);
 8000e36:	2028      	movs	r0, #40	@ 0x28
 8000e38:	f7ff ff54 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f002 ff91 	bl	8003d64 <HAL_Delay>

    // Display OFF
    lcd_send_cmd(0x08);
 8000e42:	2008      	movs	r0, #8
 8000e44:	f7ff ff4e 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f002 ff8b 	bl	8003d64 <HAL_Delay>

    // Clear display
    lcd_send_cmd(0x01);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff48 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f002 ff85 	bl	8003d64 <HAL_Delay>

    // Entry mode set: increment cursor
    lcd_send_cmd(0x06);
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff ff42 	bl	8000ce4 <lcd_send_cmd>
    HAL_Delay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f002 ff7f 	bl	8003d64 <HAL_Delay>

    // Display ON, Cursor OFF, Blink OFF
    lcd_send_cmd(0x0C);
 8000e66:	200c      	movs	r0, #12
 8000e68:	f7ff ff3c 	bl	8000ce4 <lcd_send_cmd>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8000e78:	e006      	b.n	8000e88 <lcd_send_string+0x18>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff5e 	bl	8000d44 <lcd_send_data>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f4      	bne.n	8000e7a <lcd_send_string+0xa>
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <LED_ClearAllIntents>:
        }
    }
}

void LED_ClearAllIntents(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	e00d      	b.n	8000ec4 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <LED_ClearAllIntents+0x3c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <LED_ClearAllIntents+0x3c>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	ddee      	ble.n	8000ea8 <LED_ClearAllIntents+0xc>
    }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200000c8 	.word	0x200000c8

08000edc <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d80b      	bhi.n	8000f0c <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <LED_SetIntent+0x3c>)
 8000ef8:	79ba      	ldrb	r2, [r7, #6]
 8000efa:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <LED_SetIntent+0x3c>)
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	805a      	strh	r2, [r3, #2]
 8000f0a:	e000      	b.n	8000f0e <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8000f0c:	bf00      	nop
}
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200000c8 	.word	0x200000c8

08000f1c <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	733b      	strb	r3, [r7, #12]
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4c:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <LoRa_WriteReg+0x50>)
 8000f4e:	f003 feb0 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <LoRa_WriteReg+0x54>)
 8000f5e:	f006 fc9b 	bl	8007898 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <LoRa_WriteReg+0x50>)
 8000f6a:	f003 fea2 	bl	8004cb2 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	200001b4 	.word	0x200001b4

08000f80 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f9e:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <LoRa_ReadReg+0x5c>)
 8000fa0:	f003 fe87 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000fa4:	f107 010f 	add.w	r1, r7, #15
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	2201      	movs	r2, #1
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoRa_ReadReg+0x60>)
 8000fb0:	f006 fc72 	bl	8007898 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000fb4:	f107 010e 	add.w	r1, r7, #14
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <LoRa_ReadReg+0x60>)
 8000fc0:	f006 fdae 	bl	8007b20 <HAL_SPI_Receive>
    NSS_HIGH();
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <LoRa_ReadReg+0x5c>)
 8000fcc:	f003 fe71 	bl	8004cb2 <HAL_GPIO_WritePin>
    return rx;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	200001b4 	.word	0x200001b4

08000fe4 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <LoRa_WriteBuffer+0x5c>)
 8001006:	f003 fe54 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	@ (8001044 <LoRa_WriteBuffer+0x60>)
 8001016:	f006 fc3f 	bl	8007898 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <LoRa_WriteBuffer+0x60>)
 8001026:	f006 fc37 	bl	8007898 <HAL_SPI_Transmit>
    NSS_HIGH();
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <LoRa_WriteBuffer+0x5c>)
 8001032:	f003 fe3e 	bl	8004cb2 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010800 	.word	0x40010800
 8001044:	200001b4 	.word	0x200001b4

08001048 <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001068:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <LoRa_ReadBuffer+0x5c>)
 800106a:	f003 fe22 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2201      	movs	r2, #1
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <LoRa_ReadBuffer+0x60>)
 800107a:	f006 fc0d 	bl	8007898 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <LoRa_ReadBuffer+0x60>)
 800108a:	f006 fd49 	bl	8007b20 <HAL_SPI_Receive>
    NSS_HIGH();
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <LoRa_ReadBuffer+0x5c>)
 8001096:	f003 fe0c 	bl	8004cb2 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010800 	.word	0x40010800
 80010a8:	200001b4 	.word	0x200001b4

080010ac <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	@ 0x40
 80010b4:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <LoRa_Reset+0x28>)
 80010b6:	f003 fdfc 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80010ba:	2002      	movs	r0, #2
 80010bc:	f002 fe52 	bl	8003d64 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	@ 0x40
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <LoRa_Reset+0x28>)
 80010c6:	f003 fdf4 	bl	8004cb2 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f002 fe4a 	bl	8003d64 <HAL_Delay>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	2000      	movs	r0, #0
 80010e4:	460a      	mov	r2, r1
 80010e6:	4603      	mov	r3, r0
 80010e8:	0b55      	lsrs	r5, r2, #13
 80010ea:	04d4      	lsls	r4, r2, #19
 80010ec:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <LoRa_SetFrequency+0x78>)
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fb0f 	bl	8000718 <__aeabi_uldivmod>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8001102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	0c02      	lsrs	r2, r0, #16
 8001110:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001114:	0c0b      	lsrs	r3, r1, #16
 8001116:	b2d3      	uxtb	r3, r2
 8001118:	4619      	mov	r1, r3
 800111a:	2006      	movs	r0, #6
 800111c:	f7ff ff04 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	0a02      	lsrs	r2, r0, #8
 800112e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001132:	0a0b      	lsrs	r3, r1, #8
 8001134:	b2d3      	uxtb	r3, r2
 8001136:	4619      	mov	r1, r3
 8001138:	2007      	movs	r0, #7
 800113a:	f7ff fef5 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	4619      	mov	r1, r3
 8001142:	2008      	movs	r0, #8
 8001144:	f7ff fef0 	bl	8000f28 <LoRa_WriteReg>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	01e84800 	.word	0x01e84800

08001154 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8001158:	f7ff ffa8 	bl	80010ac <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fee2 	bl	8000f28 <LoRa_WriteReg>
    HAL_Delay(5);
 8001164:	2005      	movs	r0, #5
 8001166:	f002 fdfd 	bl	8003d64 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800116a:	2180      	movs	r1, #128	@ 0x80
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fedb 	bl	8000f28 <LoRa_WriteReg>
    HAL_Delay(5);
 8001172:	2005      	movs	r0, #5
 8001174:	f002 fdf6 	bl	8003d64 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 8001178:	4818      	ldr	r0, [pc, #96]	@ (80011dc <LoRa_Init+0x88>)
 800117a:	f7ff ffad 	bl	80010d8 <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 800117e:	218f      	movs	r1, #143	@ 0x8f
 8001180:	2009      	movs	r0, #9
 8001182:	f7ff fed1 	bl	8000f28 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 8001186:	2187      	movs	r1, #135	@ 0x87
 8001188:	204d      	movs	r0, #77	@ 0x4d
 800118a:	f7ff fecd 	bl	8000f28 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 800118e:	2123      	movs	r1, #35	@ 0x23
 8001190:	200c      	movs	r0, #12
 8001192:	f7ff fec9 	bl	8000f28 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 8001196:	2172      	movs	r1, #114	@ 0x72
 8001198:	201d      	movs	r0, #29
 800119a:	f7ff fec5 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 800119e:	2174      	movs	r1, #116	@ 0x74
 80011a0:	201e      	movs	r0, #30
 80011a2:	f7ff fec1 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80011a6:	2104      	movs	r1, #4
 80011a8:	2026      	movs	r0, #38	@ 0x26
 80011aa:	f7ff febd 	bl	8000f28 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2020      	movs	r0, #32
 80011b2:	f7ff feb9 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80011b6:	2108      	movs	r1, #8
 80011b8:	2021      	movs	r0, #33	@ 0x21
 80011ba:	f7ff feb5 	bl	8000f28 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80011be:	2122      	movs	r1, #34	@ 0x22
 80011c0:	2039      	movs	r0, #57	@ 0x39
 80011c2:	f7ff feb1 	bl	8000f28 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2040      	movs	r0, #64	@ 0x40
 80011ca:	f7ff fead 	bl	8000f28 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80011ce:	21ff      	movs	r1, #255	@ 0xff
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fea9 	bl	8000f28 <LoRa_WriteReg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	19cf0e40 	.word	0x19cf0e40

080011e0 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 80011e4:	2181      	movs	r1, #129	@ 0x81
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff fe9e 	bl	8000f28 <LoRa_WriteReg>
    HAL_Delay(2);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f002 fdb9 	bl	8003d64 <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 80011fa:	2185      	movs	r1, #133	@ 0x85
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fe93 	bl	8000f28 <LoRa_WriteReg>
    HAL_Delay(2);
 8001202:	2002      	movs	r0, #2
 8001204:	f002 fdae 	bl	8003d64 <HAL_Delay>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 8001210:	2183      	movs	r1, #131	@ 0x83
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fe88 	bl	8000f28 <LoRa_WriteReg>
    HAL_Delay(2);
 8001218:	2002      	movs	r0, #2
 800121a:	f002 fda3 	bl	8003d64 <HAL_Delay>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 800122e:	f7ff ffd7 	bl	80011e0 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 8001232:	2100      	movs	r1, #0
 8001234:	200e      	movs	r0, #14
 8001236:	f7ff fe77 	bl	8000f28 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 800123a:	2100      	movs	r1, #0
 800123c:	200d      	movs	r0, #13
 800123e:	f7ff fe73 	bl	8000f28 <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	461a      	mov	r2, r3
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fecb 	bl	8000fe4 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	4619      	mov	r1, r3
 8001252:	2022      	movs	r0, #34	@ 0x22
 8001254:	f7ff fe68 	bl	8000f28 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8001258:	21ff      	movs	r1, #255	@ 0xff
 800125a:	2012      	movs	r0, #18
 800125c:	f7ff fe64 	bl	8000f28 <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 8001260:	f7ff ffd4 	bl	800120c <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 8001264:	f002 fd74 	bl	8003d50 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 800126a:	e00a      	b.n	8001282 <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 800126c:	f002 fd70 	bl	8003d50 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800127a:	d80b      	bhi.n	8001294 <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f002 fd71 	bl	8003d64 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 8001282:	2012      	movs	r0, #18
 8001284:	f7ff fe7c 	bl	8000f80 <LoRa_ReadReg>
 8001288:	4603      	mov	r3, r0
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0ec      	beq.n	800126c <LoRa_SendPacket+0x4a>
 8001292:	e000      	b.n	8001296 <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 8001294:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 8001296:	2108      	movs	r1, #8
 8001298:	2012      	movs	r0, #18
 800129a:	f7ff fe45 	bl	8000f28 <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 800129e:	f7ff ffaa 	bl	80011f6 <LoRa_SetRxContinuous>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f7ff fe64 	bl	8000f80 <LoRa_ReadReg>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d025      	beq.n	8001312 <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 80012d0:	21ff      	movs	r1, #255	@ 0xff
 80012d2:	2012      	movs	r0, #18
 80012d4:	f7ff fe28 	bl	8000f28 <LoRa_WriteReg>
            return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e01b      	b.n	8001314 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 80012dc:	2013      	movs	r0, #19
 80012de:	f7ff fe4f 	bl	8000f80 <LoRa_ReadReg>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff fe4a 	bl	8000f80 <LoRa_ReadReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	4619      	mov	r1, r3
 80012f4:	200d      	movs	r0, #13
 80012f6:	f7ff fe17 	bl	8000f28 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	461a      	mov	r2, r3
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fea1 	bl	8001048 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 8001306:	21ff      	movs	r1, #255	@ 0xff
 8001308:	2012      	movs	r0, #18
 800130a:	f7ff fe0d 	bl	8000f28 <LoRa_WriteReg>
        return nb;
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	e000      	b.n	8001314 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b098      	sub	sp, #96	@ 0x60
 8001320:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001322:	4bb0      	ldr	r3, [pc, #704]	@ (80015e4 <LoRa_Task+0x2c8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <LoRa_Task+0x16>
 800132a:	4bae      	ldr	r3, [pc, #696]	@ (80015e4 <LoRa_Task+0x2c8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d105      	bne.n	800133e <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 8001332:	f7ff ff60 	bl	80011f6 <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 8001336:	48ac      	ldr	r0, [pc, #688]	@ (80015e8 <LoRa_Task+0x2cc>)
 8001338:	f000 f9e8 	bl	800170c <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 800133c:	e004      	b.n	8001348 <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 800133e:	f7ff ff4f 	bl	80011e0 <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 8001342:	48aa      	ldr	r0, [pc, #680]	@ (80015ec <LoRa_Task+0x2d0>)
 8001344:	f000 f9e2 	bl	800170c <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 8001348:	2042      	movs	r0, #66	@ 0x42
 800134a:	f7ff fe19 	bl	8000f80 <LoRa_ReadReg>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 8001354:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001358:	2b12      	cmp	r3, #18
 800135a:	d012      	beq.n	8001382 <LoRa_Task+0x66>
        z = 1;
 800135c:	4ba4      	ldr	r3, [pc, #656]	@ (80015f0 <LoRa_Task+0x2d4>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8001362:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8001366:	463b      	mov	r3, r7
 8001368:	49a2      	ldr	r1, [pc, #648]	@ (80015f4 <LoRa_Task+0x2d8>)
 800136a:	4618      	mov	r0, r3
 800136c:	f007 fae8 	bl	8008940 <siprintf>
        Debug_Print(errMsg);
 8001370:	463b      	mov	r3, r7
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f9ca 	bl	800170c <Debug_Print>
        HAL_Delay(2000);
 8001378:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800137c:	f002 fcf2 	bl	8003d64 <HAL_Delay>
 8001380:	e188      	b.n	8001694 <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 8001382:	4b98      	ldr	r3, [pc, #608]	@ (80015e4 <LoRa_Task+0x2c8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b03      	cmp	r3, #3
 8001388:	f000 80c1 	beq.w	800150e <LoRa_Task+0x1f2>
 800138c:	2b03      	cmp	r3, #3
 800138e:	f300 8179 	bgt.w	8001684 <LoRa_Task+0x368>
 8001392:	2b01      	cmp	r3, #1
 8001394:	d002      	beq.n	800139c <LoRa_Task+0x80>
 8001396:	2b02      	cmp	r3, #2
 8001398:	d01a      	beq.n	80013d0 <LoRa_Task+0xb4>
 800139a:	e173      	b.n	8001684 <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 800139c:	4896      	ldr	r0, [pc, #600]	@ (80015f8 <LoRa_Task+0x2dc>)
 800139e:	f000 f9b5 	bl	800170c <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 80013a2:	4a96      	ldr	r2, [pc, #600]	@ (80015fc <LoRa_Task+0x2e0>)
 80013a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013aa:	c303      	stmia	r3!, {r0, r1}
 80013ac:	701a      	strb	r2, [r3, #0]
            z = 5;
 80013ae:	4b90      	ldr	r3, [pc, #576]	@ (80015f0 <LoRa_Task+0x2d4>)
 80013b0:	2205      	movs	r2, #5
 80013b2:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 80013b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013b8:	2108      	movs	r1, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff31 	bl	8001222 <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 80013c0:	488f      	ldr	r0, [pc, #572]	@ (8001600 <LoRa_Task+0x2e4>)
 80013c2:	f000 f9a3 	bl	800170c <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 80013c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ca:	f002 fccb 	bl	8003d64 <HAL_Delay>
            break;
 80013ce:	e161      	b.n	8001694 <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 80013d0:	488c      	ldr	r0, [pc, #560]	@ (8001604 <LoRa_Task+0x2e8>)
 80013d2:	f000 f99b 	bl	800170c <Debug_Print>
            connectionStatus = 0; // Reset connection status
 80013d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <LoRa_Task+0x2ec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 80013dc:	2300      	movs	r3, #0
 80013de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013e0:	e038      	b.n	8001454 <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80013e2:	488a      	ldr	r0, [pc, #552]	@ (800160c <LoRa_Task+0x2f0>)
 80013e4:	f7ff ff61 	bl	80012aa <LoRa_ReceivePacket>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 80013ee:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d028      	beq.n	8001448 <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 80013f6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80013fa:	4a84      	ldr	r2, [pc, #528]	@ (800160c <LoRa_Task+0x2f0>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 8001400:	463b      	mov	r3, r7
 8001402:	4a82      	ldr	r2, [pc, #520]	@ (800160c <LoRa_Task+0x2f0>)
 8001404:	4982      	ldr	r1, [pc, #520]	@ (8001610 <LoRa_Task+0x2f4>)
 8001406:	4618      	mov	r0, r3
 8001408:	f007 fa9a 	bl	8008940 <siprintf>
                    Debug_Print(dbg_rx);
 800140c:	463b      	mov	r3, r7
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f97c 	bl	800170c <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001414:	2204      	movs	r2, #4
 8001416:	497f      	ldr	r1, [pc, #508]	@ (8001614 <LoRa_Task+0x2f8>)
 8001418:	487c      	ldr	r0, [pc, #496]	@ (800160c <LoRa_Task+0x2f0>)
 800141a:	f007 fae9 	bl	80089f0 <strncmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 8001424:	4b7c      	ldr	r3, [pc, #496]	@ (8001618 <LoRa_Task+0x2fc>)
 8001426:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8001428:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800142c:	2103      	movs	r1, #3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fef7 	bl	8001222 <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 8001434:	4879      	ldr	r0, [pc, #484]	@ (800161c <LoRa_Task+0x300>)
 8001436:	f000 f969 	bl	800170c <Debug_Print>

                        connectionStatus = 1;
 800143a:	4b73      	ldr	r3, [pc, #460]	@ (8001608 <LoRa_Task+0x2ec>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 8001440:	4b6b      	ldr	r3, [pc, #428]	@ (80015f0 <LoRa_Task+0x2d4>)
 8001442:	2206      	movs	r2, #6
 8001444:	701a      	strb	r2, [r3, #0]
                        break;
 8001446:	e008      	b.n	800145a <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 8001448:	2019      	movs	r0, #25
 800144a:	f002 fc8b 	bl	8003d64 <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 800144e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001450:	3301      	adds	r3, #1
 8001452:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001456:	2b27      	cmp	r3, #39	@ 0x27
 8001458:	ddc3      	ble.n	80013e2 <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 800145a:	4b6b      	ldr	r3, [pc, #428]	@ (8001608 <LoRa_Task+0x2ec>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10a      	bne.n	8001478 <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 8001462:	486f      	ldr	r0, [pc, #444]	@ (8001620 <LoRa_Task+0x304>)
 8001464:	f000 f952 	bl	800170c <Debug_Print>
                z = 7;
 8001468:	4b61      	ldr	r3, [pc, #388]	@ (80015f0 <LoRa_Task+0x2d4>)
 800146a:	2207      	movs	r2, #7
 800146c:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 800146e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001472:	f002 fc77 	bl	8003d64 <HAL_Delay>
 8001476:	e046      	b.n	8001506 <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 8001478:	486a      	ldr	r0, [pc, #424]	@ (8001624 <LoRa_Task+0x308>)
 800147a:	f000 f947 	bl	800170c <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 800147e:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <LoRa_Task+0x2ec>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 8001484:	2300      	movs	r3, #0
 8001486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001488:	e030      	b.n	80014ec <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 800148a:	4860      	ldr	r0, [pc, #384]	@ (800160c <LoRa_Task+0x2f0>)
 800148c:	f7ff ff0d 	bl	80012aa <LoRa_ReceivePacket>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 8001496:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800149a:	2b00      	cmp	r3, #0
 800149c:	d020      	beq.n	80014e0 <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 800149e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014a2:	4a5a      	ldr	r2, [pc, #360]	@ (800160c <LoRa_Task+0x2f0>)
 80014a4:	2100      	movs	r1, #0
 80014a6:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 80014a8:	463b      	mov	r3, r7
 80014aa:	4a58      	ldr	r2, [pc, #352]	@ (800160c <LoRa_Task+0x2f0>)
 80014ac:	495e      	ldr	r1, [pc, #376]	@ (8001628 <LoRa_Task+0x30c>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fa46 	bl	8008940 <siprintf>
                        Debug_Print(dbg_rx2);
 80014b4:	463b      	mov	r3, r7
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f928 	bl	800170c <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 80014bc:	2205      	movs	r2, #5
 80014be:	495b      	ldr	r1, [pc, #364]	@ (800162c <LoRa_Task+0x310>)
 80014c0:	4852      	ldr	r0, [pc, #328]	@ (800160c <LoRa_Task+0x2f0>)
 80014c2:	f007 fa95 	bl	80089f0 <strncmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 80014cc:	4858      	ldr	r0, [pc, #352]	@ (8001630 <LoRa_Task+0x314>)
 80014ce:	f000 f91d 	bl	800170c <Debug_Print>
                            connectionStatus = 1;
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <LoRa_Task+0x2ec>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <LoRa_Task+0x2d4>)
 80014da:	2208      	movs	r2, #8
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e008      	b.n	80014f2 <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 80014e0:	2019      	movs	r0, #25
 80014e2:	f002 fc3f 	bl	8003d64 <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 80014e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014e8:	3301      	adds	r3, #1
 80014ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ee:	2b27      	cmp	r3, #39	@ 0x27
 80014f0:	ddcb      	ble.n	800148a <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 80014f2:	4b45      	ldr	r3, [pc, #276]	@ (8001608 <LoRa_Task+0x2ec>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 80014fa:	484e      	ldr	r0, [pc, #312]	@ (8001634 <LoRa_Task+0x318>)
 80014fc:	f000 f906 	bl	800170c <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 8001500:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <LoRa_Task+0x2d4>)
 8001502:	2209      	movs	r2, #9
 8001504:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 8001506:	2064      	movs	r0, #100	@ 0x64
 8001508:	f002 fc2c 	bl	8003d64 <HAL_Delay>
            break;
 800150c:	e0c2      	b.n	8001694 <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 800150e:	484a      	ldr	r0, [pc, #296]	@ (8001638 <LoRa_Task+0x31c>)
 8001510:	f000 f8fc 	bl	800170c <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 8001514:	483d      	ldr	r0, [pc, #244]	@ (800160c <LoRa_Task+0x2f0>)
 8001516:	f7ff fec8 	bl	80012aa <LoRa_ReceivePacket>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 8001520:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 8001528:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800152c:	4a37      	ldr	r2, [pc, #220]	@ (800160c <LoRa_Task+0x2f0>)
 800152e:	2100      	movs	r1, #0
 8001530:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 8001532:	463b      	mov	r3, r7
 8001534:	4a35      	ldr	r2, [pc, #212]	@ (800160c <LoRa_Task+0x2f0>)
 8001536:	4936      	ldr	r1, [pc, #216]	@ (8001610 <LoRa_Task+0x2f4>)
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fa01 	bl	8008940 <siprintf>
                Debug_Print(dbg_rx_tr);
 800153e:	463b      	mov	r3, r7
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8e3 	bl	800170c <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001546:	2204      	movs	r2, #4
 8001548:	4932      	ldr	r1, [pc, #200]	@ (8001614 <LoRa_Task+0x2f8>)
 800154a:	4830      	ldr	r0, [pc, #192]	@ (800160c <LoRa_Task+0x2f0>)
 800154c:	f007 fa50 	bl	80089f0 <strncmp>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10a      	bne.n	800156c <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <LoRa_Task+0x2fc>)
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 800155a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800155e:	2103      	movs	r1, #3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe5e 	bl	8001222 <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 8001566:	482d      	ldr	r0, [pc, #180]	@ (800161c <LoRa_Task+0x300>)
 8001568:	f000 f8d0 	bl	800170c <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <LoRa_Task+0x320>)
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 8001576:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800157a:	2104      	movs	r1, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe50 	bl	8001222 <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 8001582:	482f      	ldr	r0, [pc, #188]	@ (8001640 <LoRa_Task+0x324>)
 8001584:	f000 f8c2 	bl	800170c <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <LoRa_Task+0x2ec>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 800158e:	2300      	movs	r3, #0
 8001590:	657b      	str	r3, [r7, #84]	@ 0x54
 8001592:	e061      	b.n	8001658 <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8001594:	481d      	ldr	r0, [pc, #116]	@ (800160c <LoRa_Task+0x2f0>)
 8001596:	f7ff fe88 	bl	80012aa <LoRa_ReceivePacket>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 80015a0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d051      	beq.n	800164c <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 80015a8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80015ac:	4a17      	ldr	r2, [pc, #92]	@ (800160c <LoRa_Task+0x2f0>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 80015b2:	463b      	mov	r3, r7
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <LoRa_Task+0x2f0>)
 80015b6:	4923      	ldr	r1, [pc, #140]	@ (8001644 <LoRa_Task+0x328>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f007 f9c1 	bl	8008940 <siprintf>
                    Debug_Print(dbg_ack);
 80015be:	463b      	mov	r3, r7
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f8a3 	bl	800170c <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 80015c6:	2203      	movs	r2, #3
 80015c8:	491f      	ldr	r1, [pc, #124]	@ (8001648 <LoRa_Task+0x32c>)
 80015ca:	4810      	ldr	r0, [pc, #64]	@ (800160c <LoRa_Task+0x2f0>)
 80015cc:	f007 fa10 	bl	80089f0 <strncmp>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d13a      	bne.n	800164c <LoRa_Task+0x330>
                        connectionStatus = 1;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <LoRa_Task+0x2ec>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
                        z = 3;
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <LoRa_Task+0x2d4>)
 80015de:	2203      	movs	r2, #3
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e03c      	b.n	800165e <LoRa_Task+0x342>
 80015e4:	20000000 	.word	0x20000000
 80015e8:	08009b80 	.word	0x08009b80
 80015ec:	08009ba4 	.word	0x08009ba4
 80015f0:	200000f8 	.word	0x200000f8
 80015f4:	08009bc0 	.word	0x08009bc0
 80015f8:	08009be4 	.word	0x08009be4
 80015fc:	08009d8c 	.word	0x08009d8c
 8001600:	08009c00 	.word	0x08009c00
 8001604:	08009c14 	.word	0x08009c14
 8001608:	200000f9 	.word	0x200000f9
 800160c:	200000d8 	.word	0x200000d8
 8001610:	08009c2c 	.word	0x08009c2c
 8001614:	08009c3c 	.word	0x08009c3c
 8001618:	004b4341 	.word	0x004b4341
 800161c:	08009c44 	.word	0x08009c44
 8001620:	08009c50 	.word	0x08009c50
 8001624:	08009c78 	.word	0x08009c78
 8001628:	08009c90 	.word	0x08009c90
 800162c:	08009ca4 	.word	0x08009ca4
 8001630:	08009cac 	.word	0x08009cac
 8001634:	08009ce0 	.word	0x08009ce0
 8001638:	08009d00 	.word	0x08009d00
 800163c:	474e4950 	.word	0x474e4950
 8001640:	08009d1c 	.word	0x08009d1c
 8001644:	08009d2c 	.word	0x08009d2c
 8001648:	08009d48 	.word	0x08009d48
                        break;
                    }
                }
                HAL_Delay(25);
 800164c:	2019      	movs	r0, #25
 800164e:	f002 fb89 	bl	8003d64 <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001654:	3301      	adds	r3, #1
 8001656:	657b      	str	r3, [r7, #84]	@ 0x54
 8001658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165a:	2b13      	cmp	r3, #19
 800165c:	dd9a      	ble.n	8001594 <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <LoRa_Task+0x380>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <LoRa_Task+0x384>)
 8001668:	f000 f850 	bl	800170c <Debug_Print>
                z = 4;
 800166c:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <LoRa_Task+0x388>)
 800166e:	2204      	movs	r2, #4
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e002      	b.n	800167a <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoRa_Task+0x38c>)
 8001676:	f000 f849 	bl	800170c <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 800167a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800167e:	f002 fb71 	bl	8003d64 <HAL_Delay>
            break;
 8001682:	e007      	b.n	8001694 <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <LoRa_Task+0x390>)
 8001686:	f000 f841 	bl	800170c <Debug_Print>
            HAL_Delay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168e:	f002 fb69 	bl	8003d64 <HAL_Delay>
            break;
 8001692:	bf00      	nop
    }
}
 8001694:	3760      	adds	r7, #96	@ 0x60
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000f9 	.word	0x200000f9
 80016a0:	08009d4c 	.word	0x08009d4c
 80016a4:	200000f8 	.word	0x200000f8
 80016a8:	08009d60 	.word	0x08009d60
 80016ac:	08009d74 	.word	0x08009d74

080016b0 <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i < 128; i++) {
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e017      	b.n	80016ec <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (i << 1), 2, 10) == HAL_OK) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	b299      	uxth	r1, r3
 80016c4:	230a      	movs	r3, #10
 80016c6:	2202      	movs	r2, #2
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <I2C_Scan+0x50>)
 80016ca:	f003 ffc1 	bl	8005650 <HAL_I2C_IsDeviceReady>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d108      	bne.n	80016e6 <I2C_Scan+0x36>
            sprintf(buf, "Found device at 0x%02X\r\n", i);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	461a      	mov	r2, r3
 80016d8:	490a      	ldr	r1, [pc, #40]	@ (8001704 <I2C_Scan+0x54>)
 80016da:	480b      	ldr	r0, [pc, #44]	@ (8001708 <I2C_Scan+0x58>)
 80016dc:	f007 f930 	bl	8008940 <siprintf>
            Debug_Print(buf);
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <I2C_Scan+0x58>)
 80016e2:	f000 f813 	bl	800170c <Debug_Print>
    for (uint8_t i = 1; i < 128; i++) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	3301      	adds	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	dae3      	bge.n	80016bc <I2C_Scan+0xc>
        }
    }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000014c 	.word	0x2000014c
 8001704:	08009d98 	.word	0x08009d98
 8001708:	200000fc 	.word	0x200000fc

0800170c <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4803      	ldr	r0, [pc, #12]	@ (8001724 <Debug_Print+0x18>)
 8001718:	f002 fa46 	bl	8003ba8 <UART_TransmitString>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000020c 	.word	0x2000020c

08001728 <ProcessUartCommand>:

// Function to process received UART commands
void ProcessUartCommand(const char* command) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    // Example processing:
    if (strcmp(command, "@MOTOR_ON#") == 0) {
 8001730:	490f      	ldr	r1, [pc, #60]	@ (8001770 <ProcessUartCommand+0x48>)
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe fd0a 	bl	800014c <strcmp>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <ProcessUartCommand+0x24>
        // Turn motor on logic
        Debug_Print("Received command: MOTOR ON\r\n");
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <ProcessUartCommand+0x4c>)
 8001740:	f7ff ffe4 	bl	800170c <Debug_Print>
        motorStatus = 1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <ProcessUartCommand+0x50>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
        // Turn motor off logic
        Debug_Print("Received command: MOTOR OFF\r\n");
        motorStatus = 0;
    }
    // Add more command processing as needed
}
 800174a:	e00c      	b.n	8001766 <ProcessUartCommand+0x3e>
    } else if (strcmp(command, "@MOTOR_OFF#") == 0) {
 800174c:	490b      	ldr	r1, [pc, #44]	@ (800177c <ProcessUartCommand+0x54>)
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fcfc 	bl	800014c <strcmp>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <ProcessUartCommand+0x3e>
        Debug_Print("Received command: MOTOR OFF\r\n");
 800175a:	4809      	ldr	r0, [pc, #36]	@ (8001780 <ProcessUartCommand+0x58>)
 800175c:	f7ff ffd6 	bl	800170c <Debug_Print>
        motorStatus = 0;
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <ProcessUartCommand+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	08009db4 	.word	0x08009db4
 8001774:	08009dc0 	.word	0x08009dc0
 8001778:	200002cc 	.word	0x200002cc
 800177c:	08009de0 	.word	0x08009de0
 8001780:	08009dec 	.word	0x08009dec

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0ae      	sub	sp, #184	@ 0xb8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178a:	f002 fa89 	bl	8003ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178e:	f000 f887 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f000 fa13 	bl	8001bbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001796:	f000 f8e1 	bl	800195c <MX_ADC1_Init>
  MX_RTC_Init();
 800179a:	f000 f94b 	bl	8001a34 <MX_RTC_Init>
  MX_SPI1_Init();
 800179e:	f000 f9ad 	bl	8001afc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017a2:	f000 f9e1 	bl	8001b68 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80017a6:	f000 f917 	bl	80019d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80017aa:	f7ff fb27 	bl	8000dfc <lcd_init>
  ADC_Init(&hadc1);
 80017ae:	4833      	ldr	r0, [pc, #204]	@ (800187c <main+0xf8>)
 80017b0:	f7ff f94c 	bl	8000a4c <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 80017b4:	f7ff fcce 	bl	8001154 <LoRa_Init>
  I2C_Scan();
 80017b8:	f7ff ff7a 	bl	80016b0 <I2C_Scan>
  Screen_Init();
 80017bc:	f001 fa46 	bl	8002c4c <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 80017c0:	f002 f9d4 	bl	8003b6c <UART_Init>

  Debug_Print("System Initialized\r\n");
 80017c4:	482e      	ldr	r0, [pc, #184]	@ (8001880 <main+0xfc>)
 80017c6:	f7ff ffa1 	bl	800170c <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 80017ca:	201d      	movs	r0, #29
 80017cc:	f7ff fbd8 	bl	8000f80 <LoRa_ReadReg>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 80017d6:	201e      	movs	r0, #30
 80017d8:	f7ff fbd2 	bl	8000f80 <LoRa_ReadReg>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  char dbg[50];

  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 80017e2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80017e6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80017ea:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80017ee:	4925      	ldr	r1, [pc, #148]	@ (8001884 <main+0x100>)
 80017f0:	f007 f8a6 	bl	8008940 <siprintf>
  Debug_Print(dbg);
 80017f4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff87 	bl	800170c <Debug_Print>
  if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDRESS, 2, 100) != HAL_OK) {
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	2202      	movs	r2, #2
 8001802:	21d0      	movs	r1, #208	@ 0xd0
 8001804:	4820      	ldr	r0, [pc, #128]	@ (8001888 <main+0x104>)
 8001806:	f003 ff23 	bl	8005650 <HAL_I2C_IsDeviceReady>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <main+0x94>
      Debug_Print("❌ DS3231 not responding!\r\n");
 8001810:	481e      	ldr	r0, [pc, #120]	@ (800188c <main+0x108>)
 8001812:	f7ff ff7b 	bl	800170c <Debug_Print>
 8001816:	e002      	b.n	800181e <main+0x9a>
  } else {
      Debug_Print("✅ DS3231 detected!\r\n");
 8001818:	481d      	ldr	r0, [pc, #116]	@ (8001890 <main+0x10c>)
 800181a:	f7ff ff77 	bl	800170c <Debug_Print>
  }
  // DELETE this whole block in main.c (right after peripheral init)
  if (packetReady) {
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <main+0x110>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <main+0xba>
      char buffer[128];
      if (UART_GetReceivedPacket(buffer, sizeof(buffer))) {
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	4618      	mov	r0, r3
 800182e:	f002 f9cf 	bl	8003bd0 <UART_GetReceivedPacket>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <main+0xba>
    	  ModelHandle_ProcessUartCommand(receivedUartPacket);
 8001838:	4817      	ldr	r0, [pc, #92]	@ (8001898 <main+0x114>)
 800183a:	f000 fd3f 	bl	80022bc <ModelHandle_ProcessUartCommand>

      }
  }

         // Process all active modes
         ModelHandle_Process();
 800183e:	f000 fecd 	bl	80025dc <ModelHandle_Process>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
         LoRa_Task();
 8001842:	f7ff fd6b 	bl	800131c <LoRa_Task>
         Get_Time();
 8001846:	f000 ff2f 	bl	80026a8 <Get_Time>
         ADC_ReadAllChannels(&hadc1, &adcData);
 800184a:	4914      	ldr	r1, [pc, #80]	@ (800189c <main+0x118>)
 800184c:	480b      	ldr	r0, [pc, #44]	@ (800187c <main+0xf8>)
 800184e:	f7ff f90d 	bl	8000a6c <ADC_ReadAllChannels>

         // 2) UI input then UI draw
         Screen_HandleSwitches(); // maps SW1..SW4 -> Reset/Select/Up/Down
 8001852:	f001 fefb 	bl	800364c <Screen_HandleSwitches>
         Screen_Update();
 8001856:	f001 fdcb 	bl	80033f0 <Screen_Update>

         // 3) existing UART packet processing (your code)
         if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 800185a:	2140      	movs	r1, #64	@ 0x40
 800185c:	480e      	ldr	r0, [pc, #56]	@ (8001898 <main+0x114>)
 800185e:	f002 f9b7 	bl	8003bd0 <UART_GetReceivedPacket>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <main+0xea>
             ProcessUartCommand(receivedUartPacket);
 8001868:	480b      	ldr	r0, [pc, #44]	@ (8001898 <main+0x114>)
 800186a:	f7ff ff5d 	bl	8001728 <ProcessUartCommand>
         }

         // model processing (timers/search/twist/countdown)
         ModelHandle_Process();
 800186e:	f000 feb5 	bl	80025dc <ModelHandle_Process>
 8001872:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8001874:	4618      	mov	r0, r3
 8001876:	37b8      	adds	r7, #184	@ 0xb8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000011c 	.word	0x2000011c
 8001880:	08009e0c 	.word	0x08009e0c
 8001884:	08009e24 	.word	0x08009e24
 8001888:	2000014c 	.word	0x2000014c
 800188c:	08009e4c 	.word	0x08009e4c
 8001890:	08009e6c 	.word	0x08009e6c
 8001894:	200000c6 	.word	0x200000c6
 8001898:	2000028c 	.word	0x2000028c
 800189c:	20000254 	.word	0x20000254

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	@ 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018aa:	2228      	movs	r2, #40	@ 0x28
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f007 f896 	bl	80089e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018de:	2301      	movs	r3, #1
 80018e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80018f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fb90 	bl	800601c <HAL_RCC_OscConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001902:	f000 f9e1 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001906:	230f      	movs	r3, #15
 8001908:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001916:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fdfc 	bl	8006520 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800192e:	f000 f9cb 	bl	8001cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001932:	2303      	movs	r3, #3
 8001934:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800193a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800193c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001940:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f004 ff79 	bl	800683c <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001950:	f000 f9ba 	bl	8001cc8 <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_ADC1_Init+0x74>)
 800196e:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <MX_ADC1_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <MX_ADC1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_ADC1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <MX_ADC1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <MX_ADC1_Init+0x74>)
 8001986:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800198a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_ADC1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <MX_ADC1_Init+0x74>)
 8001994:	2201      	movs	r2, #1
 8001996:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001998:	480d      	ldr	r0, [pc, #52]	@ (80019d0 <MX_ADC1_Init+0x74>)
 800199a:	f002 fa07 	bl	8003dac <HAL_ADC_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019a4:	f000 f990 	bl	8001cc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_ADC1_Init+0x74>)
 80019ba:	f002 fc8f 	bl	80042dc <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019c4:	f000 f980 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000011c 	.word	0x2000011c
 80019d4:	40012400 	.word	0x40012400

080019d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <MX_I2C2_Init+0x54>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_I2C2_Init+0x58>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a16:	f003 f965 	bl	8004ce4 <HAL_I2C_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a20:	f000 f952 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000014c 	.word	0x2000014c
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	000186a0 	.word	0x000186a0

08001a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2100      	movs	r1, #0
 8001a40:	460a      	mov	r2, r1
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	460a      	mov	r2, r1
 8001a46:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a54:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001a56:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <MX_RTC_Init+0xc4>)
 8001a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a68:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a6a:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001a6c:	f005 f852 	bl	8006b14 <HAL_RTC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a76:	f000 f927 	bl	8001cc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8001a7a:	2313      	movs	r3, #19
 8001a7c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001a90:	f005 f8cc 	bl	8006c2c <HAL_RTC_SetTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001a9a:	f000 f915 	bl	8001cc8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001ab8:	f005 fa28 	bl	8006f0c <HAL_RTC_SetDate>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001ac2:	f000 f901 	bl	8001cc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8001ac6:	2313      	movs	r3, #19
 8001ac8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_RTC_Init+0xc0>)
 8001ade:	f005 facb 	bl	8007078 <HAL_RTC_SetAlarm_IT>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001ae8:	f000 f8ee 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200001a0 	.word	0x200001a0
 8001af8:	40002800 	.word	0x40002800

08001afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <MX_SPI1_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b30:	2218      	movs	r2, #24
 8001b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b4e:	f005 fe1f 	bl	8007790 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b58:	f000 f8b6 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001b4 	.word	0x200001b4
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <MX_USART1_UART_Init+0x50>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f006 fb8b 	bl	80082ba <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001baa:	f000 f88d 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000020c 	.word	0x2000020c
 8001bb8:	40013800 	.word	0x40013800

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a39      	ldr	r2, [pc, #228]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a33      	ldr	r2, [pc, #204]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a2d      	ldr	r2, [pc, #180]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a27      	ldr	r2, [pc, #156]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <MX_GPIO_Init+0x100>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001c30:	2200      	movs	r2, #0
 8001c32:	f248 3147 	movw	r1, #33607	@ 0x8347
 8001c36:	4822      	ldr	r0, [pc, #136]	@ (8001cc0 <MX_GPIO_Init+0x104>)
 8001c38:	f003 f83b 	bl	8004cb2 <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001c42:	4820      	ldr	r0, [pc, #128]	@ (8001cc4 <MX_GPIO_Init+0x108>)
 8001c44:	f003 f835 	bl	8004cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001c48:	23c0      	movs	r3, #192	@ 0xc0
 8001c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	481b      	ldr	r0, [pc, #108]	@ (8001cc4 <MX_GPIO_Init+0x108>)
 8001c58:	f002 fe90 	bl	800497c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001c5c:	f248 3347 	movw	r3, #33607	@ 0x8347
 8001c60:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	4812      	ldr	r0, [pc, #72]	@ (8001cc0 <MX_GPIO_Init+0x104>)
 8001c76:	f002 fe81 	bl	800497c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin RF_DATA_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|RF_DATA_Pin;
 8001c7a:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <MX_GPIO_Init+0x104>)
 8001c90:	f002 fe74 	bl	800497c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001c94:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_GPIO_Init+0x108>)
 8001cae:	f002 fe65 	bl	800497c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40010800 	.word	0x40010800

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <Error_Handler+0x8>

08001cd4 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	f002 f83a 	bl	8003d50 <HAL_GetTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460a      	mov	r2, r1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001cf8:	fb02 f103 	mul.w	r1, r2, r3
 8001cfc:	79ba      	ldrb	r2, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
	...

08001d14 <ModelHandle_SecondsToTime>:

void ModelHandle_SecondsToTime(uint32_t sec, uint8_t* hh, uint8_t* mm) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
    sec %= 24UL * 3600UL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a16      	ldr	r2, [pc, #88]	@ (8001d7c <ModelHandle_SecondsToTime+0x68>)
 8001d24:	fba2 1203 	umull	r1, r2, r2, r3
 8001d28:	0c12      	lsrs	r2, r2, #16
 8001d2a:	4915      	ldr	r1, [pc, #84]	@ (8001d80 <ModelHandle_SecondsToTime+0x6c>)
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    if (hh) *hh = (uint8_t)(sec / 3600UL);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <ModelHandle_SecondsToTime+0x36>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <ModelHandle_SecondsToTime+0x70>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0adb      	lsrs	r3, r3, #11
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	701a      	strb	r2, [r3, #0]
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <ModelHandle_SecondsToTime+0x5e>
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <ModelHandle_SecondsToTime+0x70>)
 8001d54:	fba3 1302 	umull	r1, r3, r3, r2
 8001d58:	0adb      	lsrs	r3, r3, #11
 8001d5a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <ModelHandle_SecondsToTime+0x74>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	c22e4507 	.word	0xc22e4507
 8001d80:	00015180 	.word	0x00015180
 8001d84:	91a2b3c5 	.word	0x91a2b3c5
 8001d88:	88888889 	.word	0x88888889

08001d8c <motor_apply>:

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 fc3e 	bl	800261c <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <motor_apply+0x1e>
 8001da6:	2201      	movs	r2, #1
 8001da8:	e000      	b.n	8001dac <motor_apply+0x20>
 8001daa:	2200      	movs	r2, #0
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <motor_apply+0x58>)
 8001dae:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00f      	beq.n	8001dd6 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <motor_apply+0x5c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <motor_apply+0x50>
            maxRunTimerArmed = true;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <motor_apply+0x5c>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8001dca:	f7ff ff83 	bl	8001cd4 <now_ms>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <motor_apply+0x60>)
 8001dd2:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8001dd4:	e002      	b.n	8001ddc <motor_apply+0x50>
        maxRunTimerArmed = false;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <motor_apply+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200002cc 	.word	0x200002cc
 8001de8:	20000318 	.word	0x20000318
 8001dec:	2000031c 	.word	0x2000031c

08001df0 <countdown_start>:

/* ===== Countdown ===== */
static void countdown_start(bool onMode, uint32_t seconds)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
    if (seconds == 0) { countdownActive = false; return; }
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <countdown_start+0x1a>
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <countdown_start+0x5c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e01d      	b.n	8001e46 <countdown_start+0x56>
    countdownMode     = onMode;
 8001e0a:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <countdown_start+0x60>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	7013      	strb	r3, [r2, #0]
    countdownDuration = seconds;
 8001e10:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <countdown_start+0x64>)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6013      	str	r3, [r2, #0]
    countdownActive   = true;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <countdown_start+0x5c>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    countdownDeadline = now_ms() + (seconds * 1000UL);
 8001e1c:	f7ff ff5a 	bl	8001cd4 <now_ms>
 8001e20:	4602      	mov	r2, r0
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <countdown_start+0x68>)
 8001e30:	6013      	str	r3, [r2, #0]

    if (onMode) motor_apply(true);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <countdown_start+0x50>
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ffa7 	bl	8001d8c <motor_apply>
 8001e3e:	e002      	b.n	8001e46 <countdown_start+0x56>
    else        motor_apply(false);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff ffa3 	bl	8001d8c <motor_apply>
}
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200002cd 	.word	0x200002cd
 8001e50:	20000001 	.word	0x20000001
 8001e54:	200002d0 	.word	0x200002d0
 8001e58:	200002d4 	.word	0x200002d4

08001e5c <countdown_tick>:

static void countdown_tick(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <countdown_tick+0x74>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d12a      	bne.n	8001ec8 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8001e72:	f7ff ff2f 	bl	8001cd4 <now_ms>
 8001e76:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <countdown_tick+0x78>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dc12      	bgt.n	8001eaa <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <countdown_tick+0x7c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <countdown_tick+0x3a>
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff ff7c 	bl	8001d8c <motor_apply>
 8001e94:	e002      	b.n	8001e9c <countdown_tick+0x40>
        else               motor_apply(true);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff78 	bl	8001d8c <motor_apply>
        countdownActive   = false;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <countdown_tick+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <countdown_tick+0x80>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
        return;
 8001ea8:	e00f      	b.n	8001eca <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <countdown_tick+0x78>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <countdown_tick+0x84>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4a06      	ldr	r2, [pc, #24]	@ (8001edc <countdown_tick+0x80>)
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e000      	b.n	8001eca <countdown_tick+0x6e>
    if (!countdownActive) return;
 8001ec8:	bf00      	nop
}
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200002cd 	.word	0x200002cd
 8001ed4:	200002d4 	.word	0x200002d4
 8001ed8:	20000001 	.word	0x20000001
 8001edc:	200002d0 	.word	0x200002d0
 8001ee0:	10624dd3 	.word	0x10624dd3

08001ee4 <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <twist_tick+0x90>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d137      	bne.n	8001f68 <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8001ef8:	f7ff feec 	bl	8001cd4 <now_ms>
 8001efc:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <twist_tick+0x94>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dc30      	bgt.n	8001f6c <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <twist_tick+0x98>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf14      	ite	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	2300      	moveq	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <twist_tick+0x98>)
 8001f26:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <twist_tick+0x98>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <twist_tick+0x68>
        motor_apply(true);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff ff2b 	bl	8001d8c <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <twist_tick+0x90>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <twist_tick+0x94>)
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e010      	b.n	8001f6e <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ff1d 	bl	8001d8c <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <twist_tick+0x90>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <twist_tick+0x94>)
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e002      	b.n	8001f6e <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8001f68:	bf00      	nop
 8001f6a:	e000      	b.n	8001f6e <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001f6c:	bf00      	nop
    }
}
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000010 	.word	0x20000010
 8001f78:	20000324 	.word	0x20000324
 8001f7c:	20000320 	.word	0x20000320

08001f80 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <search_tick+0x84>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d131      	bne.n	8001ff8 <search_tick+0x78>

    uint32_t tnow = now_ms();
 8001f94:	f7ff fe9e 	bl	8001cd4 <now_ms>
 8001f98:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <search_tick+0x88>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	dc2a      	bgt.n	8001ffc <search_tick+0x7c>

    if (!search_in_test) {
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <search_tick+0x8c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f083 0301 	eor.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <search_tick+0x56>
        search_in_test = true;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <search_tick+0x8c>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fee6 	bl	8001d8c <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <search_tick+0x84>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fc8:	fb03 f202 	mul.w	r2, r3, r2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <search_tick+0x88>)
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e013      	b.n	8001ffe <search_tick+0x7e>
    } else {
        motor_apply(false);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fed8 	bl	8001d8c <motor_apply>
        search_in_test = false;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <search_tick+0x8c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <search_tick+0x84>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <search_tick+0x88>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e002      	b.n	8001ffe <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 8001ff8:	bf00      	nop
 8001ffa:	e000      	b.n	8001ffe <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001ffc:	bf00      	nop
    }
}
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000004 	.word	0x20000004
 8002008:	2000032c 	.word	0x2000032c
 800200c:	20000328 	.word	0x20000328

08002010 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 8002016:	f7ff fe5d 	bl	8001cd4 <now_ms>
 800201a:	4603      	mov	r3, r0
 800201c:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <seconds_since_midnight+0x30>)
 800201e:	fba2 1203 	umull	r1, r2, r2, r3
 8002022:	0e12      	lsrs	r2, r2, #24
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <seconds_since_midnight+0x34>)
 8002026:	fb01 f202 	mul.w	r2, r1, r2
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <seconds_since_midnight+0x38>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	099b      	lsrs	r3, r3, #6
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	31b5d43b 	.word	0x31b5d43b
 8002044:	05265c00 	.word	0x05265c00
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <timer_tick>:

static void timer_tick(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 8002052:	f7ff ffdd 	bl	8002010 <seconds_since_midnight>
 8002056:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e045      	b.n	80020ea <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4a24      	ldr	r2, [pc, #144]	@ (80020fc <timer_tick+0xb0>)
 800206a:	4413      	add	r3, r2
 800206c:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7a1b      	ldrb	r3, [r3, #8]
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d132      	bne.n	80020e2 <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d812      	bhi.n	80020ae <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d306      	bcc.n	80020a0 <timer_tick+0x54>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	d201      	bcs.n	80020a0 <timer_tick+0x54>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <timer_tick+0x56>
 80020a0:	2300      	movs	r3, #0
 80020a2:	72fb      	strb	r3, [r7, #11]
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	72fb      	strb	r3, [r7, #11]
 80020ac:	e011      	b.n	80020d2 <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d204      	bcs.n	80020c2 <timer_tick+0x76>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d201      	bcs.n	80020c6 <timer_tick+0x7a>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <timer_tick+0x7c>
 80020c6:	2300      	movs	r3, #0
 80020c8:	72fb      	strb	r3, [r7, #11]
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <timer_tick+0x98>
            motor_apply(inWindow);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fe56 	bl	8001d8c <motor_apply>
 80020e0:	e000      	b.n	80020e4 <timer_tick+0x98>
        if (!s->active) continue;
 80020e2:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	ddb6      	ble.n	800205e <timer_tick+0x12>
        }
    }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002d8 	.word	0x200002d8

08002100 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <protections_tick+0x78>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <protections_tick+0x1e>
 800210e:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <protections_tick+0x7c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <protections_tick+0x1e>
        motor_apply(false);
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fe37 	bl	8001d8c <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <protections_tick+0x80>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <protections_tick+0x38>
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <protections_tick+0x7c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <protections_tick+0x38>
        motor_apply(false);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff fe2a 	bl	8001d8c <motor_apply>
    }

    if (senseOverUnderVolt) {
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <protections_tick+0x84>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <protections_tick+0x48>
        motor_apply(false);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fe22 	bl	8001d8c <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <protections_tick+0x88>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d011      	beq.n	8002174 <protections_tick+0x74>
 8002150:	f7ff fdc0 	bl	8001cd4 <now_ms>
 8002154:	4602      	mov	r2, r0
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <protections_tick+0x8c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <protections_tick+0x90>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d308      	bcc.n	8002174 <protections_tick+0x74>
        motor_apply(false);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff fe12 	bl	8001d8c <motor_apply>
        senseMaxRunReached = true;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <protections_tick+0x94>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <protections_tick+0x88>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    }
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000314 	.word	0x20000314
 800217c:	200002cc 	.word	0x200002cc
 8002180:	20000315 	.word	0x20000315
 8002184:	20000316 	.word	0x20000316
 8002188:	20000318 	.word	0x20000318
 800218c:	2000031c 	.word	0x2000031c
 8002190:	006ddd00 	.word	0x006ddd00
 8002194:	20000317 	.word	0x20000317

08002198 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 800219c:	f7fe fe7e 	bl	8000e9c <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 80021a0:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <leds_from_model+0x9c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d104      	bne.n	80021b4 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2101      	movs	r1, #1
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fe94 	bl	8000edc <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 80021b4:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <leds_from_model+0xa0>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <leds_from_model+0x3c>
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <leds_from_model+0xa4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 80021c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021cc:	2102      	movs	r1, #2
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7fe fe84 	bl	8000edc <LED_SetIntent>
    }
    if (senseDryRun) {
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <leds_from_model+0xa8>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fe7a 	bl	8000edc <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <leds_from_model+0xac>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 80021f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021f6:	2102      	movs	r1, #2
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe fe6f 	bl	8000edc <LED_SetIntent>
    }
    if (senseOverLoad) {
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <leds_from_model+0xb0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8002208:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800220c:	2102      	movs	r1, #2
 800220e:	2002      	movs	r0, #2
 8002210:	f7fe fe64 	bl	8000edc <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8002214:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <leds_from_model+0xb4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 800221e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002222:	2102      	movs	r1, #2
 8002224:	2003      	movs	r0, #3
 8002226:	f7fe fe59 	bl	8000edc <LED_SetIntent>
    }

    LED_ApplyIntents();
 800222a:	f7fe fe77 	bl	8000f1c <LED_ApplyIntents>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002cc 	.word	0x200002cc
 8002238:	200002cd 	.word	0x200002cd
 800223c:	20000001 	.word	0x20000001
 8002240:	20000314 	.word	0x20000314
 8002244:	20000317 	.word	0x20000317
 8002248:	20000315 	.word	0x20000315
 800224c:	20000316 	.word	0x20000316

08002250 <parse_mm_ss>:

/* ===== Helpers ===== */
static int parse_mm_ss(const char* p, uint8_t* mm, uint8_t* ss)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
    int m, s;
    if (sscanf(p, "%d:%d", &m, &s) == 2) {
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	f107 0214 	add.w	r2, r7, #20
 8002264:	4914      	ldr	r1, [pc, #80]	@ (80022b8 <parse_mm_ss+0x68>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f006 fb8c 	bl	8008984 <siscanf>
 800226c:	4603      	mov	r3, r0
 800226e:	2b02      	cmp	r3, #2
 8002270:	d11d      	bne.n	80022ae <parse_mm_ss+0x5e>
        if (m < 0) { m = 0; } if (m > 59) { m = 59; }
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	da01      	bge.n	800227c <parse_mm_ss+0x2c>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002280:	dd01      	ble.n	8002286 <parse_mm_ss+0x36>
 8002282:	233b      	movs	r3, #59	@ 0x3b
 8002284:	617b      	str	r3, [r7, #20]
        if (s < 0) { s = 0; } if (s > 59) { s = 59; }
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da01      	bge.n	8002290 <parse_mm_ss+0x40>
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b3b      	cmp	r3, #59	@ 0x3b
 8002294:	dd01      	ble.n	800229a <parse_mm_ss+0x4a>
 8002296:	233b      	movs	r3, #59	@ 0x3b
 8002298:	613b      	str	r3, [r7, #16]
        *mm = (uint8_t)m; *ss = (uint8_t)s;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	701a      	strb	r2, [r3, #0]
        return 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <parse_mm_ss+0x60>
    }
    return 0;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	08009e84 	.word	0x08009e84

080022bc <ModelHandle_ProcessUartCommand>:

/* ===== Command parser (from LCD/UI or serial) ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 815f 	beq.w	800258a <ModelHandle_ProcessUartCommand+0x2ce>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 815a 	beq.w	800258a <ModelHandle_ProcessUartCommand+0x2ce>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 80022d6:	49af      	ldr	r1, [pc, #700]	@ (8002594 <ModelHandle_ProcessUartCommand+0x2d8>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fd ff37 	bl	800014c <strcmp>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <ModelHandle_ProcessUartCommand+0x30>
        motor_apply(true);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff fd51 	bl	8001d8c <motor_apply>
 80022ea:	e14f      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 80022ec:	49aa      	ldr	r1, [pc, #680]	@ (8002598 <ModelHandle_ProcessUartCommand+0x2dc>)
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fd ff2c 	bl	800014c <strcmp>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <ModelHandle_ProcessUartCommand+0x46>
        motor_apply(false);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff fd46 	bl	8001d8c <motor_apply>
 8002300:	e144      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_ON:", 13) == 0) {
 8002302:	220d      	movs	r2, #13
 8002304:	49a5      	ldr	r1, [pc, #660]	@ (800259c <ModelHandle_ProcessUartCommand+0x2e0>)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f006 fb72 	bl	80089f0 <strncmp>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11b      	bne.n	800234a <ModelHandle_ProcessUartCommand+0x8e>
        int minutes = atoi(cmd + 13);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	330d      	adds	r3, #13
 8002316:	4618      	mov	r0, r3
 8002318:	f006 fa52 	bl	80087c0 <atoi>
 800231c:	61f8      	str	r0, [r7, #28]
        if (minutes < 0) minutes = 0;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da01      	bge.n	8002328 <ModelHandle_ProcessUartCommand+0x6c>
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
        if (minutes > 600) minutes = 600;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800232e:	dd02      	ble.n	8002336 <ModelHandle_ProcessUartCommand+0x7a>
 8002330:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002334:	61fb      	str	r3, [r7, #28]
        countdown_start(true, (uint32_t)minutes * 60UL);
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4619      	mov	r1, r3
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff fd54 	bl	8001df0 <countdown_start>
 8002348:	e120      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_OFF:", 14) == 0) {
 800234a:	220e      	movs	r2, #14
 800234c:	4994      	ldr	r1, [pc, #592]	@ (80025a0 <ModelHandle_ProcessUartCommand+0x2e4>)
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f006 fb4e 	bl	80089f0 <strncmp>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11b      	bne.n	8002392 <ModelHandle_ProcessUartCommand+0xd6>
        int minutes = atoi(cmd + 14);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	330e      	adds	r3, #14
 800235e:	4618      	mov	r0, r3
 8002360:	f006 fa2e 	bl	80087c0 <atoi>
 8002364:	61b8      	str	r0, [r7, #24]
        if (minutes < 0) minutes = 0;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da01      	bge.n	8002370 <ModelHandle_ProcessUartCommand+0xb4>
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
        if (minutes > 600) minutes = 600;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002376:	dd02      	ble.n	800237e <ModelHandle_ProcessUartCommand+0xc2>
 8002378:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800237c:	61bb      	str	r3, [r7, #24]
        countdown_start(false, (uint32_t)minutes * 60UL);
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4619      	mov	r1, r3
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff fd30 	bl	8001df0 <countdown_start>
 8002390:	e0fc      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "TIMER_SET:1:", 12) == 0) {
 8002392:	220c      	movs	r2, #12
 8002394:	4983      	ldr	r1, [pc, #524]	@ (80025a4 <ModelHandle_ProcessUartCommand+0x2e8>)
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 fb2a 	bl	80089f0 <strncmp>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d136      	bne.n	8002410 <ModelHandle_ProcessUartCommand+0x154>
        uint8_t onH=0,onM=0,offH=0,offM=0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	74fb      	strb	r3, [r7, #19]
 80023a6:	2300      	movs	r3, #0
 80023a8:	74bb      	strb	r3, [r7, #18]
 80023aa:	2300      	movs	r3, #0
 80023ac:	747b      	strb	r3, [r7, #17]
 80023ae:	2300      	movs	r3, #0
 80023b0:	743b      	strb	r3, [r7, #16]
        const char* p = cmd + 12;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	330c      	adds	r3, #12
 80023b6:	617b      	str	r3, [r7, #20]
        if (sscanf(p, "%hhu:%hhu:%hhu:%hhu", &onH,&onM,&offH,&offM) == 4) {
 80023b8:	f107 0112 	add.w	r1, r7, #18
 80023bc:	f107 0213 	add.w	r2, r7, #19
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f107 0311 	add.w	r3, r7, #17
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	460b      	mov	r3, r1
 80023ce:	4976      	ldr	r1, [pc, #472]	@ (80025a8 <ModelHandle_ProcessUartCommand+0x2ec>)
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f006 fad7 	bl	8008984 <siscanf>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b04      	cmp	r3, #4
 80023da:	f040 80d7 	bne.w	800258c <ModelHandle_ProcessUartCommand+0x2d0>
            timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(onH,onM);
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	7cba      	ldrb	r2, [r7, #18]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fc7c 	bl	8001ce2 <ModelHandle_TimeToSeconds>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a6f      	ldr	r2, [pc, #444]	@ (80025ac <ModelHandle_ProcessUartCommand+0x2f0>)
 80023ee:	6013      	str	r3, [r2, #0]
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(offH,offM);
 80023f0:	7c7b      	ldrb	r3, [r7, #17]
 80023f2:	7c3a      	ldrb	r2, [r7, #16]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fc73 	bl	8001ce2 <ModelHandle_TimeToSeconds>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a6b      	ldr	r2, [pc, #428]	@ (80025ac <ModelHandle_ProcessUartCommand+0x2f0>)
 8002400:	6053      	str	r3, [r2, #4]
            timerSlots[0].active = true;
 8002402:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <ModelHandle_ProcessUartCommand+0x2f0>)
 8002404:	2201      	movs	r2, #1
 8002406:	721a      	strb	r2, [r3, #8]
            timerSlots[0].executedToday = false;
 8002408:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <ModelHandle_ProcessUartCommand+0x2f0>)
 800240a:	2200      	movs	r2, #0
 800240c:	725a      	strb	r2, [r3, #9]
 800240e:	e0bd      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_GAP:", 11) == 0) {
 8002410:	220b      	movs	r2, #11
 8002412:	4967      	ldr	r1, [pc, #412]	@ (80025b0 <ModelHandle_ProcessUartCommand+0x2f4>)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f006 faeb 	bl	80089f0 <strncmp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11b      	bne.n	8002458 <ModelHandle_ProcessUartCommand+0x19c>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 11, &mm, &ss)) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	330b      	adds	r3, #11
 8002424:	f107 020e 	add.w	r2, r7, #14
 8002428:	f107 010f 	add.w	r1, r7, #15
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff0f 	bl	8002250 <parse_mm_ss>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a9 	beq.w	800258c <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.testingGapSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	461a      	mov	r2, r3
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	4413      	add	r3, r2
 800244c:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <ModelHandle_ProcessUartCommand+0x2f8>)
 800244e:	6053      	str	r3, [r2, #4]
            searchSettings.searchActive = true;
 8002450:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e099      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_DRYRUN:", 14) == 0) {
 8002458:	220e      	movs	r2, #14
 800245a:	4957      	ldr	r1, [pc, #348]	@ (80025b8 <ModelHandle_ProcessUartCommand+0x2fc>)
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 fac7 	bl	80089f0 <strncmp>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11b      	bne.n	80024a0 <ModelHandle_ProcessUartCommand+0x1e4>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 14, &mm, &ss)) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	330e      	adds	r3, #14
 800246c:	f107 020c 	add.w	r2, r7, #12
 8002470:	f107 010d 	add.w	r1, r7, #13
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff feeb 	bl	8002250 <parse_mm_ss>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8085 	beq.w	800258c <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.dryRunTimeSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002482:	7b7b      	ldrb	r3, [r7, #13]
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	7b3b      	ldrb	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	4a47      	ldr	r2, [pc, #284]	@ (80025b4 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002496:	6093      	str	r3, [r2, #8]
            searchSettings.searchActive = true;
 8002498:	4b46      	ldr	r3, [pc, #280]	@ (80025b4 <ModelHandle_ProcessUartCommand+0x2f8>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e075      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_ONDUR:", 12) == 0) {
 80024a0:	220c      	movs	r2, #12
 80024a2:	4946      	ldr	r1, [pc, #280]	@ (80025bc <ModelHandle_ProcessUartCommand+0x300>)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f006 faa3 	bl	80089f0 <strncmp>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d122      	bne.n	80024f6 <ModelHandle_ProcessUartCommand+0x23a>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 12, &mm, &ss)) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	330c      	adds	r3, #12
 80024b4:	f107 020a 	add.w	r2, r7, #10
 80024b8:	f107 010b 	add.w	r1, r7, #11
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fec7 	bl	8002250 <parse_mm_ss>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d061      	beq.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.onDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80024c8:	7afb      	ldrb	r3, [r7, #11]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	7abb      	ldrb	r3, [r7, #10]
 80024d8:	4413      	add	r3, r2
 80024da:	4a39      	ldr	r2, [pc, #228]	@ (80025c0 <ModelHandle_ProcessUartCommand+0x304>)
 80024dc:	6053      	str	r3, [r2, #4]
            twistSettings.twistActive = true;
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <ModelHandle_ProcessUartCommand+0x304>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 80024e4:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <ModelHandle_ProcessUartCommand+0x308>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 80024ea:	f7ff fbf3 	bl	8001cd4 <now_ms>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a35      	ldr	r2, [pc, #212]	@ (80025c8 <ModelHandle_ProcessUartCommand+0x30c>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e04a      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_OFFDUR:", 13) == 0) {
 80024f6:	220d      	movs	r2, #13
 80024f8:	4934      	ldr	r1, [pc, #208]	@ (80025cc <ModelHandle_ProcessUartCommand+0x310>)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f006 fa78 	bl	80089f0 <strncmp>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d122      	bne.n	800254c <ModelHandle_ProcessUartCommand+0x290>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 13, &mm, &ss)) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	330d      	adds	r3, #13
 800250a:	f107 0208 	add.w	r2, r7, #8
 800250e:	f107 0109 	add.w	r1, r7, #9
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fe9c 	bl	8002250 <parse_mm_ss>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d036      	beq.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.offDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	461a      	mov	r2, r3
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	7a3b      	ldrb	r3, [r7, #8]
 800252e:	4413      	add	r3, r2
 8002530:	4a23      	ldr	r2, [pc, #140]	@ (80025c0 <ModelHandle_ProcessUartCommand+0x304>)
 8002532:	6093      	str	r3, [r2, #8]
            twistSettings.twistActive = true;
 8002534:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <ModelHandle_ProcessUartCommand+0x304>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 800253a:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <ModelHandle_ProcessUartCommand+0x308>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 8002540:	f7ff fbc8 	bl	8001cd4 <now_ms>
 8002544:	4603      	mov	r3, r0
 8002546:	4a20      	ldr	r2, [pc, #128]	@ (80025c8 <ModelHandle_ProcessUartCommand+0x30c>)
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01f      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strcmp(cmd, "TWIST_OFF") == 0) {
 800254c:	4920      	ldr	r1, [pc, #128]	@ (80025d0 <ModelHandle_ProcessUartCommand+0x314>)
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fd fdfc 	bl	800014c <strcmp>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <ModelHandle_ProcessUartCommand+0x2ac>
        twistSettings.twistActive = false;
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <ModelHandle_ProcessUartCommand+0x304>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff fc13 	bl	8001d8c <motor_apply>
 8002566:	e011      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "SEARCH_OFF") == 0) {
 8002568:	491a      	ldr	r1, [pc, #104]	@ (80025d4 <ModelHandle_ProcessUartCommand+0x318>)
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fd fdee 	bl	800014c <strcmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
        searchSettings.searchActive = false;
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <ModelHandle_ProcessUartCommand+0x2f8>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
        search_in_test = false;
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <ModelHandle_ProcessUartCommand+0x31c>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fc02 	bl	8001d8c <motor_apply>
 8002588:	e000      	b.n	800258c <ModelHandle_ProcessUartCommand+0x2d0>
    if (!cmd || !*cmd) return;
 800258a:	bf00      	nop
    }
}
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	08009e8c 	.word	0x08009e8c
 8002598:	08009e98 	.word	0x08009e98
 800259c:	08009ea4 	.word	0x08009ea4
 80025a0:	08009eb4 	.word	0x08009eb4
 80025a4:	08009ec4 	.word	0x08009ec4
 80025a8:	08009ed4 	.word	0x08009ed4
 80025ac:	200002d8 	.word	0x200002d8
 80025b0:	08009ee8 	.word	0x08009ee8
 80025b4:	20000004 	.word	0x20000004
 80025b8:	08009ef4 	.word	0x08009ef4
 80025bc:	08009f04 	.word	0x08009f04
 80025c0:	20000010 	.word	0x20000010
 80025c4:	20000320 	.word	0x20000320
 80025c8:	20000324 	.word	0x20000324
 80025cc:	08009f14 	.word	0x08009f14
 80025d0:	08009f24 	.word	0x08009f24
 80025d4:	08009f30 	.word	0x08009f30
 80025d8:	20000328 	.word	0x20000328

080025dc <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
    countdown_tick();
 80025e0:	f7ff fc3c 	bl	8001e5c <countdown_tick>
    twist_tick();
 80025e4:	f7ff fc7e 	bl	8001ee4 <twist_tick>
    search_tick();
 80025e8:	f7ff fcca 	bl	8001f80 <search_tick>
    timer_tick();
 80025ec:	f7ff fd2e 	bl	800204c <timer_tick>
    protections_tick();
 80025f0:	f7ff fd86 	bl	8002100 <protections_tick>
    leds_from_model();
 80025f4:	f7ff fdd0 	bl	8002198 <leds_from_model>
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}

080025fc <Motor_GetStatus>:

/* ===== UI helper ===== */
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <Motor_GetStatus+0x1c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	200002cc 	.word	0x200002cc

0800261c <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	460a      	mov	r2, r1
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	4613      	mov	r3, r2
 800262a:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d014      	beq.n	800265c <Relay_Set+0x40>
 8002632:	2b03      	cmp	r3, #3
 8002634:	dc19      	bgt.n	800266a <Relay_Set+0x4e>
 8002636:	2b01      	cmp	r3, #1
 8002638:	d002      	beq.n	8002640 <Relay_Set+0x24>
 800263a:	2b02      	cmp	r3, #2
 800263c:	d007      	beq.n	800264e <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 800263e:	e014      	b.n	800266a <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002640:	79bb      	ldrb	r3, [r7, #6]
 8002642:	461a      	mov	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <Relay_Set+0x58>)
 8002648:	f002 fb33 	bl	8004cb2 <HAL_GPIO_WritePin>
 800264c:	e00e      	b.n	800266c <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	461a      	mov	r2, r3
 8002652:	2102      	movs	r1, #2
 8002654:	4807      	ldr	r0, [pc, #28]	@ (8002674 <Relay_Set+0x58>)
 8002656:	f002 fb2c 	bl	8004cb2 <HAL_GPIO_WritePin>
 800265a:	e007      	b.n	800266c <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	461a      	mov	r2, r3
 8002660:	2104      	movs	r1, #4
 8002662:	4804      	ldr	r0, [pc, #16]	@ (8002674 <Relay_Set+0x58>)
 8002664:	f002 fb25 	bl	8004cb2 <HAL_GPIO_WritePin>
 8002668:	e000      	b.n	800266c <Relay_Set+0x50>
        default: break;
 800266a:	bf00      	nop
    }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40010c00 	.word	0x40010c00

08002678 <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	461a      	mov	r2, r3
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4413      	add	r3, r2
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	b0a5      	sub	sp, #148	@ 0x94
 80026ac:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 80026ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2307      	movs	r3, #7
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	2200      	movs	r2, #0
 80026c2:	21d0      	movs	r1, #208	@ 0xd0
 80026c4:	4849      	ldr	r0, [pc, #292]	@ (80027ec <Get_Time+0x144>)
 80026c6:	f002 fd4f 	bl	8005168 <HAL_I2C_Mem_Read>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d028      	beq.n	8002722 <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 80026d0:	4846      	ldr	r0, [pc, #280]	@ (80027ec <Get_Time+0x144>)
 80026d2:	f003 f8eb 	bl	80058ac <HAL_I2C_GetError>
 80026d6:	4602      	mov	r2, r0
 80026d8:	463b      	mov	r3, r7
 80026da:	4945      	ldr	r1, [pc, #276]	@ (80027f0 <Get_Time+0x148>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f006 f92f 	bl	8008940 <siprintf>
        Debug_Print(err);
 80026e2:	463b      	mov	r3, r7
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f811 	bl	800170c <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 80026ea:	4b42      	ldr	r3, [pc, #264]	@ (80027f4 <Get_Time+0x14c>)
 80026ec:	22ff      	movs	r2, #255	@ 0xff
 80026ee:	719a      	strb	r2, [r3, #6]
 80026f0:	4b40      	ldr	r3, [pc, #256]	@ (80027f4 <Get_Time+0x14c>)
 80026f2:	799a      	ldrb	r2, [r3, #6]
 80026f4:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <Get_Time+0x14c>)
 80026f6:	715a      	strb	r2, [r3, #5]
 80026f8:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <Get_Time+0x14c>)
 80026fa:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 80026fc:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <Get_Time+0x14c>)
 80026fe:	711a      	strb	r2, [r3, #4]
 8002700:	4b3c      	ldr	r3, [pc, #240]	@ (80027f4 <Get_Time+0x14c>)
 8002702:	791a      	ldrb	r2, [r3, #4]
 8002704:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <Get_Time+0x14c>)
 8002706:	70da      	strb	r2, [r3, #3]
 8002708:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <Get_Time+0x14c>)
 800270a:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 800270c:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <Get_Time+0x14c>)
 800270e:	709a      	strb	r2, [r3, #2]
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <Get_Time+0x14c>)
 8002712:	789a      	ldrb	r2, [r3, #2]
 8002714:	4b37      	ldr	r3, [pc, #220]	@ (80027f4 <Get_Time+0x14c>)
 8002716:	705a      	strb	r2, [r3, #1]
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <Get_Time+0x14c>)
 800271a:	785a      	ldrb	r2, [r3, #1]
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <Get_Time+0x14c>)
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e061      	b.n	80027e6 <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 8002722:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002726:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 8002728:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 800272c:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 800272e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002732:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8002736:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 800273a:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 800273e:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8002740:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002744:	4605      	mov	r5, r0
 8002746:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800274a:	9504      	str	r5, [sp, #16]
 800274c:	9403      	str	r4, [sp, #12]
 800274e:	9102      	str	r1, [sp, #8]
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4663      	mov	r3, ip
 8002756:	4632      	mov	r2, r6
 8002758:	4927      	ldr	r1, [pc, #156]	@ (80027f8 <Get_Time+0x150>)
 800275a:	f006 f8f1 	bl	8008940 <siprintf>
    Debug_Print(dbg);
 800275e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ffd2 	bl	800170c <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 8002768:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff83 	bl	8002678 <bcdToDec>
 8002772:	4603      	mov	r3, r0
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <Get_Time+0x14c>)
 8002778:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 800277a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff7a 	bl	8002678 <bcdToDec>
 8002784:	4603      	mov	r3, r0
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <Get_Time+0x14c>)
 800278a:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 800278c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff71 	bl	8002678 <bcdToDec>
 8002796:	4603      	mov	r3, r0
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <Get_Time+0x14c>)
 800279c:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 800279e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff68 	bl	8002678 <bcdToDec>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <Get_Time+0x14c>)
 80027ae:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 80027b0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <bcdToDec>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <Get_Time+0x14c>)
 80027c0:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 80027c2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff56 	bl	8002678 <bcdToDec>
 80027cc:	4603      	mov	r3, r0
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <Get_Time+0x14c>)
 80027d2:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 80027d4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff4d 	bl	8002678 <bcdToDec>
 80027de:	4603      	mov	r3, r0
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b04      	ldr	r3, [pc, #16]	@ (80027f4 <Get_Time+0x14c>)
 80027e4:	719a      	strb	r2, [r3, #6]
}
 80027e6:	377c      	adds	r7, #124	@ 0x7c
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ec:	2000014c 	.word	0x2000014c
 80027f0:	08009f60 	.word	0x08009f60
 80027f4:	20000330 	.word	0x20000330
 80027f8:	08009f78 	.word	0x08009f78

080027fc <lcd_line0>:
    "Back to Dash"
};
#define MENU_COUNT (sizeof(menu_items)/sizeof(menu_items[0]))

/* ================= Helpers ================= */
static void lcd_line0(const char* s){ lcd_put_cur(0,0); lcd_send_string(s); }
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	2100      	movs	r1, #0
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fad9 	bl	8000dbe <lcd_put_cur>
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe fb2f 	bl	8000e70 <lcd_send_string>
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <lcd_line1>:
static void lcd_line1(const char* s){ lcd_put_cur(1,0); lcd_send_string(s); }
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	2100      	movs	r1, #0
 8002824:	2001      	movs	r0, #1
 8002826:	f7fe faca 	bl	8000dbe <lcd_put_cur>
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fb20 	bl	8000e70 <lcd_send_string>
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <goto_dash_cycle>:

static void goto_dash_cycle(void) {
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    if (ui < UI_DASH_WATER || ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <goto_dash_cycle+0x24>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <goto_dash_cycle+0x14>
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <goto_dash_cycle+0x24>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d902      	bls.n	8002852 <goto_dash_cycle+0x1a>
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <goto_dash_cycle+0x24>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	2000033c 	.word	0x2000033c

08002860 <show_welcome>:

static void show_welcome(void){
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
    lcd_clear();
 8002864:	f7fe fa9e 	bl	8000da4 <lcd_clear>
    lcd_line0("Welcome to");
 8002868:	4803      	ldr	r0, [pc, #12]	@ (8002878 <show_welcome+0x18>)
 800286a:	f7ff ffc7 	bl	80027fc <lcd_line0>
    lcd_line1("HELONIX");
 800286e:	4803      	ldr	r0, [pc, #12]	@ (800287c <show_welcome+0x1c>)
 8002870:	f7ff ffd3 	bl	800281a <lcd_line1>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	0800a09c 	.word	0x0800a09c
 800287c:	0800a0a8 	.word	0x0800a0a8

08002880 <show_dash_water>:

static void show_dash_water(void){
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
    lcd_clear();
 8002884:	f7fe fa8e 	bl	8000da4 <lcd_clear>
    // headline
//    snprintf(buf, sizeof(buf), "Water V0: %.2fV", adcData.voltages[0]);
    lcd_line0(buf);
 8002888:	4817      	ldr	r0, [pc, #92]	@ (80028e8 <show_dash_water+0x68>)
 800288a:	f7ff ffb7 	bl	80027fc <lcd_line0>

    // simple status from your earlier logic
    if      (adcData.voltages[0] > 2.5f)  lcd_line1("Status: Full");
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <show_dash_water+0x6c>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4917      	ldr	r1, [pc, #92]	@ (80028f0 <show_dash_water+0x70>)
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd ff35 	bl	8000704 <__aeabi_fcmpgt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <show_dash_water+0x28>
 80028a0:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <show_dash_water+0x74>)
 80028a2:	f7ff ffba 	bl	800281a <lcd_line1>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
    else                                  lcd_line1("Status: Empty");
}
 80028a6:	e01d      	b.n	80028e4 <show_dash_water+0x64>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <show_dash_water+0x6c>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd ff27 	bl	8000704 <__aeabi_fcmpgt>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <show_dash_water+0x44>
 80028bc:	480e      	ldr	r0, [pc, #56]	@ (80028f8 <show_dash_water+0x78>)
 80028be:	f7ff ffac 	bl	800281a <lcd_line1>
}
 80028c2:	e00f      	b.n	80028e4 <show_dash_water+0x64>
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <show_dash_water+0x6c>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <show_dash_water+0x7c>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd ff1a 	bl	8000704 <__aeabi_fcmpgt>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <show_dash_water+0x5e>
 80028d6:	480a      	ldr	r0, [pc, #40]	@ (8002900 <show_dash_water+0x80>)
 80028d8:	f7ff ff9f 	bl	800281a <lcd_line1>
}
 80028dc:	e002      	b.n	80028e4 <show_dash_water+0x64>
    else                                  lcd_line1("Status: Empty");
 80028de:	4809      	ldr	r0, [pc, #36]	@ (8002904 <show_dash_water+0x84>)
 80028e0:	f7ff ff9b 	bl	800281a <lcd_line1>
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000340 	.word	0x20000340
 80028ec:	20000254 	.word	0x20000254
 80028f0:	40200000 	.word	0x40200000
 80028f4:	0800a0b0 	.word	0x0800a0b0
 80028f8:	0800a0c0 	.word	0x0800a0c0
 80028fc:	3dcccccd 	.word	0x3dcccccd
 8002900:	0800a0d0 	.word	0x0800a0d0
 8002904:	0800a0dc 	.word	0x0800a0dc

08002908 <show_dash_mode>:

static void show_dash_mode(void){
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af02      	add	r7, sp, #8
    lcd_clear();
 800290e:	f7fe fa49 	bl	8000da4 <lcd_clear>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
             Motor_GetStatus() ? "ON":"OFF",
 8002912:	f7ff fe73 	bl	80025fc <Motor_GetStatus>
 8002916:	4603      	mov	r3, r0
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <show_dash_mode+0x18>
 800291c:	4a13      	ldr	r2, [pc, #76]	@ (800296c <show_dash_mode+0x64>)
 800291e:	e000      	b.n	8002922 <show_dash_mode+0x1a>
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <show_dash_mode+0x68>)
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <show_dash_mode+0x6c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <show_dash_mode+0x36>
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <show_dash_mode+0x70>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <show_dash_mode+0x32>
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <show_dash_mode+0x64>)
 8002938:	e002      	b.n	8002940 <show_dash_mode+0x38>
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <show_dash_mode+0x68>)
 800293c:	e000      	b.n	8002940 <show_dash_mode+0x38>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <show_dash_mode+0x74>)
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <show_dash_mode+0x78>)
 8002946:	2115      	movs	r1, #21
 8002948:	480e      	ldr	r0, [pc, #56]	@ (8002984 <show_dash_mode+0x7c>)
 800294a:	f005 ffc3 	bl	80088d4 <sniprintf>
    lcd_line0(buf);
 800294e:	480d      	ldr	r0, [pc, #52]	@ (8002984 <show_dash_mode+0x7c>)
 8002950:	f7ff ff54 	bl	80027fc <lcd_line0>

    snprintf(buf, sizeof(buf), "Menu: Press SEL");
 8002954:	4a0c      	ldr	r2, [pc, #48]	@ (8002988 <show_dash_mode+0x80>)
 8002956:	2115      	movs	r1, #21
 8002958:	480a      	ldr	r0, [pc, #40]	@ (8002984 <show_dash_mode+0x7c>)
 800295a:	f005 ffbb 	bl	80088d4 <sniprintf>
    lcd_line1(buf);
 800295e:	4809      	ldr	r0, [pc, #36]	@ (8002984 <show_dash_mode+0x7c>)
 8002960:	f7ff ff5b 	bl	800281a <lcd_line1>
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	0800a0ec 	.word	0x0800a0ec
 8002970:	0800a0f0 	.word	0x0800a0f0
 8002974:	200002cd 	.word	0x200002cd
 8002978:	20000001 	.word	0x20000001
 800297c:	0800a0f4 	.word	0x0800a0f4
 8002980:	0800a0f8 	.word	0x0800a0f8
 8002984:	20000340 	.word	0x20000340
 8002988:	0800a108 	.word	0x0800a108

0800298c <show_dash_search>:

static void show_dash_search(void){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af02      	add	r7, sp, #8
    lcd_clear();
 8002992:	f7fe fa07 	bl	8000da4 <lcd_clear>
    lcd_line0("Search Mode");
 8002996:	480e      	ldr	r0, [pc, #56]	@ (80029d0 <show_dash_search+0x44>)
 8002998:	f7ff ff30 	bl	80027fc <lcd_line0>
    if (searchSettings.searchActive) {
 800299c:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <show_dash_search+0x48>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00f      	beq.n	80029c4 <show_dash_search+0x38>
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
                 (int)searchSettings.testingGapSeconds,
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <show_dash_search+0x48>)
 80029a6:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 80029a8:	461a      	mov	r2, r3
                 (int)searchSettings.dryRunTimeSeconds);
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <show_dash_search+0x48>)
 80029ac:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <show_dash_search+0x4c>)
 80029b4:	2115      	movs	r1, #21
 80029b6:	4809      	ldr	r0, [pc, #36]	@ (80029dc <show_dash_search+0x50>)
 80029b8:	f005 ff8c 	bl	80088d4 <sniprintf>
        lcd_line1(buf);
 80029bc:	4807      	ldr	r0, [pc, #28]	@ (80029dc <show_dash_search+0x50>)
 80029be:	f7ff ff2c 	bl	800281a <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 80029c2:	e002      	b.n	80029ca <show_dash_search+0x3e>
        lcd_line1("Inactive");
 80029c4:	4806      	ldr	r0, [pc, #24]	@ (80029e0 <show_dash_search+0x54>)
 80029c6:	f7ff ff28 	bl	800281a <lcd_line1>
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	0800a118 	.word	0x0800a118
 80029d4:	20000004 	.word	0x20000004
 80029d8:	0800a124 	.word	0x0800a124
 80029dc:	20000340 	.word	0x20000340
 80029e0:	0800a134 	.word	0x0800a134

080029e4 <show_dash_twist>:

static void show_dash_twist(void){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af02      	add	r7, sp, #8
    lcd_clear();
 80029ea:	f7fe f9db 	bl	8000da4 <lcd_clear>
    lcd_line0("Twist Mode");
 80029ee:	480e      	ldr	r0, [pc, #56]	@ (8002a28 <show_dash_twist+0x44>)
 80029f0:	f7ff ff04 	bl	80027fc <lcd_line0>
    if (twistSettings.twistActive) {
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <show_dash_twist+0x48>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00f      	beq.n	8002a1c <show_dash_twist+0x38>
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
                 (int)twistSettings.onDurationSeconds,
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <show_dash_twist+0x48>)
 80029fe:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002a00:	461a      	mov	r2, r3
                 (int)twistSettings.offDurationSeconds);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <show_dash_twist+0x48>)
 8002a04:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	4a09      	ldr	r2, [pc, #36]	@ (8002a30 <show_dash_twist+0x4c>)
 8002a0c:	2115      	movs	r1, #21
 8002a0e:	4809      	ldr	r0, [pc, #36]	@ (8002a34 <show_dash_twist+0x50>)
 8002a10:	f005 ff60 	bl	80088d4 <sniprintf>
        lcd_line1(buf);
 8002a14:	4807      	ldr	r0, [pc, #28]	@ (8002a34 <show_dash_twist+0x50>)
 8002a16:	f7ff ff00 	bl	800281a <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 8002a1a:	e002      	b.n	8002a22 <show_dash_twist+0x3e>
        lcd_line1("Inactive");
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <show_dash_twist+0x54>)
 8002a1e:	f7ff fefc 	bl	800281a <lcd_line1>
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	0800a140 	.word	0x0800a140
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	0800a14c 	.word	0x0800a14c
 8002a34:	20000340 	.word	0x20000340
 8002a38:	0800a134 	.word	0x0800a134

08002a3c <show_menu>:

static void show_menu(void){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
    lcd_clear();
 8002a40:	f7fe f9b0 	bl	8000da4 <lcd_clear>
    snprintf(buf, sizeof(buf), ">%s", menu_items[menu_idx]);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <show_menu+0x34>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <show_menu+0x38>)
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <show_menu+0x3c>)
 8002a52:	2115      	movs	r1, #21
 8002a54:	4809      	ldr	r0, [pc, #36]	@ (8002a7c <show_menu+0x40>)
 8002a56:	f005 ff3d 	bl	80088d4 <sniprintf>
    buf[20]='\0';
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <show_menu+0x40>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	751a      	strb	r2, [r3, #20]
    lcd_line0(buf);
 8002a60:	4806      	ldr	r0, [pc, #24]	@ (8002a7c <show_menu+0x40>)
 8002a62:	f7ff fecb 	bl	80027fc <lcd_line0>
    lcd_line1("UP/DN:Move  SEL:OK");
 8002a66:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <show_menu+0x44>)
 8002a68:	f7ff fed7 	bl	800281a <lcd_line1>
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000358 	.word	0x20000358
 8002a74:	2000001c 	.word	0x2000001c
 8002a78:	0800a15c 	.word	0x0800a15c
 8002a7c:	20000340 	.word	0x20000340
 8002a80:	0800a160 	.word	0x0800a160

08002a84 <show_edit_mm>:

/* generic editor screens */
static void show_edit_mm(const char* title, uint8_t mm){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
    lcd_clear();
 8002a90:	f7fe f988 	bl	8000da4 <lcd_clear>
    lcd_line0(title);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff feb1 	bl	80027fc <lcd_line0>
    snprintf(buf, sizeof(buf), "Value: %02u", mm);
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <show_edit_mm+0x30>)
 8002a9e:	2115      	movs	r1, #21
 8002aa0:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <show_edit_mm+0x34>)
 8002aa2:	f005 ff17 	bl	80088d4 <sniprintf>
    lcd_line1(buf);
 8002aa6:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <show_edit_mm+0x34>)
 8002aa8:	f7ff feb7 	bl	800281a <lcd_line1>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	0800a174 	.word	0x0800a174
 8002ab8:	20000340 	.word	0x20000340

08002abc <show_edit_ms>:

static void show_edit_ms(const char* title, uint8_t mm, uint8_t ss){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8002acc:	f7fe f96a 	bl	8000da4 <lcd_clear>
    lcd_line0(title);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fe93 	bl	80027fc <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:OK", mm, ss);
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	78bb      	ldrb	r3, [r7, #2]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	4a06      	ldr	r2, [pc, #24]	@ (8002af8 <show_edit_ms+0x3c>)
 8002ae0:	2115      	movs	r1, #21
 8002ae2:	4806      	ldr	r0, [pc, #24]	@ (8002afc <show_edit_ms+0x40>)
 8002ae4:	f005 fef6 	bl	80088d4 <sniprintf>
    lcd_line1(buf);
 8002ae8:	4804      	ldr	r0, [pc, #16]	@ (8002afc <show_edit_ms+0x40>)
 8002aea:	f7ff fe96 	bl	800281a <lcd_line1>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800a180 	.word	0x0800a180
 8002afc:	20000340 	.word	0x20000340

08002b00 <show_edit_hhmm>:

static void show_edit_hhmm(const char* title, uint8_t hh, uint8_t mm){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8002b10:	f7fe f948 	bl	8000da4 <lcd_clear>
    lcd_line0(title);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fe71 	bl	80027fc <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:Next", hh, mm);
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	78bb      	ldrb	r3, [r7, #2]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <show_edit_hhmm+0x3c>)
 8002b24:	2115      	movs	r1, #21
 8002b26:	4806      	ldr	r0, [pc, #24]	@ (8002b40 <show_edit_hhmm+0x40>)
 8002b28:	f005 fed4 	bl	80088d4 <sniprintf>
    lcd_line1(buf);
 8002b2c:	4804      	ldr	r0, [pc, #16]	@ (8002b40 <show_edit_hhmm+0x40>)
 8002b2e:	f7ff fe74 	bl	800281a <lcd_line1>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	0800a19c 	.word	0x0800a19c
 8002b40:	20000340 	.word	0x20000340

08002b44 <apply_menu_action>:

static void apply_menu_action(void){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
    switch(menu_idx){
 8002b48:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <apply_menu_action+0xdc>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d865      	bhi.n	8002c1c <apply_menu_action+0xd8>
 8002b50:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <apply_menu_action+0x14>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b9f 	.word	0x08002b9f
 8002b68:	08002bb3 	.word	0x08002bb3
 8002b6c:	08002bc7 	.word	0x08002bc7
 8002b70:	08002bdb 	.word	0x08002bdb
 8002b74:	08002bef 	.word	0x08002bef
 8002b78:	08002c03 	.word	0x08002c03
 8002b7c:	08002c17 	.word	0x08002c17
        case 0: ui = UI_CONFIRM_MANUAL_ON;  break;
 8002b80:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <apply_menu_action+0xe0>)
 8002b82:	2213      	movs	r2, #19
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e049      	b.n	8002c1c <apply_menu_action+0xd8>
        case 1: ui = UI_CONFIRM_MANUAL_OFF; break;
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <apply_menu_action+0xe0>)
 8002b8a:	2214      	movs	r2, #20
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e045      	b.n	8002c1c <apply_menu_action+0xd8>
        case 2: temp_m = 10; ui = UI_EDIT_COUNTDOWN_MIN; break;
 8002b90:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <apply_menu_action+0xe4>)
 8002b92:	220a      	movs	r2, #10
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <apply_menu_action+0xe0>)
 8002b98:	2206      	movs	r2, #6
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e03e      	b.n	8002c1c <apply_menu_action+0xd8>
        case 3: /* Timer1 ON hh:mm */
            temp_h = 6; temp_m = 0; ui = UI_EDIT_TIMER1_ON_H; break;
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <apply_menu_action+0xe8>)
 8002ba0:	2206      	movs	r2, #6
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <apply_menu_action+0xe4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <apply_menu_action+0xe0>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e034      	b.n	8002c1c <apply_menu_action+0xd8>
        case 4: /* Timer1 OFF hh:mm */
            temp_h = 7; temp_m = 0; ui = UI_EDIT_TIMER1_OFF_H; break;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <apply_menu_action+0xe8>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <apply_menu_action+0xe4>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <apply_menu_action+0xe0>)
 8002bc0:	2209      	movs	r2, #9
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e02a      	b.n	8002c1c <apply_menu_action+0xd8>
        case 5: /* Search gap mm:ss */
            temp_m = 0; temp_s = 30; ui = UI_EDIT_SEARCH_GAP_M; break;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <apply_menu_action+0xe4>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <apply_menu_action+0xec>)
 8002bce:	221e      	movs	r2, #30
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <apply_menu_action+0xe0>)
 8002bd4:	220b      	movs	r2, #11
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e020      	b.n	8002c1c <apply_menu_action+0xd8>
        case 6: /* Search dry run mm:ss */
            temp_m = 0; temp_s = 10; ui = UI_EDIT_SEARCH_DRY_M; break;
 8002bda:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <apply_menu_action+0xe4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <apply_menu_action+0xec>)
 8002be2:	220a      	movs	r2, #10
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <apply_menu_action+0xe0>)
 8002be8:	220d      	movs	r2, #13
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e016      	b.n	8002c1c <apply_menu_action+0xd8>
        case 7: /* Twist ON mm:ss */
            temp_m = 0; temp_s = 20; ui = UI_EDIT_TWIST_ON_M; break;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <apply_menu_action+0xe4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <apply_menu_action+0xec>)
 8002bf6:	2214      	movs	r2, #20
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <apply_menu_action+0xe0>)
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e00c      	b.n	8002c1c <apply_menu_action+0xd8>
        case 8: /* Twist OFF mm:ss */
            temp_m = 0; temp_s = 40; ui = UI_EDIT_TWIST_OFF_M; break;
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <apply_menu_action+0xe4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <apply_menu_action+0xec>)
 8002c0a:	2228      	movs	r2, #40	@ 0x28
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <apply_menu_action+0xe0>)
 8002c10:	2211      	movs	r2, #17
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e002      	b.n	8002c1c <apply_menu_action+0xd8>
        case 9: goto_dash_cycle(); break;
 8002c16:	f7ff fe0f 	bl	8002838 <goto_dash_cycle>
 8002c1a:	bf00      	nop
    }
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000358 	.word	0x20000358
 8002c24:	2000033c 	.word	0x2000033c
 8002c28:	20000356 	.word	0x20000356
 8002c2c:	20000355 	.word	0x20000355
 8002c30:	20000357 	.word	0x20000357

08002c34 <send_cmd>:

/* send commands into your existing model handlers */
static void send_cmd(const char* cmd){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    ModelHandle_ProcessUartCommand(cmd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fb3d 	bl	80022bc <ModelHandle_ProcessUartCommand>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <Screen_Init>:

/* ================= Public API ================= */

void Screen_Init(void){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
    lcd_init();
 8002c50:	f7fe f8d4 	bl	8000dfc <lcd_init>
    lastLcdUpdateTime = HAL_GetTick();
 8002c54:	f001 f87c 	bl	8003d50 <HAL_GetTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a03      	ldr	r2, [pc, #12]	@ (8002c68 <Screen_Init+0x1c>)
 8002c5c:	6013      	str	r3, [r2, #0]
    ui = UI_WELCOME;
 8002c5e:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <Screen_Init+0x20>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000338 	.word	0x20000338
 8002c6c:	2000033c 	.word	0x2000033c

08002c70 <Screen_ResetToHome>:

void Screen_ResetToHome(void){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
    ui = UI_WELCOME;
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <Screen_ResetToHome+0x18>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002c7a:	f001 f869 	bl	8003d50 <HAL_GetTick>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4a02      	ldr	r2, [pc, #8]	@ (8002c8c <Screen_ResetToHome+0x1c>)
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000033c 	.word	0x2000033c
 8002c8c:	20000338 	.word	0x20000338

08002c90 <Screen_HandleButton>:

void Screen_HandleButton(UiButton b){
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b097      	sub	sp, #92	@ 0x5c
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <Screen_HandleButton+0x16>
        Screen_ResetToHome();
 8002ca0:	f7ff ffe6 	bl	8002c70 <Screen_ResetToHome>
        return;
 8002ca4:	e394      	b.n	80033d0 <Screen_HandleButton+0x740>
    }

    switch (ui)
 8002ca6:	4b9b      	ldr	r3, [pc, #620]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b14      	cmp	r3, #20
 8002cac:	f200 836b 	bhi.w	8003386 <Screen_HandleButton+0x6f6>
 8002cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb8 <Screen_HandleButton+0x28>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002d0d 	.word	0x08002d0d
 8002cbc:	08002d1d 	.word	0x08002d1d
 8002cc0:	08002d1d 	.word	0x08002d1d
 8002cc4:	08002d1d 	.word	0x08002d1d
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002d2d 	.word	0x08002d2d
 8002cd0:	08002dcf 	.word	0x08002dcf
 8002cd4:	08002e39 	.word	0x08002e39
 8002cd8:	08002e8b 	.word	0x08002e8b
 8002cdc:	08002f3d 	.word	0x08002f3d
 8002ce0:	08002f8f 	.word	0x08002f8f
 8002ce4:	08003055 	.word	0x08003055
 8002ce8:	080030a7 	.word	0x080030a7
 8002cec:	0800311b 	.word	0x0800311b
 8002cf0:	0800316d 	.word	0x0800316d
 8002cf4:	080031ff 	.word	0x080031ff
 8002cf8:	08003251 	.word	0x08003251
 8002cfc:	080032c5 	.word	0x080032c5
 8002d00:	08003315 	.word	0x08003315
 8002d04:	08002d83 	.word	0x08002d83
 8002d08:	08002da9 	.word	0x08002da9
    {
    case UI_WELCOME:
        if (b == BTN_SELECT) ui = UI_DASH_WATER;
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	f040 833b 	bne.w	800338a <Screen_HandleButton+0x6fa>
 8002d14:	4b7f      	ldr	r3, [pc, #508]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
        break;
 8002d1a:	e336      	b.n	800338a <Screen_HandleButton+0x6fa>
    /* ===== Dashboard pages (auto-cycle) ===== */
    case UI_DASH_WATER:
    case UI_DASH_MODE:
    case UI_DASH_SEARCH:
    case UI_DASH_TWIST:
        if (b == BTN_SELECT) { ui = UI_MENU; }
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	f040 8335 	bne.w	800338e <Screen_HandleButton+0x6fe>
 8002d24:	4b7b      	ldr	r3, [pc, #492]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002d26:	2205      	movs	r2, #5
 8002d28:	701a      	strb	r2, [r3, #0]
        break;
 8002d2a:	e330      	b.n	800338e <Screen_HandleButton+0x6fe>

    /* ===== Menu navigation ===== */
    case UI_MENU:
        if (b == BTN_UP)   { if (menu_idx==0) menu_idx=MENU_COUNT-1; else menu_idx--; }
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d10d      	bne.n	8002d4e <Screen_HandleButton+0xbe>
 8002d32:	4b79      	ldr	r3, [pc, #484]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <Screen_HandleButton+0xb2>
 8002d3a:	4b77      	ldr	r3, [pc, #476]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d3c:	2209      	movs	r2, #9
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e005      	b.n	8002d4e <Screen_HandleButton+0xbe>
 8002d42:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b73      	ldr	r3, [pc, #460]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d4c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { menu_idx=(menu_idx+1)%MENU_COUNT; }
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d10f      	bne.n	8002d74 <Screen_HandleButton+0xe4>
 8002d54:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <Screen_HandleButton+0x28c>)
 8002d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	1aca      	subs	r2, r1, r3
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <Screen_HandleButton+0x288>)
 8002d72:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ apply_menu_action(); }
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	f040 830b 	bne.w	8003392 <Screen_HandleButton+0x702>
 8002d7c:	f7ff fee2 	bl	8002b44 <apply_menu_action>
        break;
 8002d80:	e307      	b.n	8003392 <Screen_HandleButton+0x702>

    /* ===== Edits & confirms ===== */
    case UI_CONFIRM_MANUAL_ON:
        if (b == BTN_SELECT){ send_cmd("MOTOR_ON"); goto_dash_cycle(); }
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d104      	bne.n	8002d92 <Screen_HandleButton+0x102>
 8002d88:	4865      	ldr	r0, [pc, #404]	@ (8002f20 <Screen_HandleButton+0x290>)
 8002d8a:	f7ff ff53 	bl	8002c34 <send_cmd>
 8002d8e:	f7ff fd53 	bl	8002838 <goto_dash_cycle>
        if (b == BTN_DOWN || b == BTN_UP){ ui = UI_MENU; }
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d003      	beq.n	8002da0 <Screen_HandleButton+0x110>
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f040 82fb 	bne.w	8003396 <Screen_HandleButton+0x706>
 8002da0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002da2:	2205      	movs	r2, #5
 8002da4:	701a      	strb	r2, [r3, #0]
        break;
 8002da6:	e2f6      	b.n	8003396 <Screen_HandleButton+0x706>

    case UI_CONFIRM_MANUAL_OFF:
        if (b == BTN_SELECT){ send_cmd("MOTOR_OFF"); goto_dash_cycle(); }
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d104      	bne.n	8002db8 <Screen_HandleButton+0x128>
 8002dae:	485d      	ldr	r0, [pc, #372]	@ (8002f24 <Screen_HandleButton+0x294>)
 8002db0:	f7ff ff40 	bl	8002c34 <send_cmd>
 8002db4:	f7ff fd40 	bl	8002838 <goto_dash_cycle>
        if (b == BTN_DOWN || b == BTN_UP){ ui = UI_MENU; }
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d003      	beq.n	8002dc6 <Screen_HandleButton+0x136>
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	f040 82ea 	bne.w	800339a <Screen_HandleButton+0x70a>
 8002dc6:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002dc8:	2205      	movs	r2, #5
 8002dca:	701a      	strb	r2, [r3, #0]
        break;
 8002dcc:	e2e5      	b.n	800339a <Screen_HandleButton+0x70a>

    case UI_EDIT_COUNTDOWN_MIN:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d10c      	bne.n	8002dee <Screen_HandleButton+0x15e>
 8002dd4:	4b54      	ldr	r3, [pc, #336]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b52      	ldr	r3, [pc, #328]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002de6:	d902      	bls.n	8002dee <Screen_HandleButton+0x15e>
 8002de8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d10d      	bne.n	8002e10 <Screen_HandleButton+0x180>
 8002df4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <Screen_HandleButton+0x174>
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002dfe:	223b      	movs	r2, #59	@ 0x3b
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e005      	b.n	8002e10 <Screen_HandleButton+0x180>
 8002e04:	4b48      	ldr	r3, [pc, #288]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b46      	ldr	r3, [pc, #280]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e0e:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	f040 82c3 	bne.w	800339e <Screen_HandleButton+0x70e>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"COUNTDOWN_ON:%u", temp_m);
 8002e18:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f107 000c 	add.w	r0, r7, #12
 8002e20:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <Screen_HandleButton+0x29c>)
 8002e22:	2120      	movs	r1, #32
 8002e24:	f005 fd56 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff01 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 8002e32:	f7ff fd01 	bl	8002838 <goto_dash_cycle>
        }
        break;
 8002e36:	e2b2      	b.n	800339e <Screen_HandleButton+0x70e>

    case UI_EDIT_TIMER1_ON_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; }
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d10c      	bne.n	8002e58 <Screen_HandleButton+0x1c8>
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b17      	cmp	r3, #23
 8002e50:	d902      	bls.n	8002e58 <Screen_HandleButton+0x1c8>
 8002e52:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h==0) temp_h = 23; else temp_h--; }
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d10d      	bne.n	8002e7a <Screen_HandleButton+0x1ea>
 8002e5e:	4b34      	ldr	r3, [pc, #208]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <Screen_HandleButton+0x1de>
 8002e66:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e68:	2217      	movs	r2, #23
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e005      	b.n	8002e7a <Screen_HandleButton+0x1ea>
 8002e6e:	4b30      	ldr	r3, [pc, #192]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002e78:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_ON_M; }
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 8290 	bne.w	80033a2 <Screen_HandleButton+0x712>
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002e84:	2208      	movs	r2, #8
 8002e86:	701a      	strb	r2, [r3, #0]
        break;
 8002e88:	e28b      	b.n	80033a2 <Screen_HandleButton+0x712>
    case UI_EDIT_TIMER1_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d10c      	bne.n	8002eaa <Screen_HandleButton+0x21a>
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ea2:	d902      	bls.n	8002eaa <Screen_HandleButton+0x21a>
 8002ea4:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d10d      	bne.n	8002ecc <Screen_HandleButton+0x23c>
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <Screen_HandleButton+0x230>
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002eba:	223b      	movs	r2, #59	@ 0x3b
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e005      	b.n	8002ecc <Screen_HandleButton+0x23c>
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002eca:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 8269 	bne.w	80033a6 <Screen_HandleButton+0x716>
            char onStr[6]; snprintf(onStr,sizeof(onStr),"%02u:%02u",temp_h,temp_m);
 8002ed4:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <Screen_HandleButton+0x2a4>)
 8002ee8:	2106      	movs	r1, #6
 8002eea:	f005 fcf3 	bl	80088d4 <sniprintf>
            // jump to OFF editor next
            ui = UI_EDIT_TIMER1_OFF_H;
 8002eee:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <Screen_HandleButton+0x284>)
 8002ef0:	2209      	movs	r2, #9
 8002ef2:	701a      	strb	r2, [r3, #0]
            // stash in temp_h/temp_m again when we arrive there
            // keep onStr in mind via static? Simpler: store to timerSlots on final confirm
            // Here: save into slot as partial (seconds)
            timerSlots[0].onTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <Screen_HandleButton+0x2a0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f28 <Screen_HandleButton+0x298>)
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe feef 	bl	8001ce2 <ModelHandle_TimeToSeconds>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4a0c      	ldr	r2, [pc, #48]	@ (8002f38 <Screen_HandleButton+0x2a8>)
 8002f08:	6013      	str	r3, [r2, #0]
            timerSlots[0].active = true;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <Screen_HandleButton+0x2a8>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	721a      	strb	r2, [r3, #8]
        }
        break;
 8002f10:	e249      	b.n	80033a6 <Screen_HandleButton+0x716>
 8002f12:	bf00      	nop
 8002f14:	2000033c 	.word	0x2000033c
 8002f18:	20000358 	.word	0x20000358
 8002f1c:	cccccccd 	.word	0xcccccccd
 8002f20:	0800a1b8 	.word	0x0800a1b8
 8002f24:	0800a1c4 	.word	0x0800a1c4
 8002f28:	20000356 	.word	0x20000356
 8002f2c:	0800a1d0 	.word	0x0800a1d0
 8002f30:	20000355 	.word	0x20000355
 8002f34:	0800a1e0 	.word	0x0800a1e0
 8002f38:	200002d8 	.word	0x200002d8

    case UI_EDIT_TIMER1_OFF_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; }
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d10c      	bne.n	8002f5c <Screen_HandleButton+0x2cc>
 8002f42:	4b98      	ldr	r3, [pc, #608]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b96      	ldr	r3, [pc, #600]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	4b95      	ldr	r3, [pc, #596]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b17      	cmp	r3, #23
 8002f54:	d902      	bls.n	8002f5c <Screen_HandleButton+0x2cc>
 8002f56:	4b93      	ldr	r3, [pc, #588]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h==0) temp_h = 23; else temp_h--; }
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d10d      	bne.n	8002f7e <Screen_HandleButton+0x2ee>
 8002f62:	4b90      	ldr	r3, [pc, #576]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <Screen_HandleButton+0x2e2>
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f6c:	2217      	movs	r2, #23
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e005      	b.n	8002f7e <Screen_HandleButton+0x2ee>
 8002f72:	4b8c      	ldr	r3, [pc, #560]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b8a      	ldr	r3, [pc, #552]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002f7c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_OFF_M; }
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f040 8212 	bne.w	80033aa <Screen_HandleButton+0x71a>
 8002f86:	4b88      	ldr	r3, [pc, #544]	@ (80031a8 <Screen_HandleButton+0x518>)
 8002f88:	220a      	movs	r2, #10
 8002f8a:	701a      	strb	r2, [r3, #0]
        break;
 8002f8c:	e20d      	b.n	80033aa <Screen_HandleButton+0x71a>
    case UI_EDIT_TIMER1_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d10c      	bne.n	8002fae <Screen_HandleButton+0x31e>
 8002f94:	4b85      	ldr	r3, [pc, #532]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b83      	ldr	r3, [pc, #524]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	4b82      	ldr	r3, [pc, #520]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fa6:	d902      	bls.n	8002fae <Screen_HandleButton+0x31e>
 8002fa8:	4b80      	ldr	r3, [pc, #512]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d10d      	bne.n	8002fd0 <Screen_HandleButton+0x340>
 8002fb4:	4b7d      	ldr	r3, [pc, #500]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <Screen_HandleButton+0x334>
 8002fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fbe:	223b      	movs	r2, #59	@ 0x3b
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e005      	b.n	8002fd0 <Screen_HandleButton+0x340>
 8002fc4:	4b79      	ldr	r3, [pc, #484]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	4b77      	ldr	r3, [pc, #476]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fce:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	f040 81eb 	bne.w	80033ae <Screen_HandleButton+0x71e>
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 8002fd8:	4b72      	ldr	r3, [pc, #456]	@ (80031a4 <Screen_HandleButton+0x514>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4a73      	ldr	r2, [pc, #460]	@ (80031ac <Screen_HandleButton+0x51c>)
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fe7d 	bl	8001ce2 <ModelHandle_TimeToSeconds>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a71      	ldr	r2, [pc, #452]	@ (80031b0 <Screen_HandleButton+0x520>)
 8002fec:	6053      	str	r3, [r2, #4]
            timerSlots[0].executedToday = false;
 8002fee:	4b70      	ldr	r3, [pc, #448]	@ (80031b0 <Screen_HandleButton+0x520>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	725a      	strb	r2, [r3, #9]
            timerSlots[0].active = true;
 8002ff4:	4b6e      	ldr	r3, [pc, #440]	@ (80031b0 <Screen_HandleButton+0x520>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	721a      	strb	r2, [r3, #8]

            char cmd[48];
            // use the model’s parser-friendly command
            // TIMER_SET:<slot>:HH:MM:HH:MM
            uint8_t onH,onM,offH,offM;
            ModelHandle_SecondsToTime(timerSlots[0].onTimeSeconds,&onH,&onM);
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <Screen_HandleButton+0x520>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 8003002:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fe84 	bl	8001d14 <ModelHandle_SecondsToTime>
            ModelHandle_SecondsToTime(timerSlots[0].offTimeSeconds,&offH,&offM);
 800300c:	4b68      	ldr	r3, [pc, #416]	@ (80031b0 <Screen_HandleButton+0x520>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003014:	f107 013d 	add.w	r1, r7, #61	@ 0x3d
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fe7b 	bl	8001d14 <ModelHandle_SecondsToTime>
            snprintf(cmd,sizeof(cmd),"TIMER_SET:1:%02u:%02u:%02u:%02u",onH,onM,offH,offM);
 800301e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003022:	461c      	mov	r4, r3
 8003024:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003028:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800302c:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003030:	f107 000c 	add.w	r0, r7, #12
 8003034:	9102      	str	r1, [sp, #8]
 8003036:	9201      	str	r2, [sp, #4]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4623      	mov	r3, r4
 800303c:	4a5d      	ldr	r2, [pc, #372]	@ (80031b4 <Screen_HandleButton+0x524>)
 800303e:	2130      	movs	r1, #48	@ 0x30
 8003040:	f005 fc48 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fdf3 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 800304e:	f7ff fbf3 	bl	8002838 <goto_dash_cycle>
        }
        break;
 8003052:	e1ac      	b.n	80033ae <Screen_HandleButton+0x71e>

    case UI_EDIT_SEARCH_GAP_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d10c      	bne.n	8003074 <Screen_HandleButton+0x3e4>
 800305a:	4b54      	ldr	r3, [pc, #336]	@ (80031ac <Screen_HandleButton+0x51c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b52      	ldr	r3, [pc, #328]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	4b51      	ldr	r3, [pc, #324]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b3b      	cmp	r3, #59	@ 0x3b
 800306c:	d902      	bls.n	8003074 <Screen_HandleButton+0x3e4>
 800306e:	4b4f      	ldr	r3, [pc, #316]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d10d      	bne.n	8003096 <Screen_HandleButton+0x406>
 800307a:	4b4c      	ldr	r3, [pc, #304]	@ (80031ac <Screen_HandleButton+0x51c>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <Screen_HandleButton+0x3fa>
 8003082:	4b4a      	ldr	r3, [pc, #296]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003084:	223b      	movs	r2, #59	@ 0x3b
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e005      	b.n	8003096 <Screen_HandleButton+0x406>
 800308a:	4b48      	ldr	r3, [pc, #288]	@ (80031ac <Screen_HandleButton+0x51c>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	3b01      	subs	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b46      	ldr	r3, [pc, #280]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003094:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_GAP_S; }
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2b02      	cmp	r3, #2
 800309a:	f040 818a 	bne.w	80033b2 <Screen_HandleButton+0x722>
 800309e:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <Screen_HandleButton+0x518>)
 80030a0:	220c      	movs	r2, #12
 80030a2:	701a      	strb	r2, [r3, #0]
        break;
 80030a4:	e185      	b.n	80033b2 <Screen_HandleButton+0x722>
    case UI_EDIT_SEARCH_GAP_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d10c      	bne.n	80030c6 <Screen_HandleButton+0x436>
 80030ac:	4b42      	ldr	r3, [pc, #264]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b40      	ldr	r3, [pc, #256]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80030be:	d902      	bls.n	80030c6 <Screen_HandleButton+0x436>
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d10d      	bne.n	80030e8 <Screen_HandleButton+0x458>
 80030cc:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <Screen_HandleButton+0x44c>
 80030d4:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030d6:	223b      	movs	r2, #59	@ 0x3b
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e005      	b.n	80030e8 <Screen_HandleButton+0x458>
 80030dc:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b34      	ldr	r3, [pc, #208]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030e6:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 8163 	bne.w	80033b6 <Screen_HandleButton+0x726>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_GAP:%02u:%02u", temp_m, temp_s);
 80030f0:	4b2e      	ldr	r3, [pc, #184]	@ (80031ac <Screen_HandleButton+0x51c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b30      	ldr	r3, [pc, #192]	@ (80031b8 <Screen_HandleButton+0x528>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f107 000c 	add.w	r0, r7, #12
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	4a2e      	ldr	r2, [pc, #184]	@ (80031bc <Screen_HandleButton+0x52c>)
 8003104:	2120      	movs	r1, #32
 8003106:	f005 fbe5 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd90 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 8003114:	f7ff fb90 	bl	8002838 <goto_dash_cycle>
        }
        break;
 8003118:	e14d      	b.n	80033b6 <Screen_HandleButton+0x726>

    case UI_EDIT_SEARCH_DRY_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d10c      	bne.n	800313a <Screen_HandleButton+0x4aa>
 8003120:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <Screen_HandleButton+0x51c>)
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	4b1f      	ldr	r3, [pc, #124]	@ (80031ac <Screen_HandleButton+0x51c>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b3b      	cmp	r3, #59	@ 0x3b
 8003132:	d902      	bls.n	800313a <Screen_HandleButton+0x4aa>
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d10d      	bne.n	800315c <Screen_HandleButton+0x4cc>
 8003140:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <Screen_HandleButton+0x4c0>
 8003148:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <Screen_HandleButton+0x51c>)
 800314a:	223b      	movs	r2, #59	@ 0x3b
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e005      	b.n	800315c <Screen_HandleButton+0x4cc>
 8003150:	4b16      	ldr	r3, [pc, #88]	@ (80031ac <Screen_HandleButton+0x51c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <Screen_HandleButton+0x51c>)
 800315a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_DRY_S; }
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b02      	cmp	r3, #2
 8003160:	f040 812b 	bne.w	80033ba <Screen_HandleButton+0x72a>
 8003164:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <Screen_HandleButton+0x518>)
 8003166:	220e      	movs	r2, #14
 8003168:	701a      	strb	r2, [r3, #0]
        break;
 800316a:	e126      	b.n	80033ba <Screen_HandleButton+0x72a>
    case UI_EDIT_SEARCH_DRY_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d10c      	bne.n	800318c <Screen_HandleButton+0x4fc>
 8003172:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <Screen_HandleButton+0x528>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <Screen_HandleButton+0x528>)
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <Screen_HandleButton+0x528>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b3b      	cmp	r3, #59	@ 0x3b
 8003184:	d902      	bls.n	800318c <Screen_HandleButton+0x4fc>
 8003186:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <Screen_HandleButton+0x528>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b04      	cmp	r3, #4
 8003190:	d11c      	bne.n	80031cc <Screen_HandleButton+0x53c>
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <Screen_HandleButton+0x528>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d112      	bne.n	80031c0 <Screen_HandleButton+0x530>
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <Screen_HandleButton+0x528>)
 800319c:	223b      	movs	r2, #59	@ 0x3b
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e014      	b.n	80031cc <Screen_HandleButton+0x53c>
 80031a2:	bf00      	nop
 80031a4:	20000355 	.word	0x20000355
 80031a8:	2000033c 	.word	0x2000033c
 80031ac:	20000356 	.word	0x20000356
 80031b0:	200002d8 	.word	0x200002d8
 80031b4:	0800a1ec 	.word	0x0800a1ec
 80031b8:	20000357 	.word	0x20000357
 80031bc:	0800a20c 	.word	0x0800a20c
 80031c0:	4b85      	ldr	r3, [pc, #532]	@ (80033d8 <Screen_HandleButton+0x748>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b83      	ldr	r3, [pc, #524]	@ (80033d8 <Screen_HandleButton+0x748>)
 80031ca:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 80f5 	bne.w	80033be <Screen_HandleButton+0x72e>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_DRYRUN:%02u:%02u", temp_m, temp_s);
 80031d4:	4b81      	ldr	r3, [pc, #516]	@ (80033dc <Screen_HandleButton+0x74c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b7f      	ldr	r3, [pc, #508]	@ (80033d8 <Screen_HandleButton+0x748>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f107 000c 	add.w	r0, r7, #12
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	4a7e      	ldr	r2, [pc, #504]	@ (80033e0 <Screen_HandleButton+0x750>)
 80031e8:	2120      	movs	r1, #32
 80031ea:	f005 fb73 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd1e 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 80031f8:	f7ff fb1e 	bl	8002838 <goto_dash_cycle>
        }
        break;
 80031fc:	e0df      	b.n	80033be <Screen_HandleButton+0x72e>

    case UI_EDIT_TWIST_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d10c      	bne.n	800321e <Screen_HandleButton+0x58e>
 8003204:	4b75      	ldr	r3, [pc, #468]	@ (80033dc <Screen_HandleButton+0x74c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b73      	ldr	r3, [pc, #460]	@ (80033dc <Screen_HandleButton+0x74c>)
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	4b72      	ldr	r3, [pc, #456]	@ (80033dc <Screen_HandleButton+0x74c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b3b      	cmp	r3, #59	@ 0x3b
 8003216:	d902      	bls.n	800321e <Screen_HandleButton+0x58e>
 8003218:	4b70      	ldr	r3, [pc, #448]	@ (80033dc <Screen_HandleButton+0x74c>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d10d      	bne.n	8003240 <Screen_HandleButton+0x5b0>
 8003224:	4b6d      	ldr	r3, [pc, #436]	@ (80033dc <Screen_HandleButton+0x74c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <Screen_HandleButton+0x5a4>
 800322c:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <Screen_HandleButton+0x74c>)
 800322e:	223b      	movs	r2, #59	@ 0x3b
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e005      	b.n	8003240 <Screen_HandleButton+0x5b0>
 8003234:	4b69      	ldr	r3, [pc, #420]	@ (80033dc <Screen_HandleButton+0x74c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <Screen_HandleButton+0x74c>)
 800323e:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_ON_S; }
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2b02      	cmp	r3, #2
 8003244:	f040 80bd 	bne.w	80033c2 <Screen_HandleButton+0x732>
 8003248:	4b66      	ldr	r3, [pc, #408]	@ (80033e4 <Screen_HandleButton+0x754>)
 800324a:	2210      	movs	r2, #16
 800324c:	701a      	strb	r2, [r3, #0]
        break;
 800324e:	e0b8      	b.n	80033c2 <Screen_HandleButton+0x732>
    case UI_EDIT_TWIST_ON_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d10c      	bne.n	8003270 <Screen_HandleButton+0x5e0>
 8003256:	4b60      	ldr	r3, [pc, #384]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b5e      	ldr	r3, [pc, #376]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b3b      	cmp	r3, #59	@ 0x3b
 8003268:	d902      	bls.n	8003270 <Screen_HandleButton+0x5e0>
 800326a:	4b5b      	ldr	r3, [pc, #364]	@ (80033d8 <Screen_HandleButton+0x748>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b04      	cmp	r3, #4
 8003274:	d10d      	bne.n	8003292 <Screen_HandleButton+0x602>
 8003276:	4b58      	ldr	r3, [pc, #352]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <Screen_HandleButton+0x5f6>
 800327e:	4b56      	ldr	r3, [pc, #344]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003280:	223b      	movs	r2, #59	@ 0x3b
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <Screen_HandleButton+0x602>
 8003286:	4b54      	ldr	r3, [pc, #336]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3b01      	subs	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b52      	ldr	r3, [pc, #328]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003290:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b02      	cmp	r3, #2
 8003296:	f040 8096 	bne.w	80033c6 <Screen_HandleButton+0x736>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_ONDUR:%02u:%02u", temp_m, temp_s);
 800329a:	4b50      	ldr	r3, [pc, #320]	@ (80033dc <Screen_HandleButton+0x74c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <Screen_HandleButton+0x748>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f107 000c 	add.w	r0, r7, #12
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	4a4e      	ldr	r2, [pc, #312]	@ (80033e8 <Screen_HandleButton+0x758>)
 80032ae:	2120      	movs	r1, #32
 80032b0:	f005 fb10 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fcbb 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 80032be:	f7ff fabb 	bl	8002838 <goto_dash_cycle>
        }
        break;
 80032c2:	e080      	b.n	80033c6 <Screen_HandleButton+0x736>

    case UI_EDIT_TWIST_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d10c      	bne.n	80032e4 <Screen_HandleButton+0x654>
 80032ca:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b3b      	cmp	r3, #59	@ 0x3b
 80032dc:	d902      	bls.n	80032e4 <Screen_HandleButton+0x654>
 80032de:	4b3f      	ldr	r3, [pc, #252]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d10d      	bne.n	8003306 <Screen_HandleButton+0x676>
 80032ea:	4b3c      	ldr	r3, [pc, #240]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <Screen_HandleButton+0x66a>
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032f4:	223b      	movs	r2, #59	@ 0x3b
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e005      	b.n	8003306 <Screen_HandleButton+0x676>
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <Screen_HandleButton+0x74c>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	3b01      	subs	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <Screen_HandleButton+0x74c>)
 8003304:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_OFF_S; }
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d15e      	bne.n	80033ca <Screen_HandleButton+0x73a>
 800330c:	4b35      	ldr	r3, [pc, #212]	@ (80033e4 <Screen_HandleButton+0x754>)
 800330e:	2212      	movs	r2, #18
 8003310:	701a      	strb	r2, [r3, #0]
        break;
 8003312:	e05a      	b.n	80033ca <Screen_HandleButton+0x73a>
    case UI_EDIT_TWIST_OFF_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d10c      	bne.n	8003334 <Screen_HandleButton+0x6a4>
 800331a:	4b2f      	ldr	r3, [pc, #188]	@ (80033d8 <Screen_HandleButton+0x748>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	4b2c      	ldr	r3, [pc, #176]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b3b      	cmp	r3, #59	@ 0x3b
 800332c:	d902      	bls.n	8003334 <Screen_HandleButton+0x6a4>
 800332e:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d10d      	bne.n	8003356 <Screen_HandleButton+0x6c6>
 800333a:	4b27      	ldr	r3, [pc, #156]	@ (80033d8 <Screen_HandleButton+0x748>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <Screen_HandleButton+0x6ba>
 8003342:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003344:	223b      	movs	r2, #59	@ 0x3b
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e005      	b.n	8003356 <Screen_HandleButton+0x6c6>
 800334a:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <Screen_HandleButton+0x748>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b21      	ldr	r3, [pc, #132]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003354:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d138      	bne.n	80033ce <Screen_HandleButton+0x73e>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_OFFDUR:%02u:%02u", temp_m, temp_s);
 800335c:	4b1f      	ldr	r3, [pc, #124]	@ (80033dc <Screen_HandleButton+0x74c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <Screen_HandleButton+0x748>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f107 000c 	add.w	r0, r7, #12
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <Screen_HandleButton+0x75c>)
 8003370:	2120      	movs	r1, #32
 8003372:	f005 faaf 	bl	80088d4 <sniprintf>
            send_cmd(cmd);
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fc5a 	bl	8002c34 <send_cmd>
            goto_dash_cycle();
 8003380:	f7ff fa5a 	bl	8002838 <goto_dash_cycle>
        }
        break;
 8003384:	e023      	b.n	80033ce <Screen_HandleButton+0x73e>

    default: break;
 8003386:	bf00      	nop
 8003388:	e022      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 800338a:	bf00      	nop
 800338c:	e020      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 800338e:	bf00      	nop
 8003390:	e01e      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 8003392:	bf00      	nop
 8003394:	e01c      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 8003396:	bf00      	nop
 8003398:	e01a      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 800339a:	bf00      	nop
 800339c:	e018      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 800339e:	bf00      	nop
 80033a0:	e016      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033a2:	bf00      	nop
 80033a4:	e014      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033a6:	bf00      	nop
 80033a8:	e012      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033aa:	bf00      	nop
 80033ac:	e010      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033ae:	bf00      	nop
 80033b0:	e00e      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033b2:	bf00      	nop
 80033b4:	e00c      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033b6:	bf00      	nop
 80033b8:	e00a      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033ba:	bf00      	nop
 80033bc:	e008      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033be:	bf00      	nop
 80033c0:	e006      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033c2:	bf00      	nop
 80033c4:	e004      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <Screen_HandleButton+0x740>
        break;
 80033ce:	bf00      	nop
    }
}
 80033d0:	374c      	adds	r7, #76	@ 0x4c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000357 	.word	0x20000357
 80033dc:	20000356 	.word	0x20000356
 80033e0:	0800a224 	.word	0x0800a224
 80033e4:	2000033c 	.word	0x2000033c
 80033e8:	0800a23c 	.word	0x0800a23c
 80033ec:	0800a254 	.word	0x0800a254

080033f0 <Screen_Update>:

void Screen_Update(void){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80033f6:	f000 fcab 	bl	8003d50 <HAL_GetTick>
 80033fa:	6078      	str	r0, [r7, #4]

    /* auto-advance dashboard pages */
    if (ui == UI_WELCOME){
 80033fc:	4b7e      	ldr	r3, [pc, #504]	@ (80035f8 <Screen_Update+0x208>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d110      	bne.n	8003426 <Screen_Update+0x36>
        if (now - lastLcdUpdateTime < WELCOME_MS){
 8003404:	4b7d      	ldr	r3, [pc, #500]	@ (80035fc <Screen_Update+0x20c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003410:	4293      	cmp	r3, r2
 8003412:	d202      	bcs.n	800341a <Screen_Update+0x2a>
            show_welcome();
 8003414:	f7ff fa24 	bl	8002860 <show_welcome>
            return;
 8003418:	e0eb      	b.n	80035f2 <Screen_Update+0x202>
        }
        ui = UI_DASH_WATER;
 800341a:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <Screen_Update+0x208>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003420:	4a76      	ldr	r2, [pc, #472]	@ (80035fc <Screen_Update+0x20c>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6013      	str	r3, [r2, #0]
    }

    /* periodic page refresh / cycle */
    if (ui >= UI_DASH_WATER && ui <= UI_DASH_TWIST){
 8003426:	4b74      	ldr	r3, [pc, #464]	@ (80035f8 <Screen_Update+0x208>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01b      	beq.n	8003466 <Screen_Update+0x76>
 800342e:	4b72      	ldr	r3, [pc, #456]	@ (80035f8 <Screen_Update+0x208>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d817      	bhi.n	8003466 <Screen_Update+0x76>
        if (now - lastLcdUpdateTime >= PAGE_MS){
 8003436:	4b71      	ldr	r3, [pc, #452]	@ (80035fc <Screen_Update+0x20c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003442:	4293      	cmp	r3, r2
 8003444:	d30f      	bcc.n	8003466 <Screen_Update+0x76>
            ui = (UiState)(ui + 1);
 8003446:	4b6c      	ldr	r3, [pc, #432]	@ (80035f8 <Screen_Update+0x208>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <Screen_Update+0x208>)
 8003450:	701a      	strb	r2, [r3, #0]
            if (ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8003452:	4b69      	ldr	r3, [pc, #420]	@ (80035f8 <Screen_Update+0x208>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d902      	bls.n	8003460 <Screen_Update+0x70>
 800345a:	4b67      	ldr	r3, [pc, #412]	@ (80035f8 <Screen_Update+0x208>)
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
            lastLcdUpdateTime = now;
 8003460:	4a66      	ldr	r2, [pc, #408]	@ (80035fc <Screen_Update+0x20c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
        }
    }

    /* render current state */
    switch(ui){
 8003466:	4b64      	ldr	r3, [pc, #400]	@ (80035f8 <Screen_Update+0x208>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	2b13      	cmp	r3, #19
 800346e:	f200 80bf 	bhi.w	80035f0 <Screen_Update+0x200>
 8003472:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <Screen_Update+0x88>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	080034c9 	.word	0x080034c9
 800347c:	080034cf 	.word	0x080034cf
 8003480:	080034d5 	.word	0x080034d5
 8003484:	080034db 	.word	0x080034db
 8003488:	080034e1 	.word	0x080034e1
 800348c:	0800350b 	.word	0x0800350b
 8003490:	08003519 	.word	0x08003519
 8003494:	0800352b 	.word	0x0800352b
 8003498:	0800353d 	.word	0x0800353d
 800349c:	0800354f 	.word	0x0800354f
 80034a0:	08003561 	.word	0x08003561
 80034a4:	08003573 	.word	0x08003573
 80034a8:	08003585 	.word	0x08003585
 80034ac:	08003597 	.word	0x08003597
 80034b0:	080035a9 	.word	0x080035a9
 80034b4:	080035bb 	.word	0x080035bb
 80034b8:	080035cd 	.word	0x080035cd
 80034bc:	080035df 	.word	0x080035df
 80034c0:	080034e7 	.word	0x080034e7
 80034c4:	080034f9 	.word	0x080034f9
        case UI_DASH_WATER:  show_dash_water();  break;
 80034c8:	f7ff f9da 	bl	8002880 <show_dash_water>
 80034cc:	e091      	b.n	80035f2 <Screen_Update+0x202>
        case UI_DASH_MODE:   show_dash_mode();   break;
 80034ce:	f7ff fa1b 	bl	8002908 <show_dash_mode>
 80034d2:	e08e      	b.n	80035f2 <Screen_Update+0x202>
        case UI_DASH_SEARCH: show_dash_search(); break;
 80034d4:	f7ff fa5a 	bl	800298c <show_dash_search>
 80034d8:	e08b      	b.n	80035f2 <Screen_Update+0x202>
        case UI_DASH_TWIST:  show_dash_twist();  break;
 80034da:	f7ff fa83 	bl	80029e4 <show_dash_twist>
 80034de:	e088      	b.n	80035f2 <Screen_Update+0x202>
        case UI_MENU:        show_menu();        break;
 80034e0:	f7ff faac 	bl	8002a3c <show_menu>
 80034e4:	e085      	b.n	80035f2 <Screen_Update+0x202>

        case UI_CONFIRM_MANUAL_ON:
            lcd_clear(); lcd_line0("Manual -> ON");
 80034e6:	f7fd fc5d 	bl	8000da4 <lcd_clear>
 80034ea:	4845      	ldr	r0, [pc, #276]	@ (8003600 <Screen_Update+0x210>)
 80034ec:	f7ff f986 	bl	80027fc <lcd_line0>
            lcd_line1("SEL:OK  UP/DN:Back");
 80034f0:	4844      	ldr	r0, [pc, #272]	@ (8003604 <Screen_Update+0x214>)
 80034f2:	f7ff f992 	bl	800281a <lcd_line1>
            break;
 80034f6:	e07c      	b.n	80035f2 <Screen_Update+0x202>
        case UI_CONFIRM_MANUAL_OFF:
            lcd_clear(); lcd_line0("Manual -> OFF");
 80034f8:	f7fd fc54 	bl	8000da4 <lcd_clear>
 80034fc:	4842      	ldr	r0, [pc, #264]	@ (8003608 <Screen_Update+0x218>)
 80034fe:	f7ff f97d 	bl	80027fc <lcd_line0>
            lcd_line1("SEL:OK  UP/DN:Back");
 8003502:	4840      	ldr	r0, [pc, #256]	@ (8003604 <Screen_Update+0x214>)
 8003504:	f7ff f989 	bl	800281a <lcd_line1>
            break;
 8003508:	e073      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_COUNTDOWN_MIN:
            show_edit_mm("Countdown (min)", temp_m);
 800350a:	4b40      	ldr	r3, [pc, #256]	@ (800360c <Screen_Update+0x21c>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	483f      	ldr	r0, [pc, #252]	@ (8003610 <Screen_Update+0x220>)
 8003512:	f7ff fab7 	bl	8002a84 <show_edit_mm>
            break;
 8003516:	e06c      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_TIMER1_ON_H:
            show_edit_hhmm("Timer1 ON  HH", temp_h, temp_m);
 8003518:	4b3e      	ldr	r3, [pc, #248]	@ (8003614 <Screen_Update+0x224>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4a3b      	ldr	r2, [pc, #236]	@ (800360c <Screen_Update+0x21c>)
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	483d      	ldr	r0, [pc, #244]	@ (8003618 <Screen_Update+0x228>)
 8003524:	f7ff faec 	bl	8002b00 <show_edit_hhmm>
            break;
 8003528:	e063      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_TIMER1_ON_M:
            show_edit_hhmm("Timer1 ON  MM", temp_h, temp_m);
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <Screen_Update+0x224>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4a37      	ldr	r2, [pc, #220]	@ (800360c <Screen_Update+0x21c>)
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4839      	ldr	r0, [pc, #228]	@ (800361c <Screen_Update+0x22c>)
 8003536:	f7ff fae3 	bl	8002b00 <show_edit_hhmm>
            break;
 800353a:	e05a      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_TIMER1_OFF_H:
            show_edit_hhmm("Timer1 OFF HH", temp_h, temp_m);
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <Screen_Update+0x224>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4a32      	ldr	r2, [pc, #200]	@ (800360c <Screen_Update+0x21c>)
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	4836      	ldr	r0, [pc, #216]	@ (8003620 <Screen_Update+0x230>)
 8003548:	f7ff fada 	bl	8002b00 <show_edit_hhmm>
            break;
 800354c:	e051      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_TIMER1_OFF_M:
            show_edit_hhmm("Timer1 OFF MM", temp_h, temp_m);
 800354e:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <Screen_Update+0x224>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	4a2e      	ldr	r2, [pc, #184]	@ (800360c <Screen_Update+0x21c>)
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4832      	ldr	r0, [pc, #200]	@ (8003624 <Screen_Update+0x234>)
 800355a:	f7ff fad1 	bl	8002b00 <show_edit_hhmm>
            break;
 800355e:	e048      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_SEARCH_GAP_M:
            show_edit_ms("Search Gap  MM", temp_m, temp_s);
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <Screen_Update+0x21c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4a30      	ldr	r2, [pc, #192]	@ (8003628 <Screen_Update+0x238>)
 8003566:	7812      	ldrb	r2, [r2, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	4830      	ldr	r0, [pc, #192]	@ (800362c <Screen_Update+0x23c>)
 800356c:	f7ff faa6 	bl	8002abc <show_edit_ms>
            break;
 8003570:	e03f      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_SEARCH_GAP_S:
            show_edit_ms("Search Gap  SS", temp_m, temp_s);
 8003572:	4b26      	ldr	r3, [pc, #152]	@ (800360c <Screen_Update+0x21c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	4a2c      	ldr	r2, [pc, #176]	@ (8003628 <Screen_Update+0x238>)
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	482c      	ldr	r0, [pc, #176]	@ (8003630 <Screen_Update+0x240>)
 800357e:	f7ff fa9d 	bl	8002abc <show_edit_ms>
            break;
 8003582:	e036      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_SEARCH_DRY_M:
            show_edit_ms("Dry Run     MM", temp_m, temp_s);
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <Screen_Update+0x21c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	4a27      	ldr	r2, [pc, #156]	@ (8003628 <Screen_Update+0x238>)
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	4829      	ldr	r0, [pc, #164]	@ (8003634 <Screen_Update+0x244>)
 8003590:	f7ff fa94 	bl	8002abc <show_edit_ms>
            break;
 8003594:	e02d      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_SEARCH_DRY_S:
            show_edit_ms("Dry Run     SS", temp_m, temp_s);
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <Screen_Update+0x21c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4a23      	ldr	r2, [pc, #140]	@ (8003628 <Screen_Update+0x238>)
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4825      	ldr	r0, [pc, #148]	@ (8003638 <Screen_Update+0x248>)
 80035a2:	f7ff fa8b 	bl	8002abc <show_edit_ms>
            break;
 80035a6:	e024      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_TWIST_ON_M:
            show_edit_ms("Twist ON    MM", temp_m, temp_s);
 80035a8:	4b18      	ldr	r3, [pc, #96]	@ (800360c <Screen_Update+0x21c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003628 <Screen_Update+0x238>)
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	4822      	ldr	r0, [pc, #136]	@ (800363c <Screen_Update+0x24c>)
 80035b4:	f7ff fa82 	bl	8002abc <show_edit_ms>
            break;
 80035b8:	e01b      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_TWIST_ON_S:
            show_edit_ms("Twist ON    SS", temp_m, temp_s);
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <Screen_Update+0x21c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	4a1a      	ldr	r2, [pc, #104]	@ (8003628 <Screen_Update+0x238>)
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	481e      	ldr	r0, [pc, #120]	@ (8003640 <Screen_Update+0x250>)
 80035c6:	f7ff fa79 	bl	8002abc <show_edit_ms>
            break;
 80035ca:	e012      	b.n	80035f2 <Screen_Update+0x202>

        case UI_EDIT_TWIST_OFF_M:
            show_edit_ms("Twist OFF   MM", temp_m, temp_s);
 80035cc:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <Screen_Update+0x21c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <Screen_Update+0x238>)
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	481b      	ldr	r0, [pc, #108]	@ (8003644 <Screen_Update+0x254>)
 80035d8:	f7ff fa70 	bl	8002abc <show_edit_ms>
            break;
 80035dc:	e009      	b.n	80035f2 <Screen_Update+0x202>
        case UI_EDIT_TWIST_OFF_S:
            show_edit_ms("Twist OFF   SS", temp_m, temp_s);
 80035de:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <Screen_Update+0x21c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <Screen_Update+0x238>)
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4817      	ldr	r0, [pc, #92]	@ (8003648 <Screen_Update+0x258>)
 80035ea:	f7ff fa67 	bl	8002abc <show_edit_ms>
            break;
 80035ee:	e000      	b.n	80035f2 <Screen_Update+0x202>

        default: break;
 80035f0:	bf00      	nop
    }
}
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000033c 	.word	0x2000033c
 80035fc:	20000338 	.word	0x20000338
 8003600:	0800a26c 	.word	0x0800a26c
 8003604:	0800a27c 	.word	0x0800a27c
 8003608:	0800a290 	.word	0x0800a290
 800360c:	20000356 	.word	0x20000356
 8003610:	0800a028 	.word	0x0800a028
 8003614:	20000355 	.word	0x20000355
 8003618:	0800a2a0 	.word	0x0800a2a0
 800361c:	0800a2b0 	.word	0x0800a2b0
 8003620:	0800a2c0 	.word	0x0800a2c0
 8003624:	0800a2d0 	.word	0x0800a2d0
 8003628:	20000357 	.word	0x20000357
 800362c:	0800a2e0 	.word	0x0800a2e0
 8003630:	0800a2f0 	.word	0x0800a2f0
 8003634:	0800a300 	.word	0x0800a300
 8003638:	0800a310 	.word	0x0800a310
 800363c:	0800a320 	.word	0x0800a320
 8003640:	0800a330 	.word	0x0800a330
 8003644:	0800a340 	.word	0x0800a340
 8003648:	0800a350 	.word	0x0800a350

0800364c <Screen_HandleSwitches>:

/* ===== Convenience mapping (from main) ===== */
void Screen_HandleSwitches(void){
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
    if (Switch_WasPressed(1)) Screen_HandleButton(BTN_RESET);
 8003650:	2001      	movs	r0, #1
 8003652:	f000 f9d9 	bl	8003a08 <Switch_WasPressed>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <Screen_HandleSwitches+0x16>
 800365c:	2001      	movs	r0, #1
 800365e:	f7ff fb17 	bl	8002c90 <Screen_HandleButton>
    if (Switch_WasPressed(2)) Screen_HandleButton(BTN_SELECT);
 8003662:	2002      	movs	r0, #2
 8003664:	f000 f9d0 	bl	8003a08 <Switch_WasPressed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <Screen_HandleSwitches+0x28>
 800366e:	2002      	movs	r0, #2
 8003670:	f7ff fb0e 	bl	8002c90 <Screen_HandleButton>
    if (Switch_WasPressed(3)) Screen_HandleButton(BTN_UP);
 8003674:	2003      	movs	r0, #3
 8003676:	f000 f9c7 	bl	8003a08 <Switch_WasPressed>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <Screen_HandleSwitches+0x3a>
 8003680:	2003      	movs	r0, #3
 8003682:	f7ff fb05 	bl	8002c90 <Screen_HandleButton>
    if (Switch_WasPressed(4)) Screen_HandleButton(BTN_DOWN);
 8003686:	2004      	movs	r0, #4
 8003688:	f000 f9be 	bl	8003a08 <Switch_WasPressed>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <Screen_HandleSwitches+0x4c>
 8003692:	2004      	movs	r0, #4
 8003694:	f7ff fafc 	bl	8002c90 <Screen_HandleButton>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6193      	str	r3, [r2, #24]
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	61d3      	str	r3, [r2, #28]
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_MspInit+0x5c>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_MspInit+0x60>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <HAL_MspInit+0x60>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000

08003700 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a14      	ldr	r2, [pc, #80]	@ (800376c <HAL_ADC_MspInit+0x6c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d121      	bne.n	8003764 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003720:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 8003726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800372a:	6193      	str	r3, [r2, #24]
 800372c:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a0c      	ldr	r2, [pc, #48]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <HAL_ADC_MspInit+0x70>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003750:	233f      	movs	r3, #63	@ 0x3f
 8003752:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003754:	2303      	movs	r3, #3
 8003756:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4619      	mov	r1, r3
 800375e:	4805      	ldr	r0, [pc, #20]	@ (8003774 <HAL_ADC_MspInit+0x74>)
 8003760:	f001 f90c 	bl	800497c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003764:	bf00      	nop
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40012400 	.word	0x40012400
 8003770:	40021000 	.word	0x40021000
 8003774:	40010800 	.word	0x40010800

08003778 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_I2C_MspInit+0x74>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d124      	bne.n	80037e2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6193      	str	r3, [r2, #24]
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b6:	2312      	movs	r3, #18
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4619      	mov	r1, r3
 80037c4:	480b      	ldr	r0, [pc, #44]	@ (80037f4 <HAL_I2C_MspInit+0x7c>)
 80037c6:	f001 f8d9 	bl	800497c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80037e2:	bf00      	nop
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40005800 	.word	0x40005800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010c00 	.word	0x40010c00

080037f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0f      	ldr	r2, [pc, #60]	@ (8003844 <HAL_RTC_MspInit+0x4c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d118      	bne.n	800383c <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800380a:	f002 fbfb 	bl	8006004 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800380e:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_RTC_MspInit+0x50>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a0d      	ldr	r2, [pc, #52]	@ (8003848 <HAL_RTC_MspInit+0x50>)
 8003814:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003818:	61d3      	str	r3, [r2, #28]
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RTC_MspInit+0x50>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RTC_MspInit+0x54>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2100      	movs	r1, #0
 8003830:	2029      	movs	r0, #41	@ 0x29
 8003832:	f001 f86c 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003836:	2029      	movs	r0, #41	@ 0x29
 8003838:	f001 f885 	bl	8004946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40002800 	.word	0x40002800
 8003848:	40021000 	.word	0x40021000
 800384c:	4242043c 	.word	0x4242043c

08003850 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a22      	ldr	r2, [pc, #136]	@ (80038f4 <HAL_SPI_MspInit+0xa4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d13d      	bne.n	80038ec <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003870:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 8003876:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a1a      	ldr	r2, [pc, #104]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <HAL_SPI_MspInit+0xa8>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80038a0:	2328      	movs	r3, #40	@ 0x28
 80038a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a8:	2303      	movs	r3, #3
 80038aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	4812      	ldr	r0, [pc, #72]	@ (80038fc <HAL_SPI_MspInit+0xac>)
 80038b4:	f001 f862 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038b8:	2310      	movs	r3, #16
 80038ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	4619      	mov	r1, r3
 80038ca:	480c      	ldr	r0, [pc, #48]	@ (80038fc <HAL_SPI_MspInit+0xac>)
 80038cc:	f001 f856 	bl	800497c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_SPI_MspInit+0xb0>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e6:	4a06      	ldr	r2, [pc, #24]	@ (8003900 <HAL_SPI_MspInit+0xb0>)
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80038ec:	bf00      	nop
 80038ee:	3728      	adds	r7, #40	@ 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40013000 	.word	0x40013000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40010c00 	.word	0x40010c00
 8003900:	40010000 	.word	0x40010000

08003904 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0310 	add.w	r3, r7, #16
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_UART_MspInit+0x8c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d131      	bne.n	8003988 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003924:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_UART_MspInit+0x90>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <HAL_UART_MspInit+0x90>)
 800392a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b18      	ldr	r3, [pc, #96]	@ (8003994 <HAL_UART_MspInit+0x90>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393c:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <HAL_UART_MspInit+0x90>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_UART_MspInit+0x90>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6193      	str	r3, [r2, #24]
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_UART_MspInit+0x90>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003962:	f107 0310 	add.w	r3, r7, #16
 8003966:	4619      	mov	r1, r3
 8003968:	480b      	ldr	r0, [pc, #44]	@ (8003998 <HAL_UART_MspInit+0x94>)
 800396a:	f001 f807 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800396e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4619      	mov	r1, r3
 8003982:	4805      	ldr	r0, [pc, #20]	@ (8003998 <HAL_UART_MspInit+0x94>)
 8003984:	f000 fffa 	bl	800497c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003988:	bf00      	nop
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40013800 	.word	0x40013800
 8003994:	40021000 	.word	0x40021000
 8003998:	40010800 	.word	0x40010800

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <NMI_Handler+0x4>

080039a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <HardFault_Handler+0x4>

080039ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <MemManage_Handler+0x4>

080039b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <BusFault_Handler+0x4>

080039bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <UsageFault_Handler+0x4>

080039c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ec:	f000 f99e 	bl	8003d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80039f8:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <RTC_Alarm_IRQHandler+0x10>)
 80039fa:	f003 fbf5 	bl	80071e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200001a0 	.word	0x200001a0

08003a08 <Switch_WasPressed>:
    return (st == GPIO_PIN_RESET); /* active low */
}

/* returns true only once per press (debounced) */
bool Switch_WasPressed(uint8_t idx)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState st = GPIO_PIN_SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
    uint32_t now = HAL_GetTick();
 8003a16:	f000 f99b 	bl	8003d50 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]
    switch (idx) {
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d82b      	bhi.n	8003a7c <Switch_WasPressed+0x74>
 8003a24:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <Switch_WasPressed+0x24>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4d 	.word	0x08003a4d
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a6d 	.word	0x08003a6d
        case 1: st = HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin); break;
 8003a3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a40:	4828      	ldr	r0, [pc, #160]	@ (8003ae4 <Switch_WasPressed+0xdc>)
 8003a42:	f001 f91f 	bl	8004c84 <HAL_GPIO_ReadPin>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e019      	b.n	8003a80 <Switch_WasPressed+0x78>
        case 2: st = HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin); break;
 8003a4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a50:	4824      	ldr	r0, [pc, #144]	@ (8003ae4 <Switch_WasPressed+0xdc>)
 8003a52:	f001 f917 	bl	8004c84 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e011      	b.n	8003a80 <Switch_WasPressed+0x78>
        case 3: st = HAL_GPIO_ReadPin(SWITCH3_GPIO_Port, SWITCH3_Pin); break;
 8003a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a60:	4820      	ldr	r0, [pc, #128]	@ (8003ae4 <Switch_WasPressed+0xdc>)
 8003a62:	f001 f90f 	bl	8004c84 <HAL_GPIO_ReadPin>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e009      	b.n	8003a80 <Switch_WasPressed+0x78>
        case 4: st = HAL_GPIO_ReadPin(SWITCH4_GPIO_Port, SWITCH4_Pin); break;
 8003a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a70:	481c      	ldr	r0, [pc, #112]	@ (8003ae4 <Switch_WasPressed+0xdc>)
 8003a72:	f001 f907 	bl	8004c84 <HAL_GPIO_ReadPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e001      	b.n	8003a80 <Switch_WasPressed+0x78>
        default: return false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e02c      	b.n	8003ada <Switch_WasPressed+0xd2>
    }

    if (st != last_state[idx]) {
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	4a19      	ldr	r2, [pc, #100]	@ (8003ae8 <Switch_WasPressed+0xe0>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d008      	beq.n	8003a9e <Switch_WasPressed+0x96>
        last_change[idx] = now;
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	4917      	ldr	r1, [pc, #92]	@ (8003aec <Switch_WasPressed+0xe4>)
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        last_state[idx] = st;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	4913      	ldr	r1, [pc, #76]	@ (8003ae8 <Switch_WasPressed+0xe0>)
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	54ca      	strb	r2, [r1, r3]
    }

    if ((now - last_change[idx]) > DEBOUNCE_MS) {
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <Switch_WasPressed+0xe4>)
 8003aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b32      	cmp	r3, #50	@ 0x32
 8003aac:	d914      	bls.n	8003ad8 <Switch_WasPressed+0xd0>
        /* stable state; detect falling edge (released -> pressed) */
        static bool reported[5] = {false, false, false, false, false};
        if (st == GPIO_PIN_RESET) {
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <Switch_WasPressed+0xc8>
            if (!reported[idx]) {
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <Switch_WasPressed+0xe8>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <Switch_WasPressed+0xd0>
                reported[idx] = true;
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <Switch_WasPressed+0xe8>)
 8003ac8:	2101      	movs	r1, #1
 8003aca:	54d1      	strb	r1, [r2, r3]
                return true;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e004      	b.n	8003ada <Switch_WasPressed+0xd2>
            }
        } else {
            reported[idx] = false;
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <Switch_WasPressed+0xe8>)
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	54d1      	strb	r1, [r2, r3]
        }
    }
    return false;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40010c00 	.word	0x40010c00
 8003ae8:	2000035c 	.word	0x2000035c
 8003aec:	20000364 	.word	0x20000364
 8003af0:	20000378 	.word	0x20000378

08003af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003afc:	4a14      	ldr	r2, [pc, #80]	@ (8003b50 <_sbrk+0x5c>)
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <_sbrk+0x60>)
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b08:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <_sbrk+0x64>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <_sbrk+0x64>)
 8003b12:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <_sbrk+0x68>)
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <_sbrk+0x64>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d207      	bcs.n	8003b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b24:	f004 ff8a 	bl	8008a3c <__errno>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	e009      	b.n	8003b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b34:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <_sbrk+0x64>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	4a05      	ldr	r2, [pc, #20]	@ (8003b58 <_sbrk+0x64>)
 8003b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20005000 	.word	0x20005000
 8003b54:	00000400 	.word	0x00000400
 8003b58:	20000380 	.word	0x20000380
 8003b5c:	20000518 	.word	0x20000518

08003b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	2100      	movs	r1, #0
 8003b74:	4807      	ldr	r0, [pc, #28]	@ (8003b94 <UART_Init+0x28>)
 8003b76:	f004 ff33 	bl	80089e0 <memset>
    rxIndex = 0;
 8003b7a:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <UART_Init+0x2c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <UART_Init+0x30>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8003b86:	2201      	movs	r2, #1
 8003b88:	4905      	ldr	r1, [pc, #20]	@ (8003ba0 <UART_Init+0x34>)
 8003b8a:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <UART_Init+0x38>)
 8003b8c:	f004 fc70 	bl	8008470 <HAL_UART_Receive_IT>
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000388 	.word	0x20000388
 8003b98:	200003c8 	.word	0x200003c8
 8003b9c:	200003ca 	.word	0x200003ca
 8003ba0:	20000384 	.word	0x20000384
 8003ba4:	2000020c 	.word	0x2000020c

08003ba8 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	f7fc fad4 	bl	8000160 <strlen>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f004 fbc9 	bl	800835a <HAL_UART_Transmit>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <UART_GetReceivedPacket+0x78>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d02c      	beq.n	8003c3c <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8003be2:	481a      	ldr	r0, [pc, #104]	@ (8003c4c <UART_GetReceivedPacket+0x7c>)
 8003be4:	f7fc fabc 	bl	8000160 <strlen>
 8003be8:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d219      	bcs.n	8003c26 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4914      	ldr	r1, [pc, #80]	@ (8003c4c <UART_GetReceivedPacket+0x7c>)
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f004 ff0a 	bl	8008a14 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	2100      	movs	r1, #0
 8003c10:	480e      	ldr	r0, [pc, #56]	@ (8003c4c <UART_GetReceivedPacket+0x7c>)
 8003c12:	f004 fee5 	bl	80089e0 <memset>
            rxIndex = 0;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <UART_GetReceivedPacket+0x80>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <UART_GetReceivedPacket+0x78>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
            return true;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00b      	b.n	8003c3e <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4808      	ldr	r0, [pc, #32]	@ (8003c4c <UART_GetReceivedPacket+0x7c>)
 8003c2c:	f004 fed8 	bl	80089e0 <memset>
            rxIndex = 0;
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <UART_GetReceivedPacket+0x80>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003c36:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <UART_GetReceivedPacket+0x78>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200003ca 	.word	0x200003ca
 8003c4c:	20000388 	.word	0x20000388
 8003c50:	200003c8 	.word	0x200003c8

08003c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c54:	f7ff ff84 	bl	8003b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c58:	480b      	ldr	r0, [pc, #44]	@ (8003c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c5a:	490c      	ldr	r1, [pc, #48]	@ (8003c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c60:	e002      	b.n	8003c68 <LoopCopyDataInit>

08003c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c66:	3304      	adds	r3, #4

08003c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c6c:	d3f9      	bcc.n	8003c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c6e:	4a09      	ldr	r2, [pc, #36]	@ (8003c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c70:	4c09      	ldr	r4, [pc, #36]	@ (8003c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c74:	e001      	b.n	8003c7a <LoopFillZerobss>

08003c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c78:	3204      	adds	r2, #4

08003c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c7c:	d3fb      	bcc.n	8003c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c7e:	f004 fee3 	bl	8008a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c82:	f7fd fd7f 	bl	8001784 <main>
  bx lr
 8003c86:	4770      	bx	lr
  ldr r0, =_sdata
 8003c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c8c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003c90:	0800a524 	.word	0x0800a524
  ldr r2, =_sbss
 8003c94:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003c98:	20000518 	.word	0x20000518

08003c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c9c:	e7fe      	b.n	8003c9c <ADC1_2_IRQHandler>
	...

08003ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca4:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_Init+0x28>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a07      	ldr	r2, [pc, #28]	@ (8003cc8 <HAL_Init+0x28>)
 8003caa:	f043 0310 	orr.w	r3, r3, #16
 8003cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 fe21 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f000 f808 	bl	8003ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cbc:	f7ff fcee 	bl	800369c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40022000 	.word	0x40022000

08003ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd4:	4b12      	ldr	r3, [pc, #72]	@ (8003d20 <HAL_InitTick+0x54>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b12      	ldr	r3, [pc, #72]	@ (8003d24 <HAL_InitTick+0x58>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fe39 	bl	8004962 <HAL_SYSTICK_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00e      	b.n	8003d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d80a      	bhi.n	8003d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d00:	2200      	movs	r2, #0
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	f000 fe01 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d0c:	4a06      	ldr	r2, [pc, #24]	@ (8003d28 <HAL_InitTick+0x5c>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000044 	.word	0x20000044
 8003d24:	2000004c 	.word	0x2000004c
 8003d28:	20000048 	.word	0x20000048

08003d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_IncTick+0x1c>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_IncTick+0x20>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a03      	ldr	r2, [pc, #12]	@ (8003d4c <HAL_IncTick+0x20>)
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	2000004c 	.word	0x2000004c
 8003d4c:	200003cc 	.word	0x200003cc

08003d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b02      	ldr	r3, [pc, #8]	@ (8003d60 <HAL_GetTick+0x10>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	200003cc 	.word	0x200003cc

08003d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d005      	beq.n	8003d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <HAL_Delay+0x44>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d8a:	bf00      	nop
 8003d8c:	f7ff ffe0 	bl	8003d50 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d8f7      	bhi.n	8003d8c <HAL_Delay+0x28>
  {
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000004c 	.word	0x2000004c

08003dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0be      	b.n	8003f4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fc88 	bl	8003700 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fbc5 	bl	8004580 <ADC_ConversionStop_Disable>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 8099 	bne.w	8003f3a <HAL_ADC_Init+0x18e>
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8095 	bne.w	8003f3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e18:	f023 0302 	bic.w	r3, r3, #2
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7b1b      	ldrb	r3, [r3, #12]
 8003e32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e44:	d003      	beq.n	8003e4e <HAL_ADC_Init+0xa2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_ADC_Init+0xa8>
 8003e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_Init+0xaa>
 8003e54:	2300      	movs	r3, #0
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7d1b      	ldrb	r3, [r3, #20]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d119      	bne.n	8003e98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7b1b      	ldrb	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	035a      	lsls	r2, r3, #13
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	e00b      	b.n	8003e98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <HAL_ADC_Init+0x1a8>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec8:	d003      	beq.n	8003ed2 <HAL_ADC_Init+0x126>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d104      	bne.n	8003edc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	051b      	lsls	r3, r3, #20
 8003eda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_ADC_Init+0x1ac>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10b      	bne.n	8003f18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f16:	e018      	b.n	8003f4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	f023 0312 	bic.w	r3, r3, #18
 8003f20:	f043 0210 	orr.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f38:	e007      	b.n	8003f4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	ffe1f7fd 	.word	0xffe1f7fd
 8003f58:	ff1f0efe 	.word	0xff1f0efe

08003f5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_Start+0x1a>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e098      	b.n	80040a8 <HAL_ADC_Start+0x14c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 faa4 	bl	80044cc <ADC_Enable>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 8087 	bne.w	800409e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a41      	ldr	r2, [pc, #260]	@ (80040b0 <HAL_ADC_Start+0x154>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d105      	bne.n	8003fba <HAL_ADC_Start+0x5e>
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <HAL_ADC_Start+0x158>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d115      	bne.n	8003fe6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d026      	beq.n	8004022 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003fdc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fe4:	e01d      	b.n	8004022 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80040b4 <HAL_ADC_Start+0x158>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_ADC_Start+0xaa>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <HAL_ADC_Start+0x154>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10d      	bne.n	8004022 <HAL_ADC_Start+0xc6>
 8004006:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_ADC_Start+0x158>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800401a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	f023 0206 	bic.w	r2, r3, #6
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c
 800403a:	e002      	b.n	8004042 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0202 	mvn.w	r2, #2
 8004052:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800405e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004062:	d113      	bne.n	800408c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_ADC_Start+0x154>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d105      	bne.n	800407a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <HAL_ADC_Start+0x158>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	e00c      	b.n	80040a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e003      	b.n	80040a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40012800 	.word	0x40012800
 80040b4:	40012400 	.word	0x40012400

080040b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040ce:	f7ff fe3f 	bl	8003d50 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f043 0220 	orr.w	r2, r3, #32
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0d3      	b.n	80042a2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d131      	bne.n	800416c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004112:	2b00      	cmp	r3, #0
 8004114:	d12a      	bne.n	800416c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004116:	e021      	b.n	800415c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d01d      	beq.n	800415c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_ADC_PollForConversion+0x7e>
 8004126:	f7ff fe13 	bl	8003d50 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d212      	bcs.n	800415c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0a2      	b.n	80042a2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0d6      	beq.n	8004118 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800416a:	e070      	b.n	800424e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800416c:	4b4f      	ldr	r3, [pc, #316]	@ (80042ac <HAL_ADC_PollForConversion+0x1f4>)
 800416e:	681c      	ldr	r4, [r3, #0]
 8004170:	2002      	movs	r0, #2
 8004172:	f002 fc19 	bl	80069a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004176:	4603      	mov	r3, r0
 8004178:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6919      	ldr	r1, [r3, #16]
 8004182:	4b4b      	ldr	r3, [pc, #300]	@ (80042b0 <HAL_ADC_PollForConversion+0x1f8>)
 8004184:	400b      	ands	r3, r1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_ADC_PollForConversion+0x104>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	4b48      	ldr	r3, [pc, #288]	@ (80042b4 <HAL_ADC_PollForConversion+0x1fc>)
 8004192:	400b      	ands	r3, r1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d111      	bne.n	80041bc <HAL_ADC_PollForConversion+0x104>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <HAL_ADC_PollForConversion+0x200>)
 80041a0:	400b      	ands	r3, r1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <HAL_ADC_PollForConversion+0x100>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_ADC_PollForConversion+0x204>)
 80041ae:	400b      	ands	r3, r1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_PollForConversion+0x100>
 80041b4:	2314      	movs	r3, #20
 80041b6:	e020      	b.n	80041fa <HAL_ADC_PollForConversion+0x142>
 80041b8:	2329      	movs	r3, #41	@ 0x29
 80041ba:	e01e      	b.n	80041fa <HAL_ADC_PollForConversion+0x142>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	4b3d      	ldr	r3, [pc, #244]	@ (80042b8 <HAL_ADC_PollForConversion+0x200>)
 80041c4:	400b      	ands	r3, r1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_ADC_PollForConversion+0x120>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68d9      	ldr	r1, [r3, #12]
 80041d0:	4b3a      	ldr	r3, [pc, #232]	@ (80042bc <HAL_ADC_PollForConversion+0x204>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <HAL_ADC_PollForConversion+0x13c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6919      	ldr	r1, [r3, #16]
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <HAL_ADC_PollForConversion+0x208>)
 80041e0:	400b      	ands	r3, r1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HAL_ADC_PollForConversion+0x140>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68d9      	ldr	r1, [r3, #12]
 80041ec:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <HAL_ADC_PollForConversion+0x208>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_PollForConversion+0x140>
 80041f4:	2354      	movs	r3, #84	@ 0x54
 80041f6:	e000      	b.n	80041fa <HAL_ADC_PollForConversion+0x142>
 80041f8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004200:	e021      	b.n	8004246 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d01a      	beq.n	8004240 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_ADC_PollForConversion+0x168>
 8004210:	f7ff fd9e 	bl	8003d50 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d20f      	bcs.n	8004240 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	429a      	cmp	r2, r3
 8004226:	d90b      	bls.n	8004240 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e030      	b.n	80042a2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d8d9      	bhi.n	8004202 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0212 	mvn.w	r2, #18
 8004256:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800426e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004272:	d115      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004278:	2b00      	cmp	r3, #0
 800427a:	d111      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000044 	.word	0x20000044
 80042b0:	24924924 	.word	0x24924924
 80042b4:	00924924 	.word	0x00924924
 80042b8:	12492492 	.word	0x12492492
 80042bc:	00492492 	.word	0x00492492
 80042c0:	00249249 	.word	0x00249249

080042c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x20>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0dc      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x1da>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d81c      	bhi.n	8004346 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	3b05      	subs	r3, #5
 800431e:	221f      	movs	r2, #31
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	4019      	ands	r1, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	3b05      	subs	r3, #5
 8004338:	fa00 f203 	lsl.w	r2, r0, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	635a      	str	r2, [r3, #52]	@ 0x34
 8004344:	e03c      	b.n	80043c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d81c      	bhi.n	8004388 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	3b23      	subs	r3, #35	@ 0x23
 8004360:	221f      	movs	r2, #31
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	4019      	ands	r1, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	3b23      	subs	r3, #35	@ 0x23
 800437a:	fa00 f203 	lsl.w	r2, r0, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30
 8004386:	e01b      	b.n	80043c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	3b41      	subs	r3, #65	@ 0x41
 800439a:	221f      	movs	r2, #31
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	4019      	ands	r1, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b41      	subs	r3, #65	@ 0x41
 80043b4:	fa00 f203 	lsl.w	r2, r0, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	d91c      	bls.n	8004402 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68d9      	ldr	r1, [r3, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	3b1e      	subs	r3, #30
 80043da:	2207      	movs	r2, #7
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	4019      	ands	r1, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6898      	ldr	r0, [r3, #8]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	3b1e      	subs	r3, #30
 80043f4:	fa00 f203 	lsl.w	r2, r0, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e019      	b.n	8004436 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6919      	ldr	r1, [r3, #16]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	2207      	movs	r2, #7
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	4019      	ands	r1, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6898      	ldr	r0, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	fa00 f203 	lsl.w	r2, r0, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b10      	cmp	r3, #16
 800443c:	d003      	beq.n	8004446 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004442:	2b11      	cmp	r3, #17
 8004444:	d132      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d125      	bne.n	800449c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d126      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800446c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d11a      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	0c9a      	lsrs	r2, r3, #18
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800448c:	e002      	b.n	8004494 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3b01      	subs	r3, #1
 8004492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f9      	bne.n	800448e <HAL_ADC_ConfigChannel+0x1b2>
 800449a:	e007      	b.n	80044ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	40012400 	.word	0x40012400
 80044c4:	20000044 	.word	0x20000044
 80044c8:	431bde83 	.word	0x431bde83

080044cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d040      	beq.n	800456c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <ADC_Enable+0xac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <ADC_Enable+0xb0>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	0c9b      	lsrs	r3, r3, #18
 8004506:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004508:	e002      	b.n	8004510 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f9      	bne.n	800450a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004516:	f7ff fc1b 	bl	8003d50 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800451c:	e01f      	b.n	800455e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800451e:	f7ff fc17 	bl	8003d50 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d918      	bls.n	800455e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d011      	beq.n	800455e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e007      	b.n	800456e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d1d8      	bne.n	800451e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000044 	.word	0x20000044
 800457c:	431bde83 	.word	0x431bde83

08004580 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d12e      	bne.n	80045f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045aa:	f7ff fbd1 	bl	8003d50 <HAL_GetTick>
 80045ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045b0:	e01b      	b.n	80045ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b2:	f7ff fbcd 	bl	8003d50 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d0dc      	beq.n	80045b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADCEx_Calibration_Start+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e097      	b.n	8004752 <HAL_ADCEx_Calibration_Start+0x14e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ffa8 	bl	8004580 <ADC_ConversionStop_Disable>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff49 	bl	80044cc <ADC_Enable>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 8081 	bne.w	8004748 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800464e:	f023 0302 	bic.w	r3, r3, #2
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800465a:	4b40      	ldr	r3, [pc, #256]	@ (800475c <HAL_ADCEx_Calibration_Start+0x158>)
 800465c:	681c      	ldr	r4, [r3, #0]
 800465e:	2002      	movs	r0, #2
 8004660:	f002 f9a2 	bl	80069a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004664:	4603      	mov	r3, r0
 8004666:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800466a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800466c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800466e:	e002      	b.n	8004676 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b01      	subs	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f9      	bne.n	8004670 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0208 	orr.w	r2, r2, #8
 800468a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800468c:	f7ff fb60 	bl	8003d50 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004692:	e01b      	b.n	80046cc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004694:	f7ff fb5c 	bl	8003d50 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b0a      	cmp	r3, #10
 80046a0:	d914      	bls.n	80046cc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	f023 0312 	bic.w	r3, r3, #18
 80046b8:	f043 0210 	orr.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e042      	b.n	8004752 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1dc      	bne.n	8004694 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0204 	orr.w	r2, r2, #4
 80046e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80046ea:	f7ff fb31 	bl	8003d50 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046f0:	e01b      	b.n	800472a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80046f2:	f7ff fb2d 	bl	8003d50 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b0a      	cmp	r3, #10
 80046fe:	d914      	bls.n	800472a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f023 0312 	bic.w	r3, r3, #18
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e013      	b.n	8004752 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1dc      	bne.n	80046f2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	f023 0303 	bic.w	r3, r3, #3
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop
 800475c:	20000044 	.word	0x20000044

08004760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800478c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004792:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	60d3      	str	r3, [r2, #12]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0307 	and.w	r3, r3, #7
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	db0b      	blt.n	80047ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	4906      	ldr	r1, [pc, #24]	@ (80047f8 <__NVIC_EnableIRQ+0x34>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2001      	movs	r0, #1
 80047e6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	e000e100 	.word	0xe000e100

080047fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db0a      	blt.n	8004826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	490c      	ldr	r1, [pc, #48]	@ (8004848 <__NVIC_SetPriority+0x4c>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	0112      	lsls	r2, r2, #4
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	440b      	add	r3, r1
 8004820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004824:	e00a      	b.n	800483c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <__NVIC_SetPriority+0x50>)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	3b04      	subs	r3, #4
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	440b      	add	r3, r1
 800483a:	761a      	strb	r2, [r3, #24]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e100 	.word	0xe000e100
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f1c3 0307 	rsb	r3, r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf28      	it	cs
 800486e:	2304      	movcs	r3, #4
 8004870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3304      	adds	r3, #4
 8004876:	2b06      	cmp	r3, #6
 8004878:	d902      	bls.n	8004880 <NVIC_EncodePriority+0x30>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3b03      	subs	r3, #3
 800487e:	e000      	b.n	8004882 <NVIC_EncodePriority+0x32>
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	401a      	ands	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004898:	f04f 31ff 	mov.w	r1, #4294967295
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	43d9      	mvns	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	4313      	orrs	r3, r2
         );
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff90 	bl	80047fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff2d 	bl	8004760 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff42 	bl	80047a8 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff90 	bl	8004850 <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5f 	bl	80047fc <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff35 	bl	80047c4 <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffa2 	bl	80048b4 <SysTick_Config>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800497c:	b480      	push	{r7}
 800497e:	b08b      	sub	sp, #44	@ 0x2c
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800498e:	e169      	b.n	8004c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004990:	2201      	movs	r2, #1
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 8158 	bne.w	8004c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4a9a      	ldr	r2, [pc, #616]	@ (8004c1c <HAL_GPIO_Init+0x2a0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d05e      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
 80049b8:	4a98      	ldr	r2, [pc, #608]	@ (8004c1c <HAL_GPIO_Init+0x2a0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d875      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049be:	4a98      	ldr	r2, [pc, #608]	@ (8004c20 <HAL_GPIO_Init+0x2a4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d058      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
 80049c4:	4a96      	ldr	r2, [pc, #600]	@ (8004c20 <HAL_GPIO_Init+0x2a4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d86f      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049ca:	4a96      	ldr	r2, [pc, #600]	@ (8004c24 <HAL_GPIO_Init+0x2a8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d052      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
 80049d0:	4a94      	ldr	r2, [pc, #592]	@ (8004c24 <HAL_GPIO_Init+0x2a8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d869      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049d6:	4a94      	ldr	r2, [pc, #592]	@ (8004c28 <HAL_GPIO_Init+0x2ac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04c      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
 80049dc:	4a92      	ldr	r2, [pc, #584]	@ (8004c28 <HAL_GPIO_Init+0x2ac>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d863      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049e2:	4a92      	ldr	r2, [pc, #584]	@ (8004c2c <HAL_GPIO_Init+0x2b0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d046      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
 80049e8:	4a90      	ldr	r2, [pc, #576]	@ (8004c2c <HAL_GPIO_Init+0x2b0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d85d      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049ee:	2b12      	cmp	r3, #18
 80049f0:	d82a      	bhi.n	8004a48 <HAL_GPIO_Init+0xcc>
 80049f2:	2b12      	cmp	r3, #18
 80049f4:	d859      	bhi.n	8004aaa <HAL_GPIO_Init+0x12e>
 80049f6:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <HAL_GPIO_Init+0x80>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a77 	.word	0x08004a77
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a63 	.word	0x08004a63
 8004a08:	08004aa5 	.word	0x08004aa5
 8004a0c:	08004aab 	.word	0x08004aab
 8004a10:	08004aab 	.word	0x08004aab
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004aab 	.word	0x08004aab
 8004a1c:	08004aab 	.word	0x08004aab
 8004a20:	08004aab 	.word	0x08004aab
 8004a24:	08004aab 	.word	0x08004aab
 8004a28:	08004aab 	.word	0x08004aab
 8004a2c:	08004aab 	.word	0x08004aab
 8004a30:	08004aab 	.word	0x08004aab
 8004a34:	08004aab 	.word	0x08004aab
 8004a38:	08004aab 	.word	0x08004aab
 8004a3c:	08004aab 	.word	0x08004aab
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	4a79      	ldr	r2, [pc, #484]	@ (8004c30 <HAL_GPIO_Init+0x2b4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a4e:	e02c      	b.n	8004aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	623b      	str	r3, [r7, #32]
          break;
 8004a56:	e029      	b.n	8004aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	623b      	str	r3, [r7, #32]
          break;
 8004a60:	e024      	b.n	8004aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	3308      	adds	r3, #8
 8004a68:	623b      	str	r3, [r7, #32]
          break;
 8004a6a:	e01f      	b.n	8004aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	330c      	adds	r3, #12
 8004a72:	623b      	str	r3, [r7, #32]
          break;
 8004a74:	e01a      	b.n	8004aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a7e:	2304      	movs	r3, #4
 8004a80:	623b      	str	r3, [r7, #32]
          break;
 8004a82:	e013      	b.n	8004aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	611a      	str	r2, [r3, #16]
          break;
 8004a96:	e009      	b.n	8004aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a98:	2308      	movs	r3, #8
 8004a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	615a      	str	r2, [r3, #20]
          break;
 8004aa2:	e003      	b.n	8004aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
          break;
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_Init+0x130>
          break;
 8004aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2bff      	cmp	r3, #255	@ 0xff
 8004ab0:	d801      	bhi.n	8004ab6 <HAL_GPIO_Init+0x13a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	e001      	b.n	8004aba <HAL_GPIO_Init+0x13e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2bff      	cmp	r3, #255	@ 0xff
 8004ac0:	d802      	bhi.n	8004ac8 <HAL_GPIO_Init+0x14c>
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	e002      	b.n	8004ace <HAL_GPIO_Init+0x152>
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	3b08      	subs	r3, #8
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	210f      	movs	r1, #15
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80b1 	beq.w	8004c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004afc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c34 <HAL_GPIO_Init+0x2b8>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4a4c      	ldr	r2, [pc, #304]	@ (8004c34 <HAL_GPIO_Init+0x2b8>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6193      	str	r3, [r2, #24]
 8004b08:	4b4a      	ldr	r3, [pc, #296]	@ (8004c34 <HAL_GPIO_Init+0x2b8>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b14:	4a48      	ldr	r2, [pc, #288]	@ (8004c38 <HAL_GPIO_Init+0x2bc>)
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a40      	ldr	r2, [pc, #256]	@ (8004c3c <HAL_GPIO_Init+0x2c0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_GPIO_Init+0x1ec>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a3f      	ldr	r2, [pc, #252]	@ (8004c40 <HAL_GPIO_Init+0x2c4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00d      	beq.n	8004b64 <HAL_GPIO_Init+0x1e8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c44 <HAL_GPIO_Init+0x2c8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <HAL_GPIO_Init+0x1e4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3d      	ldr	r2, [pc, #244]	@ (8004c48 <HAL_GPIO_Init+0x2cc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_GPIO_Init+0x1e0>
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e006      	b.n	8004b6a <HAL_GPIO_Init+0x1ee>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e004      	b.n	8004b6a <HAL_GPIO_Init+0x1ee>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e002      	b.n	8004b6a <HAL_GPIO_Init+0x1ee>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_GPIO_Init+0x1ee>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6c:	f002 0203 	and.w	r2, r2, #3
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	4093      	lsls	r3, r2
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b7a:	492f      	ldr	r1, [pc, #188]	@ (8004c38 <HAL_GPIO_Init+0x2bc>)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	3302      	adds	r3, #2
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d006      	beq.n	8004ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b94:	4b2d      	ldr	r3, [pc, #180]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	492c      	ldr	r1, [pc, #176]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	e006      	b.n	8004bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	4928      	ldr	r1, [pc, #160]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bbc:	4b23      	ldr	r3, [pc, #140]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	4922      	ldr	r1, [pc, #136]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60cb      	str	r3, [r1, #12]
 8004bc8:	e006      	b.n	8004bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	491e      	ldr	r1, [pc, #120]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004be4:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4918      	ldr	r1, [pc, #96]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bf2:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	4914      	ldr	r1, [pc, #80]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d021      	beq.n	8004c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	490e      	ldr	r1, [pc, #56]	@ (8004c4c <HAL_GPIO_Init+0x2d0>)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e021      	b.n	8004c5e <HAL_GPIO_Init+0x2e2>
 8004c1a:	bf00      	nop
 8004c1c:	10320000 	.word	0x10320000
 8004c20:	10310000 	.word	0x10310000
 8004c24:	10220000 	.word	0x10220000
 8004c28:	10210000 	.word	0x10210000
 8004c2c:	10120000 	.word	0x10120000
 8004c30:	10110000 	.word	0x10110000
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010800 	.word	0x40010800
 8004c40:	40010c00 	.word	0x40010c00
 8004c44:	40011000 	.word	0x40011000
 8004c48:	40011400 	.word	0x40011400
 8004c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <HAL_GPIO_Init+0x304>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	4909      	ldr	r1, [pc, #36]	@ (8004c80 <HAL_GPIO_Init+0x304>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f ae8e 	bne.w	8004990 <HAL_GPIO_Init+0x14>
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	372c      	adds	r7, #44	@ 0x2c
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40010400 	.word	0x40010400

08004c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	887b      	ldrh	r3, [r7, #2]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	e001      	b.n	8004ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	807b      	strh	r3, [r7, #2]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cc2:	787b      	ldrb	r3, [r7, #1]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc8:	887a      	ldrh	r2, [r7, #2]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cce:	e003      	b.n	8004cd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	041a      	lsls	r2, r3, #16
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	611a      	str	r2, [r3, #16]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e12b      	b.n	8004f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe fd34 	bl	8003778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	@ 0x24
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d48:	f001 fd32 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4a81      	ldr	r2, [pc, #516]	@ (8004f58 <HAL_I2C_Init+0x274>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d807      	bhi.n	8004d68 <HAL_I2C_Init+0x84>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a80      	ldr	r2, [pc, #512]	@ (8004f5c <HAL_I2C_Init+0x278>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bf94      	ite	ls
 8004d60:	2301      	movls	r3, #1
 8004d62:	2300      	movhi	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e006      	b.n	8004d76 <HAL_I2C_Init+0x92>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f60 <HAL_I2C_Init+0x27c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bf94      	ite	ls
 8004d70:	2301      	movls	r3, #1
 8004d72:	2300      	movhi	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0e7      	b.n	8004f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a78      	ldr	r2, [pc, #480]	@ (8004f64 <HAL_I2C_Init+0x280>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	0c9b      	lsrs	r3, r3, #18
 8004d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4a6a      	ldr	r2, [pc, #424]	@ (8004f58 <HAL_I2C_Init+0x274>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d802      	bhi.n	8004db8 <HAL_I2C_Init+0xd4>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3301      	adds	r3, #1
 8004db6:	e009      	b.n	8004dcc <HAL_I2C_Init+0xe8>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	4a69      	ldr	r2, [pc, #420]	@ (8004f68 <HAL_I2C_Init+0x284>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	3301      	adds	r3, #1
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	495c      	ldr	r1, [pc, #368]	@ (8004f58 <HAL_I2C_Init+0x274>)
 8004de8:	428b      	cmp	r3, r1
 8004dea:	d819      	bhi.n	8004e20 <HAL_I2C_Init+0x13c>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1e59      	subs	r1, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e00:	400b      	ands	r3, r1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_I2C_Init+0x138>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e59      	subs	r1, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e14:	3301      	adds	r3, #1
 8004e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1a:	e051      	b.n	8004ec0 <HAL_I2C_Init+0x1dc>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e04f      	b.n	8004ec0 <HAL_I2C_Init+0x1dc>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d111      	bne.n	8004e4c <HAL_I2C_Init+0x168>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1e58      	subs	r0, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e012      	b.n	8004e72 <HAL_I2C_Init+0x18e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1e58      	subs	r0, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	0099      	lsls	r1, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_I2C_Init+0x196>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e022      	b.n	8004ec0 <HAL_I2C_Init+0x1dc>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10e      	bne.n	8004ea0 <HAL_I2C_Init+0x1bc>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1e58      	subs	r0, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	440b      	add	r3, r1
 8004e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9e:	e00f      	b.n	8004ec0 <HAL_I2C_Init+0x1dc>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1e58      	subs	r0, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	0099      	lsls	r1, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	6809      	ldr	r1, [r1, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004eee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6911      	ldr	r1, [r2, #16]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	4311      	orrs	r1, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	000186a0 	.word	0x000186a0
 8004f5c:	001e847f 	.word	0x001e847f
 8004f60:	003d08ff 	.word	0x003d08ff
 8004f64:	431bde83 	.word	0x431bde83
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	460b      	mov	r3, r1
 8004f7a:	817b      	strh	r3, [r7, #10]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f80:	f7fe fee6 	bl	8003d50 <HAL_GetTick>
 8004f84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	f040 80e0 	bne.w	8005154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2319      	movs	r3, #25
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4970      	ldr	r1, [pc, #448]	@ (8005160 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fdfa 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0d3      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2C_Master_Transmit+0x50>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0cc      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d007      	beq.n	8004fe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2221      	movs	r2, #33	@ 0x21
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	893a      	ldrh	r2, [r7, #8]
 8005012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a50      	ldr	r2, [pc, #320]	@ (8005164 <HAL_I2C_Master_Transmit+0x1f8>)
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005024:	8979      	ldrh	r1, [r7, #10]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fc4a 	bl	80058c4 <I2C_MasterRequestWrite>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e08d      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005050:	e066      	b.n	8005120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	6a39      	ldr	r1, [r7, #32]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 feb8 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	2b04      	cmp	r3, #4
 8005068:	d107      	bne.n	800507a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e06b      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d11b      	bne.n	80050f4 <HAL_I2C_Master_Transmit+0x188>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d017      	beq.n	80050f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	6a39      	ldr	r1, [r7, #32]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 feaf 	bl	8005e5c <I2C_WaitOnBTFFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	2b04      	cmp	r3, #4
 800510a:	d107      	bne.n	800511c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e01a      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d194      	bne.n	8005052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	00100002 	.word	0x00100002
 8005164:	ffff0000 	.word	0xffff0000

08005168 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	817b      	strh	r3, [r7, #10]
 800517a:	460b      	mov	r3, r1
 800517c:	813b      	strh	r3, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005186:	f7fe fde3 	bl	8003d50 <HAL_GetTick>
 800518a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 8250 	bne.w	800563a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2319      	movs	r3, #25
 80051a0:	2201      	movs	r2, #1
 80051a2:	4982      	ldr	r1, [pc, #520]	@ (80053ac <HAL_I2C_Mem_Read+0x244>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fcf7 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
 80051b2:	e243      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_I2C_Mem_Read+0x5a>
 80051be:	2302      	movs	r3, #2
 80051c0:	e23c      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d007      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2222      	movs	r2, #34	@ 0x22
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2240      	movs	r2, #64	@ 0x40
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a62      	ldr	r2, [pc, #392]	@ (80053b0 <HAL_I2C_Mem_Read+0x248>)
 8005228:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800522a:	88f8      	ldrh	r0, [r7, #6]
 800522c:	893a      	ldrh	r2, [r7, #8]
 800522e:	8979      	ldrh	r1, [r7, #10]
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fbc4 	bl	80059c8 <I2C_RequestMemoryRead>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e1f8      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d113      	bne.n	800527a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e1cc      	b.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527e:	2b01      	cmp	r3, #1
 8005280:	d11e      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005290:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005292:	b672      	cpsid	i
}
 8005294:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052bc:	b662      	cpsie	i
}
 80052be:	e035      	b.n	800532c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11e      	bne.n	8005306 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052d8:	b672      	cpsid	i
}
 80052da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005302:	b662      	cpsie	i
}
 8005304:	e012      	b.n	800532c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005314:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800532c:	e172      	b.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	2b03      	cmp	r3, #3
 8005334:	f200 811f 	bhi.w	8005576 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533c:	2b01      	cmp	r3, #1
 800533e:	d123      	bne.n	8005388 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005342:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fdd1 	bl	8005eec <I2C_WaitOnRXNEFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e173      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005386:	e145      	b.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538c:	2b02      	cmp	r3, #2
 800538e:	d152      	bne.n	8005436 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	2200      	movs	r2, #0
 8005398:	4906      	ldr	r1, [pc, #24]	@ (80053b4 <HAL_I2C_Mem_Read+0x24c>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fbfc 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e148      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
 80053aa:	bf00      	nop
 80053ac:	00100002 	.word	0x00100002
 80053b0:	ffff0000 	.word	0xffff0000
 80053b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80053b8:	b672      	cpsid	i
}
 80053ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80053fe:	b662      	cpsie	i
}
 8005400:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005434:	e0ee      	b.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543c:	2200      	movs	r2, #0
 800543e:	4981      	ldr	r1, [pc, #516]	@ (8005644 <HAL_I2C_Mem_Read+0x4dc>)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fba9 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0f5      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005460:	b672      	cpsid	i
}
 8005462:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005496:	4b6c      	ldr	r3, [pc, #432]	@ (8005648 <HAL_I2C_Mem_Read+0x4e0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	4a6b      	ldr	r2, [pc, #428]	@ (800564c <HAL_I2C_Mem_Read+0x4e4>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0a1a      	lsrs	r2, r3, #8
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00da      	lsls	r2, r3, #3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d118      	bne.n	80054ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80054de:	b662      	cpsie	i
}
 80054e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0a6      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d1d9      	bne.n	80054b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800553e:	b662      	cpsie	i
}
 8005540:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005574:	e04e      	b.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fcb6 	bl	8005eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e058      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d124      	bne.n	8005614 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d107      	bne.n	80055e2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	f47f ae88 	bne.w	800532e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3728      	adds	r7, #40	@ 0x28
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	00010004 	.word	0x00010004
 8005648:	20000044 	.word	0x20000044
 800564c:	14f8b589 	.word	0x14f8b589

08005650 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	460b      	mov	r3, r1
 800565e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005660:	f7fe fb76 	bl	8003d50 <HAL_GetTick>
 8005664:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b20      	cmp	r3, #32
 8005674:	f040 8111 	bne.w	800589a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2319      	movs	r3, #25
 800567e:	2201      	movs	r2, #1
 8005680:	4988      	ldr	r1, [pc, #544]	@ (80058a4 <HAL_I2C_IsDeviceReady+0x254>)
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa88 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800568e:	2302      	movs	r3, #2
 8005690:	e104      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_I2C_IsDeviceReady+0x50>
 800569c:	2302      	movs	r3, #2
 800569e:	e0fd      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d007      	beq.n	80056c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2224      	movs	r2, #36	@ 0x24
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a70      	ldr	r2, [pc, #448]	@ (80058a8 <HAL_I2C_IsDeviceReady+0x258>)
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa46 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005720:	d103      	bne.n	800572a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005728:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0b6      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800572e:	897b      	ldrh	r3, [r7, #10]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800573c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800573e:	f7fe fb07 	bl	8003d50 <HAL_GetTick>
 8005742:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005772:	e025      	b.n	80057c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005774:	f7fe faec 	bl	8003d50 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <HAL_I2C_IsDeviceReady+0x13a>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	22a0      	movs	r2, #160	@ 0xa0
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b02      	cmp	r3, #2
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80057ca:	d005      	beq.n	80057d8 <HAL_I2C_IsDeviceReady+0x188>
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_I2C_IsDeviceReady+0x188>
 80057d2:	7dbb      	ldrb	r3, [r7, #22]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0cd      	beq.n	8005774 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d129      	bne.n	8005842 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2319      	movs	r3, #25
 800581a:	2201      	movs	r2, #1
 800581c:	4921      	ldr	r1, [pc, #132]	@ (80058a4 <HAL_I2C_IsDeviceReady+0x254>)
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f9ba 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e036      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e02c      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005850:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800585a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2319      	movs	r3, #25
 8005862:	2201      	movs	r2, #1
 8005864:	490f      	ldr	r1, [pc, #60]	@ (80058a4 <HAL_I2C_IsDeviceReady+0x254>)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f996 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e012      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3301      	adds	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	f4ff af32 	bcc.w	80056ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	00100002 	.word	0x00100002
 80058a8:	ffff0000 	.word	0xffff0000

080058ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
	...

080058c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	460b      	mov	r3, r1
 80058d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d006      	beq.n	80058ee <I2C_MasterRequestWrite+0x2a>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d003      	beq.n	80058ee <I2C_MasterRequestWrite+0x2a>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058ec:	d108      	bne.n	8005900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e00b      	b.n	8005918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	2b12      	cmp	r3, #18
 8005906:	d107      	bne.n	8005918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f937 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00d      	beq.n	800594c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593e:	d103      	bne.n	8005948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e035      	b.n	80059b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005954:	d108      	bne.n	8005968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005956:	897b      	ldrh	r3, [r7, #10]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005964:	611a      	str	r2, [r3, #16]
 8005966:	e01b      	b.n	80059a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005968:	897b      	ldrh	r3, [r7, #10]
 800596a:	11db      	asrs	r3, r3, #7
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0306 	and.w	r3, r3, #6
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f063 030f 	orn	r3, r3, #15
 8005978:	b2da      	uxtb	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	490e      	ldr	r1, [pc, #56]	@ (80059c0 <I2C_MasterRequestWrite+0xfc>)
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f980 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e010      	b.n	80059b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4907      	ldr	r1, [pc, #28]	@ (80059c4 <I2C_MasterRequestWrite+0x100>)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f970 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	00010008 	.word	0x00010008
 80059c4:	00010002 	.word	0x00010002

080059c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f8c2 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a28:	d103      	bne.n	8005a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0aa      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	4952      	ldr	r1, [pc, #328]	@ (8005b94 <I2C_RequestMemoryRead+0x1cc>)
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f91d 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e097      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f9a8 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e076      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d105      	bne.n	8005ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa4:	893b      	ldrh	r3, [r7, #8]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	e021      	b.n	8005af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac0:	6a39      	ldr	r1, [r7, #32]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f982 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00d      	beq.n	8005aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d107      	bne.n	8005ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e050      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aea:	893b      	ldrh	r3, [r7, #8]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	6a39      	ldr	r1, [r7, #32]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f967 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d107      	bne.n	8005b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e035      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f82b 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b56:	d103      	bne.n	8005b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e013      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b64:	897b      	ldrh	r3, [r7, #10]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	4906      	ldr	r1, [pc, #24]	@ (8005b94 <I2C_RequestMemoryRead+0x1cc>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f886 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	00010002 	.word	0x00010002

08005b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba8:	e048      	b.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d044      	beq.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fe f8cd 	bl	8003d50 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d139      	bne.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10d      	bne.n	8005bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	43da      	mvns	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	e00c      	b.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	43da      	mvns	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e023      	b.n	8005c84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10d      	bne.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	43da      	mvns	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	e00c      	b.n	8005c7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	43da      	mvns	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d093      	beq.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c9a:	e071      	b.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005caa:	d123      	bne.n	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f043 0204 	orr.w	r2, r3, #4
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e067      	b.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d041      	beq.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfc:	f7fe f828 	bl	8003d50 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d136      	bne.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10c      	bne.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	2300      	moveq	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	e00b      	b.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e021      	b.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10c      	bne.n	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	43da      	mvns	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e00b      	b.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af6d 	bne.w	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dd8:	e034      	b.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f8e3 	bl	8005fa6 <I2C_IsAcknowledgeFailed>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e034      	b.n	8005e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d028      	beq.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df2:	f7fd ffad 	bl	8003d50 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d302      	bcc.n	8005e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11d      	bne.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b80      	cmp	r3, #128	@ 0x80
 8005e14:	d016      	beq.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b80      	cmp	r3, #128	@ 0x80
 8005e50:	d1c3      	bne.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e68:	e034      	b.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f89b 	bl	8005fa6 <I2C_IsAcknowledgeFailed>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e034      	b.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d028      	beq.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fd ff65 	bl	8003d50 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11d      	bne.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d016      	beq.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d1c3      	bne.n	8005e6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef8:	e049      	b.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d119      	bne.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0210 	mvn.w	r2, #16
 8005f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e030      	b.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fd ff08 	bl	8003d50 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11d      	bne.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	d016      	beq.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e007      	b.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d1ae      	bne.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fbc:	d11b      	bne.n	8005ff6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
	...

08006004 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006008:	4b03      	ldr	r3, [pc, #12]	@ (8006018 <HAL_PWR_EnableBkUpAccess+0x14>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	420e0020 	.word	0x420e0020

0800601c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e272      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8087 	beq.w	800614a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800603c:	4b92      	ldr	r3, [pc, #584]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b04      	cmp	r3, #4
 8006046:	d00c      	beq.n	8006062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006048:	4b8f      	ldr	r3, [pc, #572]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b08      	cmp	r3, #8
 8006052:	d112      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
 8006054:	4b8c      	ldr	r3, [pc, #560]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d10b      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006062:	4b89      	ldr	r3, [pc, #548]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d06c      	beq.n	8006148 <HAL_RCC_OscConfig+0x12c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d168      	bne.n	8006148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e24c      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006082:	d106      	bne.n	8006092 <HAL_RCC_OscConfig+0x76>
 8006084:	4b80      	ldr	r3, [pc, #512]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a7f      	ldr	r2, [pc, #508]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e02e      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x98>
 800609a:	4b7b      	ldr	r3, [pc, #492]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a7a      	ldr	r2, [pc, #488]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b78      	ldr	r3, [pc, #480]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a77      	ldr	r2, [pc, #476]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0xbc>
 80060be:	4b72      	ldr	r3, [pc, #456]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a71      	ldr	r2, [pc, #452]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060d8:	4b6b      	ldr	r3, [pc, #428]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b68      	ldr	r3, [pc, #416]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a67      	ldr	r2, [pc, #412]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fd fe2a 	bl	8003d50 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fd fe26 	bl	8003d50 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e200      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	4b5d      	ldr	r3, [pc, #372]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xe4>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fd fe16 	bl	8003d50 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006128:	f7fd fe12 	bl	8003d50 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1ec      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x10c>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d063      	beq.n	800621e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006156:	4b4c      	ldr	r3, [pc, #304]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006162:	4b49      	ldr	r3, [pc, #292]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x18c>
 800616e:	4b46      	ldr	r3, [pc, #280]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	4b43      	ldr	r3, [pc, #268]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCC_OscConfig+0x176>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1c0      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b3d      	ldr	r3, [pc, #244]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4939      	ldr	r1, [pc, #228]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	e03a      	b.n	800621e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b0:	4b36      	ldr	r3, [pc, #216]	@ (800628c <HAL_RCC_OscConfig+0x270>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7fd fdcb 	bl	8003d50 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061be:	f7fd fdc7 	bl	8003d50 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1a1      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4927      	ldr	r1, [pc, #156]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f2:	4b26      	ldr	r3, [pc, #152]	@ (800628c <HAL_RCC_OscConfig+0x270>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7fd fdaa 	bl	8003d50 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fd fda6 	bl	8003d50 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e180      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1d      	ldr	r3, [pc, #116]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d03a      	beq.n	80062a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d019      	beq.n	8006266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b17      	ldr	r3, [pc, #92]	@ (8006290 <HAL_RCC_OscConfig+0x274>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006238:	f7fd fd8a 	bl	8003d50 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006240:	f7fd fd86 	bl	8003d50 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e160      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <HAL_RCC_OscConfig+0x26c>)
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800625e:	2001      	movs	r0, #1
 8006260:	f000 face 	bl	8006800 <RCC_Delay>
 8006264:	e01c      	b.n	80062a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <HAL_RCC_OscConfig+0x274>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626c:	f7fd fd70 	bl	8003d50 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006272:	e00f      	b.n	8006294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006274:	f7fd fd6c 	bl	8003d50 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d908      	bls.n	8006294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e146      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000
 800628c:	42420000 	.word	0x42420000
 8006290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006294:	4b92      	ldr	r3, [pc, #584]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e9      	bne.n	8006274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80a6 	beq.w	80063fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b2:	4b8b      	ldr	r3, [pc, #556]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062be:	4b88      	ldr	r3, [pc, #544]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	4a87      	ldr	r2, [pc, #540]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	61d3      	str	r3, [r2, #28]
 80062ca:	4b85      	ldr	r3, [pc, #532]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d2:	60bb      	str	r3, [r7, #8]
 80062d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062da:	4b82      	ldr	r3, [pc, #520]	@ (80064e4 <HAL_RCC_OscConfig+0x4c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d118      	bne.n	8006318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e6:	4b7f      	ldr	r3, [pc, #508]	@ (80064e4 <HAL_RCC_OscConfig+0x4c8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7e      	ldr	r2, [pc, #504]	@ (80064e4 <HAL_RCC_OscConfig+0x4c8>)
 80062ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f2:	f7fd fd2d 	bl	8003d50 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fa:	f7fd fd29 	bl	8003d50 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b64      	cmp	r3, #100	@ 0x64
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e103      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630c:	4b75      	ldr	r3, [pc, #468]	@ (80064e4 <HAL_RCC_OscConfig+0x4c8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d106      	bne.n	800632e <HAL_RCC_OscConfig+0x312>
 8006320:	4b6f      	ldr	r3, [pc, #444]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	4a6e      	ldr	r2, [pc, #440]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	6213      	str	r3, [r2, #32]
 800632c:	e02d      	b.n	800638a <HAL_RCC_OscConfig+0x36e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x334>
 8006336:	4b6a      	ldr	r3, [pc, #424]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	4a69      	ldr	r2, [pc, #420]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	6213      	str	r3, [r2, #32]
 8006342:	4b67      	ldr	r3, [pc, #412]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	4a66      	ldr	r2, [pc, #408]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006348:	f023 0304 	bic.w	r3, r3, #4
 800634c:	6213      	str	r3, [r2, #32]
 800634e:	e01c      	b.n	800638a <HAL_RCC_OscConfig+0x36e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b05      	cmp	r3, #5
 8006356:	d10c      	bne.n	8006372 <HAL_RCC_OscConfig+0x356>
 8006358:	4b61      	ldr	r3, [pc, #388]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	4a60      	ldr	r2, [pc, #384]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	6213      	str	r3, [r2, #32]
 8006364:	4b5e      	ldr	r3, [pc, #376]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	4a5d      	ldr	r2, [pc, #372]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	6213      	str	r3, [r2, #32]
 8006370:	e00b      	b.n	800638a <HAL_RCC_OscConfig+0x36e>
 8006372:	4b5b      	ldr	r3, [pc, #364]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	4a5a      	ldr	r2, [pc, #360]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	6213      	str	r3, [r2, #32]
 800637e:	4b58      	ldr	r3, [pc, #352]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4a57      	ldr	r2, [pc, #348]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006384:	f023 0304 	bic.w	r3, r3, #4
 8006388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d015      	beq.n	80063be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006392:	f7fd fcdd 	bl	8003d50 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006398:	e00a      	b.n	80063b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639a:	f7fd fcd9 	bl	8003d50 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e0b1      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b0:	4b4b      	ldr	r3, [pc, #300]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0ee      	beq.n	800639a <HAL_RCC_OscConfig+0x37e>
 80063bc:	e014      	b.n	80063e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063be:	f7fd fcc7 	bl	8003d50 <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c4:	e00a      	b.n	80063dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c6:	f7fd fcc3 	bl	8003d50 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e09b      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063dc:	4b40      	ldr	r3, [pc, #256]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1ee      	bne.n	80063c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d105      	bne.n	80063fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ee:	4b3c      	ldr	r3, [pc, #240]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4a3b      	ldr	r2, [pc, #236]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80063f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8087 	beq.w	8006512 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006404:	4b36      	ldr	r3, [pc, #216]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b08      	cmp	r3, #8
 800640e:	d061      	beq.n	80064d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d146      	bne.n	80064a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006418:	4b33      	ldr	r3, [pc, #204]	@ (80064e8 <HAL_RCC_OscConfig+0x4cc>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641e:	f7fd fc97 	bl	8003d50 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fd fc93 	bl	8003d50 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e06d      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006438:	4b29      	ldr	r3, [pc, #164]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f0      	bne.n	8006426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644c:	d108      	bne.n	8006460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800644e:	4b24      	ldr	r3, [pc, #144]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4921      	ldr	r1, [pc, #132]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006460:	4b1f      	ldr	r3, [pc, #124]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a19      	ldr	r1, [r3, #32]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	430b      	orrs	r3, r1
 8006472:	491b      	ldr	r1, [pc, #108]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006478:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <HAL_RCC_OscConfig+0x4cc>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647e:	f7fd fc67 	bl	8003d50 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006486:	f7fd fc63 	bl	8003d50 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e03d      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006498:	4b11      	ldr	r3, [pc, #68]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x46a>
 80064a4:	e035      	b.n	8006512 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a6:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_RCC_OscConfig+0x4cc>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fd fc50 	bl	8003d50 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fd fc4c 	bl	8003d50 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e026      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x498>
 80064d2:	e01e      	b.n	8006512 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e019      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40007000 	.word	0x40007000
 80064e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064ec:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <HAL_RCC_OscConfig+0x500>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d106      	bne.n	800650e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650a:	429a      	cmp	r2, r3
 800650c:	d001      	beq.n	8006512 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40021000 	.word	0x40021000

08006520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0d0      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d910      	bls.n	8006564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b67      	ldr	r3, [pc, #412]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0207 	bic.w	r2, r3, #7
 800654a:	4965      	ldr	r1, [pc, #404]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006552:	4b63      	ldr	r3, [pc, #396]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0b8      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d020      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800657c:	4b59      	ldr	r3, [pc, #356]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a58      	ldr	r2, [pc, #352]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006586:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006594:	4b53      	ldr	r3, [pc, #332]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a52      	ldr	r2, [pc, #328]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800659a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800659e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a0:	4b50      	ldr	r3, [pc, #320]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	494d      	ldr	r1, [pc, #308]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d040      	beq.n	8006640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d107      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c6:	4b47      	ldr	r3, [pc, #284]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d115      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e07f      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d107      	bne.n	80065ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065de:	4b41      	ldr	r3, [pc, #260]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e073      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ee:	4b3d      	ldr	r3, [pc, #244]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06b      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065fe:	4b39      	ldr	r3, [pc, #228]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f023 0203 	bic.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	4936      	ldr	r1, [pc, #216]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	4313      	orrs	r3, r2
 800660e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006610:	f7fd fb9e 	bl	8003d50 <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fd fb9a 	bl	8003d50 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e053      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662e:	4b2d      	ldr	r3, [pc, #180]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f003 020c 	and.w	r2, r3, #12
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	429a      	cmp	r2, r3
 800663e:	d1eb      	bne.n	8006618 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006640:	4b27      	ldr	r3, [pc, #156]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d210      	bcs.n	8006670 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 0207 	bic.w	r2, r3, #7
 8006656:	4922      	ldr	r1, [pc, #136]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b20      	ldr	r3, [pc, #128]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e032      	b.n	80066d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800667c:	4b19      	ldr	r3, [pc, #100]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4916      	ldr	r1, [pc, #88]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800668a:	4313      	orrs	r3, r2
 800668c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800669a:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	490e      	ldr	r1, [pc, #56]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066ae:	f000 f821 	bl	80066f4 <HAL_RCC_GetSysClockFreq>
 80066b2:	4602      	mov	r2, r0
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	091b      	lsrs	r3, r3, #4
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	490a      	ldr	r1, [pc, #40]	@ (80066e8 <HAL_RCC_ClockConfig+0x1c8>)
 80066c0:	5ccb      	ldrb	r3, [r1, r3]
 80066c2:	fa22 f303 	lsr.w	r3, r2, r3
 80066c6:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <HAL_RCC_ClockConfig+0x1cc>)
 80066c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066ca:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <HAL_RCC_ClockConfig+0x1d0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd fafc 	bl	8003ccc <HAL_InitTick>

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40022000 	.word	0x40022000
 80066e4:	40021000 	.word	0x40021000
 80066e8:	0800a384 	.word	0x0800a384
 80066ec:	20000044 	.word	0x20000044
 80066f0:	20000048 	.word	0x20000048

080066f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	2300      	movs	r3, #0
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800670e:	4b1e      	ldr	r3, [pc, #120]	@ (8006788 <HAL_RCC_GetSysClockFreq+0x94>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b04      	cmp	r3, #4
 800671c:	d002      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0x30>
 800671e:	2b08      	cmp	r3, #8
 8006720:	d003      	beq.n	800672a <HAL_RCC_GetSysClockFreq+0x36>
 8006722:	e027      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006724:	4b19      	ldr	r3, [pc, #100]	@ (800678c <HAL_RCC_GetSysClockFreq+0x98>)
 8006726:	613b      	str	r3, [r7, #16]
      break;
 8006728:	e027      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0c9b      	lsrs	r3, r3, #18
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	4a17      	ldr	r2, [pc, #92]	@ (8006790 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006734:	5cd3      	ldrb	r3, [r2, r3]
 8006736:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006742:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <HAL_RCC_GetSysClockFreq+0x94>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	0c5b      	lsrs	r3, r3, #17
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	4a11      	ldr	r2, [pc, #68]	@ (8006794 <HAL_RCC_GetSysClockFreq+0xa0>)
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a0d      	ldr	r2, [pc, #52]	@ (800678c <HAL_RCC_GetSysClockFreq+0x98>)
 8006756:	fb03 f202 	mul.w	r2, r3, r2
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e004      	b.n	800676e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a0c      	ldr	r2, [pc, #48]	@ (8006798 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	613b      	str	r3, [r7, #16]
      break;
 8006772:	e002      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <HAL_RCC_GetSysClockFreq+0x98>)
 8006776:	613b      	str	r3, [r7, #16]
      break;
 8006778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800677a:	693b      	ldr	r3, [r7, #16]
}
 800677c:	4618      	mov	r0, r3
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40021000 	.word	0x40021000
 800678c:	007a1200 	.word	0x007a1200
 8006790:	0800a39c 	.word	0x0800a39c
 8006794:	0800a3ac 	.word	0x0800a3ac
 8006798:	003d0900 	.word	0x003d0900

0800679c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <HAL_RCC_GetHCLKFreq+0x10>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	20000044 	.word	0x20000044

080067b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067b4:	f7ff fff2 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	4903      	ldr	r1, [pc, #12]	@ (80067d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c6:	5ccb      	ldrb	r3, [r1, r3]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000
 80067d4:	0800a394 	.word	0x0800a394

080067d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067dc:	f7ff ffde 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	0adb      	lsrs	r3, r3, #11
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	4903      	ldr	r1, [pc, #12]	@ (80067fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ee:	5ccb      	ldrb	r3, [r1, r3]
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800a394 	.word	0x0800a394

08006800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006808:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <RCC_Delay+0x34>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a0a      	ldr	r2, [pc, #40]	@ (8006838 <RCC_Delay+0x38>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	0a5b      	lsrs	r3, r3, #9
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800681c:	bf00      	nop
  }
  while (Delay --);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	60fa      	str	r2, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f9      	bne.n	800681c <RCC_Delay+0x1c>
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr
 8006834:	20000044 	.word	0x20000044
 8006838:	10624dd3 	.word	0x10624dd3

0800683c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d07d      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006858:	2300      	movs	r3, #0
 800685a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685c:	4b4f      	ldr	r3, [pc, #316]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006868:	4b4c      	ldr	r3, [pc, #304]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4a4b      	ldr	r2, [pc, #300]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006872:	61d3      	str	r3, [r2, #28]
 8006874:	4b49      	ldr	r3, [pc, #292]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	4b46      	ldr	r3, [pc, #280]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d118      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006890:	4b43      	ldr	r3, [pc, #268]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a42      	ldr	r2, [pc, #264]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800689a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689c:	f7fd fa58 	bl	8003d50 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a2:	e008      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a4:	f7fd fa54 	bl	8003d50 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	@ 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e06d      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b6:	4b3a      	ldr	r3, [pc, #232]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c2:	4b36      	ldr	r3, [pc, #216]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02e      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d027      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e0:	4b2e      	ldr	r3, [pc, #184]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068ea:	4b2e      	ldr	r3, [pc, #184]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068f0:	4b2c      	ldr	r3, [pc, #176]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068f6:	4a29      	ldr	r2, [pc, #164]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006906:	f7fd fa23 	bl	8003d50 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	e00a      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fd fa1f 	bl	8003d50 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e036      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	4b1d      	ldr	r3, [pc, #116]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ee      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006930:	4b1a      	ldr	r3, [pc, #104]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4917      	ldr	r1, [pc, #92]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800693e:	4313      	orrs	r3, r2
 8006940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006948:	4b14      	ldr	r3, [pc, #80]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4a13      	ldr	r2, [pc, #76]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006960:	4b0e      	ldr	r3, [pc, #56]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	490b      	ldr	r1, [pc, #44]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800696e:	4313      	orrs	r3, r2
 8006970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800697e:	4b07      	ldr	r3, [pc, #28]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4904      	ldr	r1, [pc, #16]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800698c:	4313      	orrs	r3, r2
 800698e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	40007000 	.word	0x40007000
 80069a4:	42420440 	.word	0x42420440

080069a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	2300      	movs	r3, #0
 80069c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d00a      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	f200 808a 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d045      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d075      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80069de:	e082      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80069e0:	4b46      	ldr	r3, [pc, #280]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80069e6:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d07b      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	0c9b      	lsrs	r3, r3, #18
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a41      	ldr	r2, [pc, #260]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80069fc:	5cd3      	ldrb	r3, [r2, r3]
 80069fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	0c5b      	lsrs	r3, r3, #17
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	4a3b      	ldr	r2, [pc, #236]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006a24:	4a38      	ldr	r2, [pc, #224]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a40:	4b2e      	ldr	r3, [pc, #184]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a4c:	d102      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	61bb      	str	r3, [r7, #24]
      break;
 8006a52:	e04a      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4a2d      	ldr	r2, [pc, #180]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
      break;
 8006a62:	e042      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006a64:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a74:	d108      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e01f      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a92:	d109      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006a94:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006aa0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e00f      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab2:	d11c      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006ab4:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d016      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006ac0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006ac4:	61bb      	str	r3, [r7, #24]
      break;
 8006ac6:	e012      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006ac8:	e011      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006aca:	f7ff fe85 	bl	80067d8 <HAL_RCC_GetPCLK2Freq>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	0b9b      	lsrs	r3, r3, #14
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	3301      	adds	r3, #1
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	61bb      	str	r3, [r7, #24]
      break;
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006aee:	bf00      	nop
    }
  }
  return (frequency);
 8006af0:	69bb      	ldr	r3, [r7, #24]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	0800a3b0 	.word	0x0800a3b0
 8006b04:	0800a3c0 	.word	0x0800a3c0
 8006b08:	007a1200 	.word	0x007a1200
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	aaaaaaab 	.word	0xaaaaaaab

08006b14 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e07a      	b.n	8006c20 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7c5b      	ldrb	r3, [r3, #17]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fc fe5c 	bl	80037f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb81 	bl	800724e <HAL_RTC_WaitForSynchro>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2204      	movs	r2, #4
 8006b56:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e061      	b.n	8006c20 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc3a 	bl	80073d6 <RTC_EnterInitMode>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e056      	b.n	8006c20 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0207 	bic.w	r2, r2, #7
 8006b80:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006b8a:	4b27      	ldr	r3, [pc, #156]	@ (8006c28 <HAL_RTC_Init+0x114>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	4a26      	ldr	r2, [pc, #152]	@ (8006c28 <HAL_RTC_Init+0x114>)
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006b96:	4b24      	ldr	r3, [pc, #144]	@ (8006c28 <HAL_RTC_Init+0x114>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	4921      	ldr	r1, [pc, #132]	@ (8006c28 <HAL_RTC_Init+0x114>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb0:	d003      	beq.n	8006bba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e00e      	b.n	8006bd8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7ff fef4 	bl	80069a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bc0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e026      	b.n	8006c20 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	0c1a      	lsrs	r2, r3, #16
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f002 020f 	and.w	r2, r2, #15
 8006be4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	b292      	uxth	r2, r2
 8006bee:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc18 	bl	8007426 <RTC_ExitInitMode>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e00c      	b.n	8006c20 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40006c00 	.word	0x40006c00

08006c2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_RTC_SetTime+0x20>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e080      	b.n	8006d52 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7c1b      	ldrb	r3, [r3, #16]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_RTC_SetTime+0x30>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e07a      	b.n	8006d52 <HAL_RTC_SetTime+0x126>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2202      	movs	r2, #2
 8006c66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d113      	bne.n	8006c96 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006c78:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	4619      	mov	r1, r3
 8006c82:	460b      	mov	r3, r1
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	1a5b      	subs	r3, r3, r1
 8006c88:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006c8a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006c90:	4413      	add	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e01e      	b.n	8006cd4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fc08 	bl	80074b0 <RTC_Bcd2ToByte>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006ca8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fbfd 	bl	80074b0 <RTC_Bcd2ToByte>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4613      	mov	r3, r2
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006cc2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	789b      	ldrb	r3, [r3, #2]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fbf1 	bl	80074b0 <RTC_Bcd2ToByte>
 8006cce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006cd0:	4423      	add	r3, r4
 8006cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006cd4:	6979      	ldr	r1, [r7, #20]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb16 	bl	8007308 <RTC_WriteTimeCounter>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e02f      	b.n	8006d52 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0205 	bic.w	r2, r2, #5
 8006d00:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fb27 	bl	8007356 <RTC_ReadAlarmCounter>
 8006d08:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d018      	beq.n	8006d44 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d214      	bcs.n	8006d44 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006d20:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006d24:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d26:	6939      	ldr	r1, [r7, #16]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fb2d 	bl	8007388 <RTC_WriteAlarmCounter>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2204      	movs	r2, #4
 8006d38:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e006      	b.n	8006d52 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
	...

08006d5c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_RTC_GetTime+0x28>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0b5      	b.n	8006ef4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e0ac      	b.n	8006ef4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fa84 	bl	80072a8 <RTC_ReadTimeCounter>
 8006da0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	4a55      	ldr	r2, [pc, #340]	@ (8006efc <HAL_RTC_GetTime+0x1a0>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	0adb      	lsrs	r3, r3, #11
 8006dac:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4b52      	ldr	r3, [pc, #328]	@ (8006efc <HAL_RTC_GetTime+0x1a0>)
 8006db2:	fba3 1302 	umull	r1, r3, r3, r2
 8006db6:	0adb      	lsrs	r3, r3, #11
 8006db8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8006f00 <HAL_RTC_GetTime+0x1a4>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8006efc <HAL_RTC_GetTime+0x1a0>)
 8006dd4:	fba2 1203 	umull	r1, r2, r2, r3
 8006dd8:	0ad2      	lsrs	r2, r2, #11
 8006dda:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8006dde:	fb01 f202 	mul.w	r2, r1, r2
 8006de2:	1a9a      	subs	r2, r3, r2
 8006de4:	4b46      	ldr	r3, [pc, #280]	@ (8006f00 <HAL_RTC_GetTime+0x1a4>)
 8006de6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dea:	0959      	lsrs	r1, r3, #5
 8006dec:	460b      	mov	r3, r1
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	1a5b      	subs	r3, r3, r1
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	1ad1      	subs	r1, r2, r3
 8006df6:	b2ca      	uxtb	r2, r1
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b17      	cmp	r3, #23
 8006e00:	d955      	bls.n	8006eae <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	4a3f      	ldr	r2, [pc, #252]	@ (8006f04 <HAL_RTC_GetTime+0x1a8>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006e0e:	6939      	ldr	r1, [r7, #16]
 8006e10:	4b3c      	ldr	r3, [pc, #240]	@ (8006f04 <HAL_RTC_GetTime+0x1a8>)
 8006e12:	fba3 2301 	umull	r2, r3, r3, r1
 8006e16:	091a      	lsrs	r2, r3, #4
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	1aca      	subs	r2, r1, r3
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa94 	bl	8007356 <RTC_ReadAlarmCounter>
 8006e2e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d008      	beq.n	8006e4a <HAL_RTC_GetTime+0xee>
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d904      	bls.n	8006e4a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	e002      	b.n	8006e50 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4a2d      	ldr	r2, [pc, #180]	@ (8006f08 <HAL_RTC_GetTime+0x1ac>)
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006e5e:	69b9      	ldr	r1, [r7, #24]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fa51 	bl	8007308 <RTC_WriteTimeCounter>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e041      	b.n	8006ef4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d00c      	beq.n	8006e92 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fa80 	bl	8007388 <RTC_WriteAlarmCounter>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e030      	b.n	8006ef4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006e92:	69f9      	ldr	r1, [r7, #28]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa77 	bl	8007388 <RTC_WriteAlarmCounter>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e027      	b.n	8006ef4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fb1f 	bl	80074ea <RTC_DateUpdate>
 8006eac:	e003      	b.n	8006eb6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fad8 	bl	8007476 <RTC_ByteToBcd2>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 facf 	bl	8007476 <RTC_ByteToBcd2>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	789b      	ldrb	r3, [r3, #2]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fac6 	bl	8007476 <RTC_ByteToBcd2>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	91a2b3c5 	.word	0x91a2b3c5
 8006f00:	88888889 	.word	0x88888889
 8006f04:	aaaaaaab 	.word	0xaaaaaaab
 8006f08:	00015180 	.word	0x00015180

08006f0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_RTC_SetDate+0x24>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e097      	b.n	8007064 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	7c1b      	ldrb	r3, [r3, #16]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_RTC_SetDate+0x34>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e091      	b.n	8007064 <HAL_RTC_SetDate+0x158>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	78da      	ldrb	r2, [r3, #3]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	785a      	ldrb	r2, [r3, #1]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	789a      	ldrb	r2, [r3, #2]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	739a      	strb	r2, [r3, #14]
 8006f6a:	e01a      	b.n	8006fa2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	78db      	ldrb	r3, [r3, #3]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fa9d 	bl	80074b0 <RTC_Bcd2ToByte>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fa94 	bl	80074b0 <RTC_Bcd2ToByte>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	789b      	ldrb	r3, [r3, #2]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fa8b 	bl	80074b0 <RTC_Bcd2ToByte>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	7bdb      	ldrb	r3, [r3, #15]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	7b59      	ldrb	r1, [r3, #13]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	7b9b      	ldrb	r3, [r3, #14]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f000 fb75 	bl	80076a0 <RTC_WeekDayNum>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	7b1a      	ldrb	r2, [r3, #12]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f96e 	bl	80072a8 <RTC_ReadTimeCounter>
 8006fcc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	@ (800706c <HAL_RTC_SetDate+0x160>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	0adb      	lsrs	r3, r3, #11
 8006fd8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b18      	cmp	r3, #24
 8006fde:	d93a      	bls.n	8007056 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4a23      	ldr	r2, [pc, #140]	@ (8007070 <HAL_RTC_SetDate+0x164>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	091b      	lsrs	r3, r3, #4
 8006fea:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <HAL_RTC_SetDate+0x168>)
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006ff6:	69f9      	ldr	r1, [r7, #28]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f985 	bl	8007308 <RTC_WriteTimeCounter>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2204      	movs	r2, #4
 8007008:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e027      	b.n	8007064 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f99e 	bl	8007356 <RTC_ReadAlarmCounter>
 800701a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d018      	beq.n	8007056 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	429a      	cmp	r2, r3
 800702a:	d214      	bcs.n	8007056 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007032:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007036:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f9a4 	bl	8007388 <RTC_WriteAlarmCounter>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2204      	movs	r2, #4
 800704a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e006      	b.n	8007064 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	91a2b3c5 	.word	0x91a2b3c5
 8007070:	aaaaaaab 	.word	0xaaaaaaab
 8007074:	00015180 	.word	0x00015180

08007078 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b089      	sub	sp, #36	@ 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8007084:	2300      	movs	r3, #0
 8007086:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	2100      	movs	r1, #0
 800708e:	460a      	mov	r2, r1
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	460a      	mov	r2, r1
 8007094:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_RTC_SetAlarm_IT+0x2a>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e099      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	7c1b      	ldrb	r3, [r3, #16]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_RTC_SetAlarm_IT+0x3a>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e093      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x162>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2202      	movs	r2, #2
 80070bc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80070be:	f107 0314 	add.w	r3, r7, #20
 80070c2:	2200      	movs	r2, #0
 80070c4:	4619      	mov	r1, r3
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fe48 	bl	8006d5c <HAL_RTC_GetTime>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e081      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80070d6:	7d3b      	ldrb	r3, [r7, #20]
 80070d8:	461a      	mov	r2, r3
 80070da:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80070de:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80070e2:	7d7b      	ldrb	r3, [r7, #21]
 80070e4:	4619      	mov	r1, r3
 80070e6:	460b      	mov	r3, r1
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80070ee:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80070f0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80070f2:	4413      	add	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d113      	bne.n	8007124 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007106:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	4619      	mov	r1, r3
 8007110:	460b      	mov	r3, r1
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	1a5b      	subs	r3, r3, r1
 8007116:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8007118:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800711e:	4413      	add	r3, r2
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e01e      	b.n	8007162 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f9c1 	bl	80074b0 <RTC_Bcd2ToByte>
 800712e:	4603      	mov	r3, r0
 8007130:	461a      	mov	r2, r3
 8007132:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007136:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f9b6 	bl	80074b0 <RTC_Bcd2ToByte>
 8007144:	4603      	mov	r3, r0
 8007146:	461a      	mov	r2, r3
 8007148:	4613      	mov	r3, r2
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8007150:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	789b      	ldrb	r3, [r3, #2]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f9aa 	bl	80074b0 <RTC_Bcd2ToByte>
 800715c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800715e:	4423      	add	r3, r4
 8007160:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	429a      	cmp	r2, r3
 8007168:	d205      	bcs.n	8007176 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007170:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007174:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007176:	69f9      	ldr	r1, [r7, #28]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f905 	bl	8007388 <RTC_WriteAlarmCounter>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2204      	movs	r2, #4
 8007188:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e022      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0202 	bic.w	r2, r2, #2
 80071a2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0202 	orr.w	r2, r2, #2
 80071b2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80071b4:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a0a      	ldr	r2, [pc, #40]	@ (80071e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071be:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80071c0:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	4a07      	ldr	r2, [pc, #28]	@ (80071e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ca:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3724      	adds	r7, #36	@ 0x24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd90      	pop	{r4, r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40010400 	.word	0x40010400

080071e8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f815 	bl	800723c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0202 	bic.w	r2, r2, #2
 8007220:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007222:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007224:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007228:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	745a      	strb	r2, [r3, #17]
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40010400 	.word	0x40010400

0800723c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e01d      	b.n	80072a0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0208 	bic.w	r2, r2, #8
 8007272:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007274:	f7fc fd6c 	bl	8003d50 <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800727a:	e009      	b.n	8007290 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800727c:	f7fc fd68 	bl	8003d50 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800728a:	d901      	bls.n	8007290 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e007      	b.n	80072a0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0ee      	beq.n	800727c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	827b      	strh	r3, [r7, #18]
 80072b4:	2300      	movs	r3, #0
 80072b6:	823b      	strh	r3, [r7, #16]
 80072b8:	2300      	movs	r3, #0
 80072ba:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80072d8:	8a7a      	ldrh	r2, [r7, #18]
 80072da:	8a3b      	ldrh	r3, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d008      	beq.n	80072f2 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80072e0:	8a3b      	ldrh	r3, [r7, #16]
 80072e2:	041a      	lsls	r2, r3, #16
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e004      	b.n	80072fc <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80072f2:	8a7b      	ldrh	r3, [r7, #18]
 80072f4:	041a      	lsls	r2, r3, #16
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80072fc:	697b      	ldr	r3, [r7, #20]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f85d 	bl	80073d6 <RTC_EnterInitMode>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
 8007326:	e011      	b.n	800734c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	b292      	uxth	r2, r2
 800733a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f872 	bl	8007426 <RTC_ExitInitMode>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	81fb      	strh	r3, [r7, #14]
 8007362:	2300      	movs	r3, #0
 8007364:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007376:	89fb      	ldrh	r3, [r7, #14]
 8007378:	041a      	lsls	r2, r3, #16
 800737a:	89bb      	ldrh	r3, [r7, #12]
 800737c:	4313      	orrs	r3, r2
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f81d 	bl	80073d6 <RTC_EnterInitMode>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
 80073a6:	e011      	b.n	80073cc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	0c12      	lsrs	r2, r2, #16
 80073b0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	b292      	uxth	r2, r2
 80073ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f832 	bl	8007426 <RTC_ExitInitMode>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80073e2:	f7fc fcb5 	bl	8003d50 <HAL_GetTick>
 80073e6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80073e8:	e009      	b.n	80073fe <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80073ea:	f7fc fcb1 	bl	8003d50 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073f8:	d901      	bls.n	80073fe <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e00f      	b.n	800741e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0ee      	beq.n	80073ea <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0210 	orr.w	r2, r2, #16
 800741a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0210 	bic.w	r2, r2, #16
 8007440:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007442:	f7fc fc85 	bl	8003d50 <HAL_GetTick>
 8007446:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007448:	e009      	b.n	800745e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800744a:	f7fc fc81 	bl	8003d50 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007458:	d901      	bls.n	800745e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e007      	b.n	800746e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0ee      	beq.n	800744a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	4603      	mov	r3, r0
 800747e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007484:	e005      	b.n	8007492 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	3b0a      	subs	r3, #10
 8007490:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	2b09      	cmp	r3, #9
 8007496:	d8f6      	bhi.n	8007486 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	b2db      	uxtb	r3, r3
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	091b      	lsrs	r3, r3, #4
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	4413      	add	r3, r2
 80074de:	b2db      	uxtb	r3, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7bdb      	ldrb	r3, [r3, #15]
 8007508:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7b5b      	ldrb	r3, [r3, #13]
 800750e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7b9b      	ldrb	r3, [r3, #14]
 8007514:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	e06f      	b.n	80075fc <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d011      	beq.n	8007546 <RTC_DateUpdate+0x5c>
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b03      	cmp	r3, #3
 8007526:	d00e      	beq.n	8007546 <RTC_DateUpdate+0x5c>
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b05      	cmp	r3, #5
 800752c:	d00b      	beq.n	8007546 <RTC_DateUpdate+0x5c>
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b07      	cmp	r3, #7
 8007532:	d008      	beq.n	8007546 <RTC_DateUpdate+0x5c>
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b08      	cmp	r3, #8
 8007538:	d005      	beq.n	8007546 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b0a      	cmp	r3, #10
 800753e:	d002      	beq.n	8007546 <RTC_DateUpdate+0x5c>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b0c      	cmp	r3, #12
 8007544:	d117      	bne.n	8007576 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b1e      	cmp	r3, #30
 800754a:	d803      	bhi.n	8007554 <RTC_DateUpdate+0x6a>
      {
        day++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007552:	e050      	b.n	80075f6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b0c      	cmp	r3, #12
 8007558:	d005      	beq.n	8007566 <RTC_DateUpdate+0x7c>
        {
          month++;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3301      	adds	r3, #1
 800755e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007560:	2301      	movs	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007564:	e047      	b.n	80075f6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007566:	2301      	movs	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
          day = 1U;
 800756a:	2301      	movs	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
          year++;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	3301      	adds	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007574:	e03f      	b.n	80075f6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d008      	beq.n	800758e <RTC_DateUpdate+0xa4>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2b06      	cmp	r3, #6
 8007580:	d005      	beq.n	800758e <RTC_DateUpdate+0xa4>
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b09      	cmp	r3, #9
 8007586:	d002      	beq.n	800758e <RTC_DateUpdate+0xa4>
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b0b      	cmp	r3, #11
 800758c:	d10c      	bne.n	80075a8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b1d      	cmp	r3, #29
 8007592:	d803      	bhi.n	800759c <RTC_DateUpdate+0xb2>
      {
        day++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800759a:	e02c      	b.n	80075f6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3301      	adds	r3, #1
 80075a0:	613b      	str	r3, [r7, #16]
        day = 1U;
 80075a2:	2301      	movs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80075a6:	e026      	b.n	80075f6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d123      	bne.n	80075f6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b1b      	cmp	r3, #27
 80075b2:	d803      	bhi.n	80075bc <RTC_DateUpdate+0xd2>
      {
        day++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e01c      	b.n	80075f6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b1c      	cmp	r3, #28
 80075c0:	d111      	bne.n	80075e6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f838 	bl	800763c <RTC_IsLeapYear>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <RTC_DateUpdate+0xf0>
        {
          day++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e00d      	b.n	80075f6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3301      	adds	r3, #1
 80075de:	613b      	str	r3, [r7, #16]
          day = 1U;
 80075e0:	2301      	movs	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e007      	b.n	80075f6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b1d      	cmp	r3, #29
 80075ea:	d104      	bne.n	80075f6 <RTC_DateUpdate+0x10c>
      {
        month++;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
        day = 1U;
 80075f2:	2301      	movs	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d38b      	bcc.n	800751c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	4619      	mov	r1, r3
 8007626:	6978      	ldr	r0, [r7, #20]
 8007628:	f000 f83a 	bl	80076a0 <RTC_WeekDayNum>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	731a      	strb	r2, [r3, #12]
}
 8007634:	bf00      	nop
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	e01d      	b.n	8007692 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	4a10      	ldr	r2, [pc, #64]	@ (800769c <RTC_IsLeapYear+0x60>)
 800765a:	fba2 1203 	umull	r1, r2, r2, r3
 800765e:	0952      	lsrs	r2, r2, #5
 8007660:	2164      	movs	r1, #100	@ 0x64
 8007662:	fb01 f202 	mul.w	r2, r1, r2
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800766e:	2301      	movs	r3, #1
 8007670:	e00f      	b.n	8007692 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	4a09      	ldr	r2, [pc, #36]	@ (800769c <RTC_IsLeapYear+0x60>)
 8007676:	fba2 1203 	umull	r1, r2, r2, r3
 800767a:	09d2      	lsrs	r2, r2, #7
 800767c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8007680:	fb01 f202 	mul.w	r2, r1, r2
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007690:	2300      	movs	r3, #0
  }
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr
 800769c:	51eb851f 	.word	0x51eb851f

080076a0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
 80076ac:	4613      	mov	r3, r2
 80076ae:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60bb      	str	r3, [r7, #8]
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80076be:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d82d      	bhi.n	8007722 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	4613      	mov	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	4413      	add	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007784 <RTC_WeekDayNum+0xe4>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	085a      	lsrs	r2, r3, #1
 80076da:	78bb      	ldrb	r3, [r7, #2]
 80076dc:	441a      	add	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	441a      	add	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	089b      	lsrs	r3, r3, #2
 80076e8:	441a      	add	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4926      	ldr	r1, [pc, #152]	@ (8007788 <RTC_WeekDayNum+0xe8>)
 80076f0:	fba1 1303 	umull	r1, r3, r1, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	4922      	ldr	r1, [pc, #136]	@ (8007788 <RTC_WeekDayNum+0xe8>)
 80076fe:	fba1 1303 	umull	r1, r3, r1, r3
 8007702:	09db      	lsrs	r3, r3, #7
 8007704:	4413      	add	r3, r2
 8007706:	1d1a      	adds	r2, r3, #4
 8007708:	4b20      	ldr	r3, [pc, #128]	@ (800778c <RTC_WeekDayNum+0xec>)
 800770a:	fba3 1302 	umull	r1, r3, r3, r2
 800770e:	1ad1      	subs	r1, r2, r3
 8007710:	0849      	lsrs	r1, r1, #1
 8007712:	440b      	add	r3, r1
 8007714:	0899      	lsrs	r1, r3, #2
 8007716:	460b      	mov	r3, r1
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	e029      	b.n	8007776 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <RTC_WeekDayNum+0xe4>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	085a      	lsrs	r2, r3, #1
 8007736:	78bb      	ldrb	r3, [r7, #2]
 8007738:	441a      	add	r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	441a      	add	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	089b      	lsrs	r3, r3, #2
 8007742:	441a      	add	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4910      	ldr	r1, [pc, #64]	@ (8007788 <RTC_WeekDayNum+0xe8>)
 8007748:	fba1 1303 	umull	r1, r3, r1, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	490d      	ldr	r1, [pc, #52]	@ (8007788 <RTC_WeekDayNum+0xe8>)
 8007754:	fba1 1303 	umull	r1, r3, r1, r3
 8007758:	09db      	lsrs	r3, r3, #7
 800775a:	4413      	add	r3, r2
 800775c:	1c9a      	adds	r2, r3, #2
 800775e:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <RTC_WeekDayNum+0xec>)
 8007760:	fba3 1302 	umull	r1, r3, r3, r2
 8007764:	1ad1      	subs	r1, r2, r3
 8007766:	0849      	lsrs	r1, r1, #1
 8007768:	440b      	add	r3, r1
 800776a:	0899      	lsrs	r1, r3, #2
 800776c:	460b      	mov	r3, r1
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	1a5b      	subs	r3, r3, r1
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	b2db      	uxtb	r3, r3
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr
 8007784:	38e38e39 	.word	0x38e38e39
 8007788:	51eb851f 	.word	0x51eb851f
 800778c:	24924925 	.word	0x24924925

08007790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e076      	b.n	8007890 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d108      	bne.n	80077bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b2:	d009      	beq.n	80077c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	61da      	str	r2, [r3, #28]
 80077ba:	e005      	b.n	80077c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fc f834 	bl	8003850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800784c:	ea42 0103 	orr.w	r1, r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	0c1a      	lsrs	r2, r3, #16
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f002 0204 	and.w	r2, r2, #4
 800786e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800787e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a8:	f7fc fa52 	bl	8003d50 <HAL_GetTick>
 80078ac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d001      	beq.n	80078c2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80078be:	2302      	movs	r3, #2
 80078c0:	e12a      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_SPI_Transmit+0x36>
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e122      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_SPI_Transmit+0x48>
 80078dc:	2302      	movs	r3, #2
 80078de:	e11b      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2203      	movs	r2, #3
 80078ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	88fa      	ldrh	r2, [r7, #6]
 8007900:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	88fa      	ldrh	r2, [r7, #6]
 8007906:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800792e:	d10f      	bne.n	8007950 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800793e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800794e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	d007      	beq.n	800796e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007976:	d152      	bne.n	8007a1e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Transmit+0xee>
 8007980:	8b7b      	ldrh	r3, [r7, #26]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d145      	bne.n	8007a12 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798a:	881a      	ldrh	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079aa:	e032      	b.n	8007a12 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d112      	bne.n	80079e0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079be:	881a      	ldrh	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	1c9a      	adds	r2, r3, #2
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079de:	e018      	b.n	8007a12 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e0:	f7fc f9b6 	bl	8003d50 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d803      	bhi.n	80079f8 <HAL_SPI_Transmit+0x160>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d102      	bne.n	80079fe <HAL_SPI_Transmit+0x166>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e082      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1c7      	bne.n	80079ac <HAL_SPI_Transmit+0x114>
 8007a1c:	e053      	b.n	8007ac6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_SPI_Transmit+0x194>
 8007a26:	8b7b      	ldrh	r3, [r7, #26]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d147      	bne.n	8007abc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	7812      	ldrb	r2, [r2, #0]
 8007a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a52:	e033      	b.n	8007abc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d113      	bne.n	8007a8a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	7812      	ldrb	r2, [r2, #0]
 8007a6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a88:	e018      	b.n	8007abc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a8a:	f7fc f961 	bl	8003d50 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d803      	bhi.n	8007aa2 <HAL_SPI_Transmit+0x20a>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d102      	bne.n	8007aa8 <HAL_SPI_Transmit+0x210>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e02d      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1c6      	bne.n	8007a54 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fbc4 	bl	8008258 <SPI_EndRxTxTransaction>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007b16:	2300      	movs	r3, #0
  }
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d001      	beq.n	8007b40 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e104      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b48:	d112      	bne.n	8007b70 <HAL_SPI_Receive+0x50>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10e      	bne.n	8007b70 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2204      	movs	r2, #4
 8007b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f8f3 	bl	8007d52 <HAL_SPI_TransmitReceive>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	e0ec      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b70:	f7fc f8ee 	bl	8003d50 <HAL_GetTick>
 8007b74:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Receive+0x62>
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0e1      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_SPI_Receive+0x74>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e0da      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be2:	d10f      	bne.n	8007c04 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d007      	beq.n	8007c22 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d170      	bne.n	8007d0c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c2a:	e035      	b.n	8007c98 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d115      	bne.n	8007c66 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f103 020c 	add.w	r2, r3, #12
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c64:	e018      	b.n	8007c98 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c66:	f7fc f873 	bl	8003d50 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d803      	bhi.n	8007c7e <HAL_SPI_Receive+0x15e>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d102      	bne.n	8007c84 <HAL_SPI_Receive+0x164>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e058      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1c4      	bne.n	8007c2c <HAL_SPI_Receive+0x10c>
 8007ca2:	e038      	b.n	8007d16 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d113      	bne.n	8007cda <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	b292      	uxth	r2, r2
 8007cbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	1c9a      	adds	r2, r3, #2
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cd8:	e018      	b.n	8007d0c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cda:	f7fc f839 	bl	8003d50 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d803      	bhi.n	8007cf2 <HAL_SPI_Receive+0x1d2>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d102      	bne.n	8007cf8 <HAL_SPI_Receive+0x1d8>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d109      	bne.n	8007d0c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e01e      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1c6      	bne.n	8007ca4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fa4a 	bl	80081b4 <SPI_EndRxTransaction>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b08a      	sub	sp, #40	@ 0x28
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d60:	2301      	movs	r3, #1
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d64:	f7fb fff4 	bl	8003d50 <HAL_GetTick>
 8007d68:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d70:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d7c:	7ffb      	ldrb	r3, [r7, #31]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d00c      	beq.n	8007d9c <HAL_SPI_TransmitReceive+0x4a>
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d88:	d106      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x46>
 8007d92:	7ffb      	ldrb	r3, [r7, #31]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d001      	beq.n	8007d9c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e17f      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <HAL_SPI_TransmitReceive+0x5c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_SPI_TransmitReceive+0x5c>
 8007da8:	887b      	ldrh	r3, [r7, #2]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e174      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x6e>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e16d      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d003      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	887a      	ldrh	r2, [r7, #2]
 8007dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	887a      	ldrh	r2, [r7, #2]
 8007df2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	887a      	ldrh	r2, [r7, #2]
 8007dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	887a      	ldrh	r2, [r7, #2]
 8007e04:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1c:	2b40      	cmp	r3, #64	@ 0x40
 8007e1e:	d007      	beq.n	8007e30 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e38:	d17e      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0xf6>
 8007e42:	8afb      	ldrh	r3, [r7, #22]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d16c      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4c:	881a      	ldrh	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	1c9a      	adds	r2, r3, #2
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e6c:	e059      	b.n	8007f22 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x162>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <HAL_SPI_TransmitReceive+0x162>
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d113      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e90:	881a      	ldrh	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	1c9a      	adds	r2, r3, #2
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d119      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x1a4>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d014      	beq.n	8007ef6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ef6:	f7fb ff2b 	bl	8003d50 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d80d      	bhi.n	8007f22 <HAL_SPI_TransmitReceive+0x1d0>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0c:	d009      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e0bc      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1a0      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x11c>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d19b      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x11c>
 8007f36:	e082      	b.n	800803e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_TransmitReceive+0x1f4>
 8007f40:	8afb      	ldrh	r3, [r7, #22]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d171      	bne.n	800802a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f6c:	e05d      	b.n	800802a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d11c      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x264>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d017      	beq.n	8007fb6 <HAL_SPI_TransmitReceive+0x264>
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d114      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d119      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x2a6>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d014      	beq.n	8007ff8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ff8:	f7fb feaa 	bl	8003d50 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008004:	429a      	cmp	r2, r3
 8008006:	d803      	bhi.n	8008010 <HAL_SPI_TransmitReceive+0x2be>
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d102      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x2c4>
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e038      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d19c      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x21c>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d197      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f908 	bl	8008258 <SPI_EndRxTxTransaction>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e01d      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800809a:	2300      	movs	r3, #0
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3728      	adds	r7, #40	@ 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080b4:	f7fb fe4c 	bl	8003d50 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	4413      	add	r3, r2
 80080c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080c4:	f7fb fe44 	bl	8003d50 <HAL_GetTick>
 80080c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080ca:	4b39      	ldr	r3, [pc, #228]	@ (80081b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	015b      	lsls	r3, r3, #5
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080da:	e054      	b.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d050      	beq.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080e4:	f7fb fe34 	bl	8003d50 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d902      	bls.n	80080fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d13d      	bne.n	8008176 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008112:	d111      	bne.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800811c:	d004      	beq.n	8008128 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008126:	d107      	bne.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008136:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008140:	d10f      	bne.n	8008162 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e017      	b.n	80081a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	3b01      	subs	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4013      	ands	r3, r2
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	429a      	cmp	r2, r3
 8008194:	bf0c      	ite	eq
 8008196:	2301      	moveq	r3, #1
 8008198:	2300      	movne	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d19b      	bne.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000044 	.word	0x20000044

080081b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081c8:	d111      	bne.n	80081ee <SPI_EndRxTransaction+0x3a>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d2:	d004      	beq.n	80081de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081dc:	d107      	bne.n	80081ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081f6:	d117      	bne.n	8008228 <SPI_EndRxTransaction+0x74>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008200:	d112      	bne.n	8008228 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2200      	movs	r2, #0
 800820a:	2101      	movs	r1, #1
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff ff49 	bl	80080a4 <SPI_WaitFlagStateUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01a      	beq.n	800824e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821c:	f043 0220 	orr.w	r2, r3, #32
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e013      	b.n	8008250 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	2180      	movs	r1, #128	@ 0x80
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff ff36 	bl	80080a4 <SPI_WaitFlagStateUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d007      	beq.n	800824e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008242:	f043 0220 	orr.w	r2, r3, #32
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e000      	b.n	8008250 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2201      	movs	r2, #1
 800826c:	2102      	movs	r1, #2
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff ff18 	bl	80080a4 <SPI_WaitFlagStateUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827e:	f043 0220 	orr.w	r2, r3, #32
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e013      	b.n	80082b2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	2180      	movs	r1, #128	@ 0x80
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff ff05 	bl	80080a4 <SPI_WaitFlagStateUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d007      	beq.n	80082b0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a4:	f043 0220 	orr.w	r2, r3, #32
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e000      	b.n	80082b2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e042      	b.n	8008352 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fb fb0f 	bl	8003904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	@ 0x24
 80082ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9d0 	bl	80086a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691a      	ldr	r2, [r3, #16]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008312:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695a      	ldr	r2, [r3, #20]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008322:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008332:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b08a      	sub	sp, #40	@ 0x28
 800835e:	af02      	add	r7, sp, #8
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b20      	cmp	r3, #32
 8008378:	d175      	bne.n	8008466 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <HAL_UART_Transmit+0x2c>
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e06e      	b.n	8008468 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2221      	movs	r2, #33	@ 0x21
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008398:	f7fb fcda 	bl	8003d50 <HAL_GetTick>
 800839c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	88fa      	ldrh	r2, [r7, #6]
 80083a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	d108      	bne.n	80083c6 <HAL_UART_Transmit+0x6c>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	e003      	b.n	80083ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083ce:	e02e      	b.n	800842e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2200      	movs	r2, #0
 80083d8:	2180      	movs	r1, #128	@ 0x80
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f86d 	bl	80084ba <UART_WaitOnFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e03a      	b.n	8008468 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10b      	bne.n	8008410 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008406:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	3302      	adds	r3, #2
 800840c:	61bb      	str	r3, [r7, #24]
 800840e:	e007      	b.n	8008420 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	781a      	ldrb	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3301      	adds	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1cb      	bne.n	80083d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2200      	movs	r2, #0
 8008440:	2140      	movs	r1, #64	@ 0x40
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f839 	bl	80084ba <UART_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e006      	b.n	8008468 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e000      	b.n	8008468 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b20      	cmp	r3, #32
 8008488:	d112      	bne.n	80084b0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_UART_Receive_IT+0x26>
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e00b      	b.n	80084b2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	461a      	mov	r2, r3
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f860 	bl	800856c <UART_Start_Receive_IT>
 80084ac:	4603      	mov	r3, r0
 80084ae:	e000      	b.n	80084b2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b086      	sub	sp, #24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ca:	e03b      	b.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d037      	beq.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d4:	f7fb fc3c 	bl	8003d50 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d302      	bcc.n	80084ea <UART_WaitOnFlagUntilTimeout+0x30>
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e03a      	b.n	8008564 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d023      	beq.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b80      	cmp	r3, #128	@ 0x80
 8008500:	d020      	beq.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d01d      	beq.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b08      	cmp	r3, #8
 8008514:	d116      	bne.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f856 	bl	80085de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2208      	movs	r2, #8
 8008536:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e00f      	b.n	8008564 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4013      	ands	r3, r2
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	429a      	cmp	r2, r3
 8008560:	d0b4      	beq.n	80084cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2222      	movs	r2, #34	@ 0x22
 8008596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0201 	orr.w	r2, r2, #1
 80085c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0220 	orr.w	r2, r2, #32
 80085d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085de:	b480      	push	{r7}
 80085e0:	b095      	sub	sp, #84	@ 0x54
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008606:	643a      	str	r2, [r7, #64]	@ 0x40
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800860c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e5      	bne.n	80085e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	61fb      	str	r3, [r7, #28]
   return(result);
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3314      	adds	r3, #20
 8008638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800863a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800863c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	2b01      	cmp	r3, #1
 8008654:	d119      	bne.n	800868a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	330c      	adds	r3, #12
 800865c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	60bb      	str	r3, [r7, #8]
   return(result);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f023 0310 	bic.w	r3, r3, #16
 800866c:	647b      	str	r3, [r7, #68]	@ 0x44
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008676:	61ba      	str	r2, [r7, #24]
 8008678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	613b      	str	r3, [r7, #16]
   return(result);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008698:	bf00      	nop
 800869a:	3754      	adds	r7, #84	@ 0x54
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr
	...

080086a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80086de:	f023 030c 	bic.w	r3, r3, #12
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	430b      	orrs	r3, r1
 80086ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a2c      	ldr	r2, [pc, #176]	@ (80087b8 <UART_SetConfig+0x114>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d103      	bne.n	8008714 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800870c:	f7fe f864 	bl	80067d8 <HAL_RCC_GetPCLK2Freq>
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	e002      	b.n	800871a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008714:	f7fe f84c 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8008718:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009a      	lsls	r2, r3, #2
 8008724:	441a      	add	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	4a22      	ldr	r2, [pc, #136]	@ (80087bc <UART_SetConfig+0x118>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	0119      	lsls	r1, r3, #4
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009a      	lsls	r2, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008750:	4b1a      	ldr	r3, [pc, #104]	@ (80087bc <UART_SetConfig+0x118>)
 8008752:	fba3 0302 	umull	r0, r3, r3, r2
 8008756:	095b      	lsrs	r3, r3, #5
 8008758:	2064      	movs	r0, #100	@ 0x64
 800875a:	fb00 f303 	mul.w	r3, r0, r3
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	3332      	adds	r3, #50	@ 0x32
 8008764:	4a15      	ldr	r2, [pc, #84]	@ (80087bc <UART_SetConfig+0x118>)
 8008766:	fba2 2303 	umull	r2, r3, r2, r3
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008770:	4419      	add	r1, r3
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009a      	lsls	r2, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	fbb2 f2f3 	udiv	r2, r2, r3
 8008788:	4b0c      	ldr	r3, [pc, #48]	@ (80087bc <UART_SetConfig+0x118>)
 800878a:	fba3 0302 	umull	r0, r3, r3, r2
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	2064      	movs	r0, #100	@ 0x64
 8008792:	fb00 f303 	mul.w	r3, r0, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	3332      	adds	r3, #50	@ 0x32
 800879c:	4a07      	ldr	r2, [pc, #28]	@ (80087bc <UART_SetConfig+0x118>)
 800879e:	fba2 2303 	umull	r2, r3, r2, r3
 80087a2:	095b      	lsrs	r3, r3, #5
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	440a      	add	r2, r1
 80087ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40013800 	.word	0x40013800
 80087bc:	51eb851f 	.word	0x51eb851f

080087c0 <atoi>:
 80087c0:	220a      	movs	r2, #10
 80087c2:	2100      	movs	r1, #0
 80087c4:	f000 b87c 	b.w	80088c0 <strtol>

080087c8 <_strtol_l.isra.0>:
 80087c8:	2b24      	cmp	r3, #36	@ 0x24
 80087ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ce:	4686      	mov	lr, r0
 80087d0:	4690      	mov	r8, r2
 80087d2:	d801      	bhi.n	80087d8 <_strtol_l.isra.0+0x10>
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d106      	bne.n	80087e6 <_strtol_l.isra.0+0x1e>
 80087d8:	f000 f930 	bl	8008a3c <__errno>
 80087dc:	2316      	movs	r3, #22
 80087de:	6003      	str	r3, [r0, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	460d      	mov	r5, r1
 80087e8:	4833      	ldr	r0, [pc, #204]	@ (80088b8 <_strtol_l.isra.0+0xf0>)
 80087ea:	462a      	mov	r2, r5
 80087ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087f0:	5d06      	ldrb	r6, [r0, r4]
 80087f2:	f016 0608 	ands.w	r6, r6, #8
 80087f6:	d1f8      	bne.n	80087ea <_strtol_l.isra.0+0x22>
 80087f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80087fa:	d110      	bne.n	800881e <_strtol_l.isra.0+0x56>
 80087fc:	2601      	movs	r6, #1
 80087fe:	782c      	ldrb	r4, [r5, #0]
 8008800:	1c95      	adds	r5, r2, #2
 8008802:	f033 0210 	bics.w	r2, r3, #16
 8008806:	d115      	bne.n	8008834 <_strtol_l.isra.0+0x6c>
 8008808:	2c30      	cmp	r4, #48	@ 0x30
 800880a:	d10d      	bne.n	8008828 <_strtol_l.isra.0+0x60>
 800880c:	782a      	ldrb	r2, [r5, #0]
 800880e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008812:	2a58      	cmp	r2, #88	@ 0x58
 8008814:	d108      	bne.n	8008828 <_strtol_l.isra.0+0x60>
 8008816:	786c      	ldrb	r4, [r5, #1]
 8008818:	3502      	adds	r5, #2
 800881a:	2310      	movs	r3, #16
 800881c:	e00a      	b.n	8008834 <_strtol_l.isra.0+0x6c>
 800881e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008820:	bf04      	itt	eq
 8008822:	782c      	ldrbeq	r4, [r5, #0]
 8008824:	1c95      	addeq	r5, r2, #2
 8008826:	e7ec      	b.n	8008802 <_strtol_l.isra.0+0x3a>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f6      	bne.n	800881a <_strtol_l.isra.0+0x52>
 800882c:	2c30      	cmp	r4, #48	@ 0x30
 800882e:	bf14      	ite	ne
 8008830:	230a      	movne	r3, #10
 8008832:	2308      	moveq	r3, #8
 8008834:	2200      	movs	r2, #0
 8008836:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800883a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800883e:	fbbc f9f3 	udiv	r9, ip, r3
 8008842:	4610      	mov	r0, r2
 8008844:	fb03 ca19 	mls	sl, r3, r9, ip
 8008848:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800884c:	2f09      	cmp	r7, #9
 800884e:	d80f      	bhi.n	8008870 <_strtol_l.isra.0+0xa8>
 8008850:	463c      	mov	r4, r7
 8008852:	42a3      	cmp	r3, r4
 8008854:	dd1b      	ble.n	800888e <_strtol_l.isra.0+0xc6>
 8008856:	1c57      	adds	r7, r2, #1
 8008858:	d007      	beq.n	800886a <_strtol_l.isra.0+0xa2>
 800885a:	4581      	cmp	r9, r0
 800885c:	d314      	bcc.n	8008888 <_strtol_l.isra.0+0xc0>
 800885e:	d101      	bne.n	8008864 <_strtol_l.isra.0+0x9c>
 8008860:	45a2      	cmp	sl, r4
 8008862:	db11      	blt.n	8008888 <_strtol_l.isra.0+0xc0>
 8008864:	2201      	movs	r2, #1
 8008866:	fb00 4003 	mla	r0, r0, r3, r4
 800886a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800886e:	e7eb      	b.n	8008848 <_strtol_l.isra.0+0x80>
 8008870:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008874:	2f19      	cmp	r7, #25
 8008876:	d801      	bhi.n	800887c <_strtol_l.isra.0+0xb4>
 8008878:	3c37      	subs	r4, #55	@ 0x37
 800887a:	e7ea      	b.n	8008852 <_strtol_l.isra.0+0x8a>
 800887c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008880:	2f19      	cmp	r7, #25
 8008882:	d804      	bhi.n	800888e <_strtol_l.isra.0+0xc6>
 8008884:	3c57      	subs	r4, #87	@ 0x57
 8008886:	e7e4      	b.n	8008852 <_strtol_l.isra.0+0x8a>
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	e7ed      	b.n	800886a <_strtol_l.isra.0+0xa2>
 800888e:	1c53      	adds	r3, r2, #1
 8008890:	d108      	bne.n	80088a4 <_strtol_l.isra.0+0xdc>
 8008892:	2322      	movs	r3, #34	@ 0x22
 8008894:	4660      	mov	r0, ip
 8008896:	f8ce 3000 	str.w	r3, [lr]
 800889a:	f1b8 0f00 	cmp.w	r8, #0
 800889e:	d0a0      	beq.n	80087e2 <_strtol_l.isra.0+0x1a>
 80088a0:	1e69      	subs	r1, r5, #1
 80088a2:	e006      	b.n	80088b2 <_strtol_l.isra.0+0xea>
 80088a4:	b106      	cbz	r6, 80088a8 <_strtol_l.isra.0+0xe0>
 80088a6:	4240      	negs	r0, r0
 80088a8:	f1b8 0f00 	cmp.w	r8, #0
 80088ac:	d099      	beq.n	80087e2 <_strtol_l.isra.0+0x1a>
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	d1f6      	bne.n	80088a0 <_strtol_l.isra.0+0xd8>
 80088b2:	f8c8 1000 	str.w	r1, [r8]
 80088b6:	e794      	b.n	80087e2 <_strtol_l.isra.0+0x1a>
 80088b8:	0800a3c3 	.word	0x0800a3c3

080088bc <_strtol_r>:
 80088bc:	f7ff bf84 	b.w	80087c8 <_strtol_l.isra.0>

080088c0 <strtol>:
 80088c0:	4613      	mov	r3, r2
 80088c2:	460a      	mov	r2, r1
 80088c4:	4601      	mov	r1, r0
 80088c6:	4802      	ldr	r0, [pc, #8]	@ (80088d0 <strtol+0x10>)
 80088c8:	6800      	ldr	r0, [r0, #0]
 80088ca:	f7ff bf7d 	b.w	80087c8 <_strtol_l.isra.0>
 80088ce:	bf00      	nop
 80088d0:	20000050 	.word	0x20000050

080088d4 <sniprintf>:
 80088d4:	b40c      	push	{r2, r3}
 80088d6:	b530      	push	{r4, r5, lr}
 80088d8:	4b18      	ldr	r3, [pc, #96]	@ (800893c <sniprintf+0x68>)
 80088da:	1e0c      	subs	r4, r1, #0
 80088dc:	681d      	ldr	r5, [r3, #0]
 80088de:	b09d      	sub	sp, #116	@ 0x74
 80088e0:	da08      	bge.n	80088f4 <sniprintf+0x20>
 80088e2:	238b      	movs	r3, #139	@ 0x8b
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	b01d      	add	sp, #116	@ 0x74
 80088ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088f0:	b002      	add	sp, #8
 80088f2:	4770      	bx	lr
 80088f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80088f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088fc:	f04f 0300 	mov.w	r3, #0
 8008900:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008902:	bf0c      	ite	eq
 8008904:	4623      	moveq	r3, r4
 8008906:	f104 33ff 	addne.w	r3, r4, #4294967295
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008912:	9002      	str	r0, [sp, #8]
 8008914:	9006      	str	r0, [sp, #24]
 8008916:	f8ad 3016 	strh.w	r3, [sp, #22]
 800891a:	4628      	mov	r0, r5
 800891c:	ab21      	add	r3, sp, #132	@ 0x84
 800891e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008920:	a902      	add	r1, sp, #8
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	f000 fa08 	bl	8008d38 <_svfiprintf_r>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	bfbc      	itt	lt
 800892c:	238b      	movlt	r3, #139	@ 0x8b
 800892e:	602b      	strlt	r3, [r5, #0]
 8008930:	2c00      	cmp	r4, #0
 8008932:	d0da      	beq.n	80088ea <sniprintf+0x16>
 8008934:	2200      	movs	r2, #0
 8008936:	9b02      	ldr	r3, [sp, #8]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e7d6      	b.n	80088ea <sniprintf+0x16>
 800893c:	20000050 	.word	0x20000050

08008940 <siprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008946:	b510      	push	{r4, lr}
 8008948:	2400      	movs	r4, #0
 800894a:	b09d      	sub	sp, #116	@ 0x74
 800894c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800894e:	9002      	str	r0, [sp, #8]
 8008950:	9006      	str	r0, [sp, #24]
 8008952:	9107      	str	r1, [sp, #28]
 8008954:	9104      	str	r1, [sp, #16]
 8008956:	4809      	ldr	r0, [pc, #36]	@ (800897c <siprintf+0x3c>)
 8008958:	4909      	ldr	r1, [pc, #36]	@ (8008980 <siprintf+0x40>)
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	6800      	ldr	r0, [r0, #0]
 8008962:	a902      	add	r1, sp, #8
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008968:	f000 f9e6 	bl	8008d38 <_svfiprintf_r>
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	701c      	strb	r4, [r3, #0]
 8008970:	b01d      	add	sp, #116	@ 0x74
 8008972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008976:	b003      	add	sp, #12
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	20000050 	.word	0x20000050
 8008980:	ffff0208 	.word	0xffff0208

08008984 <siscanf>:
 8008984:	b40e      	push	{r1, r2, r3}
 8008986:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800898a:	b570      	push	{r4, r5, r6, lr}
 800898c:	2500      	movs	r5, #0
 800898e:	b09d      	sub	sp, #116	@ 0x74
 8008990:	ac21      	add	r4, sp, #132	@ 0x84
 8008992:	f854 6b04 	ldr.w	r6, [r4], #4
 8008996:	f8ad 2014 	strh.w	r2, [sp, #20]
 800899a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800899c:	9002      	str	r0, [sp, #8]
 800899e:	9006      	str	r0, [sp, #24]
 80089a0:	f7f7 fbde 	bl	8000160 <strlen>
 80089a4:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <siscanf+0x50>)
 80089a6:	9003      	str	r0, [sp, #12]
 80089a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089ae:	9007      	str	r0, [sp, #28]
 80089b0:	4809      	ldr	r0, [pc, #36]	@ (80089d8 <siscanf+0x54>)
 80089b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089b6:	4632      	mov	r2, r6
 80089b8:	4623      	mov	r3, r4
 80089ba:	a902      	add	r1, sp, #8
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	950f      	str	r5, [sp, #60]	@ 0x3c
 80089c0:	9514      	str	r5, [sp, #80]	@ 0x50
 80089c2:	9401      	str	r4, [sp, #4]
 80089c4:	f000 fb0e 	bl	8008fe4 <__ssvfiscanf_r>
 80089c8:	b01d      	add	sp, #116	@ 0x74
 80089ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089ce:	b003      	add	sp, #12
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	080089dd 	.word	0x080089dd
 80089d8:	20000050 	.word	0x20000050

080089dc <__seofread>:
 80089dc:	2000      	movs	r0, #0
 80089de:	4770      	bx	lr

080089e0 <memset>:
 80089e0:	4603      	mov	r3, r0
 80089e2:	4402      	add	r2, r0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d100      	bne.n	80089ea <memset+0xa>
 80089e8:	4770      	bx	lr
 80089ea:	f803 1b01 	strb.w	r1, [r3], #1
 80089ee:	e7f9      	b.n	80089e4 <memset+0x4>

080089f0 <strncmp>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	b16a      	cbz	r2, 8008a10 <strncmp+0x20>
 80089f4:	3901      	subs	r1, #1
 80089f6:	1884      	adds	r4, r0, r2
 80089f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d103      	bne.n	8008a0c <strncmp+0x1c>
 8008a04:	42a0      	cmp	r0, r4
 8008a06:	d001      	beq.n	8008a0c <strncmp+0x1c>
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d1f5      	bne.n	80089f8 <strncmp+0x8>
 8008a0c:	1ad0      	subs	r0, r2, r3
 8008a0e:	bd10      	pop	{r4, pc}
 8008a10:	4610      	mov	r0, r2
 8008a12:	e7fc      	b.n	8008a0e <strncmp+0x1e>

08008a14 <strncpy>:
 8008a14:	4603      	mov	r3, r0
 8008a16:	b510      	push	{r4, lr}
 8008a18:	3901      	subs	r1, #1
 8008a1a:	b132      	cbz	r2, 8008a2a <strncpy+0x16>
 8008a1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a20:	3a01      	subs	r2, #1
 8008a22:	f803 4b01 	strb.w	r4, [r3], #1
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d1f7      	bne.n	8008a1a <strncpy+0x6>
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	441a      	add	r2, r3
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d100      	bne.n	8008a34 <strncpy+0x20>
 8008a32:	bd10      	pop	{r4, pc}
 8008a34:	f803 1b01 	strb.w	r1, [r3], #1
 8008a38:	e7f9      	b.n	8008a2e <strncpy+0x1a>
	...

08008a3c <__errno>:
 8008a3c:	4b01      	ldr	r3, [pc, #4]	@ (8008a44 <__errno+0x8>)
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000050 	.word	0x20000050

08008a48 <__libc_init_array>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	4d0c      	ldr	r5, [pc, #48]	@ (8008a80 <__libc_init_array+0x38>)
 8008a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8008a84 <__libc_init_array+0x3c>)
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	42a6      	cmp	r6, r4
 8008a56:	d109      	bne.n	8008a6c <__libc_init_array+0x24>
 8008a58:	f001 f872 	bl	8009b40 <_init>
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8008a88 <__libc_init_array+0x40>)
 8008a60:	4c0a      	ldr	r4, [pc, #40]	@ (8008a8c <__libc_init_array+0x44>)
 8008a62:	1b64      	subs	r4, r4, r5
 8008a64:	10a4      	asrs	r4, r4, #2
 8008a66:	42a6      	cmp	r6, r4
 8008a68:	d105      	bne.n	8008a76 <__libc_init_array+0x2e>
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a70:	4798      	blx	r3
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7ee      	b.n	8008a54 <__libc_init_array+0xc>
 8008a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7a:	4798      	blx	r3
 8008a7c:	3601      	adds	r6, #1
 8008a7e:	e7f2      	b.n	8008a66 <__libc_init_array+0x1e>
 8008a80:	0800a51c 	.word	0x0800a51c
 8008a84:	0800a51c 	.word	0x0800a51c
 8008a88:	0800a51c 	.word	0x0800a51c
 8008a8c:	0800a520 	.word	0x0800a520

08008a90 <__retarget_lock_acquire_recursive>:
 8008a90:	4770      	bx	lr

08008a92 <__retarget_lock_release_recursive>:
 8008a92:	4770      	bx	lr

08008a94 <_free_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4605      	mov	r5, r0
 8008a98:	2900      	cmp	r1, #0
 8008a9a:	d040      	beq.n	8008b1e <_free_r+0x8a>
 8008a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa0:	1f0c      	subs	r4, r1, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfb8      	it	lt
 8008aa6:	18e4      	addlt	r4, r4, r3
 8008aa8:	f000 f8de 	bl	8008c68 <__malloc_lock>
 8008aac:	4a1c      	ldr	r2, [pc, #112]	@ (8008b20 <_free_r+0x8c>)
 8008aae:	6813      	ldr	r3, [r2, #0]
 8008ab0:	b933      	cbnz	r3, 8008ac0 <_free_r+0x2c>
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	6014      	str	r4, [r2, #0]
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008abc:	f000 b8da 	b.w	8008c74 <__malloc_unlock>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d908      	bls.n	8008ad6 <_free_r+0x42>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	1821      	adds	r1, r4, r0
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf01      	itttt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	1809      	addeq	r1, r1, r0
 8008ad2:	6021      	streq	r1, [r4, #0]
 8008ad4:	e7ed      	b.n	8008ab2 <_free_r+0x1e>
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	b10b      	cbz	r3, 8008ae0 <_free_r+0x4c>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d9fa      	bls.n	8008ad6 <_free_r+0x42>
 8008ae0:	6811      	ldr	r1, [r2, #0]
 8008ae2:	1850      	adds	r0, r2, r1
 8008ae4:	42a0      	cmp	r0, r4
 8008ae6:	d10b      	bne.n	8008b00 <_free_r+0x6c>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	4401      	add	r1, r0
 8008aec:	1850      	adds	r0, r2, r1
 8008aee:	4283      	cmp	r3, r0
 8008af0:	6011      	str	r1, [r2, #0]
 8008af2:	d1e0      	bne.n	8008ab6 <_free_r+0x22>
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4408      	add	r0, r1
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	6053      	str	r3, [r2, #4]
 8008afe:	e7da      	b.n	8008ab6 <_free_r+0x22>
 8008b00:	d902      	bls.n	8008b08 <_free_r+0x74>
 8008b02:	230c      	movs	r3, #12
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	e7d6      	b.n	8008ab6 <_free_r+0x22>
 8008b08:	6820      	ldr	r0, [r4, #0]
 8008b0a:	1821      	adds	r1, r4, r0
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	bf01      	itttt	eq
 8008b10:	6819      	ldreq	r1, [r3, #0]
 8008b12:	685b      	ldreq	r3, [r3, #4]
 8008b14:	1809      	addeq	r1, r1, r0
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	6054      	str	r4, [r2, #4]
 8008b1c:	e7cb      	b.n	8008ab6 <_free_r+0x22>
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20000514 	.word	0x20000514

08008b24 <sbrk_aligned>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4e0f      	ldr	r6, [pc, #60]	@ (8008b64 <sbrk_aligned+0x40>)
 8008b28:	460c      	mov	r4, r1
 8008b2a:	6831      	ldr	r1, [r6, #0]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	b911      	cbnz	r1, 8008b36 <sbrk_aligned+0x12>
 8008b30:	f000 ff34 	bl	800999c <_sbrk_r>
 8008b34:	6030      	str	r0, [r6, #0]
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 ff2f 	bl	800999c <_sbrk_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d103      	bne.n	8008b4a <sbrk_aligned+0x26>
 8008b42:	f04f 34ff 	mov.w	r4, #4294967295
 8008b46:	4620      	mov	r0, r4
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	1cc4      	adds	r4, r0, #3
 8008b4c:	f024 0403 	bic.w	r4, r4, #3
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d0f8      	beq.n	8008b46 <sbrk_aligned+0x22>
 8008b54:	1a21      	subs	r1, r4, r0
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 ff20 	bl	800999c <_sbrk_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d1f2      	bne.n	8008b46 <sbrk_aligned+0x22>
 8008b60:	e7ef      	b.n	8008b42 <sbrk_aligned+0x1e>
 8008b62:	bf00      	nop
 8008b64:	20000510 	.word	0x20000510

08008b68 <_malloc_r>:
 8008b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b6c:	1ccd      	adds	r5, r1, #3
 8008b6e:	f025 0503 	bic.w	r5, r5, #3
 8008b72:	3508      	adds	r5, #8
 8008b74:	2d0c      	cmp	r5, #12
 8008b76:	bf38      	it	cc
 8008b78:	250c      	movcc	r5, #12
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	db01      	blt.n	8008b84 <_malloc_r+0x1c>
 8008b80:	42a9      	cmp	r1, r5
 8008b82:	d904      	bls.n	8008b8e <_malloc_r+0x26>
 8008b84:	230c      	movs	r3, #12
 8008b86:	6033      	str	r3, [r6, #0]
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c64 <_malloc_r+0xfc>
 8008b92:	f000 f869 	bl	8008c68 <__malloc_lock>
 8008b96:	f8d8 3000 	ldr.w	r3, [r8]
 8008b9a:	461c      	mov	r4, r3
 8008b9c:	bb44      	cbnz	r4, 8008bf0 <_malloc_r+0x88>
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7ff ffbf 	bl	8008b24 <sbrk_aligned>
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	4604      	mov	r4, r0
 8008baa:	d158      	bne.n	8008c5e <_malloc_r+0xf6>
 8008bac:	f8d8 4000 	ldr.w	r4, [r8]
 8008bb0:	4627      	mov	r7, r4
 8008bb2:	2f00      	cmp	r7, #0
 8008bb4:	d143      	bne.n	8008c3e <_malloc_r+0xd6>
 8008bb6:	2c00      	cmp	r4, #0
 8008bb8:	d04b      	beq.n	8008c52 <_malloc_r+0xea>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	eb04 0903 	add.w	r9, r4, r3
 8008bc4:	f000 feea 	bl	800999c <_sbrk_r>
 8008bc8:	4581      	cmp	r9, r0
 8008bca:	d142      	bne.n	8008c52 <_malloc_r+0xea>
 8008bcc:	6821      	ldr	r1, [r4, #0]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	1a6d      	subs	r5, r5, r1
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7ff ffa6 	bl	8008b24 <sbrk_aligned>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d03a      	beq.n	8008c52 <_malloc_r+0xea>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	442b      	add	r3, r5
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	f8d8 3000 	ldr.w	r3, [r8]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	bb62      	cbnz	r2, 8008c44 <_malloc_r+0xdc>
 8008bea:	f8c8 7000 	str.w	r7, [r8]
 8008bee:	e00f      	b.n	8008c10 <_malloc_r+0xa8>
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	1b52      	subs	r2, r2, r5
 8008bf4:	d420      	bmi.n	8008c38 <_malloc_r+0xd0>
 8008bf6:	2a0b      	cmp	r2, #11
 8008bf8:	d917      	bls.n	8008c2a <_malloc_r+0xc2>
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	6025      	str	r5, [r4, #0]
 8008c00:	bf18      	it	ne
 8008c02:	6059      	strne	r1, [r3, #4]
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	bf08      	it	eq
 8008c08:	f8c8 1000 	streq.w	r1, [r8]
 8008c0c:	5162      	str	r2, [r4, r5]
 8008c0e:	604b      	str	r3, [r1, #4]
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 f82f 	bl	8008c74 <__malloc_unlock>
 8008c16:	f104 000b 	add.w	r0, r4, #11
 8008c1a:	1d23      	adds	r3, r4, #4
 8008c1c:	f020 0007 	bic.w	r0, r0, #7
 8008c20:	1ac2      	subs	r2, r0, r3
 8008c22:	bf1c      	itt	ne
 8008c24:	1a1b      	subne	r3, r3, r0
 8008c26:	50a3      	strne	r3, [r4, r2]
 8008c28:	e7af      	b.n	8008b8a <_malloc_r+0x22>
 8008c2a:	6862      	ldr	r2, [r4, #4]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	bf0c      	ite	eq
 8008c30:	f8c8 2000 	streq.w	r2, [r8]
 8008c34:	605a      	strne	r2, [r3, #4]
 8008c36:	e7eb      	b.n	8008c10 <_malloc_r+0xa8>
 8008c38:	4623      	mov	r3, r4
 8008c3a:	6864      	ldr	r4, [r4, #4]
 8008c3c:	e7ae      	b.n	8008b9c <_malloc_r+0x34>
 8008c3e:	463c      	mov	r4, r7
 8008c40:	687f      	ldr	r7, [r7, #4]
 8008c42:	e7b6      	b.n	8008bb2 <_malloc_r+0x4a>
 8008c44:	461a      	mov	r2, r3
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d1fb      	bne.n	8008c44 <_malloc_r+0xdc>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6053      	str	r3, [r2, #4]
 8008c50:	e7de      	b.n	8008c10 <_malloc_r+0xa8>
 8008c52:	230c      	movs	r3, #12
 8008c54:	4630      	mov	r0, r6
 8008c56:	6033      	str	r3, [r6, #0]
 8008c58:	f000 f80c 	bl	8008c74 <__malloc_unlock>
 8008c5c:	e794      	b.n	8008b88 <_malloc_r+0x20>
 8008c5e:	6005      	str	r5, [r0, #0]
 8008c60:	e7d6      	b.n	8008c10 <_malloc_r+0xa8>
 8008c62:	bf00      	nop
 8008c64:	20000514 	.word	0x20000514

08008c68 <__malloc_lock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	@ (8008c70 <__malloc_lock+0x8>)
 8008c6a:	f7ff bf11 	b.w	8008a90 <__retarget_lock_acquire_recursive>
 8008c6e:	bf00      	nop
 8008c70:	2000050c 	.word	0x2000050c

08008c74 <__malloc_unlock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	@ (8008c7c <__malloc_unlock+0x8>)
 8008c76:	f7ff bf0c 	b.w	8008a92 <__retarget_lock_release_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	2000050c 	.word	0x2000050c

08008c80 <__ssputs_r>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	461f      	mov	r7, r3
 8008c86:	688e      	ldr	r6, [r1, #8]
 8008c88:	4682      	mov	sl, r0
 8008c8a:	42be      	cmp	r6, r7
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	4690      	mov	r8, r2
 8008c90:	680b      	ldr	r3, [r1, #0]
 8008c92:	d82d      	bhi.n	8008cf0 <__ssputs_r+0x70>
 8008c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c9c:	d026      	beq.n	8008cec <__ssputs_r+0x6c>
 8008c9e:	6965      	ldr	r5, [r4, #20]
 8008ca0:	6909      	ldr	r1, [r1, #16]
 8008ca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca6:	eba3 0901 	sub.w	r9, r3, r1
 8008caa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cae:	1c7b      	adds	r3, r7, #1
 8008cb0:	444b      	add	r3, r9
 8008cb2:	106d      	asrs	r5, r5, #1
 8008cb4:	429d      	cmp	r5, r3
 8008cb6:	bf38      	it	cc
 8008cb8:	461d      	movcc	r5, r3
 8008cba:	0553      	lsls	r3, r2, #21
 8008cbc:	d527      	bpl.n	8008d0e <__ssputs_r+0x8e>
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	f7ff ff52 	bl	8008b68 <_malloc_r>
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	b360      	cbz	r0, 8008d22 <__ssputs_r+0xa2>
 8008cc8:	464a      	mov	r2, r9
 8008cca:	6921      	ldr	r1, [r4, #16]
 8008ccc:	f000 fe84 	bl	80099d8 <memcpy>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	6126      	str	r6, [r4, #16]
 8008cde:	444e      	add	r6, r9
 8008ce0:	6026      	str	r6, [r4, #0]
 8008ce2:	463e      	mov	r6, r7
 8008ce4:	6165      	str	r5, [r4, #20]
 8008ce6:	eba5 0509 	sub.w	r5, r5, r9
 8008cea:	60a5      	str	r5, [r4, #8]
 8008cec:	42be      	cmp	r6, r7
 8008cee:	d900      	bls.n	8008cf2 <__ssputs_r+0x72>
 8008cf0:	463e      	mov	r6, r7
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	6820      	ldr	r0, [r4, #0]
 8008cf8:	f000 fe35 	bl	8009966 <memmove>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	4433      	add	r3, r6
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	462a      	mov	r2, r5
 8008d10:	f000 fe70 	bl	80099f4 <_realloc_r>
 8008d14:	4606      	mov	r6, r0
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d1e0      	bne.n	8008cdc <__ssputs_r+0x5c>
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	6921      	ldr	r1, [r4, #16]
 8008d1e:	f7ff feb9 	bl	8008a94 <_free_r>
 8008d22:	230c      	movs	r3, #12
 8008d24:	f8ca 3000 	str.w	r3, [sl]
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	e7e9      	b.n	8008d0a <__ssputs_r+0x8a>
	...

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	4607      	mov	r7, r0
 8008d42:	061b      	lsls	r3, r3, #24
 8008d44:	460d      	mov	r5, r1
 8008d46:	4614      	mov	r4, r2
 8008d48:	b09d      	sub	sp, #116	@ 0x74
 8008d4a:	d510      	bpl.n	8008d6e <_svfiprintf_r+0x36>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b973      	cbnz	r3, 8008d6e <_svfiprintf_r+0x36>
 8008d50:	2140      	movs	r1, #64	@ 0x40
 8008d52:	f7ff ff09 	bl	8008b68 <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b930      	cbnz	r0, 8008d6a <_svfiprintf_r+0x32>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	b01d      	add	sp, #116	@ 0x74
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	2340      	movs	r3, #64	@ 0x40
 8008d6c:	616b      	str	r3, [r5, #20]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d72:	2320      	movs	r3, #32
 8008d74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d78:	2330      	movs	r3, #48	@ 0x30
 8008d7a:	f04f 0901 	mov.w	r9, #1
 8008d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008f1c <_svfiprintf_r+0x1e4>
 8008d86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	469a      	mov	sl, r3
 8008d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d92:	b10a      	cbz	r2, 8008d98 <_svfiprintf_r+0x60>
 8008d94:	2a25      	cmp	r2, #37	@ 0x25
 8008d96:	d1f9      	bne.n	8008d8c <_svfiprintf_r+0x54>
 8008d98:	ebba 0b04 	subs.w	fp, sl, r4
 8008d9c:	d00b      	beq.n	8008db6 <_svfiprintf_r+0x7e>
 8008d9e:	465b      	mov	r3, fp
 8008da0:	4622      	mov	r2, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ff6b 	bl	8008c80 <__ssputs_r>
 8008daa:	3001      	adds	r0, #1
 8008dac:	f000 80a7 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db2:	445a      	add	r2, fp
 8008db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008db6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 809f 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dca:	f10a 0a01 	add.w	sl, sl, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dd8:	4654      	mov	r4, sl
 8008dda:	2205      	movs	r2, #5
 8008ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de0:	484e      	ldr	r0, [pc, #312]	@ (8008f1c <_svfiprintf_r+0x1e4>)
 8008de2:	f000 fdeb 	bl	80099bc <memchr>
 8008de6:	9a04      	ldr	r2, [sp, #16]
 8008de8:	b9d8      	cbnz	r0, 8008e22 <_svfiprintf_r+0xea>
 8008dea:	06d0      	lsls	r0, r2, #27
 8008dec:	bf44      	itt	mi
 8008dee:	2320      	movmi	r3, #32
 8008df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df4:	0711      	lsls	r1, r2, #28
 8008df6:	bf44      	itt	mi
 8008df8:	232b      	movmi	r3, #43	@ 0x2b
 8008dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e04:	d015      	beq.n	8008e32 <_svfiprintf_r+0xfa>
 8008e06:	4654      	mov	r4, sl
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f04f 0c0a 	mov.w	ip, #10
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	4621      	mov	r1, r4
 8008e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e16:	3b30      	subs	r3, #48	@ 0x30
 8008e18:	2b09      	cmp	r3, #9
 8008e1a:	d94b      	bls.n	8008eb4 <_svfiprintf_r+0x17c>
 8008e1c:	b1b0      	cbz	r0, 8008e4c <_svfiprintf_r+0x114>
 8008e1e:	9207      	str	r2, [sp, #28]
 8008e20:	e014      	b.n	8008e4c <_svfiprintf_r+0x114>
 8008e22:	eba0 0308 	sub.w	r3, r0, r8
 8008e26:	fa09 f303 	lsl.w	r3, r9, r3
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	46a2      	mov	sl, r4
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	e7d2      	b.n	8008dd8 <_svfiprintf_r+0xa0>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	1d19      	adds	r1, r3, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	9103      	str	r1, [sp, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfbb      	ittet	lt
 8008e3e:	425b      	neglt	r3, r3
 8008e40:	f042 0202 	orrlt.w	r2, r2, #2
 8008e44:	9307      	strge	r3, [sp, #28]
 8008e46:	9307      	strlt	r3, [sp, #28]
 8008e48:	bfb8      	it	lt
 8008e4a:	9204      	strlt	r2, [sp, #16]
 8008e4c:	7823      	ldrb	r3, [r4, #0]
 8008e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e50:	d10a      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e52:	7863      	ldrb	r3, [r4, #1]
 8008e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e56:	d132      	bne.n	8008ebe <_svfiprintf_r+0x186>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	3402      	adds	r4, #2
 8008e5c:	1d1a      	adds	r2, r3, #4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	9203      	str	r2, [sp, #12]
 8008e62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f20 <_svfiprintf_r+0x1e8>
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	4650      	mov	r0, sl
 8008e70:	7821      	ldrb	r1, [r4, #0]
 8008e72:	f000 fda3 	bl	80099bc <memchr>
 8008e76:	b138      	cbz	r0, 8008e88 <_svfiprintf_r+0x150>
 8008e78:	2240      	movs	r2, #64	@ 0x40
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	eba0 000a 	sub.w	r0, r0, sl
 8008e80:	4082      	lsls	r2, r0
 8008e82:	4313      	orrs	r3, r2
 8008e84:	3401      	adds	r4, #1
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	4825      	ldr	r0, [pc, #148]	@ (8008f24 <_svfiprintf_r+0x1ec>)
 8008e90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e94:	f000 fd92 	bl	80099bc <memchr>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d036      	beq.n	8008f0a <_svfiprintf_r+0x1d2>
 8008e9c:	4b22      	ldr	r3, [pc, #136]	@ (8008f28 <_svfiprintf_r+0x1f0>)
 8008e9e:	bb1b      	cbnz	r3, 8008ee8 <_svfiprintf_r+0x1b0>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eae:	4433      	add	r3, r6
 8008eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb2:	e76a      	b.n	8008d8a <_svfiprintf_r+0x52>
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebc:	e7a8      	b.n	8008e10 <_svfiprintf_r+0xd8>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	3401      	adds	r4, #1
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed0:	3a30      	subs	r2, #48	@ 0x30
 8008ed2:	2a09      	cmp	r2, #9
 8008ed4:	d903      	bls.n	8008ede <_svfiprintf_r+0x1a6>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0c6      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008eda:	9105      	str	r1, [sp, #20]
 8008edc:	e7c4      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee6:	e7f0      	b.n	8008eca <_svfiprintf_r+0x192>
 8008ee8:	ab03      	add	r3, sp, #12
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	462a      	mov	r2, r5
 8008eee:	4638      	mov	r0, r7
 8008ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8008f2c <_svfiprintf_r+0x1f4>)
 8008ef2:	a904      	add	r1, sp, #16
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	1c42      	adds	r2, r0, #1
 8008efa:	4606      	mov	r6, r0
 8008efc:	d1d6      	bne.n	8008eac <_svfiprintf_r+0x174>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af2d 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f08:	e72c      	b.n	8008d64 <_svfiprintf_r+0x2c>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4638      	mov	r0, r7
 8008f12:	4b06      	ldr	r3, [pc, #24]	@ (8008f2c <_svfiprintf_r+0x1f4>)
 8008f14:	a904      	add	r1, sp, #16
 8008f16:	f000 fa4b 	bl	80093b0 <_printf_i>
 8008f1a:	e7ed      	b.n	8008ef8 <_svfiprintf_r+0x1c0>
 8008f1c:	0800a4c3 	.word	0x0800a4c3
 8008f20:	0800a4c9 	.word	0x0800a4c9
 8008f24:	0800a4cd 	.word	0x0800a4cd
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	08008c81 	.word	0x08008c81

08008f30 <_sungetc_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	1c4b      	adds	r3, r1, #1
 8008f34:	4614      	mov	r4, r2
 8008f36:	d103      	bne.n	8008f40 <_sungetc_r+0x10>
 8008f38:	f04f 35ff 	mov.w	r5, #4294967295
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	8993      	ldrh	r3, [r2, #12]
 8008f42:	b2cd      	uxtb	r5, r1
 8008f44:	f023 0320 	bic.w	r3, r3, #32
 8008f48:	8193      	strh	r3, [r2, #12]
 8008f4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f4c:	6852      	ldr	r2, [r2, #4]
 8008f4e:	b18b      	cbz	r3, 8008f74 <_sungetc_r+0x44>
 8008f50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008f52:	4293      	cmp	r3, r2
 8008f54:	dd08      	ble.n	8008f68 <_sungetc_r+0x38>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	1e5a      	subs	r2, r3, #1
 8008f5a:	6022      	str	r2, [r4, #0]
 8008f5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	3301      	adds	r3, #1
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	e7e9      	b.n	8008f3c <_sungetc_r+0xc>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f000 fcc4 	bl	80098f6 <__submore>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0f1      	beq.n	8008f56 <_sungetc_r+0x26>
 8008f72:	e7e1      	b.n	8008f38 <_sungetc_r+0x8>
 8008f74:	6921      	ldr	r1, [r4, #16]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	b151      	cbz	r1, 8008f90 <_sungetc_r+0x60>
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	d208      	bcs.n	8008f90 <_sungetc_r+0x60>
 8008f7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f82:	42a9      	cmp	r1, r5
 8008f84:	d104      	bne.n	8008f90 <_sungetc_r+0x60>
 8008f86:	3b01      	subs	r3, #1
 8008f88:	3201      	adds	r2, #1
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	e7d5      	b.n	8008f3c <_sungetc_r+0xc>
 8008f90:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008f94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e7dc      	b.n	8008f64 <_sungetc_r+0x34>

08008faa <__ssrefill_r>:
 8008faa:	b510      	push	{r4, lr}
 8008fac:	460c      	mov	r4, r1
 8008fae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008fb0:	b169      	cbz	r1, 8008fce <__ssrefill_r+0x24>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d001      	beq.n	8008fbe <__ssrefill_r+0x14>
 8008fba:	f7ff fd6b 	bl	8008a94 <_free_r>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fc2:	6360      	str	r0, [r4, #52]	@ 0x34
 8008fc4:	6063      	str	r3, [r4, #4]
 8008fc6:	b113      	cbz	r3, 8008fce <__ssrefill_r+0x24>
 8008fc8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f043 0320 	orr.w	r3, r3, #32
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	e7f3      	b.n	8008fcc <__ssrefill_r+0x22>

08008fe4 <__ssvfiscanf_r>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	460c      	mov	r4, r1
 8008fea:	2100      	movs	r1, #0
 8008fec:	4606      	mov	r6, r0
 8008fee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008ff2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008ff6:	49ab      	ldr	r1, [pc, #684]	@ (80092a4 <__ssvfiscanf_r+0x2c0>)
 8008ff8:	f10d 0804 	add.w	r8, sp, #4
 8008ffc:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008ffe:	49aa      	ldr	r1, [pc, #680]	@ (80092a8 <__ssvfiscanf_r+0x2c4>)
 8009000:	4faa      	ldr	r7, [pc, #680]	@ (80092ac <__ssvfiscanf_r+0x2c8>)
 8009002:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009006:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	f892 9000 	ldrb.w	r9, [r2]
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	f000 8159 	beq.w	80092c8 <__ssvfiscanf_r+0x2e4>
 8009016:	f817 3009 	ldrb.w	r3, [r7, r9]
 800901a:	1c55      	adds	r5, r2, #1
 800901c:	f013 0308 	ands.w	r3, r3, #8
 8009020:	d019      	beq.n	8009056 <__ssvfiscanf_r+0x72>
 8009022:	6863      	ldr	r3, [r4, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd0f      	ble.n	8009048 <__ssvfiscanf_r+0x64>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	5cba      	ldrb	r2, [r7, r2]
 800902e:	0712      	lsls	r2, r2, #28
 8009030:	d401      	bmi.n	8009036 <__ssvfiscanf_r+0x52>
 8009032:	462a      	mov	r2, r5
 8009034:	e7e9      	b.n	800900a <__ssvfiscanf_r+0x26>
 8009036:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009038:	3301      	adds	r3, #1
 800903a:	3201      	adds	r2, #1
 800903c:	9245      	str	r2, [sp, #276]	@ 0x114
 800903e:	6862      	ldr	r2, [r4, #4]
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	3a01      	subs	r2, #1
 8009044:	6062      	str	r2, [r4, #4]
 8009046:	e7ec      	b.n	8009022 <__ssvfiscanf_r+0x3e>
 8009048:	4621      	mov	r1, r4
 800904a:	4630      	mov	r0, r6
 800904c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800904e:	4798      	blx	r3
 8009050:	2800      	cmp	r0, #0
 8009052:	d0e9      	beq.n	8009028 <__ssvfiscanf_r+0x44>
 8009054:	e7ed      	b.n	8009032 <__ssvfiscanf_r+0x4e>
 8009056:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800905a:	f040 8086 	bne.w	800916a <__ssvfiscanf_r+0x186>
 800905e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009060:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009062:	7853      	ldrb	r3, [r2, #1]
 8009064:	2b2a      	cmp	r3, #42	@ 0x2a
 8009066:	bf04      	itt	eq
 8009068:	2310      	moveq	r3, #16
 800906a:	1c95      	addeq	r5, r2, #2
 800906c:	f04f 020a 	mov.w	r2, #10
 8009070:	bf08      	it	eq
 8009072:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009074:	46aa      	mov	sl, r5
 8009076:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800907a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d91e      	bls.n	80090c0 <__ssvfiscanf_r+0xdc>
 8009082:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 80092b0 <__ssvfiscanf_r+0x2cc>
 8009086:	2203      	movs	r2, #3
 8009088:	4658      	mov	r0, fp
 800908a:	f000 fc97 	bl	80099bc <memchr>
 800908e:	b138      	cbz	r0, 80090a0 <__ssvfiscanf_r+0xbc>
 8009090:	2301      	movs	r3, #1
 8009092:	4655      	mov	r5, sl
 8009094:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009096:	eba0 000b 	sub.w	r0, r0, fp
 800909a:	4083      	lsls	r3, r0
 800909c:	4313      	orrs	r3, r2
 800909e:	9341      	str	r3, [sp, #260]	@ 0x104
 80090a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090a4:	2b78      	cmp	r3, #120	@ 0x78
 80090a6:	d806      	bhi.n	80090b6 <__ssvfiscanf_r+0xd2>
 80090a8:	2b57      	cmp	r3, #87	@ 0x57
 80090aa:	d810      	bhi.n	80090ce <__ssvfiscanf_r+0xea>
 80090ac:	2b25      	cmp	r3, #37	@ 0x25
 80090ae:	d05c      	beq.n	800916a <__ssvfiscanf_r+0x186>
 80090b0:	d856      	bhi.n	8009160 <__ssvfiscanf_r+0x17c>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d074      	beq.n	80091a0 <__ssvfiscanf_r+0x1bc>
 80090b6:	2303      	movs	r3, #3
 80090b8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80090ba:	230a      	movs	r3, #10
 80090bc:	9342      	str	r3, [sp, #264]	@ 0x108
 80090be:	e087      	b.n	80091d0 <__ssvfiscanf_r+0x1ec>
 80090c0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80090c2:	4655      	mov	r5, sl
 80090c4:	fb02 1103 	mla	r1, r2, r3, r1
 80090c8:	3930      	subs	r1, #48	@ 0x30
 80090ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 80090cc:	e7d2      	b.n	8009074 <__ssvfiscanf_r+0x90>
 80090ce:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80090d2:	2a20      	cmp	r2, #32
 80090d4:	d8ef      	bhi.n	80090b6 <__ssvfiscanf_r+0xd2>
 80090d6:	a101      	add	r1, pc, #4	@ (adr r1, 80090dc <__ssvfiscanf_r+0xf8>)
 80090d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090dc:	080091af 	.word	0x080091af
 80090e0:	080090b7 	.word	0x080090b7
 80090e4:	080090b7 	.word	0x080090b7
 80090e8:	08009209 	.word	0x08009209
 80090ec:	080090b7 	.word	0x080090b7
 80090f0:	080090b7 	.word	0x080090b7
 80090f4:	080090b7 	.word	0x080090b7
 80090f8:	080090b7 	.word	0x080090b7
 80090fc:	080090b7 	.word	0x080090b7
 8009100:	080090b7 	.word	0x080090b7
 8009104:	080090b7 	.word	0x080090b7
 8009108:	0800921f 	.word	0x0800921f
 800910c:	08009205 	.word	0x08009205
 8009110:	08009167 	.word	0x08009167
 8009114:	08009167 	.word	0x08009167
 8009118:	08009167 	.word	0x08009167
 800911c:	080090b7 	.word	0x080090b7
 8009120:	080091c1 	.word	0x080091c1
 8009124:	080090b7 	.word	0x080090b7
 8009128:	080090b7 	.word	0x080090b7
 800912c:	080090b7 	.word	0x080090b7
 8009130:	080090b7 	.word	0x080090b7
 8009134:	0800922f 	.word	0x0800922f
 8009138:	080091c9 	.word	0x080091c9
 800913c:	080091a7 	.word	0x080091a7
 8009140:	080090b7 	.word	0x080090b7
 8009144:	080090b7 	.word	0x080090b7
 8009148:	0800922b 	.word	0x0800922b
 800914c:	080090b7 	.word	0x080090b7
 8009150:	08009205 	.word	0x08009205
 8009154:	080090b7 	.word	0x080090b7
 8009158:	080090b7 	.word	0x080090b7
 800915c:	080091af 	.word	0x080091af
 8009160:	3b45      	subs	r3, #69	@ 0x45
 8009162:	2b02      	cmp	r3, #2
 8009164:	d8a7      	bhi.n	80090b6 <__ssvfiscanf_r+0xd2>
 8009166:	2305      	movs	r3, #5
 8009168:	e031      	b.n	80091ce <__ssvfiscanf_r+0x1ea>
 800916a:	6863      	ldr	r3, [r4, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd0d      	ble.n	800918c <__ssvfiscanf_r+0x1a8>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	454a      	cmp	r2, r9
 8009176:	f040 80a7 	bne.w	80092c8 <__ssvfiscanf_r+0x2e4>
 800917a:	3301      	adds	r3, #1
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009182:	3a01      	subs	r2, #1
 8009184:	3301      	adds	r3, #1
 8009186:	6062      	str	r2, [r4, #4]
 8009188:	9345      	str	r3, [sp, #276]	@ 0x114
 800918a:	e752      	b.n	8009032 <__ssvfiscanf_r+0x4e>
 800918c:	4621      	mov	r1, r4
 800918e:	4630      	mov	r0, r6
 8009190:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009192:	4798      	blx	r3
 8009194:	2800      	cmp	r0, #0
 8009196:	d0eb      	beq.n	8009170 <__ssvfiscanf_r+0x18c>
 8009198:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 808c 	bne.w	80092b8 <__ssvfiscanf_r+0x2d4>
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	e08c      	b.n	80092c0 <__ssvfiscanf_r+0x2dc>
 80091a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80091a8:	f042 0220 	orr.w	r2, r2, #32
 80091ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80091ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80091b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091b4:	9241      	str	r2, [sp, #260]	@ 0x104
 80091b6:	2210      	movs	r2, #16
 80091b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80091ba:	9242      	str	r2, [sp, #264]	@ 0x108
 80091bc:	d902      	bls.n	80091c4 <__ssvfiscanf_r+0x1e0>
 80091be:	e005      	b.n	80091cc <__ssvfiscanf_r+0x1e8>
 80091c0:	2300      	movs	r3, #0
 80091c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80091c4:	2303      	movs	r3, #3
 80091c6:	e002      	b.n	80091ce <__ssvfiscanf_r+0x1ea>
 80091c8:	2308      	movs	r3, #8
 80091ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80091cc:	2304      	movs	r3, #4
 80091ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd39      	ble.n	800924a <__ssvfiscanf_r+0x266>
 80091d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80091d8:	0659      	lsls	r1, r3, #25
 80091da:	d404      	bmi.n	80091e6 <__ssvfiscanf_r+0x202>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	5cba      	ldrb	r2, [r7, r2]
 80091e2:	0712      	lsls	r2, r2, #28
 80091e4:	d438      	bmi.n	8009258 <__ssvfiscanf_r+0x274>
 80091e6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	dc47      	bgt.n	800927c <__ssvfiscanf_r+0x298>
 80091ec:	466b      	mov	r3, sp
 80091ee:	4622      	mov	r2, r4
 80091f0:	4630      	mov	r0, r6
 80091f2:	a941      	add	r1, sp, #260	@ 0x104
 80091f4:	f000 f9fa 	bl	80095ec <_scanf_chars>
 80091f8:	2801      	cmp	r0, #1
 80091fa:	d065      	beq.n	80092c8 <__ssvfiscanf_r+0x2e4>
 80091fc:	2802      	cmp	r0, #2
 80091fe:	f47f af18 	bne.w	8009032 <__ssvfiscanf_r+0x4e>
 8009202:	e7c9      	b.n	8009198 <__ssvfiscanf_r+0x1b4>
 8009204:	220a      	movs	r2, #10
 8009206:	e7d7      	b.n	80091b8 <__ssvfiscanf_r+0x1d4>
 8009208:	4629      	mov	r1, r5
 800920a:	4640      	mov	r0, r8
 800920c:	f000 fb3a 	bl	8009884 <__sccl>
 8009210:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009212:	4605      	mov	r5, r0
 8009214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009218:	9341      	str	r3, [sp, #260]	@ 0x104
 800921a:	2301      	movs	r3, #1
 800921c:	e7d7      	b.n	80091ce <__ssvfiscanf_r+0x1ea>
 800921e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009224:	9341      	str	r3, [sp, #260]	@ 0x104
 8009226:	2300      	movs	r3, #0
 8009228:	e7d1      	b.n	80091ce <__ssvfiscanf_r+0x1ea>
 800922a:	2302      	movs	r3, #2
 800922c:	e7cf      	b.n	80091ce <__ssvfiscanf_r+0x1ea>
 800922e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009230:	06c3      	lsls	r3, r0, #27
 8009232:	f53f aefe 	bmi.w	8009032 <__ssvfiscanf_r+0x4e>
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800923a:	1d19      	adds	r1, r3, #4
 800923c:	9100      	str	r1, [sp, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	07c0      	lsls	r0, r0, #31
 8009242:	bf4c      	ite	mi
 8009244:	801a      	strhmi	r2, [r3, #0]
 8009246:	601a      	strpl	r2, [r3, #0]
 8009248:	e6f3      	b.n	8009032 <__ssvfiscanf_r+0x4e>
 800924a:	4621      	mov	r1, r4
 800924c:	4630      	mov	r0, r6
 800924e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009250:	4798      	blx	r3
 8009252:	2800      	cmp	r0, #0
 8009254:	d0bf      	beq.n	80091d6 <__ssvfiscanf_r+0x1f2>
 8009256:	e79f      	b.n	8009198 <__ssvfiscanf_r+0x1b4>
 8009258:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800925a:	3201      	adds	r2, #1
 800925c:	9245      	str	r2, [sp, #276]	@ 0x114
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	3a01      	subs	r2, #1
 8009262:	2a00      	cmp	r2, #0
 8009264:	6062      	str	r2, [r4, #4]
 8009266:	dd02      	ble.n	800926e <__ssvfiscanf_r+0x28a>
 8009268:	3301      	adds	r3, #1
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	e7b6      	b.n	80091dc <__ssvfiscanf_r+0x1f8>
 800926e:	4621      	mov	r1, r4
 8009270:	4630      	mov	r0, r6
 8009272:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009274:	4798      	blx	r3
 8009276:	2800      	cmp	r0, #0
 8009278:	d0b0      	beq.n	80091dc <__ssvfiscanf_r+0x1f8>
 800927a:	e78d      	b.n	8009198 <__ssvfiscanf_r+0x1b4>
 800927c:	2b04      	cmp	r3, #4
 800927e:	dc06      	bgt.n	800928e <__ssvfiscanf_r+0x2aa>
 8009280:	466b      	mov	r3, sp
 8009282:	4622      	mov	r2, r4
 8009284:	4630      	mov	r0, r6
 8009286:	a941      	add	r1, sp, #260	@ 0x104
 8009288:	f000 fa0a 	bl	80096a0 <_scanf_i>
 800928c:	e7b4      	b.n	80091f8 <__ssvfiscanf_r+0x214>
 800928e:	4b09      	ldr	r3, [pc, #36]	@ (80092b4 <__ssvfiscanf_r+0x2d0>)
 8009290:	2b00      	cmp	r3, #0
 8009292:	f43f aece 	beq.w	8009032 <__ssvfiscanf_r+0x4e>
 8009296:	466b      	mov	r3, sp
 8009298:	4622      	mov	r2, r4
 800929a:	4630      	mov	r0, r6
 800929c:	a941      	add	r1, sp, #260	@ 0x104
 800929e:	f3af 8000 	nop.w
 80092a2:	e7a9      	b.n	80091f8 <__ssvfiscanf_r+0x214>
 80092a4:	08008f31 	.word	0x08008f31
 80092a8:	08008fab 	.word	0x08008fab
 80092ac:	0800a3c3 	.word	0x0800a3c3
 80092b0:	0800a4c9 	.word	0x0800a4c9
 80092b4:	00000000 	.word	0x00000000
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	065b      	lsls	r3, r3, #25
 80092bc:	f53f af70 	bmi.w	80091a0 <__ssvfiscanf_r+0x1bc>
 80092c0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80092ca:	e7f9      	b.n	80092c0 <__ssvfiscanf_r+0x2dc>

080092cc <_printf_common>:
 80092cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	4616      	mov	r6, r2
 80092d2:	4698      	mov	r8, r3
 80092d4:	688a      	ldr	r2, [r1, #8]
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	4607      	mov	r7, r0
 80092da:	4293      	cmp	r3, r2
 80092dc:	bfb8      	it	lt
 80092de:	4613      	movlt	r3, r2
 80092e0:	6033      	str	r3, [r6, #0]
 80092e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092e6:	460c      	mov	r4, r1
 80092e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092ec:	b10a      	cbz	r2, 80092f2 <_printf_common+0x26>
 80092ee:	3301      	adds	r3, #1
 80092f0:	6033      	str	r3, [r6, #0]
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	0699      	lsls	r1, r3, #26
 80092f6:	bf42      	ittt	mi
 80092f8:	6833      	ldrmi	r3, [r6, #0]
 80092fa:	3302      	addmi	r3, #2
 80092fc:	6033      	strmi	r3, [r6, #0]
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	f015 0506 	ands.w	r5, r5, #6
 8009304:	d106      	bne.n	8009314 <_printf_common+0x48>
 8009306:	f104 0a19 	add.w	sl, r4, #25
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	6832      	ldr	r2, [r6, #0]
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	42ab      	cmp	r3, r5
 8009312:	dc2b      	bgt.n	800936c <_printf_common+0xa0>
 8009314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	3b00      	subs	r3, #0
 800931c:	bf18      	it	ne
 800931e:	2301      	movne	r3, #1
 8009320:	0692      	lsls	r2, r2, #26
 8009322:	d430      	bmi.n	8009386 <_printf_common+0xba>
 8009324:	4641      	mov	r1, r8
 8009326:	4638      	mov	r0, r7
 8009328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800932c:	47c8      	blx	r9
 800932e:	3001      	adds	r0, #1
 8009330:	d023      	beq.n	800937a <_printf_common+0xae>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	6922      	ldr	r2, [r4, #16]
 8009336:	f003 0306 	and.w	r3, r3, #6
 800933a:	2b04      	cmp	r3, #4
 800933c:	bf14      	ite	ne
 800933e:	2500      	movne	r5, #0
 8009340:	6833      	ldreq	r3, [r6, #0]
 8009342:	f04f 0600 	mov.w	r6, #0
 8009346:	bf08      	it	eq
 8009348:	68e5      	ldreq	r5, [r4, #12]
 800934a:	f104 041a 	add.w	r4, r4, #26
 800934e:	bf08      	it	eq
 8009350:	1aed      	subeq	r5, r5, r3
 8009352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009356:	bf08      	it	eq
 8009358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800935c:	4293      	cmp	r3, r2
 800935e:	bfc4      	itt	gt
 8009360:	1a9b      	subgt	r3, r3, r2
 8009362:	18ed      	addgt	r5, r5, r3
 8009364:	42b5      	cmp	r5, r6
 8009366:	d11a      	bne.n	800939e <_printf_common+0xd2>
 8009368:	2000      	movs	r0, #0
 800936a:	e008      	b.n	800937e <_printf_common+0xb2>
 800936c:	2301      	movs	r3, #1
 800936e:	4652      	mov	r2, sl
 8009370:	4641      	mov	r1, r8
 8009372:	4638      	mov	r0, r7
 8009374:	47c8      	blx	r9
 8009376:	3001      	adds	r0, #1
 8009378:	d103      	bne.n	8009382 <_printf_common+0xb6>
 800937a:	f04f 30ff 	mov.w	r0, #4294967295
 800937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009382:	3501      	adds	r5, #1
 8009384:	e7c1      	b.n	800930a <_printf_common+0x3e>
 8009386:	2030      	movs	r0, #48	@ 0x30
 8009388:	18e1      	adds	r1, r4, r3
 800938a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009394:	4422      	add	r2, r4
 8009396:	3302      	adds	r3, #2
 8009398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800939c:	e7c2      	b.n	8009324 <_printf_common+0x58>
 800939e:	2301      	movs	r3, #1
 80093a0:	4622      	mov	r2, r4
 80093a2:	4641      	mov	r1, r8
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c8      	blx	r9
 80093a8:	3001      	adds	r0, #1
 80093aa:	d0e6      	beq.n	800937a <_printf_common+0xae>
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7d9      	b.n	8009364 <_printf_common+0x98>

080093b0 <_printf_i>:
 80093b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b4:	7e0f      	ldrb	r7, [r1, #24]
 80093b6:	4691      	mov	r9, r2
 80093b8:	2f78      	cmp	r7, #120	@ 0x78
 80093ba:	4680      	mov	r8, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	469a      	mov	sl, r3
 80093c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093c6:	d807      	bhi.n	80093d8 <_printf_i+0x28>
 80093c8:	2f62      	cmp	r7, #98	@ 0x62
 80093ca:	d80a      	bhi.n	80093e2 <_printf_i+0x32>
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	f000 80d1 	beq.w	8009574 <_printf_i+0x1c4>
 80093d2:	2f58      	cmp	r7, #88	@ 0x58
 80093d4:	f000 80b8 	beq.w	8009548 <_printf_i+0x198>
 80093d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093e0:	e03a      	b.n	8009458 <_printf_i+0xa8>
 80093e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093e6:	2b15      	cmp	r3, #21
 80093e8:	d8f6      	bhi.n	80093d8 <_printf_i+0x28>
 80093ea:	a101      	add	r1, pc, #4	@ (adr r1, 80093f0 <_printf_i+0x40>)
 80093ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093f0:	08009449 	.word	0x08009449
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	080093d9 	.word	0x080093d9
 80093fc:	080093d9 	.word	0x080093d9
 8009400:	080093d9 	.word	0x080093d9
 8009404:	080093d9 	.word	0x080093d9
 8009408:	0800945d 	.word	0x0800945d
 800940c:	080093d9 	.word	0x080093d9
 8009410:	080093d9 	.word	0x080093d9
 8009414:	080093d9 	.word	0x080093d9
 8009418:	080093d9 	.word	0x080093d9
 800941c:	0800955b 	.word	0x0800955b
 8009420:	08009487 	.word	0x08009487
 8009424:	08009515 	.word	0x08009515
 8009428:	080093d9 	.word	0x080093d9
 800942c:	080093d9 	.word	0x080093d9
 8009430:	0800957d 	.word	0x0800957d
 8009434:	080093d9 	.word	0x080093d9
 8009438:	08009487 	.word	0x08009487
 800943c:	080093d9 	.word	0x080093d9
 8009440:	080093d9 	.word	0x080093d9
 8009444:	0800951d 	.word	0x0800951d
 8009448:	6833      	ldr	r3, [r6, #0]
 800944a:	1d1a      	adds	r2, r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6032      	str	r2, [r6, #0]
 8009450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009458:	2301      	movs	r3, #1
 800945a:	e09c      	b.n	8009596 <_printf_i+0x1e6>
 800945c:	6833      	ldr	r3, [r6, #0]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	6031      	str	r1, [r6, #0]
 8009464:	0606      	lsls	r6, r0, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xbc>
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	e003      	b.n	8009474 <_printf_i+0xc4>
 800946c:	0645      	lsls	r5, r0, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xb8>
 8009470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009474:	2d00      	cmp	r5, #0
 8009476:	da03      	bge.n	8009480 <_printf_i+0xd0>
 8009478:	232d      	movs	r3, #45	@ 0x2d
 800947a:	426d      	negs	r5, r5
 800947c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009480:	230a      	movs	r3, #10
 8009482:	4858      	ldr	r0, [pc, #352]	@ (80095e4 <_printf_i+0x234>)
 8009484:	e011      	b.n	80094aa <_printf_i+0xfa>
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	0608      	lsls	r0, r1, #24
 800948c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009490:	d402      	bmi.n	8009498 <_printf_i+0xe8>
 8009492:	0649      	lsls	r1, r1, #25
 8009494:	bf48      	it	mi
 8009496:	b2ad      	uxthmi	r5, r5
 8009498:	2f6f      	cmp	r7, #111	@ 0x6f
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	bf14      	ite	ne
 800949e:	230a      	movne	r3, #10
 80094a0:	2308      	moveq	r3, #8
 80094a2:	4850      	ldr	r0, [pc, #320]	@ (80095e4 <_printf_i+0x234>)
 80094a4:	2100      	movs	r1, #0
 80094a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094aa:	6866      	ldr	r6, [r4, #4]
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	60a6      	str	r6, [r4, #8]
 80094b0:	db05      	blt.n	80094be <_printf_i+0x10e>
 80094b2:	6821      	ldr	r1, [r4, #0]
 80094b4:	432e      	orrs	r6, r5
 80094b6:	f021 0104 	bic.w	r1, r1, #4
 80094ba:	6021      	str	r1, [r4, #0]
 80094bc:	d04b      	beq.n	8009556 <_printf_i+0x1a6>
 80094be:	4616      	mov	r6, r2
 80094c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c4:	fb03 5711 	mls	r7, r3, r1, r5
 80094c8:	5dc7      	ldrb	r7, [r0, r7]
 80094ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094ce:	462f      	mov	r7, r5
 80094d0:	42bb      	cmp	r3, r7
 80094d2:	460d      	mov	r5, r1
 80094d4:	d9f4      	bls.n	80094c0 <_printf_i+0x110>
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	d10b      	bne.n	80094f2 <_printf_i+0x142>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	07df      	lsls	r7, r3, #31
 80094de:	d508      	bpl.n	80094f2 <_printf_i+0x142>
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	6861      	ldr	r1, [r4, #4]
 80094e4:	4299      	cmp	r1, r3
 80094e6:	bfde      	ittt	le
 80094e8:	2330      	movle	r3, #48	@ 0x30
 80094ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094f2:	1b92      	subs	r2, r2, r6
 80094f4:	6122      	str	r2, [r4, #16]
 80094f6:	464b      	mov	r3, r9
 80094f8:	4621      	mov	r1, r4
 80094fa:	4640      	mov	r0, r8
 80094fc:	f8cd a000 	str.w	sl, [sp]
 8009500:	aa03      	add	r2, sp, #12
 8009502:	f7ff fee3 	bl	80092cc <_printf_common>
 8009506:	3001      	adds	r0, #1
 8009508:	d14a      	bne.n	80095a0 <_printf_i+0x1f0>
 800950a:	f04f 30ff 	mov.w	r0, #4294967295
 800950e:	b004      	add	sp, #16
 8009510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	f043 0320 	orr.w	r3, r3, #32
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	2778      	movs	r7, #120	@ 0x78
 800951e:	4832      	ldr	r0, [pc, #200]	@ (80095e8 <_printf_i+0x238>)
 8009520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	6831      	ldr	r1, [r6, #0]
 8009528:	061f      	lsls	r7, r3, #24
 800952a:	f851 5b04 	ldr.w	r5, [r1], #4
 800952e:	d402      	bmi.n	8009536 <_printf_i+0x186>
 8009530:	065f      	lsls	r7, r3, #25
 8009532:	bf48      	it	mi
 8009534:	b2ad      	uxthmi	r5, r5
 8009536:	6031      	str	r1, [r6, #0]
 8009538:	07d9      	lsls	r1, r3, #31
 800953a:	bf44      	itt	mi
 800953c:	f043 0320 	orrmi.w	r3, r3, #32
 8009540:	6023      	strmi	r3, [r4, #0]
 8009542:	b11d      	cbz	r5, 800954c <_printf_i+0x19c>
 8009544:	2310      	movs	r3, #16
 8009546:	e7ad      	b.n	80094a4 <_printf_i+0xf4>
 8009548:	4826      	ldr	r0, [pc, #152]	@ (80095e4 <_printf_i+0x234>)
 800954a:	e7e9      	b.n	8009520 <_printf_i+0x170>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	f023 0320 	bic.w	r3, r3, #32
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	e7f6      	b.n	8009544 <_printf_i+0x194>
 8009556:	4616      	mov	r6, r2
 8009558:	e7bd      	b.n	80094d6 <_printf_i+0x126>
 800955a:	6833      	ldr	r3, [r6, #0]
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	1d18      	adds	r0, r3, #4
 8009560:	6961      	ldr	r1, [r4, #20]
 8009562:	6030      	str	r0, [r6, #0]
 8009564:	062e      	lsls	r6, r5, #24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	d501      	bpl.n	800956e <_printf_i+0x1be>
 800956a:	6019      	str	r1, [r3, #0]
 800956c:	e002      	b.n	8009574 <_printf_i+0x1c4>
 800956e:	0668      	lsls	r0, r5, #25
 8009570:	d5fb      	bpl.n	800956a <_printf_i+0x1ba>
 8009572:	8019      	strh	r1, [r3, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	4616      	mov	r6, r2
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	e7bc      	b.n	80094f6 <_printf_i+0x146>
 800957c:	6833      	ldr	r3, [r6, #0]
 800957e:	2100      	movs	r1, #0
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	6032      	str	r2, [r6, #0]
 8009584:	681e      	ldr	r6, [r3, #0]
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fa17 	bl	80099bc <memchr>
 800958e:	b108      	cbz	r0, 8009594 <_printf_i+0x1e4>
 8009590:	1b80      	subs	r0, r0, r6
 8009592:	6060      	str	r0, [r4, #4]
 8009594:	6863      	ldr	r3, [r4, #4]
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	2300      	movs	r3, #0
 800959a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800959e:	e7aa      	b.n	80094f6 <_printf_i+0x146>
 80095a0:	4632      	mov	r2, r6
 80095a2:	4649      	mov	r1, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	47d0      	blx	sl
 80095aa:	3001      	adds	r0, #1
 80095ac:	d0ad      	beq.n	800950a <_printf_i+0x15a>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	079b      	lsls	r3, r3, #30
 80095b2:	d413      	bmi.n	80095dc <_printf_i+0x22c>
 80095b4:	68e0      	ldr	r0, [r4, #12]
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	4298      	cmp	r0, r3
 80095ba:	bfb8      	it	lt
 80095bc:	4618      	movlt	r0, r3
 80095be:	e7a6      	b.n	800950e <_printf_i+0x15e>
 80095c0:	2301      	movs	r3, #1
 80095c2:	4632      	mov	r2, r6
 80095c4:	4649      	mov	r1, r9
 80095c6:	4640      	mov	r0, r8
 80095c8:	47d0      	blx	sl
 80095ca:	3001      	adds	r0, #1
 80095cc:	d09d      	beq.n	800950a <_printf_i+0x15a>
 80095ce:	3501      	adds	r5, #1
 80095d0:	68e3      	ldr	r3, [r4, #12]
 80095d2:	9903      	ldr	r1, [sp, #12]
 80095d4:	1a5b      	subs	r3, r3, r1
 80095d6:	42ab      	cmp	r3, r5
 80095d8:	dcf2      	bgt.n	80095c0 <_printf_i+0x210>
 80095da:	e7eb      	b.n	80095b4 <_printf_i+0x204>
 80095dc:	2500      	movs	r5, #0
 80095de:	f104 0619 	add.w	r6, r4, #25
 80095e2:	e7f5      	b.n	80095d0 <_printf_i+0x220>
 80095e4:	0800a4d4 	.word	0x0800a4d4
 80095e8:	0800a4e5 	.word	0x0800a4e5

080095ec <_scanf_chars>:
 80095ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f0:	4615      	mov	r5, r2
 80095f2:	688a      	ldr	r2, [r1, #8]
 80095f4:	4680      	mov	r8, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b932      	cbnz	r2, 8009608 <_scanf_chars+0x1c>
 80095fa:	698a      	ldr	r2, [r1, #24]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	bf14      	ite	ne
 8009600:	f04f 32ff 	movne.w	r2, #4294967295
 8009604:	2201      	moveq	r2, #1
 8009606:	608a      	str	r2, [r1, #8]
 8009608:	2700      	movs	r7, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800969c <_scanf_chars+0xb0>
 8009610:	06d1      	lsls	r1, r2, #27
 8009612:	bf5f      	itttt	pl
 8009614:	681a      	ldrpl	r2, [r3, #0]
 8009616:	1d11      	addpl	r1, r2, #4
 8009618:	6019      	strpl	r1, [r3, #0]
 800961a:	6816      	ldrpl	r6, [r2, #0]
 800961c:	69a0      	ldr	r0, [r4, #24]
 800961e:	b188      	cbz	r0, 8009644 <_scanf_chars+0x58>
 8009620:	2801      	cmp	r0, #1
 8009622:	d107      	bne.n	8009634 <_scanf_chars+0x48>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	781a      	ldrb	r2, [r3, #0]
 8009628:	6963      	ldr	r3, [r4, #20]
 800962a:	5c9b      	ldrb	r3, [r3, r2]
 800962c:	b953      	cbnz	r3, 8009644 <_scanf_chars+0x58>
 800962e:	2f00      	cmp	r7, #0
 8009630:	d031      	beq.n	8009696 <_scanf_chars+0xaa>
 8009632:	e022      	b.n	800967a <_scanf_chars+0x8e>
 8009634:	2802      	cmp	r0, #2
 8009636:	d120      	bne.n	800967a <_scanf_chars+0x8e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009640:	071b      	lsls	r3, r3, #28
 8009642:	d41a      	bmi.n	800967a <_scanf_chars+0x8e>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	3701      	adds	r7, #1
 8009648:	06da      	lsls	r2, r3, #27
 800964a:	bf5e      	ittt	pl
 800964c:	682b      	ldrpl	r3, [r5, #0]
 800964e:	781b      	ldrbpl	r3, [r3, #0]
 8009650:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009654:	682a      	ldr	r2, [r5, #0]
 8009656:	686b      	ldr	r3, [r5, #4]
 8009658:	3201      	adds	r2, #1
 800965a:	602a      	str	r2, [r5, #0]
 800965c:	68a2      	ldr	r2, [r4, #8]
 800965e:	3b01      	subs	r3, #1
 8009660:	3a01      	subs	r2, #1
 8009662:	606b      	str	r3, [r5, #4]
 8009664:	60a2      	str	r2, [r4, #8]
 8009666:	b142      	cbz	r2, 800967a <_scanf_chars+0x8e>
 8009668:	2b00      	cmp	r3, #0
 800966a:	dcd7      	bgt.n	800961c <_scanf_chars+0x30>
 800966c:	4629      	mov	r1, r5
 800966e:	4640      	mov	r0, r8
 8009670:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009674:	4798      	blx	r3
 8009676:	2800      	cmp	r0, #0
 8009678:	d0d0      	beq.n	800961c <_scanf_chars+0x30>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	f013 0310 	ands.w	r3, r3, #16
 8009680:	d105      	bne.n	800968e <_scanf_chars+0xa2>
 8009682:	68e2      	ldr	r2, [r4, #12]
 8009684:	3201      	adds	r2, #1
 8009686:	60e2      	str	r2, [r4, #12]
 8009688:	69a2      	ldr	r2, [r4, #24]
 800968a:	b102      	cbz	r2, 800968e <_scanf_chars+0xa2>
 800968c:	7033      	strb	r3, [r6, #0]
 800968e:	2000      	movs	r0, #0
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	443b      	add	r3, r7
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969a:	bf00      	nop
 800969c:	0800a3c3 	.word	0x0800a3c3

080096a0 <_scanf_i>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	460c      	mov	r4, r1
 80096a6:	4698      	mov	r8, r3
 80096a8:	4b72      	ldr	r3, [pc, #456]	@ (8009874 <_scanf_i+0x1d4>)
 80096aa:	b087      	sub	sp, #28
 80096ac:	4682      	mov	sl, r0
 80096ae:	4616      	mov	r6, r2
 80096b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096b4:	ab03      	add	r3, sp, #12
 80096b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009878 <_scanf_i+0x1d8>)
 80096bc:	69a1      	ldr	r1, [r4, #24]
 80096be:	4a6f      	ldr	r2, [pc, #444]	@ (800987c <_scanf_i+0x1dc>)
 80096c0:	4627      	mov	r7, r4
 80096c2:	2903      	cmp	r1, #3
 80096c4:	bf08      	it	eq
 80096c6:	461a      	moveq	r2, r3
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	9201      	str	r2, [sp, #4]
 80096cc:	1e5a      	subs	r2, r3, #1
 80096ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80096d2:	bf81      	itttt	hi
 80096d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096d8:	eb03 0905 	addhi.w	r9, r3, r5
 80096dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096e0:	60a3      	strhi	r3, [r4, #8]
 80096e2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80096e6:	bf98      	it	ls
 80096e8:	f04f 0900 	movls.w	r9, #0
 80096ec:	463d      	mov	r5, r7
 80096ee:	f04f 0b00 	mov.w	fp, #0
 80096f2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	6831      	ldr	r1, [r6, #0]
 80096fa:	ab03      	add	r3, sp, #12
 80096fc:	2202      	movs	r2, #2
 80096fe:	7809      	ldrb	r1, [r1, #0]
 8009700:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009704:	f000 f95a 	bl	80099bc <memchr>
 8009708:	b328      	cbz	r0, 8009756 <_scanf_i+0xb6>
 800970a:	f1bb 0f01 	cmp.w	fp, #1
 800970e:	d159      	bne.n	80097c4 <_scanf_i+0x124>
 8009710:	6862      	ldr	r2, [r4, #4]
 8009712:	b92a      	cbnz	r2, 8009720 <_scanf_i+0x80>
 8009714:	2108      	movs	r1, #8
 8009716:	6822      	ldr	r2, [r4, #0]
 8009718:	6061      	str	r1, [r4, #4]
 800971a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	68a2      	ldr	r2, [r4, #8]
 800972a:	1e51      	subs	r1, r2, #1
 800972c:	60a1      	str	r1, [r4, #8]
 800972e:	b192      	cbz	r2, 8009756 <_scanf_i+0xb6>
 8009730:	6832      	ldr	r2, [r6, #0]
 8009732:	1c51      	adds	r1, r2, #1
 8009734:	6031      	str	r1, [r6, #0]
 8009736:	7812      	ldrb	r2, [r2, #0]
 8009738:	f805 2b01 	strb.w	r2, [r5], #1
 800973c:	6872      	ldr	r2, [r6, #4]
 800973e:	3a01      	subs	r2, #1
 8009740:	2a00      	cmp	r2, #0
 8009742:	6072      	str	r2, [r6, #4]
 8009744:	dc07      	bgt.n	8009756 <_scanf_i+0xb6>
 8009746:	4631      	mov	r1, r6
 8009748:	4650      	mov	r0, sl
 800974a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800974e:	4790      	blx	r2
 8009750:	2800      	cmp	r0, #0
 8009752:	f040 8085 	bne.w	8009860 <_scanf_i+0x1c0>
 8009756:	f10b 0b01 	add.w	fp, fp, #1
 800975a:	f1bb 0f03 	cmp.w	fp, #3
 800975e:	d1cb      	bne.n	80096f8 <_scanf_i+0x58>
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	b90b      	cbnz	r3, 8009768 <_scanf_i+0xc8>
 8009764:	230a      	movs	r3, #10
 8009766:	6063      	str	r3, [r4, #4]
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	4945      	ldr	r1, [pc, #276]	@ (8009880 <_scanf_i+0x1e0>)
 800976c:	6960      	ldr	r0, [r4, #20]
 800976e:	1ac9      	subs	r1, r1, r3
 8009770:	f000 f888 	bl	8009884 <__sccl>
 8009774:	f04f 0b00 	mov.w	fp, #0
 8009778:	68a3      	ldr	r3, [r4, #8]
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d03d      	beq.n	80097fc <_scanf_i+0x15c>
 8009780:	6831      	ldr	r1, [r6, #0]
 8009782:	6960      	ldr	r0, [r4, #20]
 8009784:	f891 c000 	ldrb.w	ip, [r1]
 8009788:	f810 000c 	ldrb.w	r0, [r0, ip]
 800978c:	2800      	cmp	r0, #0
 800978e:	d035      	beq.n	80097fc <_scanf_i+0x15c>
 8009790:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009794:	d124      	bne.n	80097e0 <_scanf_i+0x140>
 8009796:	0510      	lsls	r0, r2, #20
 8009798:	d522      	bpl.n	80097e0 <_scanf_i+0x140>
 800979a:	f10b 0b01 	add.w	fp, fp, #1
 800979e:	f1b9 0f00 	cmp.w	r9, #0
 80097a2:	d003      	beq.n	80097ac <_scanf_i+0x10c>
 80097a4:	3301      	adds	r3, #1
 80097a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6873      	ldr	r3, [r6, #4]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	6073      	str	r3, [r6, #4]
 80097b4:	dd1b      	ble.n	80097ee <_scanf_i+0x14e>
 80097b6:	6833      	ldr	r3, [r6, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	6033      	str	r3, [r6, #0]
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	3b01      	subs	r3, #1
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	e7d9      	b.n	8009778 <_scanf_i+0xd8>
 80097c4:	f1bb 0f02 	cmp.w	fp, #2
 80097c8:	d1ae      	bne.n	8009728 <_scanf_i+0x88>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80097d0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80097d4:	d1c4      	bne.n	8009760 <_scanf_i+0xc0>
 80097d6:	2110      	movs	r1, #16
 80097d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097dc:	6061      	str	r1, [r4, #4]
 80097de:	e7a2      	b.n	8009726 <_scanf_i+0x86>
 80097e0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	780b      	ldrb	r3, [r1, #0]
 80097e8:	f805 3b01 	strb.w	r3, [r5], #1
 80097ec:	e7de      	b.n	80097ac <_scanf_i+0x10c>
 80097ee:	4631      	mov	r1, r6
 80097f0:	4650      	mov	r0, sl
 80097f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097f6:	4798      	blx	r3
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0df      	beq.n	80097bc <_scanf_i+0x11c>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	05d9      	lsls	r1, r3, #23
 8009800:	d50d      	bpl.n	800981e <_scanf_i+0x17e>
 8009802:	42bd      	cmp	r5, r7
 8009804:	d909      	bls.n	800981a <_scanf_i+0x17a>
 8009806:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800980a:	4632      	mov	r2, r6
 800980c:	4650      	mov	r0, sl
 800980e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009812:	f105 39ff 	add.w	r9, r5, #4294967295
 8009816:	4798      	blx	r3
 8009818:	464d      	mov	r5, r9
 800981a:	42bd      	cmp	r5, r7
 800981c:	d028      	beq.n	8009870 <_scanf_i+0x1d0>
 800981e:	6822      	ldr	r2, [r4, #0]
 8009820:	f012 0210 	ands.w	r2, r2, #16
 8009824:	d113      	bne.n	800984e <_scanf_i+0x1ae>
 8009826:	702a      	strb	r2, [r5, #0]
 8009828:	4639      	mov	r1, r7
 800982a:	6863      	ldr	r3, [r4, #4]
 800982c:	4650      	mov	r0, sl
 800982e:	9e01      	ldr	r6, [sp, #4]
 8009830:	47b0      	blx	r6
 8009832:	f8d8 3000 	ldr.w	r3, [r8]
 8009836:	6821      	ldr	r1, [r4, #0]
 8009838:	1d1a      	adds	r2, r3, #4
 800983a:	f8c8 2000 	str.w	r2, [r8]
 800983e:	f011 0f20 	tst.w	r1, #32
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	d00f      	beq.n	8009866 <_scanf_i+0x1c6>
 8009846:	6018      	str	r0, [r3, #0]
 8009848:	68e3      	ldr	r3, [r4, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60e3      	str	r3, [r4, #12]
 800984e:	2000      	movs	r0, #0
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	1bed      	subs	r5, r5, r7
 8009854:	445d      	add	r5, fp
 8009856:	442b      	add	r3, r5
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	b007      	add	sp, #28
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	f04f 0b00 	mov.w	fp, #0
 8009864:	e7ca      	b.n	80097fc <_scanf_i+0x15c>
 8009866:	07ca      	lsls	r2, r1, #31
 8009868:	bf4c      	ite	mi
 800986a:	8018      	strhmi	r0, [r3, #0]
 800986c:	6018      	strpl	r0, [r3, #0]
 800986e:	e7eb      	b.n	8009848 <_scanf_i+0x1a8>
 8009870:	2001      	movs	r0, #1
 8009872:	e7f2      	b.n	800985a <_scanf_i+0x1ba>
 8009874:	0800a360 	.word	0x0800a360
 8009878:	080088bd 	.word	0x080088bd
 800987c:	08009b2d 	.word	0x08009b2d
 8009880:	0800a506 	.word	0x0800a506

08009884 <__sccl>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	780b      	ldrb	r3, [r1, #0]
 8009888:	4604      	mov	r4, r0
 800988a:	2b5e      	cmp	r3, #94	@ 0x5e
 800988c:	bf0b      	itete	eq
 800988e:	784b      	ldrbeq	r3, [r1, #1]
 8009890:	1c4a      	addne	r2, r1, #1
 8009892:	1c8a      	addeq	r2, r1, #2
 8009894:	2100      	movne	r1, #0
 8009896:	bf08      	it	eq
 8009898:	2101      	moveq	r1, #1
 800989a:	3801      	subs	r0, #1
 800989c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80098a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80098a4:	42a8      	cmp	r0, r5
 80098a6:	d1fb      	bne.n	80098a0 <__sccl+0x1c>
 80098a8:	b90b      	cbnz	r3, 80098ae <__sccl+0x2a>
 80098aa:	1e50      	subs	r0, r2, #1
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	f081 0101 	eor.w	r1, r1, #1
 80098b2:	4610      	mov	r0, r2
 80098b4:	54e1      	strb	r1, [r4, r3]
 80098b6:	4602      	mov	r2, r0
 80098b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098bc:	2d2d      	cmp	r5, #45	@ 0x2d
 80098be:	d005      	beq.n	80098cc <__sccl+0x48>
 80098c0:	2d5d      	cmp	r5, #93	@ 0x5d
 80098c2:	d016      	beq.n	80098f2 <__sccl+0x6e>
 80098c4:	2d00      	cmp	r5, #0
 80098c6:	d0f1      	beq.n	80098ac <__sccl+0x28>
 80098c8:	462b      	mov	r3, r5
 80098ca:	e7f2      	b.n	80098b2 <__sccl+0x2e>
 80098cc:	7846      	ldrb	r6, [r0, #1]
 80098ce:	2e5d      	cmp	r6, #93	@ 0x5d
 80098d0:	d0fa      	beq.n	80098c8 <__sccl+0x44>
 80098d2:	42b3      	cmp	r3, r6
 80098d4:	dcf8      	bgt.n	80098c8 <__sccl+0x44>
 80098d6:	461a      	mov	r2, r3
 80098d8:	3002      	adds	r0, #2
 80098da:	3201      	adds	r2, #1
 80098dc:	4296      	cmp	r6, r2
 80098de:	54a1      	strb	r1, [r4, r2]
 80098e0:	dcfb      	bgt.n	80098da <__sccl+0x56>
 80098e2:	1af2      	subs	r2, r6, r3
 80098e4:	3a01      	subs	r2, #1
 80098e6:	42b3      	cmp	r3, r6
 80098e8:	bfa8      	it	ge
 80098ea:	2200      	movge	r2, #0
 80098ec:	1c5d      	adds	r5, r3, #1
 80098ee:	18ab      	adds	r3, r5, r2
 80098f0:	e7e1      	b.n	80098b6 <__sccl+0x32>
 80098f2:	4610      	mov	r0, r2
 80098f4:	e7da      	b.n	80098ac <__sccl+0x28>

080098f6 <__submore>:
 80098f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80098fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009902:	4299      	cmp	r1, r3
 8009904:	d11b      	bne.n	800993e <__submore+0x48>
 8009906:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800990a:	f7ff f92d 	bl	8008b68 <_malloc_r>
 800990e:	b918      	cbnz	r0, 8009918 <__submore+0x22>
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800991e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009922:	6360      	str	r0, [r4, #52]	@ 0x34
 8009924:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009928:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800992c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009930:	7043      	strb	r3, [r0, #1]
 8009932:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009936:	7003      	strb	r3, [r0, #0]
 8009938:	6020      	str	r0, [r4, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	e7ea      	b.n	8009914 <__submore+0x1e>
 800993e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009940:	0077      	lsls	r7, r6, #1
 8009942:	463a      	mov	r2, r7
 8009944:	f000 f856 	bl	80099f4 <_realloc_r>
 8009948:	4605      	mov	r5, r0
 800994a:	2800      	cmp	r0, #0
 800994c:	d0e0      	beq.n	8009910 <__submore+0x1a>
 800994e:	eb00 0806 	add.w	r8, r0, r6
 8009952:	4601      	mov	r1, r0
 8009954:	4632      	mov	r2, r6
 8009956:	4640      	mov	r0, r8
 8009958:	f000 f83e 	bl	80099d8 <memcpy>
 800995c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009960:	f8c4 8000 	str.w	r8, [r4]
 8009964:	e7e9      	b.n	800993a <__submore+0x44>

08009966 <memmove>:
 8009966:	4288      	cmp	r0, r1
 8009968:	b510      	push	{r4, lr}
 800996a:	eb01 0402 	add.w	r4, r1, r2
 800996e:	d902      	bls.n	8009976 <memmove+0x10>
 8009970:	4284      	cmp	r4, r0
 8009972:	4623      	mov	r3, r4
 8009974:	d807      	bhi.n	8009986 <memmove+0x20>
 8009976:	1e43      	subs	r3, r0, #1
 8009978:	42a1      	cmp	r1, r4
 800997a:	d008      	beq.n	800998e <memmove+0x28>
 800997c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009980:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009984:	e7f8      	b.n	8009978 <memmove+0x12>
 8009986:	4601      	mov	r1, r0
 8009988:	4402      	add	r2, r0
 800998a:	428a      	cmp	r2, r1
 800998c:	d100      	bne.n	8009990 <memmove+0x2a>
 800998e:	bd10      	pop	{r4, pc}
 8009990:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009994:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009998:	e7f7      	b.n	800998a <memmove+0x24>
	...

0800999c <_sbrk_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	2300      	movs	r3, #0
 80099a0:	4d05      	ldr	r5, [pc, #20]	@ (80099b8 <_sbrk_r+0x1c>)
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7fa f8a4 	bl	8003af4 <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_sbrk_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_sbrk_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20000508 	.word	0x20000508

080099bc <memchr>:
 80099bc:	4603      	mov	r3, r0
 80099be:	b510      	push	{r4, lr}
 80099c0:	b2c9      	uxtb	r1, r1
 80099c2:	4402      	add	r2, r0
 80099c4:	4293      	cmp	r3, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	d101      	bne.n	80099ce <memchr+0x12>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e003      	b.n	80099d6 <memchr+0x1a>
 80099ce:	7804      	ldrb	r4, [r0, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	428c      	cmp	r4, r1
 80099d4:	d1f6      	bne.n	80099c4 <memchr+0x8>
 80099d6:	bd10      	pop	{r4, pc}

080099d8 <memcpy>:
 80099d8:	440a      	add	r2, r1
 80099da:	4291      	cmp	r1, r2
 80099dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e0:	d100      	bne.n	80099e4 <memcpy+0xc>
 80099e2:	4770      	bx	lr
 80099e4:	b510      	push	{r4, lr}
 80099e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ea:	4291      	cmp	r1, r2
 80099ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f0:	d1f9      	bne.n	80099e6 <memcpy+0xe>
 80099f2:	bd10      	pop	{r4, pc}

080099f4 <_realloc_r>:
 80099f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f8:	4607      	mov	r7, r0
 80099fa:	4614      	mov	r4, r2
 80099fc:	460d      	mov	r5, r1
 80099fe:	b921      	cbnz	r1, 8009a0a <_realloc_r+0x16>
 8009a00:	4611      	mov	r1, r2
 8009a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a06:	f7ff b8af 	b.w	8008b68 <_malloc_r>
 8009a0a:	b92a      	cbnz	r2, 8009a18 <_realloc_r+0x24>
 8009a0c:	f7ff f842 	bl	8008a94 <_free_r>
 8009a10:	4625      	mov	r5, r4
 8009a12:	4628      	mov	r0, r5
 8009a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a18:	f000 f88a 	bl	8009b30 <_malloc_usable_size_r>
 8009a1c:	4284      	cmp	r4, r0
 8009a1e:	4606      	mov	r6, r0
 8009a20:	d802      	bhi.n	8009a28 <_realloc_r+0x34>
 8009a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a26:	d8f4      	bhi.n	8009a12 <_realloc_r+0x1e>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	f7ff f89c 	bl	8008b68 <_malloc_r>
 8009a30:	4680      	mov	r8, r0
 8009a32:	b908      	cbnz	r0, 8009a38 <_realloc_r+0x44>
 8009a34:	4645      	mov	r5, r8
 8009a36:	e7ec      	b.n	8009a12 <_realloc_r+0x1e>
 8009a38:	42b4      	cmp	r4, r6
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	bf28      	it	cs
 8009a40:	4632      	movcs	r2, r6
 8009a42:	f7ff ffc9 	bl	80099d8 <memcpy>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff f823 	bl	8008a94 <_free_r>
 8009a4e:	e7f1      	b.n	8009a34 <_realloc_r+0x40>

08009a50 <_strtoul_l.isra.0>:
 8009a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4686      	mov	lr, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	4e33      	ldr	r6, [pc, #204]	@ (8009b28 <_strtoul_l.isra.0+0xd8>)
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a60:	5d37      	ldrb	r7, [r6, r4]
 8009a62:	f017 0708 	ands.w	r7, r7, #8
 8009a66:	d1f8      	bne.n	8009a5a <_strtoul_l.isra.0+0xa>
 8009a68:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a6a:	d110      	bne.n	8009a8e <_strtoul_l.isra.0+0x3e>
 8009a6c:	2701      	movs	r7, #1
 8009a6e:	782c      	ldrb	r4, [r5, #0]
 8009a70:	1c85      	adds	r5, r0, #2
 8009a72:	f033 0010 	bics.w	r0, r3, #16
 8009a76:	d115      	bne.n	8009aa4 <_strtoul_l.isra.0+0x54>
 8009a78:	2c30      	cmp	r4, #48	@ 0x30
 8009a7a:	d10d      	bne.n	8009a98 <_strtoul_l.isra.0+0x48>
 8009a7c:	7828      	ldrb	r0, [r5, #0]
 8009a7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009a82:	2858      	cmp	r0, #88	@ 0x58
 8009a84:	d108      	bne.n	8009a98 <_strtoul_l.isra.0+0x48>
 8009a86:	786c      	ldrb	r4, [r5, #1]
 8009a88:	3502      	adds	r5, #2
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	e00a      	b.n	8009aa4 <_strtoul_l.isra.0+0x54>
 8009a8e:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a90:	bf04      	itt	eq
 8009a92:	782c      	ldrbeq	r4, [r5, #0]
 8009a94:	1c85      	addeq	r5, r0, #2
 8009a96:	e7ec      	b.n	8009a72 <_strtoul_l.isra.0+0x22>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f6      	bne.n	8009a8a <_strtoul_l.isra.0+0x3a>
 8009a9c:	2c30      	cmp	r4, #48	@ 0x30
 8009a9e:	bf14      	ite	ne
 8009aa0:	230a      	movne	r3, #10
 8009aa2:	2308      	moveq	r3, #8
 8009aa4:	f04f 38ff 	mov.w	r8, #4294967295
 8009aa8:	fbb8 f8f3 	udiv	r8, r8, r3
 8009aac:	2600      	movs	r6, #0
 8009aae:	fb03 f908 	mul.w	r9, r3, r8
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	ea6f 0909 	mvn.w	r9, r9
 8009ab8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009abc:	f1bc 0f09 	cmp.w	ip, #9
 8009ac0:	d810      	bhi.n	8009ae4 <_strtoul_l.isra.0+0x94>
 8009ac2:	4664      	mov	r4, ip
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	dd1e      	ble.n	8009b06 <_strtoul_l.isra.0+0xb6>
 8009ac8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009acc:	d007      	beq.n	8009ade <_strtoul_l.isra.0+0x8e>
 8009ace:	4580      	cmp	r8, r0
 8009ad0:	d316      	bcc.n	8009b00 <_strtoul_l.isra.0+0xb0>
 8009ad2:	d101      	bne.n	8009ad8 <_strtoul_l.isra.0+0x88>
 8009ad4:	45a1      	cmp	r9, r4
 8009ad6:	db13      	blt.n	8009b00 <_strtoul_l.isra.0+0xb0>
 8009ad8:	2601      	movs	r6, #1
 8009ada:	fb00 4003 	mla	r0, r0, r3, r4
 8009ade:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae2:	e7e9      	b.n	8009ab8 <_strtoul_l.isra.0+0x68>
 8009ae4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009ae8:	f1bc 0f19 	cmp.w	ip, #25
 8009aec:	d801      	bhi.n	8009af2 <_strtoul_l.isra.0+0xa2>
 8009aee:	3c37      	subs	r4, #55	@ 0x37
 8009af0:	e7e8      	b.n	8009ac4 <_strtoul_l.isra.0+0x74>
 8009af2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009af6:	f1bc 0f19 	cmp.w	ip, #25
 8009afa:	d804      	bhi.n	8009b06 <_strtoul_l.isra.0+0xb6>
 8009afc:	3c57      	subs	r4, #87	@ 0x57
 8009afe:	e7e1      	b.n	8009ac4 <_strtoul_l.isra.0+0x74>
 8009b00:	f04f 36ff 	mov.w	r6, #4294967295
 8009b04:	e7eb      	b.n	8009ade <_strtoul_l.isra.0+0x8e>
 8009b06:	1c73      	adds	r3, r6, #1
 8009b08:	d106      	bne.n	8009b18 <_strtoul_l.isra.0+0xc8>
 8009b0a:	2322      	movs	r3, #34	@ 0x22
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f8ce 3000 	str.w	r3, [lr]
 8009b12:	b932      	cbnz	r2, 8009b22 <_strtoul_l.isra.0+0xd2>
 8009b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b18:	b107      	cbz	r7, 8009b1c <_strtoul_l.isra.0+0xcc>
 8009b1a:	4240      	negs	r0, r0
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	d0f9      	beq.n	8009b14 <_strtoul_l.isra.0+0xc4>
 8009b20:	b106      	cbz	r6, 8009b24 <_strtoul_l.isra.0+0xd4>
 8009b22:	1e69      	subs	r1, r5, #1
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	e7f5      	b.n	8009b14 <_strtoul_l.isra.0+0xc4>
 8009b28:	0800a3c3 	.word	0x0800a3c3

08009b2c <_strtoul_r>:
 8009b2c:	f7ff bf90 	b.w	8009a50 <_strtoul_l.isra.0>

08009b30 <_malloc_usable_size_r>:
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f18      	subs	r0, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbc      	itt	lt
 8009b3a:	580b      	ldrlt	r3, [r1, r0]
 8009b3c:	18c0      	addlt	r0, r0, r3
 8009b3e:	4770      	bx	lr

08009b40 <_init>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	bf00      	nop
 8009b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b46:	bc08      	pop	{r3}
 8009b48:	469e      	mov	lr, r3
 8009b4a:	4770      	bx	lr

08009b4c <_fini>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	bf00      	nop
 8009b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b52:	bc08      	pop	{r3}
 8009b54:	469e      	mov	lr, r3
 8009b56:	4770      	bx	lr
