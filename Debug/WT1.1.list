
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009888  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08009994  08009994  0000a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb0  08009eb0  0000b0c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009eb0  08009eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb8  08009eb8  0000b0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb8  08009eb8  0000aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ebc  08009ebc  0000aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08009ec0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200000c4  08009f84  0000b0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08009f84  0000b624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018648  00000000  00000000  0000b0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430a  00000000  00000000  00023735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  00027a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001304  00000000  00000000  000292b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c47e  00000000  00000000  0002a5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e719  00000000  00000000  00046a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009941b  00000000  00000000  0006514b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f8c  00000000  00000000  000fe5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00105538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800997c 	.word	0x0800997c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	0800997c 	.word	0x0800997c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b98c 	b.w	8000a88 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	468e      	mov	lr, r1
 8000790:	4604      	mov	r4, r0
 8000792:	4688      	mov	r8, r1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d14a      	bne.n	800082e <__udivmoddi4+0xa6>
 8000798:	428a      	cmp	r2, r1
 800079a:	4617      	mov	r7, r2
 800079c:	d962      	bls.n	8000864 <__udivmoddi4+0xdc>
 800079e:	fab2 f682 	clz	r6, r2
 80007a2:	b14e      	cbz	r6, 80007b8 <__udivmoddi4+0x30>
 80007a4:	f1c6 0320 	rsb	r3, r6, #32
 80007a8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ac:	fa20 f303 	lsr.w	r3, r0, r3
 80007b0:	40b7      	lsls	r7, r6
 80007b2:	ea43 0808 	orr.w	r8, r3, r8
 80007b6:	40b4      	lsls	r4, r6
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	fbb8 f1fe 	udiv	r1, r8, lr
 80007c0:	fa1f fc87 	uxth.w	ip, r7
 80007c4:	fb0e 8811 	mls	r8, lr, r1, r8
 80007c8:	fb01 f20c 	mul.w	r2, r1, ip
 80007cc:	0c23      	lsrs	r3, r4, #16
 80007ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0x62>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007dc:	f080 80eb 	bcs.w	80009b6 <__udivmoddi4+0x22e>
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f240 80e8 	bls.w	80009b6 <__udivmoddi4+0x22e>
 80007e6:	3902      	subs	r1, #2
 80007e8:	443b      	add	r3, r7
 80007ea:	1a9a      	subs	r2, r3, r2
 80007ec:	fbb2 f0fe 	udiv	r0, r2, lr
 80007f0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007f8:	b2a3      	uxth	r3, r4
 80007fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007fe:	459c      	cmp	ip, r3
 8000800:	d909      	bls.n	8000816 <__udivmoddi4+0x8e>
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	f100 32ff 	add.w	r2, r0, #4294967295
 8000808:	f080 80d7 	bcs.w	80009ba <__udivmoddi4+0x232>
 800080c:	459c      	cmp	ip, r3
 800080e:	f240 80d4 	bls.w	80009ba <__udivmoddi4+0x232>
 8000812:	443b      	add	r3, r7
 8000814:	3802      	subs	r0, #2
 8000816:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800081a:	2100      	movs	r1, #0
 800081c:	eba3 030c 	sub.w	r3, r3, ip
 8000820:	b11d      	cbz	r5, 800082a <__udivmoddi4+0xa2>
 8000822:	2200      	movs	r2, #0
 8000824:	40f3      	lsrs	r3, r6
 8000826:	e9c5 3200 	strd	r3, r2, [r5]
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	428b      	cmp	r3, r1
 8000830:	d905      	bls.n	800083e <__udivmoddi4+0xb6>
 8000832:	b10d      	cbz	r5, 8000838 <__udivmoddi4+0xb0>
 8000834:	e9c5 0100 	strd	r0, r1, [r5]
 8000838:	2100      	movs	r1, #0
 800083a:	4608      	mov	r0, r1
 800083c:	e7f5      	b.n	800082a <__udivmoddi4+0xa2>
 800083e:	fab3 f183 	clz	r1, r3
 8000842:	2900      	cmp	r1, #0
 8000844:	d146      	bne.n	80008d4 <__udivmoddi4+0x14c>
 8000846:	4573      	cmp	r3, lr
 8000848:	d302      	bcc.n	8000850 <__udivmoddi4+0xc8>
 800084a:	4282      	cmp	r2, r0
 800084c:	f200 8108 	bhi.w	8000a60 <__udivmoddi4+0x2d8>
 8000850:	1a84      	subs	r4, r0, r2
 8000852:	eb6e 0203 	sbc.w	r2, lr, r3
 8000856:	2001      	movs	r0, #1
 8000858:	4690      	mov	r8, r2
 800085a:	2d00      	cmp	r5, #0
 800085c:	d0e5      	beq.n	800082a <__udivmoddi4+0xa2>
 800085e:	e9c5 4800 	strd	r4, r8, [r5]
 8000862:	e7e2      	b.n	800082a <__udivmoddi4+0xa2>
 8000864:	2a00      	cmp	r2, #0
 8000866:	f000 8091 	beq.w	800098c <__udivmoddi4+0x204>
 800086a:	fab2 f682 	clz	r6, r2
 800086e:	2e00      	cmp	r6, #0
 8000870:	f040 80a5 	bne.w	80009be <__udivmoddi4+0x236>
 8000874:	1a8a      	subs	r2, r1, r2
 8000876:	2101      	movs	r1, #1
 8000878:	0c03      	lsrs	r3, r0, #16
 800087a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087e:	b280      	uxth	r0, r0
 8000880:	b2bc      	uxth	r4, r7
 8000882:	fbb2 fcfe 	udiv	ip, r2, lr
 8000886:	fb0e 221c 	mls	r2, lr, ip, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb04 f20c 	mul.w	r2, r4, ip
 8000892:	429a      	cmp	r2, r3
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x11e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f10c 38ff 	add.w	r8, ip, #4294967295
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0x11c>
 800089e:	429a      	cmp	r2, r3
 80008a0:	f200 80e3 	bhi.w	8000a6a <__udivmoddi4+0x2e2>
 80008a4:	46c4      	mov	ip, r8
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ac:	fb0e 3312 	mls	r3, lr, r2, r3
 80008b0:	fb02 f404 	mul.w	r4, r2, r4
 80008b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x144>
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	f102 30ff 	add.w	r0, r2, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x142>
 80008c4:	429c      	cmp	r4, r3
 80008c6:	f200 80cd 	bhi.w	8000a64 <__udivmoddi4+0x2dc>
 80008ca:	4602      	mov	r2, r0
 80008cc:	1b1b      	subs	r3, r3, r4
 80008ce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008d2:	e7a5      	b.n	8000820 <__udivmoddi4+0x98>
 80008d4:	f1c1 0620 	rsb	r6, r1, #32
 80008d8:	408b      	lsls	r3, r1
 80008da:	fa22 f706 	lsr.w	r7, r2, r6
 80008de:	431f      	orrs	r7, r3
 80008e0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008e8:	fbba f8f9 	udiv	r8, sl, r9
 80008ec:	fa0e fe01 	lsl.w	lr, lr, r1
 80008f0:	fa20 f306 	lsr.w	r3, r0, r6
 80008f4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008f8:	fa1f fc87 	uxth.w	ip, r7
 80008fc:	ea43 030e 	orr.w	r3, r3, lr
 8000900:	fa00 fe01 	lsl.w	lr, r0, r1
 8000904:	fb08 f00c 	mul.w	r0, r8, ip
 8000908:	0c1c      	lsrs	r4, r3, #16
 800090a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800090e:	42a0      	cmp	r0, r4
 8000910:	fa02 f201 	lsl.w	r2, r2, r1
 8000914:	d90a      	bls.n	800092c <__udivmoddi4+0x1a4>
 8000916:	193c      	adds	r4, r7, r4
 8000918:	f108 3aff 	add.w	sl, r8, #4294967295
 800091c:	f080 809e 	bcs.w	8000a5c <__udivmoddi4+0x2d4>
 8000920:	42a0      	cmp	r0, r4
 8000922:	f240 809b 	bls.w	8000a5c <__udivmoddi4+0x2d4>
 8000926:	f1a8 0802 	sub.w	r8, r8, #2
 800092a:	443c      	add	r4, r7
 800092c:	1a24      	subs	r4, r4, r0
 800092e:	b298      	uxth	r0, r3
 8000930:	fbb4 f3f9 	udiv	r3, r4, r9
 8000934:	fb09 4413 	mls	r4, r9, r3, r4
 8000938:	fb03 fc0c 	mul.w	ip, r3, ip
 800093c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000940:	45a4      	cmp	ip, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x1d0>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f103 30ff 	add.w	r0, r3, #4294967295
 800094a:	f080 8085 	bcs.w	8000a58 <__udivmoddi4+0x2d0>
 800094e:	45a4      	cmp	ip, r4
 8000950:	f240 8082 	bls.w	8000a58 <__udivmoddi4+0x2d0>
 8000954:	3b02      	subs	r3, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800095c:	eba4 040c 	sub.w	r4, r4, ip
 8000960:	fba0 8c02 	umull	r8, ip, r0, r2
 8000964:	4564      	cmp	r4, ip
 8000966:	4643      	mov	r3, r8
 8000968:	46e1      	mov	r9, ip
 800096a:	d364      	bcc.n	8000a36 <__udivmoddi4+0x2ae>
 800096c:	d061      	beq.n	8000a32 <__udivmoddi4+0x2aa>
 800096e:	b15d      	cbz	r5, 8000988 <__udivmoddi4+0x200>
 8000970:	ebbe 0203 	subs.w	r2, lr, r3
 8000974:	eb64 0409 	sbc.w	r4, r4, r9
 8000978:	fa04 f606 	lsl.w	r6, r4, r6
 800097c:	fa22 f301 	lsr.w	r3, r2, r1
 8000980:	431e      	orrs	r6, r3
 8000982:	40cc      	lsrs	r4, r1
 8000984:	e9c5 6400 	strd	r6, r4, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	e74e      	b.n	800082a <__udivmoddi4+0xa2>
 800098c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000990:	0c01      	lsrs	r1, r0, #16
 8000992:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000996:	b280      	uxth	r0, r0
 8000998:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800099c:	463b      	mov	r3, r7
 800099e:	fbb1 f1f7 	udiv	r1, r1, r7
 80009a2:	4638      	mov	r0, r7
 80009a4:	463c      	mov	r4, r7
 80009a6:	46b8      	mov	r8, r7
 80009a8:	46be      	mov	lr, r7
 80009aa:	2620      	movs	r6, #32
 80009ac:	eba2 0208 	sub.w	r2, r2, r8
 80009b0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009b4:	e765      	b.n	8000882 <__udivmoddi4+0xfa>
 80009b6:	4601      	mov	r1, r0
 80009b8:	e717      	b.n	80007ea <__udivmoddi4+0x62>
 80009ba:	4610      	mov	r0, r2
 80009bc:	e72b      	b.n	8000816 <__udivmoddi4+0x8e>
 80009be:	f1c6 0120 	rsb	r1, r6, #32
 80009c2:	fa2e fc01 	lsr.w	ip, lr, r1
 80009c6:	40b7      	lsls	r7, r6
 80009c8:	fa0e fe06 	lsl.w	lr, lr, r6
 80009cc:	fa20 f101 	lsr.w	r1, r0, r1
 80009d0:	ea41 010e 	orr.w	r1, r1, lr
 80009d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d8:	fbbc f8fe 	udiv	r8, ip, lr
 80009dc:	b2bc      	uxth	r4, r7
 80009de:	fb0e cc18 	mls	ip, lr, r8, ip
 80009e2:	fb08 f904 	mul.w	r9, r8, r4
 80009e6:	0c0a      	lsrs	r2, r1, #16
 80009e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ec:	40b0      	lsls	r0, r6
 80009ee:	4591      	cmp	r9, r2
 80009f0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	d93e      	bls.n	8000a76 <__udivmoddi4+0x2ee>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f108 3cff 	add.w	ip, r8, #4294967295
 80009fe:	d201      	bcs.n	8000a04 <__udivmoddi4+0x27c>
 8000a00:	4591      	cmp	r9, r2
 8000a02:	d81f      	bhi.n	8000a44 <__udivmoddi4+0x2bc>
 8000a04:	eba2 0209 	sub.w	r2, r2, r9
 8000a08:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0c:	fb09 f804 	mul.w	r8, r9, r4
 8000a10:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a14:	b28a      	uxth	r2, r1
 8000a16:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a1a:	4542      	cmp	r2, r8
 8000a1c:	d229      	bcs.n	8000a72 <__udivmoddi4+0x2ea>
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a24:	d2c2      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a26:	4542      	cmp	r2, r8
 8000a28:	d2c0      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a2a:	f1a9 0102 	sub.w	r1, r9, #2
 8000a2e:	443a      	add	r2, r7
 8000a30:	e7bc      	b.n	80009ac <__udivmoddi4+0x224>
 8000a32:	45c6      	cmp	lr, r8
 8000a34:	d29b      	bcs.n	800096e <__udivmoddi4+0x1e6>
 8000a36:	ebb8 0302 	subs.w	r3, r8, r2
 8000a3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a3e:	3801      	subs	r0, #1
 8000a40:	46e1      	mov	r9, ip
 8000a42:	e794      	b.n	800096e <__udivmoddi4+0x1e6>
 8000a44:	eba7 0909 	sub.w	r9, r7, r9
 8000a48:	444a      	add	r2, r9
 8000a4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a4e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a52:	fb09 f804 	mul.w	r8, r9, r4
 8000a56:	e7db      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e77d      	b.n	8000958 <__udivmoddi4+0x1d0>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e765      	b.n	800092c <__udivmoddi4+0x1a4>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e6fa      	b.n	800085a <__udivmoddi4+0xd2>
 8000a64:	443b      	add	r3, r7
 8000a66:	3a02      	subs	r2, #2
 8000a68:	e730      	b.n	80008cc <__udivmoddi4+0x144>
 8000a6a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	e719      	b.n	80008a6 <__udivmoddi4+0x11e>
 8000a72:	4649      	mov	r1, r9
 8000a74:	e79a      	b.n	80009ac <__udivmoddi4+0x224>
 8000a76:	eba2 0209 	sub.w	r2, r2, r9
 8000a7a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a7e:	46c4      	mov	ip, r8
 8000a80:	fb09 f804 	mul.w	r8, r9, r4
 8000a84:	e7c4      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a86:	bf00      	nop

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f003 fe7b 	bl	80047b0 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <readChannelVoltage+0x3a>
        return 0.0f;
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e029      	b.n	8000b1a <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f003 fc86 	bl	80043d8 <HAL_ADC_Start>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <readChannelVoltage+0x4c>
        return 0.0f;
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	e020      	b.n	8000b1a <readChannelVoltage+0x8e>

    float v = 0.0f;
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000ade:	210a      	movs	r1, #10
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f003 fd53 	bl	800458c <HAL_ADC_PollForConversion>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d112      	bne.n	8000b12 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f003 fe53 	bl	8004798 <HAL_ADC_GetValue>
 8000af2:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 8000af4:	69b8      	ldr	r0, [r7, #24]
 8000af6:	f7ff fbf1 	bl	80002dc <__aeabi_ui2f>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4909      	ldr	r1, [pc, #36]	@ (8000b24 <readChannelVoltage+0x98>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc44 	bl	800038c <__aeabi_fmul>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <readChannelVoltage+0x9c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fcf3 	bl	80004f4 <__aeabi_fdiv>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f003 fd0e 	bl	8004534 <HAL_ADC_Stop>
    return v;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40533333 	.word	0x40533333
 8000b28:	457ff000 	.word	0x457ff000

08000b2c <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f003 ffcf 	bl	8004ad8 <HAL_ADCEx_Calibration_Start>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <ADC_Init+0x18>
        Error_Handler();
 8000b40:	f001 f8a0 	bl	8001c84 <Error_Handler>
    }
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    bool changed = false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b66:	e182      	b.n	8000e6e <ADC_ReadAllChannels+0x322>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 8000b68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b6c:	4a98      	ldr	r2, [pc, #608]	@ (8000dd0 <ADC_ReadAllChannels+0x284>)
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff89 	bl	8000a8c <readChannelVoltage>
 8000b7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8000b7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b80:	4a94      	ldr	r2, [pc, #592]	@ (8000dd4 <ADC_ReadAllChannels+0x288>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	f04f 0100 	mov.w	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd92 	bl	80006b4 <__aeabi_fcmpeq>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 8000b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b9a:	498e      	ldr	r1, [pc, #568]	@ (8000dd4 <ADC_ReadAllChannels+0x288>)
 8000b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ba2:	e01a      	b.n	8000bda <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8000ba4:	498c      	ldr	r1, [pc, #560]	@ (8000dd8 <ADC_ReadAllChannels+0x28c>)
 8000ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ba8:	f7ff fbf0 	bl	800038c <__aeabi_fmul>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461d      	mov	r5, r3
 8000bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bb4:	4a87      	ldr	r2, [pc, #540]	@ (8000dd4 <ADC_ReadAllChannels+0x288>)
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	4988      	ldr	r1, [pc, #544]	@ (8000ddc <ADC_ReadAllChannels+0x290>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fbe5 	bl	800038c <__aeabi_fmul>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fad6 	bl	800017c <__addsf3>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b7f      	ldr	r3, [pc, #508]	@ (8000dd4 <ADC_ReadAllChannels+0x288>)
 8000bd6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 8000bda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bde:	4a7d      	ldr	r2, [pc, #500]	@ (8000dd4 <ADC_ReadAllChannels+0x288>)
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 8000be6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bec:	f7ff fd6c 	bl	80006c8 <__aeabi_fcmplt>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 8000bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	3302      	adds	r3, #2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c0a:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 8000c0c:	4974      	ldr	r1, [pc, #464]	@ (8000de0 <ADC_ReadAllChannels+0x294>)
 8000c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c10:	f7ff fbbc 	bl	800038c <__aeabi_fmul>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4973      	ldr	r1, [pc, #460]	@ (8000de4 <ADC_ReadAllChannels+0x298>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc6b 	bl	80004f4 <__aeabi_fdiv>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fd77 	bl	8000718 <__aeabi_f2uiz>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 8000c34:	2301      	movs	r3, #1
 8000c36:	461c      	mov	r4, r3
 8000c38:	496b      	ldr	r1, [pc, #428]	@ (8000de8 <ADC_ReadAllChannels+0x29c>)
 8000c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c3c:	f7ff fd58 	bl	80006f0 <__aeabi_fcmpge>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <ADC_ReadAllChannels+0xfe>
 8000c46:	2300      	movs	r3, #0
 8000c48:	461c      	mov	r4, r3
 8000c4a:	b2e2      	uxtb	r2, r4
 8000c4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c50:	4611      	mov	r1, r2
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	460a      	mov	r2, r1
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8000c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c60:	4962      	ldr	r1, [pc, #392]	@ (8000dec <ADC_ReadAllChannels+0x2a0>)
 8000c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 8000c68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c6c:	4a60      	ldr	r2, [pc, #384]	@ (8000df0 <ADC_ReadAllChannels+0x2a4>)
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	4619      	mov	r1, r3
 8000c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c76:	f7ff fa7f 	bl	8000178 <__aeabi_fsub>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c80:	495c      	ldr	r1, [pc, #368]	@ (8000df4 <ADC_ReadAllChannels+0x2a8>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd3e 	bl	8000704 <__aeabi_fcmpgt>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d008      	beq.n	8000ca0 <ADC_ReadAllChannels+0x154>
            changed = true;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8000c94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c98:	4955      	ldr	r1, [pc, #340]	@ (8000df0 <ADC_ReadAllChannels+0x2a4>)
 8000c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8000ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ca4:	4a54      	ldr	r2, [pc, #336]	@ (8000df8 <ADC_ReadAllChannels+0x2ac>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d168      	bne.n	8000d7e <ADC_ReadAllChannels+0x232>
 8000cac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cb2:	f7ff fd1d 	bl	80006f0 <__aeabi_fcmpge>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d060      	beq.n	8000d7e <ADC_ReadAllChannels+0x232>
            s_level_flags[i] = 1;
 8000cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8000df8 <ADC_ReadAllChannels+0x2ac>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 8000cc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d82a      	bhi.n	8000d24 <ADC_ReadAllChannels+0x1d8>
 8000cce:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd4 <ADC_ReadAllChannels+0x188>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce9 	.word	0x08000ce9
 8000cd8:	08000cf5 	.word	0x08000cf5
 8000cdc:	08000d01 	.word	0x08000d01
 8000ce0:	08000d0d 	.word	0x08000d0d
 8000ce4:	08000d19 	.word	0x08000d19
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 8000ce8:	4a44      	ldr	r2, [pc, #272]	@ (8000dfc <ADC_ReadAllChannels+0x2b0>)
 8000cea:	2110      	movs	r1, #16
 8000cec:	4844      	ldr	r0, [pc, #272]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000cee:	f007 ff0f 	bl	8008b10 <sniprintf>
 8000cf2:	e01b      	b.n	8000d2c <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 8000cf4:	4a43      	ldr	r2, [pc, #268]	@ (8000e04 <ADC_ReadAllChannels+0x2b8>)
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4841      	ldr	r0, [pc, #260]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000cfa:	f007 ff09 	bl	8008b10 <sniprintf>
 8000cfe:	e015      	b.n	8000d2c <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 8000d00:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <ADC_ReadAllChannels+0x2bc>)
 8000d02:	2110      	movs	r1, #16
 8000d04:	483e      	ldr	r0, [pc, #248]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d06:	f007 ff03 	bl	8008b10 <sniprintf>
 8000d0a:	e00f      	b.n	8000d2c <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 8000d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8000e0c <ADC_ReadAllChannels+0x2c0>)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	483b      	ldr	r0, [pc, #236]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d12:	f007 fefd 	bl	8008b10 <sniprintf>
 8000d16:	e009      	b.n	8000d2c <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 8000d18:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <ADC_ReadAllChannels+0x2c4>)
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4838      	ldr	r0, [pc, #224]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d1e:	f007 fef7 	bl	8008b10 <sniprintf>
 8000d22:	e003      	b.n	8000d2c <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	bf00      	nop
            }
            motorStatus = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <ADC_ReadAllChannels+0x2c8>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 8000d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d36:	4a38      	ldr	r2, [pc, #224]	@ (8000e18 <ADC_ReadAllChannels+0x2cc>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d02e      	beq.n	8000da2 <ADC_ReadAllChannels+0x256>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa09 	bl	8000160 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f1c3 021f 	rsb	r2, r3, #31
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4929      	ldr	r1, [pc, #164]	@ (8000e00 <ADC_ReadAllChannels+0x2b4>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f007 ffee 	bl	8008d3c <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff f9fb 	bl	8000160 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f1c3 021f 	rsb	r2, r3, #31
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4929      	ldr	r1, [pc, #164]	@ (8000e1c <ADC_ReadAllChannels+0x2d0>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 ffe0 	bl	8008d3c <strncat>
            if (dataPacketTx[0]) {
 8000d7c:	e011      	b.n	8000da2 <ADC_ReadAllChannels+0x256>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8000d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d82:	4a1d      	ldr	r2, [pc, #116]	@ (8000df8 <ADC_ReadAllChannels+0x2ac>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <ADC_ReadAllChannels+0x256>
 8000d8a:	4925      	ldr	r1, [pc, #148]	@ (8000e20 <ADC_ReadAllChannels+0x2d4>)
 8000d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d8e:	f7ff fc9b 	bl	80006c8 <__aeabi_fcmplt>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d004      	beq.n	8000da2 <ADC_ReadAllChannels+0x256>
            s_level_flags[i] = 0;
 8000d98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d9c:	4a16      	ldr	r2, [pc, #88]	@ (8000df8 <ADC_ReadAllChannels+0x2ac>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8000da2:	4914      	ldr	r1, [pc, #80]	@ (8000df4 <ADC_ReadAllChannels+0x2a8>)
 8000da4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000da6:	f7ff fc8f 	bl	80006c8 <__aeabi_fcmplt>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d039      	beq.n	8000e24 <ADC_ReadAllChannels+0x2d8>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8000db0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <ADC_ReadAllChannels+0x2cc>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	2bff      	cmp	r3, #255	@ 0xff
 8000dba:	d038      	beq.n	8000e2e <ADC_ReadAllChannels+0x2e2>
 8000dbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dc0:	4a15      	ldr	r2, [pc, #84]	@ (8000e18 <ADC_ReadAllChannels+0x2cc>)
 8000dc2:	5cd2      	ldrb	r2, [r2, r3]
 8000dc4:	3201      	adds	r2, #1
 8000dc6:	b2d1      	uxtb	r1, r2
 8000dc8:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <ADC_ReadAllChannels+0x2cc>)
 8000dca:	54d1      	strb	r1, [r2, r3]
 8000dcc:	e02f      	b.n	8000e2e <ADC_ReadAllChannels+0x2e2>
 8000dce:	bf00      	nop
 8000dd0:	08009dd8 	.word	0x08009dd8
 8000dd4:	200000f8 	.word	0x200000f8
 8000dd8:	3e99999a 	.word	0x3e99999a
 8000ddc:	3f333333 	.word	0x3f333333
 8000de0:	457ff000 	.word	0x457ff000
 8000de4:	40533333 	.word	0x40533333
 8000de8:	404ccccd 	.word	0x404ccccd
 8000dec:	200000e0 	.word	0x200000e0
 8000df0:	20000120 	.word	0x20000120
 8000df4:	3d4ccccd 	.word	0x3d4ccccd
 8000df8:	20000110 	.word	0x20000110
 8000dfc:	08009994 	.word	0x08009994
 8000e00:	20000138 	.word	0x20000138
 8000e04:	0800999c 	.word	0x0800999c
 8000e08:	080099a4 	.word	0x080099a4
 8000e0c:	080099ac 	.word	0x080099ac
 8000e10:	080099b4 	.word	0x080099b4
 8000e14:	200003bc 	.word	0x200003bc
 8000e18:	20000118 	.word	0x20000118
 8000e1c:	080099bc 	.word	0x080099bc
 8000e20:	3f666666 	.word	0x3f666666
        } else {
            s_low_counts[i] = 0;
 8000e24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <ADC_ReadAllChannels+0x35c>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <ADC_ReadAllChannels+0x360>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d012      	beq.n	8000e64 <ADC_ReadAllChannels+0x318>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <ADC_ReadAllChannels+0x364>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10d      	bne.n	8000e64 <ADC_ReadAllChannels+0x318>
 8000e48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <ADC_ReadAllChannels+0x35c>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d907      	bls.n	8000e64 <ADC_ReadAllChannels+0x318>
                motorStatus = 0;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <ADC_ReadAllChannels+0x364>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <ADC_ReadAllChannels+0x35c>)
 8000e60:	f007 ff64 	bl	8008d2c <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000e64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	f67f ae78 	bls.w	8000b68 <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8000e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00e      	beq.n	8000e9e <ADC_ReadAllChannels+0x352>
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <ADC_ReadAllChannels+0x352>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f968 	bl	8000160 <strlen>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fbe3 	bl	8001664 <LoRa_SendPacket>
    }
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	@ 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000118 	.word	0x20000118
 8000eac:	2000040c 	.word	0x2000040c
 8000eb0:	200003bc 	.word	0x200003bc

08000eb4 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8000eb4:	b490      	push	{r4, r7}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71bb      	strb	r3, [r7, #6]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	717b      	strb	r3, [r7, #5]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8000eea:	793b      	ldrb	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <map_nibble_ctrl+0x40>
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	e000      	b.n	8000ef6 <map_nibble_ctrl+0x42>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8000f00:	797b      	ldrb	r3, [r7, #5]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <map_nibble_ctrl+0x56>
 8000f06:	2204      	movs	r2, #4
 8000f08:	e000      	b.n	8000f0c <map_nibble_ctrl+0x58>
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
    return b;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc90      	pop	{r4, r7}
 8000f38:	4770      	bx	lr
	...

08000f3c <expander_write>:

static void expander_write(uint8_t data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8000f46:	1dfa      	adds	r2, r7, #7
 8000f48:	2364      	movs	r3, #100	@ 0x64
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	214e      	movs	r1, #78	@ 0x4e
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <expander_write+0x24>)
 8000f52:	f004 fa63 	bl	800541c <HAL_I2C_Master_Transmit>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000019c 	.word	0x2000019c

08000f64 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffe0 	bl	8000f3c <expander_write>
    HAL_Delay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f003 f92f 	bl	80041e0 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 0304 	bic.w	r3, r3, #4
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffd6 	bl	8000f3c <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f003 f925 	bl	80041e0 <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	4613      	mov	r3, r2
 8000fae:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000fb0:	797b      	ldrb	r3, [r7, #5]
 8000fb2:	79b9      	ldrb	r1, [r7, #6]
 8000fb4:	79f8      	ldrb	r0, [r7, #7]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f7ff ff7c 	bl	8000eb4 <map_nibble_ctrl>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ffba 	bl	8000f3c <expander_write>
    pulse_enable(x);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffca 	bl	8000f64 <pulse_enable>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8000fde:	2308      	movs	r3, #8
 8000fe0:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffa9 	bl	8000f3c <expander_write>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2201      	movs	r2, #1
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffc8 	bl	8000f9e <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffc0 	bl	8000f9e <write4bits>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f023 030f 	bic.w	r3, r3, #15
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffae 	bl	8000f9e <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2201      	movs	r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffa6 	bl	8000f9e <write4bits>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <lcd_clear>:

void lcd_clear(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff ffc7 	bl	8000ff2 <lcd_send_cmd>
    HAL_Delay(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f003 f8bb 	bl	80041e0 <HAL_Delay>
    lcd_send_cmd(0x80);
 800106a:	2080      	movs	r0, #128	@ 0x80
 800106c:	f7ff ffc1 	bl	8000ff2 <lcd_send_cmd>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d901      	bls.n	800108e <lcd_put_cur+0x1a>
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <lcd_put_cur+0x40>)
 8001092:	5cd2      	ldrb	r2, [r2, r3]
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffa4 	bl	8000ff2 <lcd_send_cmd>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08009df0 	.word	0x08009df0

080010b8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 80010c0:	e006      	b.n	80010d0 <lcd_send_string+0x18>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ffab 	bl	8001026 <lcd_send_data>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f4      	bne.n	80010c2 <lcd_send_string+0xa>
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <lcd_init>:

void lcd_init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	@ 0x32
 80010e8:	f003 f87a 	bl	80041e0 <HAL_Delay>
    lcd_backlight_on();
 80010ec:	f7ff ff74 	bl	8000fd8 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	2030      	movs	r0, #48	@ 0x30
 80010f6:	f7ff ff52 	bl	8000f9e <write4bits>
 80010fa:	2005      	movs	r0, #5
 80010fc:	f003 f870 	bl	80041e0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001100:	2201      	movs	r2, #1
 8001102:	2100      	movs	r1, #0
 8001104:	2030      	movs	r0, #48	@ 0x30
 8001106:	f7ff ff4a 	bl	8000f9e <write4bits>
 800110a:	2001      	movs	r0, #1
 800110c:	f003 f868 	bl	80041e0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001110:	2201      	movs	r2, #1
 8001112:	2100      	movs	r1, #0
 8001114:	2030      	movs	r0, #48	@ 0x30
 8001116:	f7ff ff42 	bl	8000f9e <write4bits>
 800111a:	2001      	movs	r0, #1
 800111c:	f003 f860 	bl	80041e0 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001120:	2201      	movs	r2, #1
 8001122:	2100      	movs	r1, #0
 8001124:	2020      	movs	r0, #32
 8001126:	f7ff ff3a 	bl	8000f9e <write4bits>
 800112a:	2001      	movs	r0, #1
 800112c:	f003 f858 	bl	80041e0 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001130:	2028      	movs	r0, #40	@ 0x28
 8001132:	f7ff ff5e 	bl	8000ff2 <lcd_send_cmd>
 8001136:	2001      	movs	r0, #1
 8001138:	f003 f852 	bl	80041e0 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 800113c:	2008      	movs	r0, #8
 800113e:	f7ff ff58 	bl	8000ff2 <lcd_send_cmd>
 8001142:	2001      	movs	r0, #1
 8001144:	f003 f84c 	bl	80041e0 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001148:	f7ff ff87 	bl	800105a <lcd_clear>
 800114c:	2002      	movs	r0, #2
 800114e:	f003 f847 	bl	80041e0 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001152:	2006      	movs	r0, #6
 8001154:	f7ff ff4d 	bl	8000ff2 <lcd_send_cmd>
 8001158:	2001      	movs	r0, #1
 800115a:	f003 f841 	bl	80041e0 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 800115e:	200c      	movs	r0, #12
 8001160:	f7ff ff47 	bl	8000ff2 <lcd_send_cmd>
 8001164:	2001      	movs	r0, #1
 8001166:	f003 f83b 	bl	80041e0 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
 8001172:	f003 f82b 	bl	80041cc <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}

0800117c <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <led_write+0x30>)
 8001190:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4a06      	ldr	r2, [pc, #24]	@ (80011b0 <led_write+0x34>)
 8001198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119c:	79ba      	ldrb	r2, [r7, #6]
 800119e:	4619      	mov	r1, r3
 80011a0:	f003 ffc7 	bl	8005132 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000010 	.word	0x20000010

080011b4 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffda 	bl	800117c <led_write>
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffcc 	bl	800117c <led_write>
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <LED_Init>:

void LED_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 80011f2:	2210      	movs	r2, #16
 80011f4:	2100      	movs	r1, #0
 80011f6:	4815      	ldr	r0, [pc, #84]	@ (800124c <LED_Init+0x60>)
 80011f8:	f007 fd98 	bl	8008d2c <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 80011fc:	2204      	movs	r2, #4
 80011fe:	2100      	movs	r1, #0
 8001200:	4813      	ldr	r0, [pc, #76]	@ (8001250 <LED_Init+0x64>)
 8001202:	f007 fd93 	bl	8008d2c <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001206:	2210      	movs	r2, #16
 8001208:	2100      	movs	r1, #0
 800120a:	4812      	ldr	r0, [pc, #72]	@ (8001254 <LED_Init+0x68>)
 800120c:	f007 fd8e 	bl	8008d2c <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	e012      	b.n	800123c <LED_Init+0x50>
        led_off((LedColor)i);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffd8 	bl	80011d0 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <LED_Init+0x60>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2100      	movs	r1, #0
 8001226:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <LED_Init+0x60>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	2200      	movs	r2, #0
 8001234:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3301      	adds	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	dde9      	ble.n	8001216 <LED_Init+0x2a>
    }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000148 	.word	0x20000148
 8001250:	20000158 	.word	0x20000158
 8001254:	2000015c 	.word	0x2000015c

08001258 <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 800125e:	f7ff ff86 	bl	800116e <now_ms>
 8001262:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	e064      	b.n	8001334 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 800126a:	4a36      	ldr	r2, [pc, #216]	@ (8001344 <LED_Task+0xec>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <LED_Task+0x24>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00b      	beq.n	8001292 <LED_Task+0x3a>
 800127a:	e015      	b.n	80012a8 <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 800127c:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <LED_Task+0xf0>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffa0 	bl	80011d0 <led_off>
            break;
 8001290:	e04d      	b.n	800132e <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001292:	4a2d      	ldr	r2, [pc, #180]	@ (8001348 <LED_Task+0xf0>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff87 	bl	80011b4 <led_on>
            break;
 80012a6:	e042      	b.n	800132e <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 80012a8:	4a26      	ldr	r2, [pc, #152]	@ (8001344 <LED_Task+0xec>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <LED_Task+0x6c>
 80012b6:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <LED_Task+0xec>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012c2:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <LED_Task+0xf4>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dc2b      	bgt.n	800132c <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 80012d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <LED_Task+0xf0>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <LED_Task+0xf0>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	460a      	mov	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <LED_Task+0xf0>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <LED_Task+0xb2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff56 	bl	80011b4 <led_on>
 8001308:	e004      	b.n	8001314 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff5e 	bl	80011d0 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <LED_Task+0xec>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	885b      	ldrh	r3, [r3, #2]
 800131e:	461a      	mov	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	441a      	add	r2, r3
 8001324:	4909      	ldr	r1, [pc, #36]	@ (800134c <LED_Task+0xf4>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 800132c:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3301      	adds	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	dd97      	ble.n	800126a <LED_Task+0x12>
        }
    }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000148 	.word	0x20000148
 8001348:	20000158 	.word	0x20000158
 800134c:	2000015c 	.word	0x2000015c

08001350 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	e00d      	b.n	8001378 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <LED_ClearAllIntents+0x3c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2100      	movs	r1, #0
 8001362:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001366:	4a09      	ldr	r2, [pc, #36]	@ (800138c <LED_ClearAllIntents+0x3c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3301      	adds	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b03      	cmp	r3, #3
 800137c:	ddee      	ble.n	800135c <LED_ClearAllIntents+0xc>
    }
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000148 	.word	0x20000148

08001390 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	460b      	mov	r3, r1
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	4613      	mov	r3, r2
 80013a0:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d80b      	bhi.n	80013c0 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <LED_SetIntent+0x3c>)
 80013ac:	79ba      	ldrb	r2, [r7, #6]
 80013ae:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <LED_SetIntent+0x3c>)
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	805a      	strh	r2, [r3, #2]
 80013be:	e000      	b.n	80013c2 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80013c0:	bf00      	nop
}
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000148 	.word	0x20000148

080013d0 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001400:	480a      	ldr	r0, [pc, #40]	@ (800142c <LoRa_WriteReg+0x50>)
 8001402:	f003 fe96 	bl	8005132 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001406:	f107 010c 	add.w	r1, r7, #12
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2202      	movs	r2, #2
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <LoRa_WriteReg+0x54>)
 8001412:	f006 f806 	bl	8007422 <HAL_SPI_Transmit>
    NSS_HIGH();
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <LoRa_WriteReg+0x50>)
 800141e:	f003 fe88 	bl	8005132 <HAL_GPIO_WritePin>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40010800 	.word	0x40010800
 8001430:	20000204 	.word	0x20000204

08001434 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001444:	b2db      	uxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001452:	480f      	ldr	r0, [pc, #60]	@ (8001490 <LoRa_ReadReg+0x5c>)
 8001454:	f003 fe6d 	bl	8005132 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001458:	f107 010f 	add.w	r1, r7, #15
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2201      	movs	r2, #1
 8001462:	480c      	ldr	r0, [pc, #48]	@ (8001494 <LoRa_ReadReg+0x60>)
 8001464:	f005 ffdd 	bl	8007422 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8001468:	f107 010e 	add.w	r1, r7, #14
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	4808      	ldr	r0, [pc, #32]	@ (8001494 <LoRa_ReadReg+0x60>)
 8001474:	f006 f919 	bl	80076aa <HAL_SPI_Receive>
    NSS_HIGH();
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <LoRa_ReadReg+0x5c>)
 8001480:	f003 fe57 	bl	8005132 <HAL_GPIO_WritePin>
    return rx;
 8001484:	7bbb      	ldrb	r3, [r7, #14]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40010800 	.word	0x40010800
 8001494:	20000204 	.word	0x20000204

08001498 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <LoRa_WriteBuffer+0x5c>)
 80014ba:	f003 fe3a 	bl	8005132 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 80014be:	f107 010f 	add.w	r1, r7, #15
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	2201      	movs	r2, #1
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <LoRa_WriteBuffer+0x60>)
 80014ca:	f005 ffaa 	bl	8007422 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <LoRa_WriteBuffer+0x60>)
 80014da:	f005 ffa2 	bl	8007422 <HAL_SPI_Transmit>
    NSS_HIGH();
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014e4:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <LoRa_WriteBuffer+0x5c>)
 80014e6:	f003 fe24 	bl	8005132 <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40010800 	.word	0x40010800
 80014f8:	20000204 	.word	0x20000204

080014fc <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2140      	movs	r1, #64	@ 0x40
 8001504:	4807      	ldr	r0, [pc, #28]	@ (8001524 <LoRa_Reset+0x28>)
 8001506:	f003 fe14 	bl	8005132 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800150a:	2002      	movs	r0, #2
 800150c:	f002 fe68 	bl	80041e0 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2140      	movs	r1, #64	@ 0x40
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <LoRa_Reset+0x28>)
 8001516:	f003 fe0c 	bl	8005132 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800151a:	2002      	movs	r0, #2
 800151c:	f002 fe60 	bl	80041e0 <HAL_Delay>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40010c00 	.word	0x40010c00

08001528 <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	2000      	movs	r0, #0
 8001534:	460a      	mov	r2, r1
 8001536:	4603      	mov	r3, r0
 8001538:	0b55      	lsrs	r5, r2, #13
 800153a:	04d4      	lsls	r4, r2, #19
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <LoRa_SetFrequency+0x78>)
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f907 	bl	8000758 <__aeabi_uldivmod>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8001552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	0c02      	lsrs	r2, r0, #16
 8001560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001564:	0c0b      	lsrs	r3, r1, #16
 8001566:	b2d3      	uxtb	r3, r2
 8001568:	4619      	mov	r1, r3
 800156a:	2006      	movs	r0, #6
 800156c:	f7ff ff36 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001570:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	0a02      	lsrs	r2, r0, #8
 800157e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001582:	0a0b      	lsrs	r3, r1, #8
 8001584:	b2d3      	uxtb	r3, r2
 8001586:	4619      	mov	r1, r3
 8001588:	2007      	movs	r0, #7
 800158a:	f7ff ff27 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 800158e:	7a3b      	ldrb	r3, [r7, #8]
 8001590:	4619      	mov	r1, r3
 8001592:	2008      	movs	r0, #8
 8001594:	f7ff ff22 	bl	80013dc <LoRa_WriteReg>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	01e84800 	.word	0x01e84800

080015a4 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80015a8:	f7ff ffa8 	bl	80014fc <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 80015ac:	2100      	movs	r1, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ff14 	bl	80013dc <LoRa_WriteReg>
    HAL_Delay(2);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f002 fe13 	bl	80041e0 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff ff0d 	bl	80013dc <LoRa_WriteReg>
    HAL_Delay(2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f002 fe0c 	bl	80041e0 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <LoRa_Init+0x8c>)
 80015ca:	f7ff ffad 	bl	8001528 <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 80015ce:	218f      	movs	r1, #143	@ 0x8f
 80015d0:	2009      	movs	r0, #9
 80015d2:	f7ff ff03 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 80015d6:	2187      	movs	r1, #135	@ 0x87
 80015d8:	204d      	movs	r0, #77	@ 0x4d
 80015da:	f7ff feff 	bl	80013dc <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 80015de:	2123      	movs	r1, #35	@ 0x23
 80015e0:	200c      	movs	r0, #12
 80015e2:	f7ff fefb 	bl	80013dc <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 80015e6:	2172      	movs	r1, #114	@ 0x72
 80015e8:	201d      	movs	r0, #29
 80015ea:	f7ff fef7 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80015ee:	2174      	movs	r1, #116	@ 0x74
 80015f0:	201e      	movs	r0, #30
 80015f2:	f7ff fef3 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80015f6:	2104      	movs	r1, #4
 80015f8:	2026      	movs	r0, #38	@ 0x26
 80015fa:	f7ff feef 	bl	80013dc <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80015fe:	2100      	movs	r1, #0
 8001600:	2020      	movs	r0, #32
 8001602:	f7ff feeb 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8001606:	2108      	movs	r1, #8
 8001608:	2021      	movs	r0, #33	@ 0x21
 800160a:	f7ff fee7 	bl	80013dc <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 800160e:	2122      	movs	r1, #34	@ 0x22
 8001610:	2039      	movs	r0, #57	@ 0x39
 8001612:	f7ff fee3 	bl	80013dc <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 8001616:	2100      	movs	r1, #0
 8001618:	2040      	movs	r0, #64	@ 0x40
 800161a:	f7ff fedf 	bl	80013dc <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 800161e:	21ff      	movs	r1, #255	@ 0xff
 8001620:	2012      	movs	r0, #18
 8001622:	f7ff fedb 	bl	80013dc <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 8001626:	f000 f80d 	bl	8001644 <LoRa_SetRxContinuous>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	19cf0e40 	.word	0x19cf0e40

08001634 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
 8001638:	2181      	movs	r1, #129	@ 0x81
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fece 	bl	80013dc <LoRa_WriteReg>
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
 8001648:	2185      	movs	r1, #133	@ 0x85
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fec6 	bl	80013dc <LoRa_WriteReg>
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
 8001658:	2183      	movs	r1, #131	@ 0x83
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff febe 	bl	80013dc <LoRa_WriteReg>
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <LoRa_SendPacket+0x98>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d03c      	beq.n	80016f2 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 8001678:	f7ff ffdc 	bl	8001634 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 800167c:	2100      	movs	r1, #0
 800167e:	200e      	movs	r0, #14
 8001680:	f7ff feac 	bl	80013dc <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8001684:	2100      	movs	r1, #0
 8001686:	200d      	movs	r0, #13
 8001688:	f7ff fea8 	bl	80013dc <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	461a      	mov	r2, r3
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff ff00 	bl	8001498 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	4619      	mov	r1, r3
 800169c:	2022      	movs	r0, #34	@ 0x22
 800169e:	f7ff fe9d 	bl	80013dc <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80016a2:	21ff      	movs	r1, #255	@ 0xff
 80016a4:	2012      	movs	r0, #18
 80016a6:	f7ff fe99 	bl	80013dc <LoRa_WriteReg>

    LoRa_SetTx();
 80016aa:	f7ff ffd3 	bl	8001654 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 80016ae:	f002 fd8d 	bl	80041cc <HAL_GetTick>
 80016b2:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80016b4:	e00e      	b.n	80016d4 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 80016b6:	f002 fd89 	bl	80041cc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016c4:	d906      	bls.n	80016d4 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 80016c6:	21ff      	movs	r1, #255	@ 0xff
 80016c8:	2012      	movs	r0, #18
 80016ca:	f7ff fe87 	bl	80013dc <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 80016ce:	f7ff ffb9 	bl	8001644 <LoRa_SetRxContinuous>
            return;
 80016d2:	e00f      	b.n	80016f4 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80016d4:	2012      	movs	r0, #18
 80016d6:	f7ff fead 	bl	8001434 <LoRa_ReadReg>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0e8      	beq.n	80016b6 <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 80016e4:	2108      	movs	r1, #8
 80016e6:	2012      	movs	r0, #18
 80016e8:	f7ff fe78 	bl	80013dc <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 80016ec:	f7ff ffaa 	bl	8001644 <LoRa_SetRxContinuous>
 80016f0:	e000      	b.n	80016f4 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 80016f2:	bf00      	nop
}
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000018 	.word	0x20000018

08001700 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4803      	ldr	r0, [pc, #12]	@ (8001718 <Debug_Print+0x18>)
 800170c:	f002 fc8a 	bl	8004024 <UART_TransmitString>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002a4 	.word	0x200002a4

0800171c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b08b      	sub	sp, #44	@ 0x2c
 8001720:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001722:	f002 fcfb 	bl	800411c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001726:	f000 f8a7 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172a:	f000 fa17 	bl	8001b5c <MX_GPIO_Init>
  MX_ADC1_Init();
 800172e:	f000 f8fb 	bl	8001928 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8001732:	f000 f965 	bl	8001a00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001736:	f000 f9e7 	bl	8001b08 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800173a:	f000 f933 	bl	80019a4 <MX_I2C2_Init>
  MX_TIM3_Init();
 800173e:	f000 f995 	bl	8001a6c <MX_TIM3_Init>
  UART_Init();
 8001742:	f002 fc51 	bl	8003fe8 <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001746:	4843      	ldr	r0, [pc, #268]	@ (8001854 <main+0x138>)
 8001748:	f006 fbcc 	bl	8007ee4 <HAL_TIM_Base_Start>
  RF_Init();
 800174c:	f000 ff60 	bl	8002610 <RF_Init>
  lcd_init();
 8001750:	f7ff fcc7 	bl	80010e2 <lcd_init>
  ADC_Init(&hadc1);
 8001754:	4840      	ldr	r0, [pc, #256]	@ (8001858 <main+0x13c>)
 8001756:	f7ff f9e9 	bl	8000b2c <ADC_Init>
  LoRa_Init();
 800175a:	f7ff ff23 	bl	80015a4 <LoRa_Init>
  Screen_Init();
 800175e:	f001 fe11 	bl	8003384 <Screen_Init>
  UART_Init();
 8001762:	f002 fc41 	bl	8003fe8 <UART_Init>
  Switches_Init();
 8001766:	f002 fb41 	bl	8003dec <Switches_Init>
  Relay_Init();
 800176a:	f000 fecb 	bl	8002504 <Relay_Init>
  LED_Init();
 800176e:	f7ff fd3d 	bl	80011ec <LED_Init>

  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 8001772:	f000 ffe9 	bl	8002748 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 8001776:	f001 f837 	bl	80027e8 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 31, 11, 25, 9, 2025);

  Debug_Print("System Initialized\r\n");
 800177a:	4838      	ldr	r0, [pc, #224]	@ (800185c <main+0x140>)
 800177c:	f7ff ffc0 	bl	8001700 <Debug_Print>

  uint8_t lastSecond = 255;
 8001780:	23ff      	movs	r3, #255	@ 0xff
 8001782:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  RF_SendCode(1766904, 24);
 8001784:	2118      	movs	r1, #24
 8001786:	4836      	ldr	r0, [pc, #216]	@ (8001860 <main+0x144>)
 8001788:	f000 ff83 	bl	8002692 <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 800178c:	f002 f8f0 	bl	8003970 <Screen_HandleSwitches>
      Screen_Update();
 8001790:	f001 fbce 	bl	8002f30 <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8001794:	4933      	ldr	r1, [pc, #204]	@ (8001864 <main+0x148>)
 8001796:	4830      	ldr	r0, [pc, #192]	@ (8001858 <main+0x13c>)
 8001798:	f7ff f9d8 	bl	8000b4c <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 800179c:	f001 f824 	bl	80027e8 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <main+0x14c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d025      	beq.n	80017f6 <main+0xda>
          lastSecond = time.seconds;
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <main+0x14c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <main+0x14c>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 80017b4:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <main+0x14c>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 80017ba:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <main+0x14c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 80017c0:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 80017c2:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <main+0x14c>)
 80017c4:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 80017c6:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <main+0x14c>)
 80017ca:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 80017cc:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <main+0x14c>)
 80017d0:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 80017d2:	461d      	mov	r5, r3
                   time.dayofweek);
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <main+0x14c>)
 80017d6:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 80017d8:	9305      	str	r3, [sp, #20]
 80017da:	9504      	str	r5, [sp, #16]
 80017dc:	9403      	str	r4, [sp, #12]
 80017de:	9002      	str	r0, [sp, #8]
 80017e0:	9101      	str	r1, [sp, #4]
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	4633      	mov	r3, r6
 80017e6:	4a21      	ldr	r2, [pc, #132]	@ (800186c <main+0x150>)
 80017e8:	2164      	movs	r1, #100	@ 0x64
 80017ea:	4821      	ldr	r0, [pc, #132]	@ (8001870 <main+0x154>)
 80017ec:	f007 f990 	bl	8008b10 <sniprintf>
          Debug_Print(dbg);
 80017f0:	481f      	ldr	r0, [pc, #124]	@ (8001870 <main+0x154>)
 80017f2:	f7ff ff85 	bl	8001700 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	481e      	ldr	r0, [pc, #120]	@ (8001874 <main+0x158>)
 80017fa:	f002 fc27 	bl	800404c <UART_GetReceivedPacket>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01f      	beq.n	8001844 <main+0x128>
          char *p = receivedUartPacket;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <main+0x158>)
 8001806:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 8001808:	481a      	ldr	r0, [pc, #104]	@ (8001874 <main+0x158>)
 800180a:	f7fe fca9 	bl	8000160 <strlen>
 800180e:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d913      	bls.n	800183e <main+0x122>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b40      	cmp	r3, #64	@ 0x40
 800181c:	d10f      	bne.n	800183e <main+0x122>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3b01      	subs	r3, #1
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b23      	cmp	r3, #35	@ 0x23
 800182a:	d108      	bne.n	800183e <main+0x122>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3301      	adds	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f000 fd3e 	bl	80022c0 <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 8001844:	f000 fe3c 	bl	80024c0 <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 8001848:	f7ff fd06 	bl	8001258 <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 800184c:	2014      	movs	r0, #20
 800184e:	f002 fcc7 	bl	80041e0 <HAL_Delay>
  {
 8001852:	e797      	b.n	8001784 <main+0x68>
 8001854:	2000025c 	.word	0x2000025c
 8001858:	2000016c 	.word	0x2000016c
 800185c:	080099c0 	.word	0x080099c0
 8001860:	001af5f8 	.word	0x001af5f8
 8001864:	200002ec 	.word	0x200002ec
 8001868:	20000424 	.word	0x20000424
 800186c:	080099d8 	.word	0x080099d8
 8001870:	20000358 	.word	0x20000358
 8001874:	20000318 	.word	0x20000318

08001878 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	@ 0x50
 800187c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001882:	2228      	movs	r2, #40	@ 0x28
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f007 fa50 	bl	8008d2c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16; // 64 MHz
 80018bc:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80018c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80018c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 ff78 	bl	80067bc <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x5e>
 80018d2:	f000 f9d7 	bl	8001c84 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e6:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 f9e4 	bl	8006cc0 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x8a>
 80018fe:	f000 f9c1 	bl	8001c84 <Error_Handler>

    // Use HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001902:	2302      	movs	r3, #2
 8001904:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800190a:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fb64 	bl	8006fdc <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xa6>
 800191a:	f000 f9b3 	bl	8001c84 <Error_Handler>
}
 800191e:	bf00      	nop
 8001920:	3750      	adds	r7, #80	@ 0x50
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <MX_ADC1_Init+0x74>)
 800193a:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <MX_ADC1_Init+0x78>)
 800193c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800193e:	4b17      	ldr	r3, [pc, #92]	@ (800199c <MX_ADC1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <MX_ADC1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_ADC1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_ADC1_Init+0x74>)
 8001952:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_ADC1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_ADC1_Init+0x74>)
 8001960:	2201      	movs	r2, #1
 8001962:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001964:	480d      	ldr	r0, [pc, #52]	@ (800199c <MX_ADC1_Init+0x74>)
 8001966:	f002 fc5f 	bl	8004228 <HAL_ADC_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 f988 	bl	8001c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001978:	2301      	movs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_ADC1_Init+0x74>)
 8001986:	f002 ff13 	bl	80047b0 <HAL_ADC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001990:	f000 f978 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000016c 	.word	0x2000016c
 80019a0:	40012400 	.word	0x40012400

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f003 fbd7 	bl	8005194 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 f94a 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000019c 	.word	0x2000019c
 80019f8:	40005800 	.word	0x40005800
 80019fc:	000186a0 	.word	0x000186a0

08001a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <MX_SPI1_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a34:	2218      	movs	r2, #24
 8001a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_SPI1_Init+0x64>)
 8001a52:	f005 fc62 	bl	800731a <HAL_SPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f000 f912 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000204 	.word	0x20000204
 8001a68:	40013000 	.word	0x40013000

08001a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b04 <MX_TIM3_Init+0x98>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001ab0:	f006 f9c9 	bl	8007e46 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001aba:	f000 f8e3 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001acc:	f006 fa54 	bl	8007f78 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 f8d5 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM3_Init+0x94>)
 8001ae8:	f006 fc12 	bl	8008310 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001af2:	f000 f8c7 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000025c 	.word	0x2000025c
 8001b04:	40000400 	.word	0x40000400

08001b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <MX_USART1_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b40:	f006 fc44 	bl	80083cc <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 f89b 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200002a4 	.word	0x200002a4
 8001b58:	40013800 	.word	0x40013800

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a3f      	ldr	r2, [pc, #252]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b88:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a39      	ldr	r2, [pc, #228]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a33      	ldr	r2, [pc, #204]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_GPIO_Init+0x118>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f240 3147 	movw	r1, #839	@ 0x347
 8001bd6:	4828      	ldr	r0, [pc, #160]	@ (8001c78 <MX_GPIO_Init+0x11c>)
 8001bd8:	f003 faab 	bl	8005132 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001be2:	4826      	ldr	r0, [pc, #152]	@ (8001c7c <MX_GPIO_Init+0x120>)
 8001be4:	f003 faa5 	bl	8005132 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001be8:	23c0      	movs	r3, #192	@ 0xc0
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bec:	2303      	movs	r3, #3
 8001bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4821      	ldr	r0, [pc, #132]	@ (8001c7c <MX_GPIO_Init+0x120>)
 8001bf8:	f003 f900 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001bfc:	f240 3347 	movw	r3, #839	@ 0x347
 8001c00:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4619      	mov	r1, r3
 8001c14:	4818      	ldr	r0, [pc, #96]	@ (8001c78 <MX_GPIO_Init+0x11c>)
 8001c16:	f003 f8f1 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8001c1a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_GPIO_Init+0x124>)
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4812      	ldr	r0, [pc, #72]	@ (8001c78 <MX_GPIO_Init+0x11c>)
 8001c30:	f003 f8e4 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001c34:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480b      	ldr	r0, [pc, #44]	@ (8001c7c <MX_GPIO_Init+0x120>)
 8001c4e:	f003 f8d5 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <MX_GPIO_Init+0x11c>)
 8001c66:	f003 f8c9 	bl	8004dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	10310000 	.word	0x10310000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c94:	f3bf 8f4f 	dsb	sy
}
 8001c98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <__NVIC_SystemReset+0x24>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ca2:	4904      	ldr	r1, [pc, #16]	@ (8001cb4 <__NVIC_SystemReset+0x24>)
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <__NVIC_SystemReset+0x28>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <__NVIC_SystemReset+0x20>
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	05fa0004 	.word	0x05fa0004

08001cbc <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL;
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f002 fa84 	bl	80041cc <HAL_GetTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor Control ===== */
static inline void motor_apply(bool on)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fc5c 	bl	8002598 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <motor_apply+0x1e>
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	e000      	b.n	8001cec <motor_apply+0x20>
 8001cea:	2200      	movs	r2, #0
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <motor_apply+0x58>)
 8001cee:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00f      	beq.n	8001d16 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <motor_apply+0x5c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <motor_apply+0x50>
            maxRunTimerArmed = true;
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <motor_apply+0x5c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8001d0a:	f7ff ffd7 	bl	8001cbc <now_ms>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <motor_apply+0x60>)
 8001d12:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8001d14:	e002      	b.n	8001d1c <motor_apply+0x50>
        maxRunTimerArmed = false;
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <motor_apply+0x5c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200003bc 	.word	0x200003bc
 8001d28:	2000040d 	.word	0x2000040d
 8001d2c:	20000410 	.word	0x20000410

08001d30 <start_motor>:

static inline void start_motor(void) { motor_apply(true); }
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff ffc9 	bl	8001ccc <motor_apply>
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <stop_motor>:
static inline void stop_motor(void)  { motor_apply(false); }
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff ffc2 	bl	8001ccc <motor_apply>
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <ModelHandle_ToggleManual>:

/* ===== Manual Mode ===== */
/* Toggle manual ON/OFF (button short press) */
void ModelHandle_ToggleManual(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    manualOverride = true;   // manual bypass enabled
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <ModelHandle_ToggleManual+0x50>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
    manualActive   = !manualActive;
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <ModelHandle_ToggleManual+0x54>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <ModelHandle_ToggleManual+0x54>)
 8001d74:	701a      	strb	r2, [r3, #0]

    if (manualActive) {
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <ModelHandle_ToggleManual+0x54>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <ModelHandle_ToggleManual+0x40>
        start_motor();
 8001d80:	f7ff ffd6 	bl	8001d30 <start_motor>
        printf("Manual ON\r\n");
 8001d84:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <ModelHandle_ToggleManual+0x58>)
 8001d86:	f006 febb 	bl	8008b00 <puts>
    } else {
        stop_motor();
        printf("Manual OFF\r\n");
    }
}
 8001d8a:	e004      	b.n	8001d96 <ModelHandle_ToggleManual+0x4a>
        stop_motor();
 8001d8c:	f7ff ffd7 	bl	8001d3e <stop_motor>
        printf("Manual OFF\r\n");
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <ModelHandle_ToggleManual+0x5c>)
 8001d92:	f006 feb5 	bl	8008b00 <puts>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000040c 	.word	0x2000040c
 8001da0:	200003bd 	.word	0x200003bd
 8001da4:	08009a0c 	.word	0x08009a0c
 8001da8:	08009a18 	.word	0x08009a18

08001dac <ModelHandle_ManualLongPress>:

/* Manual long press = restart device */
void ModelHandle_ManualLongPress(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
    manualOverride = false;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <ModelHandle_ManualLongPress+0x20>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <ModelHandle_ManualLongPress+0x24>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

    printf("Manual Long Press → Restarting into last mode...\r\n");
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <ModelHandle_ManualLongPress+0x28>)
 8001dbe:	f006 fe9f 	bl	8008b00 <puts>
    HAL_Delay(100);
 8001dc2:	2064      	movs	r0, #100	@ 0x64
 8001dc4:	f002 fa0c 	bl	80041e0 <HAL_Delay>
    NVIC_SystemReset();   // hardware reset, system boots into last saved mode
 8001dc8:	f7ff ff62 	bl	8001c90 <__NVIC_SystemReset>
 8001dcc:	2000040c 	.word	0x2000040c
 8001dd0:	200003bd 	.word	0x200003bd
 8001dd4:	08009a24 	.word	0x08009a24

08001dd8 <countdown_tick>:
    countdownDeadline = now_ms() + (seconds * 1000UL);
    start_motor();
}

static void countdown_tick(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <countdown_tick+0x7c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12e      	bne.n	8001e4c <countdown_tick+0x74>

    uint32_t tnow = now_ms();
 8001dee:	f7ff ff65 	bl	8001cbc <now_ms>
 8001df2:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <countdown_tick+0x80>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dc08      	bgt.n	8001e12 <countdown_tick+0x3a>
        stop_motor();
 8001e00:	f7ff ff9d 	bl	8001d3e <stop_motor>
        countdownActive   = false;
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <countdown_tick+0x7c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <countdown_tick+0x84>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
        return;
 8001e10:	e01d      	b.n	8001e4e <countdown_tick+0x76>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <countdown_tick+0x80>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001e22:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <countdown_tick+0x88>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <countdown_tick+0x84>)
 8001e2c:	6013      	str	r3, [r2, #0]

    if (adcData.voltages[4] < 0.1f) {
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <countdown_tick+0x8c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <countdown_tick+0x90>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fc47 	bl	80006c8 <__aeabi_fcmplt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <countdown_tick+0x76>
        stop_motor();
 8001e40:	f7ff ff7d 	bl	8001d3e <stop_motor>
        countdownActive = false;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <countdown_tick+0x7c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	e000      	b.n	8001e4e <countdown_tick+0x76>
    if (!countdownActive) return;
 8001e4c:	bf00      	nop
    }
}
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200003be 	.word	0x200003be
 8001e58:	200003c8 	.word	0x200003c8
 8001e5c:	200003c4 	.word	0x200003c4
 8001e60:	10624dd3 	.word	0x10624dd3
 8001e64:	200002ec 	.word	0x200002ec
 8001e68:	3dcccccd 	.word	0x3dcccccd

08001e6c <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) { twistActive = false; return; }
 8001e72:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <twist_tick+0xbc>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <twist_tick+0x1c>
 8001e80:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <twist_tick+0xc0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e04c      	b.n	8001f22 <twist_tick+0xb6>
    twistActive = true;
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <twist_tick+0xc0>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]

    uint32_t tnow = now_ms();
 8001e8e:	f7ff ff15 	bl	8001cbc <now_ms>
 8001e92:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001e94:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <twist_tick+0xc4>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dc3f      	bgt.n	8001f20 <twist_tick+0xb4>

    twist_on_phase = !twist_on_phase;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <twist_tick+0xc8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f083 0301 	eor.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <twist_tick+0xc8>)
 8001ebc:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <twist_tick+0xc8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <twist_tick+0x76>
        start_motor();
 8001ec6:	f7ff ff33 	bl	8001d30 <start_motor>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8001eca:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <twist_tick+0xbc>)
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed4:	fb03 f202 	mul.w	r2, r3, r2
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <twist_tick+0xc4>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e00c      	b.n	8001efc <twist_tick+0x90>
    } else {
        stop_motor();
 8001ee2:	f7ff ff2c 	bl	8001d3e <stop_motor>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <twist_tick+0xbc>)
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef0:	fb03 f202 	mul.w	r2, r3, r2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <twist_tick+0xc4>)
 8001efa:	6013      	str	r3, [r2, #0]
    }

    if (adcData.voltages[4] < 0.1f) {
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <twist_tick+0xcc>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	490e      	ldr	r1, [pc, #56]	@ (8001f3c <twist_tick+0xd0>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fbe0 	bl	80006c8 <__aeabi_fcmplt>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <twist_tick+0xb6>
        stop_motor();
 8001f0e:	f7ff ff16 	bl	8001d3e <stop_motor>
        twistSettings.twistActive = false;
 8001f12:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <twist_tick+0xbc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
        twistActive = false;
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <twist_tick+0xc0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e000      	b.n	8001f22 <twist_tick+0xb6>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001f20:	bf00      	nop
    }
}
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000024 	.word	0x20000024
 8001f2c:	200003bf 	.word	0x200003bf
 8001f30:	20000418 	.word	0x20000418
 8001f34:	20000414 	.word	0x20000414
 8001f38:	200002ec 	.word	0x200002ec
 8001f3c:	3dcccccd 	.word	0x3dcccccd

08001f40 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 8001f46:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <search_tick+0xd8>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f083 0301 	eor.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <search_tick+0x1c>
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <search_tick+0xdc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e059      	b.n	8002010 <search_tick+0xd0>
    searchActive = true;
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <search_tick+0xdc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]

    uint32_t tnow = now_ms();
 8001f62:	f7ff feab 	bl	8001cbc <now_ms>
 8001f66:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <search_tick+0xe0>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc4c      	bgt.n	800200e <search_tick+0xce>

    if (!search_in_test) {
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <search_tick+0xe4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <search_tick+0x64>
        search_in_test = true;
 8001f82:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <search_tick+0xe4>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
        start_motor();
 8001f88:	f7ff fed2 	bl	8001d30 <start_motor>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <search_tick+0xd8>)
 8001f8e:	889b      	ldrh	r3, [r3, #4]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <search_tick+0xe0>)
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e035      	b.n	8002010 <search_tick+0xd0>
    } else {
        if (adcData.voltages[0] < 0.1f) {
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <search_tick+0xe8>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4920      	ldr	r1, [pc, #128]	@ (800202c <search_tick+0xec>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fb8c 	bl	80006c8 <__aeabi_fcmplt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <search_tick+0x98>
            stop_motor();
 8001fb6:	f7ff fec2 	bl	8001d3e <stop_motor>
            search_in_test = false;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <search_tick+0xe4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
            search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8001fc0:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <search_tick+0xd8>)
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a13      	ldr	r2, [pc, #76]	@ (8002020 <search_tick+0xe0>)
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01b      	b.n	8002010 <search_tick+0xd0>
        } else {
            if (adcData.voltages[4] < 0.1f) {
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <search_tick+0xe8>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4913      	ldr	r1, [pc, #76]	@ (800202c <search_tick+0xec>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fb72 	bl	80006c8 <__aeabi_fcmplt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <search_tick+0xbc>
                stop_motor();
 8001fea:	f7ff fea8 	bl	8001d3e <stop_motor>
                searchSettings.searchActive = false;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <search_tick+0xd8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
                searchActive = false;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	@ (800201c <search_tick+0xdc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e009      	b.n	8002010 <search_tick+0xd0>
            } else {
                start_motor();
 8001ffc:	f7ff fe98 	bl	8001d30 <start_motor>
                search_phase_deadline = tnow + 5000;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002006:	3308      	adds	r3, #8
 8002008:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <search_tick+0xe0>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e000      	b.n	8002010 <search_tick+0xd0>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 800200e:	bf00      	nop
            }
        }
    }
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000001c 	.word	0x2000001c
 800201c:	200003c0 	.word	0x200003c0
 8002020:	20000420 	.word	0x20000420
 8002024:	2000041c 	.word	0x2000041c
 8002028:	200002ec 	.word	0x200002ec
 800202c:	3dcccccd 	.word	0x3dcccccd

08002030 <seconds_since_midnight>:

/* ===== Timer ===== */
static uint32_t seconds_since_midnight(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 8002036:	f7ff fe41 	bl	8001cbc <now_ms>
 800203a:	4603      	mov	r3, r0
 800203c:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <seconds_since_midnight+0x30>)
 800203e:	fba2 1203 	umull	r1, r2, r2, r3
 8002042:	0e12      	lsrs	r2, r2, #24
 8002044:	4907      	ldr	r1, [pc, #28]	@ (8002064 <seconds_since_midnight+0x34>)
 8002046:	fb01 f202 	mul.w	r2, r1, r2
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <seconds_since_midnight+0x38>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	099b      	lsrs	r3, r3, #6
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	31b5d43b 	.word	0x31b5d43b
 8002064:	05265c00 	.word	0x05265c00
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <timer_tick>:

static void timer_tick(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
    timerActive = false;
 8002072:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <timer_tick+0xdc>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 8002078:	f7ff ffda 	bl	8002030 <seconds_since_midnight>
 800207c:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e058      	b.n	8002136 <timer_tick+0xca>
        TimerSlot* s = &timerSlots[i];
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <timer_tick+0xe0>)
 8002090:	4413      	add	r3, r2
 8002092:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d145      	bne.n	800212e <timer_tick+0xc2>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d812      	bhi.n	80020d4 <timer_tick+0x68>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d306      	bcc.n	80020c6 <timer_tick+0x5a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d201      	bcs.n	80020c6 <timer_tick+0x5a>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <timer_tick+0x5c>
 80020c6:	2300      	movs	r3, #0
 80020c8:	72fb      	strb	r3, [r7, #11]
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	72fb      	strb	r3, [r7, #11]
 80020d2:	e011      	b.n	80020f8 <timer_tick+0x8c>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d204      	bcs.n	80020e8 <timer_tick+0x7c>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d201      	bcs.n	80020ec <timer_tick+0x80>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <timer_tick+0x82>
 80020ec:	2300      	movs	r3, #0
 80020ee:	72fb      	strb	r3, [r7, #11]
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <timer_tick+0xc4>
            if (inWindow) {
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <timer_tick+0xbc>
                timerActive = true;
 8002104:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <timer_tick+0xdc>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
                if (adcData.voltages[0] < 0.1f) {
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <timer_tick+0xe4>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4911      	ldr	r1, [pc, #68]	@ (8002154 <timer_tick+0xe8>)
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fad9 	bl	80006c8 <__aeabi_fcmplt>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <timer_tick+0xb6>
                    stop_motor();
 800211c:	f7ff fe0f 	bl	8001d3e <stop_motor>
 8002120:	e006      	b.n	8002130 <timer_tick+0xc4>
                } else {
                    start_motor();
 8002122:	f7ff fe05 	bl	8001d30 <start_motor>
 8002126:	e003      	b.n	8002130 <timer_tick+0xc4>
                }
            } else {
                stop_motor();
 8002128:	f7ff fe09 	bl	8001d3e <stop_motor>
 800212c:	e000      	b.n	8002130 <timer_tick+0xc4>
        if (!s->active) continue;
 800212e:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b04      	cmp	r3, #4
 800213a:	dda3      	ble.n	8002084 <timer_tick+0x18>
            }
        }
    }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003c1 	.word	0x200003c1
 800214c:	200003cc 	.word	0x200003cc
 8002150:	200002ec 	.word	0x200002ec
 8002154:	3dcccccd 	.word	0x3dcccccd

08002158 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    if (manualOverride) return; // skip for manual
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <protections_tick+0x94>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13f      	bne.n	80021e6 <protections_tick+0x8e>

    if (motorStatus == 1U && adcData.voltages[0] < 0.1f) {
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <protections_tick+0x98>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10e      	bne.n	800218e <protections_tick+0x36>
 8002170:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <protections_tick+0x9c>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4920      	ldr	r1, [pc, #128]	@ (80021f8 <protections_tick+0xa0>)
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe faa6 	bl	80006c8 <__aeabi_fcmplt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <protections_tick+0x36>
        senseDryRun = true;
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <protections_tick+0xa4>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
        stop_motor();
 8002188:	f7ff fdd9 	bl	8001d3e <stop_motor>
 800218c:	e002      	b.n	8002194 <protections_tick+0x3c>
    } else {
        senseDryRun = false;
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <protections_tick+0xa4>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    }

    if (senseOverLoad && motorStatus == 1U) {
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <protections_tick+0xa8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <protections_tick+0x54>
 800219e:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <protections_tick+0x98>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <protections_tick+0x54>
        stop_motor();
 80021a8:	f7ff fdc9 	bl	8001d3e <stop_motor>
    }

    if (senseOverUnderVolt) {
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <protections_tick+0xac>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <protections_tick+0x62>
        stop_motor();
 80021b6:	f7ff fdc2 	bl	8001d3e <stop_motor>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <protections_tick+0xb0>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <protections_tick+0x90>
 80021c2:	f7ff fd7b 	bl	8001cbc <now_ms>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b10      	ldr	r3, [pc, #64]	@ (800220c <protections_tick+0xb4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <protections_tick+0xb8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d309      	bcc.n	80021e8 <protections_tick+0x90>
        stop_motor();
 80021d4:	f7ff fdb3 	bl	8001d3e <stop_motor>
        senseMaxRunReached = true;
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <protections_tick+0xbc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <protections_tick+0xb0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e000      	b.n	80021e8 <protections_tick+0x90>
    if (manualOverride) return; // skip for manual
 80021e6:	bf00      	nop
    }
}
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000040c 	.word	0x2000040c
 80021f0:	200003bc 	.word	0x200003bc
 80021f4:	200002ec 	.word	0x200002ec
 80021f8:	3dcccccd 	.word	0x3dcccccd
 80021fc:	20000408 	.word	0x20000408
 8002200:	20000409 	.word	0x20000409
 8002204:	2000040a 	.word	0x2000040a
 8002208:	2000040d 	.word	0x2000040d
 800220c:	20000410 	.word	0x20000410
 8002210:	006ddd00 	.word	0x006ddd00
 8002214:	2000040b 	.word	0x2000040b

08002218 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 800221c:	f7ff f898 	bl	8001350 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8002220:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <leds_from_model+0x90>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d104      	bne.n	8002234 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2101      	movs	r1, #1
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff f8ae 	bl	8001390 <LED_SetIntent>
    }
    if (countdownActive) {
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <leds_from_model+0x94>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 800223e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002242:	2102      	movs	r1, #2
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff f8a3 	bl	8001390 <LED_SetIntent>
    }
    if (senseDryRun) {
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <leds_from_model+0x98>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2101      	movs	r1, #1
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff f899 	bl	8001390 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <leds_from_model+0x9c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8002268:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800226c:	2102      	movs	r1, #2
 800226e:	2001      	movs	r0, #1
 8002270:	f7ff f88e 	bl	8001390 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <leds_from_model+0xa0>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 800227e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002282:	2102      	movs	r1, #2
 8002284:	2002      	movs	r0, #2
 8002286:	f7ff f883 	bl	8001390 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <leds_from_model+0xa4>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8002294:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002298:	2102      	movs	r1, #2
 800229a:	2003      	movs	r0, #3
 800229c:	f7ff f878 	bl	8001390 <LED_SetIntent>
    }

    LED_ApplyIntents();
 80022a0:	f7ff f896 	bl	80013d0 <LED_ApplyIntents>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200003bc 	.word	0x200003bc
 80022ac:	200003be 	.word	0x200003be
 80022b0:	20000408 	.word	0x20000408
 80022b4:	2000040b 	.word	0x2000040b
 80022b8:	20000409 	.word	0x20000409
 80022bc:	2000040a 	.word	0x2000040a

080022c0 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d033      	beq.n	8002336 <ModelHandle_ProcessUartCommand+0x76>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02f      	beq.n	8002336 <ModelHandle_ProcessUartCommand+0x76>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 80022d6:	491a      	ldr	r1, [pc, #104]	@ (8002340 <ModelHandle_ProcessUartCommand+0x80>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fd ff37 	bl	800014c <strcmp>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <ModelHandle_ProcessUartCommand+0x3c>
        manualOverride = true;
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <ModelHandle_ProcessUartCommand+0x84>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
        manualActive   = true;
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <ModelHandle_ProcessUartCommand+0x88>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
        start_motor();
 80022f0:	f7ff fd1e 	bl	8001d30 <start_motor>
        printf("Manual ON (UART)\r\n");
 80022f4:	4815      	ldr	r0, [pc, #84]	@ (800234c <ModelHandle_ProcessUartCommand+0x8c>)
 80022f6:	f006 fc03 	bl	8008b00 <puts>
 80022fa:	e01d      	b.n	8002338 <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 80022fc:	4914      	ldr	r1, [pc, #80]	@ (8002350 <ModelHandle_ProcessUartCommand+0x90>)
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fd ff24 	bl	800014c <strcmp>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <ModelHandle_ProcessUartCommand+0x62>
        manualOverride = true;
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <ModelHandle_ProcessUartCommand+0x84>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
        manualActive   = false;
 8002310:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <ModelHandle_ProcessUartCommand+0x88>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        stop_motor();
 8002316:	f7ff fd12 	bl	8001d3e <stop_motor>
        printf("Manual OFF (UART)\r\n");
 800231a:	480e      	ldr	r0, [pc, #56]	@ (8002354 <ModelHandle_ProcessUartCommand+0x94>)
 800231c:	f006 fbf0 	bl	8008b00 <puts>
 8002320:	e00a      	b.n	8002338 <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "SEMI_AUTO_START") == 0) {
 8002322:	490d      	ldr	r1, [pc, #52]	@ (8002358 <ModelHandle_ProcessUartCommand+0x98>)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7fd ff11 	bl	800014c <strcmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <ModelHandle_ProcessUartCommand+0x78>
        ModelHandle_StartSemiAuto();
 8002330:	f000 f86a 	bl	8002408 <ModelHandle_StartSemiAuto>
 8002334:	e000      	b.n	8002338 <ModelHandle_ProcessUartCommand+0x78>
    if (!cmd || !*cmd) return;
 8002336:	bf00      	nop
    }
}
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	08009a58 	.word	0x08009a58
 8002344:	2000040c 	.word	0x2000040c
 8002348:	200003bd 	.word	0x200003bd
 800234c:	08009a64 	.word	0x08009a64
 8002350:	08009a78 	.word	0x08009a78
 8002354:	08009a84 	.word	0x08009a84
 8002358:	08009a98 	.word	0x08009a98

0800235c <ModelHandle_SetMotor>:


/* Public API for motor control */
void ModelHandle_SetMotor(bool on)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
    manualOverride = true;   // force manual override
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <ModelHandle_SetMotor+0x34>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
    Relay_Set(1, on);
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4619      	mov	r1, r3
 8002370:	2001      	movs	r0, #1
 8002372:	f000 f911 	bl	8002598 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <ModelHandle_SetMotor+0x24>
 800237c:	2201      	movs	r2, #1
 800237e:	e000      	b.n	8002382 <ModelHandle_SetMotor+0x26>
 8002380:	2200      	movs	r2, #0
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <ModelHandle_SetMotor+0x38>)
 8002384:	701a      	strb	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000040c 	.word	0x2000040c
 8002394:	200003bc 	.word	0x200003bc

08002398 <ModelHandle_ClearManualOverride>:

void ModelHandle_ClearManualOverride(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    manualOverride = false;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <ModelHandle_ClearManualOverride+0x14>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000040c 	.word	0x2000040c

080023b0 <isTankFull>:

/* === Semi-Auto === */

static bool isTankFull(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	e012      	b.n	80023e6 <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 80023c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <isTankFull+0x50>)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3302      	adds	r3, #2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	490d      	ldr	r1, [pc, #52]	@ (8002404 <isTankFull+0x54>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f97a 	bl	80006c8 <__aeabi_fcmplt>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <isTankFull+0x30>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3301      	adds	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	dde9      	ble.n	80023c0 <isTankFull+0x10>
    }
    return (submergedCount >= 4); // consider FULL when 4 or more sensors submerged
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	bfcc      	ite	gt
 80023f2:	2301      	movgt	r3, #1
 80023f4:	2300      	movle	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200002ec 	.word	0x200002ec
 8002404:	3dcccccd 	.word	0x3dcccccd

08002408 <ModelHandle_StartSemiAuto>:

void ModelHandle_StartSemiAuto(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    semiAutoActive = true;
 800240c:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <ModelHandle_StartSemiAuto+0x48>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
    manualOverride = false;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <ModelHandle_StartSemiAuto+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <ModelHandle_StartSemiAuto+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]

    // If not full, start motor
    if (!isTankFull()) {
 800241e:	f7ff ffc7 	bl	80023b0 <isTankFull>
 8002422:	4603      	mov	r3, r0
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <ModelHandle_StartSemiAuto+0x32>
        start_motor();
 800242e:	f7ff fc7f 	bl	8001d30 <start_motor>
        printf("Semi-Auto Started\r\n");
 8002432:	480a      	ldr	r0, [pc, #40]	@ (800245c <ModelHandle_StartSemiAuto+0x54>)
 8002434:	f006 fb64 	bl	8008b00 <puts>
    } else {
        stop_motor();
        semiAutoActive = false;
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 8002438:	e007      	b.n	800244a <ModelHandle_StartSemiAuto+0x42>
        stop_motor();
 800243a:	f7ff fc80 	bl	8001d3e <stop_motor>
        semiAutoActive = false;
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <ModelHandle_StartSemiAuto+0x48>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Not Started: Already Full\r\n");
 8002444:	4806      	ldr	r0, [pc, #24]	@ (8002460 <ModelHandle_StartSemiAuto+0x58>)
 8002446:	f006 fb5b 	bl	8008b00 <puts>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200003c2 	.word	0x200003c2
 8002454:	2000040c 	.word	0x2000040c
 8002458:	200003bd 	.word	0x200003bd
 800245c:	08009aa8 	.word	0x08009aa8
 8002460:	08009abc 	.word	0x08009abc

08002464 <semi_auto_tick>:


static void semi_auto_tick(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <semi_auto_tick+0x50>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f083 0301 	eor.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11b      	bne.n	80024b0 <semi_auto_tick+0x4c>

    if (isTankFull()) {
 8002478:	f7ff ff9a 	bl	80023b0 <isTankFull>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <semi_auto_tick+0x36>
        stop_motor();
 8002482:	f7ff fc5c 	bl	8001d3e <stop_motor>
        semiAutoActive   = false;
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <semi_auto_tick+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800248c:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <semi_auto_tick+0x54>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Complete: Tank Full\r\n");
 8002492:	480a      	ldr	r0, [pc, #40]	@ (80024bc <semi_auto_tick+0x58>)
 8002494:	f006 fb34 	bl	8008b00 <puts>
 8002498:	e00b      	b.n	80024b2 <semi_auto_tick+0x4e>
    } else {
        // keep motor running until full
        if (!Motor_GetStatus()) {
 800249a:	f000 f823 	bl	80024e4 <Motor_GetStatus>
 800249e:	4603      	mov	r3, r0
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <semi_auto_tick+0x4e>
            start_motor();
 80024aa:	f7ff fc41 	bl	8001d30 <start_motor>
 80024ae:	e000      	b.n	80024b2 <semi_auto_tick+0x4e>
    if (!semiAutoActive) return;
 80024b0:	bf00      	nop
        }
    }
}
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200003c2 	.word	0x200003c2
 80024b8:	2000040d 	.word	0x2000040d
 80024bc:	08009ae4 	.word	0x08009ae4

080024c0 <ModelHandle_Process>:

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    countdown_tick();
 80024c4:	f7ff fc88 	bl	8001dd8 <countdown_tick>
    twist_tick();
 80024c8:	f7ff fcd0 	bl	8001e6c <twist_tick>
    search_tick();
 80024cc:	f7ff fd38 	bl	8001f40 <search_tick>
    timer_tick();
 80024d0:	f7ff fdcc 	bl	800206c <timer_tick>
    semi_auto_tick();   // <-- now fixed
 80024d4:	f7ff ffc6 	bl	8002464 <semi_auto_tick>
    protections_tick();
 80024d8:	f7ff fe3e 	bl	8002158 <protections_tick>
    leds_from_model();
 80024dc:	f7ff fe9c 	bl	8002218 <leds_from_model>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <Motor_GetStatus>:


/* ===== Public getter ===== */
bool Motor_GetStatus(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
    return (motorStatus == 1U);
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <Motor_GetStatus+0x1c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	200003bc 	.word	0x200003bc

08002504 <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <Relay_Init+0x8c>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <Relay_Init+0x8c>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6193      	str	r3, [r2, #24]
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <Relay_Init+0x8c>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e01e      	b.n	800257e <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8002540:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <Relay_Init+0x90>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	889b      	ldrh	r3, [r3, #4]
 800254a:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <Relay_Init+0x90>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002554:	1d3a      	adds	r2, r7, #4
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fc4f 	bl	8004dfc <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 800255e:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <Relay_Init+0x90>)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002566:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <Relay_Init+0x90>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	889b      	ldrh	r3, [r3, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	f002 fddd 	bl	8005132 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	dddd      	ble.n	8002540 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	08009df4 	.word	0x08009df4

08002598 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d012      	beq.n	80025d4 <Relay_Set+0x3c>
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d80f      	bhi.n	80025d4 <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <Relay_Set+0x44>)
 80025ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <Relay_Set+0x44>)
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 80025ca:	79ba      	ldrb	r2, [r7, #6]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f002 fdb0 	bl	8005132 <HAL_GPIO_WritePin>
 80025d2:	e000      	b.n	80025d6 <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 80025d4:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	08009df4 	.word	0x08009df4

080025e0 <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <rf_delay_us+0x2c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80025f0:	bf00      	nop
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <rf_delay_us+0x2c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d8f9      	bhi.n	80025f2 <rf_delay_us+0x12>
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000025c 	.word	0x2000025c

08002610 <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	2180      	movs	r1, #128	@ 0x80
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <RF_Init+0x14>)
 800261a:	f002 fd8a 	bl	8005132 <HAL_GPIO_WritePin>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40010c00 	.word	0x40010c00

08002628 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	4809      	ldr	r0, [pc, #36]	@ (800265c <send_high_low+0x34>)
 8002638:	f002 fd7b 	bl	8005132 <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ffcf 	bl	80025e0 <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <send_high_low+0x34>)
 8002648:	f002 fd73 	bl	8005132 <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7ff ffc7 	bl	80025e0 <rf_delay_us>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40010c00 	.word	0x40010c00

08002660 <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 8002670:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8002674:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002678:	f7ff ffd6 	bl	8002628 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 800267c:	e005      	b.n	800268a <send_bit+0x2a>
        send_high_low(900, 300);
 800267e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002682:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8002686:	f7ff ffcf 	bl	8002628 <send_high_low>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e031      	b.n	8002708 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 80026a4:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 80026a8:	f240 1013 	movw	r0, #275	@ 0x113
 80026ac:	f7ff ffbc 	bl	8002628 <send_high_low>
        rf_delay_us(1000);
 80026b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026b4:	f7ff ff94 	bl	80025e0 <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	72fb      	strb	r3, [r7, #11]
 80026c0:	e011      	b.n	80026e6 <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 80026c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffc3 	bl	8002660 <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 80026da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	72fb      	strb	r3, [r7, #11]
 80026e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dae9      	bge.n	80026c2 <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 80026ee:	f44f 7161 	mov.w	r1, #900	@ 0x384
 80026f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80026f6:	f7ff ff97 	bl	8002628 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 80026fa:	f242 7010 	movw	r0, #10000	@ 0x2710
 80026fe:	f7ff ff6f 	bl	80025e0 <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b03      	cmp	r3, #3
 800270c:	ddca      	ble.n	80026a4 <RF_SendCode+0x12>
    }
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4413      	add	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 800274e:	2332      	movs	r3, #50	@ 0x32
 8002750:	2202      	movs	r2, #2
 8002752:	21d0      	movs	r1, #208	@ 0xd0
 8002754:	4822      	ldr	r0, [pc, #136]	@ (80027e0 <RTC_Init+0x98>)
 8002756:	f003 facd 	bl	8005cf4 <HAL_I2C_IsDeviceReady>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <RTC_Init+0x9c>)
 8002762:	22d0      	movs	r2, #208	@ 0xd0
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	e010      	b.n	800278a <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8002768:	2332      	movs	r3, #50	@ 0x32
 800276a:	2202      	movs	r2, #2
 800276c:	21ae      	movs	r1, #174	@ 0xae
 800276e:	481c      	ldr	r0, [pc, #112]	@ (80027e0 <RTC_Init+0x98>)
 8002770:	f003 fac0 	bl	8005cf4 <HAL_I2C_IsDeviceReady>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <RTC_Init+0x9c>)
 800277c:	22ae      	movs	r2, #174	@ 0xae
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e003      	b.n	800278a <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <RTC_Init+0x9c>)
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	e027      	b.n	80027da <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <RTC_Init+0x9c>)
 800278c:	8819      	ldrh	r1, [r3, #0]
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	2301      	movs	r3, #1
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	2200      	movs	r2, #0
 80027a0:	480f      	ldr	r0, [pc, #60]	@ (80027e0 <RTC_Init+0x98>)
 80027a2:	f003 f833 	bl	800580c <HAL_I2C_Mem_Read>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d116      	bne.n	80027da <RTC_Init+0x92>
        if (sec & 0x80u) {
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da12      	bge.n	80027da <RTC_Init+0x92>
            sec &= 0x7Fu;
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <RTC_Init+0x9c>)
 80027c0:	8819      	ldrh	r1, [r3, #0]
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	2301      	movs	r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	2200      	movs	r2, #0
 80027d4:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <RTC_Init+0x98>)
 80027d6:	f002 ff1f 	bl	8005618 <HAL_I2C_Mem_Write>
        }
    }
}
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	2000019c 	.word	0x2000019c
 80027e4:	2000042c 	.word	0x2000042c

080027e8 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 80027ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <RTC_GetTimeDate+0x130>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8089 	beq.w	800290a <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 80027f8:	4b47      	ldr	r3, [pc, #284]	@ (8002918 <RTC_GetTimeDate+0x130>)
 80027fa:	8819      	ldrh	r1, [r3, #0]
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	2307      	movs	r3, #7
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2200      	movs	r2, #0
 800280e:	4843      	ldr	r0, [pc, #268]	@ (800291c <RTC_GetTimeDate+0x134>)
 8002810:	f002 fffc 	bl	800580c <HAL_I2C_Mem_Read>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d179      	bne.n	800290e <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 800281a:	793b      	ldrb	r3, [r7, #4]
 800281c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff78 	bl	8002718 <bcd2dec>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	4b3c      	ldr	r3, [pc, #240]	@ (8002920 <RTC_GetTimeDate+0x138>)
 800282e:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 8002830:	797b      	ldrb	r3, [r7, #5]
 8002832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff6d 	bl	8002718 <bcd2dec>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <RTC_GetTimeDate+0x138>)
 8002844:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d025      	beq.n	800289c <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <bcd2dec>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 8002862:	79bb      	ldrb	r3, [r7, #6]
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d108      	bne.n	8002886 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <RTC_GetTimeDate+0x96>
 800287a:	220c      	movs	r2, #12
 800287c:	e000      	b.n	8002880 <RTC_GetTimeDate+0x98>
 800287e:	2200      	movs	r2, #0
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <RTC_GetTimeDate+0x138>)
 8002882:	709a      	strb	r2, [r3, #2]
 8002884:	e015      	b.n	80028b2 <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <RTC_GetTimeDate+0xac>
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	330c      	adds	r3, #12
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e000      	b.n	8002896 <RTC_GetTimeDate+0xae>
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <RTC_GetTimeDate+0x138>)
 8002898:	7093      	strb	r3, [r2, #2]
 800289a:	e00a      	b.n	80028b2 <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff37 	bl	8002718 <bcd2dec>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002920 <RTC_GetTimeDate+0x138>)
 80028b0:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff2c 	bl	8002718 <bcd2dec>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <RTC_GetTimeDate+0x138>)
 80028c6:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 80028c8:	7a3b      	ldrb	r3, [r7, #8]
 80028ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff21 	bl	8002718 <bcd2dec>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <RTC_GetTimeDate+0x138>)
 80028dc:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 80028de:	7a7b      	ldrb	r3, [r7, #9]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff16 	bl	8002718 <bcd2dec>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <RTC_GetTimeDate+0x138>)
 80028f2:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 80028f4:	7abb      	ldrb	r3, [r7, #10]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff0e 	bl	8002718 <bcd2dec>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <RTC_GetTimeDate+0x138>)
 8002906:	80da      	strh	r2, [r3, #6]
 8002908:	e002      	b.n	8002910 <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <RTC_GetTimeDate+0x128>
        return;
 800290e:	bf00      	nop
}
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000042c 	.word	0x2000042c
 800291c:	2000019c 	.word	0x2000019c
 8002920:	20000424 	.word	0x20000424

08002924 <lcd_line>:
static uint16_t edit_search_gap_s = 60, edit_search_dry_s = 10;
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 8002930:	f107 000c 	add.w	r0, r7, #12
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <lcd_line+0x38>)
 8002938:	2111      	movs	r1, #17
 800293a:	f006 f8e9 	bl	8008b10 <sniprintf>
    lcd_put_cur(row, 0);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fb96 	bl	8001074 <lcd_put_cur>
    lcd_send_string(ln);
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fbb3 	bl	80010b8 <lcd_send_string>
}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	08009b60 	.word	0x08009b60

08002960 <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	2000      	movs	r0, #0
 800296c:	f7ff ffda 	bl	8002924 <lcd_line>
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff ffce 	bl	8002924 <lcd_line>
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
 8002994:	f001 fc1a 	bl	80041cc <HAL_GetTick>
 8002998:	4603      	mov	r3, r0
 800299a:	4a02      	ldr	r2, [pc, #8]	@ (80029a4 <refreshInactivityTimer+0x14>)
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000043c 	.word	0x2000043c

080029a8 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <goto_menu_top+0x18>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <goto_menu_top+0x1c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000444 	.word	0x20000444
 80029c4:	20000448 	.word	0x20000448

080029c8 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	70fb      	strb	r3, [r7, #3]
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d820      	bhi.n	8002a1e <format_menu_line+0x56>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db1d      	blt.n	8002a1e <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <format_menu_line+0x24>
 80029e8:	233e      	movs	r3, #62	@ 0x3e
 80029ea:	e000      	b.n	80029ee <format_menu_line+0x26>
 80029ec:	2320      	movs	r3, #32
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 80029f2:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <format_menu_line+0x6c>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	f107 0014 	add.w	r0, r7, #20
 80029fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <format_menu_line+0x70>)
 8002a00:	2110      	movs	r1, #16
 8002a02:	f006 f885 	bl	8008b10 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8002a06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <format_menu_line+0x74>)
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f006 f87a 	bl	8008b10 <sniprintf>
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8002a1c:	e005      	b.n	8002a2a <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 8002a1e:	4a08      	ldr	r2, [pc, #32]	@ (8002a40 <format_menu_line+0x78>)
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f006 f874 	bl	8008b10 <sniprintf>
    }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	@ 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000002c 	.word	0x2000002c
 8002a38:	08009b6c 	.word	0x08009b6c
 8002a3c:	08009b78 	.word	0x08009b78
 8002a40:	08009b80 	.word	0x08009b80

08002a44 <show_welcome>:

/* ===== Render functions ===== */

static void show_welcome(void){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
    lcd_clear();
 8002a48:	f7fe fb07 	bl	800105a <lcd_clear>
    lcd_line0("  Welcome to ");
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <show_welcome+0x18>)
 8002a4e:	f7ff ff87 	bl	8002960 <lcd_line0>
    lcd_line1("   HELONIX   ");
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <show_welcome+0x1c>)
 8002a54:	f7ff ff90 	bl	8002978 <lcd_line1>
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	08009b94 	.word	0x08009b94
 8002a60:	08009ba4 	.word	0x08009ba4

08002a64 <show_dash>:

static void show_dash(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	@ 0x38
 8002a68:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON" : "OFF";
 8002a6a:	f7ff fd3b 	bl	80024e4 <Motor_GetStatus>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <show_dash+0x14>
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <show_dash+0xbc>)
 8002a76:	e000      	b.n	8002a7a <show_dash+0x16>
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <show_dash+0xc0>)
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    snprintf(line0,sizeof(line0),"Motor:%-3s",motor);
 8002a7c:	f107 0014 	add.w	r0, r7, #20
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	4a29      	ldr	r2, [pc, #164]	@ (8002b28 <show_dash+0xc4>)
 8002a84:	2111      	movs	r1, #17
 8002a86:	f006 f843 	bl	8008b10 <sniprintf>

    int submergedCount = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a92:	e012      	b.n	8002aba <show_dash+0x56>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002a94:	4a25      	ldr	r2, [pc, #148]	@ (8002b2c <show_dash+0xc8>)
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	3302      	adds	r3, #2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4923      	ldr	r1, [pc, #140]	@ (8002b30 <show_dash+0xcc>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fe10 	bl	80006c8 <__aeabi_fcmplt>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <show_dash+0x50>
 8002aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	dde9      	ble.n	8002a94 <show_dash+0x30>
    }

    const char *level;
    switch (submergedCount) {
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d816      	bhi.n	8002af4 <show_dash+0x90>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <show_dash+0x68>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002ae3 	.word	0x08002ae3
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002aef 	.word	0x08002aef
        case 0:  level = "EMPTY"; break;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <show_dash+0xd0>)
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae0:	e00b      	b.n	8002afa <show_dash+0x96>
        case 1:  level = "LOW";   break;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <show_dash+0xd4>)
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae6:	e008      	b.n	8002afa <show_dash+0x96>
        case 2:  level = "HALF";  break;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <show_dash+0xd8>)
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aec:	e005      	b.n	8002afa <show_dash+0x96>
        case 3:  level = "3/4";   break;
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <show_dash+0xdc>)
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	e002      	b.n	8002afa <show_dash+0x96>
        default: level = "FULL";  break;
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <show_dash+0xe0>)
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af8:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 8002afa:	4638      	mov	r0, r7
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <show_dash+0xe4>)
 8002b00:	2111      	movs	r1, #17
 8002b02:	f006 f805 	bl	8008b10 <sniprintf>

    lcd_line0(line0);
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff28 	bl	8002960 <lcd_line0>
    lcd_line1(line1);
 8002b10:	463b      	mov	r3, r7
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff30 	bl	8002978 <lcd_line1>
}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	@ 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	08009bb4 	.word	0x08009bb4
 8002b24:	08009bb8 	.word	0x08009bb8
 8002b28:	08009bbc 	.word	0x08009bbc
 8002b2c:	200002ec 	.word	0x200002ec
 8002b30:	3dcccccd 	.word	0x3dcccccd
 8002b34:	08009bc8 	.word	0x08009bc8
 8002b38:	08009bd0 	.word	0x08009bd0
 8002b3c:	08009bd4 	.word	0x08009bd4
 8002b40:	08009bdc 	.word	0x08009bdc
 8002b44:	08009be0 	.word	0x08009be0
 8002b48:	08009be8 	.word	0x08009be8

08002b4c <show_menu>:

static void show_menu(void){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	@ 0x28
 8002b50:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <show_menu+0xb0>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <show_menu+0xb4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	da04      	bge.n	8002b68 <show_menu+0x1c>
 8002b5e:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <show_menu+0xb0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	@ (8002c00 <show_menu+0xb4>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 8002b68:	4b25      	ldr	r3, [pc, #148]	@ (8002c00 <show_menu+0xb4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <show_menu+0xb0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	da04      	bge.n	8002b80 <show_menu+0x34>
 8002b76:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <show_menu+0xb0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	4a20      	ldr	r2, [pc, #128]	@ (8002c00 <show_menu+0xb4>)
 8002b7e:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 8002b80:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <show_menu+0xb4>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <show_menu+0xb0>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <show_menu+0xb4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d105      	bne.n	8002b9c <show_menu+0x50>
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <show_menu+0xb8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <show_menu+0x50>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <show_menu+0x52>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f107 0014 	add.w	r0, r7, #20
 8002ba8:	460a      	mov	r2, r1
 8002baa:	2111      	movs	r1, #17
 8002bac:	f7ff ff0c 	bl	80029c8 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8002bb0:	4b13      	ldr	r3, [pc, #76]	@ (8002c00 <show_menu+0xb4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c59      	adds	r1, r3, #1
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <show_menu+0xb4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <show_menu+0xb0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d105      	bne.n	8002bd0 <show_menu+0x84>
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <show_menu+0xb8>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <show_menu+0x84>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <show_menu+0x86>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4638      	mov	r0, r7
 8002bda:	460a      	mov	r2, r1
 8002bdc:	2111      	movs	r1, #17
 8002bde:	f7ff fef3 	bl	80029c8 <format_menu_line>
    lcd_line0(line0);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff feba 	bl	8002960 <lcd_line0>
    lcd_line1(line1);
 8002bec:	463b      	mov	r3, r7
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fec2 	bl	8002978 <lcd_line1>
}
 8002bf4:	bf00      	nop
 8002bf6:	3728      	adds	r7, #40	@ 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000444 	.word	0x20000444
 8002c00:	20000448 	.word	0x20000448
 8002c04:	2000002b 	.word	0x2000002b

08002c08 <show_manual>:

static void show_manual(void){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <show_manual+0x54>)
 8002c14:	2111      	movs	r1, #17
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 ff7a 	bl	8008b10 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8002c1c:	f7ff fc62 	bl	80024e4 <Motor_GetStatus>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <show_manual+0x2c>
 8002c26:	463b      	mov	r3, r7
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <show_manual+0x58>)
 8002c2a:	2111      	movs	r1, #17
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 ff6f 	bl	8008b10 <sniprintf>
 8002c32:	e005      	b.n	8002c40 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 8002c34:	463b      	mov	r3, r7
 8002c36:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <show_manual+0x5c>)
 8002c38:	2111      	movs	r1, #17
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f005 ff68 	bl	8008b10 <sniprintf>
    lcd_line0(line0);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe8b 	bl	8002960 <lcd_line0>
    lcd_line1(line1);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fe93 	bl	8002978 <lcd_line1>
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08009b04 	.word	0x08009b04
 8002c60:	08009bf4 	.word	0x08009bf4
 8002c64:	08009c04 	.word	0x08009c04

08002c68 <show_semi_auto>:

static void show_semi_auto(void){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <show_semi_auto+0x50>)
 8002c74:	2111      	movs	r1, #17
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 ff4a 	bl	8008b10 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <show_semi_auto+0x54>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <show_semi_auto+0x2a>
 8002c84:	463b      	mov	r3, r7
 8002c86:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc0 <show_semi_auto+0x58>)
 8002c88:	2111      	movs	r1, #17
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 ff40 	bl	8008b10 <sniprintf>
 8002c90:	e005      	b.n	8002c9e <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 8002c92:	463b      	mov	r3, r7
 8002c94:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc4 <show_semi_auto+0x5c>)
 8002c96:	2111      	movs	r1, #17
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 ff39 	bl	8008b10 <sniprintf>
    lcd_line0(line0);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe5c 	bl	8002960 <lcd_line0>
    lcd_line1(line1);
 8002ca8:	463b      	mov	r3, r7
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe64 	bl	8002978 <lcd_line1>
}
 8002cb0:	bf00      	nop
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08009b10 	.word	0x08009b10
 8002cbc:	20000440 	.word	0x20000440
 8002cc0:	08009c14 	.word	0x08009c14
 8002cc4:	08009c24 	.word	0x08009c24

08002cc8 <show_timer>:

static void show_timer(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	@ 0x30
 8002ccc:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <show_timer+0x54>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <show_timer+0x58>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f107 0014 	add.w	r0, r7, #20
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	4a10      	ldr	r2, [pc, #64]	@ (8002d24 <show_timer+0x5c>)
 8002ce2:	2111      	movs	r1, #17
 8002ce4:	f005 ff14 	bl	8008b10 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <show_timer+0x60>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <show_timer+0x64>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <show_timer+0x68>)
 8002cfa:	2111      	movs	r1, #17
 8002cfc:	f005 ff08 	bl	8008b10 <sniprintf>
    lcd_line0(l0);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fe2b 	bl	8002960 <lcd_line0>
    lcd_line1(l1);
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fe33 	bl	8002978 <lcd_line1>
}
 8002d12:	bf00      	nop
 8002d14:	3728      	adds	r7, #40	@ 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000048 	.word	0x20000048
 8002d20:	20000049 	.word	0x20000049
 8002d24:	08009c34 	.word	0x08009c34
 8002d28:	2000004a 	.word	0x2000004a
 8002d2c:	2000004b 	.word	0x2000004b
 8002d30:	08009c44 	.word	0x08009c44

08002d34 <show_search>:

static void show_search(void){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	@ 0x30
 8002d38:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds",edit_search_gap_s,edit_search_dry_s);
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <show_search+0x48>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <show_search+0x4c>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	f107 0014 	add.w	r0, r7, #20
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <show_search+0x50>)
 8002d4e:	2111      	movs	r1, #17
 8002d50:	f005 fede 	bl	8008b10 <sniprintf>
    snprintf(l1,sizeof(l1),">Edit     Back");
 8002d54:	463b      	mov	r3, r7
 8002d56:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <show_search+0x54>)
 8002d58:	2111      	movs	r1, #17
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 fed8 	bl	8008b10 <sniprintf>
    lcd_line0(l0);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fdfb 	bl	8002960 <lcd_line0>
    lcd_line1(l1);
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fe03 	bl	8002978 <lcd_line1>
}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	@ 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000004c 	.word	0x2000004c
 8002d80:	2000004e 	.word	0x2000004e
 8002d84:	08009c58 	.word	0x08009c58
 8002d88:	08009c6c 	.word	0x08009c6c

08002d8c <show_countdown>:

static void show_countdown(void){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b090      	sub	sp, #64	@ 0x40
 8002d90:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    if (countdownActive) {
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <show_countdown+0x84>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01e      	beq.n	8002dda <show_countdown+0x4e>
        uint32_t sec = countdownDuration;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <show_countdown+0x88>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <show_countdown+0x8c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s = sec%60;
 8002dae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <show_countdown+0x8c>)
 8002db2:	fba3 1302 	umull	r1, r3, r3, r2
 8002db6:	0959      	lsrs	r1, r3, #5
 8002db8:	460b      	mov	r3, r1
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a5b      	subs	r3, r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Count %02d:%02d",(int)min,(int)s);
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc8:	f107 0018 	add.w	r0, r7, #24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <show_countdown+0x90>)
 8002dd2:	2111      	movs	r1, #17
 8002dd4:	f005 fe9c 	bl	8008b10 <sniprintf>
 8002dd8:	e006      	b.n	8002de8 <show_countdown+0x5c>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <show_countdown+0x94>)
 8002de0:	2111      	movs	r1, #17
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 fe94 	bl	8008b10 <sniprintf>
    }
    snprintf(l1,sizeof(l1),">Set Start Back");
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	4a0e      	ldr	r2, [pc, #56]	@ (8002e24 <show_countdown+0x98>)
 8002dec:	2111      	movs	r1, #17
 8002dee:	4618      	mov	r0, r3
 8002df0:	f005 fe8e 	bl	8008b10 <sniprintf>
    lcd_line0(l0);
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fdb1 	bl	8002960 <lcd_line0>
    lcd_line1(l1);
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fdb9 	bl	8002978 <lcd_line1>
}
 8002e06:	bf00      	nop
 8002e08:	3738      	adds	r7, #56	@ 0x38
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200003be 	.word	0x200003be
 8002e14:	200003c4 	.word	0x200003c4
 8002e18:	88888889 	.word	0x88888889
 8002e1c:	08009c7c 	.word	0x08009c7c
 8002e20:	08009c8c 	.word	0x08009c8c
 8002e24:	08009c9c 	.word	0x08009c9c

08002e28 <show_twist>:

static void show_twist(void){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds",edit_twist_on_s);
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <show_twist+0x40>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f107 0014 	add.w	r0, r7, #20
 8002e36:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <show_twist+0x44>)
 8002e38:	2111      	movs	r1, #17
 8002e3a:	f005 fe69 	bl	8008b10 <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds",edit_twist_off_s);
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <show_twist+0x48>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	4638      	mov	r0, r7
 8002e44:	4a0b      	ldr	r2, [pc, #44]	@ (8002e74 <show_twist+0x4c>)
 8002e46:	2111      	movs	r1, #17
 8002e48:	f005 fe62 	bl	8008b10 <sniprintf>
    lcd_line0(l0);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fd85 	bl	8002960 <lcd_line0>
    lcd_line1(l1);
 8002e56:	463b      	mov	r3, r7
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fd8d 	bl	8002978 <lcd_line1>
}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000050 	.word	0x20000050
 8002e6c:	08009cac 	.word	0x08009cac
 8002e70:	20000052 	.word	0x20000052
 8002e74:	08009cbc 	.word	0x08009cbc

08002e78 <apply_search_settings>:

/* ===== Apply functions ===== */
static void apply_search_settings(void){
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <apply_search_settings+0x1c>)
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <apply_search_settings+0x20>)
 8002e82:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <apply_search_settings+0x24>)
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <apply_search_settings+0x20>)
 8002e8a:	809a      	strh	r2, [r3, #4]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	2000004c 	.word	0x2000004c
 8002e98:	2000001c 	.word	0x2000001c
 8002e9c:	2000004e 	.word	0x2000004e

08002ea0 <apply_twist_settings>:

static void apply_twist_settings(void){
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <apply_twist_settings+0x1c>)
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <apply_twist_settings+0x20>)
 8002eaa:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <apply_twist_settings+0x24>)
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <apply_twist_settings+0x20>)
 8002eb2:	809a      	strh	r2, [r3, #4]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000050 	.word	0x20000050
 8002ec0:	20000024 	.word	0x20000024
 8002ec4:	20000052 	.word	0x20000052

08002ec8 <apply_countdown_settings>:

static void apply_countdown_settings(void){
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <apply_countdown_settings+0x20>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <apply_countdown_settings+0x24>)
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	20000054 	.word	0x20000054
 8002eec:	200003c4 	.word	0x200003c4

08002ef0 <enable_semi_auto>:

static void enable_semi_auto(void){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 8002ef4:	f7ff fa50 	bl	8002398 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 8002ef8:	f7ff fa86 	bl	8002408 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <enable_semi_auto+0x18>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000440 	.word	0x20000440

08002f0c <disable_semi_auto>:
static void disable_semi_auto(void){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff fa23 	bl	800235c <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 8002f16:	4b02      	ldr	r3, [pc, #8]	@ (8002f20 <disable_semi_auto+0x14>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000440 	.word	0x20000440

08002f24 <apply_timer_settings>:

static void apply_timer_settings(void){
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
    (void)edit_timer_on_h;
    (void)edit_timer_on_m;
    (void)edit_timer_off_h;
    (void)edit_timer_off_m;
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <Screen_Update>:

/* ===== Core Update Loop ===== */

void Screen_Update(void){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0dc      	sub	sp, #368	@ 0x170
 8002f34:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8002f36:	f001 f949 	bl	80041cc <HAL_GetTick>
 8002f3a:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168

    bool cursorBlinkActive = false;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
    switch (ui) {
 8002f44:	4bb7      	ldr	r3, [pc, #732]	@ (8003224 <Screen_Update+0x2f4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b11      	cmp	r3, #17
 8002f4a:	bf8c      	ite	hi
 8002f4c:	2201      	movhi	r2, #1
 8002f4e:	2200      	movls	r2, #0
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d10f      	bne.n	8002f76 <Screen_Update+0x46>
 8002f56:	4ab4      	ldr	r2, [pc, #720]	@ (8003228 <Screen_Update+0x2f8>)
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <Screen_Update+0x46>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            break;
 8002f74:	e006      	b.n	8002f84 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            cursorVisible = true;
 8002f7c:	4bab      	ldr	r3, [pc, #684]	@ (800322c <Screen_Update+0x2fc>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
            break;
 8002f82:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8002f84:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01e      	beq.n	8002fca <Screen_Update+0x9a>
 8002f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8003230 <Screen_Update+0x300>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d315      	bcc.n	8002fca <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 8002f9e:	4ba3      	ldr	r3, [pc, #652]	@ (800322c <Screen_Update+0x2fc>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800322c <Screen_Update+0x2fc>)
 8002fba:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8002fbc:	4a9c      	ldr	r2, [pc, #624]	@ (8003230 <Screen_Update+0x300>)
 8002fbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002fc2:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002fc4:	4b9b      	ldr	r3, [pc, #620]	@ (8003234 <Screen_Update+0x304>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8002fca:	4b96      	ldr	r3, [pc, #600]	@ (8003224 <Screen_Update+0x2f4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d112      	bne.n	8002ff8 <Screen_Update+0xc8>
 8002fd2:	4b99      	ldr	r3, [pc, #612]	@ (8003238 <Screen_Update+0x308>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d309      	bcc.n	8002ff8 <Screen_Update+0xc8>
        ui = UI_DASH;
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8003224 <Screen_Update+0x2f4>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002fea:	4a93      	ldr	r2, [pc, #588]	@ (8003238 <Screen_Update+0x308>)
 8002fec:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ff0:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002ff2:	4b90      	ldr	r3, [pc, #576]	@ (8003234 <Screen_Update+0x304>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8002ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8003224 <Screen_Update+0x2f4>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <Screen_Update+0xf6>
 8003000:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <Screen_Update+0x2f4>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d00e      	beq.n	8003026 <Screen_Update+0xf6>
 8003008:	4b8c      	ldr	r3, [pc, #560]	@ (800323c <Screen_Update+0x30c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003016:	4293      	cmp	r3, r2
 8003018:	d305      	bcc.n	8003026 <Screen_Update+0xf6>
        ui = UI_DASH;
 800301a:	4b82      	ldr	r3, [pc, #520]	@ (8003224 <Screen_Update+0x2f4>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8003020:	4b84      	ldr	r3, [pc, #528]	@ (8003234 <Screen_Update+0x304>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8003026:	4b7f      	ldr	r3, [pc, #508]	@ (8003224 <Screen_Update+0x2f4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <Screen_Update+0x11c>
 800302e:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <Screen_Update+0x308>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800303c:	d306      	bcc.n	800304c <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 800303e:	4b7d      	ldr	r3, [pc, #500]	@ (8003234 <Screen_Update+0x304>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003044:	4a7c      	ldr	r2, [pc, #496]	@ (8003238 <Screen_Update+0x308>)
 8003046:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800304a:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 800304c:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <Screen_Update+0x304>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <Screen_Update+0x132>
 8003054:	4b73      	ldr	r3, [pc, #460]	@ (8003224 <Screen_Update+0x2f4>)
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	4b79      	ldr	r3, [pc, #484]	@ (8003240 <Screen_Update+0x310>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	f000 8174 	beq.w	800334a <Screen_Update+0x41a>
        bool fullRedraw = (ui != last_ui);
 8003062:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <Screen_Update+0x2f4>)
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <Screen_Update+0x310>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
        last_ui = ui;
 8003076:	4b6b      	ldr	r3, [pc, #428]	@ (8003224 <Screen_Update+0x2f4>)
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	4b71      	ldr	r3, [pc, #452]	@ (8003240 <Screen_Update+0x310>)
 800307c:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 800307e:	4b6d      	ldr	r3, [pc, #436]	@ (8003234 <Screen_Update+0x304>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 8003084:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <Screen_Update+0x160>
 800308c:	f7fd ffe5 	bl	800105a <lcd_clear>
//                lcd_line1("                  ");
//                break;
//        }
//    }
//}
        switch (ui) {
 8003090:	4b64      	ldr	r3, [pc, #400]	@ (8003224 <Screen_Update+0x2f4>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b11      	cmp	r3, #17
 8003096:	f200 8151 	bhi.w	800333c <Screen_Update+0x40c>
 800309a:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <Screen_Update+0x170>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030e9 	.word	0x080030e9
 80030a4:	080030ef 	.word	0x080030ef
 80030a8:	080030f5 	.word	0x080030f5
 80030ac:	080030fb 	.word	0x080030fb
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003107 	.word	0x08003107
 80030b8:	0800311f 	.word	0x0800311f
 80030bc:	08003153 	.word	0x08003153
 80030c0:	08003187 	.word	0x08003187
 80030c4:	080031bb 	.word	0x080031bb
 80030c8:	0800310d 	.word	0x0800310d
 80030cc:	080031ef 	.word	0x080031ef
 80030d0:	08003271 	.word	0x08003271
 80030d4:	08003113 	.word	0x08003113
 80030d8:	080032a5 	.word	0x080032a5
 80030dc:	08003119 	.word	0x08003119
 80030e0:	080032d9 	.word	0x080032d9
 80030e4:	0800330d 	.word	0x0800330d
                    case UI_WELCOME: show_welcome(); break;
 80030e8:	f7ff fcac 	bl	8002a44 <show_welcome>
 80030ec:	e12d      	b.n	800334a <Screen_Update+0x41a>
                    case UI_DASH: show_dash(); break;
 80030ee:	f7ff fcb9 	bl	8002a64 <show_dash>
 80030f2:	e12a      	b.n	800334a <Screen_Update+0x41a>
                    case UI_MENU: show_menu(); break;
 80030f4:	f7ff fd2a 	bl	8002b4c <show_menu>
 80030f8:	e127      	b.n	800334a <Screen_Update+0x41a>
                    case UI_MANUAL: show_manual(); break;
 80030fa:	f7ff fd85 	bl	8002c08 <show_manual>
 80030fe:	e124      	b.n	800334a <Screen_Update+0x41a>
                    case UI_SEMI_AUTO: show_semi_auto(); break;
 8003100:	f7ff fdb2 	bl	8002c68 <show_semi_auto>
 8003104:	e121      	b.n	800334a <Screen_Update+0x41a>
                    case UI_TIMER: show_timer(); break;
 8003106:	f7ff fddf 	bl	8002cc8 <show_timer>
 800310a:	e11e      	b.n	800334a <Screen_Update+0x41a>
                    case UI_SEARCH: show_search(); break;
 800310c:	f7ff fe12 	bl	8002d34 <show_search>
 8003110:	e11b      	b.n	800334a <Screen_Update+0x41a>
                    case UI_COUNTDOWN: show_countdown(); break;
 8003112:	f7ff fe3b 	bl	8002d8c <show_countdown>
 8003116:	e118      	b.n	800334a <Screen_Update+0x41a>
                    case UI_TWIST: show_twist(); break;
 8003118:	f7ff fe86 	bl	8002e28 <show_twist>
 800311c:	e115      	b.n	800334a <Screen_Update+0x41a>

                    /* Editing screens show a small edit UI permitting up/down to change value. */
                    case UI_TIMER_EDIT_ON_H: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit ON Hour: %02d  ", edit_timer_on_h);
 800311e:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <Screen_Update+0x314>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003126:	4a48      	ldr	r2, [pc, #288]	@ (8003248 <Screen_Update+0x318>)
 8003128:	2111      	movs	r1, #17
 800312a:	f005 fcf1 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 800312e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003132:	4a46      	ldr	r2, [pc, #280]	@ (800324c <Screen_Update+0x31c>)
 8003134:	2111      	movs	r1, #17
 8003136:	4618      	mov	r0, r3
 8003138:	f005 fcea 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 800313c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fc0d 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 8003146:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc14 	bl	8002978 <lcd_line1>
                        break;
 8003150:	e0fb      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_TIMER_EDIT_ON_M: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit ON Min: %02d  ", edit_timer_on_m);
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <Screen_Update+0x320>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 800315a:	4a3e      	ldr	r2, [pc, #248]	@ (8003254 <Screen_Update+0x324>)
 800315c:	2111      	movs	r1, #17
 800315e:	f005 fcd7 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8003162:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003166:	4a39      	ldr	r2, [pc, #228]	@ (800324c <Screen_Update+0x31c>)
 8003168:	2111      	movs	r1, #17
 800316a:	4618      	mov	r0, r3
 800316c:	f005 fcd0 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 8003170:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fbf3 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 800317a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fbfa 	bl	8002978 <lcd_line1>
                        break;
 8003184:	e0e1      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_TIMER_EDIT_OFF_H: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d  ", edit_timer_off_h);
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <Screen_Update+0x328>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800318e:	4a33      	ldr	r2, [pc, #204]	@ (800325c <Screen_Update+0x32c>)
 8003190:	2111      	movs	r1, #17
 8003192:	f005 fcbd 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8003196:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800319a:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <Screen_Update+0x31c>)
 800319c:	2111      	movs	r1, #17
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 fcb6 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 80031a4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fbd9 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 80031ae:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fbe0 	bl	8002978 <lcd_line1>
                        break;
 80031b8:	e0c7      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_TIMER_EDIT_OFF_M: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d  ", edit_timer_off_m);
 80031ba:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <Screen_Update+0x330>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80031c2:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <Screen_Update+0x334>)
 80031c4:	2111      	movs	r1, #17
 80031c6:	f005 fca3 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80031ca:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80031ce:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <Screen_Update+0x31c>)
 80031d0:	2111      	movs	r1, #17
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 fc9c 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 80031d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fbbf 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 80031e2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fbc6 	bl	8002978 <lcd_line1>
                        break;
 80031ec:	e0ad      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_SEARCH_EDIT_GAP: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit Gap: %3ds  ", edit_search_gap_s);
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <Screen_Update+0x338>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 80031f6:	4a1d      	ldr	r2, [pc, #116]	@ (800326c <Screen_Update+0x33c>)
 80031f8:	2111      	movs	r1, #17
 80031fa:	f005 fc89 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80031fe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003202:	4a12      	ldr	r2, [pc, #72]	@ (800324c <Screen_Update+0x31c>)
 8003204:	2111      	movs	r1, #17
 8003206:	4618      	mov	r0, r3
 8003208:	f005 fc82 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 800320c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fba5 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 8003216:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fbac 	bl	8002978 <lcd_line1>
                        break;
 8003220:	e093      	b.n	800334a <Screen_Update+0x41a>
 8003222:	bf00      	nop
 8003224:	20000434 	.word	0x20000434
 8003228:	00035bc4 	.word	0x00035bc4
 800322c:	2000002b 	.word	0x2000002b
 8003230:	20000438 	.word	0x20000438
 8003234:	20000435 	.word	0x20000435
 8003238:	20000430 	.word	0x20000430
 800323c:	2000043c 	.word	0x2000043c
 8003240:	2000002a 	.word	0x2000002a
 8003244:	20000048 	.word	0x20000048
 8003248:	08009ccc 	.word	0x08009ccc
 800324c:	08009ce4 	.word	0x08009ce4
 8003250:	20000049 	.word	0x20000049
 8003254:	08009cf8 	.word	0x08009cf8
 8003258:	2000004a 	.word	0x2000004a
 800325c:	08009d0c 	.word	0x08009d0c
 8003260:	2000004b 	.word	0x2000004b
 8003264:	08009d20 	.word	0x08009d20
 8003268:	2000004c 	.word	0x2000004c
 800326c:	08009d34 	.word	0x08009d34
                    }
                    case UI_SEARCH_EDIT_DRY: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit Dry: %3ds  ", edit_search_dry_s);
 8003270:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <Screen_Update+0x424>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8003278:	4a37      	ldr	r2, [pc, #220]	@ (8003358 <Screen_Update+0x428>)
 800327a:	2111      	movs	r1, #17
 800327c:	f005 fc48 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8003280:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003284:	4a35      	ldr	r2, [pc, #212]	@ (800335c <Screen_Update+0x42c>)
 8003286:	2111      	movs	r1, #17
 8003288:	4618      	mov	r0, r3
 800328a:	f005 fc41 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 800328e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fb64 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 8003298:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fb6b 	bl	8002978 <lcd_line1>
                        break;
 80032a2:	e052      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_COUNTDOWN_EDIT_MIN: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Set Min: %3d    ", edit_countdown_min);
 80032a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <Screen_Update+0x430>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80032ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <Screen_Update+0x434>)
 80032ae:	2111      	movs	r1, #17
 80032b0:	f005 fc2e 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel Start");
 80032b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <Screen_Update+0x438>)
 80032ba:	2111      	movs	r1, #17
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 fc27 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 80032c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fb4a 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 80032cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fb51 	bl	8002978 <lcd_line1>
                        break;
 80032d6:	e038      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_TWIST_EDIT_ON: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit T ON: %3ds  ", edit_twist_on_s);
 80032d8:	4b24      	ldr	r3, [pc, #144]	@ (800336c <Screen_Update+0x43c>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80032e0:	4a23      	ldr	r2, [pc, #140]	@ (8003370 <Screen_Update+0x440>)
 80032e2:	2111      	movs	r1, #17
 80032e4:	f005 fc14 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80032e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ec:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <Screen_Update+0x42c>)
 80032ee:	2111      	movs	r1, #17
 80032f0:	4618      	mov	r0, r3
 80032f2:	f005 fc0d 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 80032f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fb30 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 8003300:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fb37 	bl	8002978 <lcd_line1>
                        break;
 800330a:	e01e      	b.n	800334a <Screen_Update+0x41a>
                    }
                    case UI_TWIST_EDIT_OFF: {
                        char l0[17], l1[17];
                        snprintf(l0,sizeof(l0),"Edit T OFF: %3ds ", edit_twist_off_s);
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <Screen_Update+0x444>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	f107 0014 	add.w	r0, r7, #20
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <Screen_Update+0x448>)
 8003316:	2111      	movs	r1, #17
 8003318:	f005 fbfa 	bl	8008b10 <sniprintf>
                        snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 800331c:	463b      	mov	r3, r7
 800331e:	4a0f      	ldr	r2, [pc, #60]	@ (800335c <Screen_Update+0x42c>)
 8003320:	2111      	movs	r1, #17
 8003322:	4618      	mov	r0, r3
 8003324:	f005 fbf4 	bl	8008b10 <sniprintf>
                        lcd_line0(l0);
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fb17 	bl	8002960 <lcd_line0>
                        lcd_line1(l1);
 8003332:	463b      	mov	r3, r7
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fb1f 	bl	8002978 <lcd_line1>
                        break;
 800333a:	e006      	b.n	800334a <Screen_Update+0x41a>
                    }
                    default:
                        lcd_line0("Not Implemented   ");
 800333c:	480f      	ldr	r0, [pc, #60]	@ (800337c <Screen_Update+0x44c>)
 800333e:	f7ff fb0f 	bl	8002960 <lcd_line0>
                        lcd_line1("                  ");
 8003342:	480f      	ldr	r0, [pc, #60]	@ (8003380 <Screen_Update+0x450>)
 8003344:	f7ff fb18 	bl	8002978 <lcd_line1>
                        break;
 8003348:	bf00      	nop
                }
            }
        }
 800334a:	bf00      	nop
 800334c:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	2000004e 	.word	0x2000004e
 8003358:	08009d48 	.word	0x08009d48
 800335c:	08009ce4 	.word	0x08009ce4
 8003360:	20000054 	.word	0x20000054
 8003364:	08009d5c 	.word	0x08009d5c
 8003368:	08009d70 	.word	0x08009d70
 800336c:	20000050 	.word	0x20000050
 8003370:	08009d88 	.word	0x08009d88
 8003374:	20000052 	.word	0x20000052
 8003378:	08009d9c 	.word	0x08009d9c
 800337c:	08009db0 	.word	0x08009db0
 8003380:	08009dc4 	.word	0x08009dc4

08003384 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
    lcd_init();
 8003388:	f7fd feab 	bl	80010e2 <lcd_init>
    ui = UI_WELCOME;
 800338c:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <Screen_Init+0x60>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <Screen_Init+0x64>)
 8003394:	2212      	movs	r2, #18
 8003396:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <Screen_Init+0x68>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 800339e:	f000 ff15 	bl	80041cc <HAL_GetTick>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <Screen_Init+0x6c>)
 80033a6:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 80033a8:	f7ff faf2 	bl	8002990 <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <Screen_Init+0x70>)
 80033ae:	885a      	ldrh	r2, [r3, #2]
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <Screen_Init+0x74>)
 80033b2:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <Screen_Init+0x70>)
 80033b6:	889a      	ldrh	r2, [r3, #4]
 80033b8:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <Screen_Init+0x78>)
 80033ba:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 80033bc:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <Screen_Init+0x7c>)
 80033be:	885a      	ldrh	r2, [r3, #2]
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <Screen_Init+0x80>)
 80033c2:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <Screen_Init+0x7c>)
 80033c6:	889a      	ldrh	r2, [r3, #4]
 80033c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <Screen_Init+0x84>)
 80033ca:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <Screen_Init+0x88>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003410 <Screen_Init+0x8c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b0e      	ldr	r3, [pc, #56]	@ (8003414 <Screen_Init+0x90>)
 80033dc:	801a      	strh	r2, [r3, #0]
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000434 	.word	0x20000434
 80033e8:	2000002a 	.word	0x2000002a
 80033ec:	20000435 	.word	0x20000435
 80033f0:	20000430 	.word	0x20000430
 80033f4:	2000001c 	.word	0x2000001c
 80033f8:	2000004c 	.word	0x2000004c
 80033fc:	2000004e 	.word	0x2000004e
 8003400:	20000024 	.word	0x20000024
 8003404:	20000050 	.word	0x20000050
 8003408:	20000052 	.word	0x20000052
 800340c:	200003c4 	.word	0x200003c4
 8003410:	88888889 	.word	0x88888889
 8003414:	20000054 	.word	0x20000054

08003418 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 800341c:	f7ff fab8 	bl	8002990 <refreshInactivityTimer>

    switch (ui){
 8003420:	4b65      	ldr	r3, [pc, #404]	@ (80035b8 <menu_select+0x1a0>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b11      	cmp	r3, #17
 8003426:	f200 80c0 	bhi.w	80035aa <menu_select+0x192>
 800342a:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <menu_select+0x18>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003479 	.word	0x08003479
 8003434:	08003481 	.word	0x08003481
 8003438:	0800348d 	.word	0x0800348d
 800343c:	080034fb 	.word	0x080034fb
 8003440:	08003507 	.word	0x08003507
 8003444:	08003527 	.word	0x08003527
 8003448:	0800352f 	.word	0x0800352f
 800344c:	08003537 	.word	0x08003537
 8003450:	0800353f 	.word	0x0800353f
 8003454:	08003547 	.word	0x08003547
 8003458:	08003553 	.word	0x08003553
 800345c:	0800355b 	.word	0x0800355b
 8003460:	08003563 	.word	0x08003563
 8003464:	0800356f 	.word	0x0800356f
 8003468:	08003577 	.word	0x08003577
 800346c:	0800358f 	.word	0x0800358f
 8003470:	08003597 	.word	0x08003597
 8003474:	0800359f 	.word	0x0800359f
        case UI_WELCOME: ui = UI_DASH; break;
 8003478:	4b4f      	ldr	r3, [pc, #316]	@ (80035b8 <menu_select+0x1a0>)
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e095      	b.n	80035ac <menu_select+0x194>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8003480:	4b4d      	ldr	r3, [pc, #308]	@ (80035b8 <menu_select+0x1a0>)
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	f7ff fa8f 	bl	80029a8 <goto_menu_top>
 800348a:	e08f      	b.n	80035ac <menu_select+0x194>

        case UI_MENU:
            switch (menu_idx){
 800348c:	4b4b      	ldr	r3, [pc, #300]	@ (80035bc <menu_select+0x1a4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b06      	cmp	r3, #6
 8003492:	d82d      	bhi.n	80034f0 <menu_select+0xd8>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <menu_select+0x84>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034b9 	.word	0x080034b9
 80034a0:	080034c1 	.word	0x080034c1
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034e1 	.word	0x080034e1
 80034b4:	080034e9 	.word	0x080034e9
                case 0: ui = UI_MANUAL; break;
 80034b8:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <menu_select+0x1a0>)
 80034ba:	2203      	movs	r2, #3
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e01b      	b.n	80034f8 <menu_select+0xe0>
                case 1: ui = UI_SEMI_AUTO; break;
 80034c0:	4b3d      	ldr	r3, [pc, #244]	@ (80035b8 <menu_select+0x1a0>)
 80034c2:	2204      	movs	r2, #4
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e017      	b.n	80034f8 <menu_select+0xe0>
                case 2: ui = UI_TIMER; break;
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <menu_select+0x1a0>)
 80034ca:	2205      	movs	r2, #5
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e013      	b.n	80034f8 <menu_select+0xe0>
                case 3: ui = UI_SEARCH; break;
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <menu_select+0x1a0>)
 80034d2:	220a      	movs	r2, #10
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e00f      	b.n	80034f8 <menu_select+0xe0>
                case 4: ui = UI_COUNTDOWN; break;
 80034d8:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <menu_select+0x1a0>)
 80034da:	220d      	movs	r2, #13
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e00b      	b.n	80034f8 <menu_select+0xe0>
                case 5: ui = UI_TWIST; break;
 80034e0:	4b35      	ldr	r3, [pc, #212]	@ (80035b8 <menu_select+0x1a0>)
 80034e2:	220f      	movs	r2, #15
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e007      	b.n	80034f8 <menu_select+0xe0>
                case 6: ui = UI_DASH; break;
 80034e8:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <menu_select+0x1a0>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e003      	b.n	80034f8 <menu_select+0xe0>
                default: ui = UI_DASH; break;
 80034f0:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <menu_select+0x1a0>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	bf00      	nop
            }
            break;
 80034f8:	e058      	b.n	80035ac <menu_select+0x194>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 80034fa:	f7fe fc27 	bl	8001d4c <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 80034fe:	4b30      	ldr	r3, [pc, #192]	@ (80035c0 <menu_select+0x1a8>)
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
            break;
 8003504:	e052      	b.n	80035ac <menu_select+0x194>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 8003506:	4b2f      	ldr	r3, [pc, #188]	@ (80035c4 <menu_select+0x1ac>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	f083 0301 	eor.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <menu_select+0x102>
 8003514:	f7ff fcec 	bl	8002ef0 <enable_semi_auto>
 8003518:	e001      	b.n	800351e <menu_select+0x106>
            else disable_semi_auto();
 800351a:	f7ff fcf7 	bl	8002f0c <disable_semi_auto>
            ui = UI_DASH;
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <menu_select+0x1a0>)
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
            break;
 8003524:	e042      	b.n	80035ac <menu_select+0x194>
        case UI_TIMER:
            ui = UI_TIMER_EDIT_ON_H; break;
 8003526:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <menu_select+0x1a0>)
 8003528:	2206      	movs	r2, #6
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e03e      	b.n	80035ac <menu_select+0x194>

        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 800352e:	4b22      	ldr	r3, [pc, #136]	@ (80035b8 <menu_select+0x1a0>)
 8003530:	2207      	movs	r2, #7
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e03a      	b.n	80035ac <menu_select+0x194>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8003536:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <menu_select+0x1a0>)
 8003538:	2208      	movs	r2, #8
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e036      	b.n	80035ac <menu_select+0x194>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <menu_select+0x1a0>)
 8003540:	2209      	movs	r2, #9
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e032      	b.n	80035ac <menu_select+0x194>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 8003546:	f7ff fced 	bl	8002f24 <apply_timer_settings>
            ui = UI_TIMER;
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <menu_select+0x1a0>)
 800354c:	2205      	movs	r2, #5
 800354e:	701a      	strb	r2, [r3, #0]
            break;
 8003550:	e02c      	b.n	80035ac <menu_select+0x194>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8003552:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <menu_select+0x1a0>)
 8003554:	220b      	movs	r2, #11
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e028      	b.n	80035ac <menu_select+0x194>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <menu_select+0x1a0>)
 800355c:	220c      	movs	r2, #12
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e024      	b.n	80035ac <menu_select+0x194>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8003562:	f7ff fc89 	bl	8002e78 <apply_search_settings>
            ui = UI_SEARCH;
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <menu_select+0x1a0>)
 8003568:	220a      	movs	r2, #10
 800356a:	701a      	strb	r2, [r3, #0]
            break;
 800356c:	e01e      	b.n	80035ac <menu_select+0x194>

        case UI_COUNTDOWN: ui = UI_COUNTDOWN_EDIT_MIN; break;
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <menu_select+0x1a0>)
 8003570:	220e      	movs	r2, #14
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e01a      	b.n	80035ac <menu_select+0x194>
        case UI_COUNTDOWN_EDIT_MIN:
            apply_countdown_settings();
 8003576:	f7ff fca7 	bl	8002ec8 <apply_countdown_settings>
            countdownMode = true;
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <menu_select+0x1b0>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
            countdownActive = true;
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <menu_select+0x1b4>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
            ui = UI_COUNTDOWN;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <menu_select+0x1a0>)
 8003588:	220d      	movs	r2, #13
 800358a:	701a      	strb	r2, [r3, #0]
            break;
 800358c:	e00e      	b.n	80035ac <menu_select+0x194>

        case UI_TWIST: ui = UI_TWIST_EDIT_ON; break;
 800358e:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <menu_select+0x1a0>)
 8003590:	2210      	movs	r2, #16
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e00a      	b.n	80035ac <menu_select+0x194>
        case UI_TWIST_EDIT_ON: ui = UI_TWIST_EDIT_OFF; break;
 8003596:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <menu_select+0x1a0>)
 8003598:	2211      	movs	r2, #17
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e006      	b.n	80035ac <menu_select+0x194>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();
 800359e:	f7ff fc7f 	bl	8002ea0 <apply_twist_settings>
            ui = UI_TWIST;
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <menu_select+0x1a0>)
 80035a4:	220f      	movs	r2, #15
 80035a6:	701a      	strb	r2, [r3, #0]
            break;
 80035a8:	e000      	b.n	80035ac <menu_select+0x194>


        default:
            break;
 80035aa:	bf00      	nop
    }

    screenNeedsRefresh = true;
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <menu_select+0x1a8>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000434 	.word	0x20000434
 80035bc:	20000444 	.word	0x20000444
 80035c0:	20000435 	.word	0x20000435
 80035c4:	20000440 	.word	0x20000440
 80035c8:	20000019 	.word	0x20000019
 80035cc:	200003be 	.word	0x200003be

080035d0 <menu_reset>:

static void menu_reset(void){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 80035d4:	f7ff f9dc 	bl	8002990 <refreshInactivityTimer>

    switch (ui) {
 80035d8:	4b27      	ldr	r3, [pc, #156]	@ (8003678 <menu_reset+0xa8>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d840      	bhi.n	8003664 <menu_reset+0x94>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <menu_reset+0x18>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	08003635 	.word	0x08003635
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	08003645 	.word	0x08003645
 8003600:	08003645 	.word	0x08003645
 8003604:	08003645 	.word	0x08003645
 8003608:	08003645 	.word	0x08003645
 800360c:	0800362d 	.word	0x0800362d
 8003610:	0800364d 	.word	0x0800364d
 8003614:	0800364d 	.word	0x0800364d
 8003618:	0800362d 	.word	0x0800362d
 800361c:	08003655 	.word	0x08003655
 8003620:	0800362d 	.word	0x0800362d
 8003624:	0800365d 	.word	0x0800365d
 8003628:	0800365d 	.word	0x0800365d
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST:
            ui = UI_MENU; break;
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <menu_reset+0xa8>)
 800362e:	2202      	movs	r2, #2
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e01b      	b.n	800366c <menu_reset+0x9c>

        case UI_MENU: ui = UI_DASH; break;
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <menu_reset+0xa8>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e017      	b.n	800366c <menu_reset+0x9c>
        case UI_DASH: ui = UI_WELCOME; break;
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <menu_reset+0xa8>)
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e013      	b.n	800366c <menu_reset+0x9c>

        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M:
            ui = UI_TIMER; break;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <menu_reset+0xa8>)
 8003646:	2205      	movs	r2, #5
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e00f      	b.n	800366c <menu_reset+0x9c>

        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
            ui = UI_SEARCH; break;
 800364c:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <menu_reset+0xa8>)
 800364e:	220a      	movs	r2, #10
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e00b      	b.n	800366c <menu_reset+0x9c>

        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN; break;
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <menu_reset+0xa8>)
 8003656:	220d      	movs	r2, #13
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <menu_reset+0x9c>

        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            ui = UI_TWIST; break;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <menu_reset+0xa8>)
 800365e:	220f      	movs	r2, #15
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e003      	b.n	800366c <menu_reset+0x9c>

        default: ui = UI_MENU; break;
 8003664:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <menu_reset+0xa8>)
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	bf00      	nop
    }


    screenNeedsRefresh = true;
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <menu_reset+0xac>)
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000434 	.word	0x20000434
 800367c:	20000435 	.word	0x20000435

08003680 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b){
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){ menu_reset(); return; }
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <Screen_HandleButton+0x16>
 8003690:	f7ff ff9e 	bl	80035d0 <menu_reset>
 8003694:	e167      	b.n	8003966 <Screen_HandleButton+0x2e6>
    if (b == BTN_UP) {
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b03      	cmp	r3, #3
 800369a:	f040 8092 	bne.w	80037c2 <Screen_HandleButton+0x142>
        switch (ui) {
 800369e:	4b9c      	ldr	r3, [pc, #624]	@ (8003910 <Screen_HandleButton+0x290>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	3b02      	subs	r3, #2
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d87f      	bhi.n	80037a8 <Screen_HandleButton+0x128>
 80036a8:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <Screen_HandleButton+0x30>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080037a9 	.word	0x080037a9
 80036b8:	080037a9 	.word	0x080037a9
 80036bc:	080037a9 	.word	0x080037a9
 80036c0:	0800370b 	.word	0x0800370b
 80036c4:	08003721 	.word	0x08003721
 80036c8:	08003737 	.word	0x08003737
 80036cc:	0800374d 	.word	0x0800374d
 80036d0:	080037a9 	.word	0x080037a9
 80036d4:	08003763 	.word	0x08003763
 80036d8:	08003771 	.word	0x08003771
 80036dc:	080037a9 	.word	0x080037a9
 80036e0:	0800377f 	.word	0x0800377f
 80036e4:	080037a9 	.word	0x080037a9
 80036e8:	0800378d 	.word	0x0800378d
 80036ec:	0800379b 	.word	0x0800379b
            case UI_MENU:
                if (menu_idx > 0) menu_idx--;
 80036f0:	4b88      	ldr	r3, [pc, #544]	@ (8003914 <Screen_HandleButton+0x294>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dd04      	ble.n	8003702 <Screen_HandleButton+0x82>
 80036f8:	4b86      	ldr	r3, [pc, #536]	@ (8003914 <Screen_HandleButton+0x294>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4a85      	ldr	r2, [pc, #532]	@ (8003914 <Screen_HandleButton+0x294>)
 8003700:	6013      	str	r3, [r2, #0]
                screenNeedsRefresh = true;
 8003702:	4b85      	ldr	r3, [pc, #532]	@ (8003918 <Screen_HandleButton+0x298>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
                break;
 8003708:	e057      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 800370a:	4b84      	ldr	r3, [pc, #528]	@ (800391c <Screen_HandleButton+0x29c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b16      	cmp	r3, #22
 8003710:	d84c      	bhi.n	80037ac <Screen_HandleButton+0x12c>
 8003712:	4b82      	ldr	r3, [pc, #520]	@ (800391c <Screen_HandleButton+0x29c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b80      	ldr	r3, [pc, #512]	@ (800391c <Screen_HandleButton+0x29c>)
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e045      	b.n	80037ac <Screen_HandleButton+0x12c>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8003720:	4b7f      	ldr	r3, [pc, #508]	@ (8003920 <Screen_HandleButton+0x2a0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b3a      	cmp	r3, #58	@ 0x3a
 8003726:	d843      	bhi.n	80037b0 <Screen_HandleButton+0x130>
 8003728:	4b7d      	ldr	r3, [pc, #500]	@ (8003920 <Screen_HandleButton+0x2a0>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b7b      	ldr	r3, [pc, #492]	@ (8003920 <Screen_HandleButton+0x2a0>)
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e03c      	b.n	80037b0 <Screen_HandleButton+0x130>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8003736:	4b7b      	ldr	r3, [pc, #492]	@ (8003924 <Screen_HandleButton+0x2a4>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b16      	cmp	r3, #22
 800373c:	d83a      	bhi.n	80037b4 <Screen_HandleButton+0x134>
 800373e:	4b79      	ldr	r3, [pc, #484]	@ (8003924 <Screen_HandleButton+0x2a4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b77      	ldr	r3, [pc, #476]	@ (8003924 <Screen_HandleButton+0x2a4>)
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e033      	b.n	80037b4 <Screen_HandleButton+0x134>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 800374c:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <Screen_HandleButton+0x2a8>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b3a      	cmp	r3, #58	@ 0x3a
 8003752:	d831      	bhi.n	80037b8 <Screen_HandleButton+0x138>
 8003754:	4b74      	ldr	r3, [pc, #464]	@ (8003928 <Screen_HandleButton+0x2a8>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b72      	ldr	r3, [pc, #456]	@ (8003928 <Screen_HandleButton+0x2a8>)
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e02a      	b.n	80037b8 <Screen_HandleButton+0x138>
            case UI_SEARCH_EDIT_GAP:  edit_search_gap_s += 5; break;
 8003762:	4b72      	ldr	r3, [pc, #456]	@ (800392c <Screen_HandleButton+0x2ac>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	3305      	adds	r3, #5
 8003768:	b29a      	uxth	r2, r3
 800376a:	4b70      	ldr	r3, [pc, #448]	@ (800392c <Screen_HandleButton+0x2ac>)
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	e024      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_SEARCH_EDIT_DRY:  edit_search_dry_s += 1; break;
 8003770:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <Screen_HandleButton+0x2b0>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b6d      	ldr	r3, [pc, #436]	@ (8003930 <Screen_HandleButton+0x2b0>)
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e01d      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 800377e:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <Screen_HandleButton+0x2b4>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	4b6b      	ldr	r3, [pc, #428]	@ (8003934 <Screen_HandleButton+0x2b4>)
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e016      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TWIST_EDIT_ON:   edit_twist_on_s += 1; break;
 800378c:	4b6a      	ldr	r3, [pc, #424]	@ (8003938 <Screen_HandleButton+0x2b8>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <Screen_HandleButton+0x2b8>)
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	e00f      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TWIST_EDIT_OFF:  edit_twist_off_s += 1; break;
 800379a:	4b68      	ldr	r3, [pc, #416]	@ (800393c <Screen_HandleButton+0x2bc>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b66      	ldr	r3, [pc, #408]	@ (800393c <Screen_HandleButton+0x2bc>)
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e008      	b.n	80037ba <Screen_HandleButton+0x13a>
            default: break;
 80037a8:	bf00      	nop
 80037aa:	e006      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 80037ac:	bf00      	nop
 80037ae:	e004      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 80037b0:	bf00      	nop
 80037b2:	e002      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <Screen_HandleButton+0x13a>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 80037b8:	bf00      	nop
        }
        screenNeedsRefresh = true;
 80037ba:	4b57      	ldr	r3, [pc, #348]	@ (8003918 <Screen_HandleButton+0x298>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
        return;
 80037c0:	e0d1      	b.n	8003966 <Screen_HandleButton+0x2e6>
    }

    if (b == BTN_DOWN) {
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	f040 80c8 	bne.w	800395a <Screen_HandleButton+0x2da>
        switch (ui) {
 80037ca:	4b51      	ldr	r3, [pc, #324]	@ (8003910 <Screen_HandleButton+0x290>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	3b02      	subs	r3, #2
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	f200 8093 	bhi.w	80038fc <Screen_HandleButton+0x27c>
 80037d6:	a201      	add	r2, pc, #4	@ (adr r2, 80037dc <Screen_HandleButton+0x15c>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	080038fd 	.word	0x080038fd
 80037e4:	080038fd 	.word	0x080038fd
 80037e8:	080038fd 	.word	0x080038fd
 80037ec:	08003837 	.word	0x08003837
 80037f0:	0800384d 	.word	0x0800384d
 80037f4:	08003863 	.word	0x08003863
 80037f8:	08003879 	.word	0x08003879
 80037fc:	080038fd 	.word	0x080038fd
 8003800:	0800388f 	.word	0x0800388f
 8003804:	080038a5 	.word	0x080038a5
 8003808:	080038fd 	.word	0x080038fd
 800380c:	080038bb 	.word	0x080038bb
 8003810:	080038fd 	.word	0x080038fd
 8003814:	080038d1 	.word	0x080038d1
 8003818:	080038e7 	.word	0x080038e7
            case UI_MENU:
                if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++;
 800381c:	4b3d      	ldr	r3, [pc, #244]	@ (8003914 <Screen_HandleButton+0x294>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d804      	bhi.n	800382e <Screen_HandleButton+0x1ae>
 8003824:	4b3b      	ldr	r3, [pc, #236]	@ (8003914 <Screen_HandleButton+0x294>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	4a3a      	ldr	r2, [pc, #232]	@ (8003914 <Screen_HandleButton+0x294>)
 800382c:	6013      	str	r3, [r2, #0]
                screenNeedsRefresh = true;
 800382e:	4b3a      	ldr	r3, [pc, #232]	@ (8003918 <Screen_HandleButton+0x298>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
                break;
 8003834:	e08d      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8003836:	4b39      	ldr	r3, [pc, #228]	@ (800391c <Screen_HandleButton+0x29c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d060      	beq.n	8003900 <Screen_HandleButton+0x280>
 800383e:	4b37      	ldr	r3, [pc, #220]	@ (800391c <Screen_HandleButton+0x29c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	3b01      	subs	r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b35      	ldr	r3, [pc, #212]	@ (800391c <Screen_HandleButton+0x29c>)
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e059      	b.n	8003900 <Screen_HandleButton+0x280>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 800384c:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <Screen_HandleButton+0x2a0>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d057      	beq.n	8003904 <Screen_HandleButton+0x284>
 8003854:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <Screen_HandleButton+0x2a0>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3b01      	subs	r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b30      	ldr	r3, [pc, #192]	@ (8003920 <Screen_HandleButton+0x2a0>)
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e050      	b.n	8003904 <Screen_HandleButton+0x284>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8003862:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <Screen_HandleButton+0x2a4>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04e      	beq.n	8003908 <Screen_HandleButton+0x288>
 800386a:	4b2e      	ldr	r3, [pc, #184]	@ (8003924 <Screen_HandleButton+0x2a4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	3b01      	subs	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b2c      	ldr	r3, [pc, #176]	@ (8003924 <Screen_HandleButton+0x2a4>)
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e047      	b.n	8003908 <Screen_HandleButton+0x288>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8003878:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <Screen_HandleButton+0x2a8>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d045      	beq.n	800390c <Screen_HandleButton+0x28c>
 8003880:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <Screen_HandleButton+0x2a8>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <Screen_HandleButton+0x2a8>)
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e03e      	b.n	800390c <Screen_HandleButton+0x28c>
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 800388e:	4b27      	ldr	r3, [pc, #156]	@ (800392c <Screen_HandleButton+0x2ac>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	2b05      	cmp	r3, #5
 8003894:	d954      	bls.n	8003940 <Screen_HandleButton+0x2c0>
 8003896:	4b25      	ldr	r3, [pc, #148]	@ (800392c <Screen_HandleButton+0x2ac>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	3b05      	subs	r3, #5
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b23      	ldr	r3, [pc, #140]	@ (800392c <Screen_HandleButton+0x2ac>)
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	e04d      	b.n	8003940 <Screen_HandleButton+0x2c0>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 80038a4:	4b22      	ldr	r3, [pc, #136]	@ (8003930 <Screen_HandleButton+0x2b0>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d04b      	beq.n	8003944 <Screen_HandleButton+0x2c4>
 80038ac:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <Screen_HandleButton+0x2b0>)
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <Screen_HandleButton+0x2b0>)
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e044      	b.n	8003944 <Screen_HandleButton+0x2c4>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <Screen_HandleButton+0x2b4>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d942      	bls.n	8003948 <Screen_HandleButton+0x2c8>
 80038c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <Screen_HandleButton+0x2b4>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <Screen_HandleButton+0x2b4>)
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e03b      	b.n	8003948 <Screen_HandleButton+0x2c8>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <Screen_HandleButton+0x2b8>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d939      	bls.n	800394c <Screen_HandleButton+0x2cc>
 80038d8:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <Screen_HandleButton+0x2b8>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <Screen_HandleButton+0x2b8>)
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e032      	b.n	800394c <Screen_HandleButton+0x2cc>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <Screen_HandleButton+0x2bc>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d930      	bls.n	8003950 <Screen_HandleButton+0x2d0>
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <Screen_HandleButton+0x2bc>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <Screen_HandleButton+0x2bc>)
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e029      	b.n	8003950 <Screen_HandleButton+0x2d0>
            default: break;
 80038fc:	bf00      	nop
 80038fe:	e028      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8003900:	bf00      	nop
 8003902:	e026      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8003904:	bf00      	nop
 8003906:	e024      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8003908:	bf00      	nop
 800390a:	e022      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 800390c:	bf00      	nop
 800390e:	e020      	b.n	8003952 <Screen_HandleButton+0x2d2>
 8003910:	20000434 	.word	0x20000434
 8003914:	20000444 	.word	0x20000444
 8003918:	20000435 	.word	0x20000435
 800391c:	20000048 	.word	0x20000048
 8003920:	20000049 	.word	0x20000049
 8003924:	2000004a 	.word	0x2000004a
 8003928:	2000004b 	.word	0x2000004b
 800392c:	2000004c 	.word	0x2000004c
 8003930:	2000004e 	.word	0x2000004e
 8003934:	20000054 	.word	0x20000054
 8003938:	20000050 	.word	0x20000050
 800393c:	20000052 	.word	0x20000052
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 8003940:	bf00      	nop
 8003942:	e006      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 8003944:	bf00      	nop
 8003946:	e004      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <Screen_HandleButton+0x2d2>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8003950:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <Screen_HandleButton+0x2ec>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
        return;
 8003958:	e005      	b.n	8003966 <Screen_HandleButton+0x2e6>
    }

    if (b == BTN_SELECT) { menu_select(); return; }
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d102      	bne.n	8003966 <Screen_HandleButton+0x2e6>
 8003960:	f7ff fd5a 	bl	8003418 <menu_select>
 8003964:	bf00      	nop
}
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000435 	.word	0x20000435

08003970 <Screen_HandleSwitches>:

/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e079      	b.n	8003a70 <Screen_HandleSwitches+0x100>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 800397c:	4940      	ldr	r1, [pc, #256]	@ (8003a80 <Screen_HandleSwitches+0x110>)
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	493c      	ldr	r1, [pc, #240]	@ (8003a80 <Screen_HandleSwitches+0x110>)
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3304      	adds	r3, #4
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	f001 fbb0 	bl	8005104 <HAL_GPIO_ReadPin>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	72fb      	strb	r3, [r7, #11]

        if (pressed && prev[i]) {
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d012      	beq.n	80039dc <Screen_HandleSwitches+0x6c>
 80039b6:	4a33      	ldr	r2, [pc, #204]	@ (8003a84 <Screen_HandleSwitches+0x114>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 80039c2:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <Screen_HandleSwitches+0x114>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 80039cc:	f000 fbfe 	bl	80041cc <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	492d      	ldr	r1, [pc, #180]	@ (8003a88 <Screen_HandleSwitches+0x118>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80039da:	e046      	b.n	8003a6a <Screen_HandleSwitches+0xfa>
        }
        else if (!pressed && !prev[i]) {
 80039dc:	7afb      	ldrb	r3, [r7, #11]
 80039de:	f083 0301 	eor.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d040      	beq.n	8003a6a <Screen_HandleSwitches+0xfa>
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <Screen_HandleSwitches+0x114>)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d037      	beq.n	8003a6a <Screen_HandleSwitches+0xfa>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 80039fa:	f000 fbe7 	bl	80041cc <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4921      	ldr	r1, [pc, #132]	@ (8003a88 <Screen_HandleSwitches+0x118>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <Screen_HandleSwitches+0x114>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]

            if (i == 0 && pressDuration > 2000) {
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <Screen_HandleSwitches+0xba>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003a22:	d902      	bls.n	8003a2a <Screen_HandleSwitches+0xba>
                ModelHandle_ManualLongPress(); // long press = restart into last mode
 8003a24:	f7fe f9c2 	bl	8001dac <ModelHandle_ManualLongPress>
 8003a28:	e01f      	b.n	8003a6a <Screen_HandleSwitches+0xfa>
            } else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8003a2a:	4915      	ldr	r1, [pc, #84]	@ (8003a80 <Screen_HandleSwitches+0x110>)
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <Screen_HandleSwitches+0x110>)
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3308      	adds	r3, #8
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f001 fb88 	bl	8005162 <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 8003a52:	490b      	ldr	r1, [pc, #44]	@ (8003a80 <Screen_HandleSwitches+0x110>)
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3306      	adds	r3, #6
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fe0b 	bl	8003680 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	dd82      	ble.n	800397c <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08009e0c 	.word	0x08009e0c
 8003a84:	20000058 	.word	0x20000058
 8003a88:	2000044c 	.word	0x2000044c

08003a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4a14      	ldr	r2, [pc, #80]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6193      	str	r3, [r2, #24]
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	61d3      	str	r3, [r2, #28]
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <HAL_MspInit+0x5c>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_MspInit+0x60>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <HAL_MspInit+0x60>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40010000 	.word	0x40010000

08003af0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 0310 	add.w	r3, r7, #16
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_ADC_MspInit+0x6c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d121      	bne.n	8003b54 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b1a:	6193      	str	r3, [r2, #24]
 8003b1c:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6193      	str	r3, [r2, #24]
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_ADC_MspInit+0x70>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b40:	233f      	movs	r3, #63	@ 0x3f
 8003b42:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b44:	2303      	movs	r3, #3
 8003b46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b48:	f107 0310 	add.w	r3, r7, #16
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <HAL_ADC_MspInit+0x74>)
 8003b50:	f001 f954 	bl	8004dfc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40012400 	.word	0x40012400
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010800 	.word	0x40010800

08003b68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_I2C_MspInit+0x74>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d124      	bne.n	8003bd2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b88:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	6193      	str	r3, [r2, #24]
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ba0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ba6:	2312      	movs	r3, #18
 8003ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480b      	ldr	r0, [pc, #44]	@ (8003be4 <HAL_I2C_MspInit+0x7c>)
 8003bb6:	f001 f921 	bl	8004dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bba:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003bc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bc4:	61d3      	str	r3, [r2, #28]
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_I2C_MspInit+0x78>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003bd2:	bf00      	nop
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40005800 	.word	0x40005800
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40010c00 	.word	0x40010c00

08003be8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_SPI_MspInit+0xa4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d13d      	bne.n	8003c84 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c08:	4b21      	ldr	r3, [pc, #132]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c26:	f043 0308 	orr.w	r3, r3, #8
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <HAL_SPI_MspInit+0xa8>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003c38:	2328      	movs	r3, #40	@ 0x28
 8003c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4812      	ldr	r0, [pc, #72]	@ (8003c94 <HAL_SPI_MspInit+0xac>)
 8003c4c:	f001 f8d6 	bl	8004dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c50:	2310      	movs	r3, #16
 8003c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4619      	mov	r1, r3
 8003c62:	480c      	ldr	r0, [pc, #48]	@ (8003c94 <HAL_SPI_MspInit+0xac>)
 8003c64:	f001 f8ca 	bl	8004dfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_SPI_MspInit+0xb0>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	4a06      	ldr	r2, [pc, #24]	@ (8003c98 <HAL_SPI_MspInit+0xb0>)
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003c84:	bf00      	nop
 8003c86:	3728      	adds	r7, #40	@ 0x28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013000 	.word	0x40013000
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40010c00 	.word	0x40010c00
 8003c98:	40010000 	.word	0x40010000

08003c9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x34>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10b      	bne.n	8003cc6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x38>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4a08      	ldr	r2, [pc, #32]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x38>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	61d3      	str	r3, [r2, #28]
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x38>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce0:	f107 0310 	add.w	r3, r7, #16
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d64 <HAL_UART_MspInit+0x8c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d131      	bne.n	8003d5c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d02:	6193      	str	r3, [r2, #24]
 8003d04:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	6193      	str	r3, [r2, #24]
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_UART_MspInit+0x90>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d32:	2303      	movs	r3, #3
 8003d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 0310 	add.w	r3, r7, #16
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	480b      	ldr	r0, [pc, #44]	@ (8003d6c <HAL_UART_MspInit+0x94>)
 8003d3e:	f001 f85d 	bl	8004dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	4619      	mov	r1, r3
 8003d56:	4805      	ldr	r0, [pc, #20]	@ (8003d6c <HAL_UART_MspInit+0x94>)
 8003d58:	f001 f850 	bl	8004dfc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003d5c:	bf00      	nop
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40013800 	.word	0x40013800
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40010800 	.word	0x40010800

08003d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <NMI_Handler+0x4>

08003d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <HardFault_Handler+0x4>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <MemManage_Handler+0x4>

08003d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <BusFault_Handler+0x4>

08003d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <UsageFault_Handler+0x4>

08003d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dc0:	f000 f9f2 	bl	80041a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <RTC_Alarm_IRQHandler+0x10>)
 8003dce:	f003 fa71 	bl	80072b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200001f0 	.word	0x200001f0

08003ddc <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	f000 f9f4 	bl	80041cc <HAL_GetTick>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4618      	mov	r0, r3
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <Switches_Init+0x94>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <Switches_Init+0x94>)
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	6193      	str	r3, [r2, #24]
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <Switches_Init+0x94>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8003e1e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003e22:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4816      	ldr	r0, [pc, #88]	@ (8003e84 <Switches_Init+0x98>)
 8003e2a:	f000 ffe7 	bl	8004dfc <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e01d      	b.n	8003e70 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8003e34:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <Switches_Init+0x9c>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8003e3e:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <Switches_Init+0xa0>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8003e48:	f7ff ffc8 	bl	8003ddc <now_ms>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4910      	ldr	r1, [pc, #64]	@ (8003e90 <Switches_Init+0xa4>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8003e56:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <Switches_Init+0xa8>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8003e60:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <Switches_Init+0xac>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4413      	add	r3, r2
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	ddde      	ble.n	8003e34 <Switches_Init+0x48>
    }
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010c00 	.word	0x40010c00
 8003e88:	2000045c 	.word	0x2000045c
 8003e8c:	20000470 	.word	0x20000470
 8003e90:	20000460 	.word	0x20000460
 8003e94:	20000474 	.word	0x20000474
 8003e98:	20000484 	.word	0x20000484

08003e9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e00a      	b.n	8003ec4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003eae:	f3af 8000 	nop.w
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	60ba      	str	r2, [r7, #8]
 8003eba:	b2ca      	uxtb	r2, r1
 8003ebc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	dbf0      	blt.n	8003eae <_read+0x12>
  }

  return len;
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e009      	b.n	8003efc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	dbf1      	blt.n	8003ee8 <_write+0x12>
  }
  return len;
 8003f04:	687b      	ldr	r3, [r7, #4]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_close>:

int _close(int file)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f34:	605a      	str	r2, [r3, #4]
  return 0;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <_isatty>:

int _isatty(int file)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f4a:	2301      	movs	r3, #1
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
	...

08003f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f78:	4a14      	ldr	r2, [pc, #80]	@ (8003fcc <_sbrk+0x5c>)
 8003f7a:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <_sbrk+0x60>)
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f84:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <_sbrk+0x64>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <_sbrk+0x64>)
 8003f8e:	4a12      	ldr	r2, [pc, #72]	@ (8003fd8 <_sbrk+0x68>)
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f92:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <_sbrk+0x64>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d207      	bcs.n	8003fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fa0:	f004 ff38 	bl	8008e14 <__errno>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	220c      	movs	r2, #12
 8003fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	e009      	b.n	8003fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <_sbrk+0x64>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fb6:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <_sbrk+0x64>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a05      	ldr	r2, [pc, #20]	@ (8003fd4 <_sbrk+0x64>)
 8003fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20005000 	.word	0x20005000
 8003fd0:	00000400 	.word	0x00000400
 8003fd4:	20000488 	.word	0x20000488
 8003fd8:	20000628 	.word	0x20000628

08003fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8003fec:	2240      	movs	r2, #64	@ 0x40
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4807      	ldr	r0, [pc, #28]	@ (8004010 <UART_Init+0x28>)
 8003ff2:	f004 fe9b 	bl	8008d2c <memset>
    rxIndex = 0;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <UART_Init+0x2c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <UART_Init+0x30>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8004002:	2201      	movs	r2, #1
 8004004:	4905      	ldr	r1, [pc, #20]	@ (800401c <UART_Init+0x34>)
 8004006:	4806      	ldr	r0, [pc, #24]	@ (8004020 <UART_Init+0x38>)
 8004008:	f004 fabb 	bl	8008582 <HAL_UART_Receive_IT>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000490 	.word	0x20000490
 8004014:	200004d0 	.word	0x200004d0
 8004018:	200004d2 	.word	0x200004d2
 800401c:	2000048c 	.word	0x2000048c
 8004020:	200002a4 	.word	0x200002a4

08004024 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f7fc f896 	bl	8000160 <strlen>
 8004034:	4603      	mov	r3, r0
 8004036:	b29a      	uxth	r2, r3
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f004 fa14 	bl	800846c <HAL_UART_Transmit>
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8004056:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <UART_GetReceivedPacket+0x78>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02c      	beq.n	80040b8 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800405e:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <UART_GetReceivedPacket+0x7c>)
 8004060:	f7fc f87e 	bl	8000160 <strlen>
 8004064:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d219      	bcs.n	80040a2 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	461a      	mov	r2, r3
 8004074:	4914      	ldr	r1, [pc, #80]	@ (80040c8 <UART_GetReceivedPacket+0x7c>)
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f004 fe73 	bl	8008d62 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	2100      	movs	r1, #0
 800408c:	480e      	ldr	r0, [pc, #56]	@ (80040c8 <UART_GetReceivedPacket+0x7c>)
 800408e:	f004 fe4d 	bl	8008d2c <memset>
            rxIndex = 0;
 8004092:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <UART_GetReceivedPacket+0x80>)
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8004098:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <UART_GetReceivedPacket+0x78>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
            return true;
 800409e:	2301      	movs	r3, #1
 80040a0:	e00b      	b.n	80040ba <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	2100      	movs	r1, #0
 80040a6:	4808      	ldr	r0, [pc, #32]	@ (80040c8 <UART_GetReceivedPacket+0x7c>)
 80040a8:	f004 fe40 	bl	8008d2c <memset>
            rxIndex = 0;
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <UART_GetReceivedPacket+0x80>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80040b2:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <UART_GetReceivedPacket+0x78>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200004d2 	.word	0x200004d2
 80040c8:	20000490 	.word	0x20000490
 80040cc:	200004d0 	.word	0x200004d0

080040d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040d0:	f7ff ff84 	bl	8003fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040d4:	480b      	ldr	r0, [pc, #44]	@ (8004104 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040d6:	490c      	ldr	r1, [pc, #48]	@ (8004108 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040d8:	4a0c      	ldr	r2, [pc, #48]	@ (800410c <LoopFillZerobss+0x16>)
  movs r3, #0
 80040da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040dc:	e002      	b.n	80040e4 <LoopCopyDataInit>

080040de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040e2:	3304      	adds	r3, #4

080040e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040e8:	d3f9      	bcc.n	80040de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040ec:	4c09      	ldr	r4, [pc, #36]	@ (8004114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f0:	e001      	b.n	80040f6 <LoopFillZerobss>

080040f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040f4:	3204      	adds	r2, #4

080040f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040f8:	d3fb      	bcc.n	80040f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040fa:	f004 fe91 	bl	8008e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040fe:	f7fd fb0d 	bl	800171c <main>
  bx lr
 8004102:	4770      	bx	lr
  ldr r0, =_sdata
 8004104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004108:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800410c:	08009ec0 	.word	0x08009ec0
  ldr r2, =_sbss
 8004110:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004114:	20000624 	.word	0x20000624

08004118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004118:	e7fe      	b.n	8004118 <ADC1_2_IRQHandler>
	...

0800411c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004120:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <HAL_Init+0x28>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a07      	ldr	r2, [pc, #28]	@ (8004144 <HAL_Init+0x28>)
 8004126:	f043 0310 	orr.w	r3, r3, #16
 800412a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412c:	2003      	movs	r0, #3
 800412e:	f000 fe31 	bl	8004d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004132:	2000      	movs	r0, #0
 8004134:	f000 f808 	bl	8004148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004138:	f7ff fca8 	bl	8003a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004150:	4b12      	ldr	r3, [pc, #72]	@ (800419c <HAL_InitTick+0x54>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_InitTick+0x58>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800415e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe3b 	bl	8004de2 <HAL_SYSTICK_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00e      	b.n	8004194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d80a      	bhi.n	8004192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f000 fe11 	bl	8004daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004188:	4a06      	ldr	r2, [pc, #24]	@ (80041a4 <HAL_InitTick+0x5c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	2000005c 	.word	0x2000005c
 80041a0:	20000064 	.word	0x20000064
 80041a4:	20000060 	.word	0x20000060

080041a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_IncTick+0x1c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_IncTick+0x20>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a03      	ldr	r2, [pc, #12]	@ (80041c8 <HAL_IncTick+0x20>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	20000064 	.word	0x20000064
 80041c8:	200004d4 	.word	0x200004d4

080041cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return uwTick;
 80041d0:	4b02      	ldr	r3, [pc, #8]	@ (80041dc <HAL_GetTick+0x10>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	200004d4 	.word	0x200004d4

080041e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7ff fff0 	bl	80041cc <HAL_GetTick>
 80041ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d005      	beq.n	8004206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <HAL_Delay+0x44>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004206:	bf00      	nop
 8004208:	f7ff ffe0 	bl	80041cc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	429a      	cmp	r2, r3
 8004216:	d8f7      	bhi.n	8004208 <HAL_Delay+0x28>
  {
  }
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000064 	.word	0x20000064

08004228 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0be      	b.n	80043c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fc42 	bl	8003af0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fbf1 	bl	8004a54 <ADC_ConversionStop_Disable>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8099 	bne.w	80043b6 <HAL_ADC_Init+0x18e>
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 8095 	bne.w	80043b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004294:	f023 0302 	bic.w	r3, r3, #2
 8004298:	f043 0202 	orr.w	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7b1b      	ldrb	r3, [r3, #12]
 80042ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c0:	d003      	beq.n	80042ca <HAL_ADC_Init+0xa2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_ADC_Init+0xa8>
 80042ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_Init+0xaa>
 80042d0:	2300      	movs	r3, #0
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7d1b      	ldrb	r3, [r3, #20]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d119      	bne.n	8004314 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7b1b      	ldrb	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	035a      	lsls	r2, r3, #13
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	e00b      	b.n	8004314 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	f043 0201 	orr.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_ADC_Init+0x1a8>)
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004344:	d003      	beq.n	800434e <HAL_ADC_Init+0x126>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d104      	bne.n	8004358 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	3b01      	subs	r3, #1
 8004354:	051b      	lsls	r3, r3, #20
 8004356:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	430a      	orrs	r2, r1
 800436a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <HAL_ADC_Init+0x1ac>)
 8004374:	4013      	ands	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d10b      	bne.n	8004394 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004392:	e018      	b.n	80043c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f023 0312 	bic.w	r3, r3, #18
 800439c:	f043 0210 	orr.w	r2, r3, #16
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043b4:	e007      	b.n	80043c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	ffe1f7fd 	.word	0xffe1f7fd
 80043d4:	ff1f0efe 	.word	0xff1f0efe

080043d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Start+0x1a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e098      	b.n	8004524 <HAL_ADC_Start+0x14c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fad0 	bl	80049a0 <ADC_Enable>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 8087 	bne.w	800451a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a41      	ldr	r2, [pc, #260]	@ (800452c <HAL_ADC_Start+0x154>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d105      	bne.n	8004436 <HAL_ADC_Start+0x5e>
 800442a:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <HAL_ADC_Start+0x158>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d115      	bne.n	8004462 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d026      	beq.n	800449e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004458:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004460:	e01d      	b.n	800449e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2f      	ldr	r2, [pc, #188]	@ (8004530 <HAL_ADC_Start+0x158>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_ADC_Start+0xaa>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_ADC_Start+0x154>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10d      	bne.n	800449e <HAL_ADC_Start+0xc6>
 8004482:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <HAL_ADC_Start+0x158>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004496:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f023 0206 	bic.w	r2, r3, #6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044b6:	e002      	b.n	80044be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0202 	mvn.w	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80044da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80044de:	d113      	bne.n	8004508 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044e4:	4a11      	ldr	r2, [pc, #68]	@ (800452c <HAL_ADC_Start+0x154>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d105      	bne.n	80044f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044ea:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_ADC_Start+0x158>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	e00c      	b.n	8004522 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	e003      	b.n	8004522 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40012800 	.word	0x40012800
 8004530:	40012400 	.word	0x40012400

08004534 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_ADC_Stop+0x1a>
 800454a:	2302      	movs	r3, #2
 800454c:	e01a      	b.n	8004584 <HAL_ADC_Stop+0x50>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa7c 	bl	8004a54 <ADC_ConversionStop_Disable>
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80045a2:	f7ff fe13 	bl	80041cc <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0d3      	b.n	8004776 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d131      	bne.n	8004640 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d12a      	bne.n	8004640 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80045ea:	e021      	b.n	8004630 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d01d      	beq.n	8004630 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <HAL_ADC_PollForConversion+0x7e>
 80045fa:	f7ff fde7 	bl	80041cc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d212      	bcs.n	8004630 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0a2      	b.n	8004776 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0d6      	beq.n	80045ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800463e:	e070      	b.n	8004722 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004640:	4b4f      	ldr	r3, [pc, #316]	@ (8004780 <HAL_ADC_PollForConversion+0x1f4>)
 8004642:	681c      	ldr	r4, [r3, #0]
 8004644:	2002      	movs	r0, #2
 8004646:	f002 fd7f 	bl	8007148 <HAL_RCCEx_GetPeriphCLKFreq>
 800464a:	4603      	mov	r3, r0
 800464c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6919      	ldr	r1, [r3, #16]
 8004656:	4b4b      	ldr	r3, [pc, #300]	@ (8004784 <HAL_ADC_PollForConversion+0x1f8>)
 8004658:	400b      	ands	r3, r1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d118      	bne.n	8004690 <HAL_ADC_PollForConversion+0x104>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	4b48      	ldr	r3, [pc, #288]	@ (8004788 <HAL_ADC_PollForConversion+0x1fc>)
 8004666:	400b      	ands	r3, r1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_ADC_PollForConversion+0x104>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	4b46      	ldr	r3, [pc, #280]	@ (800478c <HAL_ADC_PollForConversion+0x200>)
 8004674:	400b      	ands	r3, r1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_ADC_PollForConversion+0x100>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68d9      	ldr	r1, [r3, #12]
 8004680:	4b43      	ldr	r3, [pc, #268]	@ (8004790 <HAL_ADC_PollForConversion+0x204>)
 8004682:	400b      	ands	r3, r1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_ADC_PollForConversion+0x100>
 8004688:	2314      	movs	r3, #20
 800468a:	e020      	b.n	80046ce <HAL_ADC_PollForConversion+0x142>
 800468c:	2329      	movs	r3, #41	@ 0x29
 800468e:	e01e      	b.n	80046ce <HAL_ADC_PollForConversion+0x142>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	4b3d      	ldr	r3, [pc, #244]	@ (800478c <HAL_ADC_PollForConversion+0x200>)
 8004698:	400b      	ands	r3, r1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_ADC_PollForConversion+0x120>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <HAL_ADC_PollForConversion+0x204>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <HAL_ADC_PollForConversion+0x13c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	4b38      	ldr	r3, [pc, #224]	@ (8004794 <HAL_ADC_PollForConversion+0x208>)
 80046b4:	400b      	ands	r3, r1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_ADC_PollForConversion+0x140>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_ADC_PollForConversion+0x208>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_PollForConversion+0x140>
 80046c8:	2354      	movs	r3, #84	@ 0x54
 80046ca:	e000      	b.n	80046ce <HAL_ADC_PollForConversion+0x142>
 80046cc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80046d4:	e021      	b.n	800471a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d01a      	beq.n	8004714 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_ADC_PollForConversion+0x168>
 80046e4:	f7ff fd72 	bl	80041cc <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d20f      	bcs.n	8004714 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d90b      	bls.n	8004714 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e030      	b.n	8004776 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	d8d9      	bhi.n	80046d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 0212 	mvn.w	r2, #18
 800472a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004742:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004746:	d115      	bne.n	8004774 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}
 800477e:	bf00      	nop
 8004780:	2000005c 	.word	0x2000005c
 8004784:	24924924 	.word	0x24924924
 8004788:	00924924 	.word	0x00924924
 800478c:	12492492 	.word	0x12492492
 8004790:	00492492 	.word	0x00492492
 8004794:	00249249 	.word	0x00249249

08004798 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x20>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0dc      	b.n	800498a <HAL_ADC_ConfigChannel+0x1da>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d81c      	bhi.n	800481a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b05      	subs	r3, #5
 80047f2:	221f      	movs	r2, #31
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	4019      	ands	r1, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	3b05      	subs	r3, #5
 800480c:	fa00 f203 	lsl.w	r2, r0, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	635a      	str	r2, [r3, #52]	@ 0x34
 8004818:	e03c      	b.n	8004894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d81c      	bhi.n	800485c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	3b23      	subs	r3, #35	@ 0x23
 8004834:	221f      	movs	r2, #31
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	4019      	ands	r1, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	3b23      	subs	r3, #35	@ 0x23
 800484e:	fa00 f203 	lsl.w	r2, r0, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
 800485a:	e01b      	b.n	8004894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	3b41      	subs	r3, #65	@ 0x41
 800486e:	221f      	movs	r2, #31
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	4019      	ands	r1, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	3b41      	subs	r3, #65	@ 0x41
 8004888:	fa00 f203 	lsl.w	r2, r0, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b09      	cmp	r3, #9
 800489a:	d91c      	bls.n	80048d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d9      	ldr	r1, [r3, #12]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	3b1e      	subs	r3, #30
 80048ae:	2207      	movs	r2, #7
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	4019      	ands	r1, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6898      	ldr	r0, [r3, #8]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	3b1e      	subs	r3, #30
 80048c8:	fa00 f203 	lsl.w	r2, r0, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e019      	b.n	800490a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6919      	ldr	r1, [r3, #16]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	2207      	movs	r2, #7
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	4019      	ands	r1, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6898      	ldr	r0, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b10      	cmp	r3, #16
 8004910:	d003      	beq.n	800491a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004916:	2b11      	cmp	r3, #17
 8004918:	d132      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <HAL_ADC_ConfigChannel+0x1e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d125      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d126      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004940:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b10      	cmp	r3, #16
 8004948:	d11a      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <HAL_ADC_ConfigChannel+0x1e8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a13      	ldr	r2, [pc, #76]	@ (800499c <HAL_ADC_ConfigChannel+0x1ec>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	0c9a      	lsrs	r2, r3, #18
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004960:	e002      	b.n	8004968 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3b01      	subs	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f9      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x1b2>
 800496e:	e007      	b.n	8004980 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40012400 	.word	0x40012400
 8004998:	2000005c 	.word	0x2000005c
 800499c:	431bde83 	.word	0x431bde83

080049a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d040      	beq.n	8004a40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049ce:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <ADC_Enable+0xac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <ADC_Enable+0xb0>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049dc:	e002      	b.n	80049e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f9      	bne.n	80049de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049ea:	f7ff fbef 	bl	80041cc <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80049f0:	e01f      	b.n	8004a32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049f2:	f7ff fbeb 	bl	80041cc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d918      	bls.n	8004a32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d011      	beq.n	8004a32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f043 0210 	orr.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e007      	b.n	8004a42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d1d8      	bne.n	80049f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	2000005c 	.word	0x2000005c
 8004a50:	431bde83 	.word	0x431bde83

08004a54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d12e      	bne.n	8004acc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a7e:	f7ff fba5 	bl	80041cc <HAL_GetTick>
 8004a82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a84:	e01b      	b.n	8004abe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a86:	f7ff fba1 	bl	80041cc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d914      	bls.n	8004abe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10d      	bne.n	8004abe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	f043 0210 	orr.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e007      	b.n	8004ace <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d0dc      	beq.n	8004a86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_ADCEx_Calibration_Start+0x1e>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e097      	b.n	8004c26 <HAL_ADCEx_Calibration_Start+0x14e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ffa8 	bl	8004a54 <ADC_ConversionStop_Disable>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff49 	bl	80049a0 <ADC_Enable>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8081 	bne.w	8004c1c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b22:	f023 0302 	bic.w	r3, r3, #2
 8004b26:	f043 0202 	orr.w	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004b2e:	4b40      	ldr	r3, [pc, #256]	@ (8004c30 <HAL_ADCEx_Calibration_Start+0x158>)
 8004b30:	681c      	ldr	r4, [r3, #0]
 8004b32:	2002      	movs	r0, #2
 8004b34:	f002 fb08 	bl	8007148 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004b3e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004b40:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004b42:	e002      	b.n	8004b4a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f9      	bne.n	8004b44 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0208 	orr.w	r2, r2, #8
 8004b5e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004b60:	f7ff fb34 	bl	80041cc <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004b66:	e01b      	b.n	8004ba0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004b68:	f7ff fb30 	bl	80041cc <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b0a      	cmp	r3, #10
 8004b74:	d914      	bls.n	8004ba0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	f023 0312 	bic.w	r3, r3, #18
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e042      	b.n	8004c26 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1dc      	bne.n	8004b68 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0204 	orr.w	r2, r2, #4
 8004bbc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004bbe:	f7ff fb05 	bl	80041cc <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004bc4:	e01b      	b.n	8004bfe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004bc6:	f7ff fb01 	bl	80041cc <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b0a      	cmp	r3, #10
 8004bd2:	d914      	bls.n	8004bfe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	f023 0312 	bic.w	r3, r3, #18
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e013      	b.n	8004c26 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1dc      	bne.n	8004bc6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	f043 0201 	orr.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000005c 	.word	0x2000005c

08004c34 <__NVIC_SetPriorityGrouping>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <__NVIC_SetPriorityGrouping+0x44>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c66:	4a04      	ldr	r2, [pc, #16]	@ (8004c78 <__NVIC_SetPriorityGrouping+0x44>)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	60d3      	str	r3, [r2, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <__NVIC_GetPriorityGrouping>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c80:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <__NVIC_GetPriorityGrouping+0x18>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	f003 0307 	and.w	r3, r3, #7
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_SetPriority>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	6039      	str	r1, [r7, #0]
 8004ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db0a      	blt.n	8004cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	490c      	ldr	r1, [pc, #48]	@ (8004ce4 <__NVIC_SetPriority+0x4c>)
 8004cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004cc0:	e00a      	b.n	8004cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4908      	ldr	r1, [pc, #32]	@ (8004ce8 <__NVIC_SetPriority+0x50>)
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	3b04      	subs	r3, #4
 8004cd0:	0112      	lsls	r2, r2, #4
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	761a      	strb	r2, [r3, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	e000e100 	.word	0xe000e100
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <NVIC_EncodePriority>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f1c3 0307 	rsb	r3, r3, #7
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	bf28      	it	cs
 8004d0a:	2304      	movcs	r3, #4
 8004d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d902      	bls.n	8004d1c <NVIC_EncodePriority+0x30>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3b03      	subs	r3, #3
 8004d1a:	e000      	b.n	8004d1e <NVIC_EncodePriority+0x32>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	401a      	ands	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d34:	f04f 31ff 	mov.w	r1, #4294967295
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3e:	43d9      	mvns	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d44:	4313      	orrs	r3, r2
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3724      	adds	r7, #36	@ 0x24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d60:	d301      	bcc.n	8004d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d62:	2301      	movs	r3, #1
 8004d64:	e00f      	b.n	8004d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d66:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <SysTick_Config+0x40>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d6e:	210f      	movs	r1, #15
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	f7ff ff90 	bl	8004c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <SysTick_Config+0x40>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <SysTick_Config+0x40>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000e010 	.word	0xe000e010

08004d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ff49 	bl	8004c34 <__NVIC_SetPriorityGrouping>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dbc:	f7ff ff5e 	bl	8004c7c <__NVIC_GetPriorityGrouping>
 8004dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff90 	bl	8004cec <NVIC_EncodePriority>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ff5f 	bl	8004c98 <__NVIC_SetPriority>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ffb0 	bl	8004d50 <SysTick_Config>
 8004df0:	4603      	mov	r3, r0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b08b      	sub	sp, #44	@ 0x2c
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e0e:	e169      	b.n	80050e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e10:	2201      	movs	r2, #1
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	f040 8158 	bne.w	80050de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4a9a      	ldr	r2, [pc, #616]	@ (800509c <HAL_GPIO_Init+0x2a0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d05e      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
 8004e38:	4a98      	ldr	r2, [pc, #608]	@ (800509c <HAL_GPIO_Init+0x2a0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d875      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e3e:	4a98      	ldr	r2, [pc, #608]	@ (80050a0 <HAL_GPIO_Init+0x2a4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d058      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
 8004e44:	4a96      	ldr	r2, [pc, #600]	@ (80050a0 <HAL_GPIO_Init+0x2a4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d86f      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e4a:	4a96      	ldr	r2, [pc, #600]	@ (80050a4 <HAL_GPIO_Init+0x2a8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d052      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
 8004e50:	4a94      	ldr	r2, [pc, #592]	@ (80050a4 <HAL_GPIO_Init+0x2a8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d869      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e56:	4a94      	ldr	r2, [pc, #592]	@ (80050a8 <HAL_GPIO_Init+0x2ac>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d04c      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
 8004e5c:	4a92      	ldr	r2, [pc, #584]	@ (80050a8 <HAL_GPIO_Init+0x2ac>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d863      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e62:	4a92      	ldr	r2, [pc, #584]	@ (80050ac <HAL_GPIO_Init+0x2b0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d046      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
 8004e68:	4a90      	ldr	r2, [pc, #576]	@ (80050ac <HAL_GPIO_Init+0x2b0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d85d      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e6e:	2b12      	cmp	r3, #18
 8004e70:	d82a      	bhi.n	8004ec8 <HAL_GPIO_Init+0xcc>
 8004e72:	2b12      	cmp	r3, #18
 8004e74:	d859      	bhi.n	8004f2a <HAL_GPIO_Init+0x12e>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <HAL_GPIO_Init+0x80>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ef7 	.word	0x08004ef7
 8004e80:	08004ed1 	.word	0x08004ed1
 8004e84:	08004ee3 	.word	0x08004ee3
 8004e88:	08004f25 	.word	0x08004f25
 8004e8c:	08004f2b 	.word	0x08004f2b
 8004e90:	08004f2b 	.word	0x08004f2b
 8004e94:	08004f2b 	.word	0x08004f2b
 8004e98:	08004f2b 	.word	0x08004f2b
 8004e9c:	08004f2b 	.word	0x08004f2b
 8004ea0:	08004f2b 	.word	0x08004f2b
 8004ea4:	08004f2b 	.word	0x08004f2b
 8004ea8:	08004f2b 	.word	0x08004f2b
 8004eac:	08004f2b 	.word	0x08004f2b
 8004eb0:	08004f2b 	.word	0x08004f2b
 8004eb4:	08004f2b 	.word	0x08004f2b
 8004eb8:	08004f2b 	.word	0x08004f2b
 8004ebc:	08004f2b 	.word	0x08004f2b
 8004ec0:	08004ed9 	.word	0x08004ed9
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	4a79      	ldr	r2, [pc, #484]	@ (80050b0 <HAL_GPIO_Init+0x2b4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004ece:	e02c      	b.n	8004f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	623b      	str	r3, [r7, #32]
          break;
 8004ed6:	e029      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	623b      	str	r3, [r7, #32]
          break;
 8004ee0:	e024      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	623b      	str	r3, [r7, #32]
          break;
 8004eea:	e01f      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	623b      	str	r3, [r7, #32]
          break;
 8004ef4:	e01a      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004efe:	2304      	movs	r3, #4
 8004f00:	623b      	str	r3, [r7, #32]
          break;
 8004f02:	e013      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	611a      	str	r2, [r3, #16]
          break;
 8004f16:	e009      	b.n	8004f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f18:	2308      	movs	r3, #8
 8004f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	615a      	str	r2, [r3, #20]
          break;
 8004f22:	e003      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f24:	2300      	movs	r3, #0
 8004f26:	623b      	str	r3, [r7, #32]
          break;
 8004f28:	e000      	b.n	8004f2c <HAL_GPIO_Init+0x130>
          break;
 8004f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2bff      	cmp	r3, #255	@ 0xff
 8004f30:	d801      	bhi.n	8004f36 <HAL_GPIO_Init+0x13a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	e001      	b.n	8004f3a <HAL_GPIO_Init+0x13e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2bff      	cmp	r3, #255	@ 0xff
 8004f40:	d802      	bhi.n	8004f48 <HAL_GPIO_Init+0x14c>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	e002      	b.n	8004f4e <HAL_GPIO_Init+0x152>
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	3b08      	subs	r3, #8
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	210f      	movs	r1, #15
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	401a      	ands	r2, r3
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80b1 	beq.w	80050de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80050b4 <HAL_GPIO_Init+0x2b8>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	4a4c      	ldr	r2, [pc, #304]	@ (80050b4 <HAL_GPIO_Init+0x2b8>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6193      	str	r3, [r2, #24]
 8004f88:	4b4a      	ldr	r3, [pc, #296]	@ (80050b4 <HAL_GPIO_Init+0x2b8>)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f94:	4a48      	ldr	r2, [pc, #288]	@ (80050b8 <HAL_GPIO_Init+0x2bc>)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	220f      	movs	r2, #15
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a40      	ldr	r2, [pc, #256]	@ (80050bc <HAL_GPIO_Init+0x2c0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_GPIO_Init+0x1ec>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80050c0 <HAL_GPIO_Init+0x2c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_GPIO_Init+0x1e8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3e      	ldr	r2, [pc, #248]	@ (80050c4 <HAL_GPIO_Init+0x2c8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <HAL_GPIO_Init+0x1e4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80050c8 <HAL_GPIO_Init+0x2cc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_GPIO_Init+0x1e0>
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <HAL_GPIO_Init+0x1ee>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	e004      	b.n	8004fea <HAL_GPIO_Init+0x1ee>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e002      	b.n	8004fea <HAL_GPIO_Init+0x1ee>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_GPIO_Init+0x1ee>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fec:	f002 0203 	and.w	r2, r2, #3
 8004ff0:	0092      	lsls	r2, r2, #2
 8004ff2:	4093      	lsls	r3, r2
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ffa:	492f      	ldr	r1, [pc, #188]	@ (80050b8 <HAL_GPIO_Init+0x2bc>)
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3302      	adds	r3, #2
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d006      	beq.n	8005022 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005014:	4b2d      	ldr	r3, [pc, #180]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	492c      	ldr	r1, [pc, #176]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	e006      	b.n	8005030 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005022:	4b2a      	ldr	r3, [pc, #168]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	43db      	mvns	r3, r3
 800502a:	4928      	ldr	r1, [pc, #160]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800502c:	4013      	ands	r3, r2
 800502e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800503c:	4b23      	ldr	r3, [pc, #140]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	4922      	ldr	r1, [pc, #136]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	60cb      	str	r3, [r1, #12]
 8005048:	e006      	b.n	8005058 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800504a:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	43db      	mvns	r3, r3
 8005052:	491e      	ldr	r1, [pc, #120]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005054:	4013      	ands	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d006      	beq.n	8005072 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005064:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4918      	ldr	r1, [pc, #96]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
 8005070:	e006      	b.n	8005080 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005072:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	43db      	mvns	r3, r3
 800507a:	4914      	ldr	r1, [pc, #80]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800507c:	4013      	ands	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d021      	beq.n	80050d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800508c:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	490e      	ldr	r1, [pc, #56]	@ (80050cc <HAL_GPIO_Init+0x2d0>)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]
 8005098:	e021      	b.n	80050de <HAL_GPIO_Init+0x2e2>
 800509a:	bf00      	nop
 800509c:	10320000 	.word	0x10320000
 80050a0:	10310000 	.word	0x10310000
 80050a4:	10220000 	.word	0x10220000
 80050a8:	10210000 	.word	0x10210000
 80050ac:	10120000 	.word	0x10120000
 80050b0:	10110000 	.word	0x10110000
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40010800 	.word	0x40010800
 80050c0:	40010c00 	.word	0x40010c00
 80050c4:	40011000 	.word	0x40011000
 80050c8:	40011400 	.word	0x40011400
 80050cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <HAL_GPIO_Init+0x304>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	4909      	ldr	r1, [pc, #36]	@ (8005100 <HAL_GPIO_Init+0x304>)
 80050da:	4013      	ands	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	3301      	adds	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f47f ae8e 	bne.w	8004e10 <HAL_GPIO_Init+0x14>
  }
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	372c      	adds	r7, #44	@ 0x2c
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr
 8005100:	40010400 	.word	0x40010400

08005104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e001      	b.n	8005126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]
 800513e:	4613      	mov	r3, r2
 8005140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005142:	787b      	ldrb	r3, [r7, #1]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005148:	887a      	ldrh	r2, [r7, #2]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800514e:	e003      	b.n	8005158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	041a      	lsls	r2, r3, #16
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	611a      	str	r2, [r3, #16]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005174:	887a      	ldrh	r2, [r7, #2]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4013      	ands	r3, r2
 800517a:	041a      	lsls	r2, r3, #16
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	43d9      	mvns	r1, r3
 8005180:	887b      	ldrh	r3, [r7, #2]
 8005182:	400b      	ands	r3, r1
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	611a      	str	r2, [r3, #16]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e12b      	b.n	80053fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe fcd4 	bl	8003b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	@ 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051f8:	f001 feaa 	bl	8006f50 <HAL_RCC_GetPCLK1Freq>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a81      	ldr	r2, [pc, #516]	@ (8005408 <HAL_I2C_Init+0x274>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d807      	bhi.n	8005218 <HAL_I2C_Init+0x84>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a80      	ldr	r2, [pc, #512]	@ (800540c <HAL_I2C_Init+0x278>)
 800520c:	4293      	cmp	r3, r2
 800520e:	bf94      	ite	ls
 8005210:	2301      	movls	r3, #1
 8005212:	2300      	movhi	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e006      	b.n	8005226 <HAL_I2C_Init+0x92>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a7d      	ldr	r2, [pc, #500]	@ (8005410 <HAL_I2C_Init+0x27c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	bf94      	ite	ls
 8005220:	2301      	movls	r3, #1
 8005222:	2300      	movhi	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0e7      	b.n	80053fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a78      	ldr	r2, [pc, #480]	@ (8005414 <HAL_I2C_Init+0x280>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0c9b      	lsrs	r3, r3, #18
 8005238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a6a      	ldr	r2, [pc, #424]	@ (8005408 <HAL_I2C_Init+0x274>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <HAL_I2C_Init+0xd4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3301      	adds	r3, #1
 8005266:	e009      	b.n	800527c <HAL_I2C_Init+0xe8>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	4a69      	ldr	r2, [pc, #420]	@ (8005418 <HAL_I2C_Init+0x284>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	3301      	adds	r3, #1
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800528e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	495c      	ldr	r1, [pc, #368]	@ (8005408 <HAL_I2C_Init+0x274>)
 8005298:	428b      	cmp	r3, r1
 800529a:	d819      	bhi.n	80052d0 <HAL_I2C_Init+0x13c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1e59      	subs	r1, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052b0:	400b      	ands	r3, r1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_I2C_Init+0x138>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1e59      	subs	r1, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c4:	3301      	adds	r3, #1
 80052c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ca:	e051      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052cc:	2304      	movs	r3, #4
 80052ce:	e04f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <HAL_I2C_Init+0x168>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1e58      	subs	r0, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	440b      	add	r3, r1
 80052e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e012      	b.n	8005322 <HAL_I2C_Init+0x18e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1e58      	subs	r0, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	0099      	lsls	r1, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005312:	3301      	adds	r3, #1
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Init+0x196>
 8005326:	2301      	movs	r3, #1
 8005328:	e022      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <HAL_I2C_Init+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e58      	subs	r0, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	440b      	add	r3, r1
 8005340:	fbb0 f3f3 	udiv	r3, r0, r3
 8005344:	3301      	adds	r3, #1
 8005346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534e:	e00f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e58      	subs	r0, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	0099      	lsls	r1, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	fbb0 f3f3 	udiv	r3, r0, r3
 8005366:	3301      	adds	r3, #1
 8005368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	6809      	ldr	r1, [r1, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800539e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6911      	ldr	r1, [r2, #16]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68d2      	ldr	r2, [r2, #12]
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	000186a0 	.word	0x000186a0
 800540c:	001e847f 	.word	0x001e847f
 8005410:	003d08ff 	.word	0x003d08ff
 8005414:	431bde83 	.word	0x431bde83
 8005418:	10624dd3 	.word	0x10624dd3

0800541c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	460b      	mov	r3, r1
 800542a:	817b      	strh	r3, [r7, #10]
 800542c:	4613      	mov	r3, r2
 800542e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005430:	f7fe fecc 	bl	80041cc <HAL_GetTick>
 8005434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	f040 80e0 	bne.w	8005604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2319      	movs	r3, #25
 800544a:	2201      	movs	r2, #1
 800544c:	4970      	ldr	r1, [pc, #448]	@ (8005610 <HAL_I2C_Master_Transmit+0x1f4>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 ff7e 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	e0d3      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_I2C_Master_Transmit+0x50>
 8005468:	2302      	movs	r3, #2
 800546a:	e0cc      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d007      	beq.n	8005492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2221      	movs	r2, #33	@ 0x21
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2210      	movs	r2, #16
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	893a      	ldrh	r2, [r7, #8]
 80054c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a50      	ldr	r2, [pc, #320]	@ (8005614 <HAL_I2C_Master_Transmit+0x1f8>)
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054d4:	8979      	ldrh	r1, [r7, #10]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fd38 	bl	8005f50 <I2C_MasterRequestWrite>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e08d      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005500:	e066      	b.n	80055d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 f83c 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	2b04      	cmp	r3, #4
 8005518:	d107      	bne.n	800552a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e06b      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d11b      	bne.n	80055a4 <HAL_I2C_Master_Transmit+0x188>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	6a39      	ldr	r1, [r7, #32]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f001 f833 	bl	8006614 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d107      	bne.n	80055cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e01a      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d194      	bne.n	8005502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	00100002 	.word	0x00100002
 8005614:	ffff0000 	.word	0xffff0000

08005618 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	461a      	mov	r2, r3
 8005626:	4603      	mov	r3, r0
 8005628:	817b      	strh	r3, [r7, #10]
 800562a:	460b      	mov	r3, r1
 800562c:	813b      	strh	r3, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005632:	f7fe fdcb 	bl	80041cc <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b20      	cmp	r3, #32
 8005642:	f040 80d9 	bne.w	80057f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	2319      	movs	r3, #25
 800564c:	2201      	movs	r2, #1
 800564e:	496d      	ldr	r1, [pc, #436]	@ (8005804 <HAL_I2C_Mem_Write+0x1ec>)
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fe7d 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800565c:	2302      	movs	r3, #2
 800565e:	e0cc      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_I2C_Mem_Write+0x56>
 800566a:	2302      	movs	r3, #2
 800566c:	e0c5      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d007      	beq.n	8005694 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2221      	movs	r2, #33	@ 0x21
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2240      	movs	r2, #64	@ 0x40
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005808 <HAL_I2C_Mem_Write+0x1f0>)
 80056d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056d6:	88f8      	ldrh	r0, [r7, #6]
 80056d8:	893a      	ldrh	r2, [r7, #8]
 80056da:	8979      	ldrh	r1, [r7, #10]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4603      	mov	r3, r0
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fcb4 	bl	8006054 <I2C_RequestMemoryWrite>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d052      	beq.n	8005798 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e081      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 ff42 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	2b04      	cmp	r3, #4
 800570c:	d107      	bne.n	800571e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800571c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e06b      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d11b      	bne.n	8005798 <HAL_I2C_Mem_Write+0x180>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005764:	2b00      	cmp	r3, #0
 8005766:	d017      	beq.n	8005798 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1aa      	bne.n	80056f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 ff35 	bl	8006614 <I2C_WaitOnBTFFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d107      	bne.n	80057c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e016      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	00100002 	.word	0x00100002
 8005808:	ffff0000 	.word	0xffff0000

0800580c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	@ 0x30
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	461a      	mov	r2, r3
 800581a:	4603      	mov	r3, r0
 800581c:	817b      	strh	r3, [r7, #10]
 800581e:	460b      	mov	r3, r1
 8005820:	813b      	strh	r3, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800582a:	f7fe fccf 	bl	80041cc <HAL_GetTick>
 800582e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b20      	cmp	r3, #32
 800583a:	f040 8250 	bne.w	8005cde <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2319      	movs	r3, #25
 8005844:	2201      	movs	r2, #1
 8005846:	4982      	ldr	r1, [pc, #520]	@ (8005a50 <HAL_I2C_Mem_Read+0x244>)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fd81 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
 8005856:	e243      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_I2C_Mem_Read+0x5a>
 8005862:	2302      	movs	r3, #2
 8005864:	e23c      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d007      	beq.n	800588c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800589a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2222      	movs	r2, #34	@ 0x22
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2240      	movs	r2, #64	@ 0x40
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80058bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a62      	ldr	r2, [pc, #392]	@ (8005a54 <HAL_I2C_Mem_Read+0x248>)
 80058cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ce:	88f8      	ldrh	r0, [r7, #6]
 80058d0:	893a      	ldrh	r2, [r7, #8]
 80058d2:	8979      	ldrh	r1, [r7, #10]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	4603      	mov	r3, r0
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fc4e 	bl	8006180 <I2C_RequestMemoryRead>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e1f8      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d113      	bne.n	800591e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e1cc      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005922:	2b01      	cmp	r3, #1
 8005924:	d11e      	bne.n	8005964 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005936:	b672      	cpsid	i
}
 8005938:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005960:	b662      	cpsie	i
}
 8005962:	e035      	b.n	80059d0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11e      	bne.n	80059aa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800597c:	b672      	cpsid	i
}
 800597e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059a6:	b662      	cpsie	i
}
 80059a8:	e012      	b.n	80059d0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059b8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80059d0:	e172      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	f200 811f 	bhi.w	8005c1a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d123      	bne.n	8005a2c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fe5b 	bl	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e173      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a2a:	e145      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d152      	bne.n	8005ada <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4906      	ldr	r1, [pc, #24]	@ (8005a58 <HAL_I2C_Mem_Read+0x24c>)
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fc86 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e148      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
 8005a4e:	bf00      	nop
 8005a50:	00100002 	.word	0x00100002
 8005a54:	ffff0000 	.word	0xffff0000
 8005a58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005a5c:	b672      	cpsid	i
}
 8005a5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005aa2:	b662      	cpsie	i
}
 8005aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ad8:	e0ee      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4981      	ldr	r1, [pc, #516]	@ (8005ce8 <HAL_I2C_Mem_Read+0x4dc>)
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fc33 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0f5      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b04:	b672      	cpsid	i
}
 8005b06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b3a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cec <HAL_I2C_Mem_Read+0x4e0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	08db      	lsrs	r3, r3, #3
 8005b40:	4a6b      	ldr	r2, [pc, #428]	@ (8005cf0 <HAL_I2C_Mem_Read+0x4e4>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	0a1a      	lsrs	r2, r3, #8
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00da      	lsls	r2, r3, #3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d118      	bne.n	8005b92 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005b82:	b662      	cpsie	i
}
 8005b84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0a6      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d1d9      	bne.n	8005b54 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005be2:	b662      	cpsie	i
}
 8005be4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c18:	e04e      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fd40 	bl	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e058      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d124      	bne.n	8005cb8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d107      	bne.n	8005c86 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f47f ae88 	bne.w	80059d2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3728      	adds	r7, #40	@ 0x28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	00010004 	.word	0x00010004
 8005cec:	2000005c 	.word	0x2000005c
 8005cf0:	14f8b589 	.word	0x14f8b589

08005cf4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	460b      	mov	r3, r1
 8005d02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7fe fa62 	bl	80041cc <HAL_GetTick>
 8005d08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	f040 8111 	bne.w	8005f3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	2319      	movs	r3, #25
 8005d22:	2201      	movs	r2, #1
 8005d24:	4988      	ldr	r1, [pc, #544]	@ (8005f48 <HAL_I2C_IsDeviceReady+0x254>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fb12 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
 8005d34:	e104      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2C_IsDeviceReady+0x50>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0fd      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d007      	beq.n	8005d6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2224      	movs	r2, #36	@ 0x24
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a70      	ldr	r2, [pc, #448]	@ (8005f4c <HAL_I2C_IsDeviceReady+0x258>)
 8005d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fad0 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc4:	d103      	bne.n	8005dce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0b6      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005de0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005de2:	f7fe f9f3 	bl	80041cc <HAL_GetTick>
 8005de6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e16:	e025      	b.n	8005e64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e18:	f7fe f9d8 	bl	80041cc <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <HAL_I2C_IsDeviceReady+0x13a>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	22a0      	movs	r2, #160	@ 0xa0
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2301      	moveq	r3, #1
 8005e5e:	2300      	movne	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e6e:	d005      	beq.n	8005e7c <HAL_I2C_IsDeviceReady+0x188>
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <HAL_I2C_IsDeviceReady+0x188>
 8005e76:	7dbb      	ldrb	r3, [r7, #22]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0cd      	beq.n	8005e18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d129      	bne.n	8005ee6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2319      	movs	r3, #25
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4921      	ldr	r1, [pc, #132]	@ (8005f48 <HAL_I2C_IsDeviceReady+0x254>)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa44 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e036      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e02c      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005efe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2319      	movs	r3, #25
 8005f06:	2201      	movs	r2, #1
 8005f08:	490f      	ldr	r1, [pc, #60]	@ (8005f48 <HAL_I2C_IsDeviceReady+0x254>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fa20 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e012      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	f4ff af32 	bcc.w	8005d8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00100002 	.word	0x00100002
 8005f4c:	ffff0000 	.word	0xffff0000

08005f50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d006      	beq.n	8005f7a <I2C_MasterRequestWrite+0x2a>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d003      	beq.n	8005f7a <I2C_MasterRequestWrite+0x2a>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f78:	d108      	bne.n	8005f8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e00b      	b.n	8005fa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	2b12      	cmp	r3, #18
 8005f92:	d107      	bne.n	8005fa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f9cd 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00d      	beq.n	8005fd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fca:	d103      	bne.n	8005fd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e035      	b.n	8006044 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fe0:	d108      	bne.n	8005ff4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe2:	897b      	ldrh	r3, [r7, #10]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ff0:	611a      	str	r2, [r3, #16]
 8005ff2:	e01b      	b.n	800602c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ff4:	897b      	ldrh	r3, [r7, #10]
 8005ff6:	11db      	asrs	r3, r3, #7
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 0306 	and.w	r3, r3, #6
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f063 030f 	orn	r3, r3, #15
 8006004:	b2da      	uxtb	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	490e      	ldr	r1, [pc, #56]	@ (800604c <I2C_MasterRequestWrite+0xfc>)
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fa16 	bl	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e010      	b.n	8006044 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4907      	ldr	r1, [pc, #28]	@ (8006050 <I2C_MasterRequestWrite+0x100>)
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fa06 	bl	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	00010008 	.word	0x00010008
 8006050:	00010002 	.word	0x00010002

08006054 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	4608      	mov	r0, r1
 800605e:	4611      	mov	r1, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4603      	mov	r3, r0
 8006064:	817b      	strh	r3, [r7, #10]
 8006066:	460b      	mov	r3, r1
 8006068:	813b      	strh	r3, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800607c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2200      	movs	r2, #0
 8006086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f960 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a4:	d103      	bne.n	80060ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e05f      	b.n	8006172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060b2:	897b      	ldrh	r3, [r7, #10]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	492d      	ldr	r1, [pc, #180]	@ (800617c <I2C_RequestMemoryWrite+0x128>)
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f9bb 	bl	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e04c      	b.n	8006172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fa46 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e02b      	b.n	8006172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006120:	893b      	ldrh	r3, [r7, #8]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	e021      	b.n	8006170 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800612c:	893b      	ldrh	r3, [r7, #8]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	b29b      	uxth	r3, r3
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613c:	6a39      	ldr	r1, [r7, #32]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fa20 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00d      	beq.n	8006166 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2b04      	cmp	r3, #4
 8006150:	d107      	bne.n	8006162 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e005      	b.n	8006172 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006166:	893b      	ldrh	r3, [r7, #8]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	00010002 	.word	0x00010002

08006180 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	4608      	mov	r0, r1
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	4603      	mov	r3, r0
 8006190:	817b      	strh	r3, [r7, #10]
 8006192:	460b      	mov	r3, r1
 8006194:	813b      	strh	r3, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f8c2 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e0:	d103      	bne.n	80061ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0aa      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	6a3a      	ldr	r2, [r7, #32]
 8006202:	4952      	ldr	r1, [pc, #328]	@ (800634c <I2C_RequestMemoryRead+0x1cc>)
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f91d 	bl	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e097      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f9a8 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e076      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800625c:	893b      	ldrh	r3, [r7, #8]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	611a      	str	r2, [r3, #16]
 8006266:	e021      	b.n	80062ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006268:	893b      	ldrh	r3, [r7, #8]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	b29b      	uxth	r3, r3
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006278:	6a39      	ldr	r1, [r7, #32]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f982 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	2b04      	cmp	r3, #4
 800628c:	d107      	bne.n	800629e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e050      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062a2:	893b      	ldrh	r3, [r7, #8]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ae:	6a39      	ldr	r1, [r7, #32]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f967 	bl	8006584 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d107      	bne.n	80062d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e035      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f82b 	bl	8006350 <I2C_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800630e:	d103      	bne.n	8006318 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e013      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	4906      	ldr	r1, [pc, #24]	@ (800634c <I2C_RequestMemoryRead+0x1cc>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f886 	bl	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	00010002 	.word	0x00010002

08006350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	4613      	mov	r3, r2
 800635e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006360:	e048      	b.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d044      	beq.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636a:	f7fd ff2f 	bl	80041cc <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d139      	bne.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	0c1b      	lsrs	r3, r3, #16
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d10d      	bne.n	80063a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	43da      	mvns	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4013      	ands	r3, r2
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	e00c      	b.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	43da      	mvns	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d116      	bne.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e023      	b.n	800643c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10d      	bne.n	800641a <I2C_WaitOnFlagUntilTimeout+0xca>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	43da      	mvns	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	e00c      	b.n	8006434 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	43da      	mvns	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	429a      	cmp	r2, r3
 8006438:	d093      	beq.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006452:	e071      	b.n	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006462:	d123      	bne.n	80064ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006472:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800647c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	f043 0204 	orr.w	r2, r3, #4
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e067      	b.n	800657c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d041      	beq.n	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b4:	f7fd fe8a 	bl	80041cc <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d136      	bne.n	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d10c      	bne.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	43da      	mvns	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e00b      	b.n	8006506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	43da      	mvns	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e021      	b.n	800657c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	0c1b      	lsrs	r3, r3, #16
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10c      	bne.n	800655c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	43da      	mvns	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4013      	ands	r3, r2
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e00b      	b.n	8006574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	43da      	mvns	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f af6d 	bne.w	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006590:	e034      	b.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f8e3 	bl	800675e <I2C_IsAcknowledgeFailed>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e034      	b.n	800660c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d028      	beq.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fd fe0f 	bl	80041cc <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11d      	bne.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ca:	2b80      	cmp	r3, #128	@ 0x80
 80065cc:	d016      	beq.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e007      	b.n	800660c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006606:	2b80      	cmp	r3, #128	@ 0x80
 8006608:	d1c3      	bne.n	8006592 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006620:	e034      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f89b 	bl	800675e <I2C_IsAcknowledgeFailed>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e034      	b.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d028      	beq.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fd fdc7 	bl	80041cc <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11d      	bne.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b04      	cmp	r3, #4
 800665c:	d016      	beq.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e007      	b.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d1c3      	bne.n	8006622 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b0:	e049      	b.n	8006746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d119      	bne.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0210 	mvn.w	r2, #16
 80066c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e030      	b.n	8006756 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7fd fd6a 	bl	80041cc <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11d      	bne.n	8006746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b40      	cmp	r3, #64	@ 0x40
 8006716:	d016      	beq.n	8006746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e007      	b.n	8006756 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	d1ae      	bne.n	80066b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006774:	d11b      	bne.n	80067ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800677e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e272      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8087 	beq.w	80068ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067dc:	4b92      	ldr	r3, [pc, #584]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d00c      	beq.n	8006802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d112      	bne.n	800681a <HAL_RCC_OscConfig+0x5e>
 80067f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006800:	d10b      	bne.n	800681a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006802:	4b89      	ldr	r3, [pc, #548]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d06c      	beq.n	80068e8 <HAL_RCC_OscConfig+0x12c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d168      	bne.n	80068e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e24c      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006822:	d106      	bne.n	8006832 <HAL_RCC_OscConfig+0x76>
 8006824:	4b80      	ldr	r3, [pc, #512]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a7f      	ldr	r2, [pc, #508]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800682a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e02e      	b.n	8006890 <HAL_RCC_OscConfig+0xd4>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_RCC_OscConfig+0x98>
 800683a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7a      	ldr	r2, [pc, #488]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	4b78      	ldr	r3, [pc, #480]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a77      	ldr	r2, [pc, #476]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800684c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	e01d      	b.n	8006890 <HAL_RCC_OscConfig+0xd4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0xbc>
 800685e:	4b72      	ldr	r3, [pc, #456]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a71      	ldr	r2, [pc, #452]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e00b      	b.n	8006890 <HAL_RCC_OscConfig+0xd4>
 8006878:	4b6b      	ldr	r3, [pc, #428]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a6a      	ldr	r2, [pc, #424]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800687e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b68      	ldr	r3, [pc, #416]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a67      	ldr	r2, [pc, #412]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800688a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800688e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006898:	f7fd fc98 	bl	80041cc <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fd fc94 	bl	80041cc <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	@ 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e200      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0xe4>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c0:	f7fd fc84 	bl	80041cc <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fd fc80 	bl	80041cc <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	@ 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e1ec      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068da:	4b53      	ldr	r3, [pc, #332]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x10c>
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d063      	beq.n	80069be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006902:	4b49      	ldr	r3, [pc, #292]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b08      	cmp	r3, #8
 800690c:	d11c      	bne.n	8006948 <HAL_RCC_OscConfig+0x18c>
 800690e:	4b46      	ldr	r3, [pc, #280]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691a:	4b43      	ldr	r3, [pc, #268]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x176>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e1c0      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006932:	4b3d      	ldr	r3, [pc, #244]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4939      	ldr	r1, [pc, #228]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	e03a      	b.n	80069be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006950:	4b36      	ldr	r3, [pc, #216]	@ (8006a2c <HAL_RCC_OscConfig+0x270>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006956:	f7fd fc39 	bl	80041cc <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695e:	f7fd fc35 	bl	80041cc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1a1      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006970:	4b2d      	ldr	r3, [pc, #180]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4927      	ldr	r1, [pc, #156]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
 8006990:	e015      	b.n	80069be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006992:	4b26      	ldr	r3, [pc, #152]	@ (8006a2c <HAL_RCC_OscConfig+0x270>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006998:	f7fd fc18 	bl	80041cc <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fd fc14 	bl	80041cc <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e180      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03a      	beq.n	8006a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d019      	beq.n	8006a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <HAL_RCC_OscConfig+0x274>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d8:	f7fd fbf8 	bl	80041cc <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fd fbf4 	bl	80041cc <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e160      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <HAL_RCC_OscConfig+0x26c>)
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069fe:	2001      	movs	r0, #1
 8006a00:	f000 face 	bl	8006fa0 <RCC_Delay>
 8006a04:	e01c      	b.n	8006a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a06:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0c:	f7fd fbde 	bl	80041cc <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a12:	e00f      	b.n	8006a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a14:	f7fd fbda 	bl	80041cc <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d908      	bls.n	8006a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e146      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	42420000 	.word	0x42420000
 8006a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a34:	4b92      	ldr	r3, [pc, #584]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e9      	bne.n	8006a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80a6 	beq.w	8006b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a52:	4b8b      	ldr	r3, [pc, #556]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5e:	4b88      	ldr	r3, [pc, #544]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	4a87      	ldr	r2, [pc, #540]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a68:	61d3      	str	r3, [r2, #28]
 8006a6a:	4b85      	ldr	r3, [pc, #532]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b82      	ldr	r3, [pc, #520]	@ (8006c84 <HAL_RCC_OscConfig+0x4c8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d118      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a86:	4b7f      	ldr	r3, [pc, #508]	@ (8006c84 <HAL_RCC_OscConfig+0x4c8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c84 <HAL_RCC_OscConfig+0x4c8>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a92:	f7fd fb9b 	bl	80041cc <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9a:	f7fd fb97 	bl	80041cc <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b64      	cmp	r3, #100	@ 0x64
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e103      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	4b75      	ldr	r3, [pc, #468]	@ (8006c84 <HAL_RCC_OscConfig+0x4c8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0f0      	beq.n	8006a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x312>
 8006ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6213      	str	r3, [r2, #32]
 8006acc:	e02d      	b.n	8006b2a <HAL_RCC_OscConfig+0x36e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x334>
 8006ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	4a69      	ldr	r2, [pc, #420]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	6213      	str	r3, [r2, #32]
 8006ae2:	4b67      	ldr	r3, [pc, #412]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	4a66      	ldr	r2, [pc, #408]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ae8:	f023 0304 	bic.w	r3, r3, #4
 8006aec:	6213      	str	r3, [r2, #32]
 8006aee:	e01c      	b.n	8006b2a <HAL_RCC_OscConfig+0x36e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	d10c      	bne.n	8006b12 <HAL_RCC_OscConfig+0x356>
 8006af8:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	4a60      	ldr	r2, [pc, #384]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006afe:	f043 0304 	orr.w	r3, r3, #4
 8006b02:	6213      	str	r3, [r2, #32]
 8006b04:	4b5e      	ldr	r3, [pc, #376]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	4a5d      	ldr	r2, [pc, #372]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	6213      	str	r3, [r2, #32]
 8006b10:	e00b      	b.n	8006b2a <HAL_RCC_OscConfig+0x36e>
 8006b12:	4b5b      	ldr	r3, [pc, #364]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4a5a      	ldr	r2, [pc, #360]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6213      	str	r3, [r2, #32]
 8006b1e:	4b58      	ldr	r3, [pc, #352]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	4a57      	ldr	r2, [pc, #348]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d015      	beq.n	8006b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b32:	f7fd fb4b 	bl	80041cc <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b38:	e00a      	b.n	8006b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3a:	f7fd fb47 	bl	80041cc <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e0b1      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b50:	4b4b      	ldr	r3, [pc, #300]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0ee      	beq.n	8006b3a <HAL_RCC_OscConfig+0x37e>
 8006b5c:	e014      	b.n	8006b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7fd fb35 	bl	80041cc <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7fd fb31 	bl	80041cc <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e09b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7c:	4b40      	ldr	r3, [pc, #256]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ee      	bne.n	8006b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	4a3b      	ldr	r2, [pc, #236]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8087 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ba4:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 030c 	and.w	r3, r3, #12
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d061      	beq.n	8006c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d146      	bne.n	8006c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb8:	4b33      	ldr	r3, [pc, #204]	@ (8006c88 <HAL_RCC_OscConfig+0x4cc>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fd fb05 	bl	80041cc <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fd fb01 	bl	80041cc <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e06d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bd8:	4b29      	ldr	r3, [pc, #164]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1f0      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bec:	d108      	bne.n	8006c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bee:	4b24      	ldr	r3, [pc, #144]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4921      	ldr	r1, [pc, #132]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c00:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a19      	ldr	r1, [r3, #32]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	430b      	orrs	r3, r1
 8006c12:	491b      	ldr	r1, [pc, #108]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c18:	4b1b      	ldr	r3, [pc, #108]	@ (8006c88 <HAL_RCC_OscConfig+0x4cc>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7fd fad5 	bl	80041cc <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c26:	f7fd fad1 	bl	80041cc <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e03d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c38:	4b11      	ldr	r3, [pc, #68]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x46a>
 8006c44:	e035      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <HAL_RCC_OscConfig+0x4cc>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fd fabe 	bl	80041cc <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fd faba 	bl	80041cc <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e026      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_RCC_OscConfig+0x4c4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x498>
 8006c72:	e01e      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e019      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
 8006c80:	40021000 	.word	0x40021000
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <HAL_RCC_OscConfig+0x500>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d106      	bne.n	8006cae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0d0      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d910      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b67      	ldr	r3, [pc, #412]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 0207 	bic.w	r2, r3, #7
 8006cea:	4965      	ldr	r1, [pc, #404]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b63      	ldr	r3, [pc, #396]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0b8      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d1c:	4b59      	ldr	r3, [pc, #356]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a58      	ldr	r2, [pc, #352]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d34:	4b53      	ldr	r3, [pc, #332]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a52      	ldr	r2, [pc, #328]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b50      	ldr	r3, [pc, #320]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	494d      	ldr	r1, [pc, #308]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d040      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d66:	4b47      	ldr	r3, [pc, #284]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d115      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e07f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7e:	4b41      	ldr	r3, [pc, #260]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e073      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e06b      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d9e:	4b39      	ldr	r3, [pc, #228]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4936      	ldr	r1, [pc, #216]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db0:	f7fd fa0c 	bl	80041cc <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db8:	f7fd fa08 	bl	80041cc <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e053      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dce:	4b2d      	ldr	r3, [pc, #180]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f003 020c 	and.w	r2, r3, #12
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d1eb      	bne.n	8006db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de0:	4b27      	ldr	r3, [pc, #156]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d210      	bcs.n	8006e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b24      	ldr	r3, [pc, #144]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 0207 	bic.w	r2, r3, #7
 8006df6:	4922      	ldr	r1, [pc, #136]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e032      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e1c:	4b19      	ldr	r3, [pc, #100]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e3a:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	490e      	ldr	r1, [pc, #56]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e4e:	f000 f821 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <HAL_RCC_ClockConfig+0x1c8>)
 8006e60:	5ccb      	ldrb	r3, [r1, r3]
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	4a09      	ldr	r2, [pc, #36]	@ (8006e8c <HAL_RCC_ClockConfig+0x1cc>)
 8006e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <HAL_RCC_ClockConfig+0x1d0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd f96a 	bl	8004148 <HAL_InitTick>

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40022000 	.word	0x40022000
 8006e84:	40021000 	.word	0x40021000
 8006e88:	08009e3c 	.word	0x08009e3c
 8006e8c:	2000005c 	.word	0x2000005c
 8006e90:	20000060 	.word	0x20000060

08006e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006eae:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d002      	beq.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d003      	beq.n	8006eca <HAL_RCC_GetSysClockFreq+0x36>
 8006ec2:	e027      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ec4:	4b19      	ldr	r3, [pc, #100]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ec6:	613b      	str	r3, [r7, #16]
      break;
 8006ec8:	e027      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ed4:	5cd3      	ldrb	r3, [r2, r3]
 8006ed6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d010      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ee2:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	0c5b      	lsrs	r3, r3, #17
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	4a11      	ldr	r2, [pc, #68]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006eee:	5cd3      	ldrb	r3, [r2, r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ef6:	fb03 f202 	mul.w	r2, r3, r2
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e004      	b.n	8006f0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	613b      	str	r3, [r7, #16]
      break;
 8006f12:	e002      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006f16:	613b      	str	r3, [r7, #16]
      break;
 8006f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f1a:	693b      	ldr	r3, [r7, #16]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	007a1200 	.word	0x007a1200
 8006f30:	08009e54 	.word	0x08009e54
 8006f34:	08009e64 	.word	0x08009e64
 8006f38:	003d0900 	.word	0x003d0900

08006f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f40:	4b02      	ldr	r3, [pc, #8]	@ (8006f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	2000005c 	.word	0x2000005c

08006f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f54:	f7ff fff2 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	0a1b      	lsrs	r3, r3, #8
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4903      	ldr	r1, [pc, #12]	@ (8006f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40021000 	.word	0x40021000
 8006f74:	08009e4c 	.word	0x08009e4c

08006f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f7c:	f7ff ffde 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	0adb      	lsrs	r3, r3, #11
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	4903      	ldr	r1, [pc, #12]	@ (8006f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f8e:	5ccb      	ldrb	r3, [r1, r3]
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	08009e4c 	.word	0x08009e4c

08006fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <RCC_Delay+0x34>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd8 <RCC_Delay+0x38>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	0a5b      	lsrs	r3, r3, #9
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fbc:	bf00      	nop
  }
  while (Delay --);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1e5a      	subs	r2, r3, #1
 8006fc2:	60fa      	str	r2, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f9      	bne.n	8006fbc <RCC_Delay+0x1c>
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr
 8006fd4:	2000005c 	.word	0x2000005c
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d07d      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007008:	4b4c      	ldr	r3, [pc, #304]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	4a4b      	ldr	r2, [pc, #300]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800700e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007012:	61d3      	str	r3, [r2, #28]
 8007014:	4b49      	ldr	r3, [pc, #292]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007020:	2301      	movs	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007024:	4b46      	ldr	r3, [pc, #280]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d118      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007030:	4b43      	ldr	r3, [pc, #268]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a42      	ldr	r2, [pc, #264]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800703a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703c:	f7fd f8c6 	bl	80041cc <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007042:	e008      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007044:	f7fd f8c2 	bl	80041cc <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	@ 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e06d      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007056:	4b3a      	ldr	r3, [pc, #232]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f0      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007062:	4b36      	ldr	r3, [pc, #216]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800706a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d02e      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d027      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007080:	4b2e      	ldr	r3, [pc, #184]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007088:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800708a:	4b2e      	ldr	r3, [pc, #184]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007090:	4b2c      	ldr	r3, [pc, #176]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007096:	4a29      	ldr	r2, [pc, #164]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d014      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a6:	f7fd f891 	bl	80041cc <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ac:	e00a      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ae:	f7fd f88d 	bl	80041cc <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070bc:	4293      	cmp	r3, r2
 80070be:	d901      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e036      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c4:	4b1d      	ldr	r3, [pc, #116]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ee      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070d0:	4b1a      	ldr	r3, [pc, #104]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4917      	ldr	r1, [pc, #92]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d105      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e8:	4b14      	ldr	r3, [pc, #80]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4a13      	ldr	r2, [pc, #76]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007100:	4b0e      	ldr	r3, [pc, #56]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	490b      	ldr	r1, [pc, #44]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800710e:	4313      	orrs	r3, r2
 8007110:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800711e:	4b07      	ldr	r3, [pc, #28]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	4904      	ldr	r1, [pc, #16]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712c:	4313      	orrs	r3, r2
 800712e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	40007000 	.word	0x40007000
 8007144:	42420440 	.word	0x42420440

08007148 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	2300      	movs	r3, #0
 8007162:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b10      	cmp	r3, #16
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b10      	cmp	r3, #16
 800716e:	f200 808a 	bhi.w	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d045      	beq.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d075      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800717e:	e082      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007180:	4b46      	ldr	r3, [pc, #280]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007186:	4b45      	ldr	r3, [pc, #276]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d07b      	beq.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0c9b      	lsrs	r3, r3, #18
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4a41      	ldr	r2, [pc, #260]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800719c:	5cd3      	ldrb	r3, [r2, r3]
 800719e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d015      	beq.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071aa:	4b3c      	ldr	r3, [pc, #240]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	0c5b      	lsrs	r3, r3, #17
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	4a3b      	ldr	r2, [pc, #236]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80071b6:	5cd3      	ldrb	r3, [r2, r3]
 80071b8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00d      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071c4:	4a38      	ldr	r2, [pc, #224]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	e004      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	4a34      	ldr	r2, [pc, #208]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071e0:	4b2e      	ldr	r3, [pc, #184]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ec:	d102      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	61bb      	str	r3, [r7, #24]
      break;
 80071f2:	e04a      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4a2d      	ldr	r2, [pc, #180]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	61bb      	str	r3, [r7, #24]
      break;
 8007202:	e042      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007204:	4b25      	ldr	r3, [pc, #148]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007214:	d108      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e01f      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007232:	d109      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007234:	4b19      	ldr	r3, [pc, #100]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007240:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e00f      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800724e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007252:	d11c      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007254:	4b11      	ldr	r3, [pc, #68]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d016      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007260:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007264:	61bb      	str	r3, [r7, #24]
      break;
 8007266:	e012      	b.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007268:	e011      	b.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800726a:	f7ff fe85 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
 800726e:	4602      	mov	r2, r0
 8007270:	4b0a      	ldr	r3, [pc, #40]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	0b9b      	lsrs	r3, r3, #14
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	3301      	adds	r3, #1
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007282:	61bb      	str	r3, [r7, #24]
      break;
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800728e:	bf00      	nop
    }
  }
  return (frequency);
 8007290:	69bb      	ldr	r3, [r7, #24]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	08009e68 	.word	0x08009e68
 80072a4:	08009e78 	.word	0x08009e78
 80072a8:	007a1200 	.word	0x007a1200
 80072ac:	003d0900 	.word	0x003d0900
 80072b0:	aaaaaaab 	.word	0xaaaaaaab

080072b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f815 	bl	8007308 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0202 	bic.w	r2, r2, #2
 80072ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80072ee:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HAL_RTC_AlarmIRQHandler+0x50>)
 80072f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80072f4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	745a      	strb	r2, [r3, #17]
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40010400 	.word	0x40010400

08007308 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e076      	b.n	800741a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d108      	bne.n	8007346 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800733c:	d009      	beq.n	8007352 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	61da      	str	r2, [r3, #28]
 8007344:	e005      	b.n	8007352 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fc fc3b 	bl	8003be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007388:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	ea42 0103 	orr.w	r1, r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	0c1a      	lsrs	r2, r3, #16
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f002 0204 	and.w	r2, r2, #4
 80073f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b088      	sub	sp, #32
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	603b      	str	r3, [r7, #0]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007432:	f7fc fecb 	bl	80041cc <HAL_GetTick>
 8007436:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d001      	beq.n	800744c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
 800744a:	e12a      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_SPI_Transmit+0x36>
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e122      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_SPI_Transmit+0x48>
 8007466:	2302      	movs	r3, #2
 8007468:	e11b      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2203      	movs	r2, #3
 8007476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074b8:	d10f      	bne.n	80074da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	d007      	beq.n	80074f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007500:	d152      	bne.n	80075a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_SPI_Transmit+0xee>
 800750a:	8b7b      	ldrh	r3, [r7, #26]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d145      	bne.n	800759c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007534:	e032      	b.n	800759c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d112      	bne.n	800756a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	881a      	ldrh	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	1c9a      	adds	r2, r3, #2
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007568:	e018      	b.n	800759c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800756a:	f7fc fe2f 	bl	80041cc <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d803      	bhi.n	8007582 <HAL_SPI_Transmit+0x160>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d102      	bne.n	8007588 <HAL_SPI_Transmit+0x166>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e082      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1c7      	bne.n	8007536 <HAL_SPI_Transmit+0x114>
 80075a6:	e053      	b.n	8007650 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SPI_Transmit+0x194>
 80075b0:	8b7b      	ldrh	r3, [r7, #26]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d147      	bne.n	8007646 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075dc:	e033      	b.n	8007646 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d113      	bne.n	8007614 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007612:	e018      	b.n	8007646 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007614:	f7fc fdda 	bl	80041cc <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d803      	bhi.n	800762c <HAL_SPI_Transmit+0x20a>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d102      	bne.n	8007632 <HAL_SPI_Transmit+0x210>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e02d      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1c6      	bne.n	80075de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fbc5 	bl	8007de4 <SPI_EndRxTxTransaction>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80076a0:	2300      	movs	r3, #0
  }
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b088      	sub	sp, #32
 80076ae:	af02      	add	r7, sp, #8
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d001      	beq.n	80076ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80076c6:	2302      	movs	r3, #2
 80076c8:	e104      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d2:	d112      	bne.n	80076fa <HAL_SPI_Receive+0x50>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10e      	bne.n	80076fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2204      	movs	r2, #4
 80076e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f8f3 	bl	80078dc <HAL_SPI_TransmitReceive>
 80076f6:	4603      	mov	r3, r0
 80076f8:	e0ec      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076fa:	f7fc fd67 	bl	80041cc <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_SPI_Receive+0x62>
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0e1      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_SPI_Receive+0x74>
 800771a:	2302      	movs	r3, #2
 800771c:	e0da      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2204      	movs	r2, #4
 800772a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	88fa      	ldrh	r2, [r7, #6]
 8007744:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800776c:	d10f      	bne.n	800778e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800777c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800778c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007798:	2b40      	cmp	r3, #64	@ 0x40
 800779a:	d007      	beq.n	80077ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d170      	bne.n	8007896 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077b4:	e035      	b.n	8007822 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d115      	bne.n	80077f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f103 020c 	add.w	r2, r3, #12
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	7812      	ldrb	r2, [r2, #0]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077ee:	e018      	b.n	8007822 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f0:	f7fc fcec 	bl	80041cc <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d803      	bhi.n	8007808 <HAL_SPI_Receive+0x15e>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007806:	d102      	bne.n	800780e <HAL_SPI_Receive+0x164>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e058      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1c4      	bne.n	80077b6 <HAL_SPI_Receive+0x10c>
 800782c:	e038      	b.n	80078a0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d113      	bne.n	8007864 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	b292      	uxth	r2, r2
 8007848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007862:	e018      	b.n	8007896 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007864:	f7fc fcb2 	bl	80041cc <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d803      	bhi.n	800787c <HAL_SPI_Receive+0x1d2>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d102      	bne.n	8007882 <HAL_SPI_Receive+0x1d8>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e01e      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1c6      	bne.n	800782e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fa4b 	bl	8007d40 <SPI_EndRxTransaction>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80078d2:	2300      	movs	r3, #0
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	@ 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078ea:	2301      	movs	r3, #1
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ee:	f7fc fc6d 	bl	80041cc <HAL_GetTick>
 80078f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007906:	7ffb      	ldrb	r3, [r7, #31]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d00c      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x4a>
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007912:	d106      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d102      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x46>
 800791c:	7ffb      	ldrb	r3, [r7, #31]
 800791e:	2b04      	cmp	r3, #4
 8007920:	d001      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
 8007924:	e17f      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x5c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x5c>
 8007932:	887b      	ldrh	r3, [r7, #2]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e174      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_SPI_TransmitReceive+0x6e>
 8007946:	2302      	movs	r3, #2
 8007948:	e16d      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b04      	cmp	r3, #4
 800795c:	d003      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2205      	movs	r2, #5
 8007962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	887a      	ldrh	r2, [r7, #2]
 8007976:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	887a      	ldrh	r2, [r7, #2]
 800797c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	887a      	ldrh	r2, [r7, #2]
 8007988:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	887a      	ldrh	r2, [r7, #2]
 800798e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a6:	2b40      	cmp	r3, #64	@ 0x40
 80079a8:	d007      	beq.n	80079ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c2:	d17e      	bne.n	8007ac2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <HAL_SPI_TransmitReceive+0xf6>
 80079cc:	8afb      	ldrh	r3, [r7, #22]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d16c      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	881a      	ldrh	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e2:	1c9a      	adds	r2, r3, #2
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f6:	e059      	b.n	8007aac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d11b      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x162>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d016      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x162>
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d113      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a26:	1c9a      	adds	r2, r3, #2
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d119      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x1a4>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d014      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a60:	b292      	uxth	r2, r2
 8007a62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a68:	1c9a      	adds	r2, r3, #2
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a80:	f7fc fba4 	bl	80041cc <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d80d      	bhi.n	8007aac <HAL_SPI_TransmitReceive+0x1d0>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d009      	beq.n	8007aac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0bc      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1a0      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x11c>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d19b      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x11c>
 8007ac0:	e082      	b.n	8007bc8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SPI_TransmitReceive+0x1f4>
 8007aca:	8afb      	ldrh	r3, [r7, #22]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d171      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	7812      	ldrb	r2, [r2, #0]
 8007adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af6:	e05d      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d11c      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x264>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d017      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x264>
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d114      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d119      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x2a6>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d014      	beq.n	8007b82 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b82:	f7fc fb23 	bl	80041cc <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d803      	bhi.n	8007b9a <HAL_SPI_TransmitReceive+0x2be>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d102      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x2c4>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e038      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d19c      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x21c>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d197      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f909 	bl	8007de4 <SPI_EndRxTxTransaction>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e01d      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3728      	adds	r7, #40	@ 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c40:	f7fc fac4 	bl	80041cc <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c50:	f7fc fabc 	bl	80041cc <HAL_GetTick>
 8007c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c56:	4b39      	ldr	r3, [pc, #228]	@ (8007d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	015b      	lsls	r3, r3, #5
 8007c5c:	0d1b      	lsrs	r3, r3, #20
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c66:	e054      	b.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d050      	beq.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c70:	f7fc faac 	bl	80041cc <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d902      	bls.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d13d      	bne.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c9e:	d111      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca8:	d004      	beq.n	8007cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb2:	d107      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ccc:	d10f      	bne.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e017      	b.n	8007d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d19b      	bne.n	8007c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000005c 	.word	0x2000005c

08007d40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d54:	d111      	bne.n	8007d7a <SPI_EndRxTransaction+0x3a>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d5e:	d004      	beq.n	8007d6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d68:	d107      	bne.n	8007d7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d78:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d82:	d117      	bne.n	8007db4 <SPI_EndRxTransaction+0x74>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d8c:	d112      	bne.n	8007db4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	2101      	movs	r1, #1
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff ff49 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da8:	f043 0220 	orr.w	r2, r3, #32
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e013      	b.n	8007ddc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2180      	movs	r1, #128	@ 0x80
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff ff36 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e000      	b.n	8007ddc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2201      	movs	r2, #1
 8007df8:	2102      	movs	r1, #2
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff ff18 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e013      	b.n	8007e3e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2180      	movs	r1, #128	@ 0x80
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff ff05 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e30:	f043 0220 	orr.w	r2, r3, #32
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e000      	b.n	8007e3e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e041      	b.n	8007edc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fb ff15 	bl	8003c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f000 f93f 	bl	8008108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d001      	beq.n	8007efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e032      	b.n	8007f62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a18      	ldr	r2, [pc, #96]	@ (8007f6c <HAL_TIM_Base_Start+0x88>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00e      	beq.n	8007f2c <HAL_TIM_Base_Start+0x48>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f16:	d009      	beq.n	8007f2c <HAL_TIM_Base_Start+0x48>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a14      	ldr	r2, [pc, #80]	@ (8007f70 <HAL_TIM_Base_Start+0x8c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIM_Base_Start+0x48>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a13      	ldr	r2, [pc, #76]	@ (8007f74 <HAL_TIM_Base_Start+0x90>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d111      	bne.n	8007f50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d010      	beq.n	8007f60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0201 	orr.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4e:	e007      	b.n	8007f60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800

08007f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIM_ConfigClockSource+0x1c>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e0b4      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x186>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fcc:	d03e      	beq.n	800804c <HAL_TIM_ConfigClockSource+0xd4>
 8007fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd2:	f200 8087 	bhi.w	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fda:	f000 8086 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x172>
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe2:	d87f      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b70      	cmp	r3, #112	@ 0x70
 8007fe6:	d01a      	beq.n	800801e <HAL_TIM_ConfigClockSource+0xa6>
 8007fe8:	2b70      	cmp	r3, #112	@ 0x70
 8007fea:	d87b      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b60      	cmp	r3, #96	@ 0x60
 8007fee:	d050      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x11a>
 8007ff0:	2b60      	cmp	r3, #96	@ 0x60
 8007ff2:	d877      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b50      	cmp	r3, #80	@ 0x50
 8007ff6:	d03c      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0xfa>
 8007ff8:	2b50      	cmp	r3, #80	@ 0x50
 8007ffa:	d873      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d058      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x13a>
 8008000:	2b40      	cmp	r3, #64	@ 0x40
 8008002:	d86f      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b30      	cmp	r3, #48	@ 0x30
 8008006:	d064      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008008:	2b30      	cmp	r3, #48	@ 0x30
 800800a:	d86b      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b20      	cmp	r3, #32
 800800e:	d060      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008010:	2b20      	cmp	r3, #32
 8008012:	d867      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05c      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b10      	cmp	r3, #16
 800801a:	d05a      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	e062      	b.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	f000 f950 	bl	80082d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	609a      	str	r2, [r3, #8]
      break;
 800804a:	e04f      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	f000 f939 	bl	80082d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800806e:	609a      	str	r2, [r3, #8]
      break;
 8008070:	e03c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	461a      	mov	r2, r3
 8008080:	f000 f8b0 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2150      	movs	r1, #80	@ 0x50
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f907 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8008090:	e02c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 f8ce 	bl	8008240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2160      	movs	r1, #96	@ 0x60
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f8f7 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80080b0:	e01c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080be:	461a      	mov	r2, r3
 80080c0:	f000 f890 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2140      	movs	r1, #64	@ 0x40
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f8e7 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80080d0:	e00c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f000 f8de 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80080e2:	e003      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e000      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a2f      	ldr	r2, [pc, #188]	@ (80081d8 <TIM_Base_SetConfig+0xd0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00b      	beq.n	8008138 <TIM_Base_SetConfig+0x30>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	d007      	beq.n	8008138 <TIM_Base_SetConfig+0x30>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a2c      	ldr	r2, [pc, #176]	@ (80081dc <TIM_Base_SetConfig+0xd4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_Base_SetConfig+0x30>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a2b      	ldr	r2, [pc, #172]	@ (80081e0 <TIM_Base_SetConfig+0xd8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d108      	bne.n	800814a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a22      	ldr	r2, [pc, #136]	@ (80081d8 <TIM_Base_SetConfig+0xd0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00b      	beq.n	800816a <TIM_Base_SetConfig+0x62>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008158:	d007      	beq.n	800816a <TIM_Base_SetConfig+0x62>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1f      	ldr	r2, [pc, #124]	@ (80081dc <TIM_Base_SetConfig+0xd4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_Base_SetConfig+0x62>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1e      	ldr	r2, [pc, #120]	@ (80081e0 <TIM_Base_SetConfig+0xd8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d108      	bne.n	800817c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a0d      	ldr	r2, [pc, #52]	@ (80081d8 <TIM_Base_SetConfig+0xd0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d103      	bne.n	80081b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f023 0201 	bic.w	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	611a      	str	r2, [r3, #16]
  }
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr
 80081d8:	40012c00 	.word	0x40012c00
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800

080081e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 030a 	bic.w	r3, r3, #10
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f023 0210 	bic.w	r2, r3, #16
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800826a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	031b      	lsls	r3, r3, #12
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4313      	orrs	r3, r2
 8008274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800827c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f043 0307 	orr.w	r3, r3, #7
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	609a      	str	r2, [r3, #8]
}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	021a      	lsls	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	431a      	orrs	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	609a      	str	r2, [r3, #8]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008324:	2302      	movs	r3, #2
 8008326:	e046      	b.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a16      	ldr	r2, [pc, #88]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00e      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008374:	d009      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a12      	ldr	r2, [pc, #72]	@ (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d004      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a10      	ldr	r2, [pc, #64]	@ (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d10c      	bne.n	80083a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4313      	orrs	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr
 80083c0:	40012c00 	.word	0x40012c00
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800

080083cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e042      	b.n	8008464 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fb fc70 	bl	8003cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2224      	movs	r2, #36	@ 0x24
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800840e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9cf 	bl	80087b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	695a      	ldr	r2, [r3, #20]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	@ 0x28
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b20      	cmp	r3, #32
 800848a:	d175      	bne.n	8008578 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <HAL_UART_Transmit+0x2c>
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e06e      	b.n	800857a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2221      	movs	r2, #33	@ 0x21
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084aa:	f7fb fe8f 	bl	80041cc <HAL_GetTick>
 80084ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	88fa      	ldrh	r2, [r7, #6]
 80084b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c4:	d108      	bne.n	80084d8 <HAL_UART_Transmit+0x6c>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	e003      	b.n	80084e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084e0:	e02e      	b.n	8008540 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	2180      	movs	r1, #128	@ 0x80
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 f86d 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e03a      	b.n	800857a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10b      	bne.n	8008522 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	3302      	adds	r3, #2
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	e007      	b.n	8008532 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	3301      	adds	r3, #1
 8008530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1cb      	bne.n	80084e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	2140      	movs	r1, #64	@ 0x40
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f839 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e006      	b.n	800857a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	4613      	mov	r3, r2
 800858e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b20      	cmp	r3, #32
 800859a:	d112      	bne.n	80085c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <HAL_UART_Receive_IT+0x26>
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e00b      	b.n	80085c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	461a      	mov	r2, r3
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f860 	bl	800867e <UART_Start_Receive_IT>
 80085be:	4603      	mov	r3, r0
 80085c0:	e000      	b.n	80085c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085dc:	e03b      	b.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d037      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e6:	f7fb fdf1 	bl	80041cc <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	6a3a      	ldr	r2, [r7, #32]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d302      	bcc.n	80085fc <UART_WaitOnFlagUntilTimeout+0x30>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e03a      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d023      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b80      	cmp	r3, #128	@ 0x80
 8008612:	d020      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b40      	cmp	r3, #64	@ 0x40
 8008618:	d01d      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d116      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f856 	bl	80086f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2208      	movs	r2, #8
 8008648:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e00f      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4013      	ands	r3, r2
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d0b4      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	4613      	mov	r3, r2
 800868a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	88fa      	ldrh	r2, [r7, #6]
 800869c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2222      	movs	r2, #34	@ 0x22
 80086a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d007      	beq.n	80086c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0220 	orr.w	r2, r2, #32
 80086e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b095      	sub	sp, #84	@ 0x54
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008718:	643a      	str	r2, [r7, #64]	@ 0x40
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800871e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	61fb      	str	r3, [r7, #28]
   return(result);
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3314      	adds	r3, #20
 800874a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800874c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800874e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008764:	2b01      	cmp	r3, #1
 8008766:	d119      	bne.n	800879c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60bb      	str	r3, [r7, #8]
   return(result);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f023 0310 	bic.w	r3, r3, #16
 800877e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008788:	61ba      	str	r2, [r7, #24]
 800878a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6979      	ldr	r1, [r7, #20]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	613b      	str	r3, [r7, #16]
   return(result);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087aa:	bf00      	nop
 80087ac:	3754      	adds	r7, #84	@ 0x54
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr

080087b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80087ee:	f023 030c 	bic.w	r3, r3, #12
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2c      	ldr	r2, [pc, #176]	@ (80088c8 <UART_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d103      	bne.n	8008824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800881c:	f7fe fbac 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	e002      	b.n	800882a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008824:	f7fe fb94 	bl	8006f50 <HAL_RCC_GetPCLK1Freq>
 8008828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009a      	lsls	r2, r3, #2
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008840:	4a22      	ldr	r2, [pc, #136]	@ (80088cc <UART_SetConfig+0x118>)
 8008842:	fba2 2303 	umull	r2, r3, r2, r3
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	0119      	lsls	r1, r3, #4
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009a      	lsls	r2, r3, #2
 8008854:	441a      	add	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008860:	4b1a      	ldr	r3, [pc, #104]	@ (80088cc <UART_SetConfig+0x118>)
 8008862:	fba3 0302 	umull	r0, r3, r3, r2
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	2064      	movs	r0, #100	@ 0x64
 800886a:	fb00 f303 	mul.w	r3, r0, r3
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	3332      	adds	r3, #50	@ 0x32
 8008874:	4a15      	ldr	r2, [pc, #84]	@ (80088cc <UART_SetConfig+0x118>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008880:	4419      	add	r1, r3
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009a      	lsls	r2, r3, #2
 800888c:	441a      	add	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	fbb2 f2f3 	udiv	r2, r2, r3
 8008898:	4b0c      	ldr	r3, [pc, #48]	@ (80088cc <UART_SetConfig+0x118>)
 800889a:	fba3 0302 	umull	r0, r3, r3, r2
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2064      	movs	r0, #100	@ 0x64
 80088a2:	fb00 f303 	mul.w	r3, r0, r3
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	3332      	adds	r3, #50	@ 0x32
 80088ac:	4a07      	ldr	r2, [pc, #28]	@ (80088cc <UART_SetConfig+0x118>)
 80088ae:	fba2 2303 	umull	r2, r3, r2, r3
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	f003 020f 	and.w	r2, r3, #15
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	440a      	add	r2, r1
 80088be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	40013800 	.word	0x40013800
 80088cc:	51eb851f 	.word	0x51eb851f

080088d0 <std>:
 80088d0:	2300      	movs	r3, #0
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	e9c0 3300 	strd	r3, r3, [r0]
 80088da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088de:	6083      	str	r3, [r0, #8]
 80088e0:	8181      	strh	r1, [r0, #12]
 80088e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80088e4:	81c2      	strh	r2, [r0, #14]
 80088e6:	6183      	str	r3, [r0, #24]
 80088e8:	4619      	mov	r1, r3
 80088ea:	2208      	movs	r2, #8
 80088ec:	305c      	adds	r0, #92	@ 0x5c
 80088ee:	f000 fa1d 	bl	8008d2c <memset>
 80088f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008928 <std+0x58>)
 80088f4:	6224      	str	r4, [r4, #32]
 80088f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80088f8:	4b0c      	ldr	r3, [pc, #48]	@ (800892c <std+0x5c>)
 80088fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008930 <std+0x60>)
 80088fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008900:	4b0c      	ldr	r3, [pc, #48]	@ (8008934 <std+0x64>)
 8008902:	6323      	str	r3, [r4, #48]	@ 0x30
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <std+0x68>)
 8008906:	429c      	cmp	r4, r3
 8008908:	d006      	beq.n	8008918 <std+0x48>
 800890a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800890e:	4294      	cmp	r4, r2
 8008910:	d002      	beq.n	8008918 <std+0x48>
 8008912:	33d0      	adds	r3, #208	@ 0xd0
 8008914:	429c      	cmp	r4, r3
 8008916:	d105      	bne.n	8008924 <std+0x54>
 8008918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800891c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008920:	f000 baa2 	b.w	8008e68 <__retarget_lock_init_recursive>
 8008924:	bd10      	pop	{r4, pc}
 8008926:	bf00      	nop
 8008928:	08008b7d 	.word	0x08008b7d
 800892c:	08008b9f 	.word	0x08008b9f
 8008930:	08008bd7 	.word	0x08008bd7
 8008934:	08008bfb 	.word	0x08008bfb
 8008938:	200004d8 	.word	0x200004d8

0800893c <stdio_exit_handler>:
 800893c:	4a02      	ldr	r2, [pc, #8]	@ (8008948 <stdio_exit_handler+0xc>)
 800893e:	4903      	ldr	r1, [pc, #12]	@ (800894c <stdio_exit_handler+0x10>)
 8008940:	4803      	ldr	r0, [pc, #12]	@ (8008950 <stdio_exit_handler+0x14>)
 8008942:	f000 b869 	b.w	8008a18 <_fwalk_sglue>
 8008946:	bf00      	nop
 8008948:	20000068 	.word	0x20000068
 800894c:	0800972d 	.word	0x0800972d
 8008950:	20000078 	.word	0x20000078

08008954 <cleanup_stdio>:
 8008954:	6841      	ldr	r1, [r0, #4]
 8008956:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <cleanup_stdio+0x34>)
 8008958:	b510      	push	{r4, lr}
 800895a:	4299      	cmp	r1, r3
 800895c:	4604      	mov	r4, r0
 800895e:	d001      	beq.n	8008964 <cleanup_stdio+0x10>
 8008960:	f000 fee4 	bl	800972c <_fflush_r>
 8008964:	68a1      	ldr	r1, [r4, #8]
 8008966:	4b09      	ldr	r3, [pc, #36]	@ (800898c <cleanup_stdio+0x38>)
 8008968:	4299      	cmp	r1, r3
 800896a:	d002      	beq.n	8008972 <cleanup_stdio+0x1e>
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fedd 	bl	800972c <_fflush_r>
 8008972:	68e1      	ldr	r1, [r4, #12]
 8008974:	4b06      	ldr	r3, [pc, #24]	@ (8008990 <cleanup_stdio+0x3c>)
 8008976:	4299      	cmp	r1, r3
 8008978:	d004      	beq.n	8008984 <cleanup_stdio+0x30>
 800897a:	4620      	mov	r0, r4
 800897c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008980:	f000 bed4 	b.w	800972c <_fflush_r>
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	200004d8 	.word	0x200004d8
 800898c:	20000540 	.word	0x20000540
 8008990:	200005a8 	.word	0x200005a8

08008994 <global_stdio_init.part.0>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <global_stdio_init.part.0+0x30>)
 8008998:	4c0b      	ldr	r4, [pc, #44]	@ (80089c8 <global_stdio_init.part.0+0x34>)
 800899a:	4a0c      	ldr	r2, [pc, #48]	@ (80089cc <global_stdio_init.part.0+0x38>)
 800899c:	4620      	mov	r0, r4
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	2104      	movs	r1, #4
 80089a2:	2200      	movs	r2, #0
 80089a4:	f7ff ff94 	bl	80088d0 <std>
 80089a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089ac:	2201      	movs	r2, #1
 80089ae:	2109      	movs	r1, #9
 80089b0:	f7ff ff8e 	bl	80088d0 <std>
 80089b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089b8:	2202      	movs	r2, #2
 80089ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089be:	2112      	movs	r1, #18
 80089c0:	f7ff bf86 	b.w	80088d0 <std>
 80089c4:	20000610 	.word	0x20000610
 80089c8:	200004d8 	.word	0x200004d8
 80089cc:	0800893d 	.word	0x0800893d

080089d0 <__sfp_lock_acquire>:
 80089d0:	4801      	ldr	r0, [pc, #4]	@ (80089d8 <__sfp_lock_acquire+0x8>)
 80089d2:	f000 ba4a 	b.w	8008e6a <__retarget_lock_acquire_recursive>
 80089d6:	bf00      	nop
 80089d8:	20000619 	.word	0x20000619

080089dc <__sfp_lock_release>:
 80089dc:	4801      	ldr	r0, [pc, #4]	@ (80089e4 <__sfp_lock_release+0x8>)
 80089de:	f000 ba45 	b.w	8008e6c <__retarget_lock_release_recursive>
 80089e2:	bf00      	nop
 80089e4:	20000619 	.word	0x20000619

080089e8 <__sinit>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	4604      	mov	r4, r0
 80089ec:	f7ff fff0 	bl	80089d0 <__sfp_lock_acquire>
 80089f0:	6a23      	ldr	r3, [r4, #32]
 80089f2:	b11b      	cbz	r3, 80089fc <__sinit+0x14>
 80089f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f8:	f7ff bff0 	b.w	80089dc <__sfp_lock_release>
 80089fc:	4b04      	ldr	r3, [pc, #16]	@ (8008a10 <__sinit+0x28>)
 80089fe:	6223      	str	r3, [r4, #32]
 8008a00:	4b04      	ldr	r3, [pc, #16]	@ (8008a14 <__sinit+0x2c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1f5      	bne.n	80089f4 <__sinit+0xc>
 8008a08:	f7ff ffc4 	bl	8008994 <global_stdio_init.part.0>
 8008a0c:	e7f2      	b.n	80089f4 <__sinit+0xc>
 8008a0e:	bf00      	nop
 8008a10:	08008955 	.word	0x08008955
 8008a14:	20000610 	.word	0x20000610

08008a18 <_fwalk_sglue>:
 8008a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	4688      	mov	r8, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	2600      	movs	r6, #0
 8008a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a28:	f1b9 0901 	subs.w	r9, r9, #1
 8008a2c:	d505      	bpl.n	8008a3a <_fwalk_sglue+0x22>
 8008a2e:	6824      	ldr	r4, [r4, #0]
 8008a30:	2c00      	cmp	r4, #0
 8008a32:	d1f7      	bne.n	8008a24 <_fwalk_sglue+0xc>
 8008a34:	4630      	mov	r0, r6
 8008a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d907      	bls.n	8008a50 <_fwalk_sglue+0x38>
 8008a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a44:	3301      	adds	r3, #1
 8008a46:	d003      	beq.n	8008a50 <_fwalk_sglue+0x38>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c0      	blx	r8
 8008a4e:	4306      	orrs	r6, r0
 8008a50:	3568      	adds	r5, #104	@ 0x68
 8008a52:	e7e9      	b.n	8008a28 <_fwalk_sglue+0x10>

08008a54 <_puts_r>:
 8008a54:	6a03      	ldr	r3, [r0, #32]
 8008a56:	b570      	push	{r4, r5, r6, lr}
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460e      	mov	r6, r1
 8008a5c:	6884      	ldr	r4, [r0, #8]
 8008a5e:	b90b      	cbnz	r3, 8008a64 <_puts_r+0x10>
 8008a60:	f7ff ffc2 	bl	80089e8 <__sinit>
 8008a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a66:	07db      	lsls	r3, r3, #31
 8008a68:	d405      	bmi.n	8008a76 <_puts_r+0x22>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	0598      	lsls	r0, r3, #22
 8008a6e:	d402      	bmi.n	8008a76 <_puts_r+0x22>
 8008a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a72:	f000 f9fa 	bl	8008e6a <__retarget_lock_acquire_recursive>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	0719      	lsls	r1, r3, #28
 8008a7a:	d502      	bpl.n	8008a82 <_puts_r+0x2e>
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d135      	bne.n	8008aee <_puts_r+0x9a>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 f8fb 	bl	8008c80 <__swsetup_r>
 8008a8a:	b380      	cbz	r0, 8008aee <_puts_r+0x9a>
 8008a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d405      	bmi.n	8008aa2 <_puts_r+0x4e>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	059b      	lsls	r3, r3, #22
 8008a9a:	d402      	bmi.n	8008aa2 <_puts_r+0x4e>
 8008a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a9e:	f000 f9e5 	bl	8008e6c <__retarget_lock_release_recursive>
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da04      	bge.n	8008ab4 <_puts_r+0x60>
 8008aaa:	69a2      	ldr	r2, [r4, #24]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	dc17      	bgt.n	8008ae0 <_puts_r+0x8c>
 8008ab0:	290a      	cmp	r1, #10
 8008ab2:	d015      	beq.n	8008ae0 <_puts_r+0x8c>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	7019      	strb	r1, [r3, #0]
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d1ed      	bne.n	8008aa6 <_puts_r+0x52>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da11      	bge.n	8008af2 <_puts_r+0x9e>
 8008ace:	4622      	mov	r2, r4
 8008ad0:	210a      	movs	r1, #10
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 f895 	bl	8008c02 <__swbuf_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d0d7      	beq.n	8008a8c <_puts_r+0x38>
 8008adc:	250a      	movs	r5, #10
 8008ade:	e7d7      	b.n	8008a90 <_puts_r+0x3c>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f88d 	bl	8008c02 <__swbuf_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d1e7      	bne.n	8008abc <_puts_r+0x68>
 8008aec:	e7ce      	b.n	8008a8c <_puts_r+0x38>
 8008aee:	3e01      	subs	r6, #1
 8008af0:	e7e4      	b.n	8008abc <_puts_r+0x68>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	6022      	str	r2, [r4, #0]
 8008af8:	220a      	movs	r2, #10
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e7ee      	b.n	8008adc <_puts_r+0x88>
	...

08008b00 <puts>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <puts+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f7ff bfa5 	b.w	8008a54 <_puts_r>
 8008b0a:	bf00      	nop
 8008b0c:	20000074 	.word	0x20000074

08008b10 <sniprintf>:
 8008b10:	b40c      	push	{r2, r3}
 8008b12:	b530      	push	{r4, r5, lr}
 8008b14:	4b18      	ldr	r3, [pc, #96]	@ (8008b78 <sniprintf+0x68>)
 8008b16:	1e0c      	subs	r4, r1, #0
 8008b18:	681d      	ldr	r5, [r3, #0]
 8008b1a:	b09d      	sub	sp, #116	@ 0x74
 8008b1c:	da08      	bge.n	8008b30 <sniprintf+0x20>
 8008b1e:	238b      	movs	r3, #139	@ 0x8b
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	b01d      	add	sp, #116	@ 0x74
 8008b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b2c:	b002      	add	sp, #8
 8008b2e:	4770      	bx	lr
 8008b30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008b34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008b3e:	bf0c      	ite	eq
 8008b40:	4623      	moveq	r3, r4
 8008b42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	9307      	str	r3, [sp, #28]
 8008b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b4e:	9002      	str	r0, [sp, #8]
 8008b50:	9006      	str	r0, [sp, #24]
 8008b52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b56:	4628      	mov	r0, r5
 8008b58:	ab21      	add	r3, sp, #132	@ 0x84
 8008b5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b5c:	a902      	add	r1, sp, #8
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	f000 fad8 	bl	8009114 <_svfiprintf_r>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	bfbc      	itt	lt
 8008b68:	238b      	movlt	r3, #139	@ 0x8b
 8008b6a:	602b      	strlt	r3, [r5, #0]
 8008b6c:	2c00      	cmp	r4, #0
 8008b6e:	d0da      	beq.n	8008b26 <sniprintf+0x16>
 8008b70:	2200      	movs	r2, #0
 8008b72:	9b02      	ldr	r3, [sp, #8]
 8008b74:	701a      	strb	r2, [r3, #0]
 8008b76:	e7d6      	b.n	8008b26 <sniprintf+0x16>
 8008b78:	20000074 	.word	0x20000074

08008b7c <__sread>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	460c      	mov	r4, r1
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	f000 f922 	bl	8008dcc <_read_r>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	bfab      	itete	ge
 8008b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b90:	181b      	addge	r3, r3, r0
 8008b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b96:	bfac      	ite	ge
 8008b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b9a:	81a3      	strhlt	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__swrite>:
 8008b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	461f      	mov	r7, r3
 8008ba4:	898b      	ldrh	r3, [r1, #12]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	05db      	lsls	r3, r3, #23
 8008baa:	460c      	mov	r4, r1
 8008bac:	4616      	mov	r6, r2
 8008bae:	d505      	bpl.n	8008bbc <__swrite+0x1e>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	f000 f8f6 	bl	8008da8 <_lseek_r>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd2:	f000 b90d 	b.w	8008df0 <_write_r>

08008bd6 <__sseek>:
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f000 f8e3 	bl	8008da8 <_lseek_r>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	bf15      	itete	ne
 8008be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bf2:	81a3      	strheq	r3, [r4, #12]
 8008bf4:	bf18      	it	ne
 8008bf6:	81a3      	strhne	r3, [r4, #12]
 8008bf8:	bd10      	pop	{r4, pc}

08008bfa <__sclose>:
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 b8c3 	b.w	8008d88 <_close_r>

08008c02 <__swbuf_r>:
 8008c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c04:	460e      	mov	r6, r1
 8008c06:	4614      	mov	r4, r2
 8008c08:	4605      	mov	r5, r0
 8008c0a:	b118      	cbz	r0, 8008c14 <__swbuf_r+0x12>
 8008c0c:	6a03      	ldr	r3, [r0, #32]
 8008c0e:	b90b      	cbnz	r3, 8008c14 <__swbuf_r+0x12>
 8008c10:	f7ff feea 	bl	80089e8 <__sinit>
 8008c14:	69a3      	ldr	r3, [r4, #24]
 8008c16:	60a3      	str	r3, [r4, #8]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	071a      	lsls	r2, r3, #28
 8008c1c:	d501      	bpl.n	8008c22 <__swbuf_r+0x20>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	b943      	cbnz	r3, 8008c34 <__swbuf_r+0x32>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 f82b 	bl	8008c80 <__swsetup_r>
 8008c2a:	b118      	cbz	r0, 8008c34 <__swbuf_r+0x32>
 8008c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8008c30:	4638      	mov	r0, r7
 8008c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	6922      	ldr	r2, [r4, #16]
 8008c38:	b2f6      	uxtb	r6, r6
 8008c3a:	1a98      	subs	r0, r3, r2
 8008c3c:	6963      	ldr	r3, [r4, #20]
 8008c3e:	4637      	mov	r7, r6
 8008c40:	4283      	cmp	r3, r0
 8008c42:	dc05      	bgt.n	8008c50 <__swbuf_r+0x4e>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 fd70 	bl	800972c <_fflush_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d1ed      	bne.n	8008c2c <__swbuf_r+0x2a>
 8008c50:	68a3      	ldr	r3, [r4, #8]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	6022      	str	r2, [r4, #0]
 8008c5c:	701e      	strb	r6, [r3, #0]
 8008c5e:	6962      	ldr	r2, [r4, #20]
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d004      	beq.n	8008c70 <__swbuf_r+0x6e>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	07db      	lsls	r3, r3, #31
 8008c6a:	d5e1      	bpl.n	8008c30 <__swbuf_r+0x2e>
 8008c6c:	2e0a      	cmp	r6, #10
 8008c6e:	d1df      	bne.n	8008c30 <__swbuf_r+0x2e>
 8008c70:	4621      	mov	r1, r4
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 fd5a 	bl	800972c <_fflush_r>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d0d9      	beq.n	8008c30 <__swbuf_r+0x2e>
 8008c7c:	e7d6      	b.n	8008c2c <__swbuf_r+0x2a>
	...

08008c80 <__swsetup_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4b29      	ldr	r3, [pc, #164]	@ (8008d28 <__swsetup_r+0xa8>)
 8008c84:	4605      	mov	r5, r0
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	460c      	mov	r4, r1
 8008c8a:	b118      	cbz	r0, 8008c94 <__swsetup_r+0x14>
 8008c8c:	6a03      	ldr	r3, [r0, #32]
 8008c8e:	b90b      	cbnz	r3, 8008c94 <__swsetup_r+0x14>
 8008c90:	f7ff feaa 	bl	80089e8 <__sinit>
 8008c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c98:	0719      	lsls	r1, r3, #28
 8008c9a:	d422      	bmi.n	8008ce2 <__swsetup_r+0x62>
 8008c9c:	06da      	lsls	r2, r3, #27
 8008c9e:	d407      	bmi.n	8008cb0 <__swsetup_r+0x30>
 8008ca0:	2209      	movs	r2, #9
 8008ca2:	602a      	str	r2, [r5, #0]
 8008ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e033      	b.n	8008d18 <__swsetup_r+0x98>
 8008cb0:	0758      	lsls	r0, r3, #29
 8008cb2:	d512      	bpl.n	8008cda <__swsetup_r+0x5a>
 8008cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cb6:	b141      	cbz	r1, 8008cca <__swsetup_r+0x4a>
 8008cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <__swsetup_r+0x46>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f8d5 	bl	8008e70 <_free_r>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6063      	str	r3, [r4, #4]
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f043 0308 	orr.w	r3, r3, #8
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	b94b      	cbnz	r3, 8008cfa <__swsetup_r+0x7a>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf0:	d003      	beq.n	8008cfa <__swsetup_r+0x7a>
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 fd66 	bl	80097c6 <__smakebuf_r>
 8008cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfe:	f013 0201 	ands.w	r2, r3, #1
 8008d02:	d00a      	beq.n	8008d1a <__swsetup_r+0x9a>
 8008d04:	2200      	movs	r2, #0
 8008d06:	60a2      	str	r2, [r4, #8]
 8008d08:	6962      	ldr	r2, [r4, #20]
 8008d0a:	4252      	negs	r2, r2
 8008d0c:	61a2      	str	r2, [r4, #24]
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	b942      	cbnz	r2, 8008d24 <__swsetup_r+0xa4>
 8008d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d16:	d1c5      	bne.n	8008ca4 <__swsetup_r+0x24>
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
 8008d1a:	0799      	lsls	r1, r3, #30
 8008d1c:	bf58      	it	pl
 8008d1e:	6962      	ldrpl	r2, [r4, #20]
 8008d20:	60a2      	str	r2, [r4, #8]
 8008d22:	e7f4      	b.n	8008d0e <__swsetup_r+0x8e>
 8008d24:	2000      	movs	r0, #0
 8008d26:	e7f7      	b.n	8008d18 <__swsetup_r+0x98>
 8008d28:	20000074 	.word	0x20000074

08008d2c <memset>:
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4402      	add	r2, r0
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d100      	bne.n	8008d36 <memset+0xa>
 8008d34:	4770      	bx	lr
 8008d36:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3a:	e7f9      	b.n	8008d30 <memset+0x4>

08008d3c <strncat>:
 8008d3c:	b530      	push	{r4, r5, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	7825      	ldrb	r5, [r4, #0]
 8008d42:	4623      	mov	r3, r4
 8008d44:	3401      	adds	r4, #1
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	d1fa      	bne.n	8008d40 <strncat+0x4>
 8008d4a:	3a01      	subs	r2, #1
 8008d4c:	d304      	bcc.n	8008d58 <strncat+0x1c>
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	f803 4b01 	strb.w	r4, [r3], #1
 8008d56:	b904      	cbnz	r4, 8008d5a <strncat+0x1e>
 8008d58:	bd30      	pop	{r4, r5, pc}
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d1f5      	bne.n	8008d4a <strncat+0xe>
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	e7f3      	b.n	8008d4a <strncat+0xe>

08008d62 <strncpy>:
 8008d62:	4603      	mov	r3, r0
 8008d64:	b510      	push	{r4, lr}
 8008d66:	3901      	subs	r1, #1
 8008d68:	b132      	cbz	r2, 8008d78 <strncpy+0x16>
 8008d6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d6e:	3a01      	subs	r2, #1
 8008d70:	f803 4b01 	strb.w	r4, [r3], #1
 8008d74:	2c00      	cmp	r4, #0
 8008d76:	d1f7      	bne.n	8008d68 <strncpy+0x6>
 8008d78:	2100      	movs	r1, #0
 8008d7a:	441a      	add	r2, r3
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <strncpy+0x20>
 8008d80:	bd10      	pop	{r4, pc}
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <strncpy+0x1a>

08008d88 <_close_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4d05      	ldr	r5, [pc, #20]	@ (8008da4 <_close_r+0x1c>)
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7fb f8bb 	bl	8003f0e <_close>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_close_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_close_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	20000614 	.word	0x20000614

08008da8 <_lseek_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	2200      	movs	r2, #0
 8008db2:	4d05      	ldr	r5, [pc, #20]	@ (8008dc8 <_lseek_r+0x20>)
 8008db4:	602a      	str	r2, [r5, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7fb f8cd 	bl	8003f56 <_lseek>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_lseek_r+0x1e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_lseek_r+0x1e>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	20000614 	.word	0x20000614

08008dcc <_read_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4d05      	ldr	r5, [pc, #20]	@ (8008dec <_read_r+0x20>)
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f7fb f85e 	bl	8003e9c <_read>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_read_r+0x1e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_read_r+0x1e>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	20000614 	.word	0x20000614

08008df0 <_write_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4d05      	ldr	r5, [pc, #20]	@ (8008e10 <_write_r+0x20>)
 8008dfc:	602a      	str	r2, [r5, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f7fb f869 	bl	8003ed6 <_write>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_write_r+0x1e>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_write_r+0x1e>
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	20000614 	.word	0x20000614

08008e14 <__errno>:
 8008e14:	4b01      	ldr	r3, [pc, #4]	@ (8008e1c <__errno+0x8>)
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000074 	.word	0x20000074

08008e20 <__libc_init_array>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	2600      	movs	r6, #0
 8008e24:	4d0c      	ldr	r5, [pc, #48]	@ (8008e58 <__libc_init_array+0x38>)
 8008e26:	4c0d      	ldr	r4, [pc, #52]	@ (8008e5c <__libc_init_array+0x3c>)
 8008e28:	1b64      	subs	r4, r4, r5
 8008e2a:	10a4      	asrs	r4, r4, #2
 8008e2c:	42a6      	cmp	r6, r4
 8008e2e:	d109      	bne.n	8008e44 <__libc_init_array+0x24>
 8008e30:	f000 fda4 	bl	800997c <_init>
 8008e34:	2600      	movs	r6, #0
 8008e36:	4d0a      	ldr	r5, [pc, #40]	@ (8008e60 <__libc_init_array+0x40>)
 8008e38:	4c0a      	ldr	r4, [pc, #40]	@ (8008e64 <__libc_init_array+0x44>)
 8008e3a:	1b64      	subs	r4, r4, r5
 8008e3c:	10a4      	asrs	r4, r4, #2
 8008e3e:	42a6      	cmp	r6, r4
 8008e40:	d105      	bne.n	8008e4e <__libc_init_array+0x2e>
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e48:	4798      	blx	r3
 8008e4a:	3601      	adds	r6, #1
 8008e4c:	e7ee      	b.n	8008e2c <__libc_init_array+0xc>
 8008e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e52:	4798      	blx	r3
 8008e54:	3601      	adds	r6, #1
 8008e56:	e7f2      	b.n	8008e3e <__libc_init_array+0x1e>
 8008e58:	08009eb8 	.word	0x08009eb8
 8008e5c:	08009eb8 	.word	0x08009eb8
 8008e60:	08009eb8 	.word	0x08009eb8
 8008e64:	08009ebc 	.word	0x08009ebc

08008e68 <__retarget_lock_init_recursive>:
 8008e68:	4770      	bx	lr

08008e6a <__retarget_lock_acquire_recursive>:
 8008e6a:	4770      	bx	lr

08008e6c <__retarget_lock_release_recursive>:
 8008e6c:	4770      	bx	lr
	...

08008e70 <_free_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4605      	mov	r5, r0
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d040      	beq.n	8008efa <_free_r+0x8a>
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f0c      	subs	r4, r1, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	18e4      	addlt	r4, r4, r3
 8008e84:	f000 f8de 	bl	8009044 <__malloc_lock>
 8008e88:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <_free_r+0x8c>)
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	b933      	cbnz	r3, 8008e9c <_free_r+0x2c>
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6014      	str	r4, [r2, #0]
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e98:	f000 b8da 	b.w	8009050 <__malloc_unlock>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d908      	bls.n	8008eb2 <_free_r+0x42>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	1821      	adds	r1, r4, r0
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	e7ed      	b.n	8008e8e <_free_r+0x1e>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x4c>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x42>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1850      	adds	r0, r2, r1
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x6c>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	1850      	adds	r0, r2, r1
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1e0      	bne.n	8008e92 <_free_r+0x22>
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4408      	add	r0, r1
 8008ed6:	6010      	str	r0, [r2, #0]
 8008ed8:	6053      	str	r3, [r2, #4]
 8008eda:	e7da      	b.n	8008e92 <_free_r+0x22>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x74>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	e7d6      	b.n	8008e92 <_free_r+0x22>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1809      	addeq	r1, r1, r0
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	6063      	str	r3, [r4, #4]
 8008ef6:	6054      	str	r4, [r2, #4]
 8008ef8:	e7cb      	b.n	8008e92 <_free_r+0x22>
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000620 	.word	0x20000620

08008f00 <sbrk_aligned>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	4e0f      	ldr	r6, [pc, #60]	@ (8008f40 <sbrk_aligned+0x40>)
 8008f04:	460c      	mov	r4, r1
 8008f06:	6831      	ldr	r1, [r6, #0]
 8008f08:	4605      	mov	r5, r0
 8008f0a:	b911      	cbnz	r1, 8008f12 <sbrk_aligned+0x12>
 8008f0c:	f000 fcd4 	bl	80098b8 <_sbrk_r>
 8008f10:	6030      	str	r0, [r6, #0]
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 fccf 	bl	80098b8 <_sbrk_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d103      	bne.n	8008f26 <sbrk_aligned+0x26>
 8008f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f22:	4620      	mov	r0, r4
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
 8008f26:	1cc4      	adds	r4, r0, #3
 8008f28:	f024 0403 	bic.w	r4, r4, #3
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d0f8      	beq.n	8008f22 <sbrk_aligned+0x22>
 8008f30:	1a21      	subs	r1, r4, r0
 8008f32:	4628      	mov	r0, r5
 8008f34:	f000 fcc0 	bl	80098b8 <_sbrk_r>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d1f2      	bne.n	8008f22 <sbrk_aligned+0x22>
 8008f3c:	e7ef      	b.n	8008f1e <sbrk_aligned+0x1e>
 8008f3e:	bf00      	nop
 8008f40:	2000061c 	.word	0x2000061c

08008f44 <_malloc_r>:
 8008f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f48:	1ccd      	adds	r5, r1, #3
 8008f4a:	f025 0503 	bic.w	r5, r5, #3
 8008f4e:	3508      	adds	r5, #8
 8008f50:	2d0c      	cmp	r5, #12
 8008f52:	bf38      	it	cc
 8008f54:	250c      	movcc	r5, #12
 8008f56:	2d00      	cmp	r5, #0
 8008f58:	4606      	mov	r6, r0
 8008f5a:	db01      	blt.n	8008f60 <_malloc_r+0x1c>
 8008f5c:	42a9      	cmp	r1, r5
 8008f5e:	d904      	bls.n	8008f6a <_malloc_r+0x26>
 8008f60:	230c      	movs	r3, #12
 8008f62:	6033      	str	r3, [r6, #0]
 8008f64:	2000      	movs	r0, #0
 8008f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009040 <_malloc_r+0xfc>
 8008f6e:	f000 f869 	bl	8009044 <__malloc_lock>
 8008f72:	f8d8 3000 	ldr.w	r3, [r8]
 8008f76:	461c      	mov	r4, r3
 8008f78:	bb44      	cbnz	r4, 8008fcc <_malloc_r+0x88>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff ffbf 	bl	8008f00 <sbrk_aligned>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	4604      	mov	r4, r0
 8008f86:	d158      	bne.n	800903a <_malloc_r+0xf6>
 8008f88:	f8d8 4000 	ldr.w	r4, [r8]
 8008f8c:	4627      	mov	r7, r4
 8008f8e:	2f00      	cmp	r7, #0
 8008f90:	d143      	bne.n	800901a <_malloc_r+0xd6>
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	d04b      	beq.n	800902e <_malloc_r+0xea>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4639      	mov	r1, r7
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	eb04 0903 	add.w	r9, r4, r3
 8008fa0:	f000 fc8a 	bl	80098b8 <_sbrk_r>
 8008fa4:	4581      	cmp	r9, r0
 8008fa6:	d142      	bne.n	800902e <_malloc_r+0xea>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	4630      	mov	r0, r6
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7ff ffa6 	bl	8008f00 <sbrk_aligned>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d03a      	beq.n	800902e <_malloc_r+0xea>
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	442b      	add	r3, r5
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	bb62      	cbnz	r2, 8009020 <_malloc_r+0xdc>
 8008fc6:	f8c8 7000 	str.w	r7, [r8]
 8008fca:	e00f      	b.n	8008fec <_malloc_r+0xa8>
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	1b52      	subs	r2, r2, r5
 8008fd0:	d420      	bmi.n	8009014 <_malloc_r+0xd0>
 8008fd2:	2a0b      	cmp	r2, #11
 8008fd4:	d917      	bls.n	8009006 <_malloc_r+0xc2>
 8008fd6:	1961      	adds	r1, r4, r5
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	6025      	str	r5, [r4, #0]
 8008fdc:	bf18      	it	ne
 8008fde:	6059      	strne	r1, [r3, #4]
 8008fe0:	6863      	ldr	r3, [r4, #4]
 8008fe2:	bf08      	it	eq
 8008fe4:	f8c8 1000 	streq.w	r1, [r8]
 8008fe8:	5162      	str	r2, [r4, r5]
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 f82f 	bl	8009050 <__malloc_unlock>
 8008ff2:	f104 000b 	add.w	r0, r4, #11
 8008ff6:	1d23      	adds	r3, r4, #4
 8008ff8:	f020 0007 	bic.w	r0, r0, #7
 8008ffc:	1ac2      	subs	r2, r0, r3
 8008ffe:	bf1c      	itt	ne
 8009000:	1a1b      	subne	r3, r3, r0
 8009002:	50a3      	strne	r3, [r4, r2]
 8009004:	e7af      	b.n	8008f66 <_malloc_r+0x22>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	bf0c      	ite	eq
 800900c:	f8c8 2000 	streq.w	r2, [r8]
 8009010:	605a      	strne	r2, [r3, #4]
 8009012:	e7eb      	b.n	8008fec <_malloc_r+0xa8>
 8009014:	4623      	mov	r3, r4
 8009016:	6864      	ldr	r4, [r4, #4]
 8009018:	e7ae      	b.n	8008f78 <_malloc_r+0x34>
 800901a:	463c      	mov	r4, r7
 800901c:	687f      	ldr	r7, [r7, #4]
 800901e:	e7b6      	b.n	8008f8e <_malloc_r+0x4a>
 8009020:	461a      	mov	r2, r3
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	42a3      	cmp	r3, r4
 8009026:	d1fb      	bne.n	8009020 <_malloc_r+0xdc>
 8009028:	2300      	movs	r3, #0
 800902a:	6053      	str	r3, [r2, #4]
 800902c:	e7de      	b.n	8008fec <_malloc_r+0xa8>
 800902e:	230c      	movs	r3, #12
 8009030:	4630      	mov	r0, r6
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	f000 f80c 	bl	8009050 <__malloc_unlock>
 8009038:	e794      	b.n	8008f64 <_malloc_r+0x20>
 800903a:	6005      	str	r5, [r0, #0]
 800903c:	e7d6      	b.n	8008fec <_malloc_r+0xa8>
 800903e:	bf00      	nop
 8009040:	20000620 	.word	0x20000620

08009044 <__malloc_lock>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__malloc_lock+0x8>)
 8009046:	f7ff bf10 	b.w	8008e6a <__retarget_lock_acquire_recursive>
 800904a:	bf00      	nop
 800904c:	20000618 	.word	0x20000618

08009050 <__malloc_unlock>:
 8009050:	4801      	ldr	r0, [pc, #4]	@ (8009058 <__malloc_unlock+0x8>)
 8009052:	f7ff bf0b 	b.w	8008e6c <__retarget_lock_release_recursive>
 8009056:	bf00      	nop
 8009058:	20000618 	.word	0x20000618

0800905c <__ssputs_r>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	461f      	mov	r7, r3
 8009062:	688e      	ldr	r6, [r1, #8]
 8009064:	4682      	mov	sl, r0
 8009066:	42be      	cmp	r6, r7
 8009068:	460c      	mov	r4, r1
 800906a:	4690      	mov	r8, r2
 800906c:	680b      	ldr	r3, [r1, #0]
 800906e:	d82d      	bhi.n	80090cc <__ssputs_r+0x70>
 8009070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009078:	d026      	beq.n	80090c8 <__ssputs_r+0x6c>
 800907a:	6965      	ldr	r5, [r4, #20]
 800907c:	6909      	ldr	r1, [r1, #16]
 800907e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009082:	eba3 0901 	sub.w	r9, r3, r1
 8009086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800908a:	1c7b      	adds	r3, r7, #1
 800908c:	444b      	add	r3, r9
 800908e:	106d      	asrs	r5, r5, #1
 8009090:	429d      	cmp	r5, r3
 8009092:	bf38      	it	cc
 8009094:	461d      	movcc	r5, r3
 8009096:	0553      	lsls	r3, r2, #21
 8009098:	d527      	bpl.n	80090ea <__ssputs_r+0x8e>
 800909a:	4629      	mov	r1, r5
 800909c:	f7ff ff52 	bl	8008f44 <_malloc_r>
 80090a0:	4606      	mov	r6, r0
 80090a2:	b360      	cbz	r0, 80090fe <__ssputs_r+0xa2>
 80090a4:	464a      	mov	r2, r9
 80090a6:	6921      	ldr	r1, [r4, #16]
 80090a8:	f000 fc24 	bl	80098f4 <memcpy>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	6126      	str	r6, [r4, #16]
 80090ba:	444e      	add	r6, r9
 80090bc:	6026      	str	r6, [r4, #0]
 80090be:	463e      	mov	r6, r7
 80090c0:	6165      	str	r5, [r4, #20]
 80090c2:	eba5 0509 	sub.w	r5, r5, r9
 80090c6:	60a5      	str	r5, [r4, #8]
 80090c8:	42be      	cmp	r6, r7
 80090ca:	d900      	bls.n	80090ce <__ssputs_r+0x72>
 80090cc:	463e      	mov	r6, r7
 80090ce:	4632      	mov	r2, r6
 80090d0:	4641      	mov	r1, r8
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	f000 fbb3 	bl	800983e <memmove>
 80090d8:	2000      	movs	r0, #0
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	1b9b      	subs	r3, r3, r6
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	4433      	add	r3, r6
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	462a      	mov	r2, r5
 80090ec:	f000 fc10 	bl	8009910 <_realloc_r>
 80090f0:	4606      	mov	r6, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1e0      	bne.n	80090b8 <__ssputs_r+0x5c>
 80090f6:	4650      	mov	r0, sl
 80090f8:	6921      	ldr	r1, [r4, #16]
 80090fa:	f7ff feb9 	bl	8008e70 <_free_r>
 80090fe:	230c      	movs	r3, #12
 8009100:	f8ca 3000 	str.w	r3, [sl]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	e7e9      	b.n	80090e6 <__ssputs_r+0x8a>
	...

08009114 <_svfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4698      	mov	r8, r3
 800911a:	898b      	ldrh	r3, [r1, #12]
 800911c:	4607      	mov	r7, r0
 800911e:	061b      	lsls	r3, r3, #24
 8009120:	460d      	mov	r5, r1
 8009122:	4614      	mov	r4, r2
 8009124:	b09d      	sub	sp, #116	@ 0x74
 8009126:	d510      	bpl.n	800914a <_svfiprintf_r+0x36>
 8009128:	690b      	ldr	r3, [r1, #16]
 800912a:	b973      	cbnz	r3, 800914a <_svfiprintf_r+0x36>
 800912c:	2140      	movs	r1, #64	@ 0x40
 800912e:	f7ff ff09 	bl	8008f44 <_malloc_r>
 8009132:	6028      	str	r0, [r5, #0]
 8009134:	6128      	str	r0, [r5, #16]
 8009136:	b930      	cbnz	r0, 8009146 <_svfiprintf_r+0x32>
 8009138:	230c      	movs	r3, #12
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	b01d      	add	sp, #116	@ 0x74
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	2340      	movs	r3, #64	@ 0x40
 8009148:	616b      	str	r3, [r5, #20]
 800914a:	2300      	movs	r3, #0
 800914c:	9309      	str	r3, [sp, #36]	@ 0x24
 800914e:	2320      	movs	r3, #32
 8009150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009154:	2330      	movs	r3, #48	@ 0x30
 8009156:	f04f 0901 	mov.w	r9, #1
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80092f8 <_svfiprintf_r+0x1e4>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009166:	4623      	mov	r3, r4
 8009168:	469a      	mov	sl, r3
 800916a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916e:	b10a      	cbz	r2, 8009174 <_svfiprintf_r+0x60>
 8009170:	2a25      	cmp	r2, #37	@ 0x25
 8009172:	d1f9      	bne.n	8009168 <_svfiprintf_r+0x54>
 8009174:	ebba 0b04 	subs.w	fp, sl, r4
 8009178:	d00b      	beq.n	8009192 <_svfiprintf_r+0x7e>
 800917a:	465b      	mov	r3, fp
 800917c:	4622      	mov	r2, r4
 800917e:	4629      	mov	r1, r5
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ff6b 	bl	800905c <__ssputs_r>
 8009186:	3001      	adds	r0, #1
 8009188:	f000 80a7 	beq.w	80092da <_svfiprintf_r+0x1c6>
 800918c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800918e:	445a      	add	r2, fp
 8009190:	9209      	str	r2, [sp, #36]	@ 0x24
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 809f 	beq.w	80092da <_svfiprintf_r+0x1c6>
 800919c:	2300      	movs	r3, #0
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a6:	f10a 0a01 	add.w	sl, sl, #1
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091b4:	4654      	mov	r4, sl
 80091b6:	2205      	movs	r2, #5
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	484e      	ldr	r0, [pc, #312]	@ (80092f8 <_svfiprintf_r+0x1e4>)
 80091be:	f000 fb8b 	bl	80098d8 <memchr>
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	b9d8      	cbnz	r0, 80091fe <_svfiprintf_r+0xea>
 80091c6:	06d0      	lsls	r0, r2, #27
 80091c8:	bf44      	itt	mi
 80091ca:	2320      	movmi	r3, #32
 80091cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d0:	0711      	lsls	r1, r2, #28
 80091d2:	bf44      	itt	mi
 80091d4:	232b      	movmi	r3, #43	@ 0x2b
 80091d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e0:	d015      	beq.n	800920e <_svfiprintf_r+0xfa>
 80091e2:	4654      	mov	r4, sl
 80091e4:	2000      	movs	r0, #0
 80091e6:	f04f 0c0a 	mov.w	ip, #10
 80091ea:	9a07      	ldr	r2, [sp, #28]
 80091ec:	4621      	mov	r1, r4
 80091ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f2:	3b30      	subs	r3, #48	@ 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d94b      	bls.n	8009290 <_svfiprintf_r+0x17c>
 80091f8:	b1b0      	cbz	r0, 8009228 <_svfiprintf_r+0x114>
 80091fa:	9207      	str	r2, [sp, #28]
 80091fc:	e014      	b.n	8009228 <_svfiprintf_r+0x114>
 80091fe:	eba0 0308 	sub.w	r3, r0, r8
 8009202:	fa09 f303 	lsl.w	r3, r9, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	46a2      	mov	sl, r4
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	e7d2      	b.n	80091b4 <_svfiprintf_r+0xa0>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9103      	str	r1, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfbb      	ittet	lt
 800921a:	425b      	neglt	r3, r3
 800921c:	f042 0202 	orrlt.w	r2, r2, #2
 8009220:	9307      	strge	r3, [sp, #28]
 8009222:	9307      	strlt	r3, [sp, #28]
 8009224:	bfb8      	it	lt
 8009226:	9204      	strlt	r2, [sp, #16]
 8009228:	7823      	ldrb	r3, [r4, #0]
 800922a:	2b2e      	cmp	r3, #46	@ 0x2e
 800922c:	d10a      	bne.n	8009244 <_svfiprintf_r+0x130>
 800922e:	7863      	ldrb	r3, [r4, #1]
 8009230:	2b2a      	cmp	r3, #42	@ 0x2a
 8009232:	d132      	bne.n	800929a <_svfiprintf_r+0x186>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	3402      	adds	r4, #2
 8009238:	1d1a      	adds	r2, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9203      	str	r2, [sp, #12]
 800923e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80092fc <_svfiprintf_r+0x1e8>
 8009248:	2203      	movs	r2, #3
 800924a:	4650      	mov	r0, sl
 800924c:	7821      	ldrb	r1, [r4, #0]
 800924e:	f000 fb43 	bl	80098d8 <memchr>
 8009252:	b138      	cbz	r0, 8009264 <_svfiprintf_r+0x150>
 8009254:	2240      	movs	r2, #64	@ 0x40
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	eba0 000a 	sub.w	r0, r0, sl
 800925c:	4082      	lsls	r2, r0
 800925e:	4313      	orrs	r3, r2
 8009260:	3401      	adds	r4, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009268:	2206      	movs	r2, #6
 800926a:	4825      	ldr	r0, [pc, #148]	@ (8009300 <_svfiprintf_r+0x1ec>)
 800926c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009270:	f000 fb32 	bl	80098d8 <memchr>
 8009274:	2800      	cmp	r0, #0
 8009276:	d036      	beq.n	80092e6 <_svfiprintf_r+0x1d2>
 8009278:	4b22      	ldr	r3, [pc, #136]	@ (8009304 <_svfiprintf_r+0x1f0>)
 800927a:	bb1b      	cbnz	r3, 80092c4 <_svfiprintf_r+0x1b0>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	3307      	adds	r3, #7
 8009280:	f023 0307 	bic.w	r3, r3, #7
 8009284:	3308      	adds	r3, #8
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928a:	4433      	add	r3, r6
 800928c:	9309      	str	r3, [sp, #36]	@ 0x24
 800928e:	e76a      	b.n	8009166 <_svfiprintf_r+0x52>
 8009290:	460c      	mov	r4, r1
 8009292:	2001      	movs	r0, #1
 8009294:	fb0c 3202 	mla	r2, ip, r2, r3
 8009298:	e7a8      	b.n	80091ec <_svfiprintf_r+0xd8>
 800929a:	2300      	movs	r3, #0
 800929c:	f04f 0c0a 	mov.w	ip, #10
 80092a0:	4619      	mov	r1, r3
 80092a2:	3401      	adds	r4, #1
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	4620      	mov	r0, r4
 80092a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ac:	3a30      	subs	r2, #48	@ 0x30
 80092ae:	2a09      	cmp	r2, #9
 80092b0:	d903      	bls.n	80092ba <_svfiprintf_r+0x1a6>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0c6      	beq.n	8009244 <_svfiprintf_r+0x130>
 80092b6:	9105      	str	r1, [sp, #20]
 80092b8:	e7c4      	b.n	8009244 <_svfiprintf_r+0x130>
 80092ba:	4604      	mov	r4, r0
 80092bc:	2301      	movs	r3, #1
 80092be:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c2:	e7f0      	b.n	80092a6 <_svfiprintf_r+0x192>
 80092c4:	ab03      	add	r3, sp, #12
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	462a      	mov	r2, r5
 80092ca:	4638      	mov	r0, r7
 80092cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <_svfiprintf_r+0x1f4>)
 80092ce:	a904      	add	r1, sp, #16
 80092d0:	f3af 8000 	nop.w
 80092d4:	1c42      	adds	r2, r0, #1
 80092d6:	4606      	mov	r6, r0
 80092d8:	d1d6      	bne.n	8009288 <_svfiprintf_r+0x174>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	065b      	lsls	r3, r3, #25
 80092de:	f53f af2d 	bmi.w	800913c <_svfiprintf_r+0x28>
 80092e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092e4:	e72c      	b.n	8009140 <_svfiprintf_r+0x2c>
 80092e6:	ab03      	add	r3, sp, #12
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	462a      	mov	r2, r5
 80092ec:	4638      	mov	r0, r7
 80092ee:	4b06      	ldr	r3, [pc, #24]	@ (8009308 <_svfiprintf_r+0x1f4>)
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	f000 f87d 	bl	80093f0 <_printf_i>
 80092f6:	e7ed      	b.n	80092d4 <_svfiprintf_r+0x1c0>
 80092f8:	08009e7a 	.word	0x08009e7a
 80092fc:	08009e80 	.word	0x08009e80
 8009300:	08009e84 	.word	0x08009e84
 8009304:	00000000 	.word	0x00000000
 8009308:	0800905d 	.word	0x0800905d

0800930c <_printf_common>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	4616      	mov	r6, r2
 8009312:	4698      	mov	r8, r3
 8009314:	688a      	ldr	r2, [r1, #8]
 8009316:	690b      	ldr	r3, [r1, #16]
 8009318:	4607      	mov	r7, r0
 800931a:	4293      	cmp	r3, r2
 800931c:	bfb8      	it	lt
 800931e:	4613      	movlt	r3, r2
 8009320:	6033      	str	r3, [r6, #0]
 8009322:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009326:	460c      	mov	r4, r1
 8009328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800932c:	b10a      	cbz	r2, 8009332 <_printf_common+0x26>
 800932e:	3301      	adds	r3, #1
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	0699      	lsls	r1, r3, #26
 8009336:	bf42      	ittt	mi
 8009338:	6833      	ldrmi	r3, [r6, #0]
 800933a:	3302      	addmi	r3, #2
 800933c:	6033      	strmi	r3, [r6, #0]
 800933e:	6825      	ldr	r5, [r4, #0]
 8009340:	f015 0506 	ands.w	r5, r5, #6
 8009344:	d106      	bne.n	8009354 <_printf_common+0x48>
 8009346:	f104 0a19 	add.w	sl, r4, #25
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	42ab      	cmp	r3, r5
 8009352:	dc2b      	bgt.n	80093ac <_printf_common+0xa0>
 8009354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	3b00      	subs	r3, #0
 800935c:	bf18      	it	ne
 800935e:	2301      	movne	r3, #1
 8009360:	0692      	lsls	r2, r2, #26
 8009362:	d430      	bmi.n	80093c6 <_printf_common+0xba>
 8009364:	4641      	mov	r1, r8
 8009366:	4638      	mov	r0, r7
 8009368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800936c:	47c8      	blx	r9
 800936e:	3001      	adds	r0, #1
 8009370:	d023      	beq.n	80093ba <_printf_common+0xae>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	f003 0306 	and.w	r3, r3, #6
 800937a:	2b04      	cmp	r3, #4
 800937c:	bf14      	ite	ne
 800937e:	2500      	movne	r5, #0
 8009380:	6833      	ldreq	r3, [r6, #0]
 8009382:	f04f 0600 	mov.w	r6, #0
 8009386:	bf08      	it	eq
 8009388:	68e5      	ldreq	r5, [r4, #12]
 800938a:	f104 041a 	add.w	r4, r4, #26
 800938e:	bf08      	it	eq
 8009390:	1aed      	subeq	r5, r5, r3
 8009392:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009396:	bf08      	it	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	4293      	cmp	r3, r2
 800939e:	bfc4      	itt	gt
 80093a0:	1a9b      	subgt	r3, r3, r2
 80093a2:	18ed      	addgt	r5, r5, r3
 80093a4:	42b5      	cmp	r5, r6
 80093a6:	d11a      	bne.n	80093de <_printf_common+0xd2>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e008      	b.n	80093be <_printf_common+0xb2>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4652      	mov	r2, sl
 80093b0:	4641      	mov	r1, r8
 80093b2:	4638      	mov	r0, r7
 80093b4:	47c8      	blx	r9
 80093b6:	3001      	adds	r0, #1
 80093b8:	d103      	bne.n	80093c2 <_printf_common+0xb6>
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	3501      	adds	r5, #1
 80093c4:	e7c1      	b.n	800934a <_printf_common+0x3e>
 80093c6:	2030      	movs	r0, #48	@ 0x30
 80093c8:	18e1      	adds	r1, r4, r3
 80093ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093d4:	4422      	add	r2, r4
 80093d6:	3302      	adds	r3, #2
 80093d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093dc:	e7c2      	b.n	8009364 <_printf_common+0x58>
 80093de:	2301      	movs	r3, #1
 80093e0:	4622      	mov	r2, r4
 80093e2:	4641      	mov	r1, r8
 80093e4:	4638      	mov	r0, r7
 80093e6:	47c8      	blx	r9
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0e6      	beq.n	80093ba <_printf_common+0xae>
 80093ec:	3601      	adds	r6, #1
 80093ee:	e7d9      	b.n	80093a4 <_printf_common+0x98>

080093f0 <_printf_i>:
 80093f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	7e0f      	ldrb	r7, [r1, #24]
 80093f6:	4691      	mov	r9, r2
 80093f8:	2f78      	cmp	r7, #120	@ 0x78
 80093fa:	4680      	mov	r8, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	469a      	mov	sl, r3
 8009400:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009406:	d807      	bhi.n	8009418 <_printf_i+0x28>
 8009408:	2f62      	cmp	r7, #98	@ 0x62
 800940a:	d80a      	bhi.n	8009422 <_printf_i+0x32>
 800940c:	2f00      	cmp	r7, #0
 800940e:	f000 80d1 	beq.w	80095b4 <_printf_i+0x1c4>
 8009412:	2f58      	cmp	r7, #88	@ 0x58
 8009414:	f000 80b8 	beq.w	8009588 <_printf_i+0x198>
 8009418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800941c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009420:	e03a      	b.n	8009498 <_printf_i+0xa8>
 8009422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009426:	2b15      	cmp	r3, #21
 8009428:	d8f6      	bhi.n	8009418 <_printf_i+0x28>
 800942a:	a101      	add	r1, pc, #4	@ (adr r1, 8009430 <_printf_i+0x40>)
 800942c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009430:	08009489 	.word	0x08009489
 8009434:	0800949d 	.word	0x0800949d
 8009438:	08009419 	.word	0x08009419
 800943c:	08009419 	.word	0x08009419
 8009440:	08009419 	.word	0x08009419
 8009444:	08009419 	.word	0x08009419
 8009448:	0800949d 	.word	0x0800949d
 800944c:	08009419 	.word	0x08009419
 8009450:	08009419 	.word	0x08009419
 8009454:	08009419 	.word	0x08009419
 8009458:	08009419 	.word	0x08009419
 800945c:	0800959b 	.word	0x0800959b
 8009460:	080094c7 	.word	0x080094c7
 8009464:	08009555 	.word	0x08009555
 8009468:	08009419 	.word	0x08009419
 800946c:	08009419 	.word	0x08009419
 8009470:	080095bd 	.word	0x080095bd
 8009474:	08009419 	.word	0x08009419
 8009478:	080094c7 	.word	0x080094c7
 800947c:	08009419 	.word	0x08009419
 8009480:	08009419 	.word	0x08009419
 8009484:	0800955d 	.word	0x0800955d
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	1d1a      	adds	r2, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6032      	str	r2, [r6, #0]
 8009490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009498:	2301      	movs	r3, #1
 800949a:	e09c      	b.n	80095d6 <_printf_i+0x1e6>
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	6031      	str	r1, [r6, #0]
 80094a4:	0606      	lsls	r6, r0, #24
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0xbc>
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	e003      	b.n	80094b4 <_printf_i+0xc4>
 80094ac:	0645      	lsls	r5, r0, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0xb8>
 80094b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xd0>
 80094b8:	232d      	movs	r3, #45	@ 0x2d
 80094ba:	426d      	negs	r5, r5
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c0:	230a      	movs	r3, #10
 80094c2:	4858      	ldr	r0, [pc, #352]	@ (8009624 <_printf_i+0x234>)
 80094c4:	e011      	b.n	80094ea <_printf_i+0xfa>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	6833      	ldr	r3, [r6, #0]
 80094ca:	0608      	lsls	r0, r1, #24
 80094cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80094d0:	d402      	bmi.n	80094d8 <_printf_i+0xe8>
 80094d2:	0649      	lsls	r1, r1, #25
 80094d4:	bf48      	it	mi
 80094d6:	b2ad      	uxthmi	r5, r5
 80094d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	bf14      	ite	ne
 80094de:	230a      	movne	r3, #10
 80094e0:	2308      	moveq	r3, #8
 80094e2:	4850      	ldr	r0, [pc, #320]	@ (8009624 <_printf_i+0x234>)
 80094e4:	2100      	movs	r1, #0
 80094e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094ea:	6866      	ldr	r6, [r4, #4]
 80094ec:	2e00      	cmp	r6, #0
 80094ee:	60a6      	str	r6, [r4, #8]
 80094f0:	db05      	blt.n	80094fe <_printf_i+0x10e>
 80094f2:	6821      	ldr	r1, [r4, #0]
 80094f4:	432e      	orrs	r6, r5
 80094f6:	f021 0104 	bic.w	r1, r1, #4
 80094fa:	6021      	str	r1, [r4, #0]
 80094fc:	d04b      	beq.n	8009596 <_printf_i+0x1a6>
 80094fe:	4616      	mov	r6, r2
 8009500:	fbb5 f1f3 	udiv	r1, r5, r3
 8009504:	fb03 5711 	mls	r7, r3, r1, r5
 8009508:	5dc7      	ldrb	r7, [r0, r7]
 800950a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800950e:	462f      	mov	r7, r5
 8009510:	42bb      	cmp	r3, r7
 8009512:	460d      	mov	r5, r1
 8009514:	d9f4      	bls.n	8009500 <_printf_i+0x110>
 8009516:	2b08      	cmp	r3, #8
 8009518:	d10b      	bne.n	8009532 <_printf_i+0x142>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	07df      	lsls	r7, r3, #31
 800951e:	d508      	bpl.n	8009532 <_printf_i+0x142>
 8009520:	6923      	ldr	r3, [r4, #16]
 8009522:	6861      	ldr	r1, [r4, #4]
 8009524:	4299      	cmp	r1, r3
 8009526:	bfde      	ittt	le
 8009528:	2330      	movle	r3, #48	@ 0x30
 800952a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800952e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009532:	1b92      	subs	r2, r2, r6
 8009534:	6122      	str	r2, [r4, #16]
 8009536:	464b      	mov	r3, r9
 8009538:	4621      	mov	r1, r4
 800953a:	4640      	mov	r0, r8
 800953c:	f8cd a000 	str.w	sl, [sp]
 8009540:	aa03      	add	r2, sp, #12
 8009542:	f7ff fee3 	bl	800930c <_printf_common>
 8009546:	3001      	adds	r0, #1
 8009548:	d14a      	bne.n	80095e0 <_printf_i+0x1f0>
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	b004      	add	sp, #16
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f043 0320 	orr.w	r3, r3, #32
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	2778      	movs	r7, #120	@ 0x78
 800955e:	4832      	ldr	r0, [pc, #200]	@ (8009628 <_printf_i+0x238>)
 8009560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	6831      	ldr	r1, [r6, #0]
 8009568:	061f      	lsls	r7, r3, #24
 800956a:	f851 5b04 	ldr.w	r5, [r1], #4
 800956e:	d402      	bmi.n	8009576 <_printf_i+0x186>
 8009570:	065f      	lsls	r7, r3, #25
 8009572:	bf48      	it	mi
 8009574:	b2ad      	uxthmi	r5, r5
 8009576:	6031      	str	r1, [r6, #0]
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	bf44      	itt	mi
 800957c:	f043 0320 	orrmi.w	r3, r3, #32
 8009580:	6023      	strmi	r3, [r4, #0]
 8009582:	b11d      	cbz	r5, 800958c <_printf_i+0x19c>
 8009584:	2310      	movs	r3, #16
 8009586:	e7ad      	b.n	80094e4 <_printf_i+0xf4>
 8009588:	4826      	ldr	r0, [pc, #152]	@ (8009624 <_printf_i+0x234>)
 800958a:	e7e9      	b.n	8009560 <_printf_i+0x170>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	f023 0320 	bic.w	r3, r3, #32
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	e7f6      	b.n	8009584 <_printf_i+0x194>
 8009596:	4616      	mov	r6, r2
 8009598:	e7bd      	b.n	8009516 <_printf_i+0x126>
 800959a:	6833      	ldr	r3, [r6, #0]
 800959c:	6825      	ldr	r5, [r4, #0]
 800959e:	1d18      	adds	r0, r3, #4
 80095a0:	6961      	ldr	r1, [r4, #20]
 80095a2:	6030      	str	r0, [r6, #0]
 80095a4:	062e      	lsls	r6, r5, #24
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	d501      	bpl.n	80095ae <_printf_i+0x1be>
 80095aa:	6019      	str	r1, [r3, #0]
 80095ac:	e002      	b.n	80095b4 <_printf_i+0x1c4>
 80095ae:	0668      	lsls	r0, r5, #25
 80095b0:	d5fb      	bpl.n	80095aa <_printf_i+0x1ba>
 80095b2:	8019      	strh	r1, [r3, #0]
 80095b4:	2300      	movs	r3, #0
 80095b6:	4616      	mov	r6, r2
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	e7bc      	b.n	8009536 <_printf_i+0x146>
 80095bc:	6833      	ldr	r3, [r6, #0]
 80095be:	2100      	movs	r1, #0
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	6032      	str	r2, [r6, #0]
 80095c4:	681e      	ldr	r6, [r3, #0]
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f985 	bl	80098d8 <memchr>
 80095ce:	b108      	cbz	r0, 80095d4 <_printf_i+0x1e4>
 80095d0:	1b80      	subs	r0, r0, r6
 80095d2:	6060      	str	r0, [r4, #4]
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	6123      	str	r3, [r4, #16]
 80095d8:	2300      	movs	r3, #0
 80095da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095de:	e7aa      	b.n	8009536 <_printf_i+0x146>
 80095e0:	4632      	mov	r2, r6
 80095e2:	4649      	mov	r1, r9
 80095e4:	4640      	mov	r0, r8
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	47d0      	blx	sl
 80095ea:	3001      	adds	r0, #1
 80095ec:	d0ad      	beq.n	800954a <_printf_i+0x15a>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	079b      	lsls	r3, r3, #30
 80095f2:	d413      	bmi.n	800961c <_printf_i+0x22c>
 80095f4:	68e0      	ldr	r0, [r4, #12]
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	4298      	cmp	r0, r3
 80095fa:	bfb8      	it	lt
 80095fc:	4618      	movlt	r0, r3
 80095fe:	e7a6      	b.n	800954e <_printf_i+0x15e>
 8009600:	2301      	movs	r3, #1
 8009602:	4632      	mov	r2, r6
 8009604:	4649      	mov	r1, r9
 8009606:	4640      	mov	r0, r8
 8009608:	47d0      	blx	sl
 800960a:	3001      	adds	r0, #1
 800960c:	d09d      	beq.n	800954a <_printf_i+0x15a>
 800960e:	3501      	adds	r5, #1
 8009610:	68e3      	ldr	r3, [r4, #12]
 8009612:	9903      	ldr	r1, [sp, #12]
 8009614:	1a5b      	subs	r3, r3, r1
 8009616:	42ab      	cmp	r3, r5
 8009618:	dcf2      	bgt.n	8009600 <_printf_i+0x210>
 800961a:	e7eb      	b.n	80095f4 <_printf_i+0x204>
 800961c:	2500      	movs	r5, #0
 800961e:	f104 0619 	add.w	r6, r4, #25
 8009622:	e7f5      	b.n	8009610 <_printf_i+0x220>
 8009624:	08009e8b 	.word	0x08009e8b
 8009628:	08009e9c 	.word	0x08009e9c

0800962c <__sflush_r>:
 800962c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	0716      	lsls	r6, r2, #28
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	d454      	bmi.n	80096e4 <__sflush_r+0xb8>
 800963a:	684b      	ldr	r3, [r1, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc02      	bgt.n	8009646 <__sflush_r+0x1a>
 8009640:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009642:	2b00      	cmp	r3, #0
 8009644:	dd48      	ble.n	80096d8 <__sflush_r+0xac>
 8009646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009648:	2e00      	cmp	r6, #0
 800964a:	d045      	beq.n	80096d8 <__sflush_r+0xac>
 800964c:	2300      	movs	r3, #0
 800964e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009652:	682f      	ldr	r7, [r5, #0]
 8009654:	6a21      	ldr	r1, [r4, #32]
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	d030      	beq.n	80096bc <__sflush_r+0x90>
 800965a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	0759      	lsls	r1, r3, #29
 8009660:	d505      	bpl.n	800966e <__sflush_r+0x42>
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009668:	b10b      	cbz	r3, 800966e <__sflush_r+0x42>
 800966a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800966c:	1ad2      	subs	r2, r2, r3
 800966e:	2300      	movs	r3, #0
 8009670:	4628      	mov	r0, r5
 8009672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009674:	6a21      	ldr	r1, [r4, #32]
 8009676:	47b0      	blx	r6
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	d106      	bne.n	800968c <__sflush_r+0x60>
 800967e:	6829      	ldr	r1, [r5, #0]
 8009680:	291d      	cmp	r1, #29
 8009682:	d82b      	bhi.n	80096dc <__sflush_r+0xb0>
 8009684:	4a28      	ldr	r2, [pc, #160]	@ (8009728 <__sflush_r+0xfc>)
 8009686:	40ca      	lsrs	r2, r1
 8009688:	07d6      	lsls	r6, r2, #31
 800968a:	d527      	bpl.n	80096dc <__sflush_r+0xb0>
 800968c:	2200      	movs	r2, #0
 800968e:	6062      	str	r2, [r4, #4]
 8009690:	6922      	ldr	r2, [r4, #16]
 8009692:	04d9      	lsls	r1, r3, #19
 8009694:	6022      	str	r2, [r4, #0]
 8009696:	d504      	bpl.n	80096a2 <__sflush_r+0x76>
 8009698:	1c42      	adds	r2, r0, #1
 800969a:	d101      	bne.n	80096a0 <__sflush_r+0x74>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b903      	cbnz	r3, 80096a2 <__sflush_r+0x76>
 80096a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80096a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096a4:	602f      	str	r7, [r5, #0]
 80096a6:	b1b9      	cbz	r1, 80096d8 <__sflush_r+0xac>
 80096a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096ac:	4299      	cmp	r1, r3
 80096ae:	d002      	beq.n	80096b6 <__sflush_r+0x8a>
 80096b0:	4628      	mov	r0, r5
 80096b2:	f7ff fbdd 	bl	8008e70 <_free_r>
 80096b6:	2300      	movs	r3, #0
 80096b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096ba:	e00d      	b.n	80096d8 <__sflush_r+0xac>
 80096bc:	2301      	movs	r3, #1
 80096be:	4628      	mov	r0, r5
 80096c0:	47b0      	blx	r6
 80096c2:	4602      	mov	r2, r0
 80096c4:	1c50      	adds	r0, r2, #1
 80096c6:	d1c9      	bne.n	800965c <__sflush_r+0x30>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0c6      	beq.n	800965c <__sflush_r+0x30>
 80096ce:	2b1d      	cmp	r3, #29
 80096d0:	d001      	beq.n	80096d6 <__sflush_r+0xaa>
 80096d2:	2b16      	cmp	r3, #22
 80096d4:	d11d      	bne.n	8009712 <__sflush_r+0xe6>
 80096d6:	602f      	str	r7, [r5, #0]
 80096d8:	2000      	movs	r0, #0
 80096da:	e021      	b.n	8009720 <__sflush_r+0xf4>
 80096dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e0:	b21b      	sxth	r3, r3
 80096e2:	e01a      	b.n	800971a <__sflush_r+0xee>
 80096e4:	690f      	ldr	r7, [r1, #16]
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	d0f6      	beq.n	80096d8 <__sflush_r+0xac>
 80096ea:	0793      	lsls	r3, r2, #30
 80096ec:	bf18      	it	ne
 80096ee:	2300      	movne	r3, #0
 80096f0:	680e      	ldr	r6, [r1, #0]
 80096f2:	bf08      	it	eq
 80096f4:	694b      	ldreq	r3, [r1, #20]
 80096f6:	1bf6      	subs	r6, r6, r7
 80096f8:	600f      	str	r7, [r1, #0]
 80096fa:	608b      	str	r3, [r1, #8]
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	ddeb      	ble.n	80096d8 <__sflush_r+0xac>
 8009700:	4633      	mov	r3, r6
 8009702:	463a      	mov	r2, r7
 8009704:	4628      	mov	r0, r5
 8009706:	6a21      	ldr	r1, [r4, #32]
 8009708:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800970c:	47e0      	blx	ip
 800970e:	2800      	cmp	r0, #0
 8009710:	dc07      	bgt.n	8009722 <__sflush_r+0xf6>
 8009712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	81a3      	strh	r3, [r4, #12]
 8009720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009722:	4407      	add	r7, r0
 8009724:	1a36      	subs	r6, r6, r0
 8009726:	e7e9      	b.n	80096fc <__sflush_r+0xd0>
 8009728:	20400001 	.word	0x20400001

0800972c <_fflush_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	690b      	ldr	r3, [r1, #16]
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	b913      	cbnz	r3, 800973c <_fflush_r+0x10>
 8009736:	2500      	movs	r5, #0
 8009738:	4628      	mov	r0, r5
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	b118      	cbz	r0, 8009746 <_fflush_r+0x1a>
 800973e:	6a03      	ldr	r3, [r0, #32]
 8009740:	b90b      	cbnz	r3, 8009746 <_fflush_r+0x1a>
 8009742:	f7ff f951 	bl	80089e8 <__sinit>
 8009746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0f3      	beq.n	8009736 <_fflush_r+0xa>
 800974e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009750:	07d0      	lsls	r0, r2, #31
 8009752:	d404      	bmi.n	800975e <_fflush_r+0x32>
 8009754:	0599      	lsls	r1, r3, #22
 8009756:	d402      	bmi.n	800975e <_fflush_r+0x32>
 8009758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800975a:	f7ff fb86 	bl	8008e6a <__retarget_lock_acquire_recursive>
 800975e:	4628      	mov	r0, r5
 8009760:	4621      	mov	r1, r4
 8009762:	f7ff ff63 	bl	800962c <__sflush_r>
 8009766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009768:	4605      	mov	r5, r0
 800976a:	07da      	lsls	r2, r3, #31
 800976c:	d4e4      	bmi.n	8009738 <_fflush_r+0xc>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	059b      	lsls	r3, r3, #22
 8009772:	d4e1      	bmi.n	8009738 <_fflush_r+0xc>
 8009774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009776:	f7ff fb79 	bl	8008e6c <__retarget_lock_release_recursive>
 800977a:	e7dd      	b.n	8009738 <_fflush_r+0xc>

0800977c <__swhatbuf_r>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	460c      	mov	r4, r1
 8009780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009784:	4615      	mov	r5, r2
 8009786:	2900      	cmp	r1, #0
 8009788:	461e      	mov	r6, r3
 800978a:	b096      	sub	sp, #88	@ 0x58
 800978c:	da0c      	bge.n	80097a8 <__swhatbuf_r+0x2c>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	2100      	movs	r1, #0
 8009792:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009796:	bf14      	ite	ne
 8009798:	2340      	movne	r3, #64	@ 0x40
 800979a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800979e:	2000      	movs	r0, #0
 80097a0:	6031      	str	r1, [r6, #0]
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	b016      	add	sp, #88	@ 0x58
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	466a      	mov	r2, sp
 80097aa:	f000 f863 	bl	8009874 <_fstat_r>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dbed      	blt.n	800978e <__swhatbuf_r+0x12>
 80097b2:	9901      	ldr	r1, [sp, #4]
 80097b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097bc:	4259      	negs	r1, r3
 80097be:	4159      	adcs	r1, r3
 80097c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097c4:	e7eb      	b.n	800979e <__swhatbuf_r+0x22>

080097c6 <__smakebuf_r>:
 80097c6:	898b      	ldrh	r3, [r1, #12]
 80097c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ca:	079d      	lsls	r5, r3, #30
 80097cc:	4606      	mov	r6, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	d507      	bpl.n	80097e2 <__smakebuf_r+0x1c>
 80097d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	2301      	movs	r3, #1
 80097dc:	6163      	str	r3, [r4, #20]
 80097de:	b003      	add	sp, #12
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e2:	466a      	mov	r2, sp
 80097e4:	ab01      	add	r3, sp, #4
 80097e6:	f7ff ffc9 	bl	800977c <__swhatbuf_r>
 80097ea:	9f00      	ldr	r7, [sp, #0]
 80097ec:	4605      	mov	r5, r0
 80097ee:	4639      	mov	r1, r7
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fba7 	bl	8008f44 <_malloc_r>
 80097f6:	b948      	cbnz	r0, 800980c <__smakebuf_r+0x46>
 80097f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097fc:	059a      	lsls	r2, r3, #22
 80097fe:	d4ee      	bmi.n	80097de <__smakebuf_r+0x18>
 8009800:	f023 0303 	bic.w	r3, r3, #3
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	e7e2      	b.n	80097d2 <__smakebuf_r+0xc>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	6020      	str	r0, [r4, #0]
 800981c:	b15b      	cbz	r3, 8009836 <__smakebuf_r+0x70>
 800981e:	4630      	mov	r0, r6
 8009820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009824:	f000 f838 	bl	8009898 <_isatty_r>
 8009828:	b128      	cbz	r0, 8009836 <__smakebuf_r+0x70>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	431d      	orrs	r5, r3
 800983a:	81a5      	strh	r5, [r4, #12]
 800983c:	e7cf      	b.n	80097de <__smakebuf_r+0x18>

0800983e <memmove>:
 800983e:	4288      	cmp	r0, r1
 8009840:	b510      	push	{r4, lr}
 8009842:	eb01 0402 	add.w	r4, r1, r2
 8009846:	d902      	bls.n	800984e <memmove+0x10>
 8009848:	4284      	cmp	r4, r0
 800984a:	4623      	mov	r3, r4
 800984c:	d807      	bhi.n	800985e <memmove+0x20>
 800984e:	1e43      	subs	r3, r0, #1
 8009850:	42a1      	cmp	r1, r4
 8009852:	d008      	beq.n	8009866 <memmove+0x28>
 8009854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009858:	f803 2f01 	strb.w	r2, [r3, #1]!
 800985c:	e7f8      	b.n	8009850 <memmove+0x12>
 800985e:	4601      	mov	r1, r0
 8009860:	4402      	add	r2, r0
 8009862:	428a      	cmp	r2, r1
 8009864:	d100      	bne.n	8009868 <memmove+0x2a>
 8009866:	bd10      	pop	{r4, pc}
 8009868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800986c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009870:	e7f7      	b.n	8009862 <memmove+0x24>
	...

08009874 <_fstat_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	2300      	movs	r3, #0
 8009878:	4d06      	ldr	r5, [pc, #24]	@ (8009894 <_fstat_r+0x20>)
 800987a:	4604      	mov	r4, r0
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	f7fa fb4f 	bl	8003f24 <_fstat>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	d102      	bne.n	8009890 <_fstat_r+0x1c>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	b103      	cbz	r3, 8009890 <_fstat_r+0x1c>
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	bd38      	pop	{r3, r4, r5, pc}
 8009892:	bf00      	nop
 8009894:	20000614 	.word	0x20000614

08009898 <_isatty_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	2300      	movs	r3, #0
 800989c:	4d05      	ldr	r5, [pc, #20]	@ (80098b4 <_isatty_r+0x1c>)
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	f7fa fb4d 	bl	8003f42 <_isatty>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_isatty_r+0x1a>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_isatty_r+0x1a>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20000614 	.word	0x20000614

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	2300      	movs	r3, #0
 80098bc:	4d05      	ldr	r5, [pc, #20]	@ (80098d4 <_sbrk_r+0x1c>)
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7fa fb54 	bl	8003f70 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000614 	.word	0x20000614

080098d8 <memchr>:
 80098d8:	4603      	mov	r3, r0
 80098da:	b510      	push	{r4, lr}
 80098dc:	b2c9      	uxtb	r1, r1
 80098de:	4402      	add	r2, r0
 80098e0:	4293      	cmp	r3, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	d101      	bne.n	80098ea <memchr+0x12>
 80098e6:	2000      	movs	r0, #0
 80098e8:	e003      	b.n	80098f2 <memchr+0x1a>
 80098ea:	7804      	ldrb	r4, [r0, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	428c      	cmp	r4, r1
 80098f0:	d1f6      	bne.n	80098e0 <memchr+0x8>
 80098f2:	bd10      	pop	{r4, pc}

080098f4 <memcpy>:
 80098f4:	440a      	add	r2, r1
 80098f6:	4291      	cmp	r1, r2
 80098f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098fc:	d100      	bne.n	8009900 <memcpy+0xc>
 80098fe:	4770      	bx	lr
 8009900:	b510      	push	{r4, lr}
 8009902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009906:	4291      	cmp	r1, r2
 8009908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800990c:	d1f9      	bne.n	8009902 <memcpy+0xe>
 800990e:	bd10      	pop	{r4, pc}

08009910 <_realloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	4607      	mov	r7, r0
 8009916:	4614      	mov	r4, r2
 8009918:	460d      	mov	r5, r1
 800991a:	b921      	cbnz	r1, 8009926 <_realloc_r+0x16>
 800991c:	4611      	mov	r1, r2
 800991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	f7ff bb0f 	b.w	8008f44 <_malloc_r>
 8009926:	b92a      	cbnz	r2, 8009934 <_realloc_r+0x24>
 8009928:	f7ff faa2 	bl	8008e70 <_free_r>
 800992c:	4625      	mov	r5, r4
 800992e:	4628      	mov	r0, r5
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	f000 f81a 	bl	800996c <_malloc_usable_size_r>
 8009938:	4284      	cmp	r4, r0
 800993a:	4606      	mov	r6, r0
 800993c:	d802      	bhi.n	8009944 <_realloc_r+0x34>
 800993e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009942:	d8f4      	bhi.n	800992e <_realloc_r+0x1e>
 8009944:	4621      	mov	r1, r4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff fafc 	bl	8008f44 <_malloc_r>
 800994c:	4680      	mov	r8, r0
 800994e:	b908      	cbnz	r0, 8009954 <_realloc_r+0x44>
 8009950:	4645      	mov	r5, r8
 8009952:	e7ec      	b.n	800992e <_realloc_r+0x1e>
 8009954:	42b4      	cmp	r4, r6
 8009956:	4622      	mov	r2, r4
 8009958:	4629      	mov	r1, r5
 800995a:	bf28      	it	cs
 800995c:	4632      	movcs	r2, r6
 800995e:	f7ff ffc9 	bl	80098f4 <memcpy>
 8009962:	4629      	mov	r1, r5
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff fa83 	bl	8008e70 <_free_r>
 800996a:	e7f1      	b.n	8009950 <_realloc_r+0x40>

0800996c <_malloc_usable_size_r>:
 800996c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009970:	1f18      	subs	r0, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	bfbc      	itt	lt
 8009976:	580b      	ldrlt	r3, [r1, r0]
 8009978:	18c0      	addlt	r0, r0, r3
 800997a:	4770      	bx	lr

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr
