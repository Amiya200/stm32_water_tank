
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004588  08004588  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004590  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000064  080045f4  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080045f4  00006364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010520  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfa  00000000  00000000  000165ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  000193a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0001a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a2c  00000000  00000000  0001afc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ee0  00000000  00000000  000349f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0d0  00000000  00000000  000498d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d79a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000d79e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000dbf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800445c 	.word	0x0800445c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800445c 	.word	0x0800445c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ADC_Init>:
    UART_TransmitString(&huart1, dataPacket);          // transmit packet
}

// ---------- ADC Initialization ----------
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f001 f9f9 	bl	800155c <HAL_ADCEx_Calibration_Start>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <ADC_Init+0x18>
    {
        Error_Handler();
 8000170:	f000 fc60 	bl	8000a34 <Error_Handler>
    }
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}

0800017c <LCD_I2C_Init>:
  * @param  hi2c_handle: Pointer to the I2C handle (e.g., &hi2c2 from main.c)
  * @param  address: I2C address of the LCD module (e.g., 0x27 << 1 or 0x3F << 1)
  * @retval None
  */
void LCD_I2C_Init(I2C_HandleTypeDef *hi2c_handle, uint8_t address)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	70fb      	strb	r3, [r7, #3]
    i2c_handle_g = hi2c_handle;
 8000188:	4a25      	ldr	r2, [pc, #148]	@ (8000220 <LCD_I2C_Init+0xa4>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	6013      	str	r3, [r2, #0]
    lcd_address_g = address;
 800018e:	4a25      	ldr	r2, [pc, #148]	@ (8000224 <LCD_I2C_Init+0xa8>)
 8000190:	78fb      	ldrb	r3, [r7, #3]
 8000192:	7013      	strb	r3, [r2, #0]

    _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <LCD_I2C_Init+0xac>)
 8000196:	2208      	movs	r2, #8
 8000198:	701a      	strb	r2, [r3, #0]
    _backlightval = LCD_BACKLIGHT;
 800019a:	4b24      	ldr	r3, [pc, #144]	@ (800022c <LCD_I2C_Init+0xb0>)
 800019c:	2208      	movs	r2, #8
 800019e:	701a      	strb	r2, [r3, #0]
    _numlines = 2;
 80001a0:	4b23      	ldr	r3, [pc, #140]	@ (8000230 <LCD_I2C_Init+0xb4>)
 80001a2:	2202      	movs	r2, #2
 80001a4:	701a      	strb	r2, [r3, #0]
    _cols = 16;
 80001a6:	4b23      	ldr	r3, [pc, #140]	@ (8000234 <LCD_I2C_Init+0xb8>)
 80001a8:	2210      	movs	r2, #16
 80001aa:	701a      	strb	r2, [r3, #0]

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // for i2c, we should allow some time after the device is powered up
    HAL_Delay(50);
 80001ac:	2032      	movs	r0, #50	@ 0x32
 80001ae:	f000 ff45 	bl	800103c <HAL_Delay>
    // put the LCD into 4 bit mode
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // we start in 8bit mode, try to set 4 bit mode
    lcd_write4bits(0x03 << 4);
 80001b2:	2030      	movs	r0, #48	@ 0x30
 80001b4:	f000 f8e6 	bl	8000384 <lcd_write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80001b8:	2005      	movs	r0, #5
 80001ba:	f000 ff3f 	bl	800103c <HAL_Delay>

    // second try
    lcd_write4bits(0x03 << 4);
 80001be:	2030      	movs	r0, #48	@ 0x30
 80001c0:	f000 f8e0 	bl	8000384 <lcd_write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80001c4:	2005      	movs	r0, #5
 80001c6:	f000 ff39 	bl	800103c <HAL_Delay>

    // third go!
    lcd_write4bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	@ 0x30
 80001cc:	f000 f8da 	bl	8000384 <lcd_write4bits>
    HAL_Delay(1);
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 ff33 	bl	800103c <HAL_Delay>

    // finally, set to 4-bit interface
    lcd_write4bits(0x02 << 4);
 80001d6:	2020      	movs	r0, #32
 80001d8:	f000 f8d4 	bl	8000384 <lcd_write4bits>

    // set # lines, font size, etc.
    lcd_send(LCD_FUNCTIONSET | _displayfunction, 0);
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <LCD_I2C_Init+0xac>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	f043 0320 	orr.w	r3, r3, #32
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f8aa 	bl	8000342 <lcd_send>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001ee:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <LCD_I2C_Init+0xbc>)
 80001f0:	2204      	movs	r2, #4
 80001f2:	701a      	strb	r2, [r3, #0]
    LCD_I2C_Display();
 80001f4:	f000 f86c 	bl	80002d0 <LCD_I2C_Display>

    // clear it off
    LCD_I2C_Clear();
 80001f8:	f000 f822 	bl	8000240 <LCD_I2C_Clear>

    // set the entry mode
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <LCD_I2C_Init+0xc0>)
 80001fe:	2202      	movs	r2, #2
 8000200:	701a      	strb	r2, [r3, #0]
    lcd_send(LCD_ENTRYMODESET | _displaymode, 0);
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <LCD_I2C_Init+0xc0>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f897 	bl	8000342 <lcd_send>

    // go home
    LCD_I2C_Home();
 8000214:	f000 f81f 	bl	8000256 <LCD_I2C_Home>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000080 	.word	0x20000080
 8000224:	20000084 	.word	0x20000084
 8000228:	20000085 	.word	0x20000085
 800022c:	2000008a 	.word	0x2000008a
 8000230:	20000088 	.word	0x20000088
 8000234:	20000089 	.word	0x20000089
 8000238:	20000086 	.word	0x20000086
 800023c:	20000087 	.word	0x20000087

08000240 <LCD_I2C_Clear>:
  * @brief  Clears the LCD display and sets cursor to home position.
  * @param  None
  * @retval None
  */
void LCD_I2C_Clear(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    lcd_send(LCD_CLEARDISPLAY, 0); // clear display, set cursor position to zero
 8000244:	2100      	movs	r1, #0
 8000246:	2001      	movs	r0, #1
 8000248:	f000 f87b 	bl	8000342 <lcd_send>
    HAL_Delay(2);                  // this command takes a long time!
 800024c:	2002      	movs	r0, #2
 800024e:	f000 fef5 	bl	800103c <HAL_Delay>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <LCD_I2C_Home>:
  * @brief  Sets the cursor to the home position (0,0).
  * @param  None
  * @retval None
  */
void LCD_I2C_Home(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0
    lcd_send(LCD_RETURNHOME, 0); // set cursor position to zero
 800025a:	2100      	movs	r1, #0
 800025c:	2002      	movs	r0, #2
 800025e:	f000 f870 	bl	8000342 <lcd_send>
    HAL_Delay(2);                // this command takes a long time!
 8000262:	2002      	movs	r0, #2
 8000264:	f000 feea 	bl	800103c <HAL_Delay>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}

0800026c <LCD_I2C_SetCursor>:
  * @param  col: Column position (0-15 for 16x2 LCD)
  * @param  row: Row position (0 or 1 for 16x2 LCD)
  * @retval None
  */
void LCD_I2C_SetCursor(uint8_t col, uint8_t row)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800027c:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <LCD_I2C_SetCursor+0x5c>)
 800027e:	f107 0408 	add.w	r4, r7, #8
 8000282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (row > _numlines) {
 8000288:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <LCD_I2C_SetCursor+0x60>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	429a      	cmp	r2, r3
 8000290:	d903      	bls.n	800029a <LCD_I2C_SetCursor+0x2e>
        row = _numlines - 1; // we count rows starting w/0
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <LCD_I2C_SetCursor+0x60>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	3b01      	subs	r3, #1
 8000298:	71bb      	strb	r3, [r7, #6]
    }
    lcd_send(LCD_SETDDRAMADDR | (col + row_offsets[row]), 0);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	3318      	adds	r3, #24
 80002a0:	443b      	add	r3, r7
 80002a2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4413      	add	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f841 	bl	8000342 <lcd_send>
}
 80002c0:	bf00      	nop
 80002c2:	371c      	adds	r7, #28
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	08004474 	.word	0x08004474
 80002cc:	20000088 	.word	0x20000088

080002d0 <LCD_I2C_Display>:
  * @brief  Turns on the LCD display.
  * @param  None
  * @retval None
  */
void LCD_I2C_Display(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <LCD_I2C_Display+0x28>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <LCD_I2C_Display+0x28>)
 80002e0:	701a      	strb	r2, [r3, #0]
    lcd_send(LCD_DISPLAYCONTROL | _displaycontrol, 0);
 80002e2:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <LCD_I2C_Display+0x28>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f827 	bl	8000342 <lcd_send>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000086 	.word	0x20000086

080002fc <LCD_I2C_PrintChar>:
  * @brief  Prints a single character to the LCD.
  * @param  c: Character to print
  * @retval None
  */
void LCD_I2C_PrintChar(char c)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
    lcd_send(c, 1);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f819 	bl	8000342 <lcd_send>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <LCD_I2C_PrintString>:
  * @brief  Prints a string to the LCD.
  * @param  str: Pointer to the string to print
  * @retval None
  */
void LCD_I2C_PrintString(const char *str)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000320:	e006      	b.n	8000330 <LCD_I2C_PrintString+0x18>
        LCD_I2C_PrintChar(*str++);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	607a      	str	r2, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ffe6 	bl	80002fc <LCD_I2C_PrintChar>
    while (*str) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f4      	bne.n	8000322 <LCD_I2C_PrintString+0xa>
    }
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}

08000342 <lcd_send>:
  * @param  value: Byte to send
  * @param  mode: 0 for command, 1 for data
  * @retval None
  */
static void lcd_send(uint8_t value, uint8_t mode)
{
 8000342:	b580      	push	{r7, lr}
 8000344:	b084      	sub	sp, #16
 8000346:	af00      	add	r7, sp, #0
 8000348:	4603      	mov	r3, r0
 800034a:	460a      	mov	r2, r1
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	4613      	mov	r3, r2
 8000350:	71bb      	strb	r3, [r7, #6]
    uint8_t highnib = value & 0xF0;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f023 030f 	bic.w	r3, r3, #15
 8000358:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xF0;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	73bb      	strb	r3, [r7, #14]
    lcd_write4bits((highnib) | mode);
 8000360:	7bfa      	ldrb	r2, [r7, #15]
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	4313      	orrs	r3, r2
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f80b 	bl	8000384 <lcd_write4bits>
    lcd_write4bits((lownib) | mode);
 800036e:	7bba      	ldrb	r2, [r7, #14]
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	4313      	orrs	r3, r2
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f804 	bl	8000384 <lcd_write4bits>
}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_write4bits>:
  * @brief  Writes 4 bits to the LCD.
  * @param  value: 4 bits to write (upper nibble)
  * @retval None
  */
static void lcd_write4bits(uint8_t value)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
    lcd_expanderWrite(value);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f809 	bl	80003a8 <lcd_expanderWrite>
    lcd_pulseEnable(value);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f827 	bl	80003ec <lcd_pulseEnable>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <lcd_expanderWrite>:
  * @brief  Writes data to the I2C expander.
  * @param  _data: Data byte to write
  * @retval None
  */
static void lcd_expanderWrite(uint8_t _data)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af02      	add	r7, sp, #8
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
    uint8_t data_to_send = _data | _backlightval;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <lcd_expanderWrite+0x38>)
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(i2c_handle_g, lcd_address_g, &data_to_send, 1, 100);
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <lcd_expanderWrite+0x3c>)
 80003c0:	6818      	ldr	r0, [r3, #0]
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <lcd_expanderWrite+0x40>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	4619      	mov	r1, r3
 80003c8:	f107 020f 	add.w	r2, r7, #15
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2301      	movs	r3, #1
 80003d2:	f001 fd35 	bl	8001e40 <HAL_I2C_Master_Transmit>
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000008a 	.word	0x2000008a
 80003e4:	20000080 	.word	0x20000080
 80003e8:	20000084 	.word	0x20000084

080003ec <lcd_pulseEnable>:
  * @brief  Pulses the enable pin to latch data.
  * @param  _data: Data byte (including RS, RW, and backlight bits)
  * @retval None
  */
static void lcd_pulseEnable(uint8_t _data)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
    lcd_expanderWrite(_data | LCD_EN);  // En high
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ffd2 	bl	80003a8 <lcd_expanderWrite>
    HAL_Delay(1);                       // enable pulse must be >450ns
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fe19 	bl	800103c <HAL_Delay>

    lcd_expanderWrite(_data & ~LCD_EN); // En low
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f023 0304 	bic.w	r3, r3, #4
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ffc8 	bl	80003a8 <lcd_expanderWrite>
    HAL_Delay(50);                      // commands need > 37us to settle
 8000418:	2032      	movs	r0, #50	@ 0x32
 800041a:	f000 fe0f 	bl	800103c <HAL_Delay>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <LED_Init>:

static GPIO_TypeDef* FUNC_PORT = LED2_GPIO_Port;
static const uint16_t FUNC_PIN = LED2_Pin;

void LED_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
    /* CubeMX usually sets up the pins. This re-inits safely if required. */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]

    /* Enable GPIO clocks (safe to call even if already enabled) */
    if (STATUS_PORT == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b38      	ldr	r3, [pc, #224]	@ (8000520 <LED_Init+0xf8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a38      	ldr	r2, [pc, #224]	@ (8000524 <LED_Init+0xfc>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d10b      	bne.n	800045e <LED_Init+0x36>
 8000446:	4b38      	ldr	r3, [pc, #224]	@ (8000528 <LED_Init+0x100>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <LED_Init+0x100>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b35      	ldr	r3, [pc, #212]	@ (8000528 <LED_Init+0x100>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    if (STATUS_PORT == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b30      	ldr	r3, [pc, #192]	@ (8000520 <LED_Init+0xf8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a32      	ldr	r2, [pc, #200]	@ (800052c <LED_Init+0x104>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d10b      	bne.n	8000480 <LED_Init+0x58>
 8000468:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <LED_Init+0x100>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a2e      	ldr	r2, [pc, #184]	@ (8000528 <LED_Init+0x100>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <LED_Init+0x100>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    if (FUNC_PORT == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <LED_Init+0x108>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a27      	ldr	r2, [pc, #156]	@ (8000524 <LED_Init+0xfc>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d10b      	bne.n	80004a2 <LED_Init+0x7a>
 800048a:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <LED_Init+0x100>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <LED_Init+0x100>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <LED_Init+0x100>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
    if (FUNC_PORT == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b23      	ldr	r3, [pc, #140]	@ (8000530 <LED_Init+0x108>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a21      	ldr	r2, [pc, #132]	@ (800052c <LED_Init+0x104>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d10b      	bne.n	80004c4 <LED_Init+0x9c>
 80004ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000528 <LED_Init+0x100>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000528 <LED_Init+0x100>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <LED_Init+0x100>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0308 	and.w	r3, r3, #8
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = STATUS_PIN;
 80004c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_PORT, &GPIO_InitStruct);
 80004d2:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <LED_Init+0xf8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f107 0210 	add.w	r2, r7, #16
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 f9cf 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FUNC_PIN;
 80004e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004e6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(FUNC_PORT, &GPIO_InitStruct);
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <LED_Init+0x108>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f107 0210 	add.w	r2, r7, #16
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 f9c4 	bl	8001880 <HAL_GPIO_Init>

    /* Initialize off */
    HAL_GPIO_WritePin(STATUS_PORT, STATUS_PIN, GPIO_PIN_RESET);
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <LED_Init+0xf8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000500:	2200      	movs	r2, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fb40 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FUNC_PORT, FUNC_PIN, GPIO_PIN_RESET);
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <LED_Init+0x108>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000510:	2200      	movs	r2, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fb38 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	40010800 	.word	0x40010800
 8000528:	40021000 	.word	0x40021000
 800052c:	40010c00 	.word	0x40010c00
 8000530:	20000004 	.word	0x20000004

08000534 <LED_Func_On>:

void LED_Status_On(void)  { HAL_GPIO_WritePin(STATUS_PORT, STATUS_PIN, GPIO_PIN_SET); }
void LED_Status_Off(void) { HAL_GPIO_WritePin(STATUS_PORT, STATUS_PIN, GPIO_PIN_RESET); }
void LED_Status_Toggle(void) { HAL_GPIO_TogglePin(STATUS_PORT, STATUS_PIN); }

void LED_Func_On(void)  { HAL_GPIO_WritePin(FUNC_PORT, FUNC_PIN, GPIO_PIN_SET); }
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <LED_Func_On+0x18>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000540:	2201      	movs	r2, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fb20 	bl	8001b88 <HAL_GPIO_WritePin>
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000004 	.word	0x20000004

08000550 <LED_Func_Off>:
void LED_Func_Off(void) { HAL_GPIO_WritePin(FUNC_PORT, FUNC_PIN, GPIO_PIN_RESET); }
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
 8000554:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <LED_Func_Off+0x18>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800055c:	2200      	movs	r2, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fb12 	bl	8001b88 <HAL_GPIO_WritePin>
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000004 	.word	0x20000004

0800056c <main>:
static RTC_TimeTypeDef sTime;   // used as simple containers by rtc_i2c
static RTC_DateTypeDef sDate;
static char uart_tx_buffer[64];

int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000570:	f000 fd02 	bl	8000f78 <HAL_Init>
    SystemClock_Config();
 8000574:	f000 f8a0 	bl	80006b8 <SystemClock_Config>

    MX_GPIO_Init();
 8000578:	f000 f9b4 	bl	80008e4 <MX_GPIO_Init>
    MX_ADC1_Init();
 800057c:	f000 f8e2 	bl	8000744 <MX_ADC1_Init>
    MX_I2C1_Init();              // Only I2C1 is used
 8000580:	f000 f922 	bl	80007c8 <MX_I2C1_Init>
    MX_SPI1_Init();              // Call to avoid unused warnings; keep if you use SPI
 8000584:	f000 f94e 	bl	8000824 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8000588:	f000 f982 	bl	8000890 <MX_USART1_UART_Init>

    LED_Init();
 800058c:	f7ff ff4c 	bl	8000428 <LED_Init>
    Relay_Init();
 8000590:	f000 fa60 	bl	8000a54 <Relay_Init>
    Switches_Init();
 8000594:	f000 fc36 	bl	8000e04 <Switches_Init>

    // LCD at 0x27 (shifted left for HAL): pass 7-bit address shifted by 1
    LCD_I2C_Init(&hi2c1, 0x27 << 1);
 8000598:	214e      	movs	r1, #78	@ 0x4e
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <main+0x44>)
 800059c:	f7ff fdee 	bl	800017c <LCD_I2C_Init>
    //     RTC_I2C_SetDate(&hi2c1, &sDate);
    // }

    while (1)
    {
        ReadAndDisplayRTC();
 80005a0:	f000 f808 	bl	80005b4 <ReadAndDisplayRTC>
        HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a8:	f000 fd48 	bl	800103c <HAL_Delay>
        ReadAndDisplayRTC();
 80005ac:	bf00      	nop
 80005ae:	e7f7      	b.n	80005a0 <main+0x34>
 80005b0:	200000bc 	.word	0x200000bc

080005b4 <ReadAndDisplayRTC>:
    }
}

/* ===================== Read & Display RTC ===================== */
static void ReadAndDisplayRTC(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af06      	add	r7, sp, #24
    // NOTE: Using external RTC via rtc_i2c.c — pass I2C handle, not HAL RTC handle
    if (RTC_I2C_GetTime(&hi2c1, &sTime))
 80005ba:	4935      	ldr	r1, [pc, #212]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 80005bc:	4835      	ldr	r0, [pc, #212]	@ (8000694 <ReadAndDisplayRTC+0xe0>)
 80005be:	f000 fa79 	bl	8000ab4 <RTC_I2C_GetTime>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d05c      	beq.n	8000682 <ReadAndDisplayRTC+0xce>
    {
        if (RTC_I2C_GetDate(&hi2c1, &sDate))
 80005c8:	4933      	ldr	r1, [pc, #204]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 80005ca:	4832      	ldr	r0, [pc, #200]	@ (8000694 <ReadAndDisplayRTC+0xe0>)
 80005cc:	f000 fa86 	bl	8000adc <RTC_I2C_GetDate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d050      	beq.n	8000678 <ReadAndDisplayRTC+0xc4>
        {
            // UART
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
                     "Time: %02d:%02d:%02d, Date: %02d/%02d/%04d\r\n",
                     sTime.Hours, sTime.Minutes, sTime.Seconds,
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005da:	461d      	mov	r5, r3
                     sTime.Hours, sTime.Minutes, sTime.Seconds,
 80005dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 80005de:	785b      	ldrb	r3, [r3, #1]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005e0:	461a      	mov	r2, r3
                     sTime.Hours, sTime.Minutes, sTime.Seconds,
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 80005e4:	789b      	ldrb	r3, [r3, #2]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005e6:	4619      	mov	r1, r3
                     sDate.Date, sDate.Month, 2000 + sDate.Year);
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005ec:	4618      	mov	r0, r3
                     sDate.Date, sDate.Month, 2000 + sDate.Year);
 80005ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005f2:	461c      	mov	r4, r3
                     sDate.Date, sDate.Month, 2000 + sDate.Year);
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 80005f6:	78db      	ldrb	r3, [r3, #3]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer),
 80005f8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80005fc:	9304      	str	r3, [sp, #16]
 80005fe:	9403      	str	r4, [sp, #12]
 8000600:	9002      	str	r0, [sp, #8]
 8000602:	9101      	str	r1, [sp, #4]
 8000604:	9200      	str	r2, [sp, #0]
 8000606:	462b      	mov	r3, r5
 8000608:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ReadAndDisplayRTC+0xe8>)
 800060a:	2140      	movs	r1, #64	@ 0x40
 800060c:	4824      	ldr	r0, [pc, #144]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 800060e:	f003 fa61 	bl	8003ad4 <sniprintf>
            UART_TransmitString(&huart1, uart_tx_buffer);
 8000612:	4923      	ldr	r1, [pc, #140]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 8000614:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <ReadAndDisplayRTC+0xf0>)
 8000616:	f000 fc75 	bl	8000f04 <UART_TransmitString>

            // LCD
            LCD_I2C_SetCursor(0, 0);
 800061a:	2100      	movs	r1, #0
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fe25 	bl	800026c <LCD_I2C_SetCursor>
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d:%02d:%02d",
                     sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d:%02d:%02d",
 8000626:	4619      	mov	r1, r3
                     sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 800062a:	785b      	ldrb	r3, [r3, #1]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d:%02d:%02d",
 800062c:	461a      	mov	r2, r3
                     sTime.Hours, sTime.Minutes, sTime.Seconds);
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <ReadAndDisplayRTC+0xdc>)
 8000630:	789b      	ldrb	r3, [r3, #2]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d:%02d:%02d",
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	460b      	mov	r3, r1
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <ReadAndDisplayRTC+0xf4>)
 800063a:	2140      	movs	r1, #64	@ 0x40
 800063c:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 800063e:	f003 fa49 	bl	8003ad4 <sniprintf>
            LCD_I2C_PrintString(uart_tx_buffer);
 8000642:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 8000644:	f7ff fe68 	bl	8000318 <LCD_I2C_PrintString>

            LCD_I2C_SetCursor(0, 1);
 8000648:	2101      	movs	r1, #1
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fe0e 	bl	800026c <LCD_I2C_SetCursor>
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d/%02d/%02d",
                     sDate.Date, sDate.Month, sDate.Year);
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 8000652:	789b      	ldrb	r3, [r3, #2]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d/%02d/%02d",
 8000654:	4619      	mov	r1, r3
                     sDate.Date, sDate.Month, sDate.Year);
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 8000658:	785b      	ldrb	r3, [r3, #1]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d/%02d/%02d",
 800065a:	461a      	mov	r2, r3
                     sDate.Date, sDate.Month, sDate.Year);
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <ReadAndDisplayRTC+0xe4>)
 800065e:	78db      	ldrb	r3, [r3, #3]
            snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "%02d/%02d/%02d",
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	460b      	mov	r3, r1
 8000666:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <ReadAndDisplayRTC+0xf8>)
 8000668:	2140      	movs	r1, #64	@ 0x40
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 800066c:	f003 fa32 	bl	8003ad4 <sniprintf>
            LCD_I2C_PrintString(uart_tx_buffer);
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <ReadAndDisplayRTC+0xec>)
 8000672:	f7ff fe51 	bl	8000318 <LCD_I2C_PrintString>
    }
    else
    {
        UART_TransmitString(&huart1, "Failed to get RTC Time!\r\n");
    }
}
 8000676:	e008      	b.n	800068a <ReadAndDisplayRTC+0xd6>
            UART_TransmitString(&huart1, "Failed to get RTC Date!\r\n");
 8000678:	490d      	ldr	r1, [pc, #52]	@ (80006b0 <ReadAndDisplayRTC+0xfc>)
 800067a:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <ReadAndDisplayRTC+0xf0>)
 800067c:	f000 fc42 	bl	8000f04 <UART_TransmitString>
}
 8000680:	e003      	b.n	800068a <ReadAndDisplayRTC+0xd6>
        UART_TransmitString(&huart1, "Failed to get RTC Time!\r\n");
 8000682:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <ReadAndDisplayRTC+0x100>)
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <ReadAndDisplayRTC+0xf0>)
 8000686:	f000 fc3d 	bl	8000f04 <UART_TransmitString>
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bdb0      	pop	{r4, r5, r7, pc}
 8000690:	200001b0 	.word	0x200001b0
 8000694:	200000bc 	.word	0x200000bc
 8000698:	200001b4 	.word	0x200001b4
 800069c:	08004484 	.word	0x08004484
 80006a0:	200001b8 	.word	0x200001b8
 80006a4:	20000168 	.word	0x20000168
 80006a8:	080044b4 	.word	0x080044b4
 80006ac:	080044c4 	.word	0x080044c4
 80006b0:	080044d4 	.word	0x080044d4
 80006b4:	080044f0 	.word	0x080044f0

080006b8 <SystemClock_Config>:

/* ===================== Clock Config ===================== */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b090      	sub	sp, #64	@ 0x40
 80006bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2228      	movs	r2, #40	@ 0x28
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fa3a 	bl	8003b40 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fef5 	bl	80024f0 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x58>
        Error_Handler();
 800070c:	f000 f992 	bl	8000a34 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000710:	230f      	movs	r3, #15
 8000712:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000720:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f002 f962 	bl	80029f4 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x82>
        Error_Handler();
 8000736:	f000 f97d 	bl	8000a34 <Error_Handler>
    }
}
 800073a:	bf00      	nop
 800073c:	3740      	adds	r7, #64	@ 0x40
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_ADC1_Init>:

/* ===================== ADC1 Init ===================== */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]

    hadc1.Instance = ADC1;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 8000756:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <MX_ADC1_Init+0x80>)
 8000758:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 8000762:	2200      	movs	r2, #0
 8000764:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 8000768:	2200      	movs	r2, #0
 800076a:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 800076e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000772:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 800077c:	2201      	movs	r2, #1
 800077e:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 8000782:	f000 fc7f 	bl	8001084 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x4c>
        Error_Handler();
 800078c:	f000 f952 	bl	8000a34 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000794:	2301      	movs	r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 80007a2:	f000 fd47 	bl	8001234 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x6c>
        Error_Handler();
 80007ac:	f000 f942 	bl	8000a34 <Error_Handler>
    }

    // Your custom ADC init (if defined in adc.c)
    ADC_Init(&hadc1);
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <MX_ADC1_Init+0x7c>)
 80007b2:	f7ff fcd3 	bl	800015c <ADC_Init>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	40012400 	.word	0x40012400

080007c8 <MX_I2C1_Init>:

/* ===================== I2C1 Init ===================== */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	@ (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f001 f9d7 	bl	8001bb8 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000810:	f000 f910 	bl	8000a34 <Error_Handler>
    }
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000bc 	.word	0x200000bc
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_SPI1_Init>:

/* ===================== SPI1 Init ===================== */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000854:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2208      	movs	r2, #8
 800085a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f002 fe85 	bl	8003584 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
        Error_Handler();
 8000880:	f000 f8d8 	bl	8000a34 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000110 	.word	0x20000110
 800088c:	40013000 	.word	0x40013000

08000890 <MX_USART1_UART_Init>:

/* ===================== UART1 Init ===================== */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f002 fee0 	bl	800368c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80008d2:	f000 f8af 	bl	8000a34 <Error_Handler>
    }
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000168 	.word	0x20000168
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_GPIO_Init>:

/* ===================== GPIO Init ===================== */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <MX_GPIO_Init+0x140>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a49      	ldr	r2, [pc, #292]	@ (8000a24 <MX_GPIO_Init+0x140>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b47      	ldr	r3, [pc, #284]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000910:	4b44      	ldr	r3, [pc, #272]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a43      	ldr	r2, [pc, #268]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_GPIO_Init+0x140>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0320 	and.w	r3, r3, #32
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b3e      	ldr	r3, [pc, #248]	@ (8000a24 <MX_GPIO_Init+0x140>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a24 <MX_GPIO_Init+0x140>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b38      	ldr	r3, [pc, #224]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a37      	ldr	r2, [pc, #220]	@ (8000a24 <MX_GPIO_Init+0x140>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <MX_GPIO_Init+0x140>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095e:	4832      	ldr	r0, [pc, #200]	@ (8000a28 <MX_GPIO_Init+0x144>)
 8000960:	f001 f912 	bl	8001b88 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin |
 8000964:	2200      	movs	r2, #0
 8000966:	f248 01c7 	movw	r1, #32967	@ 0x80c7
 800096a:	4830      	ldr	r0, [pc, #192]	@ (8000a2c <MX_GPIO_Init+0x148>)
 800096c:	f001 f90c 	bl	8001b88 <HAL_GPIO_WritePin>
                            LORA_STATUS_Pin|RF_DATA_Pin, GPIO_PIN_RESET);

    HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000976:	482e      	ldr	r0, [pc, #184]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000978:	f001 f906 	bl	8001b88 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000982:	482b      	ldr	r0, [pc, #172]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000984:	f001 f900 	bl	8001b88 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800098e:	4827      	ldr	r0, [pc, #156]	@ (8000a2c <MX_GPIO_Init+0x148>)
 8000990:	f001 f8fa 	bl	8001b88 <HAL_GPIO_WritePin>

    // PC13
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	481e      	ldr	r0, [pc, #120]	@ (8000a28 <MX_GPIO_Init+0x144>)
 80009ae:	f000 ff67 	bl	8001880 <HAL_GPIO_Init>

    // Analog inputs on PA (adjust to your actual pins)
    GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 80009b2:	23c0      	movs	r3, #192	@ 0xc0
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 80009c2:	f000 ff5d 	bl	8001880 <HAL_GPIO_Init>

    // Outputs on PB
    GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin |
 80009c6:	f248 33c7 	movw	r3, #33735	@ 0x83c7
 80009ca:	613b      	str	r3, [r7, #16]
                          LORA_STATUS_Pin|RF_DATA_Pin|LED4_Pin|LED5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_GPIO_Init+0x148>)
 80009e0:	f000 ff4e 	bl	8001880 <HAL_GPIO_Init>

    // Inputs on PB
    GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin;
 80009e4:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80009e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0x148>)
 80009fa:	f000 ff41 	bl	8001880 <HAL_GPIO_Init>

    // Outputs on PA
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80009fe:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000a18:	f000 ff32 	bl	8001880 <HAL_GPIO_Init>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40010800 	.word	0x40010800

08000a34 <Error_Handler>:

/* ===================== Error Handler ===================== */
void Error_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
    __disable_irq();
    while (1) {
        LED_Func_On();
 8000a3c:	f7ff fd7a 	bl	8000534 <LED_Func_On>
        HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	@ 0x64
 8000a42:	f000 fafb 	bl	800103c <HAL_Delay>
        LED_Func_Off();
 8000a46:	f7ff fd83 	bl	8000550 <LED_Func_Off>
        HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	@ 0x64
 8000a4c:	f000 faf6 	bl	800103c <HAL_Delay>
        LED_Func_On();
 8000a50:	bf00      	nop
 8000a52:	e7f3      	b.n	8000a3c <Error_Handler+0x8>

08000a54 <Relay_Init>:
#include "relay.h"
#include "main.h"

void Relay_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <Relay_Init+0x58>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <Relay_Init+0x58>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <Relay_Init+0x58>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = Relay1_Pin | Relay2_Pin | Relay3_Pin;
 8000a80:	2307      	movs	r3, #7
 8000a82:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Relay1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <Relay_Init+0x5c>)
 8000a94:	f000 fef4 	bl	8001880 <HAL_GPIO_Init>

    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <Relay_Init+0x5c>)
 8000a9e:	f001 f873 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <RTC_I2C_GetTime>:
  * @brief  Gets the current time from the RTC module using HAL functions.
  * @param  hrtc: Pointer to the RTC handle.
  * @param  sTime: Pointer to a RTC_TimeTypeDef structure to store the retrieved time.
  * @retval true if time is read successfully, false otherwise.
  */
bool RTC_I2C_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    // For STM32 internal RTC, we typically use RTC_FORMAT_BIN for getting time.
    if (HAL_RTC_GetTime(hrtc, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f002 f9da 	bl	8002e7c <HAL_RTC_GetTime>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <RTC_I2C_GetTime+0x1e>
        return false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <RTC_I2C_GetTime+0x20>
    }
    return true;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <RTC_I2C_GetDate>:
  * @brief  Gets the current date from the RTC module using HAL functions.
  * @param  hrtc: Pointer to the RTC handle.
  * @param  sDate: Pointer to a RTC_DateTypeDef structure to store the retrieved date.
  * @retval true if date is read successfully, false otherwise.
  */
bool RTC_I2C_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
    // For STM32 internal RTC, we typically use RTC_FORMAT_BIN for getting date.
    if (HAL_RTC_GetDate(hrtc, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f002 fa9e 	bl	800302c <HAL_RTC_GetDate>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <RTC_I2C_GetDate+0x1e>
        return false;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <RTC_I2C_GetDate+0x20>
    }
    return true;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x5c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x60>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_MspInit+0x60>)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000

08000b68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <HAL_ADC_MspInit+0x6c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d121      	bne.n	8000bcc <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_ADC_MspInit+0x70>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bb8:	233f      	movs	r3, #63	@ 0x3f
 8000bba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_ADC_MspInit+0x74>)
 8000bc8:	f000 fe5a 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40012400 	.word	0x40012400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <HAL_I2C_MspInit+0x74>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d124      	bne.n	8000c4a <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <HAL_I2C_MspInit+0x7c>)
 8000c2e:	f000 fe27 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_I2C_MspInit+0x78>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005800 	.word	0x40005800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <HAL_SPI_MspInit+0xa4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13d      	bne.n	8000cfc <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a20      	ldr	r2, [pc, #128]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000c86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_SPI_MspInit+0xa8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000cb0:	2328      	movs	r3, #40	@ 0x28
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <HAL_SPI_MspInit+0xac>)
 8000cc4:	f000 fddc 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <HAL_SPI_MspInit+0xac>)
 8000cdc:	f000 fdd0 	bl	8001880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_SPI_MspInit+0xb0>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf6:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_SPI_MspInit+0xb0>)
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d131      	bne.n	8000d98 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <HAL_UART_MspInit+0x94>)
 8000d7a:	f000 fd81 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0x94>)
 8000d94:	f000 fd74 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f902 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <Switches_Init>:
/* track last state and last change time for simple debounce */
static GPIO_PinState last_state[5];
static uint32_t last_change[5];

void Switches_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <Switches_Init+0x78>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <Switches_Init+0x78>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <Switches_Init+0x78>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP; /* pressed -> ground */
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8000e36:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e3a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <Switches_Init+0x7c>)
 8000e42:	f000 fd1d 	bl	8001880 <HAL_GPIO_Init>

    /* initialize state */
    for (int i = 1; i <= 4; ++i) {
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e00e      	b.n	8000e6a <Switches_Init+0x66>
        last_state[i] = GPIO_PIN_SET;
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <Switches_Init+0x80>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
        last_change[i] = HAL_GetTick();
 8000e56:	f000 f8e7 	bl	8001028 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	490a      	ldr	r1, [pc, #40]	@ (8000e88 <Switches_Init+0x84>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 1; i <= 4; ++i) {
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	dded      	ble.n	8000e4c <Switches_Init+0x48>
    }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	200001f8 	.word	0x200001f8
 8000e88:	20000200 	.word	0x20000200

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f002 fe48 	bl	8003b50 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20005000 	.word	0x20005000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000214 	.word	0x20000214
 8000ef4:	20000368 	.word	0x20000368

08000ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <UART_TransmitString>:
  * @param huart: Pointer to the UART handle (e.g., &huart1)
  * @param str: Pointer to the string to transmit
  * @retval None
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f7ff f91c 	bl	800014c <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	6839      	ldr	r1, [r7, #0]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f002 fc04 	bl	800372c <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff ffe4 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f32:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f48:	4c09      	ldr	r4, [pc, #36]	@ (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f002 fe01 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff fb07 	bl	800056c <main>
  bx lr
 8000f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f68:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 8000f6c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f70:	20000364 	.word	0x20000364

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fc45 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fdb6 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fc4f 	bl	8001866 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fc25 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000010 	.word	0x20000010
 8001000:	2000000c 	.word	0x2000000c

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	@ (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000010 	.word	0x20000010
 8001024:	20000218 	.word	0x20000218

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	@ (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000218 	.word	0x20000218

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fff0 	bl	8001028 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffe0 	bl	8001028 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010

08001084 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0be      	b.n	8001224 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fd50 	bl	8000b68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa05 	bl	80014d8 <ADC_ConversionStop_Disable>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 8099 	bne.w	8001212 <HAL_ADC_Init+0x18e>
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 8095 	bne.w	8001212 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	f043 0202 	orr.w	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001104:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7b1b      	ldrb	r3, [r3, #12]
 800110a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800110c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4313      	orrs	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800111c:	d003      	beq.n	8001126 <HAL_ADC_Init+0xa2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d102      	bne.n	800112c <HAL_ADC_Init+0xa8>
 8001126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112a:	e000      	b.n	800112e <HAL_ADC_Init+0xaa>
 800112c:	2300      	movs	r3, #0
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7d1b      	ldrb	r3, [r3, #20]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d119      	bne.n	8001170 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7b1b      	ldrb	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d109      	bne.n	8001158 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	3b01      	subs	r3, #1
 800114a:	035a      	lsls	r2, r3, #13
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	e00b      	b.n	8001170 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <HAL_ADC_Init+0x1a8>)
 800118c:	4013      	ands	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	430b      	orrs	r3, r1
 8001196:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_Init+0x126>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d104      	bne.n	80011b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	051b      	lsls	r3, r3, #20
 80011b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_ADC_Init+0x1ac>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e2:	f023 0303 	bic.w	r3, r3, #3
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ee:	e018      	b.n	8001222 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f023 0312 	bic.w	r3, r3, #18
 80011f8:	f043 0210 	orr.w	r2, r3, #16
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001210:	e007      	b.n	8001222 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	f043 0210 	orr.w	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001222:	7dfb      	ldrb	r3, [r7, #23]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	ffe1f7fd 	.word	0xffe1f7fd
 8001230:	ff1f0efe 	.word	0xff1f0efe

08001234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x20>
 8001250:	2302      	movs	r3, #2
 8001252:	e0dc      	b.n	800140e <HAL_ADC_ConfigChannel+0x1da>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b06      	cmp	r3, #6
 8001262:	d81c      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3b05      	subs	r3, #5
 8001276:	221f      	movs	r2, #31
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	4019      	ands	r1, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
 800129c:	e03c      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d81c      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b23      	subs	r3, #35	@ 0x23
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4019      	ands	r1, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b23      	subs	r3, #35	@ 0x23
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012de:	e01b      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	@ 0x41
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b41      	subs	r3, #65	@ 0x41
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d91c      	bls.n	800135a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3b1e      	subs	r3, #30
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3b1e      	subs	r3, #30
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	e019      	b.n	800138e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6919      	ldr	r1, [r3, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	2207      	movs	r2, #7
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	2b11      	cmp	r3, #17
 800139c:	d132      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_ADC_ConfigChannel+0x1e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d125      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d126      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80013c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d11a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_ADC_ConfigChannel+0x1e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <HAL_ADC_ConfigChannel+0x1ec>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x1b2>
 80013f2:	e007      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40012400 	.word	0x40012400
 800141c:	20000008 	.word	0x20000008
 8001420:	431bde83 	.word	0x431bde83

08001424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d040      	beq.n	80014c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <ADC_Enable+0xac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <ADC_Enable+0xb0>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001460:	e002      	b.n	8001468 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3b01      	subs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800146e:	f7ff fddb 	bl	8001028 <HAL_GetTick>
 8001472:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001474:	e01f      	b.n	80014b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001476:	f7ff fdd7 	bl	8001028 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d918      	bls.n	80014b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d011      	beq.n	80014b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e007      	b.n	80014c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d1d8      	bne.n	8001476 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d12e      	bne.n	8001550 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001502:	f7ff fd91 	bl	8001028 <HAL_GetTick>
 8001506:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001508:	e01b      	b.n	8001542 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800150a:	f7ff fd8d 	bl	8001028 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d914      	bls.n	8001542 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10d      	bne.n	8001542 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e007      	b.n	8001552 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d0dc      	beq.n	800150a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_ADCEx_Calibration_Start+0x1e>
 8001576:	2302      	movs	r3, #2
 8001578:	e097      	b.n	80016aa <HAL_ADCEx_Calibration_Start+0x14e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa8 	bl	80014d8 <ADC_ConversionStop_Disable>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff49 	bl	8001424 <ADC_Enable>
 8001592:	4603      	mov	r3, r0
 8001594:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 8081 	bne.w	80016a0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	f043 0202 	orr.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015b2:	4b40      	ldr	r3, [pc, #256]	@ (80016b4 <HAL_ADCEx_Calibration_Start+0x158>)
 80015b4:	681c      	ldr	r4, [r3, #0]
 80015b6:	2002      	movs	r0, #2
 80015b8:	f001 fbaa 	bl	8002d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80015bc:	4603      	mov	r3, r0
 80015be:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80015c2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80015c4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80015c6:	e002      	b.n	80015ce <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f9      	bne.n	80015c8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015e4:	f7ff fd20 	bl	8001028 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015ea:	e01b      	b.n	8001624 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015ec:	f7ff fd1c 	bl	8001028 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d914      	bls.n	8001624 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00d      	beq.n	8001624 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	f023 0312 	bic.w	r3, r3, #18
 8001610:	f043 0210 	orr.w	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e042      	b.n	80016aa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1dc      	bne.n	80015ec <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0204 	orr.w	r2, r2, #4
 8001640:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001642:	f7ff fcf1 	bl	8001028 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001648:	e01b      	b.n	8001682 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800164a:	f7ff fced 	bl	8001028 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d914      	bls.n	8001682 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	f023 0312 	bic.w	r3, r3, #18
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e013      	b.n	80016aa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1dc      	bne.n	800164a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff49 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff5e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffb0 	bl	80017d4 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	@ (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	@ 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	492c      	ldr	r1, [pc, #176]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4918      	ldr	r1, [pc, #96]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	@ 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e12b      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fffe 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	@ 0x24
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c1c:	f001 f832 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a81      	ldr	r2, [pc, #516]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d807      	bhi.n	8001c3c <HAL_I2C_Init+0x84>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a80      	ldr	r2, [pc, #512]	@ (8001e30 <HAL_I2C_Init+0x278>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e006      	b.n	8001c4a <HAL_I2C_Init+0x92>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e34 <HAL_I2C_Init+0x27c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0e7      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a78      	ldr	r2, [pc, #480]	@ (8001e38 <HAL_I2C_Init+0x280>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d802      	bhi.n	8001c8c <HAL_I2C_Init+0xd4>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	e009      	b.n	8001ca0 <HAL_I2C_Init+0xe8>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a69      	ldr	r2, [pc, #420]	@ (8001e3c <HAL_I2C_Init+0x284>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	495c      	ldr	r1, [pc, #368]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	d819      	bhi.n	8001cf4 <HAL_I2C_Init+0x13c>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cce:	1c59      	adds	r1, r3, #1
 8001cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_I2C_Init+0x138>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	e051      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	e04f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_I2C_Init+0x168>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e012      	b.n	8001d46 <HAL_I2C_Init+0x18e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x196>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e022      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10e      	bne.n	8001d74 <HAL_I2C_Init+0x1bc>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e58      	subs	r0, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	440b      	add	r3, r1
 8001d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	6809      	ldr	r1, [r1, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6911      	ldr	r1, [r2, #16]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	000186a0 	.word	0x000186a0
 8001e30:	001e847f 	.word	0x001e847f
 8001e34:	003d08ff 	.word	0x003d08ff
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	817b      	strh	r3, [r7, #10]
 8001e50:	4613      	mov	r3, r2
 8001e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff f8e8 	bl	8001028 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	f040 80e0 	bne.w	8002028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4970      	ldr	r1, [pc, #448]	@ (8002034 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f964 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0d3      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2C_Master_Transmit+0x50>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0cc      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d007      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2221      	movs	r2, #33	@ 0x21
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	893a      	ldrh	r2, [r7, #8]
 8001ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	@ (8002038 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ef8:	8979      	ldrh	r1, [r7, #10]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f89c 	bl	800203c <I2C_MasterRequestWrite>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e08d      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f24:	e066      	b.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fa22 	bl	8002374 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fa19 	bl	8002404 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e01a      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d194      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000

0800203c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d006      	beq.n	8002066 <I2C_MasterRequestWrite+0x2a>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d003      	beq.n	8002066 <I2C_MasterRequestWrite+0x2a>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002064:	d108      	bne.n	8002078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e00b      	b.n	8002090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	2b12      	cmp	r3, #18
 800207e:	d107      	bne.n	8002090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f84f 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020b6:	d103      	bne.n	80020c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e035      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	e01b      	b.n	8002118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	11db      	asrs	r3, r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0306 	and.w	r3, r3, #6
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f063 030f 	orn	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <I2C_MasterRequestWrite+0xfc>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f898 	bl	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e010      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4907      	ldr	r1, [pc, #28]	@ (800213c <I2C_MasterRequestWrite+0x100>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f888 	bl	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00010008 	.word	0x00010008
 800213c:	00010002 	.word	0x00010002

08002140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	e048      	b.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d044      	beq.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7fe ff65 	bl	8001028 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d139      	bne.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10d      	bne.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	e00c      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	43da      	mvns	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4013      	ands	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d116      	bne.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e023      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10d      	bne.n	800220a <I2C_WaitOnFlagUntilTimeout+0xca>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	e00c      	b.n	8002224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	43da      	mvns	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4013      	ands	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	429a      	cmp	r2, r3
 8002228:	d093      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002242:	e071      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d123      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800226c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e067      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d041      	beq.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7fe fec0 	bl	8001028 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d302      	bcc.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d136      	bne.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10c      	bne.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e00b      	b.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e021      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10c      	bne.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	43da      	mvns	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4013      	ands	r3, r2
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e00b      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f af6d 	bne.w	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f886 	bl	8002494 <I2C_IsAcknowledgeFailed>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e034      	b.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d028      	beq.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe fe45 	bl	8001028 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d11d      	bne.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d016      	beq.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	2b80      	cmp	r3, #128	@ 0x80
 80023f8:	d1c3      	bne.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f83e 	bl	8002494 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e034      	b.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d028      	beq.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fdfd 	bl	8001028 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11d      	bne.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d016      	beq.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d1c3      	bne.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d11b      	bne.n	80024e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e272      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	4b92      	ldr	r3, [pc, #584]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4b8f      	ldr	r3, [pc, #572]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
 8002528:	4b8c      	ldr	r3, [pc, #560]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d10b      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	4b89      	ldr	r3, [pc, #548]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06c      	beq.n	800261c <HAL_RCC_OscConfig+0x12c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d168      	bne.n	800261c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e24c      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x76>
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7f      	ldr	r2, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b7b      	ldr	r3, [pc, #492]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7a      	ldr	r2, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b78      	ldr	r3, [pc, #480]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0xbc>
 8002592:	4b72      	ldr	r3, [pc, #456]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a71      	ldr	r2, [pc, #452]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 80025ac:	4b6b      	ldr	r3, [pc, #428]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b68      	ldr	r3, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a67      	ldr	r2, [pc, #412]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fd2c 	bl	8001028 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fd28 	bl	8001028 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e200      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe4>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fd18 	bl	8001028 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fd14 	bl	8001028 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1ec      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x10c>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	4b4c      	ldr	r3, [pc, #304]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
 8002642:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b43      	ldr	r3, [pc, #268]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1c0      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b3d      	ldr	r3, [pc, #244]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4939      	ldr	r1, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e03a      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fccd 	bl	8001028 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7fe fcc9 	bl	8001028 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1a1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4927      	ldr	r1, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fcac 	bl	8001028 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7fe fca8 	bl	8001028 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e180      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03a      	beq.n	8002774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe fc8c 	bl	8001028 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7fe fc88 	bl	8001028 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e160      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002732:	2001      	movs	r0, #1
 8002734:	f000 face 	bl	8002cd4 <RCC_Delay>
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fc72 	bl	8001028 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fc6e 	bl	8001028 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d908      	bls.n	8002768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e146      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	42420000 	.word	0x42420000
 8002764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b92      	ldr	r3, [pc, #584]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e9      	bne.n	8002748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a6 	beq.w	80028ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8b      	ldr	r3, [pc, #556]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a87      	ldr	r2, [pc, #540]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b85      	ldr	r3, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b82      	ldr	r3, [pc, #520]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b7f      	ldr	r3, [pc, #508]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7e      	ldr	r2, [pc, #504]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fc2f 	bl	8001028 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fc2b 	bl	8001028 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	@ 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e103      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b75      	ldr	r3, [pc, #468]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x312>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x334>
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a69      	ldr	r2, [pc, #420]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	4b67      	ldr	r3, [pc, #412]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a66      	ldr	r2, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x356>
 800282c:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a60      	ldr	r2, [pc, #384]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a5d      	ldr	r2, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002846:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b58      	ldr	r3, [pc, #352]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a57      	ldr	r2, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fbdf 	bl	8001028 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fbdb 	bl	8001028 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x37e>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fbc9 	bl	8001028 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fbc5 	bl	8001028 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8087 	beq.w	80029e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d061      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d146      	bne.n	800297a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fb99 	bl	8001028 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fb95 	bl	8001028 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e06d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4921      	ldr	r1, [pc, #132]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	430b      	orrs	r3, r1
 8002946:	491b      	ldr	r1, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fb69 	bl	8001028 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fb65 	bl	8001028 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x46a>
 8002978:	e035      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe fb52 	bl	8001028 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fb4e 	bl	8001028 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e026      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x498>
 80029a6:	e01e      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e019      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_OscConfig+0x500>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b67      	ldr	r3, [pc, #412]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4965      	ldr	r1, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d040      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e073      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe faa0 	bl	8001028 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fa9c 	bl	8001028 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d210      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4922      	ldr	r1, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f9fe 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	0800450c 	.word	0x0800450c
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x36>
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e027      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	08004524 	.word	0x08004524
 8002c68:	08004534 	.word	0x08004534
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	0800451c 	.word	0x0800451c

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	@ (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	0800451c 	.word	0x0800451c

08002cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <RCC_Delay+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <RCC_Delay+0x38>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf0:	bf00      	nop
  }
  while (Delay --);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <RCC_Delay+0x1c>
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	f200 808a 	bhi.w	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d045      	beq.n	8002dcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d075      	beq.n	8002e32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d46:	e082      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d48:	4b46      	ldr	r3, [pc, #280]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d4e:	4b45      	ldr	r3, [pc, #276]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07b      	beq.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d72:	4b3c      	ldr	r3, [pc, #240]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0c5b      	lsrs	r3, r3, #17
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d8c:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db4:	d102      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	61bb      	str	r3, [r7, #24]
      break;
 8002dba:	e04a      	b.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
      break;
 8002dca:	e042      	b.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e01f      	b.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e08:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e1a:	d11c      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e28:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002e2c:	61bb      	str	r3, [r7, #24]
      break;
 8002e2e:	e012      	b.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e30:	e011      	b.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e32:	f7ff ff3b 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0b9b      	lsrs	r3, r3, #14
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	61bb      	str	r3, [r7, #24]
      break;
 8002e4c:	e004      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e56:	bf00      	nop
    }
  }
  return (frequency);
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08004538 	.word	0x08004538
 8002e6c:	08004548 	.word	0x08004548
 8002e70:	007a1200 	.word	0x007a1200
 8002e74:	003d0900 	.word	0x003d0900
 8002e78:	aaaaaaab 	.word	0xaaaaaaab

08002e7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RTC_GetTime+0x28>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b5      	b.n	8003014 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0ac      	b.n	8003014 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f90a 	bl	80030d4 <RTC_ReadTimeCounter>
 8002ec0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4a55      	ldr	r2, [pc, #340]	@ (800301c <HAL_RTC_GetTime+0x1a0>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0adb      	lsrs	r3, r3, #11
 8002ecc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4b52      	ldr	r3, [pc, #328]	@ (800301c <HAL_RTC_GetTime+0x1a0>)
 8002ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed6:	0adb      	lsrs	r3, r3, #11
 8002ed8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_RTC_GetTime+0x1a4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800301c <HAL_RTC_GetTime+0x1a0>)
 8002ef4:	fba2 1203 	umull	r1, r2, r2, r3
 8002ef8:	0ad2      	lsrs	r2, r2, #11
 8002efa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002efe:	fb01 f202 	mul.w	r2, r1, r2
 8002f02:	1a9a      	subs	r2, r3, r2
 8002f04:	4b46      	ldr	r3, [pc, #280]	@ (8003020 <HAL_RTC_GetTime+0x1a4>)
 8002f06:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0a:	0959      	lsrs	r1, r3, #5
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a5b      	subs	r3, r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	1ad1      	subs	r1, r2, r3
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b17      	cmp	r3, #23
 8002f20:	d955      	bls.n	8002fce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4a3f      	ldr	r2, [pc, #252]	@ (8003024 <HAL_RTC_GetTime+0x1a8>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002f2e:	6939      	ldr	r1, [r7, #16]
 8002f30:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <HAL_RTC_GetTime+0x1a8>)
 8002f32:	fba3 2301 	umull	r2, r3, r3, r1
 8002f36:	091a      	lsrs	r2, r3, #4
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1aca      	subs	r2, r1, r3
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f91a 	bl	8003182 <RTC_ReadAlarmCounter>
 8002f4e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d008      	beq.n	8002f6a <HAL_RTC_GetTime+0xee>
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d904      	bls.n	8002f6a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	e002      	b.n	8002f70 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	4a2d      	ldr	r2, [pc, #180]	@ (8003028 <HAL_RTC_GetTime+0x1ac>)
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f8d7 	bl	8003134 <RTC_WriteTimeCounter>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e041      	b.n	8003014 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d00c      	beq.n	8002fb2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002fa0:	69f9      	ldr	r1, [r7, #28]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f906 	bl	80031b4 <RTC_WriteAlarmCounter>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e030      	b.n	8003014 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002fb2:	69f9      	ldr	r1, [r7, #28]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8fd 	bl	80031b4 <RTC_WriteAlarmCounter>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e027      	b.n	8003014 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002fc4:	6979      	ldr	r1, [r7, #20]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f988 	bl	80032dc <RTC_DateUpdate>
 8002fcc:	e003      	b.n	8002fd6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01a      	beq.n	8003012 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f95e 	bl	80032a2 <RTC_ByteToBcd2>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f955 	bl	80032a2 <RTC_ByteToBcd2>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	789b      	ldrb	r3, [r3, #2]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f94c 	bl	80032a2 <RTC_ByteToBcd2>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	91a2b3c5 	.word	0x91a2b3c5
 8003020:	88888889 	.word	0x88888889
 8003024:	aaaaaaab 	.word	0xaaaaaaab
 8003028:	00015180 	.word	0x00015180

0800302c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2100      	movs	r1, #0
 800303e:	460a      	mov	r2, r1
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	460a      	mov	r2, r1
 8003044:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_RTC_GetDate+0x26>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e03a      	b.n	80030cc <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003056:	f107 0314 	add.w	r3, r7, #20
 800305a:	2200      	movs	r2, #0
 800305c:	4619      	mov	r1, r3
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff0c 	bl	8002e7c <HAL_RTC_GetTime>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02e      	b.n	80030cc <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	7b1a      	ldrb	r2, [r3, #12]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	7bda      	ldrb	r2, [r3, #15]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	7b5a      	ldrb	r2, [r3, #13]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	7b9a      	ldrb	r2, [r3, #14]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01a      	beq.n	80030ca <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	78db      	ldrb	r3, [r3, #3]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f902 	bl	80032a2 <RTC_ByteToBcd2>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f8f9 	bl	80032a2 <RTC_ByteToBcd2>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f8f0 	bl	80032a2 <RTC_ByteToBcd2>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	827b      	strh	r3, [r7, #18]
 80030e0:	2300      	movs	r3, #0
 80030e2:	823b      	strh	r3, [r7, #16]
 80030e4:	2300      	movs	r3, #0
 80030e6:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003104:	8a7a      	ldrh	r2, [r7, #18]
 8003106:	8a3b      	ldrh	r3, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	d008      	beq.n	800311e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800310c:	8a3b      	ldrh	r3, [r7, #16]
 800310e:	041a      	lsls	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e004      	b.n	8003128 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800311e:	8a7b      	ldrh	r3, [r7, #18]
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003128:	697b      	ldr	r3, [r7, #20]
}
 800312a:	4618      	mov	r0, r3
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f85d 	bl	8003202 <RTC_EnterInitMode>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e011      	b.n	8003178 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	0c12      	lsrs	r2, r2, #16
 800315c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	b292      	uxth	r2, r2
 8003166:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f872 	bl	8003252 <RTC_ExitInitMode>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	81fb      	strh	r3, [r7, #14]
 800318e:	2300      	movs	r3, #0
 8003190:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80031a2:	89fb      	ldrh	r3, [r7, #14]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	89bb      	ldrh	r3, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f81d 	bl	8003202 <RTC_EnterInitMode>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e011      	b.n	80031f8 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	0c12      	lsrs	r2, r2, #16
 80031dc:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	b292      	uxth	r2, r2
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f832 	bl	8003252 <RTC_ExitInitMode>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800320e:	f7fd ff0b 	bl	8001028 <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003214:	e009      	b.n	800322a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003216:	f7fd ff07 	bl	8001028 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003224:	d901      	bls.n	800322a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e00f      	b.n	800324a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ee      	beq.n	8003216 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0210 	orr.w	r2, r2, #16
 8003246:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0210 	bic.w	r2, r2, #16
 800326c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800326e:	f7fd fedb 	bl	8001028 <HAL_GetTick>
 8003272:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003274:	e009      	b.n	800328a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003276:	f7fd fed7 	bl	8001028 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003284:	d901      	bls.n	800328a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e007      	b.n	800329a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ee      	beq.n	8003276 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80032b0:	e005      	b.n	80032be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	3b0a      	subs	r3, #10
 80032bc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d8f6      	bhi.n	80032b2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b2db      	uxtb	r3, r3
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7bdb      	ldrb	r3, [r3, #15]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7b5b      	ldrb	r3, [r3, #13]
 8003300:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7b9b      	ldrb	r3, [r3, #14]
 8003306:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e06f      	b.n	80033ee <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d011      	beq.n	8003338 <RTC_DateUpdate+0x5c>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d00e      	beq.n	8003338 <RTC_DateUpdate+0x5c>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d00b      	beq.n	8003338 <RTC_DateUpdate+0x5c>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d008      	beq.n	8003338 <RTC_DateUpdate+0x5c>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d005      	beq.n	8003338 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0a      	cmp	r3, #10
 8003330:	d002      	beq.n	8003338 <RTC_DateUpdate+0x5c>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d117      	bne.n	8003368 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b1e      	cmp	r3, #30
 800333c:	d803      	bhi.n	8003346 <RTC_DateUpdate+0x6a>
      {
        day++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3301      	adds	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003344:	e050      	b.n	80033e8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d005      	beq.n	8003358 <RTC_DateUpdate+0x7c>
        {
          month++;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3301      	adds	r3, #1
 8003350:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003352:	2301      	movs	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003356:	e047      	b.n	80033e8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003358:	2301      	movs	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800335c:	2301      	movs	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
          year++;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003366:	e03f      	b.n	80033e8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d008      	beq.n	8003380 <RTC_DateUpdate+0xa4>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d005      	beq.n	8003380 <RTC_DateUpdate+0xa4>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b09      	cmp	r3, #9
 8003378:	d002      	beq.n	8003380 <RTC_DateUpdate+0xa4>
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b0b      	cmp	r3, #11
 800337e:	d10c      	bne.n	800339a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b1d      	cmp	r3, #29
 8003384:	d803      	bhi.n	800338e <RTC_DateUpdate+0xb2>
      {
        day++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800338c:	e02c      	b.n	80033e8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3301      	adds	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003394:	2301      	movs	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003398:	e026      	b.n	80033e8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b1b      	cmp	r3, #27
 80033a4:	d803      	bhi.n	80033ae <RTC_DateUpdate+0xd2>
      {
        day++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e01c      	b.n	80033e8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b1c      	cmp	r3, #28
 80033b2:	d111      	bne.n	80033d8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f839 	bl	8003430 <RTC_IsLeapYear>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <RTC_DateUpdate+0xf0>
        {
          day++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e00d      	b.n	80033e8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3301      	adds	r3, #1
 80033d0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033d2:	2301      	movs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e007      	b.n	80033e8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b1d      	cmp	r3, #29
 80033dc:	d104      	bne.n	80033e8 <RTC_DateUpdate+0x10c>
      {
        month++;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3301      	adds	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d38b      	bcc.n	800330e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f000 f83b 	bl	8003494 <RTC_WeekDayNum>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	731a      	strb	r2, [r3, #12]
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	e01d      	b.n	8003486 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <RTC_IsLeapYear+0x60>)
 800344e:	fba2 1203 	umull	r1, r2, r2, r3
 8003452:	0952      	lsrs	r2, r2, #5
 8003454:	2164      	movs	r1, #100	@ 0x64
 8003456:	fb01 f202 	mul.w	r2, r1, r2
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4a09      	ldr	r2, [pc, #36]	@ (8003490 <RTC_IsLeapYear+0x60>)
 800346a:	fba2 1203 	umull	r1, r2, r2, r3
 800346e:	09d2      	lsrs	r2, r2, #7
 8003470:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003474:	fb01 f202 	mul.w	r2, r1, r2
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003484:	2300      	movs	r3, #0
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	51eb851f 	.word	0x51eb851f

08003494 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80034b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d82d      	bhi.n	8003516 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003578 <RTC_WeekDayNum+0xe4>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	085a      	lsrs	r2, r3, #1
 80034ce:	78bb      	ldrb	r3, [r7, #2]
 80034d0:	441a      	add	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	441a      	add	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3b01      	subs	r3, #1
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4926      	ldr	r1, [pc, #152]	@ (800357c <RTC_WeekDayNum+0xe8>)
 80034e4:	fba1 1303 	umull	r1, r3, r1, r3
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	4922      	ldr	r1, [pc, #136]	@ (800357c <RTC_WeekDayNum+0xe8>)
 80034f2:	fba1 1303 	umull	r1, r3, r1, r3
 80034f6:	09db      	lsrs	r3, r3, #7
 80034f8:	4413      	add	r3, r2
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <RTC_WeekDayNum+0xec>)
 80034fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003502:	1ad1      	subs	r1, r2, r3
 8003504:	0849      	lsrs	r1, r1, #1
 8003506:	440b      	add	r3, r1
 8003508:	0899      	lsrs	r1, r3, #2
 800350a:	460b      	mov	r3, r1
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a5b      	subs	r3, r3, r1
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e029      	b.n	800356a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <RTC_WeekDayNum+0xe4>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	085a      	lsrs	r2, r3, #1
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	441a      	add	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	441a      	add	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4910      	ldr	r1, [pc, #64]	@ (800357c <RTC_WeekDayNum+0xe8>)
 800353c:	fba1 1303 	umull	r1, r3, r1, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	490d      	ldr	r1, [pc, #52]	@ (800357c <RTC_WeekDayNum+0xe8>)
 8003548:	fba1 1303 	umull	r1, r3, r1, r3
 800354c:	09db      	lsrs	r3, r3, #7
 800354e:	4413      	add	r3, r2
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <RTC_WeekDayNum+0xec>)
 8003554:	fba3 1302 	umull	r1, r3, r3, r2
 8003558:	1ad1      	subs	r1, r2, r3
 800355a:	0849      	lsrs	r1, r1, #1
 800355c:	440b      	add	r3, r1
 800355e:	0899      	lsrs	r1, r3, #2
 8003560:	460b      	mov	r3, r1
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a5b      	subs	r3, r3, r1
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	b2db      	uxtb	r3, r3
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	38e38e39 	.word	0x38e38e39
 800357c:	51eb851f 	.word	0x51eb851f
 8003580:	24924925 	.word	0x24924925

08003584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e076      	b.n	8003684 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035a6:	d009      	beq.n	80035bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
 80035ae:	e005      	b.n	80035bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fb42 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	0c1a      	lsrs	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 0204 	and.w	r2, r2, #4
 8003662:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003672:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e042      	b.n	8003724 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fb2e 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	@ 0x24
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f971 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	@ 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d175      	bne.n	8003838 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x2c>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e06e      	b.n	800383a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	@ 0x21
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fc5d 	bl	8001028 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	d108      	bne.n	8003798 <HAL_UART_Transmit+0x6c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e003      	b.n	80037a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a0:	e02e      	b.n	8003800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f848 	bl	8003842 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e03a      	b.n	800383a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3302      	adds	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e007      	b.n	80037f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cb      	bne.n	80037a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	@ 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f814 	bl	8003842 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	e03b      	b.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d037      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385c:	f7fd fbe4 	bl	8001028 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	6a3a      	ldr	r2, [r7, #32]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <UART_WaitOnFlagUntilTimeout+0x30>
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e03a      	b.n	80038ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b80      	cmp	r3, #128	@ 0x80
 8003888:	d020      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d01d      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d116      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f81d 	bl	80038f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2208      	movs	r2, #8
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e00f      	b.n	80038ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d0b4      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b095      	sub	sp, #84	@ 0x54
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391c:	643a      	str	r2, [r7, #64]	@ 0x40
 800391e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e5      	bne.n	80038fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	2b01      	cmp	r3, #1
 800396a:	d119      	bne.n	80039a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	60bb      	str	r3, [r7, #8]
   return(result);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	647b      	str	r3, [r7, #68]	@ 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800398c:	61ba      	str	r2, [r7, #24]
 800398e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6979      	ldr	r1, [r7, #20]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	613b      	str	r3, [r7, #16]
   return(result);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e5      	bne.n	800396c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ae:	bf00      	nop
 80039b0:	3754      	adds	r7, #84	@ 0x54
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003acc <UART_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d103      	bne.n	8003a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff f944 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	e002      	b.n	8003a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7ff f92c 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	0119      	lsls	r1, r3, #4
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009a      	lsls	r2, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a66:	fba3 0302 	umull	r0, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2064      	movs	r0, #100	@ 0x64
 8003a6e:	fb00 f303 	mul.w	r3, r0, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	@ 0x32
 8003a78:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a84:	4419      	add	r1, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2064      	movs	r0, #100	@ 0x64
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	@ 0x32
 8003ab0:	4a07      	ldr	r2, [pc, #28]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	51eb851f 	.word	0x51eb851f

08003ad4 <sniprintf>:
 8003ad4:	b40c      	push	{r2, r3}
 8003ad6:	b530      	push	{r4, r5, lr}
 8003ad8:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <sniprintf+0x68>)
 8003ada:	1e0c      	subs	r4, r1, #0
 8003adc:	681d      	ldr	r5, [r3, #0]
 8003ade:	b09d      	sub	sp, #116	@ 0x74
 8003ae0:	da08      	bge.n	8003af4 <sniprintf+0x20>
 8003ae2:	238b      	movs	r3, #139	@ 0x8b
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	b01d      	add	sp, #116	@ 0x74
 8003aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003af0:	b002      	add	sp, #8
 8003af2:	4770      	bx	lr
 8003af4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003b02:	bf0c      	ite	eq
 8003b04:	4623      	moveq	r3, r4
 8003b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b0a:	9304      	str	r3, [sp, #16]
 8003b0c:	9307      	str	r3, [sp, #28]
 8003b0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b12:	9002      	str	r0, [sp, #8]
 8003b14:	9006      	str	r0, [sp, #24]
 8003b16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	ab21      	add	r3, sp, #132	@ 0x84
 8003b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b20:	a902      	add	r1, sp, #8
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f000 f992 	bl	8003e4c <_svfiprintf_r>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	bfbc      	itt	lt
 8003b2c:	238b      	movlt	r3, #139	@ 0x8b
 8003b2e:	602b      	strlt	r3, [r5, #0]
 8003b30:	2c00      	cmp	r4, #0
 8003b32:	d0da      	beq.n	8003aea <sniprintf+0x16>
 8003b34:	2200      	movs	r2, #0
 8003b36:	9b02      	ldr	r3, [sp, #8]
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e7d6      	b.n	8003aea <sniprintf+0x16>
 8003b3c:	20000014 	.word	0x20000014

08003b40 <memset>:
 8003b40:	4603      	mov	r3, r0
 8003b42:	4402      	add	r2, r0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d100      	bne.n	8003b4a <memset+0xa>
 8003b48:	4770      	bx	lr
 8003b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4e:	e7f9      	b.n	8003b44 <memset+0x4>

08003b50 <__errno>:
 8003b50:	4b01      	ldr	r3, [pc, #4]	@ (8003b58 <__errno+0x8>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000014 	.word	0x20000014

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	2600      	movs	r6, #0
 8003b60:	4d0c      	ldr	r5, [pc, #48]	@ (8003b94 <__libc_init_array+0x38>)
 8003b62:	4c0d      	ldr	r4, [pc, #52]	@ (8003b98 <__libc_init_array+0x3c>)
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	f000 fc76 	bl	800445c <_init>
 8003b70:	2600      	movs	r6, #0
 8003b72:	4d0a      	ldr	r5, [pc, #40]	@ (8003b9c <__libc_init_array+0x40>)
 8003b74:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba0 <__libc_init_array+0x44>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08004588 	.word	0x08004588
 8003b98:	08004588 	.word	0x08004588
 8003b9c:	08004588 	.word	0x08004588
 8003ba0:	0800458c 	.word	0x0800458c

08003ba4 <__retarget_lock_acquire_recursive>:
 8003ba4:	4770      	bx	lr

08003ba6 <__retarget_lock_release_recursive>:
 8003ba6:	4770      	bx	lr

08003ba8 <_free_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d040      	beq.n	8003c32 <_free_r+0x8a>
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f0c      	subs	r4, r1, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	18e4      	addlt	r4, r4, r3
 8003bbc:	f000 f8de 	bl	8003d7c <__malloc_lock>
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <_free_r+0x8c>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	b933      	cbnz	r3, 8003bd4 <_free_r+0x2c>
 8003bc6:	6063      	str	r3, [r4, #4]
 8003bc8:	6014      	str	r4, [r2, #0]
 8003bca:	4628      	mov	r0, r5
 8003bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd0:	f000 b8da 	b.w	8003d88 <__malloc_unlock>
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d908      	bls.n	8003bea <_free_r+0x42>
 8003bd8:	6820      	ldr	r0, [r4, #0]
 8003bda:	1821      	adds	r1, r4, r0
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	bf01      	itttt	eq
 8003be0:	6819      	ldreq	r1, [r3, #0]
 8003be2:	685b      	ldreq	r3, [r3, #4]
 8003be4:	1809      	addeq	r1, r1, r0
 8003be6:	6021      	streq	r1, [r4, #0]
 8003be8:	e7ed      	b.n	8003bc6 <_free_r+0x1e>
 8003bea:	461a      	mov	r2, r3
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b10b      	cbz	r3, 8003bf4 <_free_r+0x4c>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d9fa      	bls.n	8003bea <_free_r+0x42>
 8003bf4:	6811      	ldr	r1, [r2, #0]
 8003bf6:	1850      	adds	r0, r2, r1
 8003bf8:	42a0      	cmp	r0, r4
 8003bfa:	d10b      	bne.n	8003c14 <_free_r+0x6c>
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	4401      	add	r1, r0
 8003c00:	1850      	adds	r0, r2, r1
 8003c02:	4283      	cmp	r3, r0
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	d1e0      	bne.n	8003bca <_free_r+0x22>
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4408      	add	r0, r1
 8003c0e:	6010      	str	r0, [r2, #0]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	e7da      	b.n	8003bca <_free_r+0x22>
 8003c14:	d902      	bls.n	8003c1c <_free_r+0x74>
 8003c16:	230c      	movs	r3, #12
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	e7d6      	b.n	8003bca <_free_r+0x22>
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	1821      	adds	r1, r4, r0
 8003c20:	428b      	cmp	r3, r1
 8003c22:	bf01      	itttt	eq
 8003c24:	6819      	ldreq	r1, [r3, #0]
 8003c26:	685b      	ldreq	r3, [r3, #4]
 8003c28:	1809      	addeq	r1, r1, r0
 8003c2a:	6021      	streq	r1, [r4, #0]
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	6054      	str	r4, [r2, #4]
 8003c30:	e7cb      	b.n	8003bca <_free_r+0x22>
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20000360 	.word	0x20000360

08003c38 <sbrk_aligned>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c78 <sbrk_aligned+0x40>)
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	6831      	ldr	r1, [r6, #0]
 8003c40:	4605      	mov	r5, r0
 8003c42:	b911      	cbnz	r1, 8003c4a <sbrk_aligned+0x12>
 8003c44:	f000 fba8 	bl	8004398 <_sbrk_r>
 8003c48:	6030      	str	r0, [r6, #0]
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f000 fba3 	bl	8004398 <_sbrk_r>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d103      	bne.n	8003c5e <sbrk_aligned+0x26>
 8003c56:	f04f 34ff 	mov.w	r4, #4294967295
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	1cc4      	adds	r4, r0, #3
 8003c60:	f024 0403 	bic.w	r4, r4, #3
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d0f8      	beq.n	8003c5a <sbrk_aligned+0x22>
 8003c68:	1a21      	subs	r1, r4, r0
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 fb94 	bl	8004398 <_sbrk_r>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d1f2      	bne.n	8003c5a <sbrk_aligned+0x22>
 8003c74:	e7ef      	b.n	8003c56 <sbrk_aligned+0x1e>
 8003c76:	bf00      	nop
 8003c78:	2000035c 	.word	0x2000035c

08003c7c <_malloc_r>:
 8003c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c80:	1ccd      	adds	r5, r1, #3
 8003c82:	f025 0503 	bic.w	r5, r5, #3
 8003c86:	3508      	adds	r5, #8
 8003c88:	2d0c      	cmp	r5, #12
 8003c8a:	bf38      	it	cc
 8003c8c:	250c      	movcc	r5, #12
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	4606      	mov	r6, r0
 8003c92:	db01      	blt.n	8003c98 <_malloc_r+0x1c>
 8003c94:	42a9      	cmp	r1, r5
 8003c96:	d904      	bls.n	8003ca2 <_malloc_r+0x26>
 8003c98:	230c      	movs	r3, #12
 8003c9a:	6033      	str	r3, [r6, #0]
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d78 <_malloc_r+0xfc>
 8003ca6:	f000 f869 	bl	8003d7c <__malloc_lock>
 8003caa:	f8d8 3000 	ldr.w	r3, [r8]
 8003cae:	461c      	mov	r4, r3
 8003cb0:	bb44      	cbnz	r4, 8003d04 <_malloc_r+0x88>
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f7ff ffbf 	bl	8003c38 <sbrk_aligned>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	d158      	bne.n	8003d72 <_malloc_r+0xf6>
 8003cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8003cc4:	4627      	mov	r7, r4
 8003cc6:	2f00      	cmp	r7, #0
 8003cc8:	d143      	bne.n	8003d52 <_malloc_r+0xd6>
 8003cca:	2c00      	cmp	r4, #0
 8003ccc:	d04b      	beq.n	8003d66 <_malloc_r+0xea>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	eb04 0903 	add.w	r9, r4, r3
 8003cd8:	f000 fb5e 	bl	8004398 <_sbrk_r>
 8003cdc:	4581      	cmp	r9, r0
 8003cde:	d142      	bne.n	8003d66 <_malloc_r+0xea>
 8003ce0:	6821      	ldr	r1, [r4, #0]
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	1a6d      	subs	r5, r5, r1
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7ff ffa6 	bl	8003c38 <sbrk_aligned>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d03a      	beq.n	8003d66 <_malloc_r+0xea>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	442b      	add	r3, r5
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	bb62      	cbnz	r2, 8003d58 <_malloc_r+0xdc>
 8003cfe:	f8c8 7000 	str.w	r7, [r8]
 8003d02:	e00f      	b.n	8003d24 <_malloc_r+0xa8>
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	1b52      	subs	r2, r2, r5
 8003d08:	d420      	bmi.n	8003d4c <_malloc_r+0xd0>
 8003d0a:	2a0b      	cmp	r2, #11
 8003d0c:	d917      	bls.n	8003d3e <_malloc_r+0xc2>
 8003d0e:	1961      	adds	r1, r4, r5
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	6025      	str	r5, [r4, #0]
 8003d14:	bf18      	it	ne
 8003d16:	6059      	strne	r1, [r3, #4]
 8003d18:	6863      	ldr	r3, [r4, #4]
 8003d1a:	bf08      	it	eq
 8003d1c:	f8c8 1000 	streq.w	r1, [r8]
 8003d20:	5162      	str	r2, [r4, r5]
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	4630      	mov	r0, r6
 8003d26:	f000 f82f 	bl	8003d88 <__malloc_unlock>
 8003d2a:	f104 000b 	add.w	r0, r4, #11
 8003d2e:	1d23      	adds	r3, r4, #4
 8003d30:	f020 0007 	bic.w	r0, r0, #7
 8003d34:	1ac2      	subs	r2, r0, r3
 8003d36:	bf1c      	itt	ne
 8003d38:	1a1b      	subne	r3, r3, r0
 8003d3a:	50a3      	strne	r3, [r4, r2]
 8003d3c:	e7af      	b.n	8003c9e <_malloc_r+0x22>
 8003d3e:	6862      	ldr	r2, [r4, #4]
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	bf0c      	ite	eq
 8003d44:	f8c8 2000 	streq.w	r2, [r8]
 8003d48:	605a      	strne	r2, [r3, #4]
 8003d4a:	e7eb      	b.n	8003d24 <_malloc_r+0xa8>
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	6864      	ldr	r4, [r4, #4]
 8003d50:	e7ae      	b.n	8003cb0 <_malloc_r+0x34>
 8003d52:	463c      	mov	r4, r7
 8003d54:	687f      	ldr	r7, [r7, #4]
 8003d56:	e7b6      	b.n	8003cc6 <_malloc_r+0x4a>
 8003d58:	461a      	mov	r2, r3
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d1fb      	bne.n	8003d58 <_malloc_r+0xdc>
 8003d60:	2300      	movs	r3, #0
 8003d62:	6053      	str	r3, [r2, #4]
 8003d64:	e7de      	b.n	8003d24 <_malloc_r+0xa8>
 8003d66:	230c      	movs	r3, #12
 8003d68:	4630      	mov	r0, r6
 8003d6a:	6033      	str	r3, [r6, #0]
 8003d6c:	f000 f80c 	bl	8003d88 <__malloc_unlock>
 8003d70:	e794      	b.n	8003c9c <_malloc_r+0x20>
 8003d72:	6005      	str	r5, [r0, #0]
 8003d74:	e7d6      	b.n	8003d24 <_malloc_r+0xa8>
 8003d76:	bf00      	nop
 8003d78:	20000360 	.word	0x20000360

08003d7c <__malloc_lock>:
 8003d7c:	4801      	ldr	r0, [pc, #4]	@ (8003d84 <__malloc_lock+0x8>)
 8003d7e:	f7ff bf11 	b.w	8003ba4 <__retarget_lock_acquire_recursive>
 8003d82:	bf00      	nop
 8003d84:	20000358 	.word	0x20000358

08003d88 <__malloc_unlock>:
 8003d88:	4801      	ldr	r0, [pc, #4]	@ (8003d90 <__malloc_unlock+0x8>)
 8003d8a:	f7ff bf0c 	b.w	8003ba6 <__retarget_lock_release_recursive>
 8003d8e:	bf00      	nop
 8003d90:	20000358 	.word	0x20000358

08003d94 <__ssputs_r>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	461f      	mov	r7, r3
 8003d9a:	688e      	ldr	r6, [r1, #8]
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	42be      	cmp	r6, r7
 8003da0:	460c      	mov	r4, r1
 8003da2:	4690      	mov	r8, r2
 8003da4:	680b      	ldr	r3, [r1, #0]
 8003da6:	d82d      	bhi.n	8003e04 <__ssputs_r+0x70>
 8003da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003dac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003db0:	d026      	beq.n	8003e00 <__ssputs_r+0x6c>
 8003db2:	6965      	ldr	r5, [r4, #20]
 8003db4:	6909      	ldr	r1, [r1, #16]
 8003db6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dba:	eba3 0901 	sub.w	r9, r3, r1
 8003dbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dc2:	1c7b      	adds	r3, r7, #1
 8003dc4:	444b      	add	r3, r9
 8003dc6:	106d      	asrs	r5, r5, #1
 8003dc8:	429d      	cmp	r5, r3
 8003dca:	bf38      	it	cc
 8003dcc:	461d      	movcc	r5, r3
 8003dce:	0553      	lsls	r3, r2, #21
 8003dd0:	d527      	bpl.n	8003e22 <__ssputs_r+0x8e>
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7ff ff52 	bl	8003c7c <_malloc_r>
 8003dd8:	4606      	mov	r6, r0
 8003dda:	b360      	cbz	r0, 8003e36 <__ssputs_r+0xa2>
 8003ddc:	464a      	mov	r2, r9
 8003dde:	6921      	ldr	r1, [r4, #16]
 8003de0:	f000 faf8 	bl	80043d4 <memcpy>
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	6126      	str	r6, [r4, #16]
 8003df2:	444e      	add	r6, r9
 8003df4:	6026      	str	r6, [r4, #0]
 8003df6:	463e      	mov	r6, r7
 8003df8:	6165      	str	r5, [r4, #20]
 8003dfa:	eba5 0509 	sub.w	r5, r5, r9
 8003dfe:	60a5      	str	r5, [r4, #8]
 8003e00:	42be      	cmp	r6, r7
 8003e02:	d900      	bls.n	8003e06 <__ssputs_r+0x72>
 8003e04:	463e      	mov	r6, r7
 8003e06:	4632      	mov	r2, r6
 8003e08:	4641      	mov	r1, r8
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	f000 faaa 	bl	8004364 <memmove>
 8003e10:	2000      	movs	r0, #0
 8003e12:	68a3      	ldr	r3, [r4, #8]
 8003e14:	1b9b      	subs	r3, r3, r6
 8003e16:	60a3      	str	r3, [r4, #8]
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	4433      	add	r3, r6
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e22:	462a      	mov	r2, r5
 8003e24:	f000 fae4 	bl	80043f0 <_realloc_r>
 8003e28:	4606      	mov	r6, r0
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d1e0      	bne.n	8003df0 <__ssputs_r+0x5c>
 8003e2e:	4650      	mov	r0, sl
 8003e30:	6921      	ldr	r1, [r4, #16]
 8003e32:	f7ff feb9 	bl	8003ba8 <_free_r>
 8003e36:	230c      	movs	r3, #12
 8003e38:	f8ca 3000 	str.w	r3, [sl]
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	e7e9      	b.n	8003e1e <__ssputs_r+0x8a>
	...

08003e4c <_svfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	4698      	mov	r8, r3
 8003e52:	898b      	ldrh	r3, [r1, #12]
 8003e54:	4607      	mov	r7, r0
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	b09d      	sub	sp, #116	@ 0x74
 8003e5e:	d510      	bpl.n	8003e82 <_svfiprintf_r+0x36>
 8003e60:	690b      	ldr	r3, [r1, #16]
 8003e62:	b973      	cbnz	r3, 8003e82 <_svfiprintf_r+0x36>
 8003e64:	2140      	movs	r1, #64	@ 0x40
 8003e66:	f7ff ff09 	bl	8003c7c <_malloc_r>
 8003e6a:	6028      	str	r0, [r5, #0]
 8003e6c:	6128      	str	r0, [r5, #16]
 8003e6e:	b930      	cbnz	r0, 8003e7e <_svfiprintf_r+0x32>
 8003e70:	230c      	movs	r3, #12
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	b01d      	add	sp, #116	@ 0x74
 8003e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7e:	2340      	movs	r3, #64	@ 0x40
 8003e80:	616b      	str	r3, [r5, #20]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e86:	2320      	movs	r3, #32
 8003e88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e8c:	2330      	movs	r3, #48	@ 0x30
 8003e8e:	f04f 0901 	mov.w	r9, #1
 8003e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004030 <_svfiprintf_r+0x1e4>
 8003e9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea6:	b10a      	cbz	r2, 8003eac <_svfiprintf_r+0x60>
 8003ea8:	2a25      	cmp	r2, #37	@ 0x25
 8003eaa:	d1f9      	bne.n	8003ea0 <_svfiprintf_r+0x54>
 8003eac:	ebba 0b04 	subs.w	fp, sl, r4
 8003eb0:	d00b      	beq.n	8003eca <_svfiprintf_r+0x7e>
 8003eb2:	465b      	mov	r3, fp
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	4638      	mov	r0, r7
 8003eba:	f7ff ff6b 	bl	8003d94 <__ssputs_r>
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	f000 80a7 	beq.w	8004012 <_svfiprintf_r+0x1c6>
 8003ec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ec6:	445a      	add	r2, fp
 8003ec8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eca:	f89a 3000 	ldrb.w	r3, [sl]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 809f 	beq.w	8004012 <_svfiprintf_r+0x1c6>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ede:	f10a 0a01 	add.w	sl, sl, #1
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	9307      	str	r3, [sp, #28]
 8003ee6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eea:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eec:	4654      	mov	r4, sl
 8003eee:	2205      	movs	r2, #5
 8003ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef4:	484e      	ldr	r0, [pc, #312]	@ (8004030 <_svfiprintf_r+0x1e4>)
 8003ef6:	f000 fa5f 	bl	80043b8 <memchr>
 8003efa:	9a04      	ldr	r2, [sp, #16]
 8003efc:	b9d8      	cbnz	r0, 8003f36 <_svfiprintf_r+0xea>
 8003efe:	06d0      	lsls	r0, r2, #27
 8003f00:	bf44      	itt	mi
 8003f02:	2320      	movmi	r3, #32
 8003f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f08:	0711      	lsls	r1, r2, #28
 8003f0a:	bf44      	itt	mi
 8003f0c:	232b      	movmi	r3, #43	@ 0x2b
 8003f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f12:	f89a 3000 	ldrb.w	r3, [sl]
 8003f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f18:	d015      	beq.n	8003f46 <_svfiprintf_r+0xfa>
 8003f1a:	4654      	mov	r4, sl
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f04f 0c0a 	mov.w	ip, #10
 8003f22:	9a07      	ldr	r2, [sp, #28]
 8003f24:	4621      	mov	r1, r4
 8003f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f2a:	3b30      	subs	r3, #48	@ 0x30
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	d94b      	bls.n	8003fc8 <_svfiprintf_r+0x17c>
 8003f30:	b1b0      	cbz	r0, 8003f60 <_svfiprintf_r+0x114>
 8003f32:	9207      	str	r2, [sp, #28]
 8003f34:	e014      	b.n	8003f60 <_svfiprintf_r+0x114>
 8003f36:	eba0 0308 	sub.w	r3, r0, r8
 8003f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	46a2      	mov	sl, r4
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	e7d2      	b.n	8003eec <_svfiprintf_r+0xa0>
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	1d19      	adds	r1, r3, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	9103      	str	r1, [sp, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bfbb      	ittet	lt
 8003f52:	425b      	neglt	r3, r3
 8003f54:	f042 0202 	orrlt.w	r2, r2, #2
 8003f58:	9307      	strge	r3, [sp, #28]
 8003f5a:	9307      	strlt	r3, [sp, #28]
 8003f5c:	bfb8      	it	lt
 8003f5e:	9204      	strlt	r2, [sp, #16]
 8003f60:	7823      	ldrb	r3, [r4, #0]
 8003f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f64:	d10a      	bne.n	8003f7c <_svfiprintf_r+0x130>
 8003f66:	7863      	ldrb	r3, [r4, #1]
 8003f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f6a:	d132      	bne.n	8003fd2 <_svfiprintf_r+0x186>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	3402      	adds	r4, #2
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	9203      	str	r2, [sp, #12]
 8003f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004034 <_svfiprintf_r+0x1e8>
 8003f80:	2203      	movs	r2, #3
 8003f82:	4650      	mov	r0, sl
 8003f84:	7821      	ldrb	r1, [r4, #0]
 8003f86:	f000 fa17 	bl	80043b8 <memchr>
 8003f8a:	b138      	cbz	r0, 8003f9c <_svfiprintf_r+0x150>
 8003f8c:	2240      	movs	r2, #64	@ 0x40
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	eba0 000a 	sub.w	r0, r0, sl
 8003f94:	4082      	lsls	r2, r0
 8003f96:	4313      	orrs	r3, r2
 8003f98:	3401      	adds	r4, #1
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	4825      	ldr	r0, [pc, #148]	@ (8004038 <_svfiprintf_r+0x1ec>)
 8003fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fa8:	f000 fa06 	bl	80043b8 <memchr>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d036      	beq.n	800401e <_svfiprintf_r+0x1d2>
 8003fb0:	4b22      	ldr	r3, [pc, #136]	@ (800403c <_svfiprintf_r+0x1f0>)
 8003fb2:	bb1b      	cbnz	r3, 8003ffc <_svfiprintf_r+0x1b0>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	3307      	adds	r3, #7
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc2:	4433      	add	r3, r6
 8003fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc6:	e76a      	b.n	8003e9e <_svfiprintf_r+0x52>
 8003fc8:	460c      	mov	r4, r1
 8003fca:	2001      	movs	r0, #1
 8003fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd0:	e7a8      	b.n	8003f24 <_svfiprintf_r+0xd8>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4619      	mov	r1, r3
 8003fda:	3401      	adds	r4, #1
 8003fdc:	9305      	str	r3, [sp, #20]
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe4:	3a30      	subs	r2, #48	@ 0x30
 8003fe6:	2a09      	cmp	r2, #9
 8003fe8:	d903      	bls.n	8003ff2 <_svfiprintf_r+0x1a6>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0c6      	beq.n	8003f7c <_svfiprintf_r+0x130>
 8003fee:	9105      	str	r1, [sp, #20]
 8003ff0:	e7c4      	b.n	8003f7c <_svfiprintf_r+0x130>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ffa:	e7f0      	b.n	8003fde <_svfiprintf_r+0x192>
 8003ffc:	ab03      	add	r3, sp, #12
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	462a      	mov	r2, r5
 8004002:	4638      	mov	r0, r7
 8004004:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <_svfiprintf_r+0x1f4>)
 8004006:	a904      	add	r1, sp, #16
 8004008:	f3af 8000 	nop.w
 800400c:	1c42      	adds	r2, r0, #1
 800400e:	4606      	mov	r6, r0
 8004010:	d1d6      	bne.n	8003fc0 <_svfiprintf_r+0x174>
 8004012:	89ab      	ldrh	r3, [r5, #12]
 8004014:	065b      	lsls	r3, r3, #25
 8004016:	f53f af2d 	bmi.w	8003e74 <_svfiprintf_r+0x28>
 800401a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800401c:	e72c      	b.n	8003e78 <_svfiprintf_r+0x2c>
 800401e:	ab03      	add	r3, sp, #12
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	462a      	mov	r2, r5
 8004024:	4638      	mov	r0, r7
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <_svfiprintf_r+0x1f4>)
 8004028:	a904      	add	r1, sp, #16
 800402a:	f000 f87d 	bl	8004128 <_printf_i>
 800402e:	e7ed      	b.n	800400c <_svfiprintf_r+0x1c0>
 8004030:	0800454a 	.word	0x0800454a
 8004034:	08004550 	.word	0x08004550
 8004038:	08004554 	.word	0x08004554
 800403c:	00000000 	.word	0x00000000
 8004040:	08003d95 	.word	0x08003d95

08004044 <_printf_common>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	4616      	mov	r6, r2
 800404a:	4698      	mov	r8, r3
 800404c:	688a      	ldr	r2, [r1, #8]
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	4607      	mov	r7, r0
 8004052:	4293      	cmp	r3, r2
 8004054:	bfb8      	it	lt
 8004056:	4613      	movlt	r3, r2
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800405e:	460c      	mov	r4, r1
 8004060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004064:	b10a      	cbz	r2, 800406a <_printf_common+0x26>
 8004066:	3301      	adds	r3, #1
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	0699      	lsls	r1, r3, #26
 800406e:	bf42      	ittt	mi
 8004070:	6833      	ldrmi	r3, [r6, #0]
 8004072:	3302      	addmi	r3, #2
 8004074:	6033      	strmi	r3, [r6, #0]
 8004076:	6825      	ldr	r5, [r4, #0]
 8004078:	f015 0506 	ands.w	r5, r5, #6
 800407c:	d106      	bne.n	800408c <_printf_common+0x48>
 800407e:	f104 0a19 	add.w	sl, r4, #25
 8004082:	68e3      	ldr	r3, [r4, #12]
 8004084:	6832      	ldr	r2, [r6, #0]
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	42ab      	cmp	r3, r5
 800408a:	dc2b      	bgt.n	80040e4 <_printf_common+0xa0>
 800408c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	3b00      	subs	r3, #0
 8004094:	bf18      	it	ne
 8004096:	2301      	movne	r3, #1
 8004098:	0692      	lsls	r2, r2, #26
 800409a:	d430      	bmi.n	80040fe <_printf_common+0xba>
 800409c:	4641      	mov	r1, r8
 800409e:	4638      	mov	r0, r7
 80040a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040a4:	47c8      	blx	r9
 80040a6:	3001      	adds	r0, #1
 80040a8:	d023      	beq.n	80040f2 <_printf_common+0xae>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	f003 0306 	and.w	r3, r3, #6
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf14      	ite	ne
 80040b6:	2500      	movne	r5, #0
 80040b8:	6833      	ldreq	r3, [r6, #0]
 80040ba:	f04f 0600 	mov.w	r6, #0
 80040be:	bf08      	it	eq
 80040c0:	68e5      	ldreq	r5, [r4, #12]
 80040c2:	f104 041a 	add.w	r4, r4, #26
 80040c6:	bf08      	it	eq
 80040c8:	1aed      	subeq	r5, r5, r3
 80040ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040ce:	bf08      	it	eq
 80040d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfc4      	itt	gt
 80040d8:	1a9b      	subgt	r3, r3, r2
 80040da:	18ed      	addgt	r5, r5, r3
 80040dc:	42b5      	cmp	r5, r6
 80040de:	d11a      	bne.n	8004116 <_printf_common+0xd2>
 80040e0:	2000      	movs	r0, #0
 80040e2:	e008      	b.n	80040f6 <_printf_common+0xb2>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4652      	mov	r2, sl
 80040e8:	4641      	mov	r1, r8
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c8      	blx	r9
 80040ee:	3001      	adds	r0, #1
 80040f0:	d103      	bne.n	80040fa <_printf_common+0xb6>
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fa:	3501      	adds	r5, #1
 80040fc:	e7c1      	b.n	8004082 <_printf_common+0x3e>
 80040fe:	2030      	movs	r0, #48	@ 0x30
 8004100:	18e1      	adds	r1, r4, r3
 8004102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800410c:	4422      	add	r2, r4
 800410e:	3302      	adds	r3, #2
 8004110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004114:	e7c2      	b.n	800409c <_printf_common+0x58>
 8004116:	2301      	movs	r3, #1
 8004118:	4622      	mov	r2, r4
 800411a:	4641      	mov	r1, r8
 800411c:	4638      	mov	r0, r7
 800411e:	47c8      	blx	r9
 8004120:	3001      	adds	r0, #1
 8004122:	d0e6      	beq.n	80040f2 <_printf_common+0xae>
 8004124:	3601      	adds	r6, #1
 8004126:	e7d9      	b.n	80040dc <_printf_common+0x98>

08004128 <_printf_i>:
 8004128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	7e0f      	ldrb	r7, [r1, #24]
 800412e:	4691      	mov	r9, r2
 8004130:	2f78      	cmp	r7, #120	@ 0x78
 8004132:	4680      	mov	r8, r0
 8004134:	460c      	mov	r4, r1
 8004136:	469a      	mov	sl, r3
 8004138:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800413a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800413e:	d807      	bhi.n	8004150 <_printf_i+0x28>
 8004140:	2f62      	cmp	r7, #98	@ 0x62
 8004142:	d80a      	bhi.n	800415a <_printf_i+0x32>
 8004144:	2f00      	cmp	r7, #0
 8004146:	f000 80d1 	beq.w	80042ec <_printf_i+0x1c4>
 800414a:	2f58      	cmp	r7, #88	@ 0x58
 800414c:	f000 80b8 	beq.w	80042c0 <_printf_i+0x198>
 8004150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004158:	e03a      	b.n	80041d0 <_printf_i+0xa8>
 800415a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800415e:	2b15      	cmp	r3, #21
 8004160:	d8f6      	bhi.n	8004150 <_printf_i+0x28>
 8004162:	a101      	add	r1, pc, #4	@ (adr r1, 8004168 <_printf_i+0x40>)
 8004164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041d5 	.word	0x080041d5
 8004170:	08004151 	.word	0x08004151
 8004174:	08004151 	.word	0x08004151
 8004178:	08004151 	.word	0x08004151
 800417c:	08004151 	.word	0x08004151
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004151 	.word	0x08004151
 8004188:	08004151 	.word	0x08004151
 800418c:	08004151 	.word	0x08004151
 8004190:	08004151 	.word	0x08004151
 8004194:	080042d3 	.word	0x080042d3
 8004198:	080041ff 	.word	0x080041ff
 800419c:	0800428d 	.word	0x0800428d
 80041a0:	08004151 	.word	0x08004151
 80041a4:	08004151 	.word	0x08004151
 80041a8:	080042f5 	.word	0x080042f5
 80041ac:	08004151 	.word	0x08004151
 80041b0:	080041ff 	.word	0x080041ff
 80041b4:	08004151 	.word	0x08004151
 80041b8:	08004151 	.word	0x08004151
 80041bc:	08004295 	.word	0x08004295
 80041c0:	6833      	ldr	r3, [r6, #0]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6032      	str	r2, [r6, #0]
 80041c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041d0:	2301      	movs	r3, #1
 80041d2:	e09c      	b.n	800430e <_printf_i+0x1e6>
 80041d4:	6833      	ldr	r3, [r6, #0]
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	1d19      	adds	r1, r3, #4
 80041da:	6031      	str	r1, [r6, #0]
 80041dc:	0606      	lsls	r6, r0, #24
 80041de:	d501      	bpl.n	80041e4 <_printf_i+0xbc>
 80041e0:	681d      	ldr	r5, [r3, #0]
 80041e2:	e003      	b.n	80041ec <_printf_i+0xc4>
 80041e4:	0645      	lsls	r5, r0, #25
 80041e6:	d5fb      	bpl.n	80041e0 <_printf_i+0xb8>
 80041e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041ec:	2d00      	cmp	r5, #0
 80041ee:	da03      	bge.n	80041f8 <_printf_i+0xd0>
 80041f0:	232d      	movs	r3, #45	@ 0x2d
 80041f2:	426d      	negs	r5, r5
 80041f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f8:	230a      	movs	r3, #10
 80041fa:	4858      	ldr	r0, [pc, #352]	@ (800435c <_printf_i+0x234>)
 80041fc:	e011      	b.n	8004222 <_printf_i+0xfa>
 80041fe:	6821      	ldr	r1, [r4, #0]
 8004200:	6833      	ldr	r3, [r6, #0]
 8004202:	0608      	lsls	r0, r1, #24
 8004204:	f853 5b04 	ldr.w	r5, [r3], #4
 8004208:	d402      	bmi.n	8004210 <_printf_i+0xe8>
 800420a:	0649      	lsls	r1, r1, #25
 800420c:	bf48      	it	mi
 800420e:	b2ad      	uxthmi	r5, r5
 8004210:	2f6f      	cmp	r7, #111	@ 0x6f
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	bf14      	ite	ne
 8004216:	230a      	movne	r3, #10
 8004218:	2308      	moveq	r3, #8
 800421a:	4850      	ldr	r0, [pc, #320]	@ (800435c <_printf_i+0x234>)
 800421c:	2100      	movs	r1, #0
 800421e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004222:	6866      	ldr	r6, [r4, #4]
 8004224:	2e00      	cmp	r6, #0
 8004226:	60a6      	str	r6, [r4, #8]
 8004228:	db05      	blt.n	8004236 <_printf_i+0x10e>
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	432e      	orrs	r6, r5
 800422e:	f021 0104 	bic.w	r1, r1, #4
 8004232:	6021      	str	r1, [r4, #0]
 8004234:	d04b      	beq.n	80042ce <_printf_i+0x1a6>
 8004236:	4616      	mov	r6, r2
 8004238:	fbb5 f1f3 	udiv	r1, r5, r3
 800423c:	fb03 5711 	mls	r7, r3, r1, r5
 8004240:	5dc7      	ldrb	r7, [r0, r7]
 8004242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004246:	462f      	mov	r7, r5
 8004248:	42bb      	cmp	r3, r7
 800424a:	460d      	mov	r5, r1
 800424c:	d9f4      	bls.n	8004238 <_printf_i+0x110>
 800424e:	2b08      	cmp	r3, #8
 8004250:	d10b      	bne.n	800426a <_printf_i+0x142>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07df      	lsls	r7, r3, #31
 8004256:	d508      	bpl.n	800426a <_printf_i+0x142>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6861      	ldr	r1, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	bfde      	ittt	le
 8004260:	2330      	movle	r3, #48	@ 0x30
 8004262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800426a:	1b92      	subs	r2, r2, r6
 800426c:	6122      	str	r2, [r4, #16]
 800426e:	464b      	mov	r3, r9
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	aa03      	add	r2, sp, #12
 800427a:	f7ff fee3 	bl	8004044 <_printf_common>
 800427e:	3001      	adds	r0, #1
 8004280:	d14a      	bne.n	8004318 <_printf_i+0x1f0>
 8004282:	f04f 30ff 	mov.w	r0, #4294967295
 8004286:	b004      	add	sp, #16
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	f043 0320 	orr.w	r3, r3, #32
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	2778      	movs	r7, #120	@ 0x78
 8004296:	4832      	ldr	r0, [pc, #200]	@ (8004360 <_printf_i+0x238>)
 8004298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	061f      	lsls	r7, r3, #24
 80042a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80042a6:	d402      	bmi.n	80042ae <_printf_i+0x186>
 80042a8:	065f      	lsls	r7, r3, #25
 80042aa:	bf48      	it	mi
 80042ac:	b2ad      	uxthmi	r5, r5
 80042ae:	6031      	str	r1, [r6, #0]
 80042b0:	07d9      	lsls	r1, r3, #31
 80042b2:	bf44      	itt	mi
 80042b4:	f043 0320 	orrmi.w	r3, r3, #32
 80042b8:	6023      	strmi	r3, [r4, #0]
 80042ba:	b11d      	cbz	r5, 80042c4 <_printf_i+0x19c>
 80042bc:	2310      	movs	r3, #16
 80042be:	e7ad      	b.n	800421c <_printf_i+0xf4>
 80042c0:	4826      	ldr	r0, [pc, #152]	@ (800435c <_printf_i+0x234>)
 80042c2:	e7e9      	b.n	8004298 <_printf_i+0x170>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	f023 0320 	bic.w	r3, r3, #32
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	e7f6      	b.n	80042bc <_printf_i+0x194>
 80042ce:	4616      	mov	r6, r2
 80042d0:	e7bd      	b.n	800424e <_printf_i+0x126>
 80042d2:	6833      	ldr	r3, [r6, #0]
 80042d4:	6825      	ldr	r5, [r4, #0]
 80042d6:	1d18      	adds	r0, r3, #4
 80042d8:	6961      	ldr	r1, [r4, #20]
 80042da:	6030      	str	r0, [r6, #0]
 80042dc:	062e      	lsls	r6, r5, #24
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	d501      	bpl.n	80042e6 <_printf_i+0x1be>
 80042e2:	6019      	str	r1, [r3, #0]
 80042e4:	e002      	b.n	80042ec <_printf_i+0x1c4>
 80042e6:	0668      	lsls	r0, r5, #25
 80042e8:	d5fb      	bpl.n	80042e2 <_printf_i+0x1ba>
 80042ea:	8019      	strh	r1, [r3, #0]
 80042ec:	2300      	movs	r3, #0
 80042ee:	4616      	mov	r6, r2
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	e7bc      	b.n	800426e <_printf_i+0x146>
 80042f4:	6833      	ldr	r3, [r6, #0]
 80042f6:	2100      	movs	r1, #0
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	6032      	str	r2, [r6, #0]
 80042fc:	681e      	ldr	r6, [r3, #0]
 80042fe:	6862      	ldr	r2, [r4, #4]
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f859 	bl	80043b8 <memchr>
 8004306:	b108      	cbz	r0, 800430c <_printf_i+0x1e4>
 8004308:	1b80      	subs	r0, r0, r6
 800430a:	6060      	str	r0, [r4, #4]
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	6123      	str	r3, [r4, #16]
 8004310:	2300      	movs	r3, #0
 8004312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004316:	e7aa      	b.n	800426e <_printf_i+0x146>
 8004318:	4632      	mov	r2, r6
 800431a:	4649      	mov	r1, r9
 800431c:	4640      	mov	r0, r8
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	47d0      	blx	sl
 8004322:	3001      	adds	r0, #1
 8004324:	d0ad      	beq.n	8004282 <_printf_i+0x15a>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	079b      	lsls	r3, r3, #30
 800432a:	d413      	bmi.n	8004354 <_printf_i+0x22c>
 800432c:	68e0      	ldr	r0, [r4, #12]
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	4298      	cmp	r0, r3
 8004332:	bfb8      	it	lt
 8004334:	4618      	movlt	r0, r3
 8004336:	e7a6      	b.n	8004286 <_printf_i+0x15e>
 8004338:	2301      	movs	r3, #1
 800433a:	4632      	mov	r2, r6
 800433c:	4649      	mov	r1, r9
 800433e:	4640      	mov	r0, r8
 8004340:	47d0      	blx	sl
 8004342:	3001      	adds	r0, #1
 8004344:	d09d      	beq.n	8004282 <_printf_i+0x15a>
 8004346:	3501      	adds	r5, #1
 8004348:	68e3      	ldr	r3, [r4, #12]
 800434a:	9903      	ldr	r1, [sp, #12]
 800434c:	1a5b      	subs	r3, r3, r1
 800434e:	42ab      	cmp	r3, r5
 8004350:	dcf2      	bgt.n	8004338 <_printf_i+0x210>
 8004352:	e7eb      	b.n	800432c <_printf_i+0x204>
 8004354:	2500      	movs	r5, #0
 8004356:	f104 0619 	add.w	r6, r4, #25
 800435a:	e7f5      	b.n	8004348 <_printf_i+0x220>
 800435c:	0800455b 	.word	0x0800455b
 8004360:	0800456c 	.word	0x0800456c

08004364 <memmove>:
 8004364:	4288      	cmp	r0, r1
 8004366:	b510      	push	{r4, lr}
 8004368:	eb01 0402 	add.w	r4, r1, r2
 800436c:	d902      	bls.n	8004374 <memmove+0x10>
 800436e:	4284      	cmp	r4, r0
 8004370:	4623      	mov	r3, r4
 8004372:	d807      	bhi.n	8004384 <memmove+0x20>
 8004374:	1e43      	subs	r3, r0, #1
 8004376:	42a1      	cmp	r1, r4
 8004378:	d008      	beq.n	800438c <memmove+0x28>
 800437a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800437e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004382:	e7f8      	b.n	8004376 <memmove+0x12>
 8004384:	4601      	mov	r1, r0
 8004386:	4402      	add	r2, r0
 8004388:	428a      	cmp	r2, r1
 800438a:	d100      	bne.n	800438e <memmove+0x2a>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004396:	e7f7      	b.n	8004388 <memmove+0x24>

08004398 <_sbrk_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	2300      	movs	r3, #0
 800439c:	4d05      	ldr	r5, [pc, #20]	@ (80043b4 <_sbrk_r+0x1c>)
 800439e:	4604      	mov	r4, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	602b      	str	r3, [r5, #0]
 80043a4:	f7fc fd72 	bl	8000e8c <_sbrk>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_sbrk_r+0x1a>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_sbrk_r+0x1a>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20000354 	.word	0x20000354

080043b8 <memchr>:
 80043b8:	4603      	mov	r3, r0
 80043ba:	b510      	push	{r4, lr}
 80043bc:	b2c9      	uxtb	r1, r1
 80043be:	4402      	add	r2, r0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	d101      	bne.n	80043ca <memchr+0x12>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e003      	b.n	80043d2 <memchr+0x1a>
 80043ca:	7804      	ldrb	r4, [r0, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	428c      	cmp	r4, r1
 80043d0:	d1f6      	bne.n	80043c0 <memchr+0x8>
 80043d2:	bd10      	pop	{r4, pc}

080043d4 <memcpy>:
 80043d4:	440a      	add	r2, r1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043dc:	d100      	bne.n	80043e0 <memcpy+0xc>
 80043de:	4770      	bx	lr
 80043e0:	b510      	push	{r4, lr}
 80043e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ec:	d1f9      	bne.n	80043e2 <memcpy+0xe>
 80043ee:	bd10      	pop	{r4, pc}

080043f0 <_realloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	4607      	mov	r7, r0
 80043f6:	4614      	mov	r4, r2
 80043f8:	460d      	mov	r5, r1
 80043fa:	b921      	cbnz	r1, 8004406 <_realloc_r+0x16>
 80043fc:	4611      	mov	r1, r2
 80043fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	f7ff bc3b 	b.w	8003c7c <_malloc_r>
 8004406:	b92a      	cbnz	r2, 8004414 <_realloc_r+0x24>
 8004408:	f7ff fbce 	bl	8003ba8 <_free_r>
 800440c:	4625      	mov	r5, r4
 800440e:	4628      	mov	r0, r5
 8004410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004414:	f000 f81a 	bl	800444c <_malloc_usable_size_r>
 8004418:	4284      	cmp	r4, r0
 800441a:	4606      	mov	r6, r0
 800441c:	d802      	bhi.n	8004424 <_realloc_r+0x34>
 800441e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004422:	d8f4      	bhi.n	800440e <_realloc_r+0x1e>
 8004424:	4621      	mov	r1, r4
 8004426:	4638      	mov	r0, r7
 8004428:	f7ff fc28 	bl	8003c7c <_malloc_r>
 800442c:	4680      	mov	r8, r0
 800442e:	b908      	cbnz	r0, 8004434 <_realloc_r+0x44>
 8004430:	4645      	mov	r5, r8
 8004432:	e7ec      	b.n	800440e <_realloc_r+0x1e>
 8004434:	42b4      	cmp	r4, r6
 8004436:	4622      	mov	r2, r4
 8004438:	4629      	mov	r1, r5
 800443a:	bf28      	it	cs
 800443c:	4632      	movcs	r2, r6
 800443e:	f7ff ffc9 	bl	80043d4 <memcpy>
 8004442:	4629      	mov	r1, r5
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff fbaf 	bl	8003ba8 <_free_r>
 800444a:	e7f1      	b.n	8004430 <_realloc_r+0x40>

0800444c <_malloc_usable_size_r>:
 800444c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004450:	1f18      	subs	r0, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfbc      	itt	lt
 8004456:	580b      	ldrlt	r3, [r1, r0]
 8004458:	18c0      	addlt	r0, r0, r3
 800445a:	4770      	bx	lr

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
