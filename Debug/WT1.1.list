
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d094  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800d1a8  0800d1a8  0000e1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da4c  0800da4c  0000f230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da54  0800da54  0000f230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da54  0800da54  0000ea54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da58  0800da58  0000ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800da5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000230  0800dc8c  0000f230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800dc8c  0000f7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a63  00000000  00000000  0000f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004684  00000000  00000000  00028cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c5  00000000  00000000  0002ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c771  00000000  00000000  00030035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9cd  00000000  00000000  0004c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997b5  00000000  00000000  0006c173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bb0  00000000  00000000  0010596c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d18c 	.word	0x0800d18c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800d18c 	.word	0x0800d18c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b98c 	b.w	80013b4 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	9d08      	ldr	r5, [sp, #32]
 80010ba:	468e      	mov	lr, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d14a      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	d962      	bls.n	8001190 <__udivmoddi4+0xdc>
 80010ca:	fab2 f682 	clz	r6, r2
 80010ce:	b14e      	cbz	r6, 80010e4 <__udivmoddi4+0x30>
 80010d0:	f1c6 0320 	rsb	r3, r6, #32
 80010d4:	fa01 f806 	lsl.w	r8, r1, r6
 80010d8:	fa20 f303 	lsr.w	r3, r0, r3
 80010dc:	40b7      	lsls	r7, r6
 80010de:	ea43 0808 	orr.w	r8, r3, r8
 80010e2:	40b4      	lsls	r4, r6
 80010e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80010f4:	fb01 f20c 	mul.w	r2, r1, ip
 80010f8:	0c23      	lsrs	r3, r4, #16
 80010fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010fe:	429a      	cmp	r2, r3
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x62>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f101 30ff 	add.w	r0, r1, #4294967295
 8001108:	f080 80eb 	bcs.w	80012e2 <__udivmoddi4+0x22e>
 800110c:	429a      	cmp	r2, r3
 800110e:	f240 80e8 	bls.w	80012e2 <__udivmoddi4+0x22e>
 8001112:	3902      	subs	r1, #2
 8001114:	443b      	add	r3, r7
 8001116:	1a9a      	subs	r2, r3, r2
 8001118:	fbb2 f0fe 	udiv	r0, r2, lr
 800111c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001120:	fb00 fc0c 	mul.w	ip, r0, ip
 8001124:	b2a3      	uxth	r3, r4
 8001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800112a:	459c      	cmp	ip, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	f080 80d7 	bcs.w	80012e6 <__udivmoddi4+0x232>
 8001138:	459c      	cmp	ip, r3
 800113a:	f240 80d4 	bls.w	80012e6 <__udivmoddi4+0x232>
 800113e:	443b      	add	r3, r7
 8001140:	3802      	subs	r0, #2
 8001142:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001146:	2100      	movs	r1, #0
 8001148:	eba3 030c 	sub.w	r3, r3, ip
 800114c:	b11d      	cbz	r5, 8001156 <__udivmoddi4+0xa2>
 800114e:	2200      	movs	r2, #0
 8001150:	40f3      	lsrs	r3, r6
 8001152:	e9c5 3200 	strd	r3, r2, [r5]
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d905      	bls.n	800116a <__udivmoddi4+0xb6>
 800115e:	b10d      	cbz	r5, 8001164 <__udivmoddi4+0xb0>
 8001160:	e9c5 0100 	strd	r0, r1, [r5]
 8001164:	2100      	movs	r1, #0
 8001166:	4608      	mov	r0, r1
 8001168:	e7f5      	b.n	8001156 <__udivmoddi4+0xa2>
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d146      	bne.n	8001200 <__udivmoddi4+0x14c>
 8001172:	4573      	cmp	r3, lr
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0xc8>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 8108 	bhi.w	800138c <__udivmoddi4+0x2d8>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001182:	2001      	movs	r0, #1
 8001184:	4690      	mov	r8, r2
 8001186:	2d00      	cmp	r5, #0
 8001188:	d0e5      	beq.n	8001156 <__udivmoddi4+0xa2>
 800118a:	e9c5 4800 	strd	r4, r8, [r5]
 800118e:	e7e2      	b.n	8001156 <__udivmoddi4+0xa2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	f000 8091 	beq.w	80012b8 <__udivmoddi4+0x204>
 8001196:	fab2 f682 	clz	r6, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	f040 80a5 	bne.w	80012ea <__udivmoddi4+0x236>
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	2101      	movs	r1, #1
 80011a4:	0c03      	lsrs	r3, r0, #16
 80011a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	b2bc      	uxth	r4, r7
 80011ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80011b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	fb04 f20c 	mul.w	r2, r4, ip
 80011be:	429a      	cmp	r2, r3
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x11e>
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x11c>
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f200 80e3 	bhi.w	8001396 <__udivmoddi4+0x2e2>
 80011d0:	46c4      	mov	ip, r8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80011d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80011dc:	fb02 f404 	mul.w	r4, r2, r4
 80011e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d907      	bls.n	80011f8 <__udivmoddi4+0x144>
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x142>
 80011f0:	429c      	cmp	r4, r3
 80011f2:	f200 80cd 	bhi.w	8001390 <__udivmoddi4+0x2dc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011fe:	e7a5      	b.n	800114c <__udivmoddi4+0x98>
 8001200:	f1c1 0620 	rsb	r6, r1, #32
 8001204:	408b      	lsls	r3, r1
 8001206:	fa22 f706 	lsr.w	r7, r2, r6
 800120a:	431f      	orrs	r7, r3
 800120c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001210:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001214:	fbba f8f9 	udiv	r8, sl, r9
 8001218:	fa0e fe01 	lsl.w	lr, lr, r1
 800121c:	fa20 f306 	lsr.w	r3, r0, r6
 8001220:	fb09 aa18 	mls	sl, r9, r8, sl
 8001224:	fa1f fc87 	uxth.w	ip, r7
 8001228:	ea43 030e 	orr.w	r3, r3, lr
 800122c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001230:	fb08 f00c 	mul.w	r0, r8, ip
 8001234:	0c1c      	lsrs	r4, r3, #16
 8001236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800123a:	42a0      	cmp	r0, r4
 800123c:	fa02 f201 	lsl.w	r2, r2, r1
 8001240:	d90a      	bls.n	8001258 <__udivmoddi4+0x1a4>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f108 3aff 	add.w	sl, r8, #4294967295
 8001248:	f080 809e 	bcs.w	8001388 <__udivmoddi4+0x2d4>
 800124c:	42a0      	cmp	r0, r4
 800124e:	f240 809b 	bls.w	8001388 <__udivmoddi4+0x2d4>
 8001252:	f1a8 0802 	sub.w	r8, r8, #2
 8001256:	443c      	add	r4, r7
 8001258:	1a24      	subs	r4, r4, r0
 800125a:	b298      	uxth	r0, r3
 800125c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001260:	fb09 4413 	mls	r4, r9, r3, r4
 8001264:	fb03 fc0c 	mul.w	ip, r3, ip
 8001268:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800126c:	45a4      	cmp	ip, r4
 800126e:	d909      	bls.n	8001284 <__udivmoddi4+0x1d0>
 8001270:	193c      	adds	r4, r7, r4
 8001272:	f103 30ff 	add.w	r0, r3, #4294967295
 8001276:	f080 8085 	bcs.w	8001384 <__udivmoddi4+0x2d0>
 800127a:	45a4      	cmp	ip, r4
 800127c:	f240 8082 	bls.w	8001384 <__udivmoddi4+0x2d0>
 8001280:	3b02      	subs	r3, #2
 8001282:	443c      	add	r4, r7
 8001284:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001288:	eba4 040c 	sub.w	r4, r4, ip
 800128c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001290:	4564      	cmp	r4, ip
 8001292:	4643      	mov	r3, r8
 8001294:	46e1      	mov	r9, ip
 8001296:	d364      	bcc.n	8001362 <__udivmoddi4+0x2ae>
 8001298:	d061      	beq.n	800135e <__udivmoddi4+0x2aa>
 800129a:	b15d      	cbz	r5, 80012b4 <__udivmoddi4+0x200>
 800129c:	ebbe 0203 	subs.w	r2, lr, r3
 80012a0:	eb64 0409 	sbc.w	r4, r4, r9
 80012a4:	fa04 f606 	lsl.w	r6, r4, r6
 80012a8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	40cc      	lsrs	r4, r1
 80012b0:	e9c5 6400 	strd	r6, r4, [r5]
 80012b4:	2100      	movs	r1, #0
 80012b6:	e74e      	b.n	8001156 <__udivmoddi4+0xa2>
 80012b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80012bc:	0c01      	lsrs	r1, r0, #16
 80012be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012c2:	b280      	uxth	r0, r0
 80012c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012c8:	463b      	mov	r3, r7
 80012ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80012ce:	4638      	mov	r0, r7
 80012d0:	463c      	mov	r4, r7
 80012d2:	46b8      	mov	r8, r7
 80012d4:	46be      	mov	lr, r7
 80012d6:	2620      	movs	r6, #32
 80012d8:	eba2 0208 	sub.w	r2, r2, r8
 80012dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e0:	e765      	b.n	80011ae <__udivmoddi4+0xfa>
 80012e2:	4601      	mov	r1, r0
 80012e4:	e717      	b.n	8001116 <__udivmoddi4+0x62>
 80012e6:	4610      	mov	r0, r2
 80012e8:	e72b      	b.n	8001142 <__udivmoddi4+0x8e>
 80012ea:	f1c6 0120 	rsb	r1, r6, #32
 80012ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80012f2:	40b7      	lsls	r7, r6
 80012f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	ea41 010e 	orr.w	r1, r1, lr
 8001300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001304:	fbbc f8fe 	udiv	r8, ip, lr
 8001308:	b2bc      	uxth	r4, r7
 800130a:	fb0e cc18 	mls	ip, lr, r8, ip
 800130e:	fb08 f904 	mul.w	r9, r8, r4
 8001312:	0c0a      	lsrs	r2, r1, #16
 8001314:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001318:	40b0      	lsls	r0, r6
 800131a:	4591      	cmp	r9, r2
 800131c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001320:	b280      	uxth	r0, r0
 8001322:	d93e      	bls.n	80013a2 <__udivmoddi4+0x2ee>
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	f108 3cff 	add.w	ip, r8, #4294967295
 800132a:	d201      	bcs.n	8001330 <__udivmoddi4+0x27c>
 800132c:	4591      	cmp	r9, r2
 800132e:	d81f      	bhi.n	8001370 <__udivmoddi4+0x2bc>
 8001330:	eba2 0209 	sub.w	r2, r2, r9
 8001334:	fbb2 f9fe 	udiv	r9, r2, lr
 8001338:	fb09 f804 	mul.w	r8, r9, r4
 800133c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001340:	b28a      	uxth	r2, r1
 8001342:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001346:	4542      	cmp	r2, r8
 8001348:	d229      	bcs.n	800139e <__udivmoddi4+0x2ea>
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001350:	d2c2      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001352:	4542      	cmp	r2, r8
 8001354:	d2c0      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001356:	f1a9 0102 	sub.w	r1, r9, #2
 800135a:	443a      	add	r2, r7
 800135c:	e7bc      	b.n	80012d8 <__udivmoddi4+0x224>
 800135e:	45c6      	cmp	lr, r8
 8001360:	d29b      	bcs.n	800129a <__udivmoddi4+0x1e6>
 8001362:	ebb8 0302 	subs.w	r3, r8, r2
 8001366:	eb6c 0c07 	sbc.w	ip, ip, r7
 800136a:	3801      	subs	r0, #1
 800136c:	46e1      	mov	r9, ip
 800136e:	e794      	b.n	800129a <__udivmoddi4+0x1e6>
 8001370:	eba7 0909 	sub.w	r9, r7, r9
 8001374:	444a      	add	r2, r9
 8001376:	fbb2 f9fe 	udiv	r9, r2, lr
 800137a:	f1a8 0c02 	sub.w	ip, r8, #2
 800137e:	fb09 f804 	mul.w	r8, r9, r4
 8001382:	e7db      	b.n	800133c <__udivmoddi4+0x288>
 8001384:	4603      	mov	r3, r0
 8001386:	e77d      	b.n	8001284 <__udivmoddi4+0x1d0>
 8001388:	46d0      	mov	r8, sl
 800138a:	e765      	b.n	8001258 <__udivmoddi4+0x1a4>
 800138c:	4608      	mov	r0, r1
 800138e:	e6fa      	b.n	8001186 <__udivmoddi4+0xd2>
 8001390:	443b      	add	r3, r7
 8001392:	3a02      	subs	r2, #2
 8001394:	e730      	b.n	80011f8 <__udivmoddi4+0x144>
 8001396:	f1ac 0c02 	sub.w	ip, ip, #2
 800139a:	443b      	add	r3, r7
 800139c:	e719      	b.n	80011d2 <__udivmoddi4+0x11e>
 800139e:	4649      	mov	r1, r9
 80013a0:	e79a      	b.n	80012d8 <__udivmoddi4+0x224>
 80013a2:	eba2 0209 	sub.w	r2, r2, r9
 80013a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80013aa:	46c4      	mov	ip, r8
 80013ac:	fb09 f804 	mul.w	r8, r9, r4
 80013b0:	e7c4      	b.n	800133c <__udivmoddi4+0x288>
 80013b2:	bf00      	nop

080013b4 <__aeabi_idiv0>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013d8:	2304      	movs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 ff1a 	bl	8006220 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	76fb      	strb	r3, [r7, #27]
 80013f4:	e01c      	b.n	8001430 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fc5c 	bl	8005cb8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fd2f 	bl	8005e6c <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fe30 	bl	8006078 <HAL_ADC_GetValue>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fcf5 	bl	8005e14 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	3301      	adds	r3, #1
 800142e:	76fb      	strb	r3, [r7, #27]
 8001430:	7efa      	ldrb	r2, [r7, #27]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_ui2f>
 800143e:	4604      	mov	r4, r0
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbe4 	bl	8000c10 <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fce7 	bl	8000e20 <__aeabi_fdiv>
 8001452:	4603      	mov	r3, r0
 8001454:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <ReadAverageVoltage+0xc0>)
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <ReadAverageVoltage+0xc4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000254 	.word	0x20000254
 8001478:	40533333 	.word	0x40533333
 800147c:	457ff000 	.word	0x457ff000

08001480 <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <ACS712_Init+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800148e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001492:	f004 fb15 	bl	8005ac0 <HAL_Delay>
    ACS712_CalibrateZero();
 8001496:	f000 f807 	bl	80014a8 <ACS712_CalibrateZero>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000254 	.word	0x20000254

080014a8 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 80014ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b2:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	e00d      	b.n	80014dc <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff ff78 	bl	80013b8 <ReadAverageVoltage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff faeb 	bl	8000aa8 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	3301      	adds	r3, #1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ed      	bcc.n	80014c0 <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb92 	bl	8000c10 <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fc95 	bl	8000e20 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <ACS712_CalibrateZero+0x60>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000258 	.word	0x20000258

0800150c <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 8001512:	210a      	movs	r1, #10
 8001514:	2007      	movs	r0, #7
 8001516:	f7ff ff4f 	bl	80013b8 <ReadAverageVoltage>
 800151a:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <ACS712_ReadCurrent+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff fabe 	bl	8000aa4 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <ACS712_ReadCurrent+0x88>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc77 	bl	8000e20 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <ACS712_ReadCurrent+0x8c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd58 	bl	8000ff4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <ACS712_ReadCurrent+0x94>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 8001560:	4910      	ldr	r1, [pc, #64]	@ (80015a4 <ACS712_ReadCurrent+0x98>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fba8 	bl	8000cb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fa9b 	bl	8000aa8 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001578:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <ACS712_ReadCurrent+0x90>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <ACS712_ReadCurrent+0x9c>)
 8001580:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000258 	.word	0x20000258
 8001594:	3d872b02 	.word	0x3d872b02
 8001598:	3cf5c28f 	.word	0x3cf5c28f
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	3f333333 	.word	0x3f333333
 80015a4:	3e99999a 	.word	0x3e99999a
 80015a8:	2000024c 	.word	0x2000024c

080015ac <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 80015b2:	2105      	movs	r1, #5
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff feff 	bl	80013b8 <ReadAverageVoltage>
 80015ba:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <Voltage_ReadInput+0x5c>)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Voltage_ReadInput+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4910      	ldr	r1, [pc, #64]	@ (8001610 <Voltage_ReadInput+0x64>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb72 	bl	8000cb8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <Voltage_ReadInput+0x68>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff fb6c 	bl	8000cb8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fa5f 	bl	8000aa8 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <Voltage_ReadInput+0x6c>)
 80015f8:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <Voltage_ReadInput+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	3f58f2fb 	.word	0x3f58f2fb
 800160c:	20000260 	.word	0x20000260
 8001610:	3f333333 	.word	0x3f333333
 8001614:	3e99999a 	.word	0x3e99999a
 8001618:	20000250 	.word	0x20000250

0800161c <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 8001620:	f7ff ff74 	bl	800150c <ACS712_ReadCurrent>
 8001624:	4603      	mov	r3, r0
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <ACS712_Update+0x1c>)
 8001628:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 800162a:	f7ff ffbf 	bl	80015ac <Voltage_ReadInput>
 800162e:	4603      	mov	r3, r0
 8001630:	4a02      	ldr	r2, [pc, #8]	@ (800163c <ACS712_Update+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250

08001640 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800165e:	2306      	movs	r3, #6
 8001660:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f004 fdd9 	bl	8006220 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <readChannelVoltage+0x3a>
        return 0.0f;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e029      	b.n	80016ce <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f004 fb1c 	bl	8005cb8 <HAL_ADC_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <readChannelVoltage+0x4c>
        return 0.0f;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e020      	b.n	80016ce <readChannelVoltage+0x8e>

    float v = 0.0f;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001692:	210a      	movs	r1, #10
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f004 fbe9 	bl	8005e6c <HAL_ADC_PollForConversion>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 fce9 	bl	8006078 <HAL_ADC_GetValue>
 80016a6:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_ui2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <readChannelVoltage+0x98>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb00 	bl	8000cb8 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <readChannelVoltage+0x9c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbaf 	bl	8000e20 <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 fba4 	bl	8005e14 <HAL_ADC_Stop>
    return v;
 80016cc:	69fb      	ldr	r3, [r7, #28]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40533333 	.word	0x40533333
 80016dc:	457ff000 	.word	0x457ff000

080016e0 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 ff2d 	bl	8006548 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Init+0x18>
        Error_Handler();
 80016f4:	f001 f94e 	bl	8002994 <Error_Handler>
    }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800171a:	e182      	b.n	8001a22 <ADC_ReadAllChannels+0x322>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001720:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <ADC_ReadAllChannels+0x284>)
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff89 	bl	8001640 <readChannelVoltage>
 800172e:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8001730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc4e 	bl	8000fe0 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 800174a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800174e:	498e      	ldr	r1, [pc, #568]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001756:	e01a      	b.n	800178e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8001758:	498c      	ldr	r1, [pc, #560]	@ (800198c <ADC_ReadAllChannels+0x28c>)
 800175a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175c:	f7ff faac 	bl	8000cb8 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	461d      	mov	r5, r3
 8001764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001768:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	4988      	ldr	r1, [pc, #544]	@ (8001990 <ADC_ReadAllChannels+0x290>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faa1 	bl	8000cb8 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff f992 	bl	8000aa8 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800178a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 800178e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001792:	4a7d      	ldr	r2, [pc, #500]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 800179a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800179e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017a0:	f7ff fc28 	bl	8000ff4 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 80017c0:	4974      	ldr	r1, [pc, #464]	@ (8001994 <ADC_ReadAllChannels+0x294>)
 80017c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4973      	ldr	r1, [pc, #460]	@ (8001998 <ADC_ReadAllChannels+0x298>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb27 	bl	8000e20 <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc33 	bl	8001044 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 80017e8:	2301      	movs	r3, #1
 80017ea:	461c      	mov	r4, r3
 80017ec:	496b      	ldr	r1, [pc, #428]	@ (800199c <ADC_ReadAllChannels+0x29c>)
 80017ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f0:	f7ff fc14 	bl	800101c <__aeabi_fcmpge>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <ADC_ReadAllChannels+0xfe>
 80017fa:	2300      	movs	r3, #0
 80017fc:	461c      	mov	r4, r3
 80017fe:	b2e2      	uxtb	r2, r4
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	4611      	mov	r1, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001814:	4962      	ldr	r1, [pc, #392]	@ (80019a0 <ADC_ReadAllChannels+0x2a0>)
 8001816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4619      	mov	r1, r3
 8001828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001834:	495c      	ldr	r1, [pc, #368]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fbfa 	bl	8001030 <__aeabi_fcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	4955      	ldr	r1, [pc, #340]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d168      	bne.n	8001932 <ADC_ReadAllChannels+0x232>
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f7ff fbd9 	bl	800101c <__aeabi_fcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d060      	beq.n	8001932 <ADC_ReadAllChannels+0x232>
            s_level_flags[i] = 1;
 8001870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001876:	2101      	movs	r1, #1
 8001878:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 800187a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187e:	2b04      	cmp	r3, #4
 8001880:	d82a      	bhi.n	80018d8 <ADC_ReadAllChannels+0x1d8>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ADC_ReadAllChannels+0x188>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018c1 	.word	0x080018c1
 8001898:	080018cd 	.word	0x080018cd
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 800189c:	4a44      	ldr	r2, [pc, #272]	@ (80019b0 <ADC_ReadAllChannels+0x2b0>)
 800189e:	2110      	movs	r1, #16
 80018a0:	4844      	ldr	r0, [pc, #272]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018a2:	f009 fafb 	bl	800ae9c <sniprintf>
 80018a6:	e01b      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <ADC_ReadAllChannels+0x2b8>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4841      	ldr	r0, [pc, #260]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ae:	f009 faf5 	bl	800ae9c <sniprintf>
 80018b2:	e015      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <ADC_ReadAllChannels+0x2bc>)
 80018b6:	2110      	movs	r1, #16
 80018b8:	483e      	ldr	r0, [pc, #248]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ba:	f009 faef 	bl	800ae9c <sniprintf>
 80018be:	e00f      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 80018c0:	4a3f      	ldr	r2, [pc, #252]	@ (80019c0 <ADC_ReadAllChannels+0x2c0>)
 80018c2:	2110      	movs	r1, #16
 80018c4:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018c6:	f009 fae9 	bl	800ae9c <sniprintf>
 80018ca:	e009      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 80018cc:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <ADC_ReadAllChannels+0x2c4>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	4838      	ldr	r0, [pc, #224]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018d2:	f009 fae3 	bl	800ae9c <sniprintf>
 80018d6:	e003      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	bf00      	nop
            }
            motorStatus = 1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <ADC_ReadAllChannels+0x2c8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 80018e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ea:	4a38      	ldr	r2, [pc, #224]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d02e      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc31 	bl	8000164 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	f1c3 021f 	rsb	r2, r3, #31
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 800190e:	4618      	mov	r0, r3
 8001910:	f009 fbda 	bl	800b0c8 <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc23 	bl	8000164 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	f1c3 021f 	rsb	r2, r3, #31
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4929      	ldr	r1, [pc, #164]	@ (80019d0 <ADC_ReadAllChannels+0x2d0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f009 fbcc 	bl	800b0c8 <strncat>
            if (dataPacketTx[0]) {
 8001930:	e011      	b.n	8001956 <ADC_ReadAllChannels+0x256>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8001932:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <ADC_ReadAllChannels+0x2d4>)
 8001940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001942:	f7ff fb57 	bl	8000ff4 <__aeabi_fcmplt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
            s_level_flags[i] = 0;
 800194c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001952:	2100      	movs	r1, #0
 8001954:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001956:	4914      	ldr	r1, [pc, #80]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800195a:	f7ff fb4b 	bl	8000ff4 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d039      	beq.n	80019d8 <ADC_ReadAllChannels+0x2d8>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8001964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d038      	beq.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	3201      	adds	r2, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800197e:	54d1      	strb	r1, [r2, r3]
 8001980:	e02f      	b.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001982:	bf00      	nop
 8001984:	0800d634 	.word	0x0800d634
 8001988:	2000027c 	.word	0x2000027c
 800198c:	3e99999a 	.word	0x3e99999a
 8001990:	3f333333 	.word	0x3f333333
 8001994:	457ff000 	.word	0x457ff000
 8001998:	40533333 	.word	0x40533333
 800199c:	404ccccd 	.word	0x404ccccd
 80019a0:	20000264 	.word	0x20000264
 80019a4:	200002a4 	.word	0x200002a4
 80019a8:	3d4ccccd 	.word	0x3d4ccccd
 80019ac:	20000294 	.word	0x20000294
 80019b0:	0800d1a8 	.word	0x0800d1a8
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	0800d1b0 	.word	0x0800d1b0
 80019bc:	0800d1b8 	.word	0x0800d1b8
 80019c0:	0800d1c0 	.word	0x0800d1c0
 80019c4:	0800d1c8 	.word	0x0800d1c8
 80019c8:	20000570 	.word	0x20000570
 80019cc:	2000029c 	.word	0x2000029c
 80019d0:	0800d1d0 	.word	0x0800d1d0
 80019d4:	3f666666 	.word	0x3f666666
        } else {
            s_low_counts[i] = 0;
 80019d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019dc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <ADC_ReadAllChannels+0x360>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <ADC_ReadAllChannels+0x318>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10d      	bne.n	8001a18 <ADC_ReadAllChannels+0x318>
 80019fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d907      	bls.n	8001a18 <ADC_ReadAllChannels+0x318>
                motorStatus = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8001a0e:	2206      	movs	r2, #6
 8001a10:	2100      	movs	r1, #0
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a14:	f009 fb50 	bl	800b0b8 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001a18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	f67f ae78 	bls.w	800171c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8001a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb90 	bl	8000164 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fbe3 	bl	8002218 <LoRa_SendPacket>
    }
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	2000057b 	.word	0x2000057b
 8001a64:	20000570 	.word	0x20000570

08001a68 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001a68:	b490      	push	{r4, r7}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	717b      	strb	r3, [r7, #5]
 8001a82:	4613      	mov	r3, r2
 8001a84:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <map_nibble_ctrl+0x40>
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	e000      	b.n	8001aaa <map_nibble_ctrl+0x42>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <map_nibble_ctrl+0x56>
 8001aba:	2204      	movs	r2, #4
 8001abc:	e000      	b.n	8001ac0 <map_nibble_ctrl+0x58>
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	73fb      	strb	r3, [r7, #15]
    return b;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <expander_write>:

static void expander_write(uint8_t data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	214e      	movs	r1, #78	@ 0x4e
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <expander_write+0x24>)
 8001b06:	f005 f9f5 	bl	8006ef4 <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000350 	.word	0x20000350

08001b18 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ffe0 	bl	8001af0 <expander_write>
    HAL_Delay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 ffc5 	bl	8005ac0 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffd6 	bl	8001af0 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f003 ffbb 	bl	8005ac0 <HAL_Delay>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71bb      	strb	r3, [r7, #6]
 8001b60:	4613      	mov	r3, r2
 8001b62:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	79b9      	ldrb	r1, [r7, #6]
 8001b68:	79f8      	ldrb	r0, [r7, #7]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f7ff ff7c 	bl	8001a68 <map_nibble_ctrl>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffba 	bl	8001af0 <expander_write>
    pulse_enable(x);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffca 	bl	8001b18 <pulse_enable>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001b92:	2308      	movs	r3, #8
 8001b94:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffa9 	bl	8001af0 <expander_write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffc8 	bl	8001b52 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc0 	bl	8001b52 <write4bits>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f023 030f 	bic.w	r3, r3, #15
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffae 	bl	8001b52 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffa6 	bl	8001b52 <write4bits>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <lcd_clear>:

void lcd_clear(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff ffc7 	bl	8001ba6 <lcd_send_cmd>
    HAL_Delay(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f003 ff51 	bl	8005ac0 <HAL_Delay>
    lcd_send_cmd(0x80);
 8001c1e:	2080      	movs	r0, #128	@ 0x80
 8001c20:	f7ff ffc1 	bl	8001ba6 <lcd_send_cmd>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d901      	bls.n	8001c42 <lcd_put_cur+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <lcd_put_cur+0x40>)
 8001c46:	5cd2      	ldrb	r2, [r2, r3]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa4 	bl	8001ba6 <lcd_send_cmd>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800d64c 	.word	0x0800d64c

08001c6c <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001c74:	e006      	b.n	8001c84 <lcd_send_string+0x18>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffab 	bl	8001bda <lcd_send_data>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f4      	bne.n	8001c76 <lcd_send_string+0xa>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <lcd_init>:

void lcd_init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001c9a:	2032      	movs	r0, #50	@ 0x32
 8001c9c:	f003 ff10 	bl	8005ac0 <HAL_Delay>
    lcd_backlight_on();
 8001ca0:	f7ff ff74 	bl	8001b8c <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2030      	movs	r0, #48	@ 0x30
 8001caa:	f7ff ff52 	bl	8001b52 <write4bits>
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f003 ff06 	bl	8005ac0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2030      	movs	r0, #48	@ 0x30
 8001cba:	f7ff ff4a 	bl	8001b52 <write4bits>
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f003 fefe 	bl	8005ac0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2030      	movs	r0, #48	@ 0x30
 8001cca:	f7ff ff42 	bl	8001b52 <write4bits>
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f003 fef6 	bl	8005ac0 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff ff3a 	bl	8001b52 <write4bits>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f003 feee 	bl	8005ac0 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001ce4:	2028      	movs	r0, #40	@ 0x28
 8001ce6:	f7ff ff5e 	bl	8001ba6 <lcd_send_cmd>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f003 fee8 	bl	8005ac0 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7ff ff58 	bl	8001ba6 <lcd_send_cmd>
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f003 fee2 	bl	8005ac0 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001cfc:	f7ff ff87 	bl	8001c0e <lcd_clear>
 8001d00:	2002      	movs	r0, #2
 8001d02:	f003 fedd 	bl	8005ac0 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001d06:	2006      	movs	r0, #6
 8001d08:	f7ff ff4d 	bl	8001ba6 <lcd_send_cmd>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f003 fed7 	bl	8005ac0 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001d12:	200c      	movs	r0, #12
 8001d14:	f7ff ff47 	bl	8001ba6 <lcd_send_cmd>
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f003 fed1 	bl	8005ac0 <HAL_Delay>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f003 fec1 	bl	8005aac <HAL_GetTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <led_write+0x30>)
 8001d44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <led_write+0x34>)
 8001d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f004 ff59 	bl	8006c0a <HAL_GPIO_WritePin>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000010 	.word	0x20000010

08001d68 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffda 	bl	8001d30 <led_write>
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffcc 	bl	8001d30 <led_write>
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LED_Init>:

void LED_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001da6:	2210      	movs	r2, #16
 8001da8:	2100      	movs	r1, #0
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <LED_Init+0x60>)
 8001dac:	f009 f984 	bl	800b0b8 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8001db0:	2204      	movs	r2, #4
 8001db2:	2100      	movs	r1, #0
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <LED_Init+0x64>)
 8001db6:	f009 f97f 	bl	800b0b8 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001dba:	2210      	movs	r2, #16
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <LED_Init+0x68>)
 8001dc0:	f009 f97a 	bl	800b0b8 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e012      	b.n	8001df0 <LED_Init+0x50>
        led_off((LedColor)i);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffd8 	bl	8001d84 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LED_Init+0x60>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <LED_Init+0x60>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	dde9      	ble.n	8001dca <LED_Init+0x2a>
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200002cc 	.word	0x200002cc
 8001e04:	200002dc 	.word	0x200002dc
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001e12:	f7ff ff86 	bl	8001d22 <now_ms>
 8001e16:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e064      	b.n	8001ee8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <LED_Task+0xec>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LED_Task+0x24>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00b      	beq.n	8001e46 <LED_Task+0x3a>
 8001e2e:	e015      	b.n	8001e5c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <LED_Task+0xf0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffa0 	bl	8001d84 <led_off>
            break;
 8001e44:	e04d      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001e46:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <LED_Task+0xf0>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff87 	bl	8001d68 <led_on>
            break;
 8001e5a:	e042      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <LED_Task+0xec>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <LED_Task+0x6c>
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <LED_Task+0xec>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e76:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <LED_Task+0xf4>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc2b      	bgt.n	8001ee0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001e88:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <LED_Task+0xf0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <LED_Task+0xf0>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001ea6:	4a15      	ldr	r2, [pc, #84]	@ (8001efc <LED_Task+0xf0>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <LED_Task+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <led_on>
 8001ebc:	e004      	b.n	8001ec8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5e 	bl	8001d84 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <LED_Task+0xec>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <LED_Task+0xf4>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001ee0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	dd97      	ble.n	8001e1e <LED_Task+0x12>
        }
    }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	200002dc 	.word	0x200002dc
 8001f00:	200002e0 	.word	0x200002e0

08001f04 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	e00d      	b.n	8001f2c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <LED_ClearAllIntents+0x3c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	ddee      	ble.n	8001f10 <LED_ClearAllIntents+0xc>
    }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200002cc 	.word	0x200002cc

08001f44 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d80b      	bhi.n	8001f74 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <LED_SetIntent+0x3c>)
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	805a      	strh	r2, [r3, #2]
 8001f72:	e000      	b.n	8001f76 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001f74:	bf00      	nop
}
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200002cc 	.word	0x200002cc

08001f84 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	733b      	strb	r3, [r7, #12]
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb4:	480a      	ldr	r0, [pc, #40]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fb6:	f004 fe28 	bl	8006c0a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001fba:	f107 010c 	add.w	r1, r7, #12
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <LoRa_WriteReg+0x54>)
 8001fc6:	f006 ff98 	bl	8008efa <HAL_SPI_Transmit>
    NSS_HIGH();
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <LoRa_WriteReg+0x50>)
 8001fd2:	f004 fe1a 	bl	8006c0a <HAL_GPIO_WritePin>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40010800 	.word	0x40010800
 8001fe4:	200003b8 	.word	0x200003b8

08001fe8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002006:	480f      	ldr	r0, [pc, #60]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002008:	f004 fdff 	bl	8006c0a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 800200c:	f107 010f 	add.w	r1, r7, #15
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	2201      	movs	r2, #1
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002018:	f006 ff6f 	bl	8008efa <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800201c:	f107 010e 	add.w	r1, r7, #14
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	2201      	movs	r2, #1
 8002026:	4808      	ldr	r0, [pc, #32]	@ (8002048 <LoRa_ReadReg+0x60>)
 8002028:	f007 f8ab 	bl	8009182 <HAL_SPI_Receive>
    NSS_HIGH();
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <LoRa_ReadReg+0x5c>)
 8002034:	f004 fde9 	bl	8006c0a <HAL_GPIO_WritePin>
    return rx;
 8002038:	7bbb      	ldrb	r3, [r7, #14]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40010800 	.word	0x40010800
 8002048:	200003b8 	.word	0x200003b8

0800204c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206c:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800206e:	f004 fdcc 	bl	8006c0a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8002072:	f107 010f 	add.w	r1, r7, #15
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	2201      	movs	r2, #1
 800207c:	480b      	ldr	r0, [pc, #44]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800207e:	f006 ff3c 	bl	8008efa <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	b29a      	uxth	r2, r3
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <LoRa_WriteBuffer+0x60>)
 800208e:	f006 ff34 	bl	8008efa <HAL_SPI_Transmit>
    NSS_HIGH();
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <LoRa_WriteBuffer+0x5c>)
 800209a:	f004 fdb6 	bl	8006c0a <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010800 	.word	0x40010800
 80020ac:	200003b8 	.word	0x200003b8

080020b0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ba:	f004 fda6 	bl	8006c0a <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020be:	2002      	movs	r0, #2
 80020c0:	f003 fcfe 	bl	8005ac0 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2140      	movs	r1, #64	@ 0x40
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <LoRa_Reset+0x28>)
 80020ca:	f004 fd9e 	bl	8006c0a <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80020ce:	2002      	movs	r0, #2
 80020d0:	f003 fcf6 	bl	8005ac0 <HAL_Delay>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010c00 	.word	0x40010c00

080020dc <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	2000      	movs	r0, #0
 80020e8:	460a      	mov	r2, r1
 80020ea:	4603      	mov	r3, r0
 80020ec:	0b55      	lsrs	r5, r2, #13
 80020ee:	04d4      	lsls	r4, r2, #19
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <LoRa_SetFrequency+0x78>)
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe ffc3 	bl	8001084 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8002106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	0c02      	lsrs	r2, r0, #16
 8002114:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002118:	0c0b      	lsrs	r3, r1, #16
 800211a:	b2d3      	uxtb	r3, r2
 800211c:	4619      	mov	r1, r3
 800211e:	2006      	movs	r0, #6
 8002120:	f7ff ff36 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	0a02      	lsrs	r2, r0, #8
 8002132:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002136:	0a0b      	lsrs	r3, r1, #8
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	4619      	mov	r1, r3
 800213c:	2007      	movs	r0, #7
 800213e:	f7ff ff27 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	4619      	mov	r1, r3
 8002146:	2008      	movs	r0, #8
 8002148:	f7ff ff22 	bl	8001f90 <LoRa_WriteReg>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	01e84800 	.word	0x01e84800

08002158 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800215c:	f7ff ffa8 	bl	80020b0 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8002160:	2100      	movs	r1, #0
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff14 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002168:	2002      	movs	r0, #2
 800216a:	f003 fca9 	bl	8005ac0 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff ff0d 	bl	8001f90 <LoRa_WriteReg>
    HAL_Delay(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f003 fca2 	bl	8005ac0 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 800217c:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <LoRa_Init+0x8c>)
 800217e:	f7ff ffad 	bl	80020dc <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8002182:	218f      	movs	r1, #143	@ 0x8f
 8002184:	2009      	movs	r0, #9
 8002186:	f7ff ff03 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800218a:	2187      	movs	r1, #135	@ 0x87
 800218c:	204d      	movs	r0, #77	@ 0x4d
 800218e:	f7ff feff 	bl	8001f90 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002192:	2123      	movs	r1, #35	@ 0x23
 8002194:	200c      	movs	r0, #12
 8002196:	f7ff fefb 	bl	8001f90 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800219a:	2172      	movs	r1, #114	@ 0x72
 800219c:	201d      	movs	r0, #29
 800219e:	f7ff fef7 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80021a2:	2174      	movs	r1, #116	@ 0x74
 80021a4:	201e      	movs	r0, #30
 80021a6:	f7ff fef3 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80021aa:	2104      	movs	r1, #4
 80021ac:	2026      	movs	r0, #38	@ 0x26
 80021ae:	f7ff feef 	bl	8001f90 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80021b2:	2100      	movs	r1, #0
 80021b4:	2020      	movs	r0, #32
 80021b6:	f7ff feeb 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80021ba:	2108      	movs	r1, #8
 80021bc:	2021      	movs	r0, #33	@ 0x21
 80021be:	f7ff fee7 	bl	8001f90 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 80021c2:	2122      	movs	r1, #34	@ 0x22
 80021c4:	2039      	movs	r0, #57	@ 0x39
 80021c6:	f7ff fee3 	bl	8001f90 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2040      	movs	r0, #64	@ 0x40
 80021ce:	f7ff fedf 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80021d2:	21ff      	movs	r1, #255	@ 0xff
 80021d4:	2012      	movs	r0, #18
 80021d6:	f7ff fedb 	bl	8001f90 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 80021da:	f000 f80d 	bl	80021f8 <LoRa_SetRxContinuous>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	19cf0e40 	.word	0x19cf0e40

080021e8 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	2181      	movs	r1, #129	@ 0x81
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fece 	bl	8001f90 <LoRa_WriteReg>
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2185      	movs	r1, #133	@ 0x85
 80021fe:	2001      	movs	r0, #1
 8002200:	f7ff fec6 	bl	8001f90 <LoRa_WriteReg>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2183      	movs	r1, #131	@ 0x83
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff febe 	bl	8001f90 <LoRa_WriteReg>
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <LoRa_SendPacket+0x98>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d03c      	beq.n	80022a6 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 800222c:	f7ff ffdc 	bl	80021e8 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 8002230:	2100      	movs	r1, #0
 8002232:	200e      	movs	r0, #14
 8002234:	f7ff feac 	bl	8001f90 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8002238:	2100      	movs	r1, #0
 800223a:	200d      	movs	r0, #13
 800223c:	f7ff fea8 	bl	8001f90 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	461a      	mov	r2, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff ff00 	bl	800204c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	2022      	movs	r0, #34	@ 0x22
 8002252:	f7ff fe9d 	bl	8001f90 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002256:	21ff      	movs	r1, #255	@ 0xff
 8002258:	2012      	movs	r0, #18
 800225a:	f7ff fe99 	bl	8001f90 <LoRa_WriteReg>

    LoRa_SetTx();
 800225e:	f7ff ffd3 	bl	8002208 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 8002262:	f003 fc23 	bl	8005aac <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002268:	e00e      	b.n	8002288 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 800226a:	f003 fc1f 	bl	8005aac <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002278:	d906      	bls.n	8002288 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 800227a:	21ff      	movs	r1, #255	@ 0xff
 800227c:	2012      	movs	r0, #18
 800227e:	f7ff fe87 	bl	8001f90 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 8002282:	f7ff ffb9 	bl	80021f8 <LoRa_SetRxContinuous>
            return;
 8002286:	e00f      	b.n	80022a8 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 8002288:	2012      	movs	r0, #18
 800228a:	f7ff fead 	bl	8001fe8 <LoRa_ReadReg>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0e8      	beq.n	800226a <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 8002298:	2108      	movs	r1, #8
 800229a:	2012      	movs	r0, #18
 800229c:	f7ff fe78 	bl	8001f90 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 80022a0:	f7ff ffaa 	bl	80021f8 <LoRa_SetRxContinuous>
 80022a4:	e000      	b.n	80022a8 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 80022a6:	bf00      	nop
}
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000018 	.word	0x20000018

080022b4 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4803      	ldr	r0, [pc, #12]	@ (80022cc <Debug_Print+0x18>)
 80022c0:	f003 fb20 	bl	8005904 <UART_TransmitString>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000458 	.word	0x20000458

080022d0 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_ADC_ConvCpltCallback+0x8c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d138      	bne.n	8002354 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e02e      	b.n	8002346 <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_ADC_ConvCpltCallback+0x90>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fc8d 	bl	8000c10 <__aeabi_i2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	491a      	ldr	r1, [pc, #104]	@ (8002364 <HAL_ADC_ConvCpltCallback+0x94>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcdc 	bl	8000cb8 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	4919      	ldr	r1, [pc, #100]	@ (8002368 <HAL_ADC_ConvCpltCallback+0x98>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd8b 	bl	8000e20 <__aeabi_fdiv>
 800230a:	4603      	mov	r3, r0
 800230c:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fccd 	bl	8000cb8 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f7fe fcc7 	bl	8000cb8 <__aeabi_fmul>
 800232a:	4603      	mov	r3, r0
 800232c:	4619      	mov	r1, r3
 800232e:	4620      	mov	r0, r4
 8002330:	f7fe fbba 	bl	8000aa8 <__addsf3>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b06      	cmp	r3, #6
 800234a:	ddcd      	ble.n	80022e8 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_ADC_ConvCpltCallback+0x9c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002352:	6013      	str	r3, [r2, #0]
    }
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	40012400 	.word	0x40012400
 8002360:	200002f0 	.word	0x200002f0
 8002364:	40533333 	.word	0x40533333
 8002368:	457ff000 	.word	0x457ff000
 800236c:	20000300 	.word	0x20000300
 8002370:	3f666666 	.word	0x3f666666
 8002374:	3dcccccd 	.word	0x3dcccccd
 8002378:	2000031c 	.word	0x2000031c

0800237c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b08b      	sub	sp, #44	@ 0x2c
 8002380:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002382:	f003 fb3b 	bl	80059fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002386:	f000 f8ad 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238a:	f000 fa85 	bl	8002898 <MX_GPIO_Init>
  MX_ADC1_Init();
 800238e:	f000 f905 	bl	800259c <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8002392:	f000 f9d3 	bl	800273c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002396:	f000 fa55 	bl	8002844 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800239a:	f000 f9a1 	bl	80026e0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800239e:	f000 fa03 	bl	80027a8 <MX_TIM3_Init>
  UART_Init();
 80023a2:	f003 fa91 	bl	80058c8 <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80023a6:	4846      	ldr	r0, [pc, #280]	@ (80024c0 <main+0x144>)
 80023a8:	f007 fb08 	bl	80099bc <HAL_TIM_Base_Start>
  RF_Init();
 80023ac:	f001 fadc 	bl	8003968 <RF_Init>
  lcd_init();
 80023b0:	f7ff fc71 	bl	8001c96 <lcd_init>
  ADC_Init(&hadc1);
 80023b4:	4843      	ldr	r0, [pc, #268]	@ (80024c4 <main+0x148>)
 80023b6:	f7ff f993 	bl	80016e0 <ADC_Init>
  LoRa_Init();
 80023ba:	f7ff fecd 	bl	8002158 <LoRa_Init>
  Screen_Init();
 80023be:	f002 fa77 	bl	80048b0 <Screen_Init>
  UART_Init();
 80023c2:	f003 fa81 	bl	80058c8 <UART_Init>
  Switches_Init();
 80023c6:	f003 f95f 	bl	8005688 <Switches_Init>
  Relay_Init();
 80023ca:	f001 fa47 	bl	800385c <Relay_Init>
  LED_Init();
 80023ce:	f7ff fce7 	bl	8001da0 <LED_Init>


  ACS712_Init(&hadc1);
 80023d2:	483c      	ldr	r0, [pc, #240]	@ (80024c4 <main+0x148>)
 80023d4:	f7ff f854 	bl	8001480 <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 80023d8:	f001 fb62 	bl	8003aa0 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 80023dc:	f001 fbb0 	bl	8003b40 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 80023e0:	4839      	ldr	r0, [pc, #228]	@ (80024c8 <main+0x14c>)
 80023e2:	f7ff ff67 	bl	80022b4 <Debug_Print>

  uint8_t lastSecond = 255;
 80023e6:	23ff      	movs	r3, #255	@ 0xff
 80023e8:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 80023ea:	f7ff f917 	bl	800161c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 80023ee:	2118      	movs	r1, #24
 80023f0:	4836      	ldr	r0, [pc, #216]	@ (80024cc <main+0x150>)
 80023f2:	f001 fafa 	bl	80039ea <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 80023f6:	f002 feeb 	bl	80051d0 <Screen_HandleSwitches>
      Screen_Update();
 80023fa:	f001 ffed 	bl	80043d8 <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 80023fe:	4934      	ldr	r1, [pc, #208]	@ (80024d0 <main+0x154>)
 8002400:	4830      	ldr	r0, [pc, #192]	@ (80024c4 <main+0x148>)
 8002402:	f7ff f97d 	bl	8001700 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 8002406:	f001 fb9b 	bl	8003b40 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 800240a:	4b32      	ldr	r3, [pc, #200]	@ (80024d4 <main+0x158>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	429a      	cmp	r2, r3
 8002412:	d025      	beq.n	8002460 <main+0xe4>
          lastSecond = time.seconds;
 8002414:	4b2f      	ldr	r3, [pc, #188]	@ (80024d4 <main+0x158>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800241a:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <main+0x158>)
 800241c:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 800241e:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002420:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <main+0x158>)
 8002422:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002424:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <main+0x158>)
 8002428:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800242a:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <main+0x158>)
 800242e:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 8002430:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <main+0x158>)
 8002434:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 8002436:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 8002438:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <main+0x158>)
 800243a:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 800243c:	461d      	mov	r5, r3
                   time.dayofweek);
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <main+0x158>)
 8002440:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 8002442:	9305      	str	r3, [sp, #20]
 8002444:	9504      	str	r5, [sp, #16]
 8002446:	9403      	str	r4, [sp, #12]
 8002448:	9002      	str	r0, [sp, #8]
 800244a:	9101      	str	r1, [sp, #4]
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	4633      	mov	r3, r6
 8002450:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <main+0x15c>)
 8002452:	2164      	movs	r1, #100	@ 0x64
 8002454:	4821      	ldr	r0, [pc, #132]	@ (80024dc <main+0x160>)
 8002456:	f008 fd21 	bl	800ae9c <sniprintf>
          Debug_Print(dbg);
 800245a:	4820      	ldr	r0, [pc, #128]	@ (80024dc <main+0x160>)
 800245c:	f7ff ff2a 	bl	80022b4 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <main+0x164>)
 8002464:	f003 fa62 	bl	800592c <UART_GetReceivedPacket>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01f      	beq.n	80024ae <main+0x132>
          char *p = receivedUartPacket;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <main+0x164>)
 8002470:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 8002472:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <main+0x164>)
 8002474:	f7fd fe76 	bl	8000164 <strlen>
 8002478:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d913      	bls.n	80024a8 <main+0x12c>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d10f      	bne.n	80024a8 <main+0x12c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b23      	cmp	r3, #35	@ 0x23
 8002494:	d108      	bne.n	80024a8 <main+0x12c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3b01      	subs	r3, #1
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f001 f989 	bl	80037c0 <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 80024ae:	f001 f975 	bl	800379c <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 80024b2:	f7ff fcab 	bl	8001e0c <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 80024b6:	2014      	movs	r0, #20
 80024b8:	f003 fb02 	bl	8005ac0 <HAL_Delay>
  {
 80024bc:	e795      	b.n	80023ea <main+0x6e>
 80024be:	bf00      	nop
 80024c0:	20000410 	.word	0x20000410
 80024c4:	20000320 	.word	0x20000320
 80024c8:	0800d1ec 	.word	0x0800d1ec
 80024cc:	001af5f8 	.word	0x001af5f8
 80024d0:	200004a0 	.word	0x200004a0
 80024d4:	200005f4 	.word	0x200005f4
 80024d8:	0800d204 	.word	0x0800d204
 80024dc:	2000050c 	.word	0x2000050c
 80024e0:	200004cc 	.word	0x200004cc

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	@ 0x50
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ee:	2228      	movs	r2, #40	@ 0x28
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f008 fde0 	bl	800b0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002514:	230a      	movs	r3, #10
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	2301      	movs	r3, #1
 800251a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	2310      	movs	r3, #16
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002520:	2301      	movs	r3, #1
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002524:	2302      	movs	r3, #2
 8002526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002528:	2300      	movs	r3, #0
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800252c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002536:	4618      	mov	r0, r3
 8002538:	f005 feac 	bl	8008294 <HAL_RCC_OscConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002542:	f000 fa27 	bl	8002994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002546:	230f      	movs	r3, #15
 8002548:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f006 f918 	bl	8008798 <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800256e:	f000 fa11 	bl	8002994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002572:	2303      	movs	r3, #3
 8002574:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800257c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f006 fa95 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002590:	f000 fa00 	bl	8002994 <Error_Handler>
  }
}
 8002594:	bf00      	nop
 8002596:	3750      	adds	r7, #80	@ 0x50
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025ac:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025ae:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <MX_ADC1_Init+0x140>)
 80025b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025b2:	4b49      	ldr	r3, [pc, #292]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c0:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025c8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80025cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ce:	4b42      	ldr	r3, [pc, #264]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80025d4:	4b40      	ldr	r3, [pc, #256]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025d6:	2208      	movs	r2, #8
 80025d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025da:	483f      	ldr	r0, [pc, #252]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025dc:	f003 fa94 	bl	8005b08 <HAL_ADC_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80025e6:	f000 f9d5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4837      	ldr	r0, [pc, #220]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80025fc:	f003 fe10 	bl	8006220 <HAL_ADC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 f9c5 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800260a:	2301      	movs	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800260e:	2302      	movs	r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4830      	ldr	r0, [pc, #192]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002618:	f003 fe02 	bl	8006220 <HAL_ADC_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002622:	f000 f9b7 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002626:	2302      	movs	r3, #2
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800262a:	2303      	movs	r3, #3
 800262c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4829      	ldr	r0, [pc, #164]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002634:	f003 fdf4 	bl	8006220 <HAL_ADC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800263e:	f000 f9a9 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002642:	2303      	movs	r3, #3
 8002644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002646:	2304      	movs	r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4822      	ldr	r0, [pc, #136]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002650:	f003 fde6 	bl	8006220 <HAL_ADC_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800265a:	f000 f99b 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800265e:	2304      	movs	r3, #4
 8002660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002662:	2305      	movs	r3, #5
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	481b      	ldr	r0, [pc, #108]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 800266c:	f003 fdd8 	bl	8006220 <HAL_ADC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002676:	f000 f98d 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800267a:	2305      	movs	r3, #5
 800267c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800267e:	2306      	movs	r3, #6
 8002680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 8002688:	f003 fdca 	bl	8006220 <HAL_ADC_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002692:	f000 f97f 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002696:	2307      	movs	r3, #7
 8002698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800269a:	2307      	movs	r3, #7
 800269c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026a4:	f003 fdbc 	bl	8006220 <HAL_ADC_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80026ae:	f000 f971 	bl	8002994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026b2:	2306      	movs	r3, #6
 80026b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80026b6:	2308      	movs	r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <MX_ADC1_Init+0x13c>)
 80026c0:	f003 fdae 	bl	8006220 <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80026ca:	f000 f963 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000320 	.word	0x20000320
 80026dc:	40012400 	.word	0x40012400

080026e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026e6:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <MX_I2C2_Init+0x54>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <MX_I2C2_Init+0x58>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_I2C2_Init+0x50>)
 80026fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_I2C2_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_I2C2_Init+0x50>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	@ (8002730 <MX_I2C2_Init+0x50>)
 800271e:	f004 faa5 	bl	8006c6c <HAL_I2C_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002728:	f000 f934 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000350 	.word	0x20000350
 8002734:	40005800 	.word	0x40005800
 8002738:	000186a0 	.word	0x000186a0

0800273c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <MX_SPI1_Init+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800274c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002770:	2218      	movs	r2, #24
 8002772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <MX_SPI1_Init+0x64>)
 8002788:	220a      	movs	r2, #10
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <MX_SPI1_Init+0x64>)
 800278e:	f006 fb30 	bl	8008df2 <HAL_SPI_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002798:	f000 f8fc 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200003b8 	.word	0x200003b8
 80027a4:	40013000 	.word	0x40013000

080027a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <MX_TIM3_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <MX_TIM3_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <MX_TIM3_Init+0x94>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <MX_TIM3_Init+0x94>)
 80027d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <MX_TIM3_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ea:	4814      	ldr	r0, [pc, #80]	@ (800283c <MX_TIM3_Init+0x94>)
 80027ec:	f007 f897 	bl	800991e <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027f6:	f000 f8cd 	bl	8002994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	@ (800283c <MX_TIM3_Init+0x94>)
 8002808:	f007 f922 	bl	8009a50 <HAL_TIM_ConfigClockSource>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 f8bf 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <MX_TIM3_Init+0x94>)
 8002824:	f007 fae0 	bl	8009de8 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800282e:	f000 f8b1 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000410 	.word	0x20000410
 8002840:	40000400 	.word	0x40000400

08002844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <MX_USART1_UART_Init+0x50>)
 800284c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <MX_USART1_UART_Init+0x4c>)
 800287c:	f007 fb12 	bl	8009ea4 <HAL_UART_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002886:	f000 f885 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000458 	.word	0x20000458
 8002894:	40013800 	.word	0x40013800

08002898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ac:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028b2:	f043 0310 	orr.w	r3, r3, #16
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <MX_GPIO_Init+0xec>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80028f4:	2200      	movs	r2, #0
 80028f6:	f240 3147 	movw	r1, #839	@ 0x347
 80028fa:	4823      	ldr	r0, [pc, #140]	@ (8002988 <MX_GPIO_Init+0xf0>)
 80028fc:	f004 f985 	bl	8006c0a <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002906:	4821      	ldr	r0, [pc, #132]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002908:	f004 f97f 	bl	8006c0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 800290c:	f240 3347 	movw	r3, #839	@ 0x347
 8002910:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4619      	mov	r1, r3
 8002924:	4818      	ldr	r0, [pc, #96]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002926:	f003 ffd5 	bl	80068d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800292a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800292e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002930:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <MX_GPIO_Init+0xf8>)
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4812      	ldr	r0, [pc, #72]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002940:	f003 ffc8 	bl	80068d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002944:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	480b      	ldr	r0, [pc, #44]	@ (800298c <MX_GPIO_Init+0xf4>)
 800295e:	f003 ffb9 	bl	80068d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4619      	mov	r1, r3
 8002974:	4804      	ldr	r0, [pc, #16]	@ (8002988 <MX_GPIO_Init+0xf0>)
 8002976:	f003 ffad 	bl	80068d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40010800 	.word	0x40010800
 8002990:	10310000 	.word	0x10310000

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <Error_Handler+0x8>

080029a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029a4:	f3bf 8f4f 	dsb	sy
}
 80029a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029b2:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <__NVIC_SystemReset+0x24>)
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_SystemReset+0x28>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029ba:	f3bf 8f4f 	dsb	sy
}
 80029be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <__NVIC_SystemReset+0x20>
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	05fa0004 	.word	0x05fa0004

080029cc <now_ms>:
static uint32_t       maxRunStartTick  = 0;

/* =========================
   Utilities
   ========================= */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f003 f86c 	bl	8005aac <HAL_GetTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}

080029da <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	460a      	mov	r2, r1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80029f0:	fb02 f103 	mul.w	r1, r2, r3
 80029f4:	79ba      	ldrb	r2, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
	...

08002a0c <motor_apply>:

/* =========================
   Motor Control
   ========================= */
static inline void motor_apply(bool on)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 ff68 	bl	80038f0 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <motor_apply+0x1e>
 8002a26:	2201      	movs	r2, #1
 8002a28:	e000      	b.n	8002a2c <motor_apply+0x20>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <motor_apply+0x58>)
 8002a2e:	701a      	strb	r2, [r3, #0]

    if (on) {
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002a36:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <motor_apply+0x5c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f083 0301 	eor.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <motor_apply+0x50>
            maxRunTimerArmed = true;
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <motor_apply+0x5c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002a4a:	f7ff ffbf 	bl	80029cc <now_ms>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <motor_apply+0x60>)
 8002a52:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8002a54:	e002      	b.n	8002a5c <motor_apply+0x50>
        maxRunTimerArmed = false;
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <motor_apply+0x5c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000570 	.word	0x20000570
 8002a68:	2000057c 	.word	0x2000057c
 8002a6c:	20000580 	.word	0x20000580

08002a70 <start_motor>:
static inline void start_motor(void) { motor_apply(true); }
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff ffc9 	bl	8002a0c <motor_apply>
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <stop_motor>:
static inline void stop_motor(void)  { motor_apply(false); }
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff ffc2 	bl	8002a0c <motor_apply>
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <isTankFull>:

/* =========================
   Tank Check (4/5 submerged)
   ========================= */
static bool isTankFull(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	e012      	b.n	8002ac2 <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <isTankFull+0x50>)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	490d      	ldr	r1, [pc, #52]	@ (8002ae0 <isTankFull+0x54>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe faa2 	bl	8000ff4 <__aeabi_fcmplt>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <isTankFull+0x30>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	dde9      	ble.n	8002a9c <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	bfcc      	ite	gt
 8002ace:	2301      	movgt	r3, #1
 8002ad0:	2300      	movle	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200004a0 	.word	0x200004a0
 8002ae0:	3dcccccd 	.word	0x3dcccccd

08002ae4 <dry_raw_is_dry>:

/* =========================
   DRY helpers (shared)
   ========================= */
static inline bool dry_raw_is_dry(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
    float v = adcData.voltages[0];
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <dry_raw_is_dry+0x2c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	607b      	str	r3, [r7, #4]
    if (DRY_ACTIVE_LOW) return (v < DRY_THRESHOLD_V);
 8002af0:	2301      	movs	r3, #1
 8002af2:	461c      	mov	r4, r3
 8002af4:	4907      	ldr	r1, [pc, #28]	@ (8002b14 <dry_raw_is_dry+0x30>)
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fa7c 	bl	8000ff4 <__aeabi_fcmplt>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <dry_raw_is_dry+0x22>
 8002b02:	2300      	movs	r3, #0
 8002b04:	461c      	mov	r4, r3
 8002b06:	b2e3      	uxtb	r3, r4
    else                return (v > DRY_THRESHOLD_V);
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	200004a0 	.word	0x200004a0
 8002b14:	3dcccccd 	.word	0x3dcccccd

08002b18 <ModelHandle_ToggleManual>:

/* =========================
   Manual Mode
   ========================= */
void ModelHandle_ToggleManual(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
    semiAutoActive  = false;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <ModelHandle_ToggleManual+0x6c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <ModelHandle_ToggleManual+0x70>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002b28:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <ModelHandle_ToggleManual+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002b2e:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <ModelHandle_ToggleManual+0x78>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <ModelHandle_ToggleManual+0x7c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]

    manualOverride = true;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <ModelHandle_ToggleManual+0x80>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
    manualActive   = !manualActive;
 8002b40:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <ModelHandle_ToggleManual+0x84>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <ModelHandle_ToggleManual+0x84>)
 8002b5e:	701a      	strb	r2, [r3, #0]

    if (manualActive) {
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <ModelHandle_ToggleManual+0x84>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <ModelHandle_ToggleManual+0x5e>
        start_motor();
 8002b6a:	f7ff ff81 	bl	8002a70 <start_motor>
        printf("Manual ON\r\n");
 8002b6e:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <ModelHandle_ToggleManual+0x88>)
 8002b70:	f008 f98c 	bl	800ae8c <puts>
    } else {
        stop_motor();
        printf("Manual OFF\r\n");
    }
}
 8002b74:	e004      	b.n	8002b80 <ModelHandle_ToggleManual+0x68>
        stop_motor();
 8002b76:	f7ff ff82 	bl	8002a7e <stop_motor>
        printf("Manual OFF\r\n");
 8002b7a:	480a      	ldr	r0, [pc, #40]	@ (8002ba4 <ModelHandle_ToggleManual+0x8c>)
 8002b7c:	f008 f986 	bl	800ae8c <puts>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000576 	.word	0x20000576
 8002b88:	20000575 	.word	0x20000575
 8002b8c:	20000574 	.word	0x20000574
 8002b90:	20000572 	.word	0x20000572
 8002b94:	20000573 	.word	0x20000573
 8002b98:	2000057b 	.word	0x2000057b
 8002b9c:	20000571 	.word	0x20000571
 8002ba0:	0800d238 	.word	0x0800d238
 8002ba4:	0800d244 	.word	0x0800d244

08002ba8 <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <ModelHandle_ManualLongPress+0x20>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <ModelHandle_ManualLongPress+0x24>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    printf("Manual Long Press → Restarting...\r\n");
 8002bb8:	4805      	ldr	r0, [pc, #20]	@ (8002bd0 <ModelHandle_ManualLongPress+0x28>)
 8002bba:	f008 f967 	bl	800ae8c <puts>
    HAL_Delay(100);
 8002bbe:	2064      	movs	r0, #100	@ 0x64
 8002bc0:	f002 ff7e 	bl	8005ac0 <HAL_Delay>
    NVIC_SystemReset();
 8002bc4:	f7ff feec 	bl	80029a0 <__NVIC_SystemReset>
 8002bc8:	2000057b 	.word	0x2000057b
 8002bcc:	20000571 	.word	0x20000571
 8002bd0:	0800d250 	.word	0x0800d250

08002bd4 <ModelHandle_StopCountdown>:
static uint32_t cd_run_seconds      = 0;
static bool     cd_in_rest          = false;
static const uint32_t CD_REST_MS    = 3000;

void ModelHandle_StopCountdown(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    stop_motor();
 8002bd8:	f7ff ff51 	bl	8002a7e <stop_motor>
    countdownActive        = false;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <ModelHandle_StopCountdown+0x30>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
    countdownMode          = false;
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <ModelHandle_StopCountdown+0x34>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    countdownRemainingRuns = 0;
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <ModelHandle_StopCountdown+0x38>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	801a      	strh	r2, [r3, #0]
    cd_run_seconds         = 0;
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <ModelHandle_StopCountdown+0x3c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    cd_in_rest             = false;
 8002bf4:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <ModelHandle_StopCountdown+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    countdownDuration      = 0;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <ModelHandle_StopCountdown+0x44>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000572 	.word	0x20000572
 8002c08:	20000019 	.word	0x20000019
 8002c0c:	200005c4 	.word	0x200005c4
 8002c10:	200005d0 	.word	0x200005d0
 8002c14:	200005d4 	.word	0x200005d4
 8002c18:	20000584 	.word	0x20000584

08002c1c <countdown_start_one_run>:
static void countdown_start_one_run(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    cd_deadline_ms    = now_ms() + (cd_run_seconds * 1000UL);
 8002c20:	f7ff fed4 	bl	80029cc <now_ms>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <countdown_start_one_run+0x34>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <countdown_start_one_run+0x38>)
 8002c36:	6013      	str	r3, [r2, #0]
    countdownDuration = cd_run_seconds;
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <countdown_start_one_run+0x34>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a06      	ldr	r2, [pc, #24]	@ (8002c58 <countdown_start_one_run+0x3c>)
 8002c3e:	6013      	str	r3, [r2, #0]
    cd_in_rest        = false;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <countdown_start_one_run+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    start_motor();
 8002c46:	f7ff ff13 	bl	8002a70 <start_motor>
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200005d0 	.word	0x200005d0
 8002c54:	200005c8 	.word	0x200005c8
 8002c58:	20000584 	.word	0x20000584
 8002c5c:	200005d4 	.word	0x200005d4

08002c60 <ModelHandle_StartCountdown>:
void ModelHandle_StartCountdown(uint32_t seconds_per_run, uint16_t repeats)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
    if (seconds_per_run == 0 || repeats == 0) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <ModelHandle_StartCountdown+0x18>
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <ModelHandle_StartCountdown+0x1e>
        ModelHandle_StopCountdown();
 8002c78:	f7ff ffac 	bl	8002bd4 <ModelHandle_StopCountdown>
        return;
 8002c7c:	e01f      	b.n	8002cbe <ModelHandle_StartCountdown+0x5e>
    }

    manualActive   = false;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <ModelHandle_StartCountdown+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
    semiAutoActive = false;
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <ModelHandle_StartCountdown+0x68>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <ModelHandle_StartCountdown+0x6c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <ModelHandle_StartCountdown+0x70>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8002c96:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <ModelHandle_StartCountdown+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]

    countdownMode          = true;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <ModelHandle_StartCountdown+0x78>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
    countdownActive        = true;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <ModelHandle_StartCountdown+0x7c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
    cd_run_seconds         = seconds_per_run;
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <ModelHandle_StartCountdown+0x80>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
    countdownRemainingRuns = repeats;
 8002cae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <ModelHandle_StartCountdown+0x84>)
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	8013      	strh	r3, [r2, #0]
    cd_in_rest             = false;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <ModelHandle_StartCountdown+0x88>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

    countdown_start_one_run();
 8002cba:	f7ff ffaf 	bl	8002c1c <countdown_start_one_run>
}
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000571 	.word	0x20000571
 8002cc8:	20000576 	.word	0x20000576
 8002ccc:	20000575 	.word	0x20000575
 8002cd0:	20000574 	.word	0x20000574
 8002cd4:	20000573 	.word	0x20000573
 8002cd8:	20000019 	.word	0x20000019
 8002cdc:	20000572 	.word	0x20000572
 8002ce0:	200005d0 	.word	0x200005d0
 8002ce4:	200005c4 	.word	0x200005c4
 8002ce8:	200005d4 	.word	0x200005d4

08002cec <countdown_tick>:
static void countdown_tick(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8002cf2:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <countdown_tick+0xd8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f083 0301 	eor.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d158      	bne.n	8002db4 <countdown_tick+0xc8>
    uint32_t now = now_ms();
 8002d02:	f7ff fe63 	bl	80029cc <now_ms>
 8002d06:	6078      	str	r0, [r7, #4]

    if (cd_in_rest) {
 8002d08:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc8 <countdown_tick+0xdc>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <countdown_tick+0x46>
        if ((int32_t)(cd_rest_deadline_ms - now) <= 0) {
 8002d10:	4b2e      	ldr	r3, [pc, #184]	@ (8002dcc <countdown_tick+0xe0>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	dc4d      	bgt.n	8002db8 <countdown_tick+0xcc>
            if (countdownRemainingRuns > 0) {
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <countdown_tick+0xe4>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <countdown_tick+0x40>
                countdown_start_one_run();
 8002d26:	f7ff ff79 	bl	8002c1c <countdown_start_one_run>
            } else {
                ModelHandle_StopCountdown();
            }
        }
        return;
 8002d2a:	e045      	b.n	8002db8 <countdown_tick+0xcc>
                ModelHandle_StopCountdown();
 8002d2c:	f7ff ff52 	bl	8002bd4 <ModelHandle_StopCountdown>
        return;
 8002d30:	e042      	b.n	8002db8 <countdown_tick+0xcc>
    }

    if ((int32_t)(cd_deadline_ms - now) > 0) {
 8002d32:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <countdown_tick+0xe8>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dd17      	ble.n	8002d6e <countdown_tick+0x82>
        uint32_t rem_ms = cd_deadline_ms - now;
 8002d3e:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <countdown_tick+0xe8>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	603b      	str	r3, [r7, #0]
        countdownDuration = (rem_ms + 999U) / 1000U;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002d4e:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <countdown_tick+0xec>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <countdown_tick+0xf0>)
 8002d58:	6013      	str	r3, [r2, #0]

        if (isTankFull()) {
 8002d5a:	f7ff fe97 	bl	8002a8c <isTankFull>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02b      	beq.n	8002dbc <countdown_tick+0xd0>
            stop_motor();
 8002d64:	f7ff fe8b 	bl	8002a7e <stop_motor>
            ModelHandle_StopCountdown();
 8002d68:	f7ff ff34 	bl	8002bd4 <ModelHandle_StopCountdown>
        }
        return;
 8002d6c:	e026      	b.n	8002dbc <countdown_tick+0xd0>
    }

    stop_motor();
 8002d6e:	f7ff fe86 	bl	8002a7e <stop_motor>
    if (countdownRemainingRuns > 0) countdownRemainingRuns--;
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <countdown_tick+0xe4>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <countdown_tick+0x9e>
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <countdown_tick+0xe4>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <countdown_tick+0xe4>)
 8002d88:	801a      	strh	r2, [r3, #0]
    if (countdownRemainingRuns == 0) {
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <countdown_tick+0xe4>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <countdown_tick+0xae>
        ModelHandle_StopCountdown();
 8002d94:	f7ff ff1e 	bl	8002bd4 <ModelHandle_StopCountdown>
        return;
 8002d98:	e011      	b.n	8002dbe <countdown_tick+0xd2>
    }

    cd_in_rest          = true;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <countdown_tick+0xdc>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    cd_rest_deadline_ms = now + CD_REST_MS;
 8002da0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <countdown_tick+0xe0>)
 8002daa:	6013      	str	r3, [r2, #0]
    countdownDuration   = 0;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <countdown_tick+0xf0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e004      	b.n	8002dbe <countdown_tick+0xd2>
    if (!countdownActive) return;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <countdown_tick+0xd2>
        return;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <countdown_tick+0xd2>
        return;
 8002dbc:	bf00      	nop
}
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000572 	.word	0x20000572
 8002dc8:	200005d4 	.word	0x200005d4
 8002dcc:	200005cc 	.word	0x200005cc
 8002dd0:	200005c4 	.word	0x200005c4
 8002dd4:	200005c8 	.word	0x200005c8
 8002dd8:	10624dd3 	.word	0x10624dd3
 8002ddc:	20000584 	.word	0x20000584

08002de0 <isDryLowSupply_debounced>:
static uint8_t  twist_dry_cnt        = 0;    // debounce
static bool     twist_priming        = false;
static uint32_t twist_prime_deadline = 0;

static inline bool isDryLowSupply_debounced(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
    bool raw = dry_raw_is_dry();
 8002de6:	f7ff fe7d 	bl	8002ae4 <dry_raw_is_dry>
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
    if (raw) {
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <isDryLowSupply_debounced+0x2a>
        if (twist_dry_cnt < 255) twist_dry_cnt++;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <isDryLowSupply_debounced+0x48>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2bff      	cmp	r3, #255	@ 0xff
 8002dfa:	d009      	beq.n	8002e10 <isDryLowSupply_debounced+0x30>
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <isDryLowSupply_debounced+0x48>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <isDryLowSupply_debounced+0x48>)
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e002      	b.n	8002e10 <isDryLowSupply_debounced+0x30>
    } else {
        twist_dry_cnt = 0;
 8002e0a:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <isDryLowSupply_debounced+0x48>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
    }
    return (twist_dry_cnt >= 3);
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <isDryLowSupply_debounced+0x48>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	bf8c      	ite	hi
 8002e18:	2301      	movhi	r3, #1
 8002e1a:	2300      	movls	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200005dc 	.word	0x200005dc

08002e2c <twist_arm_priming>:
static inline void twist_arm_priming(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
    if (TWIST_PRIME_SECONDS > 0) {
        twist_priming        = true;
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <twist_arm_priming+0x20>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
        twist_prime_deadline = now_ms() + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 8002e36:	f7ff fdc9 	bl	80029cc <now_ms>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002e40:	3308      	adds	r3, #8
 8002e42:	4a03      	ldr	r2, [pc, #12]	@ (8002e50 <twist_arm_priming+0x24>)
 8002e44:	6013      	str	r3, [r2, #0]
    } else {
        twist_priming        = false;
        twist_prime_deadline = 0;
    }
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200005dd 	.word	0x200005dd
 8002e50:	200005e0 	.word	0x200005e0

08002e54 <ModelHandle_StartTwist>:

void ModelHandle_StartTwist(uint16_t on_s, uint16_t off_s)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	80fb      	strh	r3, [r7, #6]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80bb      	strh	r3, [r7, #4]
    manualOverride   = false;
 8002e64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <ModelHandle_StartTwist+0x84>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
    manualActive     = false;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <ModelHandle_StartTwist+0x88>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    semiAutoActive   = false;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <ModelHandle_StartTwist+0x8c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
    timerActive      = false;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <ModelHandle_StartTwist+0x90>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    searchActive     = false;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <ModelHandle_StartTwist+0x94>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
    countdownActive  = false;
 8002e82:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <ModelHandle_StartTwist+0x98>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]

    if (on_s == 0)  on_s  = 1;
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <ModelHandle_StartTwist+0x3e>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	80fb      	strh	r3, [r7, #6]
    if (off_s == 0) off_s = 1;
 8002e92:	88bb      	ldrh	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <ModelHandle_StartTwist+0x48>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	80bb      	strh	r3, [r7, #4]

    twistSettings.onDurationSeconds  = on_s;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <ModelHandle_StartTwist+0x9c>)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	8053      	strh	r3, [r2, #2]
    twistSettings.offDurationSeconds = off_s;
 8002ea2:	4a13      	ldr	r2, [pc, #76]	@ (8002ef0 <ModelHandle_StartTwist+0x9c>)
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	8093      	strh	r3, [r2, #4]

    twistSettings.twistActive  = true;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <ModelHandle_StartTwist+0x9c>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    twistActive                = true;
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <ModelHandle_StartTwist+0xa0>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
    twist_on_phase             = false;
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <ModelHandle_StartTwist+0xa4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    twist_phase_deadline       = now_ms();
 8002eba:	f7ff fd87 	bl	80029cc <now_ms>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <ModelHandle_StartTwist+0xa8>)
 8002ec2:	6013      	str	r3, [r2, #0]
    twist_dry_cnt              = 0;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <ModelHandle_StartTwist+0xac>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
    twist_arm_priming();
 8002eca:	f7ff ffaf 	bl	8002e2c <twist_arm_priming>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000057b 	.word	0x2000057b
 8002edc:	20000571 	.word	0x20000571
 8002ee0:	20000576 	.word	0x20000576
 8002ee4:	20000575 	.word	0x20000575
 8002ee8:	20000574 	.word	0x20000574
 8002eec:	20000572 	.word	0x20000572
 8002ef0:	20000024 	.word	0x20000024
 8002ef4:	20000573 	.word	0x20000573
 8002ef8:	200005d5 	.word	0x200005d5
 8002efc:	200005d8 	.word	0x200005d8
 8002f00:	200005dc 	.word	0x200005dc

08002f04 <ModelHandle_StopTwist>:
void ModelHandle_StopTwist(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
    twistSettings.twistActive = false;
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <ModelHandle_StopTwist+0x24>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
    twistActive = false;
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <ModelHandle_StopTwist+0x28>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    twist_priming  = false;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <ModelHandle_StopTwist+0x2c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
    twist_dry_cnt  = 0;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <ModelHandle_StopTwist+0x30>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    stop_motor();
 8002f20:	f7ff fdad 	bl	8002a7e <stop_motor>
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000024 	.word	0x20000024
 8002f2c:	20000573 	.word	0x20000573
 8002f30:	200005dd 	.word	0x200005dd
 8002f34:	200005dc 	.word	0x200005dc

08002f38 <twist_tick>:
static void twist_tick(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) { twistActive = false; return; }
 8002f3e:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <twist_tick+0x14c>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <twist_tick+0x1c>
 8002f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003088 <twist_tick+0x150>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e093      	b.n	800307c <twist_tick+0x144>
    twistActive = true;
 8002f54:	4b4c      	ldr	r3, [pc, #304]	@ (8003088 <twist_tick+0x150>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]

    if (isTankFull()) {
 8002f5a:	f7ff fd97 	bl	8002a8c <isTankFull>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <twist_tick+0x32>
        ModelHandle_StopTwist();
 8002f64:	f7ff ffce 	bl	8002f04 <ModelHandle_StopTwist>
        return;
 8002f68:	e088      	b.n	800307c <twist_tick+0x144>
    }
    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8002f6a:	4b48      	ldr	r3, [pc, #288]	@ (800308c <twist_tick+0x154>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <twist_tick+0x5c>
 8002f72:	f7ff fd2b 	bl	80029cc <now_ms>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <twist_tick+0x158>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	4a45      	ldr	r2, [pc, #276]	@ (8003094 <twist_tick+0x15c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d307      	bcc.n	8002f94 <twist_tick+0x5c>
        stop_motor();
 8002f84:	f7ff fd7b 	bl	8002a7e <stop_motor>
        senseMaxRunReached = true;
 8002f88:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <twist_tick+0x160>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
        ModelHandle_StopTwist();
 8002f8e:	f7ff ffb9 	bl	8002f04 <ModelHandle_StopTwist>
        return;
 8002f92:	e073      	b.n	800307c <twist_tick+0x144>
    }

    uint32_t tnow = now_ms();
 8002f94:	f7ff fd1a 	bl	80029cc <now_ms>
 8002f98:	6078      	str	r0, [r7, #4]

    if (twist_priming) {
 8002f9a:	4b40      	ldr	r3, [pc, #256]	@ (800309c <twist_tick+0x164>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <twist_tick+0xac>
        if (tnow < twist_prime_deadline) {
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80030a0 <twist_tick+0x168>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d218      	bcs.n	8002fde <twist_tick+0xa6>
            if (!Motor_GetStatus()) start_motor();
 8002fac:	f000 fbe6 	bl	800377c <Motor_GetStatus>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f083 0301 	eor.w	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <twist_tick+0x88>
 8002fbc:	f7ff fd58 	bl	8002a70 <start_motor>
            twist_on_phase       = true;
 8002fc0:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <twist_tick+0x16c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <twist_tick+0x14c>)
 8002fc8:	885b      	ldrh	r3, [r3, #2]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd0:	fb03 f202 	mul.w	r2, r3, r2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <twist_tick+0x170>)
 8002fda:	6013      	str	r3, [r2, #0]
            return;
 8002fdc:	e04e      	b.n	800307c <twist_tick+0x144>
        } else {
            twist_priming = false;
 8002fde:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <twist_tick+0x164>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8002fe4:	4b30      	ldr	r3, [pc, #192]	@ (80030a8 <twist_tick+0x170>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dc44      	bgt.n	800307a <twist_tick+0x142>

    if (isDryLowSupply_debounced()) {
 8002ff0:	f7ff fef6 	bl	8002de0 <isDryLowSupply_debounced>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <twist_tick+0xe4>
        stop_motor();
 8002ffa:	f7ff fd40 	bl	8002a7e <stop_motor>
        twist_on_phase       = false;
 8002ffe:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <twist_tick+0x16c>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
        twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <twist_tick+0x14c>)
 8003006:	889b      	ldrh	r3, [r3, #4]
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800300e:	fb03 f202 	mul.w	r2, r3, r2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <twist_tick+0x170>)
 8003018:	6013      	str	r3, [r2, #0]
        return;
 800301a:	e02f      	b.n	800307c <twist_tick+0x144>
    }

    twist_on_phase = !twist_on_phase;
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <twist_tick+0x16c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <twist_tick+0x16c>)
 8003038:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 800303a:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <twist_tick+0x16c>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <twist_tick+0x126>
        start_motor();
 8003042:	f7ff fd15 	bl	8002a70 <start_motor>
        twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 8003046:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <twist_tick+0x14c>)
 8003048:	885b      	ldrh	r3, [r3, #2]
 800304a:	461a      	mov	r2, r3
 800304c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003050:	fb03 f202 	mul.w	r2, r3, r2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <twist_tick+0x170>)
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e00e      	b.n	800307c <twist_tick+0x144>
    } else {
        stop_motor();
 800305e:	f7ff fd0e 	bl	8002a7e <stop_motor>
        twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <twist_tick+0x14c>)
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800306c:	fb03 f202 	mul.w	r2, r3, r2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <twist_tick+0x170>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e000      	b.n	800307c <twist_tick+0x144>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 800307a:	bf00      	nop
    }
}
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000024 	.word	0x20000024
 8003088:	20000573 	.word	0x20000573
 800308c:	2000057c 	.word	0x2000057c
 8003090:	20000580 	.word	0x20000580
 8003094:	006ddd00 	.word	0x006ddd00
 8003098:	2000057a 	.word	0x2000057a
 800309c:	200005dd 	.word	0x200005dd
 80030a0:	200005e0 	.word	0x200005e0
 80030a4:	200005d5 	.word	0x200005d5
 80030a8:	200005d8 	.word	0x200005d8

080030ac <ModelHandle_StartSearch>:
static SearchState search_state = SEARCH_GAP_WAIT;
static uint32_t    search_deadline_ms = 0;
static uint8_t     search_dry_cnt = 0;    // debounce while RUN

void ModelHandle_StartSearch(uint16_t gap_s, uint16_t probe_s)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	460a      	mov	r2, r1
 80030b6:	80fb      	strh	r3, [r7, #6]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80bb      	strh	r3, [r7, #4]
    manualOverride   = false;
 80030bc:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <ModelHandle_StartSearch+0x94>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    manualActive     = false;
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <ModelHandle_StartSearch+0x98>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
    semiAutoActive   = false;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <ModelHandle_StartSearch+0x9c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
    timerActive      = false;
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <ModelHandle_StartSearch+0xa0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
    countdownActive  = false;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <ModelHandle_StartSearch+0xa4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    twistActive      = false;
 80030da:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <ModelHandle_StartSearch+0xa8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]

    if (gap_s   == 0) gap_s   = 5;
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <ModelHandle_StartSearch+0x3e>
 80030e6:	2305      	movs	r3, #5
 80030e8:	80fb      	strh	r3, [r7, #6]
    if (probe_s == 0) probe_s = 3;
 80030ea:	88bb      	ldrh	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <ModelHandle_StartSearch+0x48>
 80030f0:	2303      	movs	r3, #3
 80030f2:	80bb      	strh	r3, [r7, #4]

    searchSettings.testingGapSeconds = gap_s;     // gap
 80030f4:	4a18      	ldr	r2, [pc, #96]	@ (8003158 <ModelHandle_StartSearch+0xac>)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	8053      	strh	r3, [r2, #2]
    searchSettings.dryRunTimeSeconds = probe_s;   // probe
 80030fa:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <ModelHandle_StartSearch+0xac>)
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	8093      	strh	r3, [r2, #4]

    searchSettings.searchActive = true;
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <ModelHandle_StartSearch+0xac>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
    searchActive = true;
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <ModelHandle_StartSearch+0xb0>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]

    stop_motor();
 800310c:	f7ff fcb7 	bl	8002a7e <stop_motor>
    search_state       = SEARCH_GAP_WAIT;
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <ModelHandle_StartSearch+0xb4>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    search_deadline_ms = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 8003116:	f7ff fc59 	bl	80029cc <now_ms>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <ModelHandle_StartSearch+0xac>)
 800311e:	885b      	ldrh	r3, [r3, #2]
 8003120:	4619      	mov	r1, r3
 8003122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	4a0d      	ldr	r2, [pc, #52]	@ (8003164 <ModelHandle_StartSearch+0xb8>)
 800312e:	6013      	str	r3, [r2, #0]
    search_dry_cnt     = 0;
 8003130:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <ModelHandle_StartSearch+0xbc>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000057b 	.word	0x2000057b
 8003144:	20000571 	.word	0x20000571
 8003148:	20000576 	.word	0x20000576
 800314c:	20000575 	.word	0x20000575
 8003150:	20000572 	.word	0x20000572
 8003154:	20000573 	.word	0x20000573
 8003158:	2000001c 	.word	0x2000001c
 800315c:	20000574 	.word	0x20000574
 8003160:	200005e4 	.word	0x200005e4
 8003164:	200005e8 	.word	0x200005e8
 8003168:	200005ec 	.word	0x200005ec

0800316c <ModelHandle_StopSearch>:
void ModelHandle_StopSearch(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
    searchSettings.searchActive = false;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <ModelHandle_StopSearch+0x20>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    searchActive = false;
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <ModelHandle_StopSearch+0x24>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
    search_state = SEARCH_GAP_WAIT;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <ModelHandle_StopSearch+0x28>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
    stop_motor();
 8003182:	f7ff fc7c 	bl	8002a7e <stop_motor>
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000001c 	.word	0x2000001c
 8003190:	20000574 	.word	0x20000574
 8003194:	200005e4 	.word	0x200005e4

08003198 <isDryDebounced_RUN>:
static inline bool isDryDebounced_RUN(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
    if (dry_raw_is_dry()) {
 800319c:	f7ff fca2 	bl	8002ae4 <dry_raw_is_dry>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <isDryDebounced_RUN+0x24>
        if (search_dry_cnt < 255) search_dry_cnt++;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <isDryDebounced_RUN+0x3c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2bff      	cmp	r3, #255	@ 0xff
 80031ac:	d009      	beq.n	80031c2 <isDryDebounced_RUN+0x2a>
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <isDryDebounced_RUN+0x3c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <isDryDebounced_RUN+0x3c>)
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <isDryDebounced_RUN+0x2a>
    } else {
        search_dry_cnt = 0;
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <isDryDebounced_RUN+0x3c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    }
    return (search_dry_cnt >= 3);
 80031c2:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <isDryDebounced_RUN+0x3c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	bf8c      	ite	hi
 80031ca:	2301      	movhi	r3, #1
 80031cc:	2300      	movls	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200005ec 	.word	0x200005ec

080031d8 <search_tick>:
static void search_tick(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 80031de:	4b50      	ldr	r3, [pc, #320]	@ (8003320 <search_tick+0x148>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <search_tick+0x1c>
 80031ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003324 <search_tick+0x14c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e091      	b.n	8003318 <search_tick+0x140>
    searchActive = true;
 80031f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <search_tick+0x14c>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]

    uint32_t now = now_ms();
 80031fa:	f7ff fbe7 	bl	80029cc <now_ms>
 80031fe:	6078      	str	r0, [r7, #4]

    if (isTankFull()) {
 8003200:	f7ff fc44 	bl	8002a8c <isTankFull>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <search_tick+0x44>
        stop_motor();
 800320a:	f7ff fc38 	bl	8002a7e <stop_motor>
        searchSettings.searchActive = false;
 800320e:	4b44      	ldr	r3, [pc, #272]	@ (8003320 <search_tick+0x148>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
        searchActive = false;
 8003214:	4b43      	ldr	r3, [pc, #268]	@ (8003324 <search_tick+0x14c>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
        return;
 800321a:	e07d      	b.n	8003318 <search_tick+0x140>
    }

    switch (search_state)
 800321c:	4b42      	ldr	r3, [pc, #264]	@ (8003328 <search_tick+0x150>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d050      	beq.n	80032c6 <search_tick+0xee>
 8003224:	2b02      	cmp	r3, #2
 8003226:	dc77      	bgt.n	8003318 <search_tick+0x140>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <search_tick+0x5a>
 800322c:	2b01      	cmp	r3, #1
 800322e:	d021      	beq.n	8003274 <search_tick+0x9c>
 8003230:	e072      	b.n	8003318 <search_tick+0x140>
    {
        case SEARCH_GAP_WAIT:
            if (Motor_GetStatus()) stop_motor();
 8003232:	f000 faa3 	bl	800377c <Motor_GetStatus>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <search_tick+0x68>
 800323c:	f7ff fc1f 	bl	8002a7e <stop_motor>
            if ((int32_t)(search_deadline_ms - now) <= 0) {
 8003240:	4b3a      	ldr	r3, [pc, #232]	@ (800332c <search_tick+0x154>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	dc60      	bgt.n	800330e <search_tick+0x136>
                start_motor(); // probe ON
 800324c:	f7ff fc10 	bl	8002a70 <start_motor>
                search_state       = SEARCH_PROBE;
 8003250:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <search_tick+0x150>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.dryRunTimeSeconds * 1000UL;
 8003256:	4b32      	ldr	r3, [pc, #200]	@ (8003320 <search_tick+0x148>)
 8003258:	889b      	ldrh	r3, [r3, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003260:	fb03 f202 	mul.w	r2, r3, r2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	4a30      	ldr	r2, [pc, #192]	@ (800332c <search_tick+0x154>)
 800326a:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 800326c:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <search_tick+0x158>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
            }
            break;
 8003272:	e04c      	b.n	800330e <search_tick+0x136>

        case SEARCH_PROBE:
            if (!dry_raw_is_dry()) {
 8003274:	f7ff fc36 	bl	8002ae4 <dry_raw_is_dry>
 8003278:	4603      	mov	r3, r0
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <search_tick+0xc0>
                // Water detected → RUN
                search_state       = SEARCH_RUN;
 8003284:	4b28      	ldr	r3, [pc, #160]	@ (8003328 <search_tick+0x150>)
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = 0;
 800328a:	4b28      	ldr	r3, [pc, #160]	@ (800332c <search_tick+0x154>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
                search_dry_cnt     = 0;
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <search_tick+0x158>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
                break;
 8003296:	e03f      	b.n	8003318 <search_tick+0x140>
            }
            if ((int32_t)(search_deadline_ms - now) <= 0) {
 8003298:	4b24      	ldr	r3, [pc, #144]	@ (800332c <search_tick+0x154>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	dc36      	bgt.n	8003312 <search_tick+0x13a>
                // Still dry after probe
                stop_motor();
 80032a4:	f7ff fbeb 	bl	8002a7e <stop_motor>
                search_state       = SEARCH_GAP_WAIT;
 80032a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <search_tick+0x150>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <search_tick+0x148>)
 80032b0:	885b      	ldrh	r3, [r3, #2]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b8:	fb03 f202 	mul.w	r2, r3, r2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	4a1a      	ldr	r2, [pc, #104]	@ (800332c <search_tick+0x154>)
 80032c2:	6013      	str	r3, [r2, #0]
            }
            break;
 80032c4:	e025      	b.n	8003312 <search_tick+0x13a>

        case SEARCH_RUN:
            if (isDryDebounced_RUN()) {
 80032c6:	f7ff ff67 	bl	8003198 <isDryDebounced_RUN>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <search_tick+0x120>
                stop_motor();
 80032d0:	f7ff fbd5 	bl	8002a7e <stop_motor>
                search_state       = SEARCH_GAP_WAIT;
 80032d4:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <search_tick+0x150>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = now + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 80032da:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <search_tick+0x148>)
 80032dc:	885b      	ldrh	r3, [r3, #2]
 80032de:	461a      	mov	r2, r3
 80032e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032e4:	fb03 f202 	mul.w	r2, r3, r2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	4a0f      	ldr	r2, [pc, #60]	@ (800332c <search_tick+0x154>)
 80032ee:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <search_tick+0x158>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
                break;
 80032f6:	e00f      	b.n	8003318 <search_tick+0x140>
            }
            if (!Motor_GetStatus()) start_motor(); // keep asserted
 80032f8:	f000 fa40 	bl	800377c <Motor_GetStatus>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <search_tick+0x13e>
 8003308:	f7ff fbb2 	bl	8002a70 <start_motor>
            break;
 800330c:	e003      	b.n	8003316 <search_tick+0x13e>
            break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <search_tick+0x140>
            break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <search_tick+0x140>
            break;
 8003316:	bf00      	nop
    }
}
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000001c 	.word	0x2000001c
 8003324:	20000574 	.word	0x20000574
 8003328:	200005e4 	.word	0x200005e4
 800332c:	200005e8 	.word	0x200005e8
 8003330:	200005ec 	.word	0x200005ec

08003334 <seconds_since_midnight>:

/* =======================
   TIMER (RTC based)
   ======================= */
static uint32_t seconds_since_midnight(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
    RTC_GetTimeDate();
 8003338:	f000 fc02 	bl	8003b40 <RTC_GetTimeDate>
    return ((uint32_t)time.hour * 3600UL) +
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <seconds_since_midnight+0x30>)
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	461a      	mov	r2, r3
 8003342:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003346:	fb03 f202 	mul.w	r2, r3, r2
           ((uint32_t)time.minutes * 60UL) +
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <seconds_since_midnight+0x30>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	4619      	mov	r1, r3
 8003350:	460b      	mov	r3, r1
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a5b      	subs	r3, r3, r1
 8003356:	009b      	lsls	r3, r3, #2
    return ((uint32_t)time.hour * 3600UL) +
 8003358:	4413      	add	r3, r2
           (uint32_t)time.seconds;
 800335a:	4a02      	ldr	r2, [pc, #8]	@ (8003364 <seconds_since_midnight+0x30>)
 800335c:	7812      	ldrb	r2, [r2, #0]
           ((uint32_t)time.minutes * 60UL) +
 800335e:	4413      	add	r3, r2
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200005f4 	.word	0x200005f4

08003368 <timer_tick>:
static void timer_tick(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
    timerActive = false;
 800336e:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <timer_tick+0x108>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 8003374:	f7ff ffde 	bl	8003334 <seconds_since_midnight>
 8003378:	6078      	str	r0, [r7, #4]

    static uint32_t timerRetryDeadline = 0;

    for (int i = 0; i < 3; i++) {
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e06a      	b.n	8003456 <timer_tick+0xee>
        TimerSlot* s = &timerSlots[i];
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4a3a      	ldr	r2, [pc, #232]	@ (8003474 <timer_tick+0x10c>)
 800338c:	4413      	add	r3, r2
 800338e:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d157      	bne.n	800344e <timer_tick+0xe6>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d812      	bhi.n	80033d0 <timer_tick+0x68>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d306      	bcc.n	80033c2 <timer_tick+0x5a>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d201      	bcs.n	80033c2 <timer_tick+0x5a>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <timer_tick+0x5c>
 80033c2:	2300      	movs	r3, #0
 80033c4:	72fb      	strb	r3, [r7, #11]
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	72fb      	strb	r3, [r7, #11]
 80033ce:	e011      	b.n	80033f4 <timer_tick+0x8c>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d204      	bcs.n	80033e4 <timer_tick+0x7c>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d201      	bcs.n	80033e8 <timer_tick+0x80>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <timer_tick+0x82>
 80033e8:	2300      	movs	r3, #0
 80033ea:	72fb      	strb	r3, [r7, #11]
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	72fb      	strb	r3, [r7, #11]
        }

        if (inWindow) {
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02a      	beq.n	8003450 <timer_tick+0xe8>
            timerActive = true;
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <timer_tick+0x108>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]

            if (now_ms() < timerRetryDeadline) return;
 8003400:	f7ff fae4 	bl	80029cc <now_ms>
 8003404:	4602      	mov	r2, r0
 8003406:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <timer_tick+0x110>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d32c      	bcc.n	8003468 <timer_tick+0x100>

            if (dry_raw_is_dry()) {
 800340e:	f7ff fb69 	bl	8002ae4 <dry_raw_is_dry>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <timer_tick+0xd0>
                stop_motor();
 8003418:	f7ff fb31 	bl	8002a7e <stop_motor>
                timerRetryDeadline = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800341c:	f7ff fad6 	bl	80029cc <now_ms>
 8003420:	4602      	mov	r2, r0
 8003422:	4b16      	ldr	r3, [pc, #88]	@ (800347c <timer_tick+0x114>)
 8003424:	885b      	ldrh	r3, [r3, #2]
 8003426:	4619      	mov	r1, r3
 8003428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <timer_tick+0x110>)
 8003434:	6013      	str	r3, [r2, #0]
                return;
 8003436:	e018      	b.n	800346a <timer_tick+0x102>
            }

            if (isTankFull()) {
 8003438:	f7ff fb28 	bl	8002a8c <isTankFull>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <timer_tick+0xe0>
                stop_motor();
 8003442:	f7ff fb1c 	bl	8002a7e <stop_motor>
                return;
 8003446:	e010      	b.n	800346a <timer_tick+0x102>
            }

            start_motor();
 8003448:	f7ff fb12 	bl	8002a70 <start_motor>
            return;
 800344c:	e00d      	b.n	800346a <timer_tick+0x102>
        if (!s->active) continue;
 800344e:	bf00      	nop
    for (int i = 0; i < 3; i++) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b02      	cmp	r3, #2
 800345a:	dd91      	ble.n	8003380 <timer_tick+0x18>
        }
    }

    stop_motor();
 800345c:	f7ff fb0f 	bl	8002a7e <stop_motor>
    timerRetryDeadline = 0;
 8003460:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <timer_tick+0x110>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e000      	b.n	800346a <timer_tick+0x102>
            if (now_ms() < timerRetryDeadline) return;
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000575 	.word	0x20000575
 8003474:	20000588 	.word	0x20000588
 8003478:	200005f0 	.word	0x200005f0
 800347c:	2000001c 	.word	0x2000001c

08003480 <ModelHandle_StartSemiAuto>:

/* =======================
   SEMI-AUTO
   ======================= */
void ModelHandle_StartSemiAuto(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
    manualOverride = false;
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <ModelHandle_StartSemiAuto+0x60>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 800348a:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <ModelHandle_StartSemiAuto+0x64>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8003490:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <ModelHandle_StartSemiAuto+0x68>)
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <ModelHandle_StartSemiAuto+0x6c>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    countdownActive= false;
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <ModelHandle_StartSemiAuto+0x70>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <ModelHandle_StartSemiAuto+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]

    semiAutoActive = true;
 80034a8:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <ModelHandle_StartSemiAuto+0x78>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 80034ae:	f7ff faed 	bl	8002a8c <isTankFull>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f083 0301 	eor.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <ModelHandle_StartSemiAuto+0x4a>
        start_motor();
 80034be:	f7ff fad7 	bl	8002a70 <start_motor>
        printf("Semi-Auto Started\r\n");
 80034c2:	480e      	ldr	r0, [pc, #56]	@ (80034fc <ModelHandle_StartSemiAuto+0x7c>)
 80034c4:	f007 fce2 	bl	800ae8c <puts>
    } else {
        stop_motor();
        semiAutoActive = false;
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 80034c8:	e007      	b.n	80034da <ModelHandle_StartSemiAuto+0x5a>
        stop_motor();
 80034ca:	f7ff fad8 	bl	8002a7e <stop_motor>
        semiAutoActive = false;
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <ModelHandle_StartSemiAuto+0x78>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Not Started: Already Full\r\n");
 80034d4:	480a      	ldr	r0, [pc, #40]	@ (8003500 <ModelHandle_StartSemiAuto+0x80>)
 80034d6:	f007 fcd9 	bl	800ae8c <puts>
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000057b 	.word	0x2000057b
 80034e4:	20000571 	.word	0x20000571
 80034e8:	20000575 	.word	0x20000575
 80034ec:	20000574 	.word	0x20000574
 80034f0:	20000572 	.word	0x20000572
 80034f4:	20000573 	.word	0x20000573
 80034f8:	20000576 	.word	0x20000576
 80034fc:	0800d278 	.word	0x0800d278
 8003500:	0800d28c 	.word	0x0800d28c

08003504 <semi_auto_tick>:
static void semi_auto_tick(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 8003508:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <semi_auto_tick+0x50>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f083 0301 	eor.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11b      	bne.n	8003550 <semi_auto_tick+0x4c>

    if (isTankFull()) {
 8003518:	f7ff fab8 	bl	8002a8c <isTankFull>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <semi_auto_tick+0x36>
        stop_motor();
 8003522:	f7ff faac 	bl	8002a7e <stop_motor>
        semiAutoActive   = false;
 8003526:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <semi_auto_tick+0x50>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 800352c:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <semi_auto_tick+0x54>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Complete: Tank Full\r\n");
 8003532:	480a      	ldr	r0, [pc, #40]	@ (800355c <semi_auto_tick+0x58>)
 8003534:	f007 fcaa 	bl	800ae8c <puts>
 8003538:	e00b      	b.n	8003552 <semi_auto_tick+0x4e>
    } else {
        if (!Motor_GetStatus()) start_motor();
 800353a:	f000 f91f 	bl	800377c <Motor_GetStatus>
 800353e:	4603      	mov	r3, r0
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <semi_auto_tick+0x4e>
 800354a:	f7ff fa91 	bl	8002a70 <start_motor>
 800354e:	e000      	b.n	8003552 <semi_auto_tick+0x4e>
    if (!semiAutoActive) return;
 8003550:	bf00      	nop
    }
}
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000576 	.word	0x20000576
 8003558:	2000057c 	.word	0x2000057c
 800355c:	0800d2b4 	.word	0x0800d2b4

08003560 <protections_tick>:

/* =======================
   PROTECTIONS
   ======================= */
static void protections_tick(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
    /* Manual override → only hard protections */
    if (manualOverride && manualActive) {
 8003564:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <protections_tick+0xf4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02d      	beq.n	80035ca <protections_tick+0x6a>
 800356e:	4b3a      	ldr	r3, [pc, #232]	@ (8003658 <protections_tick+0xf8>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d028      	beq.n	80035ca <protections_tick+0x6a>
        if (senseOverLoad && motorStatus == 1U) stop_motor();
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <protections_tick+0xfc>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <protections_tick+0x30>
 8003582:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <protections_tick+0x100>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <protections_tick+0x30>
 800358c:	f7ff fa77 	bl	8002a7e <stop_motor>
        if (senseOverUnderVolt) stop_motor();
 8003590:	4b34      	ldr	r3, [pc, #208]	@ (8003664 <protections_tick+0x104>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <protections_tick+0x3e>
 800359a:	f7ff fa70 	bl	8002a7e <stop_motor>
        if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 800359e:	4b32      	ldr	r3, [pc, #200]	@ (8003668 <protections_tick+0x108>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d054      	beq.n	8003650 <protections_tick+0xf0>
 80035a6:	f7ff fa11 	bl	80029cc <now_ms>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <protections_tick+0x10c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003670 <protections_tick+0x110>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d34b      	bcc.n	8003650 <protections_tick+0xf0>
            stop_motor();
 80035b8:	f7ff fa61 	bl	8002a7e <stop_motor>
            senseMaxRunReached = true;
 80035bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <protections_tick+0x114>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
            maxRunTimerArmed = false;
 80035c2:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <protections_tick+0x108>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
        }
        return;
 80035c8:	e042      	b.n	8003650 <protections_tick+0xf0>
    }

    /* DRY:
       - Always set the flag for UI.
       - Hard-stop on dry ONLY if Twist is NOT active (Twist soft-handles dry). */
    if (motorStatus == 1U && dry_raw_is_dry()) {
 80035ca:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <protections_tick+0x100>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d111      	bne.n	80035f8 <protections_tick+0x98>
 80035d4:	f7ff fa86 	bl	8002ae4 <dry_raw_is_dry>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <protections_tick+0x98>
        senseDryRun = true;
 80035de:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <protections_tick+0x118>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
        if (!twistSettings.twistActive) {
 80035e4:	4b25      	ldr	r3, [pc, #148]	@ (800367c <protections_tick+0x11c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <protections_tick+0x9e>
            stop_motor();
 80035f2:	f7ff fa44 	bl	8002a7e <stop_motor>
        if (!twistSettings.twistActive) {
 80035f6:	e002      	b.n	80035fe <protections_tick+0x9e>
        }
    } else {
        senseDryRun = false;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <protections_tick+0x118>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
    }

    /* Other protections remain hard stops */
    if (senseOverLoad && motorStatus == 1U) stop_motor();
 80035fe:	4b17      	ldr	r3, [pc, #92]	@ (800365c <protections_tick+0xfc>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <protections_tick+0xb6>
 8003608:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <protections_tick+0x100>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <protections_tick+0xb6>
 8003612:	f7ff fa34 	bl	8002a7e <stop_motor>
    if (senseOverUnderVolt) stop_motor();
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <protections_tick+0x104>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <protections_tick+0xc4>
 8003620:	f7ff fa2d 	bl	8002a7e <stop_motor>

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8003624:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <protections_tick+0x108>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <protections_tick+0xf2>
 800362c:	f7ff f9ce 	bl	80029cc <now_ms>
 8003630:	4602      	mov	r2, r0
 8003632:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <protections_tick+0x10c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <protections_tick+0x110>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d309      	bcc.n	8003652 <protections_tick+0xf2>
        stop_motor();
 800363e:	f7ff fa1e 	bl	8002a7e <stop_motor>
        senseMaxRunReached = true;
 8003642:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <protections_tick+0x114>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 8003648:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <protections_tick+0x108>)
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e000      	b.n	8003652 <protections_tick+0xf2>
        return;
 8003650:	bf00      	nop
    }
}
 8003652:	bd80      	pop	{r7, pc}
 8003654:	2000057b 	.word	0x2000057b
 8003658:	20000571 	.word	0x20000571
 800365c:	20000578 	.word	0x20000578
 8003660:	20000570 	.word	0x20000570
 8003664:	20000579 	.word	0x20000579
 8003668:	2000057c 	.word	0x2000057c
 800366c:	20000580 	.word	0x20000580
 8003670:	006ddd00 	.word	0x006ddd00
 8003674:	2000057a 	.word	0x2000057a
 8003678:	20000577 	.word	0x20000577
 800367c:	20000024 	.word	0x20000024

08003680 <leds_from_model>:

/* =======================
   LEDs
   ======================= */
static void leds_from_model(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8003684:	f7fe fc3e 	bl	8001f04 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <leds_from_model+0x90>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d104      	bne.n	800369c <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2101      	movs	r1, #1
 8003696:	2000      	movs	r0, #0
 8003698:	f7fe fc54 	bl	8001f44 <LED_SetIntent>
    }
    if (countdownActive) {
 800369c:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <leds_from_model+0x94>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 80036a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80036aa:	2102      	movs	r1, #2
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fe fc49 	bl	8001f44 <LED_SetIntent>
    }
    if (senseDryRun) {
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <leds_from_model+0x98>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 80036bc:	2200      	movs	r2, #0
 80036be:	2101      	movs	r1, #1
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7fe fc3f 	bl	8001f44 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <leds_from_model+0x9c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 80036d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80036d4:	2102      	movs	r1, #2
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7fe fc34 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverLoad) {
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <leds_from_model+0xa0>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 80036e6:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80036ea:	2102      	movs	r1, #2
 80036ec:	2002      	movs	r0, #2
 80036ee:	f7fe fc29 	bl	8001f44 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 80036f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <leds_from_model+0xa4>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 80036fc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003700:	2102      	movs	r1, #2
 8003702:	2003      	movs	r0, #3
 8003704:	f7fe fc1e 	bl	8001f44 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8003708:	f7fe fc3c 	bl	8001f84 <LED_ApplyIntents>
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000570 	.word	0x20000570
 8003714:	20000572 	.word	0x20000572
 8003718:	20000577 	.word	0x20000577
 800371c:	2000057a 	.word	0x2000057a
 8003720:	20000578 	.word	0x20000578
 8003724:	20000579 	.word	0x20000579

08003728 <ModelHandle_SetMotor>:

/* =======================
   Public Motor APIs
   ======================= */
void ModelHandle_SetMotor(bool on)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
    manualOverride = true;
 8003732:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <ModelHandle_SetMotor+0x34>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
    Relay_Set(1, on);
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	4619      	mov	r1, r3
 800373c:	2001      	movs	r0, #1
 800373e:	f000 f8d7 	bl	80038f0 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <ModelHandle_SetMotor+0x24>
 8003748:	2201      	movs	r2, #1
 800374a:	e000      	b.n	800374e <ModelHandle_SetMotor+0x26>
 800374c:	2200      	movs	r2, #0
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <ModelHandle_SetMotor+0x38>)
 8003750:	701a      	strb	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000057b 	.word	0x2000057b
 8003760:	20000570 	.word	0x20000570

08003764 <ModelHandle_ClearManualOverride>:
void ModelHandle_ClearManualOverride(void) { manualOverride = false; }
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
 8003768:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <ModelHandle_ClearManualOverride+0x14>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	2000057b 	.word	0x2000057b

0800377c <Motor_GetStatus>:
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <Motor_GetStatus+0x1c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	20000570 	.word	0x20000570

0800379c <ModelHandle_Process>:

/* =======================
   Main pump
   ======================= */
void ModelHandle_Process(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
    countdown_tick();
 80037a0:	f7ff faa4 	bl	8002cec <countdown_tick>
    twist_tick();
 80037a4:	f7ff fbc8 	bl	8002f38 <twist_tick>
    search_tick();
 80037a8:	f7ff fd16 	bl	80031d8 <search_tick>
    timer_tick();
 80037ac:	f7ff fddc 	bl	8003368 <timer_tick>
    semi_auto_tick();
 80037b0:	f7ff fea8 	bl	8003504 <semi_auto_tick>

    protections_tick();
 80037b4:	f7ff fed4 	bl	8003560 <protections_tick>
    leds_from_model();
 80037b8:	f7ff ff62 	bl	8003680 <leds_from_model>
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}

080037c0 <ModelHandle_ProcessUartCommand>:

/* =======================
   UART commands
   ======================= */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d033      	beq.n	8003836 <ModelHandle_ProcessUartCommand+0x76>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d02f      	beq.n	8003836 <ModelHandle_ProcessUartCommand+0x76>

    if      (strcmp(cmd, "MOTOR_ON") == 0)  { manualOverride = true; manualActive = true;  start_motor(); printf("Manual ON (UART)\r\n"); }
 80037d6:	491a      	ldr	r1, [pc, #104]	@ (8003840 <ModelHandle_ProcessUartCommand+0x80>)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7fc fcb9 	bl	8000150 <strcmp>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <ModelHandle_ProcessUartCommand+0x3c>
 80037e4:	4b17      	ldr	r3, [pc, #92]	@ (8003844 <ModelHandle_ProcessUartCommand+0x84>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	4b17      	ldr	r3, [pc, #92]	@ (8003848 <ModelHandle_ProcessUartCommand+0x88>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	f7ff f93e 	bl	8002a70 <start_motor>
 80037f4:	4815      	ldr	r0, [pc, #84]	@ (800384c <ModelHandle_ProcessUartCommand+0x8c>)
 80037f6:	f007 fb49 	bl	800ae8c <puts>
 80037fa:	e01d      	b.n	8003838 <ModelHandle_ProcessUartCommand+0x78>
    else if (strcmp(cmd, "MOTOR_OFF")== 0)  { manualOverride = true; manualActive = false; stop_motor();  printf("Manual OFF (UART)\r\n"); }
 80037fc:	4914      	ldr	r1, [pc, #80]	@ (8003850 <ModelHandle_ProcessUartCommand+0x90>)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fc fca6 	bl	8000150 <strcmp>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <ModelHandle_ProcessUartCommand+0x62>
 800380a:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <ModelHandle_ProcessUartCommand+0x84>)
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <ModelHandle_ProcessUartCommand+0x88>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	f7ff f932 	bl	8002a7e <stop_motor>
 800381a:	480e      	ldr	r0, [pc, #56]	@ (8003854 <ModelHandle_ProcessUartCommand+0x94>)
 800381c:	f007 fb36 	bl	800ae8c <puts>
 8003820:	e00a      	b.n	8003838 <ModelHandle_ProcessUartCommand+0x78>
    else if (strcmp(cmd, "SEMI_AUTO_START")==0) { ModelHandle_StartSemiAuto(); }
 8003822:	490d      	ldr	r1, [pc, #52]	@ (8003858 <ModelHandle_ProcessUartCommand+0x98>)
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fc fc93 	bl	8000150 <strcmp>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <ModelHandle_ProcessUartCommand+0x78>
 8003830:	f7ff fe26 	bl	8003480 <ModelHandle_StartSemiAuto>
 8003834:	e000      	b.n	8003838 <ModelHandle_ProcessUartCommand+0x78>
    if (!cmd || !*cmd) return;
 8003836:	bf00      	nop
}
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	0800d2d4 	.word	0x0800d2d4
 8003844:	2000057b 	.word	0x2000057b
 8003848:	20000571 	.word	0x20000571
 800384c:	0800d2e0 	.word	0x0800d2e0
 8003850:	0800d2f4 	.word	0x0800d2f4
 8003854:	0800d300 	.word	0x0800d300
 8003858:	0800d314 	.word	0x0800d314

0800385c <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	4b1e      	ldr	r3, [pc, #120]	@ (80038e8 <Relay_Init+0x8c>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <Relay_Init+0x8c>)
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	6193      	str	r3, [r2, #24]
 800387a:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <Relay_Init+0x8c>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2302      	movs	r3, #2
 8003890:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e01e      	b.n	80038d6 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <Relay_Init+0x90>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	889b      	ldrh	r3, [r3, #4]
 80038a2:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 80038a4:	4a11      	ldr	r2, [pc, #68]	@ (80038ec <Relay_Init+0x90>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038ac:	1d3a      	adds	r2, r7, #4
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 f80f 	bl	80068d4 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 80038b6:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <Relay_Init+0x90>)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80038be:	4a0b      	ldr	r2, [pc, #44]	@ (80038ec <Relay_Init+0x90>)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	889b      	ldrh	r3, [r3, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	4619      	mov	r1, r3
 80038cc:	f003 f99d 	bl	8006c0a <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3301      	adds	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	dddd      	ble.n	8003898 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800d650 	.word	0x0800d650

080038f0 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	460a      	mov	r2, r1
 80038fa:	71fb      	strb	r3, [r7, #7]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <Relay_Set+0x3c>
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d80f      	bhi.n	800392c <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	3b01      	subs	r3, #1
 8003910:	4a08      	ldr	r2, [pc, #32]	@ (8003934 <Relay_Set+0x44>)
 8003912:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	3b01      	subs	r3, #1
 800391a:	4a06      	ldr	r2, [pc, #24]	@ (8003934 <Relay_Set+0x44>)
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003922:	79ba      	ldrb	r2, [r7, #6]
 8003924:	4619      	mov	r1, r3
 8003926:	f003 f970 	bl	8006c0a <HAL_GPIO_WritePin>
 800392a:	e000      	b.n	800392e <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 800392c:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800d650 	.word	0x0800d650

08003938 <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003940:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <rf_delay_us+0x2c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8003948:	bf00      	nop
 800394a:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <rf_delay_us+0x2c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d8f9      	bhi.n	800394a <rf_delay_us+0x12>
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000410 	.word	0x20000410

08003968 <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <RF_Init+0x14>)
 8003972:	f003 f94a 	bl	8006c0a <HAL_GPIO_WritePin>
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40010c00 	.word	0x40010c00

08003980 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 800398a:	2201      	movs	r2, #1
 800398c:	2180      	movs	r1, #128	@ 0x80
 800398e:	4809      	ldr	r0, [pc, #36]	@ (80039b4 <send_high_low+0x34>)
 8003990:	f003 f93b 	bl	8006c0a <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffcf 	bl	8003938 <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	4805      	ldr	r0, [pc, #20]	@ (80039b4 <send_high_low+0x34>)
 80039a0:	f003 f933 	bl	8006c0a <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 80039a4:	6838      	ldr	r0, [r7, #0]
 80039a6:	f7ff ffc7 	bl	8003938 <rf_delay_us>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40010c00 	.word	0x40010c00

080039b8 <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 80039c8:	f44f 7161 	mov.w	r1, #900	@ 0x384
 80039cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80039d0:	f7ff ffd6 	bl	8003980 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 80039d4:	e005      	b.n	80039e2 <send_bit+0x2a>
        send_high_low(900, 300);
 80039d6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80039da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80039de:	f7ff ffcf 	bl	8003980 <send_high_low>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e031      	b.n	8003a60 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 80039fc:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 8003a00:	f240 1013 	movw	r0, #275	@ 0x113
 8003a04:	f7ff ffbc 	bl	8003980 <send_high_low>
        rf_delay_us(1000);
 8003a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a0c:	f7ff ff94 	bl	8003938 <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	72fb      	strb	r3, [r7, #11]
 8003a18:	e011      	b.n	8003a3e <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 8003a1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ffc3 	bl	80039b8 <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003a32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	72fb      	strb	r3, [r7, #11]
 8003a3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dae9      	bge.n	8003a1a <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 8003a46:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003a4a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a4e:	f7ff ff97 	bl	8003980 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 8003a52:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003a56:	f7ff ff6f 	bl	8003938 <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	ddca      	ble.n	80039fc <RF_SendCode+0x12>
    }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	0092      	lsls	r2, r2, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 8003aa6:	2332      	movs	r3, #50	@ 0x32
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	21d0      	movs	r1, #208	@ 0xd0
 8003aac:	4822      	ldr	r0, [pc, #136]	@ (8003b38 <RTC_Init+0x98>)
 8003aae:	f003 fe8d 	bl	80077cc <HAL_I2C_IsDeviceReady>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 8003ab8:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <RTC_Init+0x9c>)
 8003aba:	22d0      	movs	r2, #208	@ 0xd0
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	e010      	b.n	8003ae2 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8003ac0:	2332      	movs	r3, #50	@ 0x32
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	21ae      	movs	r1, #174	@ 0xae
 8003ac6:	481c      	ldr	r0, [pc, #112]	@ (8003b38 <RTC_Init+0x98>)
 8003ac8:	f003 fe80 	bl	80077cc <HAL_I2C_IsDeviceReady>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <RTC_Init+0x9c>)
 8003ad4:	22ae      	movs	r2, #174	@ 0xae
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	e003      	b.n	8003ae2 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 8003ada:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <RTC_Init+0x9c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	e027      	b.n	8003b32 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003ae2:	4b16      	ldr	r3, [pc, #88]	@ (8003b3c <RTC_Init+0x9c>)
 8003ae4:	8819      	ldrh	r1, [r3, #0]
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	9302      	str	r3, [sp, #8]
 8003aec:	2301      	movs	r3, #1
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	1dfb      	adds	r3, r7, #7
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2301      	movs	r3, #1
 8003af6:	2200      	movs	r2, #0
 8003af8:	480f      	ldr	r0, [pc, #60]	@ (8003b38 <RTC_Init+0x98>)
 8003afa:	f003 fbf3 	bl	80072e4 <HAL_I2C_Mem_Read>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da12      	bge.n	8003b32 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 8003b16:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <RTC_Init+0x9c>)
 8003b18:	8819      	ldrh	r1, [r3, #0]
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	2301      	movs	r3, #1
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4802      	ldr	r0, [pc, #8]	@ (8003b38 <RTC_Init+0x98>)
 8003b2e:	f003 fadf 	bl	80070f0 <HAL_I2C_Mem_Write>
        }
    }
}
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000350 	.word	0x20000350
 8003b3c:	200005fc 	.word	0x200005fc

08003b40 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <RTC_GetTimeDate+0x130>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8089 	beq.w	8003c62 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8003b50:	4b47      	ldr	r3, [pc, #284]	@ (8003c70 <RTC_GetTimeDate+0x130>)
 8003b52:	8819      	ldrh	r1, [r3, #0]
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	9302      	str	r3, [sp, #8]
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	2200      	movs	r2, #0
 8003b66:	4843      	ldr	r0, [pc, #268]	@ (8003c74 <RTC_GetTimeDate+0x134>)
 8003b68:	f003 fbbc 	bl	80072e4 <HAL_I2C_Mem_Read>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d179      	bne.n	8003c66 <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8003b72:	793b      	ldrb	r3, [r7, #4]
 8003b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff78 	bl	8003a70 <bcd2dec>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b3c      	ldr	r3, [pc, #240]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003b86:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 8003b88:	797b      	ldrb	r3, [r7, #5]
 8003b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff6d 	bl	8003a70 <bcd2dec>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003b9c:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8003b9e:	79bb      	ldrb	r3, [r7, #6]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d025      	beq.n	8003bf4 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 8003ba8:	79bb      	ldrb	r3, [r7, #6]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5d 	bl	8003a70 <bcd2dec>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 8003bba:	79bb      	ldrb	r3, [r7, #6]
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d108      	bne.n	8003bde <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8003bcc:	7bbb      	ldrb	r3, [r7, #14]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <RTC_GetTimeDate+0x96>
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	e000      	b.n	8003bd8 <RTC_GetTimeDate+0x98>
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003bda:	709a      	strb	r2, [r3, #2]
 8003bdc:	e015      	b.n	8003c0a <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8003bde:	7bbb      	ldrb	r3, [r7, #14]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <RTC_GetTimeDate+0xac>
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	330c      	adds	r3, #12
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e000      	b.n	8003bee <RTC_GetTimeDate+0xae>
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4a22      	ldr	r2, [pc, #136]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003bf0:	7093      	strb	r3, [r2, #2]
 8003bf2:	e00a      	b.n	8003c0a <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff37 	bl	8003a70 <bcd2dec>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b1c      	ldr	r3, [pc, #112]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003c08:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ff2c 	bl	8003a70 <bcd2dec>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003c1e:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8003c20:	7a3b      	ldrb	r3, [r7, #8]
 8003c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff21 	bl	8003a70 <bcd2dec>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003c34:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 8003c36:	7a7b      	ldrb	r3, [r7, #9]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff16 	bl	8003a70 <bcd2dec>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003c4a:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 8003c4c:	7abb      	ldrb	r3, [r7, #10]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ff0e 	bl	8003a70 <bcd2dec>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <RTC_GetTimeDate+0x138>)
 8003c5e:	80da      	strh	r2, [r3, #6]
 8003c60:	e002      	b.n	8003c68 <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <RTC_GetTimeDate+0x128>
        return;
 8003c66:	bf00      	nop
}
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200005fc 	.word	0x200005fc
 8003c74:	20000350 	.word	0x20000350
 8003c78:	200005f4 	.word	0x200005f4

08003c7c <lcd_line>:
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;
static uint16_t edit_countdown_rep = 1;   // NEW

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 8003c88:	f107 000c 	add.w	r0, r7, #12
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <lcd_line+0x38>)
 8003c90:	2111      	movs	r1, #17
 8003c92:	f007 f903 	bl	800ae9c <sniprintf>
    lcd_put_cur(row, 0);
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd ffc4 	bl	8001c28 <lcd_put_cur>
    lcd_send_string(ln);
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd ffe1 	bl	8001c6c <lcd_send_string>
}
 8003caa:	bf00      	nop
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0800d380 	.word	0x0800d380

08003cb8 <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f7ff ffda 	bl	8003c7c <lcd_line>
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f7ff ffce 	bl	8003c7c <lcd_line>
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	f001 fede 	bl	8005aac <HAL_GetTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a02      	ldr	r2, [pc, #8]	@ (8003cfc <refreshInactivityTimer+0x14>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000060c 	.word	0x2000060c

08003d00 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <goto_menu_top+0x18>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4b04      	ldr	r3, [pc, #16]	@ (8003d1c <goto_menu_top+0x1c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	20000614 	.word	0x20000614
 8003d1c:	20000618 	.word	0x20000618

08003d20 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	@ 0x30
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	70fb      	strb	r3, [r7, #3]
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	dc20      	bgt.n	8003d76 <format_menu_line+0x56>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db1d      	blt.n	8003d76 <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <format_menu_line+0x24>
 8003d40:	233e      	movs	r3, #62	@ 0x3e
 8003d42:	e000      	b.n	8003d46 <format_menu_line+0x26>
 8003d44:	2320      	movs	r3, #32
 8003d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 8003d4a:	4a10      	ldr	r2, [pc, #64]	@ (8003d8c <format_menu_line+0x6c>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	f107 0014 	add.w	r0, r7, #20
 8003d56:	4a0e      	ldr	r2, [pc, #56]	@ (8003d90 <format_menu_line+0x70>)
 8003d58:	2110      	movs	r1, #16
 8003d5a:	f007 f89f 	bl	800ae9c <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8003d5e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <format_menu_line+0x74>)
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f007 f894 	bl	800ae9c <sniprintf>
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003d74:	e005      	b.n	8003d82 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <format_menu_line+0x78>)
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f007 f88e 	bl	800ae9c <sniprintf>
    }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3728      	adds	r7, #40	@ 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000002c 	.word	0x2000002c
 8003d90:	0800d38c 	.word	0x0800d38c
 8003d94:	0800d398 	.word	0x0800d398
 8003d98:	0800d3a0 	.word	0x0800d3a0

08003d9c <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
    lcd_clear();
 8003da0:	f7fd ff35 	bl	8001c0e <lcd_clear>
    lcd_line0("  Welcome to ");
 8003da4:	4803      	ldr	r0, [pc, #12]	@ (8003db4 <show_welcome+0x18>)
 8003da6:	f7ff ff87 	bl	8003cb8 <lcd_line0>
    lcd_line1("   HELONIX   ");
 8003daa:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <show_welcome+0x1c>)
 8003dac:	f7ff ff90 	bl	8003cd0 <lcd_line1>
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	0800d3b4 	.word	0x0800d3b4
 8003db8:	0800d3c4 	.word	0x0800d3c4

08003dbc <show_dash>:

static void show_dash(void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b092      	sub	sp, #72	@ 0x48
 8003dc0:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 8003dc2:	f7ff fcdb 	bl	800377c <Motor_GetStatus>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <show_dash+0x14>
 8003dcc:	4b44      	ldr	r3, [pc, #272]	@ (8003ee0 <show_dash+0x124>)
 8003dce:	e000      	b.n	8003dd2 <show_dash+0x16>
 8003dd0:	4b44      	ldr	r3, [pc, #272]	@ (8003ee4 <show_dash+0x128>)
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 8003dd4:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <show_dash+0x12c>)
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 8003dd8:	4b44      	ldr	r3, [pc, #272]	@ (8003eec <show_dash+0x130>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <show_dash+0x2c>
 8003de2:	4b43      	ldr	r3, [pc, #268]	@ (8003ef0 <show_dash+0x134>)
 8003de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de6:	e026      	b.n	8003e36 <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 8003de8:	4b42      	ldr	r3, [pc, #264]	@ (8003ef4 <show_dash+0x138>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <show_dash+0x3c>
 8003df2:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <show_dash+0x13c>)
 8003df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df6:	e01e      	b.n	8003e36 <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <show_dash+0x140>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <show_dash+0x4c>
 8003e02:	4b3f      	ldr	r3, [pc, #252]	@ (8003f00 <show_dash+0x144>)
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e06:	e016      	b.n	8003e36 <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 8003e08:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <show_dash+0x148>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <show_dash+0x5c>
 8003e12:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <show_dash+0x14c>)
 8003e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e16:	e00e      	b.n	8003e36 <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 8003e18:	4b3c      	ldr	r3, [pc, #240]	@ (8003f0c <show_dash+0x150>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <show_dash+0x6c>
 8003e22:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <show_dash+0x154>)
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e26:	e006      	b.n	8003e36 <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 8003e28:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <show_dash+0x158>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <show_dash+0x7a>
 8003e32:	4b39      	ldr	r3, [pc, #228]	@ (8003f18 <show_dash+0x15c>)
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 8003e36:	f107 0018 	add.w	r0, r7, #24
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <show_dash+0x160>)
 8003e42:	2111      	movs	r1, #17
 8003e44:	f007 f82a 	bl	800ae9c <sniprintf>

    int submergedCount = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e50:	e012      	b.n	8003e78 <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8003e52:	4a33      	ldr	r2, [pc, #204]	@ (8003f20 <show_dash+0x164>)
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	3302      	adds	r3, #2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4931      	ldr	r1, [pc, #196]	@ (8003f24 <show_dash+0x168>)
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd f8c7 	bl	8000ff4 <__aeabi_fcmplt>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <show_dash+0xb6>
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6e:	3301      	adds	r3, #1
 8003e70:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	3301      	adds	r3, #1
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	dde9      	ble.n	8003e52 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d817      	bhi.n	8003eb4 <show_dash+0xf8>
 8003e84:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <show_dash+0xd0>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea3 	.word	0x08003ea3
 8003e94:	08003ea9 	.word	0x08003ea9
 8003e98:	08003eaf 	.word	0x08003eaf
        case 0:  level = "EMPTY"; break;
 8003e9c:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <show_dash+0x16c>)
 8003e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea0:	e00b      	b.n	8003eba <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8003ea2:	4b22      	ldr	r3, [pc, #136]	@ (8003f2c <show_dash+0x170>)
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea6:	e008      	b.n	8003eba <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <show_dash+0x174>)
 8003eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eac:	e005      	b.n	8003eba <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 8003eae:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <show_dash+0x178>)
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	e002      	b.n	8003eba <show_dash+0xfe>
        default: level = "FULL";  break;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <show_dash+0x17c>)
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb8:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 8003eba:	1d38      	adds	r0, r7, #4
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <show_dash+0x180>)
 8003ec0:	2111      	movs	r1, #17
 8003ec2:	f006 ffeb 	bl	800ae9c <sniprintf>

    lcd_line0(line0);
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fef4 	bl	8003cb8 <lcd_line0>
    lcd_line1(line1);
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fefc 	bl	8003cd0 <lcd_line1>
}
 8003ed8:	bf00      	nop
 8003eda:	3740      	adds	r7, #64	@ 0x40
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	0800d3d4 	.word	0x0800d3d4
 8003ee4:	0800d3d8 	.word	0x0800d3d8
 8003ee8:	0800d3dc 	.word	0x0800d3dc
 8003eec:	20000571 	.word	0x20000571
 8003ef0:	0800d3e4 	.word	0x0800d3e4
 8003ef4:	20000576 	.word	0x20000576
 8003ef8:	0800d3ec 	.word	0x0800d3ec
 8003efc:	20000575 	.word	0x20000575
 8003f00:	0800d3f8 	.word	0x0800d3f8
 8003f04:	20000574 	.word	0x20000574
 8003f08:	0800d400 	.word	0x0800d400
 8003f0c:	20000572 	.word	0x20000572
 8003f10:	0800d408 	.word	0x0800d408
 8003f14:	20000573 	.word	0x20000573
 8003f18:	0800d410 	.word	0x0800d410
 8003f1c:	0800d418 	.word	0x0800d418
 8003f20:	200004a0 	.word	0x200004a0
 8003f24:	3dcccccd 	.word	0x3dcccccd
 8003f28:	0800d420 	.word	0x0800d420
 8003f2c:	0800d428 	.word	0x0800d428
 8003f30:	0800d42c 	.word	0x0800d42c
 8003f34:	0800d434 	.word	0x0800d434
 8003f38:	0800d438 	.word	0x0800d438
 8003f3c:	0800d440 	.word	0x0800d440

08003f40 <show_menu>:

static void show_menu(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8003f46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <show_menu+0xb0>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <show_menu+0xb4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	da04      	bge.n	8003f5c <show_menu+0x1c>
 8003f52:	4b27      	ldr	r3, [pc, #156]	@ (8003ff0 <show_menu+0xb0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <show_menu+0xb4>)
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <show_menu+0xb4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <show_menu+0xb0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	da04      	bge.n	8003f74 <show_menu+0x34>
 8003f6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <show_menu+0xb0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <show_menu+0xb4>)
 8003f72:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 8003f74:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff4 <show_menu+0xb4>)
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <show_menu+0xb0>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <show_menu+0xb4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d105      	bne.n	8003f90 <show_menu+0x50>
 8003f84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <show_menu+0xb8>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <show_menu+0x50>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <show_menu+0x52>
 8003f90:	2300      	movs	r3, #0
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f107 0014 	add.w	r0, r7, #20
 8003f9c:	460a      	mov	r2, r1
 8003f9e:	2111      	movs	r1, #17
 8003fa0:	f7ff febe 	bl	8003d20 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8003fa4:	4b13      	ldr	r3, [pc, #76]	@ (8003ff4 <show_menu+0xb4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <show_menu+0xb4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <show_menu+0xb0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d105      	bne.n	8003fc4 <show_menu+0x84>
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <show_menu+0xb8>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <show_menu+0x84>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <show_menu+0x86>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4638      	mov	r0, r7
 8003fce:	460a      	mov	r2, r1
 8003fd0:	2111      	movs	r1, #17
 8003fd2:	f7ff fea5 	bl	8003d20 <format_menu_line>
    lcd_line0(line0);
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fe6c 	bl	8003cb8 <lcd_line0>
    lcd_line1(line1);
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fe74 	bl	8003cd0 <lcd_line1>
}
 8003fe8:	bf00      	nop
 8003fea:	3728      	adds	r7, #40	@ 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000614 	.word	0x20000614
 8003ff4:	20000618 	.word	0x20000618
 8003ff8:	2000002b 	.word	0x2000002b

08003ffc <show_manual>:

static void show_manual(void){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <show_manual+0x54>)
 8004008:	2111      	movs	r1, #17
 800400a:	4618      	mov	r0, r3
 800400c:	f006 ff46 	bl	800ae9c <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8004010:	f7ff fbb4 	bl	800377c <Motor_GetStatus>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <show_manual+0x2c>
 800401a:	463b      	mov	r3, r7
 800401c:	4a0d      	ldr	r2, [pc, #52]	@ (8004054 <show_manual+0x58>)
 800401e:	2111      	movs	r1, #17
 8004020:	4618      	mov	r0, r3
 8004022:	f006 ff3b 	bl	800ae9c <sniprintf>
 8004026:	e005      	b.n	8004034 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 8004028:	463b      	mov	r3, r7
 800402a:	4a0b      	ldr	r2, [pc, #44]	@ (8004058 <show_manual+0x5c>)
 800402c:	2111      	movs	r1, #17
 800402e:	4618      	mov	r0, r3
 8004030:	f006 ff34 	bl	800ae9c <sniprintf>
    lcd_line0(line0);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fe3d 	bl	8003cb8 <lcd_line0>
    lcd_line1(line1);
 800403e:	463b      	mov	r3, r7
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fe45 	bl	8003cd0 <lcd_line1>
}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	0800d324 	.word	0x0800d324
 8004054:	0800d44c 	.word	0x0800d44c
 8004058:	0800d45c 	.word	0x0800d45c

0800405c <show_semi_auto>:

static void show_semi_auto(void){
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <show_semi_auto+0x50>)
 8004068:	2111      	movs	r1, #17
 800406a:	4618      	mov	r0, r3
 800406c:	f006 ff16 	bl	800ae9c <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 8004070:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <show_semi_auto+0x54>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d006      	beq.n	8004086 <show_semi_auto+0x2a>
 8004078:	463b      	mov	r3, r7
 800407a:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <show_semi_auto+0x58>)
 800407c:	2111      	movs	r1, #17
 800407e:	4618      	mov	r0, r3
 8004080:	f006 ff0c 	bl	800ae9c <sniprintf>
 8004084:	e005      	b.n	8004092 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 8004086:	463b      	mov	r3, r7
 8004088:	4a0b      	ldr	r2, [pc, #44]	@ (80040b8 <show_semi_auto+0x5c>)
 800408a:	2111      	movs	r1, #17
 800408c:	4618      	mov	r0, r3
 800408e:	f006 ff05 	bl	800ae9c <sniprintf>
    lcd_line0(line0);
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fe0e 	bl	8003cb8 <lcd_line0>
    lcd_line1(line1);
 800409c:	463b      	mov	r3, r7
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fe16 	bl	8003cd0 <lcd_line1>
}
 80040a4:	bf00      	nop
 80040a6:	3728      	adds	r7, #40	@ 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0800d330 	.word	0x0800d330
 80040b0:	20000610 	.word	0x20000610
 80040b4:	0800d46c 	.word	0x0800d46c
 80040b8:	0800d47c 	.word	0x0800d47c

080040bc <show_timer>:

static void show_timer(void){
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	@ 0x30
 80040c0:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <show_timer+0x54>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <show_timer+0x58>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f107 0014 	add.w	r0, r7, #20
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	4a10      	ldr	r2, [pc, #64]	@ (8004118 <show_timer+0x5c>)
 80040d6:	2111      	movs	r1, #17
 80040d8:	f006 fee0 	bl	800ae9c <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 80040dc:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <show_timer+0x60>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <show_timer+0x64>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4638      	mov	r0, r7
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <show_timer+0x68>)
 80040ee:	2111      	movs	r1, #17
 80040f0:	f006 fed4 	bl	800ae9c <sniprintf>
    lcd_line0(l0);
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fddd 	bl	8003cb8 <lcd_line0>
    lcd_line1(l1);
 80040fe:	463b      	mov	r3, r7
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fde5 	bl	8003cd0 <lcd_line1>
}
 8004106:	bf00      	nop
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000048 	.word	0x20000048
 8004114:	20000049 	.word	0x20000049
 8004118:	0800d48c 	.word	0x0800d48c
 800411c:	2000004a 	.word	0x2000004a
 8004120:	2000004b 	.word	0x2000004b
 8004124:	0800d49c 	.word	0x0800d49c

08004128 <show_search>:

static void show_search(void){
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	@ 0x30
 800412c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
             searchSettings.searchActive ? "ON " : "OFF",
 800412e:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <show_search+0x60>)
 8004130:	781b      	ldrb	r3, [r3, #0]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <show_search+0x12>
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <show_search+0x64>)
 8004138:	e000      	b.n	800413c <show_search+0x14>
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <show_search+0x68>)
             (unsigned)searchSettings.testingGapSeconds,
 800413c:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <show_search+0x60>)
 800413e:	8852      	ldrh	r2, [r2, #2]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 8004140:	4611      	mov	r1, r2
             (unsigned)searchSettings.dryRunTimeSeconds);
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <show_search+0x60>)
 8004144:	8892      	ldrh	r2, [r2, #4]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 8004146:	f107 0014 	add.w	r0, r7, #20
 800414a:	9201      	str	r2, [sp, #4]
 800414c:	9100      	str	r1, [sp, #0]
 800414e:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <show_search+0x6c>)
 8004150:	2111      	movs	r1, #17
 8004152:	f006 fea3 	bl	800ae9c <sniprintf>
    snprintf(l1,sizeof(l1),">%s   Edit",
             searchSettings.searchActive ? "Stop" : "Enable");
 8004156:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <show_search+0x60>)
 8004158:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <show_search+0x3a>
 800415e:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <show_search+0x70>)
 8004160:	e000      	b.n	8004164 <show_search+0x3c>
 8004162:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <show_search+0x74>)
 8004164:	4638      	mov	r0, r7
 8004166:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <show_search+0x78>)
 8004168:	2111      	movs	r1, #17
 800416a:	f006 fe97 	bl	800ae9c <sniprintf>
    lcd_line0(l0);
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fda0 	bl	8003cb8 <lcd_line0>
    lcd_line1(l1);
 8004178:	463b      	mov	r3, r7
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fda8 	bl	8003cd0 <lcd_line1>
}
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	@ 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	2000001c 	.word	0x2000001c
 800418c:	0800d3d4 	.word	0x0800d3d4
 8004190:	0800d3d8 	.word	0x0800d3d8
 8004194:	0800d4b0 	.word	0x0800d4b0
 8004198:	0800d4c0 	.word	0x0800d4c0
 800419c:	0800d4c8 	.word	0x0800d4c8
 80041a0:	0800d4d0 	.word	0x0800d4d0

080041a4 <show_countdown>:

static void show_countdown(void){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b090      	sub	sp, #64	@ 0x40
 80041a8:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    extern volatile uint16_t countdownRemainingRuns;
    if (countdownActive) {
 80041aa:	4b24      	ldr	r3, [pc, #144]	@ (800423c <show_countdown+0x98>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d029      	beq.n	8004208 <show_countdown+0x64>
        uint32_t sec = countdownDuration;
 80041b4:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <show_countdown+0x9c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <show_countdown+0xa0>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s   = sec%60;
 80041c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004244 <show_countdown+0xa0>)
 80041ca:	fba3 1302 	umull	r1, r3, r3, r2
 80041ce:	0959      	lsrs	r1, r3, #5
 80041d0:	460b      	mov	r3, r1
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a5b      	subs	r3, r3, r1
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Run %02u %02d:%02d",
 80041dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <show_countdown+0xa4>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e8:	f107 0018 	add.w	r0, r7, #24
 80041ec:	9201      	str	r2, [sp, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	460b      	mov	r3, r1
 80041f2:	4a16      	ldr	r2, [pc, #88]	@ (800424c <show_countdown+0xa8>)
 80041f4:	2111      	movs	r1, #17
 80041f6:	f006 fe51 	bl	800ae9c <sniprintf>
                 (unsigned)countdownRemainingRuns,(int)min,(int)s);
        snprintf(l1,sizeof(l1),">Stop     Back");
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <show_countdown+0xac>)
 80041fe:	2111      	movs	r1, #17
 8004200:	4618      	mov	r0, r3
 8004202:	f006 fe4b 	bl	800ae9c <sniprintf>
 8004206:	e00c      	b.n	8004222 <show_countdown+0x7e>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8004208:	f107 0318 	add.w	r3, r7, #24
 800420c:	4a11      	ldr	r2, [pc, #68]	@ (8004254 <show_countdown+0xb0>)
 800420e:	2111      	movs	r1, #17
 8004210:	4618      	mov	r0, r3
 8004212:	f006 fe43 	bl	800ae9c <sniprintf>
        snprintf(l1,sizeof(l1),">Set Start Back");
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	4a0f      	ldr	r2, [pc, #60]	@ (8004258 <show_countdown+0xb4>)
 800421a:	2111      	movs	r1, #17
 800421c:	4618      	mov	r0, r3
 800421e:	f006 fe3d 	bl	800ae9c <sniprintf>
    }
    lcd_line0(l0);
 8004222:	f107 0318 	add.w	r3, r7, #24
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fd46 	bl	8003cb8 <lcd_line0>
    lcd_line1(l1);
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fd4e 	bl	8003cd0 <lcd_line1>
}
 8004234:	bf00      	nop
 8004236:	3738      	adds	r7, #56	@ 0x38
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000572 	.word	0x20000572
 8004240:	20000584 	.word	0x20000584
 8004244:	88888889 	.word	0x88888889
 8004248:	200005c4 	.word	0x200005c4
 800424c:	0800d4dc 	.word	0x0800d4dc
 8004250:	0800d44c 	.word	0x0800d44c
 8004254:	0800d4f0 	.word	0x0800d4f0
 8004258:	0800d500 	.word	0x0800d500

0800425c <show_twist>:


static void show_twist(void){
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	@ 0x38
 8004260:	af02      	add	r7, sp, #8
    char l0[17], l1[17];

    const char* status = twistSettings.twistActive ? "ON " : "OFF";
 8004262:	4b17      	ldr	r3, [pc, #92]	@ (80042c0 <show_twist+0x64>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <show_twist+0x12>
 800426a:	4b16      	ldr	r3, [pc, #88]	@ (80042c4 <show_twist+0x68>)
 800426c:	e000      	b.n	8004270 <show_twist+0x14>
 800426e:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <show_twist+0x6c>)
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
             (int)twistSettings.onDurationSeconds,
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <show_twist+0x64>)
 8004274:	885b      	ldrh	r3, [r3, #2]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 8004276:	461a      	mov	r2, r3
             (int)twistSettings.offDurationSeconds);
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <show_twist+0x64>)
 800427a:	889b      	ldrh	r3, [r3, #4]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 800427c:	f107 0018 	add.w	r0, r7, #24
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	9200      	str	r2, [sp, #0]
 8004284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004286:	4a11      	ldr	r2, [pc, #68]	@ (80042cc <show_twist+0x70>)
 8004288:	2111      	movs	r1, #17
 800428a:	f006 fe07 	bl	800ae9c <sniprintf>

    // primary action on SELECT is Enable/Stop; UP/DOWN goes to edit
    snprintf(l1,sizeof(l1),">%s   Edit",
             twistSettings.twistActive ? "Stop" : "Enable");
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <show_twist+0x64>)
 8004290:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <show_twist+0x3e>
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <show_twist+0x74>)
 8004298:	e000      	b.n	800429c <show_twist+0x40>
 800429a:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <show_twist+0x78>)
 800429c:	1d38      	adds	r0, r7, #4
 800429e:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <show_twist+0x7c>)
 80042a0:	2111      	movs	r1, #17
 80042a2:	f006 fdfb 	bl	800ae9c <sniprintf>

    lcd_line0(l0);
 80042a6:	f107 0318 	add.w	r3, r7, #24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fd04 	bl	8003cb8 <lcd_line0>
    lcd_line1(l1);
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fd0c 	bl	8003cd0 <lcd_line1>
}
 80042b8:	bf00      	nop
 80042ba:	3730      	adds	r7, #48	@ 0x30
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000024 	.word	0x20000024
 80042c4:	0800d3d4 	.word	0x0800d3d4
 80042c8:	0800d3d8 	.word	0x0800d3d8
 80042cc:	0800d510 	.word	0x0800d510
 80042d0:	0800d4c0 	.word	0x0800d4c0
 80042d4:	0800d4c8 	.word	0x0800d4c8
 80042d8:	0800d4d0 	.word	0x0800d4d0

080042dc <apply_search_settings>:


/* ===== Apply functions ===== */
static void apply_search_settings(void){
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <apply_search_settings+0x1c>)
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <apply_search_settings+0x20>)
 80042e6:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <apply_search_settings+0x24>)
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	4b03      	ldr	r3, [pc, #12]	@ (80042fc <apply_search_settings+0x20>)
 80042ee:	809a      	strh	r2, [r3, #4]
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	2000004c 	.word	0x2000004c
 80042fc:	2000001c 	.word	0x2000001c
 8004300:	2000004e 	.word	0x2000004e

08004304 <apply_twist_settings>:

static void apply_twist_settings(void){
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <apply_twist_settings+0x1c>)
 800430a:	881a      	ldrh	r2, [r3, #0]
 800430c:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <apply_twist_settings+0x20>)
 800430e:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <apply_twist_settings+0x24>)
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <apply_twist_settings+0x20>)
 8004316:	809a      	strh	r2, [r3, #4]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	20000050 	.word	0x20000050
 8004324:	20000024 	.word	0x20000024
 8004328:	20000052 	.word	0x20000052

0800432c <apply_countdown_settings>:

static void apply_countdown_settings(void){
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
    // kept for compatibility if other code depends on countdownDuration mirror
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <apply_countdown_settings+0x20>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <apply_countdown_settings+0x24>)
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20000054 	.word	0x20000054
 8004350:	20000584 	.word	0x20000584

08004354 <enable_semi_auto>:

static void enable_semi_auto(void){
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 8004358:	f7ff fa04 	bl	8003764 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 800435c:	f7ff f890 	bl	8003480 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8004360:	4b02      	ldr	r3, [pc, #8]	@ (800436c <enable_semi_auto+0x18>)
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000610 	.word	0x20000610

08004370 <disable_semi_auto>:
static void disable_semi_auto(void){
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8004374:	2000      	movs	r0, #0
 8004376:	f7ff f9d7 	bl	8003728 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 800437a:	4b02      	ldr	r3, [pc, #8]	@ (8004384 <disable_semi_auto+0x14>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000610 	.word	0x20000610

08004388 <apply_timer_settings>:

static void apply_timer_settings(void){
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <apply_timer_settings+0x3c>)
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <apply_timer_settings+0x40>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	4a0d      	ldr	r2, [pc, #52]	@ (80043cc <apply_timer_settings+0x44>)
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fb1c 	bl	80029da <ModelHandle_TimeToSeconds>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a07      	ldr	r2, [pc, #28]	@ (80043c4 <apply_timer_settings+0x3c>)
 80043a6:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <apply_timer_settings+0x48>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4a09      	ldr	r2, [pc, #36]	@ (80043d4 <apply_timer_settings+0x4c>)
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fb11 	bl	80029da <ModelHandle_TimeToSeconds>
 80043b8:	4603      	mov	r3, r0
 80043ba:	4a02      	ldr	r2, [pc, #8]	@ (80043c4 <apply_timer_settings+0x3c>)
 80043bc:	6093      	str	r3, [r2, #8]
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000588 	.word	0x20000588
 80043c8:	20000048 	.word	0x20000048
 80043cc:	20000049 	.word	0x20000049
 80043d0:	2000004a 	.word	0x2000004a
 80043d4:	2000004b 	.word	0x2000004b

080043d8 <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b0f0      	sub	sp, #448	@ 0x1c0
 80043dc:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80043de:	f001 fb65 	bl	8005aac <HAL_GetTick>
 80043e2:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

    bool cursorBlinkActive = false;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
    switch (ui) {
 80043ec:	4bb9      	ldr	r3, [pc, #740]	@ (80046d4 <Screen_Update+0x2fc>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b13      	cmp	r3, #19
 80043f2:	bf8c      	ite	hi
 80043f4:	2201      	movhi	r2, #1
 80043f6:	2200      	movls	r2, #0
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	2a00      	cmp	r2, #0
 80043fc:	d10f      	bne.n	800441e <Screen_Update+0x46>
 80043fe:	4ab6      	ldr	r2, [pc, #728]	@ (80046d8 <Screen_Update+0x300>)
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <Screen_Update+0x46>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP:   // NEW: blink on repeats editor
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            break;
 800441c:	e006      	b.n	800442c <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            cursorVisible = true;
 8004424:	4bad      	ldr	r3, [pc, #692]	@ (80046dc <Screen_Update+0x304>)
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
            break;
 800442a:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 800442c:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01e      	beq.n	8004472 <Screen_Update+0x9a>
 8004434:	4baa      	ldr	r3, [pc, #680]	@ (80046e0 <Screen_Update+0x308>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004442:	4293      	cmp	r3, r2
 8004444:	d315      	bcc.n	8004472 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 8004446:	4ba5      	ldr	r3, [pc, #660]	@ (80046dc <Screen_Update+0x304>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b9e      	ldr	r3, [pc, #632]	@ (80046dc <Screen_Update+0x304>)
 8004462:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8004464:	4a9e      	ldr	r2, [pc, #632]	@ (80046e0 <Screen_Update+0x308>)
 8004466:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800446a:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 800446c:	4b9d      	ldr	r3, [pc, #628]	@ (80046e4 <Screen_Update+0x30c>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8004472:	4b98      	ldr	r3, [pc, #608]	@ (80046d4 <Screen_Update+0x2fc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d112      	bne.n	80044a0 <Screen_Update+0xc8>
 800447a:	4b9b      	ldr	r3, [pc, #620]	@ (80046e8 <Screen_Update+0x310>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004488:	4293      	cmp	r3, r2
 800448a:	d309      	bcc.n	80044a0 <Screen_Update+0xc8>
        ui = UI_DASH;
 800448c:	4b91      	ldr	r3, [pc, #580]	@ (80046d4 <Screen_Update+0x2fc>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8004492:	4a95      	ldr	r2, [pc, #596]	@ (80046e8 <Screen_Update+0x310>)
 8004494:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8004498:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 800449a:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <Screen_Update+0x30c>)
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 80044a0:	4b8c      	ldr	r3, [pc, #560]	@ (80046d4 <Screen_Update+0x2fc>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d012      	beq.n	80044ce <Screen_Update+0xf6>
 80044a8:	4b8a      	ldr	r3, [pc, #552]	@ (80046d4 <Screen_Update+0x2fc>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d00e      	beq.n	80044ce <Screen_Update+0xf6>
 80044b0:	4b8e      	ldr	r3, [pc, #568]	@ (80046ec <Screen_Update+0x314>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80044be:	4293      	cmp	r3, r2
 80044c0:	d305      	bcc.n	80044ce <Screen_Update+0xf6>
        ui = UI_DASH;
 80044c2:	4b84      	ldr	r3, [pc, #528]	@ (80046d4 <Screen_Update+0x2fc>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 80044c8:	4b86      	ldr	r3, [pc, #536]	@ (80046e4 <Screen_Update+0x30c>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 80044ce:	4b81      	ldr	r3, [pc, #516]	@ (80046d4 <Screen_Update+0x2fc>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <Screen_Update+0x11c>
 80044d6:	4b84      	ldr	r3, [pc, #528]	@ (80046e8 <Screen_Update+0x310>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044e4:	d306      	bcc.n	80044f4 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 80044e6:	4b7f      	ldr	r3, [pc, #508]	@ (80046e4 <Screen_Update+0x30c>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 80044ec:	4a7e      	ldr	r2, [pc, #504]	@ (80046e8 <Screen_Update+0x310>)
 80044ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80044f2:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 80044f4:	4b7b      	ldr	r3, [pc, #492]	@ (80046e4 <Screen_Update+0x30c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <Screen_Update+0x132>
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <Screen_Update+0x2fc>)
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	4b7b      	ldr	r3, [pc, #492]	@ (80046f0 <Screen_Update+0x318>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	f000 81ab 	beq.w	8004860 <Screen_Update+0x488>
        bool fullRedraw = (ui != last_ui);
 800450a:	4b72      	ldr	r3, [pc, #456]	@ (80046d4 <Screen_Update+0x2fc>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	4b78      	ldr	r3, [pc, #480]	@ (80046f0 <Screen_Update+0x318>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
        last_ui = ui;
 800451e:	4b6d      	ldr	r3, [pc, #436]	@ (80046d4 <Screen_Update+0x2fc>)
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	4b73      	ldr	r3, [pc, #460]	@ (80046f0 <Screen_Update+0x318>)
 8004524:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8004526:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <Screen_Update+0x30c>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 800452c:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <Screen_Update+0x160>
 8004534:	f7fd fb6b 	bl	8001c0e <lcd_clear>

        switch (ui) {
 8004538:	4b66      	ldr	r3, [pc, #408]	@ (80046d4 <Screen_Update+0x2fc>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b13      	cmp	r3, #19
 800453e:	f200 8188 	bhi.w	8004852 <Screen_Update+0x47a>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <Screen_Update+0x170>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004599 	.word	0x08004599
 800454c:	0800459f 	.word	0x0800459f
 8004550:	080045a5 	.word	0x080045a5
 8004554:	080045ab 	.word	0x080045ab
 8004558:	080045b1 	.word	0x080045b1
 800455c:	080045b7 	.word	0x080045b7
 8004560:	080045cf 	.word	0x080045cf
 8004564:	08004603 	.word	0x08004603
 8004568:	08004637 	.word	0x08004637
 800456c:	0800466b 	.word	0x0800466b
 8004570:	080045bd 	.word	0x080045bd
 8004574:	0800469f 	.word	0x0800469f
 8004578:	08004721 	.word	0x08004721
 800457c:	080045c3 	.word	0x080045c3
 8004580:	08004755 	.word	0x08004755
 8004584:	08004789 	.word	0x08004789
 8004588:	080047bd 	.word	0x080047bd
 800458c:	080045c9 	.word	0x080045c9
 8004590:	080047ef 	.word	0x080047ef
 8004594:	08004823 	.word	0x08004823
            case UI_WELCOME: show_welcome(); break;
 8004598:	f7ff fc00 	bl	8003d9c <show_welcome>
 800459c:	e160      	b.n	8004860 <Screen_Update+0x488>
            case UI_DASH: show_dash(); break;
 800459e:	f7ff fc0d 	bl	8003dbc <show_dash>
 80045a2:	e15d      	b.n	8004860 <Screen_Update+0x488>
            case UI_MENU: show_menu(); break;
 80045a4:	f7ff fccc 	bl	8003f40 <show_menu>
 80045a8:	e15a      	b.n	8004860 <Screen_Update+0x488>
            case UI_MANUAL: show_manual(); break;
 80045aa:	f7ff fd27 	bl	8003ffc <show_manual>
 80045ae:	e157      	b.n	8004860 <Screen_Update+0x488>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 80045b0:	f7ff fd54 	bl	800405c <show_semi_auto>
 80045b4:	e154      	b.n	8004860 <Screen_Update+0x488>
            case UI_TIMER: show_timer(); break;
 80045b6:	f7ff fd81 	bl	80040bc <show_timer>
 80045ba:	e151      	b.n	8004860 <Screen_Update+0x488>
            case UI_SEARCH: show_search(); break;
 80045bc:	f7ff fdb4 	bl	8004128 <show_search>
 80045c0:	e14e      	b.n	8004860 <Screen_Update+0x488>
            case UI_COUNTDOWN: show_countdown(); break;
 80045c2:	f7ff fdef 	bl	80041a4 <show_countdown>
 80045c6:	e14b      	b.n	8004860 <Screen_Update+0x488>
            case UI_TWIST: show_twist(); break;
 80045c8:	f7ff fe48 	bl	800425c <show_twist>
 80045cc:	e148      	b.n	8004860 <Screen_Update+0x488>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 80045ce:	4b49      	ldr	r3, [pc, #292]	@ (80046f4 <Screen_Update+0x31c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 80045d6:	4a48      	ldr	r2, [pc, #288]	@ (80046f8 <Screen_Update+0x320>)
 80045d8:	2111      	movs	r1, #17
 80045da:	f006 fc5f 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80045de:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80045e2:	4a46      	ldr	r2, [pc, #280]	@ (80046fc <Screen_Update+0x324>)
 80045e4:	2111      	movs	r1, #17
 80045e6:	4618      	mov	r0, r3
 80045e8:	f006 fc58 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80045ec:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fb61 	bl	8003cb8 <lcd_line0>
 80045f6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fb68 	bl	8003cd0 <lcd_line1>
 8004600:	e12e      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 8004602:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <Screen_Update+0x328>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800460a:	4a3e      	ldr	r2, [pc, #248]	@ (8004704 <Screen_Update+0x32c>)
 800460c:	2111      	movs	r1, #17
 800460e:	f006 fc45 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004612:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004616:	4a39      	ldr	r2, [pc, #228]	@ (80046fc <Screen_Update+0x324>)
 8004618:	2111      	movs	r1, #17
 800461a:	4618      	mov	r0, r3
 800461c:	f006 fc3e 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004620:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fb47 	bl	8003cb8 <lcd_line0>
 800462a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fb4e 	bl	8003cd0 <lcd_line1>
 8004634:	e114      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 8004636:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <Screen_Update+0x330>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800463e:	4a33      	ldr	r2, [pc, #204]	@ (800470c <Screen_Update+0x334>)
 8004640:	2111      	movs	r1, #17
 8004642:	f006 fc2b 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004646:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800464a:	4a2c      	ldr	r2, [pc, #176]	@ (80046fc <Screen_Update+0x324>)
 800464c:	2111      	movs	r1, #17
 800464e:	4618      	mov	r0, r3
 8004650:	f006 fc24 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004654:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fb2d 	bl	8003cb8 <lcd_line0>
 800465e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fb34 	bl	8003cd0 <lcd_line1>
 8004668:	e0fa      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 800466a:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <Screen_Update+0x338>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8004672:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <Screen_Update+0x33c>)
 8004674:	2111      	movs	r1, #17
 8004676:	f006 fc11 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 800467a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800467e:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <Screen_Update+0x324>)
 8004680:	2111      	movs	r1, #17
 8004682:	4618      	mov	r0, r3
 8004684:	f006 fc0a 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004688:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fb13 	bl	8003cb8 <lcd_line0>
 8004692:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fb1a 	bl	8003cd0 <lcd_line1>
 800469c:	e0e0      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 800469e:	4b1e      	ldr	r3, [pc, #120]	@ (8004718 <Screen_Update+0x340>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 80046a6:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <Screen_Update+0x344>)
 80046a8:	2111      	movs	r1, #17
 80046aa:	f006 fbf7 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80046ae:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <Screen_Update+0x324>)
 80046b4:	2111      	movs	r1, #17
 80046b6:	4618      	mov	r0, r3
 80046b8:	f006 fbf0 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80046bc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff faf9 	bl	8003cb8 <lcd_line0>
 80046c6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fb00 	bl	8003cd0 <lcd_line1>
 80046d0:	e0c6      	b.n	8004860 <Screen_Update+0x488>
 80046d2:	bf00      	nop
 80046d4:	20000604 	.word	0x20000604
 80046d8:	000cdbc4 	.word	0x000cdbc4
 80046dc:	2000002b 	.word	0x2000002b
 80046e0:	20000608 	.word	0x20000608
 80046e4:	20000605 	.word	0x20000605
 80046e8:	20000600 	.word	0x20000600
 80046ec:	2000060c 	.word	0x2000060c
 80046f0:	2000002a 	.word	0x2000002a
 80046f4:	20000048 	.word	0x20000048
 80046f8:	0800d520 	.word	0x0800d520
 80046fc:	0800d534 	.word	0x0800d534
 8004700:	20000049 	.word	0x20000049
 8004704:	0800d548 	.word	0x0800d548
 8004708:	2000004a 	.word	0x2000004a
 800470c:	0800d55c 	.word	0x0800d55c
 8004710:	2000004b 	.word	0x2000004b
 8004714:	0800d570 	.word	0x0800d570
 8004718:	2000004c 	.word	0x2000004c
 800471c:	0800d584 	.word	0x0800d584
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <Screen_Update+0x494>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8004728:	4a51      	ldr	r2, [pc, #324]	@ (8004870 <Screen_Update+0x498>)
 800472a:	2111      	movs	r1, #17
 800472c:	f006 fbb6 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004730:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8004734:	4a4f      	ldr	r2, [pc, #316]	@ (8004874 <Screen_Update+0x49c>)
 8004736:	2111      	movs	r1, #17
 8004738:	4618      	mov	r0, r3
 800473a:	f006 fbaf 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800473e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fab8 	bl	8003cb8 <lcd_line0>
 8004748:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fabf 	bl	8003cd0 <lcd_line1>
 8004752:	e085      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3u", edit_countdown_min);
 8004754:	4b48      	ldr	r3, [pc, #288]	@ (8004878 <Screen_Update+0x4a0>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800475c:	4a47      	ldr	r2, [pc, #284]	@ (800487c <Screen_Update+0x4a4>)
 800475e:	2111      	movs	r1, #17
 8004760:	f006 fb9c 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelNext");
 8004764:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004768:	4a45      	ldr	r2, [pc, #276]	@ (8004880 <Screen_Update+0x4a8>)
 800476a:	2111      	movs	r1, #17
 800476c:	4618      	mov	r0, r3
 800476e:	f006 fb95 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004772:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fa9e 	bl	8003cb8 <lcd_line0>
 800477c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff faa5 	bl	8003cd0 <lcd_line1>
 8004786:	e06b      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_REP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Reps: %3u", edit_countdown_rep);
 8004788:	4b3e      	ldr	r3, [pc, #248]	@ (8004884 <Screen_Update+0x4ac>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8004790:	4a3d      	ldr	r2, [pc, #244]	@ (8004888 <Screen_Update+0x4b0>)
 8004792:	2111      	movs	r1, #17
 8004794:	f006 fb82 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- Start");
 8004798:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800479c:	4a3b      	ldr	r2, [pc, #236]	@ (800488c <Screen_Update+0x4b4>)
 800479e:	2111      	movs	r1, #17
 80047a0:	4618      	mov	r0, r3
 80047a2:	f006 fb7b 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 80047a6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fa84 	bl	8003cb8 <lcd_line0>
 80047b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fa8b 	bl	8003cd0 <lcd_line1>
 80047ba:	e051      	b.n	8004860 <Screen_Update+0x488>
            }

            case UI_COUNTDOWN_TOGGLE: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Countdown Setup");
 80047bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047c0:	4a33      	ldr	r2, [pc, #204]	@ (8004890 <Screen_Update+0x4b8>)
 80047c2:	2111      	movs	r1, #17
 80047c4:	4618      	mov	r0, r3
 80047c6:	f006 fb69 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Enable   Edit");
 80047ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80047ce:	4a31      	ldr	r2, [pc, #196]	@ (8004894 <Screen_Update+0x4bc>)
 80047d0:	2111      	movs	r1, #17
 80047d2:	4618      	mov	r0, r3
 80047d4:	f006 fb62 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1);
 80047d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fa6b 	bl	8003cb8 <lcd_line0>
 80047e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fa72 	bl	8003cd0 <lcd_line1>
                break;
 80047ec:	e038      	b.n	8004860 <Screen_Update+0x488>
            }

            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 80047ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <Screen_Update+0x4c0>)
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80047f6:	4a29      	ldr	r2, [pc, #164]	@ (800489c <Screen_Update+0x4c4>)
 80047f8:	2111      	movs	r1, #17
 80047fa:	f006 fb4f 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 80047fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004802:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <Screen_Update+0x49c>)
 8004804:	2111      	movs	r1, #17
 8004806:	4618      	mov	r0, r3
 8004808:	f006 fb48 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800480c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fa51 	bl	8003cb8 <lcd_line0>
 8004816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fa58 	bl	8003cd0 <lcd_line1>
 8004820:	e01e      	b.n	8004860 <Screen_Update+0x488>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 8004822:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <Screen_Update+0x4c8>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	f107 0014 	add.w	r0, r7, #20
 800482a:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <Screen_Update+0x4cc>)
 800482c:	2111      	movs	r1, #17
 800482e:	f006 fb35 	bl	800ae9c <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004832:	463b      	mov	r3, r7
 8004834:	4a0f      	ldr	r2, [pc, #60]	@ (8004874 <Screen_Update+0x49c>)
 8004836:	2111      	movs	r1, #17
 8004838:	4618      	mov	r0, r3
 800483a:	f006 fb2f 	bl	800ae9c <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fa38 	bl	8003cb8 <lcd_line0>
 8004848:	463b      	mov	r3, r7
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fa40 	bl	8003cd0 <lcd_line1>
 8004850:	e006      	b.n	8004860 <Screen_Update+0x488>
            }
            default:
                lcd_line0("Not Implemented");
 8004852:	4815      	ldr	r0, [pc, #84]	@ (80048a8 <Screen_Update+0x4d0>)
 8004854:	f7ff fa30 	bl	8003cb8 <lcd_line0>
                lcd_line1("                ");
 8004858:	4814      	ldr	r0, [pc, #80]	@ (80048ac <Screen_Update+0x4d4>)
 800485a:	f7ff fa39 	bl	8003cd0 <lcd_line1>
                break;
 800485e:	bf00      	nop
        }
    }
}
 8004860:	bf00      	nop
 8004862:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000004e 	.word	0x2000004e
 8004870:	0800d594 	.word	0x0800d594
 8004874:	0800d534 	.word	0x0800d534
 8004878:	20000054 	.word	0x20000054
 800487c:	0800d5a4 	.word	0x0800d5a4
 8004880:	0800d5b4 	.word	0x0800d5b4
 8004884:	20000056 	.word	0x20000056
 8004888:	0800d5c4 	.word	0x0800d5c4
 800488c:	0800d5d4 	.word	0x0800d5d4
 8004890:	0800d5e4 	.word	0x0800d5e4
 8004894:	0800d5f4 	.word	0x0800d5f4
 8004898:	20000050 	.word	0x20000050
 800489c:	0800d604 	.word	0x0800d604
 80048a0:	20000052 	.word	0x20000052
 80048a4:	0800d614 	.word	0x0800d614
 80048a8:	0800d624 	.word	0x0800d624
 80048ac:	0800d3a0 	.word	0x0800d3a0

080048b0 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
    lcd_init();
 80048b4:	f7fd f9ef 	bl	8001c96 <lcd_init>
    ui = UI_WELCOME;
 80048b8:	4b1c      	ldr	r3, [pc, #112]	@ (800492c <Screen_Init+0x7c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 80048be:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <Screen_Init+0x80>)
 80048c0:	2214      	movs	r2, #20
 80048c2:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 80048c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <Screen_Init+0x84>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 80048ca:	f001 f8ef 	bl	8005aac <HAL_GetTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4a19      	ldr	r2, [pc, #100]	@ (8004938 <Screen_Init+0x88>)
 80048d2:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 80048d4:	f7ff fa08 	bl	8003ce8 <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 80048d8:	4b18      	ldr	r3, [pc, #96]	@ (800493c <Screen_Init+0x8c>)
 80048da:	885a      	ldrh	r2, [r3, #2]
 80048dc:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <Screen_Init+0x90>)
 80048de:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 80048e0:	4b16      	ldr	r3, [pc, #88]	@ (800493c <Screen_Init+0x8c>)
 80048e2:	889a      	ldrh	r2, [r3, #4]
 80048e4:	4b17      	ldr	r3, [pc, #92]	@ (8004944 <Screen_Init+0x94>)
 80048e6:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s   = twistSettings.onDurationSeconds;
 80048e8:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <Screen_Init+0x98>)
 80048ea:	885a      	ldrh	r2, [r3, #2]
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <Screen_Init+0x9c>)
 80048ee:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s  = twistSettings.offDurationSeconds;
 80048f0:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <Screen_Init+0x98>)
 80048f2:	889a      	ldrh	r2, [r3, #4]
 80048f4:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <Screen_Init+0xa0>)
 80048f6:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 80048f8:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <Screen_Init+0xa4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a16      	ldr	r2, [pc, #88]	@ (8004958 <Screen_Init+0xa8>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	b29a      	uxth	r2, r3
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <Screen_Init+0xac>)
 8004908:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_min == 0) edit_countdown_min = 5; // sane default
 800490a:	4b14      	ldr	r3, [pc, #80]	@ (800495c <Screen_Init+0xac>)
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <Screen_Init+0x68>
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <Screen_Init+0xac>)
 8004914:	2205      	movs	r2, #5
 8004916:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <Screen_Init+0xb0>)
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <Screen_Init+0x76>
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <Screen_Init+0xb0>)
 8004922:	2201      	movs	r2, #1
 8004924:	801a      	strh	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000604 	.word	0x20000604
 8004930:	2000002a 	.word	0x2000002a
 8004934:	20000605 	.word	0x20000605
 8004938:	20000600 	.word	0x20000600
 800493c:	2000001c 	.word	0x2000001c
 8004940:	2000004c 	.word	0x2000004c
 8004944:	2000004e 	.word	0x2000004e
 8004948:	20000024 	.word	0x20000024
 800494c:	20000050 	.word	0x20000050
 8004950:	20000052 	.word	0x20000052
 8004954:	20000584 	.word	0x20000584
 8004958:	88888889 	.word	0x88888889
 800495c:	20000054 	.word	0x20000054
 8004960:	20000056 	.word	0x20000056

08004964 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 800496a:	f7ff f9bd 	bl	8003ce8 <refreshInactivityTimer>

    switch (ui){
 800496e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b9c <menu_select+0x238>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b13      	cmp	r3, #19
 8004974:	f200 8109 	bhi.w	8004b8a <menu_select+0x226>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <menu_select+0x1c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d9 	.word	0x080049d9
 8004988:	080049e5 	.word	0x080049e5
 800498c:	08004a53 	.word	0x08004a53
 8004990:	08004a5f 	.word	0x08004a5f
 8004994:	08004a7f 	.word	0x08004a7f
 8004998:	08004a87 	.word	0x08004a87
 800499c:	08004a8f 	.word	0x08004a8f
 80049a0:	08004a97 	.word	0x08004a97
 80049a4:	08004a9f 	.word	0x08004a9f
 80049a8:	08004aab 	.word	0x08004aab
 80049ac:	08004ab3 	.word	0x08004ab3
 80049b0:	08004abb 	.word	0x08004abb
 80049b4:	08004ac7 	.word	0x08004ac7
 80049b8:	08004ae5 	.word	0x08004ae5
 80049bc:	08004aed 	.word	0x08004aed
 80049c0:	08004af5 	.word	0x08004af5
 80049c4:	08004b35 	.word	0x08004b35
 80049c8:	08004b5d 	.word	0x08004b5d
 80049cc:	08004b65 	.word	0x08004b65
        case UI_WELCOME: ui = UI_DASH; break;
 80049d0:	4b72      	ldr	r3, [pc, #456]	@ (8004b9c <menu_select+0x238>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e0d9      	b.n	8004b8c <menu_select+0x228>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 80049d8:	4b70      	ldr	r3, [pc, #448]	@ (8004b9c <menu_select+0x238>)
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	f7ff f98f 	bl	8003d00 <goto_menu_top>
 80049e2:	e0d3      	b.n	8004b8c <menu_select+0x228>

        case UI_MENU:
            switch (menu_idx){
 80049e4:	4b6e      	ldr	r3, [pc, #440]	@ (8004ba0 <menu_select+0x23c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d82d      	bhi.n	8004a48 <menu_select+0xe4>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <menu_select+0x90>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a39 	.word	0x08004a39
 8004a0c:	08004a41 	.word	0x08004a41
                case 0: ui = UI_MANUAL; break;
 8004a10:	4b62      	ldr	r3, [pc, #392]	@ (8004b9c <menu_select+0x238>)
 8004a12:	2203      	movs	r2, #3
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e01b      	b.n	8004a50 <menu_select+0xec>
                case 1: ui = UI_SEMI_AUTO; break;
 8004a18:	4b60      	ldr	r3, [pc, #384]	@ (8004b9c <menu_select+0x238>)
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e017      	b.n	8004a50 <menu_select+0xec>
                case 2: ui = UI_TIMER; break;
 8004a20:	4b5e      	ldr	r3, [pc, #376]	@ (8004b9c <menu_select+0x238>)
 8004a22:	2205      	movs	r2, #5
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e013      	b.n	8004a50 <menu_select+0xec>
                case 3: ui = UI_SEARCH; break;
 8004a28:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <menu_select+0x238>)
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e00f      	b.n	8004a50 <menu_select+0xec>
                case 4: ui = UI_COUNTDOWN; break;
 8004a30:	4b5a      	ldr	r3, [pc, #360]	@ (8004b9c <menu_select+0x238>)
 8004a32:	220d      	movs	r2, #13
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e00b      	b.n	8004a50 <menu_select+0xec>
                case 5: ui = UI_TWIST; break;
 8004a38:	4b58      	ldr	r3, [pc, #352]	@ (8004b9c <menu_select+0x238>)
 8004a3a:	2211      	movs	r2, #17
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e007      	b.n	8004a50 <menu_select+0xec>
                case 6: ui = UI_DASH; break;
 8004a40:	4b56      	ldr	r3, [pc, #344]	@ (8004b9c <menu_select+0x238>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e003      	b.n	8004a50 <menu_select+0xec>
                default: ui = UI_DASH; break;
 8004a48:	4b54      	ldr	r3, [pc, #336]	@ (8004b9c <menu_select+0x238>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	bf00      	nop
            }
            break;
 8004a50:	e09c      	b.n	8004b8c <menu_select+0x228>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004a52:	f7fe f861 	bl	8002b18 <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004a56:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <menu_select+0x240>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
            break;
 8004a5c:	e096      	b.n	8004b8c <menu_select+0x228>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 8004a5e:	4b52      	ldr	r3, [pc, #328]	@ (8004ba8 <menu_select+0x244>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	f083 0301 	eor.w	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <menu_select+0x10e>
 8004a6c:	f7ff fc72 	bl	8004354 <enable_semi_auto>
 8004a70:	e001      	b.n	8004a76 <menu_select+0x112>
            else disable_semi_auto();
 8004a72:	f7ff fc7d 	bl	8004370 <disable_semi_auto>
            ui = UI_DASH;
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <menu_select+0x238>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
            break;
 8004a7c:	e086      	b.n	8004b8c <menu_select+0x228>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 8004a7e:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <menu_select+0x238>)
 8004a80:	2206      	movs	r2, #6
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e082      	b.n	8004b8c <menu_select+0x228>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004a86:	4b45      	ldr	r3, [pc, #276]	@ (8004b9c <menu_select+0x238>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e07e      	b.n	8004b8c <menu_select+0x228>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8004a8e:	4b43      	ldr	r3, [pc, #268]	@ (8004b9c <menu_select+0x238>)
 8004a90:	2208      	movs	r2, #8
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e07a      	b.n	8004b8c <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8004a96:	4b41      	ldr	r3, [pc, #260]	@ (8004b9c <menu_select+0x238>)
 8004a98:	2209      	movs	r2, #9
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e076      	b.n	8004b8c <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 8004a9e:	f7ff fc73 	bl	8004388 <apply_timer_settings>
            ui = UI_TIMER;
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8004b9c <menu_select+0x238>)
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	701a      	strb	r2, [r3, #0]
            break;
 8004aa8:	e070      	b.n	8004b8c <menu_select+0x228>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8004aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8004b9c <menu_select+0x238>)
 8004aac:	220b      	movs	r2, #11
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e06c      	b.n	8004b8c <menu_select+0x228>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 8004ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8004b9c <menu_select+0x238>)
 8004ab4:	220c      	movs	r2, #12
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e068      	b.n	8004b8c <menu_select+0x228>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8004aba:	f7ff fc0f 	bl	80042dc <apply_search_settings>
            ui = UI_SEARCH; break;
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <menu_select+0x238>)
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e062      	b.n	8004b8c <menu_select+0x228>

        case UI_COUNTDOWN:
            if (countdownActive) {
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <menu_select+0x248>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <menu_select+0x178>
                ModelHandle_StopCountdown();
 8004ad0:	f7fe f880 	bl	8002bd4 <ModelHandle_StopCountdown>
                screenNeedsRefresh = true;
 8004ad4:	4b33      	ldr	r3, [pc, #204]	@ (8004ba4 <menu_select+0x240>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8004ada:	e057      	b.n	8004b8c <menu_select+0x228>
                ui = UI_COUNTDOWN_EDIT_MIN;
 8004adc:	4b2f      	ldr	r3, [pc, #188]	@ (8004b9c <menu_select+0x238>)
 8004ade:	220e      	movs	r2, #14
 8004ae0:	701a      	strb	r2, [r3, #0]
            break;
 8004ae2:	e053      	b.n	8004b8c <menu_select+0x228>


        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN_EDIT_REP;
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <menu_select+0x238>)
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	701a      	strb	r2, [r3, #0]
            break;
 8004aea:	e04f      	b.n	8004b8c <menu_select+0x228>

        case UI_COUNTDOWN_EDIT_REP:
            // after repeats, go to enable/edit screen
            ui = UI_COUNTDOWN_TOGGLE;
 8004aec:	4b2b      	ldr	r3, [pc, #172]	@ (8004b9c <menu_select+0x238>)
 8004aee:	2210      	movs	r2, #16
 8004af0:	701a      	strb	r2, [r3, #0]
            break;
 8004af2:	e04b      	b.n	8004b8c <menu_select+0x228>

        case UI_COUNTDOWN_TOGGLE:
            // Enable or Edit based on menu index
            // For simplicity, SELECT always means "Enable"
            {
                uint32_t seconds = (uint32_t)edit_countdown_min * 60u;
 8004af4:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb0 <menu_select+0x24c>)
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	607b      	str	r3, [r7, #4]
                if (seconds == 0) seconds = 60;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <menu_select+0x1aa>
 8004b0a:	233c      	movs	r3, #60	@ 0x3c
 8004b0c:	607b      	str	r3, [r7, #4]
                if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004b0e:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <menu_select+0x250>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <menu_select+0x1b8>
 8004b16:	4b27      	ldr	r3, [pc, #156]	@ (8004bb4 <menu_select+0x250>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	801a      	strh	r2, [r3, #0]
                apply_countdown_settings();
 8004b1c:	f7ff fc06 	bl	800432c <apply_countdown_settings>
                ModelHandle_StartCountdown(seconds, (uint16_t)edit_countdown_rep);
 8004b20:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <menu_select+0x250>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe f89a 	bl	8002c60 <ModelHandle_StartCountdown>
                ui = UI_COUNTDOWN;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <menu_select+0x238>)
 8004b2e:	220d      	movs	r2, #13
 8004b30:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004b32:	e02b      	b.n	8004b8c <menu_select+0x228>


        case UI_TWIST:
            // SELECT toggles enable/stop; UP/DOWN will switch to edit states
            if (twistSettings.twistActive) {
 8004b34:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <menu_select+0x254>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <menu_select+0x1de>
                ModelHandle_StopTwist();
 8004b3c:	f7fe f9e2 	bl	8002f04 <ModelHandle_StopTwist>
 8004b40:	e008      	b.n	8004b54 <menu_select+0x1f0>
            } else {
                // use current edit buffers (or the applied values) to start
                ModelHandle_StartTwist(edit_twist_on_s, edit_twist_off_s);
 8004b42:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <menu_select+0x258>)
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <menu_select+0x25c>)
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7fe f980 	bl	8002e54 <ModelHandle_StartTwist>
            }
            screenNeedsRefresh = true;
 8004b54:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <menu_select+0x240>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
            break;
 8004b5a:	e017      	b.n	8004b8c <menu_select+0x228>

        case UI_TWIST_EDIT_ON:      ui = UI_TWIST_EDIT_OFF; break;
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <menu_select+0x238>)
 8004b5e:	2213      	movs	r2, #19
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e013      	b.n	8004b8c <menu_select+0x228>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();   // writes into twistSettings
 8004b64:	f7ff fbce 	bl	8004304 <apply_twist_settings>
            // If active, apply live (optional, keeps running with new values)
            if (twistSettings.twistActive) {
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <menu_select+0x254>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <menu_select+0x21e>
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <menu_select+0x254>)
 8004b72:	885b      	ldrh	r3, [r3, #2]
 8004b74:	461a      	mov	r2, r3
                                       twistSettings.offDurationSeconds);
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <menu_select+0x254>)
 8004b78:	889b      	ldrh	r3, [r3, #4]
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fe f969 	bl	8002e54 <ModelHandle_StartTwist>
            }
            ui = UI_TWIST; break;
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <menu_select+0x238>)
 8004b84:	2211      	movs	r2, #17
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e000      	b.n	8004b8c <menu_select+0x228>


        default: break;
 8004b8a:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <menu_select+0x240>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000604 	.word	0x20000604
 8004ba0:	20000614 	.word	0x20000614
 8004ba4:	20000605 	.word	0x20000605
 8004ba8:	20000610 	.word	0x20000610
 8004bac:	20000572 	.word	0x20000572
 8004bb0:	20000054 	.word	0x20000054
 8004bb4:	20000056 	.word	0x20000056
 8004bb8:	20000024 	.word	0x20000024
 8004bbc:	20000050 	.word	0x20000050
 8004bc0:	20000052 	.word	0x20000052

08004bc4 <menu_reset>:

static void menu_reset(void){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004bc8:	f7ff f88e 	bl	8003ce8 <refreshInactivityTimer>

    switch (ui) {
 8004bcc:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <menu_reset+0xb0>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	2b12      	cmp	r3, #18
 8004bd4:	d844      	bhi.n	8004c60 <menu_reset+0x9c>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <menu_reset+0x18>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c39 	.word	0x08004c39
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c49 	.word	0x08004c49
 8004c08:	08004c49 	.word	0x08004c49
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c51 	.word	0x08004c51
 8004c14:	08004c51 	.word	0x08004c51
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c29 	.word	0x08004c29
 8004c20:	08004c59 	.word	0x08004c59
 8004c24:	08004c59 	.word	0x08004c59
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 8004c28:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <menu_reset+0xb0>)
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e01b      	b.n	8004c68 <menu_reset+0xa4>
        case UI_MENU: ui = UI_DASH; break;
 8004c30:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <menu_reset+0xb0>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e017      	b.n	8004c68 <menu_reset+0xa4>
        case UI_DASH: ui = UI_WELCOME; break;
 8004c38:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <menu_reset+0xb0>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e013      	b.n	8004c68 <menu_reset+0xa4>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 8004c40:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <menu_reset+0xb0>)
 8004c42:	2205      	movs	r2, #5
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e00f      	b.n	8004c68 <menu_reset+0xa4>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <menu_reset+0xb0>)
 8004c4a:	220a      	movs	r2, #10
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e00b      	b.n	8004c68 <menu_reset+0xa4>
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP: ui = UI_COUNTDOWN; break;  // NEW: back from repeats editor
 8004c50:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <menu_reset+0xb0>)
 8004c52:	220d      	movs	r2, #13
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e007      	b.n	8004c68 <menu_reset+0xa4>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <menu_reset+0xb0>)
 8004c5a:	2211      	movs	r2, #17
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e003      	b.n	8004c68 <menu_reset+0xa4>
        default: ui = UI_MENU; break;
 8004c60:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <menu_reset+0xb0>)
 8004c62:	2202      	movs	r2, #2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <menu_reset+0xb4>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000604 	.word	0x20000604
 8004c78:	20000605 	.word	0x20000605

08004c7c <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_NONE) return;
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8288 	beq.w	800519e <Screen_HandleButton+0x522>

    /* Quick RESET → manual toggle (your existing behavior) */
    if (b == BTN_RESET) {
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <Screen_HandleButton+0x1e>
        ModelHandle_ToggleManual();
 8004c94:	f7fd ff40 	bl	8002b18 <ModelHandle_ToggleManual>
        return;
 8004c98:	e282      	b.n	80051a0 <Screen_HandleButton+0x524>
    }

    /* =======================
       UP key
       ======================= */
    if (b == BTN_UP) {
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	f040 80bf 	bne.w	8004e20 <Screen_HandleButton+0x1a4>
        switch (ui) {
 8004ca2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3b02      	subs	r3, #2
 8004ca8:	2b11      	cmp	r3, #17
 8004caa:	f200 80a6 	bhi.w	8004dfa <Screen_HandleButton+0x17e>
 8004cae:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <Screen_HandleButton+0x38>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cfd 	.word	0x08004cfd
 8004cb8:	08004dfb 	.word	0x08004dfb
 8004cbc:	08004dfb 	.word	0x08004dfb
 8004cc0:	08004dfb 	.word	0x08004dfb
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d27 	.word	0x08004d27
 8004ccc:	08004d3d 	.word	0x08004d3d
 8004cd0:	08004d53 	.word	0x08004d53
 8004cd4:	08004d69 	.word	0x08004d69
 8004cd8:	08004d77 	.word	0x08004d77
 8004cdc:	08004d85 	.word	0x08004d85
 8004ce0:	08004dfb 	.word	0x08004dfb
 8004ce4:	08004d93 	.word	0x08004d93
 8004ce8:	08004da1 	.word	0x08004da1
 8004cec:	08004daf 	.word	0x08004daf
 8004cf0:	08004dbd 	.word	0x08004dbd
 8004cf4:	08004dcb 	.word	0x08004dcb
 8004cf8:	08004de3 	.word	0x08004de3
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004cfc:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd7c      	ble.n	8004dfe <Screen_HandleButton+0x182>
 8004d04:	4b86      	ldr	r3, [pc, #536]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	4a85      	ldr	r2, [pc, #532]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e076      	b.n	8004dfe <Screen_HandleButton+0x182>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004d10:	4b84      	ldr	r3, [pc, #528]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b16      	cmp	r3, #22
 8004d16:	d874      	bhi.n	8004e02 <Screen_HandleButton+0x186>
 8004d18:	4b82      	ldr	r3, [pc, #520]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b80      	ldr	r3, [pc, #512]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e06d      	b.n	8004e02 <Screen_HandleButton+0x186>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004d26:	4b80      	ldr	r3, [pc, #512]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d2c:	d86b      	bhi.n	8004e06 <Screen_HandleButton+0x18a>
 8004d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4b7c      	ldr	r3, [pc, #496]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e064      	b.n	8004e06 <Screen_HandleButton+0x18a>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b16      	cmp	r3, #22
 8004d42:	d862      	bhi.n	8004e0a <Screen_HandleButton+0x18e>
 8004d44:	4b79      	ldr	r3, [pc, #484]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b77      	ldr	r3, [pc, #476]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e05b      	b.n	8004e0a <Screen_HandleButton+0x18e>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004d52:	4b77      	ldr	r3, [pc, #476]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d58:	d859      	bhi.n	8004e0e <Screen_HandleButton+0x192>
 8004d5a:	4b75      	ldr	r3, [pc, #468]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b73      	ldr	r3, [pc, #460]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e052      	b.n	8004e0e <Screen_HandleButton+0x192>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 8004d68:	4b6c      	ldr	r3, [pc, #432]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004d6a:	220b      	movs	r2, #11
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	4b71      	ldr	r3, [pc, #452]	@ (8004f34 <Screen_HandleButton+0x2b8>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e214      	b.n	80051a0 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   edit_search_gap_s += 5;  break;
 8004d76:	4b70      	ldr	r3, [pc, #448]	@ (8004f38 <Screen_HandleButton+0x2bc>)
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	3305      	adds	r3, #5
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f38 <Screen_HandleButton+0x2bc>)
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e049      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_SEARCH_EDIT_DRY:   edit_search_dry_s += 1;  break;
 8004d84:	4b6d      	ldr	r3, [pc, #436]	@ (8004f3c <Screen_HandleButton+0x2c0>)
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8004f3c <Screen_HandleButton+0x2c0>)
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	e042      	b.n	8004e18 <Screen_HandleButton+0x19c>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 8004d92:	4b6b      	ldr	r3, [pc, #428]	@ (8004f40 <Screen_HandleButton+0x2c4>)
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	4b69      	ldr	r3, [pc, #420]	@ (8004f40 <Screen_HandleButton+0x2c4>)
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	e03b      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_EDIT_REP: edit_countdown_rep++; break;
 8004da0:	4b68      	ldr	r3, [pc, #416]	@ (8004f44 <Screen_HandleButton+0x2c8>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b66      	ldr	r3, [pc, #408]	@ (8004f44 <Screen_HandleButton+0x2c8>)
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e034      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_TOGGLE:   ui = UI_COUNTDOWN_EDIT_MIN; screenNeedsRefresh = true; return;
 8004dae:	4b5b      	ldr	r3, [pc, #364]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004db0:	220e      	movs	r2, #14
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	4b5f      	ldr	r3, [pc, #380]	@ (8004f34 <Screen_HandleButton+0x2b8>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e1f1      	b.n	80051a0 <Screen_HandleButton+0x524>

            /* Twist edits */
            case UI_TWIST:             ui = UI_TWIST_EDIT_ON; screenNeedsRefresh = true; return;
 8004dbc:	4b57      	ldr	r3, [pc, #348]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004dbe:	2212      	movs	r2, #18
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f34 <Screen_HandleButton+0x2b8>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e1ea      	b.n	80051a0 <Screen_HandleButton+0x524>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004dca:	4b5f      	ldr	r3, [pc, #380]	@ (8004f48 <Screen_HandleButton+0x2cc>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004dd2:	d21e      	bcs.n	8004e12 <Screen_HandleButton+0x196>
 8004dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8004f48 <Screen_HandleButton+0x2cc>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f48 <Screen_HandleButton+0x2cc>)
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e017      	b.n	8004e12 <Screen_HandleButton+0x196>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004de2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f4c <Screen_HandleButton+0x2d0>)
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004dea:	d214      	bcs.n	8004e16 <Screen_HandleButton+0x19a>
 8004dec:	4b57      	ldr	r3, [pc, #348]	@ (8004f4c <Screen_HandleButton+0x2d0>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	4b55      	ldr	r3, [pc, #340]	@ (8004f4c <Screen_HandleButton+0x2d0>)
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e00d      	b.n	8004e16 <Screen_HandleButton+0x19a>

            default: break;
 8004dfa:	bf00      	nop
 8004dfc:	e00c      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 8004dfe:	bf00      	nop
 8004e00:	e00a      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 8004e02:	bf00      	nop
 8004e04:	e008      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 8004e06:	bf00      	nop
 8004e08:	e006      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8004e0a:	bf00      	nop
 8004e0c:	e004      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8004e16:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8004e18:	4b46      	ldr	r3, [pc, #280]	@ (8004f34 <Screen_HandleButton+0x2b8>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
        return;
 8004e1e:	e1bf      	b.n	80051a0 <Screen_HandleButton+0x524>
    }

    /* =======================
       DOWN key
       ======================= */
    if (b == BTN_DOWN) {
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	f040 80e6 	bne.w	8004ff4 <Screen_HandleButton+0x378>
        switch (ui) {
 8004e28:	4b3c      	ldr	r3, [pc, #240]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	3b02      	subs	r3, #2
 8004e2e:	2b11      	cmp	r3, #17
 8004e30:	f200 80c5 	bhi.w	8004fbe <Screen_HandleButton+0x342>
 8004e34:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <Screen_HandleButton+0x1c0>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e85 	.word	0x08004e85
 8004e40:	08004fbf 	.word	0x08004fbf
 8004e44:	08004fbf 	.word	0x08004fbf
 8004e48:	08004fbf 	.word	0x08004fbf
 8004e4c:	08004e9b 	.word	0x08004e9b
 8004e50:	08004eb3 	.word	0x08004eb3
 8004e54:	08004ecb 	.word	0x08004ecb
 8004e58:	08004ee1 	.word	0x08004ee1
 8004e5c:	08004ef7 	.word	0x08004ef7
 8004e60:	08004f05 	.word	0x08004f05
 8004e64:	08004f51 	.word	0x08004f51
 8004e68:	08004fbf 	.word	0x08004fbf
 8004e6c:	08004f67 	.word	0x08004f67
 8004e70:	08004f7d 	.word	0x08004f7d
 8004e74:	08004fbf 	.word	0x08004fbf
 8004e78:	08004fbf 	.word	0x08004fbf
 8004e7c:	08004f93 	.word	0x08004f93
 8004e80:	08004fa9 	.word	0x08004fa9
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8004e84:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	f300 809a 	bgt.w	8004fc2 <Screen_HandleButton+0x346>
 8004e8e:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <Screen_HandleButton+0x2a4>)
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e093      	b.n	8004fc2 <Screen_HandleButton+0x346>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 8004e9a:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8091 	beq.w	8004fc6 <Screen_HandleButton+0x34a>
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <Screen_HandleButton+0x2a8>)
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e089      	b.n	8004fc6 <Screen_HandleButton+0x34a>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8087 	beq.w	8004fca <Screen_HandleButton+0x34e>
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	4b18      	ldr	r3, [pc, #96]	@ (8004f28 <Screen_HandleButton+0x2ac>)
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e07f      	b.n	8004fca <Screen_HandleButton+0x34e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004eca:	4b18      	ldr	r3, [pc, #96]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d07d      	beq.n	8004fce <Screen_HandleButton+0x352>
 8004ed2:	4b16      	ldr	r3, [pc, #88]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <Screen_HandleButton+0x2b0>)
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e076      	b.n	8004fce <Screen_HandleButton+0x352>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d074      	beq.n	8004fd2 <Screen_HandleButton+0x356>
 8004ee8:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f30 <Screen_HandleButton+0x2b4>)
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e06d      	b.n	8004fd2 <Screen_HandleButton+0x356>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 8004ef6:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <Screen_HandleButton+0x2a0>)
 8004ef8:	220b      	movs	r2, #11
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <Screen_HandleButton+0x2b8>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e14d      	b.n	80051a0 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <Screen_HandleButton+0x2bc>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d964      	bls.n	8004fd6 <Screen_HandleButton+0x35a>
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <Screen_HandleButton+0x2bc>)
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	3b05      	subs	r3, #5
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <Screen_HandleButton+0x2bc>)
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e05d      	b.n	8004fd6 <Screen_HandleButton+0x35a>
 8004f1a:	bf00      	nop
 8004f1c:	20000604 	.word	0x20000604
 8004f20:	20000614 	.word	0x20000614
 8004f24:	20000048 	.word	0x20000048
 8004f28:	20000049 	.word	0x20000049
 8004f2c:	2000004a 	.word	0x2000004a
 8004f30:	2000004b 	.word	0x2000004b
 8004f34:	20000605 	.word	0x20000605
 8004f38:	2000004c 	.word	0x2000004c
 8004f3c:	2000004e 	.word	0x2000004e
 8004f40:	20000054 	.word	0x20000054
 8004f44:	20000056 	.word	0x20000056
 8004f48:	20000050 	.word	0x20000050
 8004f4c:	20000052 	.word	0x20000052
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8004f50:	4b95      	ldr	r3, [pc, #596]	@ (80051a8 <Screen_HandleButton+0x52c>)
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d940      	bls.n	8004fda <Screen_HandleButton+0x35e>
 8004f58:	4b93      	ldr	r3, [pc, #588]	@ (80051a8 <Screen_HandleButton+0x52c>)
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	4b91      	ldr	r3, [pc, #580]	@ (80051a8 <Screen_HandleButton+0x52c>)
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	e039      	b.n	8004fda <Screen_HandleButton+0x35e>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8004f66:	4b91      	ldr	r3, [pc, #580]	@ (80051ac <Screen_HandleButton+0x530>)
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d937      	bls.n	8004fde <Screen_HandleButton+0x362>
 8004f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80051ac <Screen_HandleButton+0x530>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	4b8d      	ldr	r3, [pc, #564]	@ (80051ac <Screen_HandleButton+0x530>)
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e030      	b.n	8004fde <Screen_HandleButton+0x362>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8004f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80051b0 <Screen_HandleButton+0x534>)
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d92e      	bls.n	8004fe2 <Screen_HandleButton+0x366>
 8004f84:	4b8a      	ldr	r3, [pc, #552]	@ (80051b0 <Screen_HandleButton+0x534>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4b88      	ldr	r3, [pc, #544]	@ (80051b0 <Screen_HandleButton+0x534>)
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e027      	b.n	8004fe2 <Screen_HandleButton+0x366>

            /* Twist edits */
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 8004f92:	4b88      	ldr	r3, [pc, #544]	@ (80051b4 <Screen_HandleButton+0x538>)
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d925      	bls.n	8004fe6 <Screen_HandleButton+0x36a>
 8004f9a:	4b86      	ldr	r3, [pc, #536]	@ (80051b4 <Screen_HandleButton+0x538>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b84      	ldr	r3, [pc, #528]	@ (80051b4 <Screen_HandleButton+0x538>)
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e01e      	b.n	8004fe6 <Screen_HandleButton+0x36a>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8004fa8:	4b83      	ldr	r3, [pc, #524]	@ (80051b8 <Screen_HandleButton+0x53c>)
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d91c      	bls.n	8004fea <Screen_HandleButton+0x36e>
 8004fb0:	4b81      	ldr	r3, [pc, #516]	@ (80051b8 <Screen_HandleButton+0x53c>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	4b7f      	ldr	r3, [pc, #508]	@ (80051b8 <Screen_HandleButton+0x53c>)
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e015      	b.n	8004fea <Screen_HandleButton+0x36e>

            default: break;
 8004fbe:	bf00      	nop
 8004fc0:	e014      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8004fc2:	bf00      	nop
 8004fc4:	e012      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 8004fc6:	bf00      	nop
 8004fc8:	e010      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 8004fca:	bf00      	nop
 8004fcc:	e00e      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004fce:	bf00      	nop
 8004fd0:	e00c      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004fd2:	bf00      	nop
 8004fd4:	e00a      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 8004fd6:	bf00      	nop
 8004fd8:	e008      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8004fda:	bf00      	nop
 8004fdc:	e006      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8004fde:	bf00      	nop
 8004fe0:	e004      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8004fea:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8004fec:	4b73      	ldr	r3, [pc, #460]	@ (80051bc <Screen_HandleButton+0x540>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
        return;
 8004ff2:	e0d5      	b.n	80051a0 <Screen_HandleButton+0x524>
    }

    /* =======================
       SELECT key
       ======================= */
    if (b == BTN_SELECT) {
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	f040 80d2 	bne.w	80051a0 <Screen_HandleButton+0x524>
        switch (ui) {
 8004ffc:	4b70      	ldr	r3, [pc, #448]	@ (80051c0 <Screen_HandleButton+0x544>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	3b0a      	subs	r3, #10
 8005002:	2b09      	cmp	r3, #9
 8005004:	f200 80c8 	bhi.w	8005198 <Screen_HandleButton+0x51c>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <Screen_HandleButton+0x394>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005039 	.word	0x08005039
 8005014:	0800507b 	.word	0x0800507b
 8005018:	08005089 	.word	0x08005089
 800501c:	08005199 	.word	0x08005199
 8005020:	08005199 	.word	0x08005199
 8005024:	08005199 	.word	0x08005199
 8005028:	08005199 	.word	0x08005199
 800502c:	080050dd 	.word	0x080050dd
 8005030:	0800511f 	.word	0x0800511f
 8005034:	0800512d 	.word	0x0800512d

            /* ---- Search main: Enable/Stop ---- */
            case UI_SEARCH:
                if (searchSettings.searchActive) {
 8005038:	4b62      	ldr	r3, [pc, #392]	@ (80051c4 <Screen_HandleButton+0x548>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <Screen_HandleButton+0x3ca>
                    ModelHandle_StopSearch();
 8005040:	f7fe f894 	bl	800316c <ModelHandle_StopSearch>
 8005044:	e015      	b.n	8005072 <Screen_HandleButton+0x3f6>
                } else {
                    uint16_t gap_s   = (uint16_t)edit_search_gap_s;  if (gap_s   == 0) gap_s   = 5;
 8005046:	4b60      	ldr	r3, [pc, #384]	@ (80051c8 <Screen_HandleButton+0x54c>)
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	81fb      	strh	r3, [r7, #14]
 800504c:	89fb      	ldrh	r3, [r7, #14]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <Screen_HandleButton+0x3da>
 8005052:	2305      	movs	r3, #5
 8005054:	81fb      	strh	r3, [r7, #14]
                    uint16_t probe_s = (uint16_t)edit_search_dry_s;  if (probe_s == 0) probe_s = 3;
 8005056:	4b54      	ldr	r3, [pc, #336]	@ (80051a8 <Screen_HandleButton+0x52c>)
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	81bb      	strh	r3, [r7, #12]
 800505c:	89bb      	ldrh	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <Screen_HandleButton+0x3ea>
 8005062:	2303      	movs	r3, #3
 8005064:	81bb      	strh	r3, [r7, #12]
                    ModelHandle_StartSearch(gap_s, probe_s);
 8005066:	89fb      	ldrh	r3, [r7, #14]
 8005068:	89ba      	ldrh	r2, [r7, #12]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe f81d 	bl	80030ac <ModelHandle_StartSearch>
                }
                screenNeedsRefresh = true;
 8005072:	4b52      	ldr	r3, [pc, #328]	@ (80051bc <Screen_HandleButton+0x540>)
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
                return;
 8005078:	e092      	b.n	80051a0 <Screen_HandleButton+0x524>

            /* ---- Search edit flow ---- */
            case UI_SEARCH_EDIT_GAP:
                ui = UI_SEARCH_EDIT_DRY;
 800507a:	4b51      	ldr	r3, [pc, #324]	@ (80051c0 <Screen_HandleButton+0x544>)
 800507c:	220c      	movs	r2, #12
 800507e:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005080:	4b4e      	ldr	r3, [pc, #312]	@ (80051bc <Screen_HandleButton+0x540>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
                return;
 8005086:	e08b      	b.n	80051a0 <Screen_HandleButton+0x524>

            case UI_SEARCH_EDIT_DRY:
                if (edit_search_gap_s < 1) edit_search_gap_s = 1;
 8005088:	4b4f      	ldr	r3, [pc, #316]	@ (80051c8 <Screen_HandleButton+0x54c>)
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <Screen_HandleButton+0x41a>
 8005090:	4b4d      	ldr	r3, [pc, #308]	@ (80051c8 <Screen_HandleButton+0x54c>)
 8005092:	2201      	movs	r2, #1
 8005094:	801a      	strh	r2, [r3, #0]
                if (edit_search_dry_s < 1) edit_search_dry_s = 1;
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <Screen_HandleButton+0x52c>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <Screen_HandleButton+0x428>
 800509e:	4b42      	ldr	r3, [pc, #264]	@ (80051a8 <Screen_HandleButton+0x52c>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	801a      	strh	r2, [r3, #0]

                searchSettings.testingGapSeconds = (uint16_t)edit_search_gap_s;
 80050a4:	4b48      	ldr	r3, [pc, #288]	@ (80051c8 <Screen_HandleButton+0x54c>)
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	4b46      	ldr	r3, [pc, #280]	@ (80051c4 <Screen_HandleButton+0x548>)
 80050aa:	805a      	strh	r2, [r3, #2]
                searchSettings.dryRunTimeSeconds = (uint16_t)edit_search_dry_s;
 80050ac:	4b3e      	ldr	r3, [pc, #248]	@ (80051a8 <Screen_HandleButton+0x52c>)
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	4b44      	ldr	r3, [pc, #272]	@ (80051c4 <Screen_HandleButton+0x548>)
 80050b2:	809a      	strh	r2, [r3, #4]

                if (searchSettings.searchActive) {
 80050b4:	4b43      	ldr	r3, [pc, #268]	@ (80051c4 <Screen_HandleButton+0x548>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <Screen_HandleButton+0x452>
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 80050bc:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <Screen_HandleButton+0x548>)
 80050be:	885b      	ldrh	r3, [r3, #2]
 80050c0:	461a      	mov	r2, r3
                                            (uint16_t)searchSettings.dryRunTimeSeconds);
 80050c2:	4b40      	ldr	r3, [pc, #256]	@ (80051c4 <Screen_HandleButton+0x548>)
 80050c4:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fd ffef 	bl	80030ac <ModelHandle_StartSearch>
                }
                ui = UI_SEARCH;
 80050ce:	4b3c      	ldr	r3, [pc, #240]	@ (80051c0 <Screen_HandleButton+0x544>)
 80050d0:	220a      	movs	r2, #10
 80050d2:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 80050d4:	4b39      	ldr	r3, [pc, #228]	@ (80051bc <Screen_HandleButton+0x540>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
                return;
 80050da:	e061      	b.n	80051a0 <Screen_HandleButton+0x524>

            /* ---- Twist main: Enable/Stop ---- */
            case UI_TWIST:
                if (twistSettings.twistActive) {
 80050dc:	4b3b      	ldr	r3, [pc, #236]	@ (80051cc <Screen_HandleButton+0x550>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <Screen_HandleButton+0x46e>
                    ModelHandle_StopTwist();
 80050e4:	f7fd ff0e 	bl	8002f04 <ModelHandle_StopTwist>
 80050e8:	e015      	b.n	8005116 <Screen_HandleButton+0x49a>
                } else {
                    uint16_t on_s  = (uint16_t)edit_twist_on_s;  if (on_s  == 0) on_s  = 1;
 80050ea:	4b32      	ldr	r3, [pc, #200]	@ (80051b4 <Screen_HandleButton+0x538>)
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	817b      	strh	r3, [r7, #10]
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <Screen_HandleButton+0x47e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	817b      	strh	r3, [r7, #10]
                    uint16_t off_s = (uint16_t)edit_twist_off_s; if (off_s == 0) off_s = 1;
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <Screen_HandleButton+0x53c>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	813b      	strh	r3, [r7, #8]
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <Screen_HandleButton+0x48e>
 8005106:	2301      	movs	r3, #1
 8005108:	813b      	strh	r3, [r7, #8]
                    ModelHandle_StartTwist(on_s, off_s);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	893a      	ldrh	r2, [r7, #8]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7fd fe9f 	bl	8002e54 <ModelHandle_StartTwist>
                }
                screenNeedsRefresh = true;
 8005116:	4b29      	ldr	r3, [pc, #164]	@ (80051bc <Screen_HandleButton+0x540>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
                return;
 800511c:	e040      	b.n	80051a0 <Screen_HandleButton+0x524>

            /* ---- Twist edit ---- */
            case UI_TWIST_EDIT_ON:
                ui = UI_TWIST_EDIT_OFF;
 800511e:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <Screen_HandleButton+0x544>)
 8005120:	2213      	movs	r2, #19
 8005122:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005124:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <Screen_HandleButton+0x540>)
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
                return;
 800512a:	e039      	b.n	80051a0 <Screen_HandleButton+0x524>

            case UI_TWIST_EDIT_OFF:
                if (edit_twist_off_s < 1)   edit_twist_off_s = 1;
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <Screen_HandleButton+0x53c>)
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <Screen_HandleButton+0x4be>
 8005134:	4b20      	ldr	r3, [pc, #128]	@ (80051b8 <Screen_HandleButton+0x53c>)
 8005136:	2201      	movs	r2, #1
 8005138:	801a      	strh	r2, [r3, #0]
                if (edit_twist_off_s > 600) edit_twist_off_s = 600;
 800513a:	4b1f      	ldr	r3, [pc, #124]	@ (80051b8 <Screen_HandleButton+0x53c>)
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005142:	d903      	bls.n	800514c <Screen_HandleButton+0x4d0>
 8005144:	4b1c      	ldr	r3, [pc, #112]	@ (80051b8 <Screen_HandleButton+0x53c>)
 8005146:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800514a:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  < 1)   edit_twist_on_s  = 1;
 800514c:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <Screen_HandleButton+0x538>)
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <Screen_HandleButton+0x4de>
 8005154:	4b17      	ldr	r3, [pc, #92]	@ (80051b4 <Screen_HandleButton+0x538>)
 8005156:	2201      	movs	r2, #1
 8005158:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  > 600) edit_twist_on_s  = 600;
 800515a:	4b16      	ldr	r3, [pc, #88]	@ (80051b4 <Screen_HandleButton+0x538>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005162:	d903      	bls.n	800516c <Screen_HandleButton+0x4f0>
 8005164:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <Screen_HandleButton+0x538>)
 8005166:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800516a:	801a      	strh	r2, [r3, #0]

                apply_twist_settings(); // copies edit_* to twistSettings
 800516c:	f7ff f8ca 	bl	8004304 <apply_twist_settings>

                if (twistSettings.twistActive) {
 8005170:	4b16      	ldr	r3, [pc, #88]	@ (80051cc <Screen_HandleButton+0x550>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <Screen_HandleButton+0x50e>
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 8005178:	4b14      	ldr	r3, [pc, #80]	@ (80051cc <Screen_HandleButton+0x550>)
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	461a      	mov	r2, r3
                                           (uint16_t)twistSettings.offDurationSeconds);
 800517e:	4b13      	ldr	r3, [pc, #76]	@ (80051cc <Screen_HandleButton+0x550>)
 8005180:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fd fe65 	bl	8002e54 <ModelHandle_StartTwist>
                }
                ui = UI_TWIST;
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <Screen_HandleButton+0x544>)
 800518c:	2211      	movs	r2, #17
 800518e:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005190:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <Screen_HandleButton+0x540>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
                return;
 8005196:	e003      	b.n	80051a0 <Screen_HandleButton+0x524>

            /* ---- Others: keep your existing flow ---- */
            default:
                menu_select();
 8005198:	f7ff fbe4 	bl	8004964 <menu_select>
                return;
 800519c:	e000      	b.n	80051a0 <Screen_HandleButton+0x524>
    if (b == BTN_NONE) return;
 800519e:	bf00      	nop
        }
    }
}
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2000004e 	.word	0x2000004e
 80051ac:	20000054 	.word	0x20000054
 80051b0:	20000056 	.word	0x20000056
 80051b4:	20000050 	.word	0x20000050
 80051b8:	20000052 	.word	0x20000052
 80051bc:	20000605 	.word	0x20000605
 80051c0:	20000604 	.word	0x20000604
 80051c4:	2000001c 	.word	0x2000001c
 80051c8:	2000004c 	.word	0x2000004c
 80051cc:	20000024 	.word	0x20000024

080051d0 <Screen_HandleSwitches>:

/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}    // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e083      	b.n	80052e4 <Screen_HandleSwitches+0x114>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 80051dc:	4946      	ldr	r1, [pc, #280]	@ (80052f8 <Screen_HandleSwitches+0x128>)
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	4942      	ldr	r1, [pc, #264]	@ (80052f8 <Screen_HandleSwitches+0x128>)
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3304      	adds	r3, #4
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	f001 fcec 	bl	8006bdc <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	72fb      	strb	r3, [r7, #11]

        if (pressed && prev[i]) {
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <Screen_HandleSwitches+0x6c>
 8005216:	4a39      	ldr	r2, [pc, #228]	@ (80052fc <Screen_HandleSwitches+0x12c>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 8005222:	4a36      	ldr	r2, [pc, #216]	@ (80052fc <Screen_HandleSwitches+0x12c>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 800522c:	f000 fc3e 	bl	8005aac <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	4933      	ldr	r1, [pc, #204]	@ (8005300 <Screen_HandleSwitches+0x130>)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800523a:	e050      	b.n	80052de <Screen_HandleSwitches+0x10e>
        }
        else if (!pressed && !prev[i]) {
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d04a      	beq.n	80052de <Screen_HandleSwitches+0x10e>
 8005248:	4a2c      	ldr	r2, [pc, #176]	@ (80052fc <Screen_HandleSwitches+0x12c>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f083 0301 	eor.w	r3, r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d041      	beq.n	80052de <Screen_HandleSwitches+0x10e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 800525a:	f000 fc27 	bl	8005aac <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	4927      	ldr	r1, [pc, #156]	@ (8005300 <Screen_HandleSwitches+0x130>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <Screen_HandleSwitches+0x12c>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]

            if (i == 0 && pressDuration > 2000) {
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <Screen_HandleSwitches+0xba>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005282:	d902      	bls.n	800528a <Screen_HandleSwitches+0xba>
                ModelHandle_ManualLongPress();
 8005284:	f7fd fc90 	bl	8002ba8 <ModelHandle_ManualLongPress>
 8005288:	e029      	b.n	80052de <Screen_HandleSwitches+0x10e>
            } else if (i == 3 && pressDuration > 2000) {
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d106      	bne.n	800529e <Screen_HandleSwitches+0xce>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005296:	d902      	bls.n	800529e <Screen_HandleSwitches+0xce>
                menu_reset(); // SW4 long press = Back
 8005298:	f7ff fc94 	bl	8004bc4 <menu_reset>
 800529c:	e01f      	b.n	80052de <Screen_HandleSwitches+0x10e>
            } else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 800529e:	4916      	ldr	r1, [pc, #88]	@ (80052f8 <Screen_HandleSwitches+0x128>)
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	4912      	ldr	r1, [pc, #72]	@ (80052f8 <Screen_HandleSwitches+0x128>)
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3308      	adds	r3, #8
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	f001 fcba 	bl	8006c3a <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 80052c6:	490c      	ldr	r1, [pc, #48]	@ (80052f8 <Screen_HandleSwitches+0x128>)
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3306      	adds	r3, #6
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fccf 	bl	8004c7c <Screen_HandleButton>
    for (int i=0; i<4; i++){
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	f77f af78 	ble.w	80051dc <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	0800d668 	.word	0x0800d668
 80052fc:	20000058 	.word	0x20000058
 8005300:	2000061c 	.word	0x2000061c

08005304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800530a:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <HAL_MspInit+0x5c>)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	4a14      	ldr	r2, [pc, #80]	@ (8005360 <HAL_MspInit+0x5c>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6193      	str	r3, [r2, #24]
 8005316:	4b12      	ldr	r3, [pc, #72]	@ (8005360 <HAL_MspInit+0x5c>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	4b0f      	ldr	r3, [pc, #60]	@ (8005360 <HAL_MspInit+0x5c>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4a0e      	ldr	r2, [pc, #56]	@ (8005360 <HAL_MspInit+0x5c>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532c:	61d3      	str	r3, [r2, #28]
 800532e:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <HAL_MspInit+0x5c>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <HAL_MspInit+0x60>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	4a04      	ldr	r2, [pc, #16]	@ (8005364 <HAL_MspInit+0x60>)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	40021000 	.word	0x40021000
 8005364:	40010000 	.word	0x40010000

08005368 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 0310 	add.w	r3, r7, #16
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <HAL_ADC_MspInit+0x7c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d129      	bne.n	80053dc <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005388:	4b17      	ldr	r3, [pc, #92]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 800538e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005392:	6193      	str	r3, [r2, #24]
 8005394:	4b14      	ldr	r3, [pc, #80]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	4a10      	ldr	r2, [pc, #64]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6193      	str	r3, [r2, #24]
 80053ac:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <HAL_ADC_MspInit+0x80>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80053b8:	23ff      	movs	r3, #255	@ 0xff
 80053ba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053bc:	2303      	movs	r3, #3
 80053be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	4619      	mov	r1, r3
 80053c6:	4809      	ldr	r0, [pc, #36]	@ (80053ec <HAL_ADC_MspInit+0x84>)
 80053c8:	f001 fa84 	bl	80068d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2100      	movs	r1, #0
 80053d0:	2012      	movs	r0, #18
 80053d2:	f001 fa48 	bl	8006866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80053d6:	2012      	movs	r0, #18
 80053d8:	f001 fa61 	bl	800689e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80053dc:	bf00      	nop
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40012400 	.word	0x40012400
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40010800 	.word	0x40010800

080053f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <HAL_I2C_MspInit+0x74>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d124      	bne.n	800545a <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005410:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4a14      	ldr	r2, [pc, #80]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 8005416:	f043 0308 	orr.w	r3, r3, #8
 800541a:	6193      	str	r3, [r2, #24]
 800541c:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005428:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800542c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800542e:	2312      	movs	r3, #18
 8005430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005432:	2303      	movs	r3, #3
 8005434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005436:	f107 0310 	add.w	r3, r7, #16
 800543a:	4619      	mov	r1, r3
 800543c:	480b      	ldr	r0, [pc, #44]	@ (800546c <HAL_I2C_MspInit+0x7c>)
 800543e:	f001 fa49 	bl	80068d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005442:	4b09      	ldr	r3, [pc, #36]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 8005448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800544c:	61d3      	str	r3, [r2, #28]
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_I2C_MspInit+0x78>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40005800 	.word	0x40005800
 8005468:	40021000 	.word	0x40021000
 800546c:	40010c00 	.word	0x40010c00

08005470 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	@ 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_SPI_MspInit+0xa4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d13d      	bne.n	800550c <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005490:	4b21      	ldr	r3, [pc, #132]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	4a20      	ldr	r2, [pc, #128]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 8005496:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800549a:	6193      	str	r3, [r2, #24]
 800549c:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 80054ae:	f043 0308 	orr.w	r3, r3, #8
 80054b2:	6193      	str	r3, [r2, #24]
 80054b4:	4b18      	ldr	r3, [pc, #96]	@ (8005518 <HAL_SPI_MspInit+0xa8>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80054c0:	2328      	movs	r3, #40	@ 0x28
 80054c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	2302      	movs	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c8:	2303      	movs	r3, #3
 80054ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	4619      	mov	r1, r3
 80054d2:	4812      	ldr	r0, [pc, #72]	@ (800551c <HAL_SPI_MspInit+0xac>)
 80054d4:	f001 f9fe 	bl	80068d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054d8:	2310      	movs	r3, #16
 80054da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	4619      	mov	r1, r3
 80054ea:	480c      	ldr	r0, [pc, #48]	@ (800551c <HAL_SPI_MspInit+0xac>)
 80054ec:	f001 f9f2 	bl	80068d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_SPI_MspInit+0xb0>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
 8005506:	4a06      	ldr	r2, [pc, #24]	@ (8005520 <HAL_SPI_MspInit+0xb0>)
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800550c:	bf00      	nop
 800550e:	3728      	adds	r7, #40	@ 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40013000 	.word	0x40013000
 8005518:	40021000 	.word	0x40021000
 800551c:	40010c00 	.word	0x40010c00
 8005520:	40010000 	.word	0x40010000

08005524 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a09      	ldr	r2, [pc, #36]	@ (8005558 <HAL_TIM_Base_MspInit+0x34>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10b      	bne.n	800554e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <HAL_TIM_Base_MspInit+0x38>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4a08      	ldr	r2, [pc, #32]	@ (800555c <HAL_TIM_Base_MspInit+0x38>)
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	61d3      	str	r3, [r2, #28]
 8005542:	4b06      	ldr	r3, [pc, #24]	@ (800555c <HAL_TIM_Base_MspInit+0x38>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	40000400 	.word	0x40000400
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005568:	f107 0310 	add.w	r3, r7, #16
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <HAL_UART_MspInit+0x8c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d131      	bne.n	80055e4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005580:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 8005586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800558a:	6193      	str	r3, [r2, #24]
 800558c:	4b18      	ldr	r3, [pc, #96]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4a14      	ldr	r2, [pc, #80]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	6193      	str	r3, [r2, #24]
 80055a4:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <HAL_UART_MspInit+0x90>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ba:	2303      	movs	r3, #3
 80055bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055be:	f107 0310 	add.w	r3, r7, #16
 80055c2:	4619      	mov	r1, r3
 80055c4:	480b      	ldr	r0, [pc, #44]	@ (80055f4 <HAL_UART_MspInit+0x94>)
 80055c6:	f001 f985 	bl	80068d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d8:	f107 0310 	add.w	r3, r7, #16
 80055dc:	4619      	mov	r1, r3
 80055de:	4805      	ldr	r0, [pc, #20]	@ (80055f4 <HAL_UART_MspInit+0x94>)
 80055e0:	f001 f978 	bl	80068d4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80055e4:	bf00      	nop
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40013800 	.word	0x40013800
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40010800 	.word	0x40010800

080055f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <NMI_Handler+0x4>

08005600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <HardFault_Handler+0x4>

08005608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <MemManage_Handler+0x4>

08005610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <UsageFault_Handler+0x4>

08005620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005648:	f000 fa1e 	bl	8005a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800564c:	bf00      	nop
 800564e:	bd80      	pop	{r7, pc}

08005650 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005654:	4802      	ldr	r0, [pc, #8]	@ (8005660 <ADC1_2_IRQHandler+0x10>)
 8005656:	f000 fd1b 	bl	8006090 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000320 	.word	0x20000320

08005664 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005668:	4802      	ldr	r0, [pc, #8]	@ (8005674 <RTC_Alarm_IRQHandler+0x10>)
 800566a:	f003 fb8f 	bl	8008d8c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200003a4 	.word	0x200003a4

08005678 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
 800567c:	f000 fa16 	bl	8005aac <HAL_GetTick>
 8005680:	4603      	mov	r3, r0
 8005682:	4618      	mov	r0, r3
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800569a:	4b20      	ldr	r3, [pc, #128]	@ (800571c <Switches_Init+0x94>)
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <Switches_Init+0x94>)
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	6193      	str	r3, [r2, #24]
 80056a6:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <Switches_Init+0x94>)
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056b6:	2301      	movs	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80056ba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80056be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4816      	ldr	r0, [pc, #88]	@ (8005720 <Switches_Init+0x98>)
 80056c6:	f001 f905 	bl	80068d4 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e01d      	b.n	800570c <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 80056d0:	4a14      	ldr	r2, [pc, #80]	@ (8005724 <Switches_Init+0x9c>)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 80056da:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <Switches_Init+0xa0>)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 80056e4:	f7ff ffc8 	bl	8005678 <now_ms>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4910      	ldr	r1, [pc, #64]	@ (800572c <Switches_Init+0xa4>)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 80056f2:	4a0f      	ldr	r2, [pc, #60]	@ (8005730 <Switches_Init+0xa8>)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2100      	movs	r1, #0
 80056f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <Switches_Init+0xac>)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b03      	cmp	r3, #3
 8005710:	ddde      	ble.n	80056d0 <Switches_Init+0x48>
    }
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40021000 	.word	0x40021000
 8005720:	40010c00 	.word	0x40010c00
 8005724:	2000062c 	.word	0x2000062c
 8005728:	20000640 	.word	0x20000640
 800572c:	20000630 	.word	0x20000630
 8005730:	20000644 	.word	0x20000644
 8005734:	20000654 	.word	0x20000654

08005738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return 1;
 800573c:	2301      	movs	r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <_kill>:

int _kill(int pid, int sig)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005750:	f005 fd2a 	bl	800b1a8 <__errno>
 8005754:	4603      	mov	r3, r0
 8005756:	2216      	movs	r2, #22
 8005758:	601a      	str	r2, [r3, #0]
  return -1;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <_exit>:

void _exit (int status)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800576e:	f04f 31ff 	mov.w	r1, #4294967295
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ffe7 	bl	8005746 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <_exit+0x12>

0800577c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e00a      	b.n	80057a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800578e:	f3af 8000 	nop.w
 8005792:	4601      	mov	r1, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	60ba      	str	r2, [r7, #8]
 800579a:	b2ca      	uxtb	r2, r1
 800579c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	3301      	adds	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	dbf0      	blt.n	800578e <_read+0x12>
  }

  return len;
 80057ac:	687b      	ldr	r3, [r7, #4]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e009      	b.n	80057dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	60ba      	str	r2, [r7, #8]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	3301      	adds	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	dbf1      	blt.n	80057c8 <_write+0x12>
  }
  return len;
 80057e4:	687b      	ldr	r3, [r7, #4]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <_close>:

int _close(int file)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005814:	605a      	str	r2, [r3, #4]
  return 0;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <_isatty>:

int _isatty(int file)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
	...

08005850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005858:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <_sbrk+0x5c>)
 800585a:	4b15      	ldr	r3, [pc, #84]	@ (80058b0 <_sbrk+0x60>)
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005864:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <_sbrk+0x64>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <_sbrk+0x64>)
 800586e:	4a12      	ldr	r2, [pc, #72]	@ (80058b8 <_sbrk+0x68>)
 8005870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <_sbrk+0x64>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	429a      	cmp	r2, r3
 800587e:	d207      	bcs.n	8005890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005880:	f005 fc92 	bl	800b1a8 <__errno>
 8005884:	4603      	mov	r3, r0
 8005886:	220c      	movs	r2, #12
 8005888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	e009      	b.n	80058a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005890:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <_sbrk+0x64>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005896:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <_sbrk+0x64>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	4a05      	ldr	r2, [pc, #20]	@ (80058b4 <_sbrk+0x64>)
 80058a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20005000 	.word	0x20005000
 80058b0:	00000400 	.word	0x00000400
 80058b4:	20000658 	.word	0x20000658
 80058b8:	200007f8 	.word	0x200007f8

080058bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 80058cc:	2240      	movs	r2, #64	@ 0x40
 80058ce:	2100      	movs	r1, #0
 80058d0:	4807      	ldr	r0, [pc, #28]	@ (80058f0 <UART_Init+0x28>)
 80058d2:	f005 fbf1 	bl	800b0b8 <memset>
    rxIndex = 0;
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <UART_Init+0x2c>)
 80058d8:	2200      	movs	r2, #0
 80058da:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <UART_Init+0x30>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80058e2:	2201      	movs	r2, #1
 80058e4:	4905      	ldr	r1, [pc, #20]	@ (80058fc <UART_Init+0x34>)
 80058e6:	4806      	ldr	r0, [pc, #24]	@ (8005900 <UART_Init+0x38>)
 80058e8:	f004 fbb7 	bl	800a05a <HAL_UART_Receive_IT>
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000660 	.word	0x20000660
 80058f4:	200006a0 	.word	0x200006a0
 80058f8:	200006a2 	.word	0x200006a2
 80058fc:	2000065c 	.word	0x2000065c
 8005900:	20000458 	.word	0x20000458

08005904 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800590e:	6838      	ldr	r0, [r7, #0]
 8005910:	f7fa fc28 	bl	8000164 <strlen>
 8005914:	4603      	mov	r3, r0
 8005916:	b29a      	uxth	r2, r3
 8005918:	f04f 33ff 	mov.w	r3, #4294967295
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f004 fb10 	bl	8009f44 <HAL_UART_Transmit>
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8005936:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <UART_GetReceivedPacket+0x78>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02c      	beq.n	8005998 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800593e:	481a      	ldr	r0, [pc, #104]	@ (80059a8 <UART_GetReceivedPacket+0x7c>)
 8005940:	f7fa fc10 	bl	8000164 <strlen>
 8005944:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d219      	bcs.n	8005982 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	3b01      	subs	r3, #1
 8005952:	461a      	mov	r2, r3
 8005954:	4914      	ldr	r1, [pc, #80]	@ (80059a8 <UART_GetReceivedPacket+0x7c>)
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f005 fbc9 	bl	800b0ee <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005968:	2240      	movs	r2, #64	@ 0x40
 800596a:	2100      	movs	r1, #0
 800596c:	480e      	ldr	r0, [pc, #56]	@ (80059a8 <UART_GetReceivedPacket+0x7c>)
 800596e:	f005 fba3 	bl	800b0b8 <memset>
            rxIndex = 0;
 8005972:	4b0e      	ldr	r3, [pc, #56]	@ (80059ac <UART_GetReceivedPacket+0x80>)
 8005974:	2200      	movs	r2, #0
 8005976:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <UART_GetReceivedPacket+0x78>)
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
            return true;
 800597e:	2301      	movs	r3, #1
 8005980:	e00b      	b.n	800599a <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005982:	2240      	movs	r2, #64	@ 0x40
 8005984:	2100      	movs	r1, #0
 8005986:	4808      	ldr	r0, [pc, #32]	@ (80059a8 <UART_GetReceivedPacket+0x7c>)
 8005988:	f005 fb96 	bl	800b0b8 <memset>
            rxIndex = 0;
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <UART_GetReceivedPacket+0x80>)
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005992:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <UART_GetReceivedPacket+0x78>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200006a2 	.word	0x200006a2
 80059a8:	20000660 	.word	0x20000660
 80059ac:	200006a0 	.word	0x200006a0

080059b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80059b0:	f7ff ff84 	bl	80058bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059b4:	480b      	ldr	r0, [pc, #44]	@ (80059e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80059b6:	490c      	ldr	r1, [pc, #48]	@ (80059e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80059b8:	4a0c      	ldr	r2, [pc, #48]	@ (80059ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80059ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059bc:	e002      	b.n	80059c4 <LoopCopyDataInit>

080059be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059c2:	3304      	adds	r3, #4

080059c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059c8:	d3f9      	bcc.n	80059be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ca:	4a09      	ldr	r2, [pc, #36]	@ (80059f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80059cc:	4c09      	ldr	r4, [pc, #36]	@ (80059f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059d0:	e001      	b.n	80059d6 <LoopFillZerobss>

080059d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059d4:	3204      	adds	r2, #4

080059d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059d8:	d3fb      	bcc.n	80059d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059da:	f005 fbeb 	bl	800b1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059de:	f7fc fccd 	bl	800237c <main>
  bx lr
 80059e2:	4770      	bx	lr
  ldr r0, =_sdata
 80059e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059e8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80059ec:	0800da5c 	.word	0x0800da5c
  ldr r2, =_sbss
 80059f0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80059f4:	200007f4 	.word	0x200007f4

080059f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059f8:	e7fe      	b.n	80059f8 <CAN1_RX1_IRQHandler>
	...

080059fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a00:	4b08      	ldr	r3, [pc, #32]	@ (8005a24 <HAL_Init+0x28>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a07      	ldr	r2, [pc, #28]	@ (8005a24 <HAL_Init+0x28>)
 8005a06:	f043 0310 	orr.w	r3, r3, #16
 8005a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f000 ff1f 	bl	8006850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a12:	2000      	movs	r0, #0
 8005a14:	f000 f808 	bl	8005a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a18:	f7ff fc74 	bl	8005304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40022000 	.word	0x40022000

08005a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a30:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <HAL_InitTick+0x54>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b12      	ldr	r3, [pc, #72]	@ (8005a80 <HAL_InitTick+0x58>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 ff37 	bl	80068ba <HAL_SYSTICK_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e00e      	b.n	8005a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d80a      	bhi.n	8005a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	f000 feff 	bl	8006866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a68:	4a06      	ldr	r2, [pc, #24]	@ (8005a84 <HAL_InitTick+0x5c>)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	2000005c 	.word	0x2000005c
 8005a80:	20000064 	.word	0x20000064
 8005a84:	20000060 	.word	0x20000060

08005a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <HAL_IncTick+0x1c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <HAL_IncTick+0x20>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	4a03      	ldr	r2, [pc, #12]	@ (8005aa8 <HAL_IncTick+0x20>)
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr
 8005aa4:	20000064 	.word	0x20000064
 8005aa8:	200006a4 	.word	0x200006a4

08005aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return uwTick;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	@ (8005abc <HAL_GetTick+0x10>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr
 8005abc:	200006a4 	.word	0x200006a4

08005ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_GetTick>
 8005acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d005      	beq.n	8005ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ada:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <HAL_Delay+0x44>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ae6:	bf00      	nop
 8005ae8:	f7ff ffe0 	bl	8005aac <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d8f7      	bhi.n	8005ae8 <HAL_Delay+0x28>
  {
  }
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000064 	.word	0x20000064

08005b08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0be      	b.n	8005ca8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fc0e 	bl	8005368 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fcb9 	bl	80064c4 <ADC_ConversionStop_Disable>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 8099 	bne.w	8005c96 <HAL_ADC_Init+0x18e>
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 8095 	bne.w	8005c96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	f043 0202 	orr.w	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005b88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7b1b      	ldrb	r3, [r3, #12]
 8005b8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005b90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba0:	d003      	beq.n	8005baa <HAL_ADC_Init+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_ADC_Init+0xa8>
 8005baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bae:	e000      	b.n	8005bb2 <HAL_ADC_Init+0xaa>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d119      	bne.n	8005bf4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	035a      	lsls	r2, r3, #13
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e00b      	b.n	8005bf4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	4b28      	ldr	r3, [pc, #160]	@ (8005cb0 <HAL_ADC_Init+0x1a8>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c24:	d003      	beq.n	8005c2e <HAL_ADC_Init+0x126>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d104      	bne.n	8005c38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	051b      	lsls	r3, r3, #20
 8005c36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <HAL_ADC_Init+0x1ac>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d10b      	bne.n	8005c74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005c72:	e018      	b.n	8005ca6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f023 0312 	bic.w	r3, r3, #18
 8005c7c:	f043 0210 	orr.w	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005c94:	e007      	b.n	8005ca6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f043 0210 	orr.w	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	ffe1f7fd 	.word	0xffe1f7fd
 8005cb4:	ff1f0efe 	.word	0xff1f0efe

08005cb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_ADC_Start+0x1a>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e098      	b.n	8005e04 <HAL_ADC_Start+0x14c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb98 	bl	8006410 <ADC_Enable>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 8087 	bne.w	8005dfa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a41      	ldr	r2, [pc, #260]	@ (8005e0c <HAL_ADC_Start+0x154>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d105      	bne.n	8005d16 <HAL_ADC_Start+0x5e>
 8005d0a:	4b41      	ldr	r3, [pc, #260]	@ (8005e10 <HAL_ADC_Start+0x158>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d115      	bne.n	8005d42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d026      	beq.n	8005d7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005d38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d40:	e01d      	b.n	8005d7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <HAL_ADC_Start+0x158>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_ADC_Start+0xaa>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e0c <HAL_ADC_Start+0x154>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <HAL_ADC_Start+0xc6>
 8005d62:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <HAL_ADC_Start+0x158>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005d76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d006      	beq.n	8005d98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	f023 0206 	bic.w	r2, r3, #6
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d96:	e002      	b.n	8005d9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0202 	mvn.w	r2, #2
 8005dae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005dba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005dbe:	d113      	bne.n	8005de8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005dc4:	4a11      	ldr	r2, [pc, #68]	@ (8005e0c <HAL_ADC_Start+0x154>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d105      	bne.n	8005dd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005dca:	4b11      	ldr	r3, [pc, #68]	@ (8005e10 <HAL_ADC_Start+0x158>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	e00c      	b.n	8005e02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	e003      	b.n	8005e02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40012800 	.word	0x40012800
 8005e10:	40012400 	.word	0x40012400

08005e14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_ADC_Stop+0x1a>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e01a      	b.n	8005e64 <HAL_ADC_Stop+0x50>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fb44 	bl	80064c4 <ADC_ConversionStop_Disable>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005e82:	f7ff fe13 	bl	8005aac <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e0d3      	b.n	8006056 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d131      	bne.n	8005f20 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d12a      	bne.n	8005f20 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005eca:	e021      	b.n	8005f10 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d01d      	beq.n	8005f10 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_ADC_PollForConversion+0x7e>
 8005eda:	f7ff fde7 	bl	8005aac <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d212      	bcs.n	8005f10 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f043 0204 	orr.w	r2, r3, #4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e0a2      	b.n	8006056 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0d6      	beq.n	8005ecc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f1e:	e070      	b.n	8006002 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005f20:	4b4f      	ldr	r3, [pc, #316]	@ (8006060 <HAL_ADC_PollForConversion+0x1f4>)
 8005f22:	681c      	ldr	r4, [r3, #0]
 8005f24:	2002      	movs	r0, #2
 8005f26:	f002 fe7b 	bl	8008c20 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6919      	ldr	r1, [r3, #16]
 8005f36:	4b4b      	ldr	r3, [pc, #300]	@ (8006064 <HAL_ADC_PollForConversion+0x1f8>)
 8005f38:	400b      	ands	r3, r1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d118      	bne.n	8005f70 <HAL_ADC_PollForConversion+0x104>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68d9      	ldr	r1, [r3, #12]
 8005f44:	4b48      	ldr	r3, [pc, #288]	@ (8006068 <HAL_ADC_PollForConversion+0x1fc>)
 8005f46:	400b      	ands	r3, r1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d111      	bne.n	8005f70 <HAL_ADC_PollForConversion+0x104>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6919      	ldr	r1, [r3, #16]
 8005f52:	4b46      	ldr	r3, [pc, #280]	@ (800606c <HAL_ADC_PollForConversion+0x200>)
 8005f54:	400b      	ands	r3, r1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d108      	bne.n	8005f6c <HAL_ADC_PollForConversion+0x100>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68d9      	ldr	r1, [r3, #12]
 8005f60:	4b43      	ldr	r3, [pc, #268]	@ (8006070 <HAL_ADC_PollForConversion+0x204>)
 8005f62:	400b      	ands	r3, r1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_ADC_PollForConversion+0x100>
 8005f68:	2314      	movs	r3, #20
 8005f6a:	e020      	b.n	8005fae <HAL_ADC_PollForConversion+0x142>
 8005f6c:	2329      	movs	r3, #41	@ 0x29
 8005f6e:	e01e      	b.n	8005fae <HAL_ADC_PollForConversion+0x142>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6919      	ldr	r1, [r3, #16]
 8005f76:	4b3d      	ldr	r3, [pc, #244]	@ (800606c <HAL_ADC_PollForConversion+0x200>)
 8005f78:	400b      	ands	r3, r1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_ADC_PollForConversion+0x120>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68d9      	ldr	r1, [r3, #12]
 8005f84:	4b3a      	ldr	r3, [pc, #232]	@ (8006070 <HAL_ADC_PollForConversion+0x204>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_ADC_PollForConversion+0x13c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	4b38      	ldr	r3, [pc, #224]	@ (8006074 <HAL_ADC_PollForConversion+0x208>)
 8005f94:	400b      	ands	r3, r1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <HAL_ADC_PollForConversion+0x140>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	4b34      	ldr	r3, [pc, #208]	@ (8006074 <HAL_ADC_PollForConversion+0x208>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_ADC_PollForConversion+0x140>
 8005fa8:	2354      	movs	r3, #84	@ 0x54
 8005faa:	e000      	b.n	8005fae <HAL_ADC_PollForConversion+0x142>
 8005fac:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005fb4:	e021      	b.n	8005ffa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d01a      	beq.n	8005ff4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <HAL_ADC_PollForConversion+0x168>
 8005fc4:	f7ff fd72 	bl	8005aac <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d20f      	bcs.n	8005ff4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d90b      	bls.n	8005ff4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	f043 0204 	orr.w	r2, r3, #4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e030      	b.n	8006056 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d8d9      	bhi.n	8005fb6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0212 	mvn.w	r2, #18
 800600a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006022:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006026:	d115      	bne.n	8006054 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800602c:	2b00      	cmp	r3, #0
 800602e:	d111      	bne.n	8006054 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f043 0201 	orr.w	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	2000005c 	.word	0x2000005c
 8006064:	24924924 	.word	0x24924924
 8006068:	00924924 	.word	0x00924924
 800606c:	12492492 	.word	0x12492492
 8006070:	00492492 	.word	0x00492492
 8006074:	00249249 	.word	0x00249249

08006078 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03e      	beq.n	8006130 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d039      	beq.n	8006130 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80060de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80060e2:	d11d      	bne.n	8006120 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d119      	bne.n	8006120 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0220 	bic.w	r2, r2, #32
 80060fa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fc f8d5 	bl	80022d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0212 	mvn.w	r2, #18
 800612e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04d      	beq.n	80061d6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d048      	beq.n	80061d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006166:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800616a:	d012      	beq.n	8006192 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006176:	2b00      	cmp	r3, #0
 8006178:	d125      	bne.n	80061c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006184:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006188:	d11d      	bne.n	80061c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800618e:	2b00      	cmp	r3, #0
 8006190:	d119      	bne.n	80061c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa6c 	bl	80066a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 020c 	mvn.w	r2, #12
 80061d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d012      	beq.n	8006206 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f809 	bl	800620e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0201 	mvn.w	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x20>
 800623c:	2302      	movs	r3, #2
 800623e:	e0dc      	b.n	80063fa <HAL_ADC_ConfigChannel+0x1da>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b06      	cmp	r3, #6
 800624e:	d81c      	bhi.n	800628a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	3b05      	subs	r3, #5
 8006262:	221f      	movs	r2, #31
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	4019      	ands	r1, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	3b05      	subs	r3, #5
 800627c:	fa00 f203 	lsl.w	r2, r0, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	635a      	str	r2, [r3, #52]	@ 0x34
 8006288:	e03c      	b.n	8006304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d81c      	bhi.n	80062cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	3b23      	subs	r3, #35	@ 0x23
 80062a4:	221f      	movs	r2, #31
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43db      	mvns	r3, r3
 80062ac:	4019      	ands	r1, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	3b23      	subs	r3, #35	@ 0x23
 80062be:	fa00 f203 	lsl.w	r2, r0, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ca:	e01b      	b.n	8006304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	3b41      	subs	r3, #65	@ 0x41
 80062de:	221f      	movs	r2, #31
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	4019      	ands	r1, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	3b41      	subs	r3, #65	@ 0x41
 80062f8:	fa00 f203 	lsl.w	r2, r0, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b09      	cmp	r3, #9
 800630a:	d91c      	bls.n	8006346 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	3b1e      	subs	r3, #30
 800631e:	2207      	movs	r2, #7
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	43db      	mvns	r3, r3
 8006326:	4019      	ands	r1, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6898      	ldr	r0, [r3, #8]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	3b1e      	subs	r3, #30
 8006338:	fa00 f203 	lsl.w	r2, r0, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	e019      	b.n	800637a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6919      	ldr	r1, [r3, #16]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	4413      	add	r3, r2
 8006356:	2207      	movs	r2, #7
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	4019      	ands	r1, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6898      	ldr	r0, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4413      	add	r3, r2
 800636e:	fa00 f203 	lsl.w	r2, r0, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b10      	cmp	r3, #16
 8006380:	d003      	beq.n	800638a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006386:	2b11      	cmp	r3, #17
 8006388:	d132      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1d      	ldr	r2, [pc, #116]	@ (8006404 <HAL_ADC_ConfigChannel+0x1e4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d125      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d126      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80063b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d11a      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063ba:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <HAL_ADC_ConfigChannel+0x1e8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a13      	ldr	r2, [pc, #76]	@ (800640c <HAL_ADC_ConfigChannel+0x1ec>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	0c9a      	lsrs	r2, r3, #18
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80063d0:	e002      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f9      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x1b2>
 80063de:	e007      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	40012400 	.word	0x40012400
 8006408:	2000005c 	.word	0x2000005c
 800640c:	431bde83 	.word	0x431bde83

08006410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d040      	beq.n	80064b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800643e:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <ADC_Enable+0xac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <ADC_Enable+0xb0>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	0c9b      	lsrs	r3, r3, #18
 800644a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800644c:	e002      	b.n	8006454 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3b01      	subs	r3, #1
 8006452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f9      	bne.n	800644e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800645a:	f7ff fb27 	bl	8005aac <HAL_GetTick>
 800645e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006460:	e01f      	b.n	80064a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006462:	f7ff fb23 	bl	8005aac <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d918      	bls.n	80064a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d011      	beq.n	80064a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	f043 0210 	orr.w	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e007      	b.n	80064b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d1d8      	bne.n	8006462 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2000005c 	.word	0x2000005c
 80064c0:	431bde83 	.word	0x431bde83

080064c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d12e      	bne.n	800653c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80064ee:	f7ff fadd 	bl	8005aac <HAL_GetTick>
 80064f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80064f4:	e01b      	b.n	800652e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064f6:	f7ff fad9 	bl	8005aac <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d914      	bls.n	800652e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10d      	bne.n	800652e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	f043 0210 	orr.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e007      	b.n	800653e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d0dc      	beq.n	80064f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_ADCEx_Calibration_Start+0x1e>
 8006562:	2302      	movs	r3, #2
 8006564:	e097      	b.n	8006696 <HAL_ADCEx_Calibration_Start+0x14e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ffa8 	bl	80064c4 <ADC_ConversionStop_Disable>
 8006574:	4603      	mov	r3, r0
 8006576:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff49 	bl	8006410 <ADC_Enable>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 8081 	bne.w	800668c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006592:	f023 0302 	bic.w	r3, r3, #2
 8006596:	f043 0202 	orr.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800659e:	4b40      	ldr	r3, [pc, #256]	@ (80066a0 <HAL_ADCEx_Calibration_Start+0x158>)
 80065a0:	681c      	ldr	r4, [r3, #0]
 80065a2:	2002      	movs	r0, #2
 80065a4:	f002 fb3c 	bl	8008c20 <HAL_RCCEx_GetPeriphCLKFreq>
 80065a8:	4603      	mov	r3, r0
 80065aa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80065ae:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80065b0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80065b2:	e002      	b.n	80065ba <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f9      	bne.n	80065b4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80065d0:	f7ff fa6c 	bl	8005aac <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80065d6:	e01b      	b.n	8006610 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80065d8:	f7ff fa68 	bl	8005aac <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b0a      	cmp	r3, #10
 80065e4:	d914      	bls.n	8006610 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f023 0312 	bic.w	r3, r3, #18
 80065fc:	f043 0210 	orr.w	r2, r3, #16
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e042      	b.n	8006696 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1dc      	bne.n	80065d8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0204 	orr.w	r2, r2, #4
 800662c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800662e:	f7ff fa3d 	bl	8005aac <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006634:	e01b      	b.n	800666e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006636:	f7ff fa39 	bl	8005aac <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b0a      	cmp	r3, #10
 8006642:	d914      	bls.n	800666e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f023 0312 	bic.w	r3, r3, #18
 800665a:	f043 0210 	orr.w	r2, r3, #16
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e013      	b.n	8006696 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1dc      	bne.n	8006636 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f023 0303 	bic.w	r3, r3, #3
 8006684:	f043 0201 	orr.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
}
 8006696:	4618      	mov	r0, r3
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd90      	pop	{r4, r7, pc}
 800669e:	bf00      	nop
 80066a0:	2000005c 	.word	0x2000005c

080066a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr
	...

080066b8 <__NVIC_SetPriorityGrouping>:
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c8:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066d4:	4013      	ands	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066ea:	4a04      	ldr	r2, [pc, #16]	@ (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	60d3      	str	r3, [r2, #12]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <__NVIC_GetPriorityGrouping>:
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006704:	4b04      	ldr	r3, [pc, #16]	@ (8006718 <__NVIC_GetPriorityGrouping+0x18>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	f003 0307 	and.w	r3, r3, #7
}
 800670e:	4618      	mov	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	e000ed00 	.word	0xe000ed00

0800671c <__NVIC_EnableIRQ>:
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	db0b      	blt.n	8006746 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	f003 021f 	and.w	r2, r3, #31
 8006734:	4906      	ldr	r1, [pc, #24]	@ (8006750 <__NVIC_EnableIRQ+0x34>)
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2001      	movs	r0, #1
 800673e:	fa00 f202 	lsl.w	r2, r0, r2
 8006742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	e000e100 	.word	0xe000e100

08006754 <__NVIC_SetPriority>:
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	6039      	str	r1, [r7, #0]
 800675e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006764:	2b00      	cmp	r3, #0
 8006766:	db0a      	blt.n	800677e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	490c      	ldr	r1, [pc, #48]	@ (80067a0 <__NVIC_SetPriority+0x4c>)
 800676e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	440b      	add	r3, r1
 8006778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800677c:	e00a      	b.n	8006794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4908      	ldr	r1, [pc, #32]	@ (80067a4 <__NVIC_SetPriority+0x50>)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	3b04      	subs	r3, #4
 800678c:	0112      	lsls	r2, r2, #4
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	440b      	add	r3, r1
 8006792:	761a      	strb	r2, [r3, #24]
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000e100 	.word	0xe000e100
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <NVIC_EncodePriority>:
{
 80067a8:	b480      	push	{r7}
 80067aa:	b089      	sub	sp, #36	@ 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f1c3 0307 	rsb	r3, r3, #7
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	bf28      	it	cs
 80067c6:	2304      	movcs	r3, #4
 80067c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3304      	adds	r3, #4
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d902      	bls.n	80067d8 <NVIC_EncodePriority+0x30>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3b03      	subs	r3, #3
 80067d6:	e000      	b.n	80067da <NVIC_EncodePriority+0x32>
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43da      	mvns	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	401a      	ands	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	43d9      	mvns	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006800:	4313      	orrs	r3, r2
}
 8006802:	4618      	mov	r0, r3
 8006804:	3724      	adds	r7, #36	@ 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3b01      	subs	r3, #1
 8006818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681c:	d301      	bcc.n	8006822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800681e:	2301      	movs	r3, #1
 8006820:	e00f      	b.n	8006842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006822:	4a0a      	ldr	r2, [pc, #40]	@ (800684c <SysTick_Config+0x40>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3b01      	subs	r3, #1
 8006828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800682a:	210f      	movs	r1, #15
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	f7ff ff90 	bl	8006754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <SysTick_Config+0x40>)
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800683a:	4b04      	ldr	r3, [pc, #16]	@ (800684c <SysTick_Config+0x40>)
 800683c:	2207      	movs	r2, #7
 800683e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000e010 	.word	0xe000e010

08006850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff2d 	bl	80066b8 <__NVIC_SetPriorityGrouping>
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	4603      	mov	r3, r0
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006878:	f7ff ff42 	bl	8006700 <__NVIC_GetPriorityGrouping>
 800687c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	6978      	ldr	r0, [r7, #20]
 8006884:	f7ff ff90 	bl	80067a8 <NVIC_EncodePriority>
 8006888:	4602      	mov	r2, r0
 800688a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff ff5f 	bl	8006754 <__NVIC_SetPriority>
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff35 	bl	800671c <__NVIC_EnableIRQ>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ffa2 	bl	800680c <SysTick_Config>
 80068c8:	4603      	mov	r3, r0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b08b      	sub	sp, #44	@ 0x2c
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068e6:	e169      	b.n	8006bbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80068e8:	2201      	movs	r2, #1
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	429a      	cmp	r2, r3
 8006902:	f040 8158 	bne.w	8006bb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4a9a      	ldr	r2, [pc, #616]	@ (8006b74 <HAL_GPIO_Init+0x2a0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d05e      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
 8006910:	4a98      	ldr	r2, [pc, #608]	@ (8006b74 <HAL_GPIO_Init+0x2a0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d875      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 8006916:	4a98      	ldr	r2, [pc, #608]	@ (8006b78 <HAL_GPIO_Init+0x2a4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d058      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
 800691c:	4a96      	ldr	r2, [pc, #600]	@ (8006b78 <HAL_GPIO_Init+0x2a4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d86f      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 8006922:	4a96      	ldr	r2, [pc, #600]	@ (8006b7c <HAL_GPIO_Init+0x2a8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d052      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
 8006928:	4a94      	ldr	r2, [pc, #592]	@ (8006b7c <HAL_GPIO_Init+0x2a8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d869      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 800692e:	4a94      	ldr	r2, [pc, #592]	@ (8006b80 <HAL_GPIO_Init+0x2ac>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d04c      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
 8006934:	4a92      	ldr	r2, [pc, #584]	@ (8006b80 <HAL_GPIO_Init+0x2ac>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d863      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 800693a:	4a92      	ldr	r2, [pc, #584]	@ (8006b84 <HAL_GPIO_Init+0x2b0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d046      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
 8006940:	4a90      	ldr	r2, [pc, #576]	@ (8006b84 <HAL_GPIO_Init+0x2b0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d85d      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 8006946:	2b12      	cmp	r3, #18
 8006948:	d82a      	bhi.n	80069a0 <HAL_GPIO_Init+0xcc>
 800694a:	2b12      	cmp	r3, #18
 800694c:	d859      	bhi.n	8006a02 <HAL_GPIO_Init+0x12e>
 800694e:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <HAL_GPIO_Init+0x80>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	080069cf 	.word	0x080069cf
 8006958:	080069a9 	.word	0x080069a9
 800695c:	080069bb 	.word	0x080069bb
 8006960:	080069fd 	.word	0x080069fd
 8006964:	08006a03 	.word	0x08006a03
 8006968:	08006a03 	.word	0x08006a03
 800696c:	08006a03 	.word	0x08006a03
 8006970:	08006a03 	.word	0x08006a03
 8006974:	08006a03 	.word	0x08006a03
 8006978:	08006a03 	.word	0x08006a03
 800697c:	08006a03 	.word	0x08006a03
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a03 	.word	0x08006a03
 8006988:	08006a03 	.word	0x08006a03
 800698c:	08006a03 	.word	0x08006a03
 8006990:	08006a03 	.word	0x08006a03
 8006994:	08006a03 	.word	0x08006a03
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	4a79      	ldr	r2, [pc, #484]	@ (8006b88 <HAL_GPIO_Init+0x2b4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80069a6:	e02c      	b.n	8006a02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	623b      	str	r3, [r7, #32]
          break;
 80069ae:	e029      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	623b      	str	r3, [r7, #32]
          break;
 80069b8:	e024      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	3308      	adds	r3, #8
 80069c0:	623b      	str	r3, [r7, #32]
          break;
 80069c2:	e01f      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	330c      	adds	r3, #12
 80069ca:	623b      	str	r3, [r7, #32]
          break;
 80069cc:	e01a      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80069d6:	2304      	movs	r3, #4
 80069d8:	623b      	str	r3, [r7, #32]
          break;
 80069da:	e013      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069e4:	2308      	movs	r3, #8
 80069e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	611a      	str	r2, [r3, #16]
          break;
 80069ee:	e009      	b.n	8006a04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069f0:	2308      	movs	r3, #8
 80069f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	615a      	str	r2, [r3, #20]
          break;
 80069fa:	e003      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80069fc:	2300      	movs	r3, #0
 80069fe:	623b      	str	r3, [r7, #32]
          break;
 8006a00:	e000      	b.n	8006a04 <HAL_GPIO_Init+0x130>
          break;
 8006a02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2bff      	cmp	r3, #255	@ 0xff
 8006a08:	d801      	bhi.n	8006a0e <HAL_GPIO_Init+0x13a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	e001      	b.n	8006a12 <HAL_GPIO_Init+0x13e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2bff      	cmp	r3, #255	@ 0xff
 8006a18:	d802      	bhi.n	8006a20 <HAL_GPIO_Init+0x14c>
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	e002      	b.n	8006a26 <HAL_GPIO_Init+0x152>
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	3b08      	subs	r3, #8
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	210f      	movs	r1, #15
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	6a39      	ldr	r1, [r7, #32]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	431a      	orrs	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80b1 	beq.w	8006bb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006a54:	4b4d      	ldr	r3, [pc, #308]	@ (8006b8c <HAL_GPIO_Init+0x2b8>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4a4c      	ldr	r2, [pc, #304]	@ (8006b8c <HAL_GPIO_Init+0x2b8>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6193      	str	r3, [r2, #24]
 8006a60:	4b4a      	ldr	r3, [pc, #296]	@ (8006b8c <HAL_GPIO_Init+0x2b8>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a6c:	4a48      	ldr	r2, [pc, #288]	@ (8006b90 <HAL_GPIO_Init+0x2bc>)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	089b      	lsrs	r3, r3, #2
 8006a72:	3302      	adds	r3, #2
 8006a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	220f      	movs	r2, #15
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a40      	ldr	r2, [pc, #256]	@ (8006b94 <HAL_GPIO_Init+0x2c0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_GPIO_Init+0x1ec>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b98 <HAL_GPIO_Init+0x2c4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00d      	beq.n	8006abc <HAL_GPIO_Init+0x1e8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8006b9c <HAL_GPIO_Init+0x2c8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <HAL_GPIO_Init+0x1e4>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba0 <HAL_GPIO_Init+0x2cc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_GPIO_Init+0x1e0>
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e006      	b.n	8006ac2 <HAL_GPIO_Init+0x1ee>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	e004      	b.n	8006ac2 <HAL_GPIO_Init+0x1ee>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e002      	b.n	8006ac2 <HAL_GPIO_Init+0x1ee>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <HAL_GPIO_Init+0x1ee>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac4:	f002 0203 	and.w	r2, r2, #3
 8006ac8:	0092      	lsls	r2, r2, #2
 8006aca:	4093      	lsls	r3, r2
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ad2:	492f      	ldr	r1, [pc, #188]	@ (8006b90 <HAL_GPIO_Init+0x2bc>)
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	3302      	adds	r3, #2
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d006      	beq.n	8006afa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006aec:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	492c      	ldr	r1, [pc, #176]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]
 8006af8:	e006      	b.n	8006b08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006afa:	4b2a      	ldr	r3, [pc, #168]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	4928      	ldr	r1, [pc, #160]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b14:	4b23      	ldr	r3, [pc, #140]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	4922      	ldr	r1, [pc, #136]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60cb      	str	r3, [r1, #12]
 8006b20:	e006      	b.n	8006b30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b22:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	491e      	ldr	r1, [pc, #120]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	4918      	ldr	r1, [pc, #96]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	e006      	b.n	8006b58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006b4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	4914      	ldr	r1, [pc, #80]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d021      	beq.n	8006ba8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006b64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	490e      	ldr	r1, [pc, #56]	@ (8006ba4 <HAL_GPIO_Init+0x2d0>)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]
 8006b70:	e021      	b.n	8006bb6 <HAL_GPIO_Init+0x2e2>
 8006b72:	bf00      	nop
 8006b74:	10320000 	.word	0x10320000
 8006b78:	10310000 	.word	0x10310000
 8006b7c:	10220000 	.word	0x10220000
 8006b80:	10210000 	.word	0x10210000
 8006b84:	10120000 	.word	0x10120000
 8006b88:	10110000 	.word	0x10110000
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40010800 	.word	0x40010800
 8006b98:	40010c00 	.word	0x40010c00
 8006b9c:	40011000 	.word	0x40011000
 8006ba0:	40011400 	.word	0x40011400
 8006ba4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_GPIO_Init+0x304>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	4909      	ldr	r1, [pc, #36]	@ (8006bd8 <HAL_GPIO_Init+0x304>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	3301      	adds	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f47f ae8e 	bne.w	80068e8 <HAL_GPIO_Init+0x14>
  }
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	372c      	adds	r7, #44	@ 0x2c
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr
 8006bd8:	40010400 	.word	0x40010400

08006bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	887b      	ldrh	r3, [r7, #2]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e001      	b.n	8006bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	807b      	strh	r3, [r7, #2]
 8006c16:	4613      	mov	r3, r2
 8006c18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c1a:	787b      	ldrb	r3, [r7, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c20:	887a      	ldrh	r2, [r7, #2]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006c26:	e003      	b.n	8006c30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	041a      	lsls	r2, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	611a      	str	r2, [r3, #16]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c4c:	887a      	ldrh	r2, [r7, #2]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4013      	ands	r3, r2
 8006c52:	041a      	lsls	r2, r3, #16
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	43d9      	mvns	r1, r3
 8006c58:	887b      	ldrh	r3, [r7, #2]
 8006c5a:	400b      	ands	r3, r1
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	611a      	str	r2, [r3, #16]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e12b      	b.n	8006ed6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fe fbac 	bl	80053f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2224      	movs	r2, #36	@ 0x24
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f001 feaa 	bl	8008a28 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4a81      	ldr	r2, [pc, #516]	@ (8006ee0 <HAL_I2C_Init+0x274>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d807      	bhi.n	8006cf0 <HAL_I2C_Init+0x84>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a80      	ldr	r2, [pc, #512]	@ (8006ee4 <HAL_I2C_Init+0x278>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bf94      	ite	ls
 8006ce8:	2301      	movls	r3, #1
 8006cea:	2300      	movhi	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e006      	b.n	8006cfe <HAL_I2C_Init+0x92>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a7d      	ldr	r2, [pc, #500]	@ (8006ee8 <HAL_I2C_Init+0x27c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bf94      	ite	ls
 8006cf8:	2301      	movls	r3, #1
 8006cfa:	2300      	movhi	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0e7      	b.n	8006ed6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a78      	ldr	r2, [pc, #480]	@ (8006eec <HAL_I2C_Init+0x280>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	0c9b      	lsrs	r3, r3, #18
 8006d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4a6a      	ldr	r2, [pc, #424]	@ (8006ee0 <HAL_I2C_Init+0x274>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d802      	bhi.n	8006d40 <HAL_I2C_Init+0xd4>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	e009      	b.n	8006d54 <HAL_I2C_Init+0xe8>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	4a69      	ldr	r2, [pc, #420]	@ (8006ef0 <HAL_I2C_Init+0x284>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	3301      	adds	r3, #1
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006d66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	495c      	ldr	r1, [pc, #368]	@ (8006ee0 <HAL_I2C_Init+0x274>)
 8006d70:	428b      	cmp	r3, r1
 8006d72:	d819      	bhi.n	8006da8 <HAL_I2C_Init+0x13c>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1e59      	subs	r1, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d88:	400b      	ands	r3, r1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_I2C_Init+0x138>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1e59      	subs	r1, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006da2:	e051      	b.n	8006e48 <HAL_I2C_Init+0x1dc>
 8006da4:	2304      	movs	r3, #4
 8006da6:	e04f      	b.n	8006e48 <HAL_I2C_Init+0x1dc>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d111      	bne.n	8006dd4 <HAL_I2C_Init+0x168>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1e58      	subs	r0, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	440b      	add	r3, r1
 8006dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf0c      	ite	eq
 8006dcc:	2301      	moveq	r3, #1
 8006dce:	2300      	movne	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	e012      	b.n	8006dfa <HAL_I2C_Init+0x18e>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1e58      	subs	r0, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6859      	ldr	r1, [r3, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	0099      	lsls	r1, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dea:	3301      	adds	r3, #1
 8006dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Init+0x196>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e022      	b.n	8006e48 <HAL_I2C_Init+0x1dc>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10e      	bne.n	8006e28 <HAL_I2C_Init+0x1bc>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1e58      	subs	r0, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	440b      	add	r3, r1
 8006e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e26:	e00f      	b.n	8006e48 <HAL_I2C_Init+0x1dc>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1e58      	subs	r0, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	0099      	lsls	r1, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e3e:	3301      	adds	r3, #1
 8006e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	6809      	ldr	r1, [r1, #0]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69da      	ldr	r2, [r3, #28]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6911      	ldr	r1, [r2, #16]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	4311      	orrs	r1, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695a      	ldr	r2, [r3, #20]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	000186a0 	.word	0x000186a0
 8006ee4:	001e847f 	.word	0x001e847f
 8006ee8:	003d08ff 	.word	0x003d08ff
 8006eec:	431bde83 	.word	0x431bde83
 8006ef0:	10624dd3 	.word	0x10624dd3

08006ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	461a      	mov	r2, r3
 8006f00:	460b      	mov	r3, r1
 8006f02:	817b      	strh	r3, [r7, #10]
 8006f04:	4613      	mov	r3, r2
 8006f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f08:	f7fe fdd0 	bl	8005aac <HAL_GetTick>
 8006f0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	f040 80e0 	bne.w	80070dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2319      	movs	r3, #25
 8006f22:	2201      	movs	r2, #1
 8006f24:	4970      	ldr	r1, [pc, #448]	@ (80070e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 ff7e 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e0d3      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2C_Master_Transmit+0x50>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e0cc      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d007      	beq.n	8006f6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2221      	movs	r2, #33	@ 0x21
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2210      	movs	r2, #16
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	893a      	ldrh	r2, [r7, #8]
 8006f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4a50      	ldr	r2, [pc, #320]	@ (80070ec <HAL_I2C_Master_Transmit+0x1f8>)
 8006faa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006fac:	8979      	ldrh	r1, [r7, #10]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fd38 	bl	8007a28 <I2C_MasterRequestWrite>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e08d      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006fd8:	e066      	b.n	80070a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	6a39      	ldr	r1, [r7, #32]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f001 f83c 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00d      	beq.n	8007006 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d107      	bne.n	8007002 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e06b      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b04      	cmp	r3, #4
 8007042:	d11b      	bne.n	800707c <HAL_I2C_Master_Transmit+0x188>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	d017      	beq.n	800707c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	6a39      	ldr	r1, [r7, #32]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 f833 	bl	80080ec <I2C_WaitOnBTFFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00d      	beq.n	80070a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	2b04      	cmp	r3, #4
 8007092:	d107      	bne.n	80070a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e01a      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d194      	bne.n	8006fda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	00100002 	.word	0x00100002
 80070ec:	ffff0000 	.word	0xffff0000

080070f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	817b      	strh	r3, [r7, #10]
 8007102:	460b      	mov	r3, r1
 8007104:	813b      	strh	r3, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800710a:	f7fe fccf 	bl	8005aac <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	f040 80d9 	bne.w	80072d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2319      	movs	r3, #25
 8007124:	2201      	movs	r2, #1
 8007126:	496d      	ldr	r1, [pc, #436]	@ (80072dc <HAL_I2C_Mem_Write+0x1ec>)
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fe7d 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
 8007136:	e0cc      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_I2C_Mem_Write+0x56>
 8007142:	2302      	movs	r3, #2
 8007144:	e0c5      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b01      	cmp	r3, #1
 800715a:	d007      	beq.n	800716c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800717a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2221      	movs	r2, #33	@ 0x21
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2240      	movs	r2, #64	@ 0x40
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800719c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a4d      	ldr	r2, [pc, #308]	@ (80072e0 <HAL_I2C_Mem_Write+0x1f0>)
 80071ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071ae:	88f8      	ldrh	r0, [r7, #6]
 80071b0:	893a      	ldrh	r2, [r7, #8]
 80071b2:	8979      	ldrh	r1, [r7, #10]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4603      	mov	r3, r0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fcb4 	bl	8007b2c <I2C_RequestMemoryWrite>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d052      	beq.n	8007270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e081      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 ff42 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d107      	bne.n	80071f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e06b      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b04      	cmp	r3, #4
 8007236:	d11b      	bne.n	8007270 <HAL_I2C_Mem_Write+0x180>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723c:	2b00      	cmp	r3, #0
 800723e:	d017      	beq.n	8007270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	781a      	ldrb	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1aa      	bne.n	80071ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 ff35 	bl	80080ec <I2C_WaitOnBTFFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728c:	2b04      	cmp	r3, #4
 800728e:	d107      	bne.n	80072a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800729e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e016      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e000      	b.n	80072d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	00100002 	.word	0x00100002
 80072e0:	ffff0000 	.word	0xffff0000

080072e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	@ 0x30
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	817b      	strh	r3, [r7, #10]
 80072f6:	460b      	mov	r3, r1
 80072f8:	813b      	strh	r3, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007302:	f7fe fbd3 	bl	8005aac <HAL_GetTick>
 8007306:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b20      	cmp	r3, #32
 8007312:	f040 8250 	bne.w	80077b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2319      	movs	r3, #25
 800731c:	2201      	movs	r2, #1
 800731e:	4982      	ldr	r1, [pc, #520]	@ (8007528 <HAL_I2C_Mem_Read+0x244>)
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fd81 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
 800732e:	e243      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_I2C_Mem_Read+0x5a>
 800733a:	2302      	movs	r3, #2
 800733c:	e23c      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d007      	beq.n	8007364 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2222      	movs	r2, #34	@ 0x22
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2240      	movs	r2, #64	@ 0x40
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800738e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a62      	ldr	r2, [pc, #392]	@ (800752c <HAL_I2C_Mem_Read+0x248>)
 80073a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073a6:	88f8      	ldrh	r0, [r7, #6]
 80073a8:	893a      	ldrh	r2, [r7, #8]
 80073aa:	8979      	ldrh	r1, [r7, #10]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fc4e 	bl	8007c58 <I2C_RequestMemoryRead>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e1f8      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d113      	bne.n	80073f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e1cc      	b.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d11e      	bne.n	800743c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800740c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800740e:	b672      	cpsid	i
}
 8007410:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007438:	b662      	cpsie	i
}
 800743a:	e035      	b.n	80074a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007440:	2b02      	cmp	r3, #2
 8007442:	d11e      	bne.n	8007482 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007452:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007454:	b672      	cpsid	i
}
 8007456:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800747c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800747e:	b662      	cpsie	i
}
 8007480:	e012      	b.n	80074a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007490:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80074a8:	e172      	b.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	f200 811f 	bhi.w	80076f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d123      	bne.n	8007504 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fe5b 	bl	800817c <I2C_WaitOnRXNEFlagUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e173      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007502:	e145      	b.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007508:	2b02      	cmp	r3, #2
 800750a:	d152      	bne.n	80075b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	2200      	movs	r2, #0
 8007514:	4906      	ldr	r1, [pc, #24]	@ (8007530 <HAL_I2C_Mem_Read+0x24c>)
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fc86 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e148      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
 8007526:	bf00      	nop
 8007528:	00100002 	.word	0x00100002
 800752c:	ffff0000 	.word	0xffff0000
 8007530:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007534:	b672      	cpsid	i
}
 8007536:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800757a:	b662      	cpsie	i
}
 800757c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075b0:	e0ee      	b.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b8:	2200      	movs	r2, #0
 80075ba:	4981      	ldr	r1, [pc, #516]	@ (80077c0 <HAL_I2C_Mem_Read+0x4dc>)
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fc33 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e0f5      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80075dc:	b672      	cpsid	i
}
 80075de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007612:	4b6c      	ldr	r3, [pc, #432]	@ (80077c4 <HAL_I2C_Mem_Read+0x4e0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	08db      	lsrs	r3, r3, #3
 8007618:	4a6b      	ldr	r2, [pc, #428]	@ (80077c8 <HAL_I2C_Mem_Read+0x4e4>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	0a1a      	lsrs	r2, r3, #8
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	00da      	lsls	r2, r3, #3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	3b01      	subs	r3, #1
 8007630:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d118      	bne.n	800766a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800765a:	b662      	cpsie	i
}
 800765c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0a6      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b04      	cmp	r3, #4
 8007676:	d1d9      	bne.n	800762c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80076ba:	b662      	cpsie	i
}
 80076bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c8:	b2d2      	uxtb	r2, r2
 80076ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076f0:	e04e      	b.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fd40 	bl	800817c <I2C_WaitOnRXNEFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e058      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b04      	cmp	r3, #4
 8007744:	d124      	bne.n	8007790 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800774a:	2b03      	cmp	r3, #3
 800774c:	d107      	bne.n	800775e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800775c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f ae88 	bne.w	80074aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3728      	adds	r7, #40	@ 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	00010004 	.word	0x00010004
 80077c4:	2000005c 	.word	0x2000005c
 80077c8:	14f8b589 	.word	0x14f8b589

080077cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	@ 0x28
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	460b      	mov	r3, r1
 80077da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80077dc:	f7fe f966 	bl	8005aac <HAL_GetTick>
 80077e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	f040 8111 	bne.w	8007a16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2319      	movs	r3, #25
 80077fa:	2201      	movs	r2, #1
 80077fc:	4988      	ldr	r1, [pc, #544]	@ (8007a20 <HAL_I2C_IsDeviceReady+0x254>)
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fb12 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
 800780c:	e104      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_I2C_IsDeviceReady+0x50>
 8007818:	2302      	movs	r3, #2
 800781a:	e0fd      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d007      	beq.n	8007842 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2224      	movs	r2, #36	@ 0x24
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a70      	ldr	r2, [pc, #448]	@ (8007a24 <HAL_I2C_IsDeviceReady+0x258>)
 8007864:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007874:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fad0 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800789c:	d103      	bne.n	80078a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078a4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e0b6      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80078ba:	f7fe f8f7 	bl	8005aac <HAL_GetTick>
 80078be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e4:	bf0c      	ite	eq
 80078e6:	2301      	moveq	r3, #1
 80078e8:	2300      	movne	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80078ee:	e025      	b.n	800793c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078f0:	f7fe f8dc 	bl	8005aac <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d302      	bcc.n	8007906 <HAL_I2C_IsDeviceReady+0x13a>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	22a0      	movs	r2, #160	@ 0xa0
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2ba0      	cmp	r3, #160	@ 0xa0
 8007946:	d005      	beq.n	8007954 <HAL_I2C_IsDeviceReady+0x188>
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <HAL_I2C_IsDeviceReady+0x188>
 800794e:	7dbb      	ldrb	r3, [r7, #22]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0cd      	beq.n	80078f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	d129      	bne.n	80079be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007978:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2319      	movs	r3, #25
 8007996:	2201      	movs	r2, #1
 8007998:	4921      	ldr	r1, [pc, #132]	@ (8007a20 <HAL_I2C_IsDeviceReady+0x254>)
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fa44 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e036      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e02c      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2319      	movs	r3, #25
 80079de:	2201      	movs	r2, #1
 80079e0:	490f      	ldr	r1, [pc, #60]	@ (8007a20 <HAL_I2C_IsDeviceReady+0x254>)
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fa20 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e012      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	3301      	adds	r3, #1
 80079f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	f4ff af32 	bcc.w	8007866 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007a16:	2302      	movs	r3, #2
  }
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	00100002 	.word	0x00100002
 8007a24:	ffff0000 	.word	0xffff0000

08007a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	460b      	mov	r3, r1
 8007a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d006      	beq.n	8007a52 <I2C_MasterRequestWrite+0x2a>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d003      	beq.n	8007a52 <I2C_MasterRequestWrite+0x2a>
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a50:	d108      	bne.n	8007a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e00b      	b.n	8007a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	2b12      	cmp	r3, #18
 8007a6a:	d107      	bne.n	8007a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f9cd 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00d      	beq.n	8007ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa2:	d103      	bne.n	8007aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e035      	b.n	8007b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ab8:	d108      	bne.n	8007acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ac8:	611a      	str	r2, [r3, #16]
 8007aca:	e01b      	b.n	8007b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007acc:	897b      	ldrh	r3, [r7, #10]
 8007ace:	11db      	asrs	r3, r3, #7
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	f003 0306 	and.w	r3, r3, #6
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f063 030f 	orn	r3, r3, #15
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	490e      	ldr	r1, [pc, #56]	@ (8007b24 <I2C_MasterRequestWrite+0xfc>)
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fa16 	bl	8007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e010      	b.n	8007b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4907      	ldr	r1, [pc, #28]	@ (8007b28 <I2C_MasterRequestWrite+0x100>)
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fa06 	bl	8007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	00010008 	.word	0x00010008
 8007b28:	00010002 	.word	0x00010002

08007b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	817b      	strh	r3, [r7, #10]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	813b      	strh	r3, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f960 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7c:	d103      	bne.n	8007b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e05f      	b.n	8007c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8a:	897b      	ldrh	r3, [r7, #10]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	492d      	ldr	r1, [pc, #180]	@ (8007c54 <I2C_RequestMemoryWrite+0x128>)
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f9bb 	bl	8007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e04c      	b.n	8007c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc8:	6a39      	ldr	r1, [r7, #32]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fa46 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d107      	bne.n	8007bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e02b      	b.n	8007c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	611a      	str	r2, [r3, #16]
 8007c02:	e021      	b.n	8007c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c04:	893b      	ldrh	r3, [r7, #8]
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c14:	6a39      	ldr	r1, [r7, #32]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fa20 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d107      	bne.n	8007c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e005      	b.n	8007c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3e:	893b      	ldrh	r3, [r7, #8]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	00010002 	.word	0x00010002

08007c58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	817b      	strh	r3, [r7, #10]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	813b      	strh	r3, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f8c2 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb8:	d103      	bne.n	8007cc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e0aa      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cc6:	897b      	ldrh	r3, [r7, #10]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	6a3a      	ldr	r2, [r7, #32]
 8007cda:	4952      	ldr	r1, [pc, #328]	@ (8007e24 <I2C_RequestMemoryRead+0x1cc>)
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f91d 	bl	8007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e097      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cec:	2300      	movs	r3, #0
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d04:	6a39      	ldr	r1, [r7, #32]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f9a8 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d107      	bne.n	8007d2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e076      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d34:	893b      	ldrh	r3, [r7, #8]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	611a      	str	r2, [r3, #16]
 8007d3e:	e021      	b.n	8007d84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d40:	893b      	ldrh	r3, [r7, #8]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d50:	6a39      	ldr	r1, [r7, #32]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f982 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d107      	bne.n	8007d76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e050      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d86:	6a39      	ldr	r1, [r7, #32]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 f967 	bl	800805c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d107      	bne.n	8007dac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007daa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e035      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f82b 	bl	8007e28 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de6:	d103      	bne.n	8007df0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e013      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007df4:	897b      	ldrh	r3, [r7, #10]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f043 0301 	orr.w	r3, r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	6a3a      	ldr	r2, [r7, #32]
 8007e08:	4906      	ldr	r1, [pc, #24]	@ (8007e24 <I2C_RequestMemoryRead+0x1cc>)
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f886 	bl	8007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	00010002 	.word	0x00010002

08007e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	4613      	mov	r3, r2
 8007e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e38:	e048      	b.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d044      	beq.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e42:	f7fd fe33 	bl	8005aac <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d302      	bcc.n	8007e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d139      	bne.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	0c1b      	lsrs	r3, r3, #16
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10d      	bne.n	8007e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	43da      	mvns	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	e00c      	b.n	8007e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	43da      	mvns	r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bf0c      	ite	eq
 8007e90:	2301      	moveq	r3, #1
 8007e92:	2300      	movne	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d116      	bne.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e023      	b.n	8007f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d10d      	bne.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	43da      	mvns	r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	e00c      	b.n	8007f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	43da      	mvns	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4013      	ands	r3, r2
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d093      	beq.n	8007e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f2a:	e071      	b.n	8008010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3a:	d123      	bne.n	8007f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	f043 0204 	orr.w	r2, r3, #4
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e067      	b.n	8008054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d041      	beq.n	8008010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8c:	f7fd fd8e 	bl	8005aac <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d302      	bcc.n	8007fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d136      	bne.n	8008010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10c      	bne.n	8007fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	43da      	mvns	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bf14      	ite	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	2300      	moveq	r3, #0
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	e00b      	b.n	8007fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	43da      	mvns	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d016      	beq.n	8008010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	f043 0220 	orr.w	r2, r3, #32
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e021      	b.n	8008054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b01      	cmp	r3, #1
 8008018:	d10c      	bne.n	8008034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	43da      	mvns	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4013      	ands	r3, r2
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e00b      	b.n	800804c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	43da      	mvns	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4013      	ands	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf14      	ite	ne
 8008046:	2301      	movne	r3, #1
 8008048:	2300      	moveq	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	f47f af6d 	bne.w	8007f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008068:	e034      	b.n	80080d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f8e3 	bl	8008236 <I2C_IsAcknowledgeFailed>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e034      	b.n	80080e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d028      	beq.n	80080d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008082:	f7fd fd13 	bl	8005aac <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11d      	bne.n	80080d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a2:	2b80      	cmp	r3, #128	@ 0x80
 80080a4:	d016      	beq.n	80080d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e007      	b.n	80080e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080de:	2b80      	cmp	r3, #128	@ 0x80
 80080e0:	d1c3      	bne.n	800806a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080f8:	e034      	b.n	8008164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f89b 	bl	8008236 <I2C_IsAcknowledgeFailed>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e034      	b.n	8008174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d028      	beq.n	8008164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fd fccb 	bl	8005aac <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11d      	bne.n	8008164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d016      	beq.n	8008164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	f043 0220 	orr.w	r2, r3, #32
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e007      	b.n	8008174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b04      	cmp	r3, #4
 8008170:	d1c3      	bne.n	80080fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008188:	e049      	b.n	800821e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b10      	cmp	r3, #16
 8008196:	d119      	bne.n	80081cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0210 	mvn.w	r2, #16
 80081a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e030      	b.n	800822e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081cc:	f7fd fc6e 	bl	8005aac <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d302      	bcc.n	80081e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11d      	bne.n	800821e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d016      	beq.n	800821e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820a:	f043 0220 	orr.w	r2, r3, #32
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e007      	b.n	800822e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008228:	2b40      	cmp	r3, #64	@ 0x40
 800822a:	d1ae      	bne.n	800818a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800824c:	d11b      	bne.n	8008286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008272:	f043 0204 	orr.w	r2, r3, #4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr
	...

08008294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e272      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8087 	beq.w	80083c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082b4:	4b92      	ldr	r3, [pc, #584]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f003 030c 	and.w	r3, r3, #12
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d00c      	beq.n	80082da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80082c0:	4b8f      	ldr	r3, [pc, #572]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 030c 	and.w	r3, r3, #12
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d112      	bne.n	80082f2 <HAL_RCC_OscConfig+0x5e>
 80082cc:	4b8c      	ldr	r3, [pc, #560]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d8:	d10b      	bne.n	80082f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082da:	4b89      	ldr	r3, [pc, #548]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d06c      	beq.n	80083c0 <HAL_RCC_OscConfig+0x12c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d168      	bne.n	80083c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e24c      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fa:	d106      	bne.n	800830a <HAL_RCC_OscConfig+0x76>
 80082fc:	4b80      	ldr	r3, [pc, #512]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a7f      	ldr	r2, [pc, #508]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e02e      	b.n	8008368 <HAL_RCC_OscConfig+0xd4>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10c      	bne.n	800832c <HAL_RCC_OscConfig+0x98>
 8008312:	4b7b      	ldr	r3, [pc, #492]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a7a      	ldr	r2, [pc, #488]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	4b78      	ldr	r3, [pc, #480]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a77      	ldr	r2, [pc, #476]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	e01d      	b.n	8008368 <HAL_RCC_OscConfig+0xd4>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008334:	d10c      	bne.n	8008350 <HAL_RCC_OscConfig+0xbc>
 8008336:	4b72      	ldr	r3, [pc, #456]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a71      	ldr	r2, [pc, #452]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800833c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4b6f      	ldr	r3, [pc, #444]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a6e      	ldr	r2, [pc, #440]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	e00b      	b.n	8008368 <HAL_RCC_OscConfig+0xd4>
 8008350:	4b6b      	ldr	r3, [pc, #428]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a6a      	ldr	r2, [pc, #424]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	4b68      	ldr	r3, [pc, #416]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a67      	ldr	r2, [pc, #412]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fd fb9c 	bl	8005aac <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008378:	f7fd fb98 	bl	8005aac <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b64      	cmp	r3, #100	@ 0x64
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e200      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	4b5d      	ldr	r3, [pc, #372]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0xe4>
 8008396:	e014      	b.n	80083c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008398:	f7fd fb88 	bl	8005aac <HAL_GetTick>
 800839c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fd fb84 	bl	8005aac <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	@ 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e1ec      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	4b53      	ldr	r3, [pc, #332]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0x10c>
 80083be:	e000      	b.n	80083c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d063      	beq.n	8008496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80083da:	4b49      	ldr	r3, [pc, #292]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f003 030c 	and.w	r3, r3, #12
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d11c      	bne.n	8008420 <HAL_RCC_OscConfig+0x18c>
 80083e6:	4b46      	ldr	r3, [pc, #280]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d116      	bne.n	8008420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083f2:	4b43      	ldr	r3, [pc, #268]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_RCC_OscConfig+0x176>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e1c0      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840a:	4b3d      	ldr	r3, [pc, #244]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4939      	ldr	r1, [pc, #228]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800841a:	4313      	orrs	r3, r2
 800841c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800841e:	e03a      	b.n	8008496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d020      	beq.n	800846a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008428:	4b36      	ldr	r3, [pc, #216]	@ (8008504 <HAL_RCC_OscConfig+0x270>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842e:	f7fd fb3d 	bl	8005aac <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008436:	f7fd fb39 	bl	8005aac <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e1a1      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008448:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008454:	4b2a      	ldr	r3, [pc, #168]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4927      	ldr	r1, [pc, #156]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
 8008468:	e015      	b.n	8008496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800846a:	4b26      	ldr	r3, [pc, #152]	@ (8008504 <HAL_RCC_OscConfig+0x270>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008470:	f7fd fb1c 	bl	8005aac <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008478:	f7fd fb18 	bl	8005aac <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e180      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	4b1d      	ldr	r3, [pc, #116]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d03a      	beq.n	8008518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d019      	beq.n	80084de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084aa:	4b17      	ldr	r3, [pc, #92]	@ (8008508 <HAL_RCC_OscConfig+0x274>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084b0:	f7fd fafc 	bl	8005aac <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b8:	f7fd faf8 	bl	8005aac <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e160      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <HAL_RCC_OscConfig+0x26c>)
 80084cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80084d6:	2001      	movs	r0, #1
 80084d8:	f000 face 	bl	8008a78 <RCC_Delay>
 80084dc:	e01c      	b.n	8008518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084de:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <HAL_RCC_OscConfig+0x274>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084e4:	f7fd fae2 	bl	8005aac <HAL_GetTick>
 80084e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084ea:	e00f      	b.n	800850c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ec:	f7fd fade 	bl	8005aac <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d908      	bls.n	800850c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e146      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
 80084fe:	bf00      	nop
 8008500:	40021000 	.word	0x40021000
 8008504:	42420000 	.word	0x42420000
 8008508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800850c:	4b92      	ldr	r3, [pc, #584]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e9      	bne.n	80084ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80a6 	beq.w	8008672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008526:	2300      	movs	r3, #0
 8008528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800852a:	4b8b      	ldr	r3, [pc, #556]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008536:	4b88      	ldr	r3, [pc, #544]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	4a87      	ldr	r2, [pc, #540]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800853c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008540:	61d3      	str	r3, [r2, #28]
 8008542:	4b85      	ldr	r3, [pc, #532]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800854a:	60bb      	str	r3, [r7, #8]
 800854c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800854e:	2301      	movs	r3, #1
 8008550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008552:	4b82      	ldr	r3, [pc, #520]	@ (800875c <HAL_RCC_OscConfig+0x4c8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855a:	2b00      	cmp	r3, #0
 800855c:	d118      	bne.n	8008590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800855e:	4b7f      	ldr	r3, [pc, #508]	@ (800875c <HAL_RCC_OscConfig+0x4c8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a7e      	ldr	r2, [pc, #504]	@ (800875c <HAL_RCC_OscConfig+0x4c8>)
 8008564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800856a:	f7fd fa9f 	bl	8005aac <HAL_GetTick>
 800856e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008572:	f7fd fa9b 	bl	8005aac <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b64      	cmp	r3, #100	@ 0x64
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e103      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008584:	4b75      	ldr	r3, [pc, #468]	@ (800875c <HAL_RCC_OscConfig+0x4c8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0f0      	beq.n	8008572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d106      	bne.n	80085a6 <HAL_RCC_OscConfig+0x312>
 8008598:	4b6f      	ldr	r3, [pc, #444]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	4a6e      	ldr	r2, [pc, #440]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	6213      	str	r3, [r2, #32]
 80085a4:	e02d      	b.n	8008602 <HAL_RCC_OscConfig+0x36e>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0x334>
 80085ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	4a69      	ldr	r2, [pc, #420]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085b4:	f023 0301 	bic.w	r3, r3, #1
 80085b8:	6213      	str	r3, [r2, #32]
 80085ba:	4b67      	ldr	r3, [pc, #412]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	4a66      	ldr	r2, [pc, #408]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085c0:	f023 0304 	bic.w	r3, r3, #4
 80085c4:	6213      	str	r3, [r2, #32]
 80085c6:	e01c      	b.n	8008602 <HAL_RCC_OscConfig+0x36e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d10c      	bne.n	80085ea <HAL_RCC_OscConfig+0x356>
 80085d0:	4b61      	ldr	r3, [pc, #388]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	4a60      	ldr	r2, [pc, #384]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	6213      	str	r3, [r2, #32]
 80085dc:	4b5e      	ldr	r3, [pc, #376]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	4a5d      	ldr	r2, [pc, #372]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	6213      	str	r3, [r2, #32]
 80085e8:	e00b      	b.n	8008602 <HAL_RCC_OscConfig+0x36e>
 80085ea:	4b5b      	ldr	r3, [pc, #364]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	4a5a      	ldr	r2, [pc, #360]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6213      	str	r3, [r2, #32]
 80085f6:	4b58      	ldr	r3, [pc, #352]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	4a57      	ldr	r2, [pc, #348]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80085fc:	f023 0304 	bic.w	r3, r3, #4
 8008600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d015      	beq.n	8008636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800860a:	f7fd fa4f 	bl	8005aac <HAL_GetTick>
 800860e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008610:	e00a      	b.n	8008628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008612:	f7fd fa4b 	bl	8005aac <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008620:	4293      	cmp	r3, r2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e0b1      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008628:	4b4b      	ldr	r3, [pc, #300]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0ee      	beq.n	8008612 <HAL_RCC_OscConfig+0x37e>
 8008634:	e014      	b.n	8008660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008636:	f7fd fa39 	bl	8005aac <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800863c:	e00a      	b.n	8008654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800863e:	f7fd fa35 	bl	8005aac <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e09b      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008654:	4b40      	ldr	r3, [pc, #256]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ee      	bne.n	800863e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d105      	bne.n	8008672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008666:	4b3c      	ldr	r3, [pc, #240]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	4a3b      	ldr	r2, [pc, #236]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800866c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8087 	beq.w	800878a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800867c:	4b36      	ldr	r3, [pc, #216]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f003 030c 	and.w	r3, r3, #12
 8008684:	2b08      	cmp	r3, #8
 8008686:	d061      	beq.n	800874c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d146      	bne.n	800871e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008690:	4b33      	ldr	r3, [pc, #204]	@ (8008760 <HAL_RCC_OscConfig+0x4cc>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008696:	f7fd fa09 	bl	8005aac <HAL_GetTick>
 800869a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800869e:	f7fd fa05 	bl	8005aac <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e06d      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086b0:	4b29      	ldr	r3, [pc, #164]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f0      	bne.n	800869e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c4:	d108      	bne.n	80086d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80086c6:	4b24      	ldr	r3, [pc, #144]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	4921      	ldr	r1, [pc, #132]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a19      	ldr	r1, [r3, #32]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e8:	430b      	orrs	r3, r1
 80086ea:	491b      	ldr	r1, [pc, #108]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008760 <HAL_RCC_OscConfig+0x4cc>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f6:	f7fd f9d9 	bl	8005aac <HAL_GetTick>
 80086fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086fc:	e008      	b.n	8008710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086fe:	f7fd f9d5 	bl	8005aac <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e03d      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008710:	4b11      	ldr	r3, [pc, #68]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0f0      	beq.n	80086fe <HAL_RCC_OscConfig+0x46a>
 800871c:	e035      	b.n	800878a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <HAL_RCC_OscConfig+0x4cc>)
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008724:	f7fd f9c2 	bl	8005aac <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800872c:	f7fd f9be 	bl	8005aac <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e026      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800873e:	4b06      	ldr	r3, [pc, #24]	@ (8008758 <HAL_RCC_OscConfig+0x4c4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f0      	bne.n	800872c <HAL_RCC_OscConfig+0x498>
 800874a:	e01e      	b.n	800878a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d107      	bne.n	8008764 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e019      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
 8008758:	40021000 	.word	0x40021000
 800875c:	40007000 	.word	0x40007000
 8008760:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008764:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <HAL_RCC_OscConfig+0x500>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	429a      	cmp	r2, r3
 8008776:	d106      	bne.n	8008786 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008782:	429a      	cmp	r2, r3
 8008784:	d001      	beq.n	800878a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	40021000 	.word	0x40021000

08008798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0d0      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087ac:	4b6a      	ldr	r3, [pc, #424]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d910      	bls.n	80087dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ba:	4b67      	ldr	r3, [pc, #412]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f023 0207 	bic.w	r2, r3, #7
 80087c2:	4965      	ldr	r1, [pc, #404]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ca:	4b63      	ldr	r3, [pc, #396]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d001      	beq.n	80087dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e0b8      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d020      	beq.n	800882a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087f4:	4b59      	ldr	r3, [pc, #356]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4a58      	ldr	r2, [pc, #352]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 80087fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80087fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800880c:	4b53      	ldr	r3, [pc, #332]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	4a52      	ldr	r2, [pc, #328]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008812:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008816:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008818:	4b50      	ldr	r3, [pc, #320]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	494d      	ldr	r1, [pc, #308]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008826:	4313      	orrs	r3, r2
 8008828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d040      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d107      	bne.n	800884e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800883e:	4b47      	ldr	r3, [pc, #284]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d115      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e07f      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d107      	bne.n	8008866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008856:	4b41      	ldr	r3, [pc, #260]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e073      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008866:	4b3d      	ldr	r3, [pc, #244]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e06b      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008876:	4b39      	ldr	r3, [pc, #228]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f023 0203 	bic.w	r2, r3, #3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4936      	ldr	r1, [pc, #216]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008884:	4313      	orrs	r3, r2
 8008886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008888:	f7fd f910 	bl	8005aac <HAL_GetTick>
 800888c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800888e:	e00a      	b.n	80088a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008890:	f7fd f90c 	bl	8005aac <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e053      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a6:	4b2d      	ldr	r3, [pc, #180]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f003 020c 	and.w	r2, r3, #12
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d1eb      	bne.n	8008890 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088b8:	4b27      	ldr	r3, [pc, #156]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d210      	bcs.n	80088e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c6:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 0207 	bic.w	r2, r3, #7
 80088ce:	4922      	ldr	r1, [pc, #136]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088d6:	4b20      	ldr	r3, [pc, #128]	@ (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d001      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e032      	b.n	800894e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088f4:	4b19      	ldr	r3, [pc, #100]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	4916      	ldr	r1, [pc, #88]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008902:	4313      	orrs	r3, r2
 8008904:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008912:	4b12      	ldr	r3, [pc, #72]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	490e      	ldr	r1, [pc, #56]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008922:	4313      	orrs	r3, r2
 8008924:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008926:	f000 f821 	bl	800896c <HAL_RCC_GetSysClockFreq>
 800892a:	4602      	mov	r2, r0
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <HAL_RCC_ClockConfig+0x1c4>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	091b      	lsrs	r3, r3, #4
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	490a      	ldr	r1, [pc, #40]	@ (8008960 <HAL_RCC_ClockConfig+0x1c8>)
 8008938:	5ccb      	ldrb	r3, [r1, r3]
 800893a:	fa22 f303 	lsr.w	r3, r2, r3
 800893e:	4a09      	ldr	r2, [pc, #36]	@ (8008964 <HAL_RCC_ClockConfig+0x1cc>)
 8008940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008942:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <HAL_RCC_ClockConfig+0x1d0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fd f86e 	bl	8005a28 <HAL_InitTick>

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40022000 	.word	0x40022000
 800895c:	40021000 	.word	0x40021000
 8008960:	0800d698 	.word	0x0800d698
 8008964:	2000005c 	.word	0x2000005c
 8008968:	20000060 	.word	0x20000060

0800896c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008986:	4b1e      	ldr	r3, [pc, #120]	@ (8008a00 <HAL_RCC_GetSysClockFreq+0x94>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b04      	cmp	r3, #4
 8008994:	d002      	beq.n	800899c <HAL_RCC_GetSysClockFreq+0x30>
 8008996:	2b08      	cmp	r3, #8
 8008998:	d003      	beq.n	80089a2 <HAL_RCC_GetSysClockFreq+0x36>
 800899a:	e027      	b.n	80089ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800899c:	4b19      	ldr	r3, [pc, #100]	@ (8008a04 <HAL_RCC_GetSysClockFreq+0x98>)
 800899e:	613b      	str	r3, [r7, #16]
      break;
 80089a0:	e027      	b.n	80089f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	0c9b      	lsrs	r3, r3, #18
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	4a17      	ldr	r2, [pc, #92]	@ (8008a08 <HAL_RCC_GetSysClockFreq+0x9c>)
 80089ac:	5cd3      	ldrb	r3, [r2, r3]
 80089ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d010      	beq.n	80089dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80089ba:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <HAL_RCC_GetSysClockFreq+0x94>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	0c5b      	lsrs	r3, r3, #17
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	4a11      	ldr	r2, [pc, #68]	@ (8008a0c <HAL_RCC_GetSysClockFreq+0xa0>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80089ce:	fb03 f202 	mul.w	r2, r3, r2
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	e004      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a0c      	ldr	r2, [pc, #48]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80089e0:	fb02 f303 	mul.w	r3, r2, r3
 80089e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	613b      	str	r3, [r7, #16]
      break;
 80089ea:	e002      	b.n	80089f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80089ee:	613b      	str	r3, [r7, #16]
      break;
 80089f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089f2:	693b      	ldr	r3, [r7, #16]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40021000 	.word	0x40021000
 8008a04:	007a1200 	.word	0x007a1200
 8008a08:	0800d6b0 	.word	0x0800d6b0
 8008a0c:	0800d6c0 	.word	0x0800d6c0
 8008a10:	003d0900 	.word	0x003d0900

08008a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a18:	4b02      	ldr	r3, [pc, #8]	@ (8008a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr
 8008a24:	2000005c 	.word	0x2000005c

08008a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a2c:	f7ff fff2 	bl	8008a14 <HAL_RCC_GetHCLKFreq>
 8008a30:	4602      	mov	r2, r0
 8008a32:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	4903      	ldr	r1, [pc, #12]	@ (8008a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a3e:	5ccb      	ldrb	r3, [r1, r3]
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40021000 	.word	0x40021000
 8008a4c:	0800d6a8 	.word	0x0800d6a8

08008a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a54:	f7ff ffde 	bl	8008a14 <HAL_RCC_GetHCLKFreq>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	0adb      	lsrs	r3, r3, #11
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	4903      	ldr	r1, [pc, #12]	@ (8008a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a66:	5ccb      	ldrb	r3, [r1, r3]
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40021000 	.word	0x40021000
 8008a74:	0800d6a8 	.word	0x0800d6a8

08008a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <RCC_Delay+0x34>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab0 <RCC_Delay+0x38>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	0a5b      	lsrs	r3, r3, #9
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008a94:	bf00      	nop
  }
  while (Delay --);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	60fa      	str	r2, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f9      	bne.n	8008a94 <RCC_Delay+0x1c>
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	2000005c 	.word	0x2000005c
 8008ab0:	10624dd3 	.word	0x10624dd3

08008ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	613b      	str	r3, [r7, #16]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d07d      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10d      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aea:	61d3      	str	r3, [r2, #28]
 8008aec:	4b49      	ldr	r3, [pc, #292]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008af4:	60bb      	str	r3, [r7, #8]
 8008af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008af8:	2301      	movs	r3, #1
 8008afa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008afc:	4b46      	ldr	r3, [pc, #280]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d118      	bne.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b08:	4b43      	ldr	r3, [pc, #268]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a42      	ldr	r2, [pc, #264]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b14:	f7fc ffca 	bl	8005aac <HAL_GetTick>
 8008b18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b1a:	e008      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b1c:	f7fc ffc6 	bl	8005aac <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b64      	cmp	r3, #100	@ 0x64
 8008b28:	d901      	bls.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e06d      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b3a:	4b36      	ldr	r3, [pc, #216]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d02e      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d027      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b58:	4b2e      	ldr	r3, [pc, #184]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b62:	4b2e      	ldr	r3, [pc, #184]	@ (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b68:	4b2c      	ldr	r3, [pc, #176]	@ (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008b6e:	4a29      	ldr	r2, [pc, #164]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d014      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b7e:	f7fc ff95 	bl	8005aac <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b84:	e00a      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b86:	f7fc ff91 	bl	8005aac <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d901      	bls.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e036      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0ee      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4917      	ldr	r1, [pc, #92]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d105      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc0:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	4a13      	ldr	r2, [pc, #76]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	490b      	ldr	r1, [pc, #44]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d008      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bf6:	4b07      	ldr	r3, [pc, #28]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	4904      	ldr	r1, [pc, #16]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40021000 	.word	0x40021000
 8008c18:	40007000 	.word	0x40007000
 8008c1c:	42420440 	.word	0x42420440

08008c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d00a      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	f200 808a 	bhi.w	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d045      	beq.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d075      	beq.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008c56:	e082      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008c58:	4b46      	ldr	r3, [pc, #280]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008c5e:	4b45      	ldr	r3, [pc, #276]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d07b      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	0c9b      	lsrs	r3, r3, #18
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	4a41      	ldr	r2, [pc, #260]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008c74:	5cd3      	ldrb	r3, [r2, r3]
 8008c76:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d015      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c82:	4b3c      	ldr	r3, [pc, #240]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	0c5b      	lsrs	r3, r3, #17
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00d      	beq.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008c9c:	4a38      	ldr	r2, [pc, #224]	@ (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	fb02 f303 	mul.w	r3, r2, r3
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	e004      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4a34      	ldr	r2, [pc, #208]	@ (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cc4:	d102      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	61bb      	str	r3, [r7, #24]
      break;
 8008cca:	e04a      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	61bb      	str	r3, [r7, #24]
      break;
 8008cda:	e042      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008cdc:	4b25      	ldr	r3, [pc, #148]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cec:	d108      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	e01f      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d0a:	d109      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008d0c:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008d18:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	e00f      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d2a:	d11c      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008d2c:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d016      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008d38:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008d3c:	61bb      	str	r3, [r7, #24]
      break;
 8008d3e:	e012      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008d40:	e011      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008d42:	f7ff fe85 	bl	8008a50 <HAL_RCC_GetPCLK2Freq>
 8008d46:	4602      	mov	r2, r0
 8008d48:	4b0a      	ldr	r3, [pc, #40]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	0b9b      	lsrs	r3, r3, #14
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	3301      	adds	r3, #1
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5a:	61bb      	str	r3, [r7, #24]
      break;
 8008d5c:	e004      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008d5e:	bf00      	nop
 8008d60:	e002      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008d62:	bf00      	nop
 8008d64:	e000      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008d66:	bf00      	nop
    }
  }
  return (frequency);
 8008d68:	69bb      	ldr	r3, [r7, #24]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40021000 	.word	0x40021000
 8008d78:	0800d6c4 	.word	0x0800d6c4
 8008d7c:	0800d6d4 	.word	0x0800d6d4
 8008d80:	007a1200 	.word	0x007a1200
 8008d84:	003d0900 	.word	0x003d0900
 8008d88:	aaaaaaab 	.word	0xaaaaaaab

08008d8c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d011      	beq.n	8008dc6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f815 	bl	8008de0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0202 	bic.w	r2, r2, #2
 8008dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008dc6:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008dc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008dcc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	745a      	strb	r2, [r3, #17]
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	40010400 	.word	0x40010400

08008de0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e076      	b.n	8008ef2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d108      	bne.n	8008e1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e14:	d009      	beq.n	8008e2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	61da      	str	r2, [r3, #28]
 8008e1c:	e005      	b.n	8008e2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7fc fb13 	bl	8005470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eae:	ea42 0103 	orr.w	r1, r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	0c1a      	lsrs	r2, r3, #16
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f002 0204 	and.w	r2, r2, #4
 8008ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b088      	sub	sp, #32
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f0a:	f7fc fdcf 	bl	8005aac <HAL_GetTick>
 8008f0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d001      	beq.n	8008f24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
 8008f22:	e12a      	b.n	800917a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <HAL_SPI_Transmit+0x36>
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e122      	b.n	800917a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_SPI_Transmit+0x48>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e11b      	b.n	800917a <HAL_SPI_Transmit+0x280>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	88fa      	ldrh	r2, [r7, #6]
 8008f62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f90:	d10f      	bne.n	8008fb2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d007      	beq.n	8008fd0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fd8:	d152      	bne.n	8009080 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_SPI_Transmit+0xee>
 8008fe2:	8b7b      	ldrh	r3, [r7, #26]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d145      	bne.n	8009074 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fec:	881a      	ldrh	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800900c:	e032      	b.n	8009074 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b02      	cmp	r3, #2
 800901a:	d112      	bne.n	8009042 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009020:	881a      	ldrh	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800902c:	1c9a      	adds	r2, r3, #2
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009040:	e018      	b.n	8009074 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009042:	f7fc fd33 	bl	8005aac <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d803      	bhi.n	800905a <HAL_SPI_Transmit+0x160>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d102      	bne.n	8009060 <HAL_SPI_Transmit+0x166>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e082      	b.n	800917a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009078:	b29b      	uxth	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1c7      	bne.n	800900e <HAL_SPI_Transmit+0x114>
 800907e:	e053      	b.n	8009128 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <HAL_SPI_Transmit+0x194>
 8009088:	8b7b      	ldrh	r3, [r7, #26]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d147      	bne.n	800911e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090b4:	e033      	b.n	800911e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d113      	bne.n	80090ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80090ea:	e018      	b.n	800911e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ec:	f7fc fcde 	bl	8005aac <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d803      	bhi.n	8009104 <HAL_SPI_Transmit+0x20a>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d102      	bne.n	800910a <HAL_SPI_Transmit+0x210>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e02d      	b.n	800917a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1c6      	bne.n	80090b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fbc5 	bl	80098bc <SPI_EndRxTxTransaction>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009178:	2300      	movs	r3, #0
  }
}
 800917a:	4618      	mov	r0, r3
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b088      	sub	sp, #32
 8009186:	af02      	add	r7, sp, #8
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b01      	cmp	r3, #1
 800919c:	d001      	beq.n	80091a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800919e:	2302      	movs	r3, #2
 80091a0:	e104      	b.n	80093ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091aa:	d112      	bne.n	80091d2 <HAL_SPI_Receive+0x50>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10e      	bne.n	80091d2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2204      	movs	r2, #4
 80091b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80091bc:	88fa      	ldrh	r2, [r7, #6]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4613      	mov	r3, r2
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f8f3 	bl	80093b4 <HAL_SPI_TransmitReceive>
 80091ce:	4603      	mov	r3, r0
 80091d0:	e0ec      	b.n	80093ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091d2:	f7fc fc6b 	bl	8005aac <HAL_GetTick>
 80091d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_SPI_Receive+0x62>
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e0e1      	b.n	80093ac <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_SPI_Receive+0x74>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e0da      	b.n	80093ac <HAL_SPI_Receive+0x22a>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2204      	movs	r2, #4
 8009202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009244:	d10f      	bne.n	8009266 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009264:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009270:	2b40      	cmp	r3, #64	@ 0x40
 8009272:	d007      	beq.n	8009284 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009282:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d170      	bne.n	800936e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800928c:	e035      	b.n	80092fa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b01      	cmp	r3, #1
 800929a:	d115      	bne.n	80092c8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f103 020c 	add.w	r2, r3, #12
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092c6:	e018      	b.n	80092fa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092c8:	f7fc fbf0 	bl	8005aac <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d803      	bhi.n	80092e0 <HAL_SPI_Receive+0x15e>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d102      	bne.n	80092e6 <HAL_SPI_Receive+0x164>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e058      	b.n	80093ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1c4      	bne.n	800928e <HAL_SPI_Receive+0x10c>
 8009304:	e038      	b.n	8009378 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b01      	cmp	r3, #1
 8009312:	d113      	bne.n	800933c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931e:	b292      	uxth	r2, r2
 8009320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800933a:	e018      	b.n	800936e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800933c:	f7fc fbb6 	bl	8005aac <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d803      	bhi.n	8009354 <HAL_SPI_Receive+0x1d2>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d102      	bne.n	800935a <HAL_SPI_Receive+0x1d8>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e01e      	b.n	80093ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1c6      	bne.n	8009306 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 fa4b 	bl	8009818 <SPI_EndRxTransaction>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	@ 0x28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093c2:	2301      	movs	r3, #1
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093c6:	f7fc fb71 	bl	8005aac <HAL_GetTick>
 80093ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093da:	887b      	ldrh	r3, [r7, #2]
 80093dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093de:	7ffb      	ldrb	r3, [r7, #31]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d00c      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x4a>
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ea:	d106      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x46>
 80093f4:	7ffb      	ldrb	r3, [r7, #31]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d001      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
 80093fc:	e17f      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <HAL_SPI_TransmitReceive+0x5c>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_SPI_TransmitReceive+0x5c>
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e174      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x6e>
 800941e:	2302      	movs	r3, #2
 8009420:	e16d      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b04      	cmp	r3, #4
 8009434:	d003      	beq.n	800943e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2205      	movs	r2, #5
 800943a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	887a      	ldrh	r2, [r7, #2]
 800944e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	887a      	ldrh	r2, [r7, #2]
 8009454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	887a      	ldrh	r2, [r7, #2]
 8009460:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	887a      	ldrh	r2, [r7, #2]
 8009466:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947e:	2b40      	cmp	r3, #64	@ 0x40
 8009480:	d007      	beq.n	8009492 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800949a:	d17e      	bne.n	800959a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_SPI_TransmitReceive+0xf6>
 80094a4:	8afb      	ldrh	r3, [r7, #22]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d16c      	bne.n	8009584 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ae:	881a      	ldrh	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ba:	1c9a      	adds	r2, r3, #2
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094ce:	e059      	b.n	8009584 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d11b      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x162>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d016      	beq.n	8009516 <HAL_SPI_TransmitReceive+0x162>
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d113      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fe:	1c9a      	adds	r2, r3, #2
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b01      	cmp	r3, #1
 8009522:	d119      	bne.n	8009558 <HAL_SPI_TransmitReceive+0x1a4>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d014      	beq.n	8009558 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	b292      	uxth	r2, r2
 800953a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009540:	1c9a      	adds	r2, r3, #2
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009554:	2301      	movs	r3, #1
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009558:	f7fc faa8 	bl	8005aac <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009564:	429a      	cmp	r2, r3
 8009566:	d80d      	bhi.n	8009584 <HAL_SPI_TransmitReceive+0x1d0>
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956e:	d009      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e0bc      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1a0      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x11c>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009592:	b29b      	uxth	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d19b      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x11c>
 8009598:	e082      	b.n	80096a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x1f4>
 80095a2:	8afb      	ldrh	r3, [r7, #22]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d171      	bne.n	800968c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	330c      	adds	r3, #12
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ce:	e05d      	b.n	800968c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d11c      	bne.n	8009618 <HAL_SPI_TransmitReceive+0x264>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d017      	beq.n	8009618 <HAL_SPI_TransmitReceive+0x264>
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d114      	bne.n	8009618 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	330c      	adds	r3, #12
 80095f8:	7812      	ldrb	r2, [r2, #0]
 80095fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	d119      	bne.n	800965a <HAL_SPI_TransmitReceive+0x2a6>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d014      	beq.n	800965a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68da      	ldr	r2, [r3, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009656:	2301      	movs	r3, #1
 8009658:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800965a:	f7fc fa27 	bl	8005aac <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009666:	429a      	cmp	r2, r3
 8009668:	d803      	bhi.n	8009672 <HAL_SPI_TransmitReceive+0x2be>
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d102      	bne.n	8009678 <HAL_SPI_TransmitReceive+0x2c4>
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e038      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d19c      	bne.n	80095d0 <HAL_SPI_TransmitReceive+0x21c>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d197      	bne.n	80095d0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 f909 	bl	80098bc <SPI_EndRxTxTransaction>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d008      	beq.n	80096c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e01d      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	613b      	str	r3, [r7, #16]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80096fc:	2300      	movs	r3, #0
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3728      	adds	r7, #40	@ 0x28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009718:	f7fc f9c8 	bl	8005aac <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4413      	add	r3, r2
 8009726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009728:	f7fc f9c0 	bl	8005aac <HAL_GetTick>
 800972c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800972e:	4b39      	ldr	r3, [pc, #228]	@ (8009814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	015b      	lsls	r3, r3, #5
 8009734:	0d1b      	lsrs	r3, r3, #20
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	fb02 f303 	mul.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800973e:	e054      	b.n	80097ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d050      	beq.n	80097ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009748:	f7fc f9b0 	bl	8005aac <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	429a      	cmp	r2, r3
 8009756:	d902      	bls.n	800975e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d13d      	bne.n	80097da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800976c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009776:	d111      	bne.n	800979c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009780:	d004      	beq.n	800978c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800978a:	d107      	bne.n	800979c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800979a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a4:	d10f      	bne.n	80097c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e017      	b.n	800980a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4013      	ands	r3, r2
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	bf0c      	ite	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	2300      	movne	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	429a      	cmp	r2, r3
 8009806:	d19b      	bne.n	8009740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2000005c 	.word	0x2000005c

08009818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af02      	add	r7, sp, #8
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800982c:	d111      	bne.n	8009852 <SPI_EndRxTransaction+0x3a>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009836:	d004      	beq.n	8009842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009840:	d107      	bne.n	8009852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009850:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800985a:	d117      	bne.n	800988c <SPI_EndRxTransaction+0x74>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009864:	d112      	bne.n	800988c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2200      	movs	r2, #0
 800986e:	2101      	movs	r1, #1
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff ff49 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01a      	beq.n	80098b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009880:	f043 0220 	orr.w	r2, r3, #32
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e013      	b.n	80098b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2200      	movs	r2, #0
 8009894:	2180      	movs	r1, #128	@ 0x80
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff ff36 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a6:	f043 0220 	orr.w	r2, r3, #32
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e000      	b.n	80098b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2201      	movs	r2, #1
 80098d0:	2102      	movs	r1, #2
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff ff18 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	f043 0220 	orr.w	r2, r3, #32
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e013      	b.n	8009916 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2200      	movs	r2, #0
 80098f6:	2180      	movs	r1, #128	@ 0x80
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff ff05 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d007      	beq.n	8009914 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009908:	f043 0220 	orr.w	r2, r3, #32
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e000      	b.n	8009916 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e041      	b.n	80099b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fb fded 	bl	8005524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f000 f93f 	bl	8009be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d001      	beq.n	80099d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e032      	b.n	8009a3a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a18      	ldr	r2, [pc, #96]	@ (8009a44 <HAL_TIM_Base_Start+0x88>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00e      	beq.n	8009a04 <HAL_TIM_Base_Start+0x48>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ee:	d009      	beq.n	8009a04 <HAL_TIM_Base_Start+0x48>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a14      	ldr	r2, [pc, #80]	@ (8009a48 <HAL_TIM_Base_Start+0x8c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d004      	beq.n	8009a04 <HAL_TIM_Base_Start+0x48>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a13      	ldr	r2, [pc, #76]	@ (8009a4c <HAL_TIM_Base_Start+0x90>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d111      	bne.n	8009a28 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b06      	cmp	r3, #6
 8009a14:	d010      	beq.n	8009a38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0201 	orr.w	r2, r2, #1
 8009a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a26:	e007      	b.n	8009a38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40000400 	.word	0x40000400
 8009a4c:	40000800 	.word	0x40000800

08009a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_TIM_ConfigClockSource+0x1c>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e0b4      	b.n	8009bd6 <HAL_TIM_ConfigClockSource+0x186>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aa4:	d03e      	beq.n	8009b24 <HAL_TIM_ConfigClockSource+0xd4>
 8009aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aaa:	f200 8087 	bhi.w	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab2:	f000 8086 	beq.w	8009bc2 <HAL_TIM_ConfigClockSource+0x172>
 8009ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aba:	d87f      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009abc:	2b70      	cmp	r3, #112	@ 0x70
 8009abe:	d01a      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0xa6>
 8009ac0:	2b70      	cmp	r3, #112	@ 0x70
 8009ac2:	d87b      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009ac4:	2b60      	cmp	r3, #96	@ 0x60
 8009ac6:	d050      	beq.n	8009b6a <HAL_TIM_ConfigClockSource+0x11a>
 8009ac8:	2b60      	cmp	r3, #96	@ 0x60
 8009aca:	d877      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009acc:	2b50      	cmp	r3, #80	@ 0x50
 8009ace:	d03c      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0xfa>
 8009ad0:	2b50      	cmp	r3, #80	@ 0x50
 8009ad2:	d873      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009ad4:	2b40      	cmp	r3, #64	@ 0x40
 8009ad6:	d058      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0x13a>
 8009ad8:	2b40      	cmp	r3, #64	@ 0x40
 8009ada:	d86f      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009adc:	2b30      	cmp	r3, #48	@ 0x30
 8009ade:	d064      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x15a>
 8009ae0:	2b30      	cmp	r3, #48	@ 0x30
 8009ae2:	d86b      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d060      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x15a>
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d867      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d05c      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x15a>
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d05a      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x15a>
 8009af4:	e062      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b06:	f000 f950 	bl	8009daa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	609a      	str	r2, [r3, #8]
      break;
 8009b22:	e04f      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b34:	f000 f939 	bl	8009daa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b46:	609a      	str	r2, [r3, #8]
      break;
 8009b48:	e03c      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b56:	461a      	mov	r2, r3
 8009b58:	f000 f8b0 	bl	8009cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2150      	movs	r1, #80	@ 0x50
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f907 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 8009b68:	e02c      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b76:	461a      	mov	r2, r3
 8009b78:	f000 f8ce 	bl	8009d18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2160      	movs	r1, #96	@ 0x60
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f8f7 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 8009b88:	e01c      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b96:	461a      	mov	r2, r3
 8009b98:	f000 f890 	bl	8009cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2140      	movs	r1, #64	@ 0x40
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f8e7 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 8009ba8:	e00c      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f000 f8de 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 8009bba:	e003      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc0:	e000      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8009cb0 <TIM_Base_SetConfig+0xd0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d00b      	beq.n	8009c10 <TIM_Base_SetConfig+0x30>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfe:	d007      	beq.n	8009c10 <TIM_Base_SetConfig+0x30>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a2c      	ldr	r2, [pc, #176]	@ (8009cb4 <TIM_Base_SetConfig+0xd4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d003      	beq.n	8009c10 <TIM_Base_SetConfig+0x30>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8009cb8 <TIM_Base_SetConfig+0xd8>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d108      	bne.n	8009c22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a22      	ldr	r2, [pc, #136]	@ (8009cb0 <TIM_Base_SetConfig+0xd0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00b      	beq.n	8009c42 <TIM_Base_SetConfig+0x62>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c30:	d007      	beq.n	8009c42 <TIM_Base_SetConfig+0x62>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a1f      	ldr	r2, [pc, #124]	@ (8009cb4 <TIM_Base_SetConfig+0xd4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d003      	beq.n	8009c42 <TIM_Base_SetConfig+0x62>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb8 <TIM_Base_SetConfig+0xd8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d108      	bne.n	8009c54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8009cb0 <TIM_Base_SetConfig+0xd0>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d103      	bne.n	8009c88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	691a      	ldr	r2, [r3, #16]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f023 0201 	bic.w	r2, r3, #1
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	611a      	str	r2, [r3, #16]
  }
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc80      	pop	{r7}
 8009cae:	4770      	bx	lr
 8009cb0:	40012c00 	.word	0x40012c00
 8009cb4:	40000400 	.word	0x40000400
 8009cb8:	40000800 	.word	0x40000800

08009cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f023 0201 	bic.w	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f023 030a 	bic.w	r3, r3, #10
 8009cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	621a      	str	r2, [r3, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f023 0210 	bic.w	r2, r3, #16
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	031b      	lsls	r3, r3, #12
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	621a      	str	r2, [r3, #32]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr

08009d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f043 0307 	orr.w	r3, r3, #7
 8009d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	609a      	str	r2, [r3, #8]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b087      	sub	sp, #28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	021a      	lsls	r2, r3, #8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	609a      	str	r2, [r3, #8]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	e046      	b.n	8009e8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a16      	ldr	r2, [pc, #88]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d00e      	beq.n	8009e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4c:	d009      	beq.n	8009e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a12      	ldr	r2, [pc, #72]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d004      	beq.n	8009e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a10      	ldr	r2, [pc, #64]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d10c      	bne.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr
 8009e98:	40012c00 	.word	0x40012c00
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	40000800 	.word	0x40000800

08009ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e042      	b.n	8009f3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fb fb48 	bl	8005560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2224      	movs	r2, #36	@ 0x24
 8009ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9cf 	bl	800a28c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	695a      	ldr	r2, [r3, #20]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08a      	sub	sp, #40	@ 0x28
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d175      	bne.n	800a050 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <HAL_UART_Transmit+0x2c>
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e06e      	b.n	800a052 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2221      	movs	r2, #33	@ 0x21
 8009f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f82:	f7fb fd93 	bl	8005aac <HAL_GetTick>
 8009f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	88fa      	ldrh	r2, [r7, #6]
 8009f92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f9c:	d108      	bne.n	8009fb0 <HAL_UART_Transmit+0x6c>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d104      	bne.n	8009fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	e003      	b.n	8009fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fb8:	e02e      	b.n	800a018 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2180      	movs	r1, #128	@ 0x80
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f86d 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e03a      	b.n	800a052 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10b      	bne.n	8009ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	e007      	b.n	800a00a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	781a      	ldrb	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	3301      	adds	r3, #1
 800a008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a00e:	b29b      	uxth	r3, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1cb      	bne.n	8009fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2200      	movs	r2, #0
 800a02a:	2140      	movs	r1, #64	@ 0x40
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f839 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e006      	b.n	800a052 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2220      	movs	r2, #32
 800a048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e000      	b.n	800a052 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a050:	2302      	movs	r3, #2
  }
}
 800a052:	4618      	mov	r0, r3
 800a054:	3720      	adds	r7, #32
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4613      	mov	r3, r2
 800a066:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b20      	cmp	r3, #32
 800a072:	d112      	bne.n	800a09a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_UART_Receive_IT+0x26>
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e00b      	b.n	800a09c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	461a      	mov	r2, r3
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f860 	bl	800a156 <UART_Start_Receive_IT>
 800a096:	4603      	mov	r3, r0
 800a098:	e000      	b.n	800a09c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
  }
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b4:	e03b      	b.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d037      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0be:	f7fb fcf5 	bl	8005aac <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	6a3a      	ldr	r2, [r7, #32]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d302      	bcc.n	800a0d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e03a      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d023      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ea:	d020      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b40      	cmp	r3, #64	@ 0x40
 800a0f0:	d01d      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d116      	bne.n	800a12e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 f856 	bl	800a1c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2208      	movs	r2, #8
 800a120:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e00f      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4013      	ands	r3, r2
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	461a      	mov	r2, r3
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d0b4      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	4613      	mov	r3, r2
 800a162:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	88fa      	ldrh	r2, [r7, #6]
 800a16e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2222      	movs	r2, #34	@ 0x22
 800a180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a19a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695a      	ldr	r2, [r3, #20]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0201 	orr.w	r2, r2, #1
 800a1aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0220 	orr.w	r2, r2, #32
 800a1ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr

0800a1c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b095      	sub	sp, #84	@ 0x54
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	330c      	adds	r3, #12
 800a1ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f0:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e5      	bne.n	800a1d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3314      	adds	r3, #20
 800a20a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	61fb      	str	r3, [r7, #28]
   return(result);
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f023 0301 	bic.w	r3, r3, #1
 800a21a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3314      	adds	r3, #20
 800a222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a22a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e5      	bne.n	800a204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d119      	bne.n	800a274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	330c      	adds	r3, #12
 800a246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	e853 3f00 	ldrex	r3, [r3]
 800a24e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f023 0310 	bic.w	r3, r3, #16
 800a256:	647b      	str	r3, [r7, #68]	@ 0x44
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	330c      	adds	r3, #12
 800a25e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a260:	61ba      	str	r2, [r7, #24]
 800a262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	e841 2300 	strex	r3, r2, [r1]
 800a26c:	613b      	str	r3, [r7, #16]
   return(result);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e5      	bne.n	800a240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a282:	bf00      	nop
 800a284:	3754      	adds	r7, #84	@ 0x54
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a2c6:	f023 030c 	bic.w	r3, r3, #12
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6812      	ldr	r2, [r2, #0]
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a3a0 <UART_SetConfig+0x114>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d103      	bne.n	800a2fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a2f4:	f7fe fbac 	bl	8008a50 <HAL_RCC_GetPCLK2Freq>
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	e002      	b.n	800a302 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a2fc:	f7fe fb94 	bl	8008a28 <HAL_RCC_GetPCLK1Freq>
 800a300:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009a      	lsls	r2, r3, #2
 800a30c:	441a      	add	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	fbb2 f3f3 	udiv	r3, r2, r3
 800a318:	4a22      	ldr	r2, [pc, #136]	@ (800a3a4 <UART_SetConfig+0x118>)
 800a31a:	fba2 2303 	umull	r2, r3, r2, r3
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	0119      	lsls	r1, r3, #4
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009a      	lsls	r2, r3, #2
 800a32c:	441a      	add	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	fbb2 f2f3 	udiv	r2, r2, r3
 800a338:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a4 <UART_SetConfig+0x118>)
 800a33a:	fba3 0302 	umull	r0, r3, r3, r2
 800a33e:	095b      	lsrs	r3, r3, #5
 800a340:	2064      	movs	r0, #100	@ 0x64
 800a342:	fb00 f303 	mul.w	r3, r0, r3
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	3332      	adds	r3, #50	@ 0x32
 800a34c:	4a15      	ldr	r2, [pc, #84]	@ (800a3a4 <UART_SetConfig+0x118>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a358:	4419      	add	r1, r3
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009a      	lsls	r2, r3, #2
 800a364:	441a      	add	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a370:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a4 <UART_SetConfig+0x118>)
 800a372:	fba3 0302 	umull	r0, r3, r3, r2
 800a376:	095b      	lsrs	r3, r3, #5
 800a378:	2064      	movs	r0, #100	@ 0x64
 800a37a:	fb00 f303 	mul.w	r3, r0, r3
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	3332      	adds	r3, #50	@ 0x32
 800a384:	4a07      	ldr	r2, [pc, #28]	@ (800a3a4 <UART_SetConfig+0x118>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	f003 020f 	and.w	r2, r3, #15
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	440a      	add	r2, r1
 800a396:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40013800 	.word	0x40013800
 800a3a4:	51eb851f 	.word	0x51eb851f

0800a3a8 <__cvt>:
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ae:	461d      	mov	r5, r3
 800a3b0:	bfbb      	ittet	lt
 800a3b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a3b6:	461d      	movlt	r5, r3
 800a3b8:	2300      	movge	r3, #0
 800a3ba:	232d      	movlt	r3, #45	@ 0x2d
 800a3bc:	b088      	sub	sp, #32
 800a3be:	4614      	mov	r4, r2
 800a3c0:	bfb8      	it	lt
 800a3c2:	4614      	movlt	r4, r2
 800a3c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a3c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a3c8:	7013      	strb	r3, [r2, #0]
 800a3ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a3d0:	f023 0820 	bic.w	r8, r3, #32
 800a3d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3d8:	d005      	beq.n	800a3e6 <__cvt+0x3e>
 800a3da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a3de:	d100      	bne.n	800a3e2 <__cvt+0x3a>
 800a3e0:	3601      	adds	r6, #1
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e000      	b.n	800a3e8 <__cvt+0x40>
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	aa07      	add	r2, sp, #28
 800a3ea:	9204      	str	r2, [sp, #16]
 800a3ec:	aa06      	add	r2, sp, #24
 800a3ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a3f2:	e9cd 3600 	strd	r3, r6, [sp]
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	462b      	mov	r3, r5
 800a3fa:	f000 ff99 	bl	800b330 <_dtoa_r>
 800a3fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a402:	4607      	mov	r7, r0
 800a404:	d119      	bne.n	800a43a <__cvt+0x92>
 800a406:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a408:	07db      	lsls	r3, r3, #31
 800a40a:	d50e      	bpl.n	800a42a <__cvt+0x82>
 800a40c:	eb00 0906 	add.w	r9, r0, r6
 800a410:	2200      	movs	r2, #0
 800a412:	2300      	movs	r3, #0
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 fad0 	bl	80009bc <__aeabi_dcmpeq>
 800a41c:	b108      	cbz	r0, 800a422 <__cvt+0x7a>
 800a41e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a422:	2230      	movs	r2, #48	@ 0x30
 800a424:	9b07      	ldr	r3, [sp, #28]
 800a426:	454b      	cmp	r3, r9
 800a428:	d31e      	bcc.n	800a468 <__cvt+0xc0>
 800a42a:	4638      	mov	r0, r7
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a430:	1bdb      	subs	r3, r3, r7
 800a432:	6013      	str	r3, [r2, #0]
 800a434:	b008      	add	sp, #32
 800a436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a43e:	eb00 0906 	add.w	r9, r0, r6
 800a442:	d1e5      	bne.n	800a410 <__cvt+0x68>
 800a444:	7803      	ldrb	r3, [r0, #0]
 800a446:	2b30      	cmp	r3, #48	@ 0x30
 800a448:	d10a      	bne.n	800a460 <__cvt+0xb8>
 800a44a:	2200      	movs	r2, #0
 800a44c:	2300      	movs	r3, #0
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f6 fab3 	bl	80009bc <__aeabi_dcmpeq>
 800a456:	b918      	cbnz	r0, 800a460 <__cvt+0xb8>
 800a458:	f1c6 0601 	rsb	r6, r6, #1
 800a45c:	f8ca 6000 	str.w	r6, [sl]
 800a460:	f8da 3000 	ldr.w	r3, [sl]
 800a464:	4499      	add	r9, r3
 800a466:	e7d3      	b.n	800a410 <__cvt+0x68>
 800a468:	1c59      	adds	r1, r3, #1
 800a46a:	9107      	str	r1, [sp, #28]
 800a46c:	701a      	strb	r2, [r3, #0]
 800a46e:	e7d9      	b.n	800a424 <__cvt+0x7c>

0800a470 <__exponent>:
 800a470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a472:	2900      	cmp	r1, #0
 800a474:	bfb6      	itet	lt
 800a476:	232d      	movlt	r3, #45	@ 0x2d
 800a478:	232b      	movge	r3, #43	@ 0x2b
 800a47a:	4249      	neglt	r1, r1
 800a47c:	2909      	cmp	r1, #9
 800a47e:	7002      	strb	r2, [r0, #0]
 800a480:	7043      	strb	r3, [r0, #1]
 800a482:	dd29      	ble.n	800a4d8 <__exponent+0x68>
 800a484:	f10d 0307 	add.w	r3, sp, #7
 800a488:	461d      	mov	r5, r3
 800a48a:	270a      	movs	r7, #10
 800a48c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a490:	461a      	mov	r2, r3
 800a492:	fb07 1416 	mls	r4, r7, r6, r1
 800a496:	3430      	adds	r4, #48	@ 0x30
 800a498:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a49c:	460c      	mov	r4, r1
 800a49e:	2c63      	cmp	r4, #99	@ 0x63
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4a6:	dcf1      	bgt.n	800a48c <__exponent+0x1c>
 800a4a8:	3130      	adds	r1, #48	@ 0x30
 800a4aa:	1e94      	subs	r4, r2, #2
 800a4ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	1c41      	adds	r1, r0, #1
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	d30a      	bcc.n	800a4ce <__exponent+0x5e>
 800a4b8:	f10d 0309 	add.w	r3, sp, #9
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	42ac      	cmp	r4, r5
 800a4c0:	bf88      	it	hi
 800a4c2:	2300      	movhi	r3, #0
 800a4c4:	3302      	adds	r3, #2
 800a4c6:	4403      	add	r3, r0
 800a4c8:	1a18      	subs	r0, r3, r0
 800a4ca:	b003      	add	sp, #12
 800a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a4d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a4d6:	e7ed      	b.n	800a4b4 <__exponent+0x44>
 800a4d8:	2330      	movs	r3, #48	@ 0x30
 800a4da:	3130      	adds	r1, #48	@ 0x30
 800a4dc:	7083      	strb	r3, [r0, #2]
 800a4de:	70c1      	strb	r1, [r0, #3]
 800a4e0:	1d03      	adds	r3, r0, #4
 800a4e2:	e7f1      	b.n	800a4c8 <__exponent+0x58>

0800a4e4 <_printf_float>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	b091      	sub	sp, #68	@ 0x44
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	461f      	mov	r7, r3
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	f000 fe0d 	bl	800b114 <_localeconv_r>
 800a4fa:	6803      	ldr	r3, [r0, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	f7f5 fe30 	bl	8000164 <strlen>
 800a504:	2300      	movs	r3, #0
 800a506:	930e      	str	r3, [sp, #56]	@ 0x38
 800a508:	f8d8 3000 	ldr.w	r3, [r8]
 800a50c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a50e:	3307      	adds	r3, #7
 800a510:	f023 0307 	bic.w	r3, r3, #7
 800a514:	f103 0208 	add.w	r2, r3, #8
 800a518:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a51c:	f8d4 b000 	ldr.w	fp, [r4]
 800a520:	f8c8 2000 	str.w	r2, [r8]
 800a524:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a528:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a52c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a52e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a532:	f04f 32ff 	mov.w	r2, #4294967295
 800a536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a53a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a53e:	4b9c      	ldr	r3, [pc, #624]	@ (800a7b0 <_printf_float+0x2cc>)
 800a540:	f7f6 fa6e 	bl	8000a20 <__aeabi_dcmpun>
 800a544:	bb70      	cbnz	r0, 800a5a4 <_printf_float+0xc0>
 800a546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a54a:	f04f 32ff 	mov.w	r2, #4294967295
 800a54e:	4b98      	ldr	r3, [pc, #608]	@ (800a7b0 <_printf_float+0x2cc>)
 800a550:	f7f6 fa48 	bl	80009e4 <__aeabi_dcmple>
 800a554:	bb30      	cbnz	r0, 800a5a4 <_printf_float+0xc0>
 800a556:	2200      	movs	r2, #0
 800a558:	2300      	movs	r3, #0
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	f7f6 fa37 	bl	80009d0 <__aeabi_dcmplt>
 800a562:	b110      	cbz	r0, 800a56a <_printf_float+0x86>
 800a564:	232d      	movs	r3, #45	@ 0x2d
 800a566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a56a:	4a92      	ldr	r2, [pc, #584]	@ (800a7b4 <_printf_float+0x2d0>)
 800a56c:	4b92      	ldr	r3, [pc, #584]	@ (800a7b8 <_printf_float+0x2d4>)
 800a56e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a572:	bf8c      	ite	hi
 800a574:	4690      	movhi	r8, r2
 800a576:	4698      	movls	r8, r3
 800a578:	2303      	movs	r3, #3
 800a57a:	f04f 0900 	mov.w	r9, #0
 800a57e:	6123      	str	r3, [r4, #16]
 800a580:	f02b 0304 	bic.w	r3, fp, #4
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	4633      	mov	r3, r6
 800a588:	4621      	mov	r1, r4
 800a58a:	4628      	mov	r0, r5
 800a58c:	9700      	str	r7, [sp, #0]
 800a58e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a590:	f000 f9d4 	bl	800a93c <_printf_common>
 800a594:	3001      	adds	r0, #1
 800a596:	f040 8090 	bne.w	800a6ba <_printf_float+0x1d6>
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	b011      	add	sp, #68	@ 0x44
 800a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	f7f6 fa38 	bl	8000a20 <__aeabi_dcmpun>
 800a5b0:	b148      	cbz	r0, 800a5c6 <_printf_float+0xe2>
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfb8      	it	lt
 800a5b8:	232d      	movlt	r3, #45	@ 0x2d
 800a5ba:	4a80      	ldr	r2, [pc, #512]	@ (800a7bc <_printf_float+0x2d8>)
 800a5bc:	bfb8      	it	lt
 800a5be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a5c2:	4b7f      	ldr	r3, [pc, #508]	@ (800a7c0 <_printf_float+0x2dc>)
 800a5c4:	e7d3      	b.n	800a56e <_printf_float+0x8a>
 800a5c6:	6863      	ldr	r3, [r4, #4]
 800a5c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	d13f      	bne.n	800a650 <_printf_float+0x16c>
 800a5d0:	2306      	movs	r3, #6
 800a5d2:	6063      	str	r3, [r4, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	9206      	str	r2, [sp, #24]
 800a5de:	aa0e      	add	r2, sp, #56	@ 0x38
 800a5e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a5e4:	aa0d      	add	r2, sp, #52	@ 0x34
 800a5e6:	9203      	str	r2, [sp, #12]
 800a5e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a5ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a5f0:	6863      	ldr	r3, [r4, #4]
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800a5fc:	f7ff fed4 	bl	800a3a8 <__cvt>
 800a600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a602:	4680      	mov	r8, r0
 800a604:	2947      	cmp	r1, #71	@ 0x47
 800a606:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a608:	d128      	bne.n	800a65c <_printf_float+0x178>
 800a60a:	1cc8      	adds	r0, r1, #3
 800a60c:	db02      	blt.n	800a614 <_printf_float+0x130>
 800a60e:	6863      	ldr	r3, [r4, #4]
 800a610:	4299      	cmp	r1, r3
 800a612:	dd40      	ble.n	800a696 <_printf_float+0x1b2>
 800a614:	f1aa 0a02 	sub.w	sl, sl, #2
 800a618:	fa5f fa8a 	uxtb.w	sl, sl
 800a61c:	4652      	mov	r2, sl
 800a61e:	3901      	subs	r1, #1
 800a620:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a624:	910d      	str	r1, [sp, #52]	@ 0x34
 800a626:	f7ff ff23 	bl	800a470 <__exponent>
 800a62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a62c:	4681      	mov	r9, r0
 800a62e:	1813      	adds	r3, r2, r0
 800a630:	2a01      	cmp	r2, #1
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	dc02      	bgt.n	800a63c <_printf_float+0x158>
 800a636:	6822      	ldr	r2, [r4, #0]
 800a638:	07d2      	lsls	r2, r2, #31
 800a63a:	d501      	bpl.n	800a640 <_printf_float+0x15c>
 800a63c:	3301      	adds	r3, #1
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a644:	2b00      	cmp	r3, #0
 800a646:	d09e      	beq.n	800a586 <_printf_float+0xa2>
 800a648:	232d      	movs	r3, #45	@ 0x2d
 800a64a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a64e:	e79a      	b.n	800a586 <_printf_float+0xa2>
 800a650:	2947      	cmp	r1, #71	@ 0x47
 800a652:	d1bf      	bne.n	800a5d4 <_printf_float+0xf0>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1bd      	bne.n	800a5d4 <_printf_float+0xf0>
 800a658:	2301      	movs	r3, #1
 800a65a:	e7ba      	b.n	800a5d2 <_printf_float+0xee>
 800a65c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a660:	d9dc      	bls.n	800a61c <_printf_float+0x138>
 800a662:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a666:	d118      	bne.n	800a69a <_printf_float+0x1b6>
 800a668:	2900      	cmp	r1, #0
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	dd0b      	ble.n	800a686 <_printf_float+0x1a2>
 800a66e:	6121      	str	r1, [r4, #16]
 800a670:	b913      	cbnz	r3, 800a678 <_printf_float+0x194>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	07d0      	lsls	r0, r2, #31
 800a676:	d502      	bpl.n	800a67e <_printf_float+0x19a>
 800a678:	3301      	adds	r3, #1
 800a67a:	440b      	add	r3, r1
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	f04f 0900 	mov.w	r9, #0
 800a682:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a684:	e7dc      	b.n	800a640 <_printf_float+0x15c>
 800a686:	b913      	cbnz	r3, 800a68e <_printf_float+0x1aa>
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	07d2      	lsls	r2, r2, #31
 800a68c:	d501      	bpl.n	800a692 <_printf_float+0x1ae>
 800a68e:	3302      	adds	r3, #2
 800a690:	e7f4      	b.n	800a67c <_printf_float+0x198>
 800a692:	2301      	movs	r3, #1
 800a694:	e7f2      	b.n	800a67c <_printf_float+0x198>
 800a696:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a69c:	4299      	cmp	r1, r3
 800a69e:	db05      	blt.n	800a6ac <_printf_float+0x1c8>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	6121      	str	r1, [r4, #16]
 800a6a4:	07d8      	lsls	r0, r3, #31
 800a6a6:	d5ea      	bpl.n	800a67e <_printf_float+0x19a>
 800a6a8:	1c4b      	adds	r3, r1, #1
 800a6aa:	e7e7      	b.n	800a67c <_printf_float+0x198>
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	bfcc      	ite	gt
 800a6b0:	2201      	movgt	r2, #1
 800a6b2:	f1c1 0202 	rsble	r2, r1, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	e7e0      	b.n	800a67c <_printf_float+0x198>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	055a      	lsls	r2, r3, #21
 800a6be:	d407      	bmi.n	800a6d0 <_printf_float+0x1ec>
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	4642      	mov	r2, r8
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d12b      	bne.n	800a726 <_printf_float+0x242>
 800a6ce:	e764      	b.n	800a59a <_printf_float+0xb6>
 800a6d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6d4:	f240 80dc 	bls.w	800a890 <_printf_float+0x3ac>
 800a6d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f7f6 f96c 	bl	80009bc <__aeabi_dcmpeq>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d033      	beq.n	800a750 <_printf_float+0x26c>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	4a35      	ldr	r2, [pc, #212]	@ (800a7c4 <_printf_float+0x2e0>)
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f af51 	beq.w	800a59a <_printf_float+0xb6>
 800a6f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	db02      	blt.n	800a706 <_printf_float+0x222>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	07d8      	lsls	r0, r3, #31
 800a704:	d50f      	bpl.n	800a726 <_printf_float+0x242>
 800a706:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a70a:	4631      	mov	r1, r6
 800a70c:	4628      	mov	r0, r5
 800a70e:	47b8      	blx	r7
 800a710:	3001      	adds	r0, #1
 800a712:	f43f af42 	beq.w	800a59a <_printf_float+0xb6>
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a71e:	f104 0a1a 	add.w	sl, r4, #26
 800a722:	45c8      	cmp	r8, r9
 800a724:	dc09      	bgt.n	800a73a <_printf_float+0x256>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	079b      	lsls	r3, r3, #30
 800a72a:	f100 8102 	bmi.w	800a932 <_printf_float+0x44e>
 800a72e:	68e0      	ldr	r0, [r4, #12]
 800a730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a732:	4298      	cmp	r0, r3
 800a734:	bfb8      	it	lt
 800a736:	4618      	movlt	r0, r3
 800a738:	e731      	b.n	800a59e <_printf_float+0xba>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4652      	mov	r2, sl
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	f43f af28 	beq.w	800a59a <_printf_float+0xb6>
 800a74a:	f109 0901 	add.w	r9, r9, #1
 800a74e:	e7e8      	b.n	800a722 <_printf_float+0x23e>
 800a750:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a752:	2b00      	cmp	r3, #0
 800a754:	dc38      	bgt.n	800a7c8 <_printf_float+0x2e4>
 800a756:	2301      	movs	r3, #1
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	4a19      	ldr	r2, [pc, #100]	@ (800a7c4 <_printf_float+0x2e0>)
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f af1a 	beq.w	800a59a <_printf_float+0xb6>
 800a766:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a76a:	ea59 0303 	orrs.w	r3, r9, r3
 800a76e:	d102      	bne.n	800a776 <_printf_float+0x292>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07d9      	lsls	r1, r3, #31
 800a774:	d5d7      	bpl.n	800a726 <_printf_float+0x242>
 800a776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f af0a 	beq.w	800a59a <_printf_float+0xb6>
 800a786:	f04f 0a00 	mov.w	sl, #0
 800a78a:	f104 0b1a 	add.w	fp, r4, #26
 800a78e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a790:	425b      	negs	r3, r3
 800a792:	4553      	cmp	r3, sl
 800a794:	dc01      	bgt.n	800a79a <_printf_float+0x2b6>
 800a796:	464b      	mov	r3, r9
 800a798:	e793      	b.n	800a6c2 <_printf_float+0x1de>
 800a79a:	2301      	movs	r3, #1
 800a79c:	465a      	mov	r2, fp
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b8      	blx	r7
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	f43f aef8 	beq.w	800a59a <_printf_float+0xb6>
 800a7aa:	f10a 0a01 	add.w	sl, sl, #1
 800a7ae:	e7ee      	b.n	800a78e <_printf_float+0x2aa>
 800a7b0:	7fefffff 	.word	0x7fefffff
 800a7b4:	0800d6da 	.word	0x0800d6da
 800a7b8:	0800d6d6 	.word	0x0800d6d6
 800a7bc:	0800d6e2 	.word	0x0800d6e2
 800a7c0:	0800d6de 	.word	0x0800d6de
 800a7c4:	0800d6e6 	.word	0x0800d6e6
 800a7c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a7ce:	4553      	cmp	r3, sl
 800a7d0:	bfa8      	it	ge
 800a7d2:	4653      	movge	r3, sl
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	4699      	mov	r9, r3
 800a7d8:	dc36      	bgt.n	800a848 <_printf_float+0x364>
 800a7da:	f04f 0b00 	mov.w	fp, #0
 800a7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7e2:	f104 021a 	add.w	r2, r4, #26
 800a7e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ea:	eba3 0309 	sub.w	r3, r3, r9
 800a7ee:	455b      	cmp	r3, fp
 800a7f0:	dc31      	bgt.n	800a856 <_printf_float+0x372>
 800a7f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f4:	459a      	cmp	sl, r3
 800a7f6:	dc3a      	bgt.n	800a86e <_printf_float+0x38a>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	07da      	lsls	r2, r3, #31
 800a7fc:	d437      	bmi.n	800a86e <_printf_float+0x38a>
 800a7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a800:	ebaa 0903 	sub.w	r9, sl, r3
 800a804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a806:	ebaa 0303 	sub.w	r3, sl, r3
 800a80a:	4599      	cmp	r9, r3
 800a80c:	bfa8      	it	ge
 800a80e:	4699      	movge	r9, r3
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	dc33      	bgt.n	800a87e <_printf_float+0x39a>
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a81e:	f104 0b1a 	add.w	fp, r4, #26
 800a822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a824:	ebaa 0303 	sub.w	r3, sl, r3
 800a828:	eba3 0309 	sub.w	r3, r3, r9
 800a82c:	4543      	cmp	r3, r8
 800a82e:	f77f af7a 	ble.w	800a726 <_printf_float+0x242>
 800a832:	2301      	movs	r3, #1
 800a834:	465a      	mov	r2, fp
 800a836:	4631      	mov	r1, r6
 800a838:	4628      	mov	r0, r5
 800a83a:	47b8      	blx	r7
 800a83c:	3001      	adds	r0, #1
 800a83e:	f43f aeac 	beq.w	800a59a <_printf_float+0xb6>
 800a842:	f108 0801 	add.w	r8, r8, #1
 800a846:	e7ec      	b.n	800a822 <_printf_float+0x33e>
 800a848:	4642      	mov	r2, r8
 800a84a:	4631      	mov	r1, r6
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b8      	blx	r7
 800a850:	3001      	adds	r0, #1
 800a852:	d1c2      	bne.n	800a7da <_printf_float+0x2f6>
 800a854:	e6a1      	b.n	800a59a <_printf_float+0xb6>
 800a856:	2301      	movs	r3, #1
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	920a      	str	r2, [sp, #40]	@ 0x28
 800a85e:	47b8      	blx	r7
 800a860:	3001      	adds	r0, #1
 800a862:	f43f ae9a 	beq.w	800a59a <_printf_float+0xb6>
 800a866:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a868:	f10b 0b01 	add.w	fp, fp, #1
 800a86c:	e7bb      	b.n	800a7e6 <_printf_float+0x302>
 800a86e:	4631      	mov	r1, r6
 800a870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	d1c0      	bne.n	800a7fe <_printf_float+0x31a>
 800a87c:	e68d      	b.n	800a59a <_printf_float+0xb6>
 800a87e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a880:	464b      	mov	r3, r9
 800a882:	4631      	mov	r1, r6
 800a884:	4628      	mov	r0, r5
 800a886:	4442      	add	r2, r8
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	d1c3      	bne.n	800a816 <_printf_float+0x332>
 800a88e:	e684      	b.n	800a59a <_printf_float+0xb6>
 800a890:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a894:	f1ba 0f01 	cmp.w	sl, #1
 800a898:	dc01      	bgt.n	800a89e <_printf_float+0x3ba>
 800a89a:	07db      	lsls	r3, r3, #31
 800a89c:	d536      	bpl.n	800a90c <_printf_float+0x428>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b8      	blx	r7
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	f43f ae76 	beq.w	800a59a <_printf_float+0xb6>
 800a8ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f ae6e 	beq.w	800a59a <_printf_float+0xb6>
 800a8be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ca:	f7f6 f877 	bl	80009bc <__aeabi_dcmpeq>
 800a8ce:	b9c0      	cbnz	r0, 800a902 <_printf_float+0x41e>
 800a8d0:	4653      	mov	r3, sl
 800a8d2:	f108 0201 	add.w	r2, r8, #1
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4628      	mov	r0, r5
 800a8da:	47b8      	blx	r7
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d10c      	bne.n	800a8fa <_printf_float+0x416>
 800a8e0:	e65b      	b.n	800a59a <_printf_float+0xb6>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	465a      	mov	r2, fp
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b8      	blx	r7
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	f43f ae54 	beq.w	800a59a <_printf_float+0xb6>
 800a8f2:	f108 0801 	add.w	r8, r8, #1
 800a8f6:	45d0      	cmp	r8, sl
 800a8f8:	dbf3      	blt.n	800a8e2 <_printf_float+0x3fe>
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a900:	e6e0      	b.n	800a6c4 <_printf_float+0x1e0>
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	f104 0b1a 	add.w	fp, r4, #26
 800a90a:	e7f4      	b.n	800a8f6 <_printf_float+0x412>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4642      	mov	r2, r8
 800a910:	e7e1      	b.n	800a8d6 <_printf_float+0x3f2>
 800a912:	2301      	movs	r3, #1
 800a914:	464a      	mov	r2, r9
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	f43f ae3c 	beq.w	800a59a <_printf_float+0xb6>
 800a922:	f108 0801 	add.w	r8, r8, #1
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a92a:	1a5b      	subs	r3, r3, r1
 800a92c:	4543      	cmp	r3, r8
 800a92e:	dcf0      	bgt.n	800a912 <_printf_float+0x42e>
 800a930:	e6fd      	b.n	800a72e <_printf_float+0x24a>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	f104 0919 	add.w	r9, r4, #25
 800a93a:	e7f4      	b.n	800a926 <_printf_float+0x442>

0800a93c <_printf_common>:
 800a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a940:	4616      	mov	r6, r2
 800a942:	4698      	mov	r8, r3
 800a944:	688a      	ldr	r2, [r1, #8]
 800a946:	690b      	ldr	r3, [r1, #16]
 800a948:	4607      	mov	r7, r0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	bfb8      	it	lt
 800a94e:	4613      	movlt	r3, r2
 800a950:	6033      	str	r3, [r6, #0]
 800a952:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a956:	460c      	mov	r4, r1
 800a958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a95c:	b10a      	cbz	r2, 800a962 <_printf_common+0x26>
 800a95e:	3301      	adds	r3, #1
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	0699      	lsls	r1, r3, #26
 800a966:	bf42      	ittt	mi
 800a968:	6833      	ldrmi	r3, [r6, #0]
 800a96a:	3302      	addmi	r3, #2
 800a96c:	6033      	strmi	r3, [r6, #0]
 800a96e:	6825      	ldr	r5, [r4, #0]
 800a970:	f015 0506 	ands.w	r5, r5, #6
 800a974:	d106      	bne.n	800a984 <_printf_common+0x48>
 800a976:	f104 0a19 	add.w	sl, r4, #25
 800a97a:	68e3      	ldr	r3, [r4, #12]
 800a97c:	6832      	ldr	r2, [r6, #0]
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	42ab      	cmp	r3, r5
 800a982:	dc2b      	bgt.n	800a9dc <_printf_common+0xa0>
 800a984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	3b00      	subs	r3, #0
 800a98c:	bf18      	it	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	0692      	lsls	r2, r2, #26
 800a992:	d430      	bmi.n	800a9f6 <_printf_common+0xba>
 800a994:	4641      	mov	r1, r8
 800a996:	4638      	mov	r0, r7
 800a998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a99c:	47c8      	blx	r9
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d023      	beq.n	800a9ea <_printf_common+0xae>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	f003 0306 	and.w	r3, r3, #6
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	bf14      	ite	ne
 800a9ae:	2500      	movne	r5, #0
 800a9b0:	6833      	ldreq	r3, [r6, #0]
 800a9b2:	f04f 0600 	mov.w	r6, #0
 800a9b6:	bf08      	it	eq
 800a9b8:	68e5      	ldreq	r5, [r4, #12]
 800a9ba:	f104 041a 	add.w	r4, r4, #26
 800a9be:	bf08      	it	eq
 800a9c0:	1aed      	subeq	r5, r5, r3
 800a9c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a9c6:	bf08      	it	eq
 800a9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	bfc4      	itt	gt
 800a9d0:	1a9b      	subgt	r3, r3, r2
 800a9d2:	18ed      	addgt	r5, r5, r3
 800a9d4:	42b5      	cmp	r5, r6
 800a9d6:	d11a      	bne.n	800aa0e <_printf_common+0xd2>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e008      	b.n	800a9ee <_printf_common+0xb2>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4652      	mov	r2, sl
 800a9e0:	4641      	mov	r1, r8
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	47c8      	blx	r9
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d103      	bne.n	800a9f2 <_printf_common+0xb6>
 800a9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	3501      	adds	r5, #1
 800a9f4:	e7c1      	b.n	800a97a <_printf_common+0x3e>
 800a9f6:	2030      	movs	r0, #48	@ 0x30
 800a9f8:	18e1      	adds	r1, r4, r3
 800a9fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa04:	4422      	add	r2, r4
 800aa06:	3302      	adds	r3, #2
 800aa08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa0c:	e7c2      	b.n	800a994 <_printf_common+0x58>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4622      	mov	r2, r4
 800aa12:	4641      	mov	r1, r8
 800aa14:	4638      	mov	r0, r7
 800aa16:	47c8      	blx	r9
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d0e6      	beq.n	800a9ea <_printf_common+0xae>
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	e7d9      	b.n	800a9d4 <_printf_common+0x98>

0800aa20 <_printf_i>:
 800aa20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	7e0f      	ldrb	r7, [r1, #24]
 800aa26:	4691      	mov	r9, r2
 800aa28:	2f78      	cmp	r7, #120	@ 0x78
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	469a      	mov	sl, r3
 800aa30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa36:	d807      	bhi.n	800aa48 <_printf_i+0x28>
 800aa38:	2f62      	cmp	r7, #98	@ 0x62
 800aa3a:	d80a      	bhi.n	800aa52 <_printf_i+0x32>
 800aa3c:	2f00      	cmp	r7, #0
 800aa3e:	f000 80d1 	beq.w	800abe4 <_printf_i+0x1c4>
 800aa42:	2f58      	cmp	r7, #88	@ 0x58
 800aa44:	f000 80b8 	beq.w	800abb8 <_printf_i+0x198>
 800aa48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa50:	e03a      	b.n	800aac8 <_printf_i+0xa8>
 800aa52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa56:	2b15      	cmp	r3, #21
 800aa58:	d8f6      	bhi.n	800aa48 <_printf_i+0x28>
 800aa5a:	a101      	add	r1, pc, #4	@ (adr r1, 800aa60 <_printf_i+0x40>)
 800aa5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa60:	0800aab9 	.word	0x0800aab9
 800aa64:	0800aacd 	.word	0x0800aacd
 800aa68:	0800aa49 	.word	0x0800aa49
 800aa6c:	0800aa49 	.word	0x0800aa49
 800aa70:	0800aa49 	.word	0x0800aa49
 800aa74:	0800aa49 	.word	0x0800aa49
 800aa78:	0800aacd 	.word	0x0800aacd
 800aa7c:	0800aa49 	.word	0x0800aa49
 800aa80:	0800aa49 	.word	0x0800aa49
 800aa84:	0800aa49 	.word	0x0800aa49
 800aa88:	0800aa49 	.word	0x0800aa49
 800aa8c:	0800abcb 	.word	0x0800abcb
 800aa90:	0800aaf7 	.word	0x0800aaf7
 800aa94:	0800ab85 	.word	0x0800ab85
 800aa98:	0800aa49 	.word	0x0800aa49
 800aa9c:	0800aa49 	.word	0x0800aa49
 800aaa0:	0800abed 	.word	0x0800abed
 800aaa4:	0800aa49 	.word	0x0800aa49
 800aaa8:	0800aaf7 	.word	0x0800aaf7
 800aaac:	0800aa49 	.word	0x0800aa49
 800aab0:	0800aa49 	.word	0x0800aa49
 800aab4:	0800ab8d 	.word	0x0800ab8d
 800aab8:	6833      	ldr	r3, [r6, #0]
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6032      	str	r2, [r6, #0]
 800aac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aac8:	2301      	movs	r3, #1
 800aaca:	e09c      	b.n	800ac06 <_printf_i+0x1e6>
 800aacc:	6833      	ldr	r3, [r6, #0]
 800aace:	6820      	ldr	r0, [r4, #0]
 800aad0:	1d19      	adds	r1, r3, #4
 800aad2:	6031      	str	r1, [r6, #0]
 800aad4:	0606      	lsls	r6, r0, #24
 800aad6:	d501      	bpl.n	800aadc <_printf_i+0xbc>
 800aad8:	681d      	ldr	r5, [r3, #0]
 800aada:	e003      	b.n	800aae4 <_printf_i+0xc4>
 800aadc:	0645      	lsls	r5, r0, #25
 800aade:	d5fb      	bpl.n	800aad8 <_printf_i+0xb8>
 800aae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aae4:	2d00      	cmp	r5, #0
 800aae6:	da03      	bge.n	800aaf0 <_printf_i+0xd0>
 800aae8:	232d      	movs	r3, #45	@ 0x2d
 800aaea:	426d      	negs	r5, r5
 800aaec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaf0:	230a      	movs	r3, #10
 800aaf2:	4858      	ldr	r0, [pc, #352]	@ (800ac54 <_printf_i+0x234>)
 800aaf4:	e011      	b.n	800ab1a <_printf_i+0xfa>
 800aaf6:	6821      	ldr	r1, [r4, #0]
 800aaf8:	6833      	ldr	r3, [r6, #0]
 800aafa:	0608      	lsls	r0, r1, #24
 800aafc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab00:	d402      	bmi.n	800ab08 <_printf_i+0xe8>
 800ab02:	0649      	lsls	r1, r1, #25
 800ab04:	bf48      	it	mi
 800ab06:	b2ad      	uxthmi	r5, r5
 800ab08:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab0a:	6033      	str	r3, [r6, #0]
 800ab0c:	bf14      	ite	ne
 800ab0e:	230a      	movne	r3, #10
 800ab10:	2308      	moveq	r3, #8
 800ab12:	4850      	ldr	r0, [pc, #320]	@ (800ac54 <_printf_i+0x234>)
 800ab14:	2100      	movs	r1, #0
 800ab16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab1a:	6866      	ldr	r6, [r4, #4]
 800ab1c:	2e00      	cmp	r6, #0
 800ab1e:	60a6      	str	r6, [r4, #8]
 800ab20:	db05      	blt.n	800ab2e <_printf_i+0x10e>
 800ab22:	6821      	ldr	r1, [r4, #0]
 800ab24:	432e      	orrs	r6, r5
 800ab26:	f021 0104 	bic.w	r1, r1, #4
 800ab2a:	6021      	str	r1, [r4, #0]
 800ab2c:	d04b      	beq.n	800abc6 <_printf_i+0x1a6>
 800ab2e:	4616      	mov	r6, r2
 800ab30:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab34:	fb03 5711 	mls	r7, r3, r1, r5
 800ab38:	5dc7      	ldrb	r7, [r0, r7]
 800ab3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab3e:	462f      	mov	r7, r5
 800ab40:	42bb      	cmp	r3, r7
 800ab42:	460d      	mov	r5, r1
 800ab44:	d9f4      	bls.n	800ab30 <_printf_i+0x110>
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	d10b      	bne.n	800ab62 <_printf_i+0x142>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	07df      	lsls	r7, r3, #31
 800ab4e:	d508      	bpl.n	800ab62 <_printf_i+0x142>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	6861      	ldr	r1, [r4, #4]
 800ab54:	4299      	cmp	r1, r3
 800ab56:	bfde      	ittt	le
 800ab58:	2330      	movle	r3, #48	@ 0x30
 800ab5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab62:	1b92      	subs	r2, r2, r6
 800ab64:	6122      	str	r2, [r4, #16]
 800ab66:	464b      	mov	r3, r9
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f8cd a000 	str.w	sl, [sp]
 800ab70:	aa03      	add	r2, sp, #12
 800ab72:	f7ff fee3 	bl	800a93c <_printf_common>
 800ab76:	3001      	adds	r0, #1
 800ab78:	d14a      	bne.n	800ac10 <_printf_i+0x1f0>
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7e:	b004      	add	sp, #16
 800ab80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	f043 0320 	orr.w	r3, r3, #32
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	2778      	movs	r7, #120	@ 0x78
 800ab8e:	4832      	ldr	r0, [pc, #200]	@ (800ac58 <_printf_i+0x238>)
 800ab90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	061f      	lsls	r7, r3, #24
 800ab9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab9e:	d402      	bmi.n	800aba6 <_printf_i+0x186>
 800aba0:	065f      	lsls	r7, r3, #25
 800aba2:	bf48      	it	mi
 800aba4:	b2ad      	uxthmi	r5, r5
 800aba6:	6031      	str	r1, [r6, #0]
 800aba8:	07d9      	lsls	r1, r3, #31
 800abaa:	bf44      	itt	mi
 800abac:	f043 0320 	orrmi.w	r3, r3, #32
 800abb0:	6023      	strmi	r3, [r4, #0]
 800abb2:	b11d      	cbz	r5, 800abbc <_printf_i+0x19c>
 800abb4:	2310      	movs	r3, #16
 800abb6:	e7ad      	b.n	800ab14 <_printf_i+0xf4>
 800abb8:	4826      	ldr	r0, [pc, #152]	@ (800ac54 <_printf_i+0x234>)
 800abba:	e7e9      	b.n	800ab90 <_printf_i+0x170>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	f023 0320 	bic.w	r3, r3, #32
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	e7f6      	b.n	800abb4 <_printf_i+0x194>
 800abc6:	4616      	mov	r6, r2
 800abc8:	e7bd      	b.n	800ab46 <_printf_i+0x126>
 800abca:	6833      	ldr	r3, [r6, #0]
 800abcc:	6825      	ldr	r5, [r4, #0]
 800abce:	1d18      	adds	r0, r3, #4
 800abd0:	6961      	ldr	r1, [r4, #20]
 800abd2:	6030      	str	r0, [r6, #0]
 800abd4:	062e      	lsls	r6, r5, #24
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	d501      	bpl.n	800abde <_printf_i+0x1be>
 800abda:	6019      	str	r1, [r3, #0]
 800abdc:	e002      	b.n	800abe4 <_printf_i+0x1c4>
 800abde:	0668      	lsls	r0, r5, #25
 800abe0:	d5fb      	bpl.n	800abda <_printf_i+0x1ba>
 800abe2:	8019      	strh	r1, [r3, #0]
 800abe4:	2300      	movs	r3, #0
 800abe6:	4616      	mov	r6, r2
 800abe8:	6123      	str	r3, [r4, #16]
 800abea:	e7bc      	b.n	800ab66 <_printf_i+0x146>
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	2100      	movs	r1, #0
 800abf0:	1d1a      	adds	r2, r3, #4
 800abf2:	6032      	str	r2, [r6, #0]
 800abf4:	681e      	ldr	r6, [r3, #0]
 800abf6:	6862      	ldr	r2, [r4, #4]
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 fb02 	bl	800b202 <memchr>
 800abfe:	b108      	cbz	r0, 800ac04 <_printf_i+0x1e4>
 800ac00:	1b80      	subs	r0, r0, r6
 800ac02:	6060      	str	r0, [r4, #4]
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac0e:	e7aa      	b.n	800ab66 <_printf_i+0x146>
 800ac10:	4632      	mov	r2, r6
 800ac12:	4649      	mov	r1, r9
 800ac14:	4640      	mov	r0, r8
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	47d0      	blx	sl
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d0ad      	beq.n	800ab7a <_printf_i+0x15a>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	079b      	lsls	r3, r3, #30
 800ac22:	d413      	bmi.n	800ac4c <_printf_i+0x22c>
 800ac24:	68e0      	ldr	r0, [r4, #12]
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	4298      	cmp	r0, r3
 800ac2a:	bfb8      	it	lt
 800ac2c:	4618      	movlt	r0, r3
 800ac2e:	e7a6      	b.n	800ab7e <_printf_i+0x15e>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4632      	mov	r2, r6
 800ac34:	4649      	mov	r1, r9
 800ac36:	4640      	mov	r0, r8
 800ac38:	47d0      	blx	sl
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d09d      	beq.n	800ab7a <_printf_i+0x15a>
 800ac3e:	3501      	adds	r5, #1
 800ac40:	68e3      	ldr	r3, [r4, #12]
 800ac42:	9903      	ldr	r1, [sp, #12]
 800ac44:	1a5b      	subs	r3, r3, r1
 800ac46:	42ab      	cmp	r3, r5
 800ac48:	dcf2      	bgt.n	800ac30 <_printf_i+0x210>
 800ac4a:	e7eb      	b.n	800ac24 <_printf_i+0x204>
 800ac4c:	2500      	movs	r5, #0
 800ac4e:	f104 0619 	add.w	r6, r4, #25
 800ac52:	e7f5      	b.n	800ac40 <_printf_i+0x220>
 800ac54:	0800d6e8 	.word	0x0800d6e8
 800ac58:	0800d6f9 	.word	0x0800d6f9

0800ac5c <std>:
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	b510      	push	{r4, lr}
 800ac60:	4604      	mov	r4, r0
 800ac62:	e9c0 3300 	strd	r3, r3, [r0]
 800ac66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac6a:	6083      	str	r3, [r0, #8]
 800ac6c:	8181      	strh	r1, [r0, #12]
 800ac6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac70:	81c2      	strh	r2, [r0, #14]
 800ac72:	6183      	str	r3, [r0, #24]
 800ac74:	4619      	mov	r1, r3
 800ac76:	2208      	movs	r2, #8
 800ac78:	305c      	adds	r0, #92	@ 0x5c
 800ac7a:	f000 fa1d 	bl	800b0b8 <memset>
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	@ (800acb4 <std+0x58>)
 800ac80:	6224      	str	r4, [r4, #32]
 800ac82:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac84:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <std+0x5c>)
 800ac86:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac88:	4b0c      	ldr	r3, [pc, #48]	@ (800acbc <std+0x60>)
 800ac8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <std+0x64>)
 800ac8e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac90:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <std+0x68>)
 800ac92:	429c      	cmp	r4, r3
 800ac94:	d006      	beq.n	800aca4 <std+0x48>
 800ac96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac9a:	4294      	cmp	r4, r2
 800ac9c:	d002      	beq.n	800aca4 <std+0x48>
 800ac9e:	33d0      	adds	r3, #208	@ 0xd0
 800aca0:	429c      	cmp	r4, r3
 800aca2:	d105      	bne.n	800acb0 <std+0x54>
 800aca4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acac:	f000 baa6 	b.w	800b1fc <__retarget_lock_init_recursive>
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	bf00      	nop
 800acb4:	0800af09 	.word	0x0800af09
 800acb8:	0800af2b 	.word	0x0800af2b
 800acbc:	0800af63 	.word	0x0800af63
 800acc0:	0800af87 	.word	0x0800af87
 800acc4:	200006a8 	.word	0x200006a8

0800acc8 <stdio_exit_handler>:
 800acc8:	4a02      	ldr	r2, [pc, #8]	@ (800acd4 <stdio_exit_handler+0xc>)
 800acca:	4903      	ldr	r1, [pc, #12]	@ (800acd8 <stdio_exit_handler+0x10>)
 800accc:	4803      	ldr	r0, [pc, #12]	@ (800acdc <stdio_exit_handler+0x14>)
 800acce:	f000 b869 	b.w	800ada4 <_fwalk_sglue>
 800acd2:	bf00      	nop
 800acd4:	20000068 	.word	0x20000068
 800acd8:	0800cdf9 	.word	0x0800cdf9
 800acdc:	20000078 	.word	0x20000078

0800ace0 <cleanup_stdio>:
 800ace0:	6841      	ldr	r1, [r0, #4]
 800ace2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <cleanup_stdio+0x34>)
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4299      	cmp	r1, r3
 800ace8:	4604      	mov	r4, r0
 800acea:	d001      	beq.n	800acf0 <cleanup_stdio+0x10>
 800acec:	f002 f884 	bl	800cdf8 <_fflush_r>
 800acf0:	68a1      	ldr	r1, [r4, #8]
 800acf2:	4b09      	ldr	r3, [pc, #36]	@ (800ad18 <cleanup_stdio+0x38>)
 800acf4:	4299      	cmp	r1, r3
 800acf6:	d002      	beq.n	800acfe <cleanup_stdio+0x1e>
 800acf8:	4620      	mov	r0, r4
 800acfa:	f002 f87d 	bl	800cdf8 <_fflush_r>
 800acfe:	68e1      	ldr	r1, [r4, #12]
 800ad00:	4b06      	ldr	r3, [pc, #24]	@ (800ad1c <cleanup_stdio+0x3c>)
 800ad02:	4299      	cmp	r1, r3
 800ad04:	d004      	beq.n	800ad10 <cleanup_stdio+0x30>
 800ad06:	4620      	mov	r0, r4
 800ad08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0c:	f002 b874 	b.w	800cdf8 <_fflush_r>
 800ad10:	bd10      	pop	{r4, pc}
 800ad12:	bf00      	nop
 800ad14:	200006a8 	.word	0x200006a8
 800ad18:	20000710 	.word	0x20000710
 800ad1c:	20000778 	.word	0x20000778

0800ad20 <global_stdio_init.part.0>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	4b0b      	ldr	r3, [pc, #44]	@ (800ad50 <global_stdio_init.part.0+0x30>)
 800ad24:	4c0b      	ldr	r4, [pc, #44]	@ (800ad54 <global_stdio_init.part.0+0x34>)
 800ad26:	4a0c      	ldr	r2, [pc, #48]	@ (800ad58 <global_stdio_init.part.0+0x38>)
 800ad28:	4620      	mov	r0, r4
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	2104      	movs	r1, #4
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f7ff ff94 	bl	800ac5c <std>
 800ad34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad38:	2201      	movs	r2, #1
 800ad3a:	2109      	movs	r1, #9
 800ad3c:	f7ff ff8e 	bl	800ac5c <std>
 800ad40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad44:	2202      	movs	r2, #2
 800ad46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad4a:	2112      	movs	r1, #18
 800ad4c:	f7ff bf86 	b.w	800ac5c <std>
 800ad50:	200007e0 	.word	0x200007e0
 800ad54:	200006a8 	.word	0x200006a8
 800ad58:	0800acc9 	.word	0x0800acc9

0800ad5c <__sfp_lock_acquire>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	@ (800ad64 <__sfp_lock_acquire+0x8>)
 800ad5e:	f000 ba4e 	b.w	800b1fe <__retarget_lock_acquire_recursive>
 800ad62:	bf00      	nop
 800ad64:	200007e9 	.word	0x200007e9

0800ad68 <__sfp_lock_release>:
 800ad68:	4801      	ldr	r0, [pc, #4]	@ (800ad70 <__sfp_lock_release+0x8>)
 800ad6a:	f000 ba49 	b.w	800b200 <__retarget_lock_release_recursive>
 800ad6e:	bf00      	nop
 800ad70:	200007e9 	.word	0x200007e9

0800ad74 <__sinit>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	4604      	mov	r4, r0
 800ad78:	f7ff fff0 	bl	800ad5c <__sfp_lock_acquire>
 800ad7c:	6a23      	ldr	r3, [r4, #32]
 800ad7e:	b11b      	cbz	r3, 800ad88 <__sinit+0x14>
 800ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad84:	f7ff bff0 	b.w	800ad68 <__sfp_lock_release>
 800ad88:	4b04      	ldr	r3, [pc, #16]	@ (800ad9c <__sinit+0x28>)
 800ad8a:	6223      	str	r3, [r4, #32]
 800ad8c:	4b04      	ldr	r3, [pc, #16]	@ (800ada0 <__sinit+0x2c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1f5      	bne.n	800ad80 <__sinit+0xc>
 800ad94:	f7ff ffc4 	bl	800ad20 <global_stdio_init.part.0>
 800ad98:	e7f2      	b.n	800ad80 <__sinit+0xc>
 800ad9a:	bf00      	nop
 800ad9c:	0800ace1 	.word	0x0800ace1
 800ada0:	200007e0 	.word	0x200007e0

0800ada4 <_fwalk_sglue>:
 800ada4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada8:	4607      	mov	r7, r0
 800adaa:	4688      	mov	r8, r1
 800adac:	4614      	mov	r4, r2
 800adae:	2600      	movs	r6, #0
 800adb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb4:	f1b9 0901 	subs.w	r9, r9, #1
 800adb8:	d505      	bpl.n	800adc6 <_fwalk_sglue+0x22>
 800adba:	6824      	ldr	r4, [r4, #0]
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	d1f7      	bne.n	800adb0 <_fwalk_sglue+0xc>
 800adc0:	4630      	mov	r0, r6
 800adc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc6:	89ab      	ldrh	r3, [r5, #12]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d907      	bls.n	800addc <_fwalk_sglue+0x38>
 800adcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800add0:	3301      	adds	r3, #1
 800add2:	d003      	beq.n	800addc <_fwalk_sglue+0x38>
 800add4:	4629      	mov	r1, r5
 800add6:	4638      	mov	r0, r7
 800add8:	47c0      	blx	r8
 800adda:	4306      	orrs	r6, r0
 800addc:	3568      	adds	r5, #104	@ 0x68
 800adde:	e7e9      	b.n	800adb4 <_fwalk_sglue+0x10>

0800ade0 <_puts_r>:
 800ade0:	6a03      	ldr	r3, [r0, #32]
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	4605      	mov	r5, r0
 800ade6:	460e      	mov	r6, r1
 800ade8:	6884      	ldr	r4, [r0, #8]
 800adea:	b90b      	cbnz	r3, 800adf0 <_puts_r+0x10>
 800adec:	f7ff ffc2 	bl	800ad74 <__sinit>
 800adf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adf2:	07db      	lsls	r3, r3, #31
 800adf4:	d405      	bmi.n	800ae02 <_puts_r+0x22>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	0598      	lsls	r0, r3, #22
 800adfa:	d402      	bmi.n	800ae02 <_puts_r+0x22>
 800adfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adfe:	f000 f9fe 	bl	800b1fe <__retarget_lock_acquire_recursive>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	0719      	lsls	r1, r3, #28
 800ae06:	d502      	bpl.n	800ae0e <_puts_r+0x2e>
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d135      	bne.n	800ae7a <_puts_r+0x9a>
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4628      	mov	r0, r5
 800ae12:	f000 f8fb 	bl	800b00c <__swsetup_r>
 800ae16:	b380      	cbz	r0, 800ae7a <_puts_r+0x9a>
 800ae18:	f04f 35ff 	mov.w	r5, #4294967295
 800ae1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae1e:	07da      	lsls	r2, r3, #31
 800ae20:	d405      	bmi.n	800ae2e <_puts_r+0x4e>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	059b      	lsls	r3, r3, #22
 800ae26:	d402      	bmi.n	800ae2e <_puts_r+0x4e>
 800ae28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2a:	f000 f9e9 	bl	800b200 <__retarget_lock_release_recursive>
 800ae2e:	4628      	mov	r0, r5
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	da04      	bge.n	800ae40 <_puts_r+0x60>
 800ae36:	69a2      	ldr	r2, [r4, #24]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	dc17      	bgt.n	800ae6c <_puts_r+0x8c>
 800ae3c:	290a      	cmp	r1, #10
 800ae3e:	d015      	beq.n	800ae6c <_puts_r+0x8c>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	6022      	str	r2, [r4, #0]
 800ae46:	7019      	strb	r1, [r3, #0]
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	2900      	cmp	r1, #0
 800ae54:	d1ed      	bne.n	800ae32 <_puts_r+0x52>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	da11      	bge.n	800ae7e <_puts_r+0x9e>
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	210a      	movs	r1, #10
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f000 f895 	bl	800af8e <__swbuf_r>
 800ae64:	3001      	adds	r0, #1
 800ae66:	d0d7      	beq.n	800ae18 <_puts_r+0x38>
 800ae68:	250a      	movs	r5, #10
 800ae6a:	e7d7      	b.n	800ae1c <_puts_r+0x3c>
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f88d 	bl	800af8e <__swbuf_r>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d1e7      	bne.n	800ae48 <_puts_r+0x68>
 800ae78:	e7ce      	b.n	800ae18 <_puts_r+0x38>
 800ae7a:	3e01      	subs	r6, #1
 800ae7c:	e7e4      	b.n	800ae48 <_puts_r+0x68>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	6022      	str	r2, [r4, #0]
 800ae84:	220a      	movs	r2, #10
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e7ee      	b.n	800ae68 <_puts_r+0x88>
	...

0800ae8c <puts>:
 800ae8c:	4b02      	ldr	r3, [pc, #8]	@ (800ae98 <puts+0xc>)
 800ae8e:	4601      	mov	r1, r0
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	f7ff bfa5 	b.w	800ade0 <_puts_r>
 800ae96:	bf00      	nop
 800ae98:	20000074 	.word	0x20000074

0800ae9c <sniprintf>:
 800ae9c:	b40c      	push	{r2, r3}
 800ae9e:	b530      	push	{r4, r5, lr}
 800aea0:	4b18      	ldr	r3, [pc, #96]	@ (800af04 <sniprintf+0x68>)
 800aea2:	1e0c      	subs	r4, r1, #0
 800aea4:	681d      	ldr	r5, [r3, #0]
 800aea6:	b09d      	sub	sp, #116	@ 0x74
 800aea8:	da08      	bge.n	800aebc <sniprintf+0x20>
 800aeaa:	238b      	movs	r3, #139	@ 0x8b
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	b01d      	add	sp, #116	@ 0x74
 800aeb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb8:	b002      	add	sp, #8
 800aeba:	4770      	bx	lr
 800aebc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aec4:	f04f 0300 	mov.w	r3, #0
 800aec8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800aeca:	bf0c      	ite	eq
 800aecc:	4623      	moveq	r3, r4
 800aece:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	9307      	str	r3, [sp, #28]
 800aed6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aeda:	9002      	str	r0, [sp, #8]
 800aedc:	9006      	str	r0, [sp, #24]
 800aede:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aee2:	4628      	mov	r0, r5
 800aee4:	ab21      	add	r3, sp, #132	@ 0x84
 800aee6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aee8:	a902      	add	r1, sp, #8
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	f001 fcc8 	bl	800c880 <_svfiprintf_r>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	bfbc      	itt	lt
 800aef4:	238b      	movlt	r3, #139	@ 0x8b
 800aef6:	602b      	strlt	r3, [r5, #0]
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	d0da      	beq.n	800aeb2 <sniprintf+0x16>
 800aefc:	2200      	movs	r2, #0
 800aefe:	9b02      	ldr	r3, [sp, #8]
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	e7d6      	b.n	800aeb2 <sniprintf+0x16>
 800af04:	20000074 	.word	0x20000074

0800af08 <__sread>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	460c      	mov	r4, r1
 800af0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af10:	f000 f926 	bl	800b160 <_read_r>
 800af14:	2800      	cmp	r0, #0
 800af16:	bfab      	itete	ge
 800af18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af1a:	89a3      	ldrhlt	r3, [r4, #12]
 800af1c:	181b      	addge	r3, r3, r0
 800af1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af22:	bfac      	ite	ge
 800af24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af26:	81a3      	strhlt	r3, [r4, #12]
 800af28:	bd10      	pop	{r4, pc}

0800af2a <__swrite>:
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	461f      	mov	r7, r3
 800af30:	898b      	ldrh	r3, [r1, #12]
 800af32:	4605      	mov	r5, r0
 800af34:	05db      	lsls	r3, r3, #23
 800af36:	460c      	mov	r4, r1
 800af38:	4616      	mov	r6, r2
 800af3a:	d505      	bpl.n	800af48 <__swrite+0x1e>
 800af3c:	2302      	movs	r3, #2
 800af3e:	2200      	movs	r2, #0
 800af40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af44:	f000 f8fa 	bl	800b13c <_lseek_r>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	4632      	mov	r2, r6
 800af4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	4628      	mov	r0, r5
 800af54:	463b      	mov	r3, r7
 800af56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	f000 b911 	b.w	800b184 <_write_r>

0800af62 <__sseek>:
 800af62:	b510      	push	{r4, lr}
 800af64:	460c      	mov	r4, r1
 800af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6a:	f000 f8e7 	bl	800b13c <_lseek_r>
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	bf15      	itete	ne
 800af74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af7e:	81a3      	strheq	r3, [r4, #12]
 800af80:	bf18      	it	ne
 800af82:	81a3      	strhne	r3, [r4, #12]
 800af84:	bd10      	pop	{r4, pc}

0800af86 <__sclose>:
 800af86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8a:	f000 b8c7 	b.w	800b11c <_close_r>

0800af8e <__swbuf_r>:
 800af8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af90:	460e      	mov	r6, r1
 800af92:	4614      	mov	r4, r2
 800af94:	4605      	mov	r5, r0
 800af96:	b118      	cbz	r0, 800afa0 <__swbuf_r+0x12>
 800af98:	6a03      	ldr	r3, [r0, #32]
 800af9a:	b90b      	cbnz	r3, 800afa0 <__swbuf_r+0x12>
 800af9c:	f7ff feea 	bl	800ad74 <__sinit>
 800afa0:	69a3      	ldr	r3, [r4, #24]
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	071a      	lsls	r2, r3, #28
 800afa8:	d501      	bpl.n	800afae <__swbuf_r+0x20>
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	b943      	cbnz	r3, 800afc0 <__swbuf_r+0x32>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 f82b 	bl	800b00c <__swsetup_r>
 800afb6:	b118      	cbz	r0, 800afc0 <__swbuf_r+0x32>
 800afb8:	f04f 37ff 	mov.w	r7, #4294967295
 800afbc:	4638      	mov	r0, r7
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	b2f6      	uxtb	r6, r6
 800afc6:	1a98      	subs	r0, r3, r2
 800afc8:	6963      	ldr	r3, [r4, #20]
 800afca:	4637      	mov	r7, r6
 800afcc:	4283      	cmp	r3, r0
 800afce:	dc05      	bgt.n	800afdc <__swbuf_r+0x4e>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f001 ff10 	bl	800cdf8 <_fflush_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d1ed      	bne.n	800afb8 <__swbuf_r+0x2a>
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	3b01      	subs	r3, #1
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	701e      	strb	r6, [r3, #0]
 800afea:	6962      	ldr	r2, [r4, #20]
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	429a      	cmp	r2, r3
 800aff0:	d004      	beq.n	800affc <__swbuf_r+0x6e>
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	07db      	lsls	r3, r3, #31
 800aff6:	d5e1      	bpl.n	800afbc <__swbuf_r+0x2e>
 800aff8:	2e0a      	cmp	r6, #10
 800affa:	d1df      	bne.n	800afbc <__swbuf_r+0x2e>
 800affc:	4621      	mov	r1, r4
 800affe:	4628      	mov	r0, r5
 800b000:	f001 fefa 	bl	800cdf8 <_fflush_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0d9      	beq.n	800afbc <__swbuf_r+0x2e>
 800b008:	e7d6      	b.n	800afb8 <__swbuf_r+0x2a>
	...

0800b00c <__swsetup_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4b29      	ldr	r3, [pc, #164]	@ (800b0b4 <__swsetup_r+0xa8>)
 800b010:	4605      	mov	r5, r0
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	460c      	mov	r4, r1
 800b016:	b118      	cbz	r0, 800b020 <__swsetup_r+0x14>
 800b018:	6a03      	ldr	r3, [r0, #32]
 800b01a:	b90b      	cbnz	r3, 800b020 <__swsetup_r+0x14>
 800b01c:	f7ff feaa 	bl	800ad74 <__sinit>
 800b020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b024:	0719      	lsls	r1, r3, #28
 800b026:	d422      	bmi.n	800b06e <__swsetup_r+0x62>
 800b028:	06da      	lsls	r2, r3, #27
 800b02a:	d407      	bmi.n	800b03c <__swsetup_r+0x30>
 800b02c:	2209      	movs	r2, #9
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	e033      	b.n	800b0a4 <__swsetup_r+0x98>
 800b03c:	0758      	lsls	r0, r3, #29
 800b03e:	d512      	bpl.n	800b066 <__swsetup_r+0x5a>
 800b040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b042:	b141      	cbz	r1, 800b056 <__swsetup_r+0x4a>
 800b044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b048:	4299      	cmp	r1, r3
 800b04a:	d002      	beq.n	800b052 <__swsetup_r+0x46>
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 ff43 	bl	800bed8 <_free_r>
 800b052:	2300      	movs	r3, #0
 800b054:	6363      	str	r3, [r4, #52]	@ 0x34
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	2300      	movs	r3, #0
 800b060:	6063      	str	r3, [r4, #4]
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0308 	orr.w	r3, r3, #8
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	b94b      	cbnz	r3, 800b086 <__swsetup_r+0x7a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b07c:	d003      	beq.n	800b086 <__swsetup_r+0x7a>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	f001 ff06 	bl	800ce92 <__smakebuf_r>
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	f013 0201 	ands.w	r2, r3, #1
 800b08e:	d00a      	beq.n	800b0a6 <__swsetup_r+0x9a>
 800b090:	2200      	movs	r2, #0
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	6962      	ldr	r2, [r4, #20]
 800b096:	4252      	negs	r2, r2
 800b098:	61a2      	str	r2, [r4, #24]
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	b942      	cbnz	r2, 800b0b0 <__swsetup_r+0xa4>
 800b09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0a2:	d1c5      	bne.n	800b030 <__swsetup_r+0x24>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	0799      	lsls	r1, r3, #30
 800b0a8:	bf58      	it	pl
 800b0aa:	6962      	ldrpl	r2, [r4, #20]
 800b0ac:	60a2      	str	r2, [r4, #8]
 800b0ae:	e7f4      	b.n	800b09a <__swsetup_r+0x8e>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e7f7      	b.n	800b0a4 <__swsetup_r+0x98>
 800b0b4:	20000074 	.word	0x20000074

0800b0b8 <memset>:
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4402      	add	r2, r0
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d100      	bne.n	800b0c2 <memset+0xa>
 800b0c0:	4770      	bx	lr
 800b0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c6:	e7f9      	b.n	800b0bc <memset+0x4>

0800b0c8 <strncat>:
 800b0c8:	b530      	push	{r4, r5, lr}
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	7825      	ldrb	r5, [r4, #0]
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	3401      	adds	r4, #1
 800b0d2:	2d00      	cmp	r5, #0
 800b0d4:	d1fa      	bne.n	800b0cc <strncat+0x4>
 800b0d6:	3a01      	subs	r2, #1
 800b0d8:	d304      	bcc.n	800b0e4 <strncat+0x1c>
 800b0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0de:	f803 4b01 	strb.w	r4, [r3], #1
 800b0e2:	b904      	cbnz	r4, 800b0e6 <strncat+0x1e>
 800b0e4:	bd30      	pop	{r4, r5, pc}
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	d1f5      	bne.n	800b0d6 <strncat+0xe>
 800b0ea:	701a      	strb	r2, [r3, #0]
 800b0ec:	e7f3      	b.n	800b0d6 <strncat+0xe>

0800b0ee <strncpy>:
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	3901      	subs	r1, #1
 800b0f4:	b132      	cbz	r2, 800b104 <strncpy+0x16>
 800b0f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b0fa:	3a01      	subs	r2, #1
 800b0fc:	f803 4b01 	strb.w	r4, [r3], #1
 800b100:	2c00      	cmp	r4, #0
 800b102:	d1f7      	bne.n	800b0f4 <strncpy+0x6>
 800b104:	2100      	movs	r1, #0
 800b106:	441a      	add	r2, r3
 800b108:	4293      	cmp	r3, r2
 800b10a:	d100      	bne.n	800b10e <strncpy+0x20>
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	f803 1b01 	strb.w	r1, [r3], #1
 800b112:	e7f9      	b.n	800b108 <strncpy+0x1a>

0800b114 <_localeconv_r>:
 800b114:	4800      	ldr	r0, [pc, #0]	@ (800b118 <_localeconv_r+0x4>)
 800b116:	4770      	bx	lr
 800b118:	200001b4 	.word	0x200001b4

0800b11c <_close_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	2300      	movs	r3, #0
 800b120:	4d05      	ldr	r5, [pc, #20]	@ (800b138 <_close_r+0x1c>)
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7fa fb61 	bl	80057ee <_close>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_close_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_close_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	200007e4 	.word	0x200007e4

0800b13c <_lseek_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4604      	mov	r4, r0
 800b140:	4608      	mov	r0, r1
 800b142:	4611      	mov	r1, r2
 800b144:	2200      	movs	r2, #0
 800b146:	4d05      	ldr	r5, [pc, #20]	@ (800b15c <_lseek_r+0x20>)
 800b148:	602a      	str	r2, [r5, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	f7fa fb73 	bl	8005836 <_lseek>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d102      	bne.n	800b15a <_lseek_r+0x1e>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	b103      	cbz	r3, 800b15a <_lseek_r+0x1e>
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	200007e4 	.word	0x200007e4

0800b160 <_read_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	2200      	movs	r2, #0
 800b16a:	4d05      	ldr	r5, [pc, #20]	@ (800b180 <_read_r+0x20>)
 800b16c:	602a      	str	r2, [r5, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	f7fa fb04 	bl	800577c <_read>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d102      	bne.n	800b17e <_read_r+0x1e>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	b103      	cbz	r3, 800b17e <_read_r+0x1e>
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
 800b180:	200007e4 	.word	0x200007e4

0800b184 <_write_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	2200      	movs	r2, #0
 800b18e:	4d05      	ldr	r5, [pc, #20]	@ (800b1a4 <_write_r+0x20>)
 800b190:	602a      	str	r2, [r5, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	f7fa fb0f 	bl	80057b6 <_write>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d102      	bne.n	800b1a2 <_write_r+0x1e>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	b103      	cbz	r3, 800b1a2 <_write_r+0x1e>
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	200007e4 	.word	0x200007e4

0800b1a8 <__errno>:
 800b1a8:	4b01      	ldr	r3, [pc, #4]	@ (800b1b0 <__errno+0x8>)
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20000074 	.word	0x20000074

0800b1b4 <__libc_init_array>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	4d0c      	ldr	r5, [pc, #48]	@ (800b1ec <__libc_init_array+0x38>)
 800b1ba:	4c0d      	ldr	r4, [pc, #52]	@ (800b1f0 <__libc_init_array+0x3c>)
 800b1bc:	1b64      	subs	r4, r4, r5
 800b1be:	10a4      	asrs	r4, r4, #2
 800b1c0:	42a6      	cmp	r6, r4
 800b1c2:	d109      	bne.n	800b1d8 <__libc_init_array+0x24>
 800b1c4:	f001 ffe2 	bl	800d18c <_init>
 800b1c8:	2600      	movs	r6, #0
 800b1ca:	4d0a      	ldr	r5, [pc, #40]	@ (800b1f4 <__libc_init_array+0x40>)
 800b1cc:	4c0a      	ldr	r4, [pc, #40]	@ (800b1f8 <__libc_init_array+0x44>)
 800b1ce:	1b64      	subs	r4, r4, r5
 800b1d0:	10a4      	asrs	r4, r4, #2
 800b1d2:	42a6      	cmp	r6, r4
 800b1d4:	d105      	bne.n	800b1e2 <__libc_init_array+0x2e>
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1dc:	4798      	blx	r3
 800b1de:	3601      	adds	r6, #1
 800b1e0:	e7ee      	b.n	800b1c0 <__libc_init_array+0xc>
 800b1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e6:	4798      	blx	r3
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	e7f2      	b.n	800b1d2 <__libc_init_array+0x1e>
 800b1ec:	0800da54 	.word	0x0800da54
 800b1f0:	0800da54 	.word	0x0800da54
 800b1f4:	0800da54 	.word	0x0800da54
 800b1f8:	0800da58 	.word	0x0800da58

0800b1fc <__retarget_lock_init_recursive>:
 800b1fc:	4770      	bx	lr

0800b1fe <__retarget_lock_acquire_recursive>:
 800b1fe:	4770      	bx	lr

0800b200 <__retarget_lock_release_recursive>:
 800b200:	4770      	bx	lr

0800b202 <memchr>:
 800b202:	4603      	mov	r3, r0
 800b204:	b510      	push	{r4, lr}
 800b206:	b2c9      	uxtb	r1, r1
 800b208:	4402      	add	r2, r0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	d101      	bne.n	800b214 <memchr+0x12>
 800b210:	2000      	movs	r0, #0
 800b212:	e003      	b.n	800b21c <memchr+0x1a>
 800b214:	7804      	ldrb	r4, [r0, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	428c      	cmp	r4, r1
 800b21a:	d1f6      	bne.n	800b20a <memchr+0x8>
 800b21c:	bd10      	pop	{r4, pc}

0800b21e <quorem>:
 800b21e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b222:	6903      	ldr	r3, [r0, #16]
 800b224:	690c      	ldr	r4, [r1, #16]
 800b226:	4607      	mov	r7, r0
 800b228:	42a3      	cmp	r3, r4
 800b22a:	db7e      	blt.n	800b32a <quorem+0x10c>
 800b22c:	3c01      	subs	r4, #1
 800b22e:	00a3      	lsls	r3, r4, #2
 800b230:	f100 0514 	add.w	r5, r0, #20
 800b234:	f101 0814 	add.w	r8, r1, #20
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b248:	3301      	adds	r3, #1
 800b24a:	429a      	cmp	r2, r3
 800b24c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b254:	d32e      	bcc.n	800b2b4 <quorem+0x96>
 800b256:	f04f 0a00 	mov.w	sl, #0
 800b25a:	46c4      	mov	ip, r8
 800b25c:	46ae      	mov	lr, r5
 800b25e:	46d3      	mov	fp, sl
 800b260:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b264:	b298      	uxth	r0, r3
 800b266:	fb06 a000 	mla	r0, r6, r0, sl
 800b26a:	0c1b      	lsrs	r3, r3, #16
 800b26c:	0c02      	lsrs	r2, r0, #16
 800b26e:	fb06 2303 	mla	r3, r6, r3, r2
 800b272:	f8de 2000 	ldr.w	r2, [lr]
 800b276:	b280      	uxth	r0, r0
 800b278:	b292      	uxth	r2, r2
 800b27a:	1a12      	subs	r2, r2, r0
 800b27c:	445a      	add	r2, fp
 800b27e:	f8de 0000 	ldr.w	r0, [lr]
 800b282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b286:	b29b      	uxth	r3, r3
 800b288:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b28c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b290:	b292      	uxth	r2, r2
 800b292:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b296:	45e1      	cmp	r9, ip
 800b298:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b29c:	f84e 2b04 	str.w	r2, [lr], #4
 800b2a0:	d2de      	bcs.n	800b260 <quorem+0x42>
 800b2a2:	9b00      	ldr	r3, [sp, #0]
 800b2a4:	58eb      	ldr	r3, [r5, r3]
 800b2a6:	b92b      	cbnz	r3, 800b2b4 <quorem+0x96>
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	3b04      	subs	r3, #4
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	d32f      	bcc.n	800b312 <quorem+0xf4>
 800b2b2:	613c      	str	r4, [r7, #16]
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	f001 f97f 	bl	800c5b8 <__mcmp>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	db25      	blt.n	800b30a <quorem+0xec>
 800b2be:	4629      	mov	r1, r5
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2c6:	f8d1 c000 	ldr.w	ip, [r1]
 800b2ca:	fa1f fe82 	uxth.w	lr, r2
 800b2ce:	fa1f f38c 	uxth.w	r3, ip
 800b2d2:	eba3 030e 	sub.w	r3, r3, lr
 800b2d6:	4403      	add	r3, r0
 800b2d8:	0c12      	lsrs	r2, r2, #16
 800b2da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b2de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e8:	45c1      	cmp	r9, r8
 800b2ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2ee:	f841 3b04 	str.w	r3, [r1], #4
 800b2f2:	d2e6      	bcs.n	800b2c2 <quorem+0xa4>
 800b2f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fc:	b922      	cbnz	r2, 800b308 <quorem+0xea>
 800b2fe:	3b04      	subs	r3, #4
 800b300:	429d      	cmp	r5, r3
 800b302:	461a      	mov	r2, r3
 800b304:	d30b      	bcc.n	800b31e <quorem+0x100>
 800b306:	613c      	str	r4, [r7, #16]
 800b308:	3601      	adds	r6, #1
 800b30a:	4630      	mov	r0, r6
 800b30c:	b003      	add	sp, #12
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	3b04      	subs	r3, #4
 800b316:	2a00      	cmp	r2, #0
 800b318:	d1cb      	bne.n	800b2b2 <quorem+0x94>
 800b31a:	3c01      	subs	r4, #1
 800b31c:	e7c6      	b.n	800b2ac <quorem+0x8e>
 800b31e:	6812      	ldr	r2, [r2, #0]
 800b320:	3b04      	subs	r3, #4
 800b322:	2a00      	cmp	r2, #0
 800b324:	d1ef      	bne.n	800b306 <quorem+0xe8>
 800b326:	3c01      	subs	r4, #1
 800b328:	e7ea      	b.n	800b300 <quorem+0xe2>
 800b32a:	2000      	movs	r0, #0
 800b32c:	e7ee      	b.n	800b30c <quorem+0xee>
	...

0800b330 <_dtoa_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	4614      	mov	r4, r2
 800b336:	461d      	mov	r5, r3
 800b338:	69c7      	ldr	r7, [r0, #28]
 800b33a:	b097      	sub	sp, #92	@ 0x5c
 800b33c:	4681      	mov	r9, r0
 800b33e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b342:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b344:	b97f      	cbnz	r7, 800b366 <_dtoa_r+0x36>
 800b346:	2010      	movs	r0, #16
 800b348:	f000 fe0e 	bl	800bf68 <malloc>
 800b34c:	4602      	mov	r2, r0
 800b34e:	f8c9 001c 	str.w	r0, [r9, #28]
 800b352:	b920      	cbnz	r0, 800b35e <_dtoa_r+0x2e>
 800b354:	21ef      	movs	r1, #239	@ 0xef
 800b356:	4bac      	ldr	r3, [pc, #688]	@ (800b608 <_dtoa_r+0x2d8>)
 800b358:	48ac      	ldr	r0, [pc, #688]	@ (800b60c <_dtoa_r+0x2dc>)
 800b35a:	f001 fe31 	bl	800cfc0 <__assert_func>
 800b35e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b362:	6007      	str	r7, [r0, #0]
 800b364:	60c7      	str	r7, [r0, #12]
 800b366:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b36a:	6819      	ldr	r1, [r3, #0]
 800b36c:	b159      	cbz	r1, 800b386 <_dtoa_r+0x56>
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	2301      	movs	r3, #1
 800b372:	4093      	lsls	r3, r2
 800b374:	604a      	str	r2, [r1, #4]
 800b376:	608b      	str	r3, [r1, #8]
 800b378:	4648      	mov	r0, r9
 800b37a:	f000 feeb 	bl	800c154 <_Bfree>
 800b37e:	2200      	movs	r2, #0
 800b380:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	1e2b      	subs	r3, r5, #0
 800b388:	bfaf      	iteee	ge
 800b38a:	2300      	movge	r3, #0
 800b38c:	2201      	movlt	r2, #1
 800b38e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b392:	9307      	strlt	r3, [sp, #28]
 800b394:	bfa8      	it	ge
 800b396:	6033      	strge	r3, [r6, #0]
 800b398:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b39c:	4b9c      	ldr	r3, [pc, #624]	@ (800b610 <_dtoa_r+0x2e0>)
 800b39e:	bfb8      	it	lt
 800b3a0:	6032      	strlt	r2, [r6, #0]
 800b3a2:	ea33 0308 	bics.w	r3, r3, r8
 800b3a6:	d112      	bne.n	800b3ce <_dtoa_r+0x9e>
 800b3a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b3b4:	4323      	orrs	r3, r4
 800b3b6:	f000 855e 	beq.w	800be76 <_dtoa_r+0xb46>
 800b3ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b614 <_dtoa_r+0x2e4>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8560 	beq.w	800be86 <_dtoa_r+0xb56>
 800b3c6:	f10a 0303 	add.w	r3, sl, #3
 800b3ca:	f000 bd5a 	b.w	800be82 <_dtoa_r+0xb52>
 800b3ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f7f5 faed 	bl	80009bc <__aeabi_dcmpeq>
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	b158      	cbz	r0, 800b3fe <_dtoa_r+0xce>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3ee:	b113      	cbz	r3, 800b3f6 <_dtoa_r+0xc6>
 800b3f0:	4b89      	ldr	r3, [pc, #548]	@ (800b618 <_dtoa_r+0x2e8>)
 800b3f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b61c <_dtoa_r+0x2ec>
 800b3fa:	f000 bd44 	b.w	800be86 <_dtoa_r+0xb56>
 800b3fe:	ab14      	add	r3, sp, #80	@ 0x50
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	ab15      	add	r3, sp, #84	@ 0x54
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4648      	mov	r0, r9
 800b408:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b40c:	f001 f984 	bl	800c718 <__d2b>
 800b410:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b414:	9003      	str	r0, [sp, #12]
 800b416:	2e00      	cmp	r6, #0
 800b418:	d078      	beq.n	800b50c <_dtoa_r+0x1dc>
 800b41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b41e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b420:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b428:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b42c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b430:	9712      	str	r7, [sp, #72]	@ 0x48
 800b432:	4619      	mov	r1, r3
 800b434:	2200      	movs	r2, #0
 800b436:	4b7a      	ldr	r3, [pc, #488]	@ (800b620 <_dtoa_r+0x2f0>)
 800b438:	f7f4 fea0 	bl	800017c <__aeabi_dsub>
 800b43c:	a36c      	add	r3, pc, #432	@ (adr r3, 800b5f0 <_dtoa_r+0x2c0>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7f5 f853 	bl	80004ec <__aeabi_dmul>
 800b446:	a36c      	add	r3, pc, #432	@ (adr r3, 800b5f8 <_dtoa_r+0x2c8>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 fe98 	bl	8000180 <__adddf3>
 800b450:	4604      	mov	r4, r0
 800b452:	4630      	mov	r0, r6
 800b454:	460d      	mov	r5, r1
 800b456:	f7f4 ffdf 	bl	8000418 <__aeabi_i2d>
 800b45a:	a369      	add	r3, pc, #420	@ (adr r3, 800b600 <_dtoa_r+0x2d0>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f5 f844 	bl	80004ec <__aeabi_dmul>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	4620      	mov	r0, r4
 800b46a:	4629      	mov	r1, r5
 800b46c:	f7f4 fe88 	bl	8000180 <__adddf3>
 800b470:	4604      	mov	r4, r0
 800b472:	460d      	mov	r5, r1
 800b474:	f7f5 faea 	bl	8000a4c <__aeabi_d2iz>
 800b478:	2200      	movs	r2, #0
 800b47a:	4607      	mov	r7, r0
 800b47c:	2300      	movs	r3, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 faa5 	bl	80009d0 <__aeabi_dcmplt>
 800b486:	b140      	cbz	r0, 800b49a <_dtoa_r+0x16a>
 800b488:	4638      	mov	r0, r7
 800b48a:	f7f4 ffc5 	bl	8000418 <__aeabi_i2d>
 800b48e:	4622      	mov	r2, r4
 800b490:	462b      	mov	r3, r5
 800b492:	f7f5 fa93 	bl	80009bc <__aeabi_dcmpeq>
 800b496:	b900      	cbnz	r0, 800b49a <_dtoa_r+0x16a>
 800b498:	3f01      	subs	r7, #1
 800b49a:	2f16      	cmp	r7, #22
 800b49c:	d854      	bhi.n	800b548 <_dtoa_r+0x218>
 800b49e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4a2:	4b60      	ldr	r3, [pc, #384]	@ (800b624 <_dtoa_r+0x2f4>)
 800b4a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f5 fa90 	bl	80009d0 <__aeabi_dcmplt>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d04b      	beq.n	800b54c <_dtoa_r+0x21c>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	3f01      	subs	r7, #1
 800b4b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4bc:	1b9b      	subs	r3, r3, r6
 800b4be:	1e5a      	subs	r2, r3, #1
 800b4c0:	bf49      	itett	mi
 800b4c2:	f1c3 0301 	rsbmi	r3, r3, #1
 800b4c6:	2300      	movpl	r3, #0
 800b4c8:	9304      	strmi	r3, [sp, #16]
 800b4ca:	2300      	movmi	r3, #0
 800b4cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4ce:	bf54      	ite	pl
 800b4d0:	9304      	strpl	r3, [sp, #16]
 800b4d2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b4d4:	2f00      	cmp	r7, #0
 800b4d6:	db3b      	blt.n	800b550 <_dtoa_r+0x220>
 800b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4da:	970e      	str	r7, [sp, #56]	@ 0x38
 800b4dc:	443b      	add	r3, r7
 800b4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4e6:	2b09      	cmp	r3, #9
 800b4e8:	d865      	bhi.n	800b5b6 <_dtoa_r+0x286>
 800b4ea:	2b05      	cmp	r3, #5
 800b4ec:	bfc4      	itt	gt
 800b4ee:	3b04      	subgt	r3, #4
 800b4f0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b4f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4f4:	bfc8      	it	gt
 800b4f6:	2400      	movgt	r4, #0
 800b4f8:	f1a3 0302 	sub.w	r3, r3, #2
 800b4fc:	bfd8      	it	le
 800b4fe:	2401      	movle	r4, #1
 800b500:	2b03      	cmp	r3, #3
 800b502:	d864      	bhi.n	800b5ce <_dtoa_r+0x29e>
 800b504:	e8df f003 	tbb	[pc, r3]
 800b508:	2c385553 	.word	0x2c385553
 800b50c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b510:	441e      	add	r6, r3
 800b512:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b516:	2b20      	cmp	r3, #32
 800b518:	bfc1      	itttt	gt
 800b51a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b51e:	fa08 f803 	lslgt.w	r8, r8, r3
 800b522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b526:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b52a:	bfd6      	itet	le
 800b52c:	f1c3 0320 	rsble	r3, r3, #32
 800b530:	ea48 0003 	orrgt.w	r0, r8, r3
 800b534:	fa04 f003 	lslle.w	r0, r4, r3
 800b538:	f7f4 ff5e 	bl	80003f8 <__aeabi_ui2d>
 800b53c:	2201      	movs	r2, #1
 800b53e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b542:	3e01      	subs	r6, #1
 800b544:	9212      	str	r2, [sp, #72]	@ 0x48
 800b546:	e774      	b.n	800b432 <_dtoa_r+0x102>
 800b548:	2301      	movs	r3, #1
 800b54a:	e7b5      	b.n	800b4b8 <_dtoa_r+0x188>
 800b54c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b54e:	e7b4      	b.n	800b4ba <_dtoa_r+0x18a>
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	1bdb      	subs	r3, r3, r7
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	427b      	negs	r3, r7
 800b558:	930a      	str	r3, [sp, #40]	@ 0x28
 800b55a:	2300      	movs	r3, #0
 800b55c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b55e:	e7c1      	b.n	800b4e4 <_dtoa_r+0x1b4>
 800b560:	2301      	movs	r3, #1
 800b562:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b564:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b566:	eb07 0b03 	add.w	fp, r7, r3
 800b56a:	f10b 0301 	add.w	r3, fp, #1
 800b56e:	2b01      	cmp	r3, #1
 800b570:	9308      	str	r3, [sp, #32]
 800b572:	bfb8      	it	lt
 800b574:	2301      	movlt	r3, #1
 800b576:	e006      	b.n	800b586 <_dtoa_r+0x256>
 800b578:	2301      	movs	r3, #1
 800b57a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b57c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd28      	ble.n	800b5d4 <_dtoa_r+0x2a4>
 800b582:	469b      	mov	fp, r3
 800b584:	9308      	str	r3, [sp, #32]
 800b586:	2100      	movs	r1, #0
 800b588:	2204      	movs	r2, #4
 800b58a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b58e:	f102 0514 	add.w	r5, r2, #20
 800b592:	429d      	cmp	r5, r3
 800b594:	d926      	bls.n	800b5e4 <_dtoa_r+0x2b4>
 800b596:	6041      	str	r1, [r0, #4]
 800b598:	4648      	mov	r0, r9
 800b59a:	f000 fd9b 	bl	800c0d4 <_Balloc>
 800b59e:	4682      	mov	sl, r0
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d143      	bne.n	800b62c <_dtoa_r+0x2fc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b628 <_dtoa_r+0x2f8>)
 800b5ac:	e6d4      	b.n	800b358 <_dtoa_r+0x28>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e7e3      	b.n	800b57a <_dtoa_r+0x24a>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e7d5      	b.n	800b562 <_dtoa_r+0x232>
 800b5b6:	2401      	movs	r4, #1
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b5bc:	9320      	str	r3, [sp, #128]	@ 0x80
 800b5be:	f04f 3bff 	mov.w	fp, #4294967295
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2312      	movs	r3, #18
 800b5c6:	f8cd b020 	str.w	fp, [sp, #32]
 800b5ca:	9221      	str	r2, [sp, #132]	@ 0x84
 800b5cc:	e7db      	b.n	800b586 <_dtoa_r+0x256>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5d2:	e7f4      	b.n	800b5be <_dtoa_r+0x28e>
 800b5d4:	f04f 0b01 	mov.w	fp, #1
 800b5d8:	465b      	mov	r3, fp
 800b5da:	f8cd b020 	str.w	fp, [sp, #32]
 800b5de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800b5e2:	e7d0      	b.n	800b586 <_dtoa_r+0x256>
 800b5e4:	3101      	adds	r1, #1
 800b5e6:	0052      	lsls	r2, r2, #1
 800b5e8:	e7d1      	b.n	800b58e <_dtoa_r+0x25e>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	636f4361 	.word	0x636f4361
 800b5f4:	3fd287a7 	.word	0x3fd287a7
 800b5f8:	8b60c8b3 	.word	0x8b60c8b3
 800b5fc:	3fc68a28 	.word	0x3fc68a28
 800b600:	509f79fb 	.word	0x509f79fb
 800b604:	3fd34413 	.word	0x3fd34413
 800b608:	0800d717 	.word	0x0800d717
 800b60c:	0800d72e 	.word	0x0800d72e
 800b610:	7ff00000 	.word	0x7ff00000
 800b614:	0800d713 	.word	0x0800d713
 800b618:	0800d6e7 	.word	0x0800d6e7
 800b61c:	0800d6e6 	.word	0x0800d6e6
 800b620:	3ff80000 	.word	0x3ff80000
 800b624:	0800d880 	.word	0x0800d880
 800b628:	0800d786 	.word	0x0800d786
 800b62c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b630:	6018      	str	r0, [r3, #0]
 800b632:	9b08      	ldr	r3, [sp, #32]
 800b634:	2b0e      	cmp	r3, #14
 800b636:	f200 80a1 	bhi.w	800b77c <_dtoa_r+0x44c>
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	f000 809e 	beq.w	800b77c <_dtoa_r+0x44c>
 800b640:	2f00      	cmp	r7, #0
 800b642:	dd33      	ble.n	800b6ac <_dtoa_r+0x37c>
 800b644:	4b9c      	ldr	r3, [pc, #624]	@ (800b8b8 <_dtoa_r+0x588>)
 800b646:	f007 020f 	and.w	r2, r7, #15
 800b64a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b64e:	05f8      	lsls	r0, r7, #23
 800b650:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b654:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800b658:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b65c:	d516      	bpl.n	800b68c <_dtoa_r+0x35c>
 800b65e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b662:	4b96      	ldr	r3, [pc, #600]	@ (800b8bc <_dtoa_r+0x58c>)
 800b664:	2603      	movs	r6, #3
 800b666:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b66a:	f7f5 f869 	bl	8000740 <__aeabi_ddiv>
 800b66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b672:	f004 040f 	and.w	r4, r4, #15
 800b676:	4d91      	ldr	r5, [pc, #580]	@ (800b8bc <_dtoa_r+0x58c>)
 800b678:	b954      	cbnz	r4, 800b690 <_dtoa_r+0x360>
 800b67a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b67e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b682:	f7f5 f85d 	bl	8000740 <__aeabi_ddiv>
 800b686:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b68a:	e028      	b.n	800b6de <_dtoa_r+0x3ae>
 800b68c:	2602      	movs	r6, #2
 800b68e:	e7f2      	b.n	800b676 <_dtoa_r+0x346>
 800b690:	07e1      	lsls	r1, r4, #31
 800b692:	d508      	bpl.n	800b6a6 <_dtoa_r+0x376>
 800b694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b69c:	f7f4 ff26 	bl	80004ec <__aeabi_dmul>
 800b6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6a4:	3601      	adds	r6, #1
 800b6a6:	1064      	asrs	r4, r4, #1
 800b6a8:	3508      	adds	r5, #8
 800b6aa:	e7e5      	b.n	800b678 <_dtoa_r+0x348>
 800b6ac:	f000 80af 	beq.w	800b80e <_dtoa_r+0x4de>
 800b6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6b4:	427c      	negs	r4, r7
 800b6b6:	4b80      	ldr	r3, [pc, #512]	@ (800b8b8 <_dtoa_r+0x588>)
 800b6b8:	f004 020f 	and.w	r2, r4, #15
 800b6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 ff12 	bl	80004ec <__aeabi_dmul>
 800b6c8:	2602      	movs	r6, #2
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6d0:	4d7a      	ldr	r5, [pc, #488]	@ (800b8bc <_dtoa_r+0x58c>)
 800b6d2:	1124      	asrs	r4, r4, #4
 800b6d4:	2c00      	cmp	r4, #0
 800b6d6:	f040 808f 	bne.w	800b7f8 <_dtoa_r+0x4c8>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1d3      	bne.n	800b686 <_dtoa_r+0x356>
 800b6de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b6e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 8094 	beq.w	800b812 <_dtoa_r+0x4e2>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4b73      	ldr	r3, [pc, #460]	@ (800b8c0 <_dtoa_r+0x590>)
 800b6f2:	f7f5 f96d 	bl	80009d0 <__aeabi_dcmplt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f000 808b 	beq.w	800b812 <_dtoa_r+0x4e2>
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 8087 	beq.w	800b812 <_dtoa_r+0x4e2>
 800b704:	f1bb 0f00 	cmp.w	fp, #0
 800b708:	dd34      	ble.n	800b774 <_dtoa_r+0x444>
 800b70a:	4620      	mov	r0, r4
 800b70c:	2200      	movs	r2, #0
 800b70e:	4629      	mov	r1, r5
 800b710:	4b6c      	ldr	r3, [pc, #432]	@ (800b8c4 <_dtoa_r+0x594>)
 800b712:	f7f4 feeb 	bl	80004ec <__aeabi_dmul>
 800b716:	465c      	mov	r4, fp
 800b718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b71c:	f107 38ff 	add.w	r8, r7, #4294967295
 800b720:	3601      	adds	r6, #1
 800b722:	4630      	mov	r0, r6
 800b724:	f7f4 fe78 	bl	8000418 <__aeabi_i2d>
 800b728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b72c:	f7f4 fede 	bl	80004ec <__aeabi_dmul>
 800b730:	2200      	movs	r2, #0
 800b732:	4b65      	ldr	r3, [pc, #404]	@ (800b8c8 <_dtoa_r+0x598>)
 800b734:	f7f4 fd24 	bl	8000180 <__adddf3>
 800b738:	4605      	mov	r5, r0
 800b73a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b73e:	2c00      	cmp	r4, #0
 800b740:	d16a      	bne.n	800b818 <_dtoa_r+0x4e8>
 800b742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b746:	2200      	movs	r2, #0
 800b748:	4b60      	ldr	r3, [pc, #384]	@ (800b8cc <_dtoa_r+0x59c>)
 800b74a:	f7f4 fd17 	bl	800017c <__aeabi_dsub>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b756:	462a      	mov	r2, r5
 800b758:	4633      	mov	r3, r6
 800b75a:	f7f5 f957 	bl	8000a0c <__aeabi_dcmpgt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	f040 8298 	bne.w	800bc94 <_dtoa_r+0x964>
 800b764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b768:	462a      	mov	r2, r5
 800b76a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b76e:	f7f5 f92f 	bl	80009d0 <__aeabi_dcmplt>
 800b772:	bb38      	cbnz	r0, 800b7c4 <_dtoa_r+0x494>
 800b774:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b778:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b77c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f2c0 8157 	blt.w	800ba32 <_dtoa_r+0x702>
 800b784:	2f0e      	cmp	r7, #14
 800b786:	f300 8154 	bgt.w	800ba32 <_dtoa_r+0x702>
 800b78a:	4b4b      	ldr	r3, [pc, #300]	@ (800b8b8 <_dtoa_r+0x588>)
 800b78c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b790:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b794:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b798:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f280 80e5 	bge.w	800b96a <_dtoa_r+0x63a>
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f300 80e1 	bgt.w	800b96a <_dtoa_r+0x63a>
 800b7a8:	d10c      	bne.n	800b7c4 <_dtoa_r+0x494>
 800b7aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	4b46      	ldr	r3, [pc, #280]	@ (800b8cc <_dtoa_r+0x59c>)
 800b7b2:	f7f4 fe9b 	bl	80004ec <__aeabi_dmul>
 800b7b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7ba:	f7f5 f91d 	bl	80009f8 <__aeabi_dcmpge>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	f000 8266 	beq.w	800bc90 <_dtoa_r+0x960>
 800b7c4:	2400      	movs	r4, #0
 800b7c6:	4625      	mov	r5, r4
 800b7c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7ca:	4656      	mov	r6, sl
 800b7cc:	ea6f 0803 	mvn.w	r8, r3
 800b7d0:	2700      	movs	r7, #0
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4648      	mov	r0, r9
 800b7d6:	f000 fcbd 	bl	800c154 <_Bfree>
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	f000 80bd 	beq.w	800b95a <_dtoa_r+0x62a>
 800b7e0:	b12f      	cbz	r7, 800b7ee <_dtoa_r+0x4be>
 800b7e2:	42af      	cmp	r7, r5
 800b7e4:	d003      	beq.n	800b7ee <_dtoa_r+0x4be>
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	4648      	mov	r0, r9
 800b7ea:	f000 fcb3 	bl	800c154 <_Bfree>
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4648      	mov	r0, r9
 800b7f2:	f000 fcaf 	bl	800c154 <_Bfree>
 800b7f6:	e0b0      	b.n	800b95a <_dtoa_r+0x62a>
 800b7f8:	07e2      	lsls	r2, r4, #31
 800b7fa:	d505      	bpl.n	800b808 <_dtoa_r+0x4d8>
 800b7fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b800:	f7f4 fe74 	bl	80004ec <__aeabi_dmul>
 800b804:	2301      	movs	r3, #1
 800b806:	3601      	adds	r6, #1
 800b808:	1064      	asrs	r4, r4, #1
 800b80a:	3508      	adds	r5, #8
 800b80c:	e762      	b.n	800b6d4 <_dtoa_r+0x3a4>
 800b80e:	2602      	movs	r6, #2
 800b810:	e765      	b.n	800b6de <_dtoa_r+0x3ae>
 800b812:	46b8      	mov	r8, r7
 800b814:	9c08      	ldr	r4, [sp, #32]
 800b816:	e784      	b.n	800b722 <_dtoa_r+0x3f2>
 800b818:	4b27      	ldr	r3, [pc, #156]	@ (800b8b8 <_dtoa_r+0x588>)
 800b81a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b81c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b824:	4454      	add	r4, sl
 800b826:	2900      	cmp	r1, #0
 800b828:	d054      	beq.n	800b8d4 <_dtoa_r+0x5a4>
 800b82a:	2000      	movs	r0, #0
 800b82c:	4928      	ldr	r1, [pc, #160]	@ (800b8d0 <_dtoa_r+0x5a0>)
 800b82e:	f7f4 ff87 	bl	8000740 <__aeabi_ddiv>
 800b832:	4633      	mov	r3, r6
 800b834:	462a      	mov	r2, r5
 800b836:	f7f4 fca1 	bl	800017c <__aeabi_dsub>
 800b83a:	4656      	mov	r6, sl
 800b83c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b844:	f7f5 f902 	bl	8000a4c <__aeabi_d2iz>
 800b848:	4605      	mov	r5, r0
 800b84a:	f7f4 fde5 	bl	8000418 <__aeabi_i2d>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b856:	f7f4 fc91 	bl	800017c <__aeabi_dsub>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	3530      	adds	r5, #48	@ 0x30
 800b860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b864:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b868:	f806 5b01 	strb.w	r5, [r6], #1
 800b86c:	f7f5 f8b0 	bl	80009d0 <__aeabi_dcmplt>
 800b870:	2800      	cmp	r0, #0
 800b872:	d172      	bne.n	800b95a <_dtoa_r+0x62a>
 800b874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b878:	2000      	movs	r0, #0
 800b87a:	4911      	ldr	r1, [pc, #68]	@ (800b8c0 <_dtoa_r+0x590>)
 800b87c:	f7f4 fc7e 	bl	800017c <__aeabi_dsub>
 800b880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b884:	f7f5 f8a4 	bl	80009d0 <__aeabi_dcmplt>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f040 80b4 	bne.w	800b9f6 <_dtoa_r+0x6c6>
 800b88e:	42a6      	cmp	r6, r4
 800b890:	f43f af70 	beq.w	800b774 <_dtoa_r+0x444>
 800b894:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b898:	2200      	movs	r2, #0
 800b89a:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c4 <_dtoa_r+0x594>)
 800b89c:	f7f4 fe26 	bl	80004ec <__aeabi_dmul>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8aa:	4b06      	ldr	r3, [pc, #24]	@ (800b8c4 <_dtoa_r+0x594>)
 800b8ac:	f7f4 fe1e 	bl	80004ec <__aeabi_dmul>
 800b8b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8b4:	e7c4      	b.n	800b840 <_dtoa_r+0x510>
 800b8b6:	bf00      	nop
 800b8b8:	0800d880 	.word	0x0800d880
 800b8bc:	0800d858 	.word	0x0800d858
 800b8c0:	3ff00000 	.word	0x3ff00000
 800b8c4:	40240000 	.word	0x40240000
 800b8c8:	401c0000 	.word	0x401c0000
 800b8cc:	40140000 	.word	0x40140000
 800b8d0:	3fe00000 	.word	0x3fe00000
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f7f4 fe08 	bl	80004ec <__aeabi_dmul>
 800b8dc:	4656      	mov	r6, sl
 800b8de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b8e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8e8:	f7f5 f8b0 	bl	8000a4c <__aeabi_d2iz>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	f7f4 fd93 	bl	8000418 <__aeabi_i2d>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8fa:	f7f4 fc3f 	bl	800017c <__aeabi_dsub>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	3530      	adds	r5, #48	@ 0x30
 800b904:	f806 5b01 	strb.w	r5, [r6], #1
 800b908:	42a6      	cmp	r6, r4
 800b90a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b90e:	f04f 0200 	mov.w	r2, #0
 800b912:	d124      	bne.n	800b95e <_dtoa_r+0x62e>
 800b914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b918:	4bae      	ldr	r3, [pc, #696]	@ (800bbd4 <_dtoa_r+0x8a4>)
 800b91a:	f7f4 fc31 	bl	8000180 <__adddf3>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b926:	f7f5 f871 	bl	8000a0c <__aeabi_dcmpgt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d163      	bne.n	800b9f6 <_dtoa_r+0x6c6>
 800b92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b932:	2000      	movs	r0, #0
 800b934:	49a7      	ldr	r1, [pc, #668]	@ (800bbd4 <_dtoa_r+0x8a4>)
 800b936:	f7f4 fc21 	bl	800017c <__aeabi_dsub>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b942:	f7f5 f845 	bl	80009d0 <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	f43f af14 	beq.w	800b774 <_dtoa_r+0x444>
 800b94c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b94e:	1e73      	subs	r3, r6, #1
 800b950:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b952:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b956:	2b30      	cmp	r3, #48	@ 0x30
 800b958:	d0f8      	beq.n	800b94c <_dtoa_r+0x61c>
 800b95a:	4647      	mov	r7, r8
 800b95c:	e03b      	b.n	800b9d6 <_dtoa_r+0x6a6>
 800b95e:	4b9e      	ldr	r3, [pc, #632]	@ (800bbd8 <_dtoa_r+0x8a8>)
 800b960:	f7f4 fdc4 	bl	80004ec <__aeabi_dmul>
 800b964:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b968:	e7bc      	b.n	800b8e4 <_dtoa_r+0x5b4>
 800b96a:	4656      	mov	r6, sl
 800b96c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f4 fee2 	bl	8000740 <__aeabi_ddiv>
 800b97c:	f7f5 f866 	bl	8000a4c <__aeabi_d2iz>
 800b980:	4680      	mov	r8, r0
 800b982:	f7f4 fd49 	bl	8000418 <__aeabi_i2d>
 800b986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b98a:	f7f4 fdaf 	bl	80004ec <__aeabi_dmul>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	4620      	mov	r0, r4
 800b994:	4629      	mov	r1, r5
 800b996:	f7f4 fbf1 	bl	800017c <__aeabi_dsub>
 800b99a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b99e:	9d08      	ldr	r5, [sp, #32]
 800b9a0:	f806 4b01 	strb.w	r4, [r6], #1
 800b9a4:	eba6 040a 	sub.w	r4, r6, sl
 800b9a8:	42a5      	cmp	r5, r4
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	d133      	bne.n	800ba18 <_dtoa_r+0x6e8>
 800b9b0:	f7f4 fbe6 	bl	8000180 <__adddf3>
 800b9b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	f7f5 f826 	bl	8000a0c <__aeabi_dcmpgt>
 800b9c0:	b9c0      	cbnz	r0, 800b9f4 <_dtoa_r+0x6c4>
 800b9c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7f4 fff7 	bl	80009bc <__aeabi_dcmpeq>
 800b9ce:	b110      	cbz	r0, 800b9d6 <_dtoa_r+0x6a6>
 800b9d0:	f018 0f01 	tst.w	r8, #1
 800b9d4:	d10e      	bne.n	800b9f4 <_dtoa_r+0x6c4>
 800b9d6:	4648      	mov	r0, r9
 800b9d8:	9903      	ldr	r1, [sp, #12]
 800b9da:	f000 fbbb 	bl	800c154 <_Bfree>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	7033      	strb	r3, [r6, #0]
 800b9e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b9e4:	3701      	adds	r7, #1
 800b9e6:	601f      	str	r7, [r3, #0]
 800b9e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 824b 	beq.w	800be86 <_dtoa_r+0xb56>
 800b9f0:	601e      	str	r6, [r3, #0]
 800b9f2:	e248      	b.n	800be86 <_dtoa_r+0xb56>
 800b9f4:	46b8      	mov	r8, r7
 800b9f6:	4633      	mov	r3, r6
 800b9f8:	461e      	mov	r6, r3
 800b9fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9fe:	2a39      	cmp	r2, #57	@ 0x39
 800ba00:	d106      	bne.n	800ba10 <_dtoa_r+0x6e0>
 800ba02:	459a      	cmp	sl, r3
 800ba04:	d1f8      	bne.n	800b9f8 <_dtoa_r+0x6c8>
 800ba06:	2230      	movs	r2, #48	@ 0x30
 800ba08:	f108 0801 	add.w	r8, r8, #1
 800ba0c:	f88a 2000 	strb.w	r2, [sl]
 800ba10:	781a      	ldrb	r2, [r3, #0]
 800ba12:	3201      	adds	r2, #1
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	e7a0      	b.n	800b95a <_dtoa_r+0x62a>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4b6f      	ldr	r3, [pc, #444]	@ (800bbd8 <_dtoa_r+0x8a8>)
 800ba1c:	f7f4 fd66 	bl	80004ec <__aeabi_dmul>
 800ba20:	2200      	movs	r2, #0
 800ba22:	2300      	movs	r3, #0
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	f7f4 ffc8 	bl	80009bc <__aeabi_dcmpeq>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d09f      	beq.n	800b970 <_dtoa_r+0x640>
 800ba30:	e7d1      	b.n	800b9d6 <_dtoa_r+0x6a6>
 800ba32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	f000 80ea 	beq.w	800bc0e <_dtoa_r+0x8de>
 800ba3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba3c:	2a01      	cmp	r2, #1
 800ba3e:	f300 80cd 	bgt.w	800bbdc <_dtoa_r+0x8ac>
 800ba42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ba44:	2a00      	cmp	r2, #0
 800ba46:	f000 80c1 	beq.w	800bbcc <_dtoa_r+0x89c>
 800ba4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba50:	9e04      	ldr	r6, [sp, #16]
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	2101      	movs	r1, #1
 800ba56:	441a      	add	r2, r3
 800ba58:	9204      	str	r2, [sp, #16]
 800ba5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	441a      	add	r2, r3
 800ba60:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba62:	f000 fc2b 	bl	800c2bc <__i2b>
 800ba66:	4605      	mov	r5, r0
 800ba68:	b166      	cbz	r6, 800ba84 <_dtoa_r+0x754>
 800ba6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dd09      	ble.n	800ba84 <_dtoa_r+0x754>
 800ba70:	42b3      	cmp	r3, r6
 800ba72:	bfa8      	it	ge
 800ba74:	4633      	movge	r3, r6
 800ba76:	9a04      	ldr	r2, [sp, #16]
 800ba78:	1af6      	subs	r6, r6, r3
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	9204      	str	r2, [sp, #16]
 800ba7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba86:	b30b      	cbz	r3, 800bacc <_dtoa_r+0x79c>
 800ba88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80c6 	beq.w	800bc1c <_dtoa_r+0x8ec>
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	f000 80c0 	beq.w	800bc16 <_dtoa_r+0x8e6>
 800ba96:	4629      	mov	r1, r5
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4648      	mov	r0, r9
 800ba9c:	f000 fcc6 	bl	800c42c <__pow5mult>
 800baa0:	9a03      	ldr	r2, [sp, #12]
 800baa2:	4601      	mov	r1, r0
 800baa4:	4605      	mov	r5, r0
 800baa6:	4648      	mov	r0, r9
 800baa8:	f000 fc1e 	bl	800c2e8 <__multiply>
 800baac:	9903      	ldr	r1, [sp, #12]
 800baae:	4680      	mov	r8, r0
 800bab0:	4648      	mov	r0, r9
 800bab2:	f000 fb4f 	bl	800c154 <_Bfree>
 800bab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab8:	1b1b      	subs	r3, r3, r4
 800baba:	930a      	str	r3, [sp, #40]	@ 0x28
 800babc:	f000 80b1 	beq.w	800bc22 <_dtoa_r+0x8f2>
 800bac0:	4641      	mov	r1, r8
 800bac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bac4:	4648      	mov	r0, r9
 800bac6:	f000 fcb1 	bl	800c42c <__pow5mult>
 800baca:	9003      	str	r0, [sp, #12]
 800bacc:	2101      	movs	r1, #1
 800bace:	4648      	mov	r0, r9
 800bad0:	f000 fbf4 	bl	800c2bc <__i2b>
 800bad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad6:	4604      	mov	r4, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 81d8 	beq.w	800be8e <_dtoa_r+0xb5e>
 800bade:	461a      	mov	r2, r3
 800bae0:	4601      	mov	r1, r0
 800bae2:	4648      	mov	r0, r9
 800bae4:	f000 fca2 	bl	800c42c <__pow5mult>
 800bae8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800baea:	4604      	mov	r4, r0
 800baec:	2b01      	cmp	r3, #1
 800baee:	f300 809f 	bgt.w	800bc30 <_dtoa_r+0x900>
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f040 8097 	bne.w	800bc28 <_dtoa_r+0x8f8>
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f040 8093 	bne.w	800bc2c <_dtoa_r+0x8fc>
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb0c:	0d1b      	lsrs	r3, r3, #20
 800bb0e:	051b      	lsls	r3, r3, #20
 800bb10:	b133      	cbz	r3, 800bb20 <_dtoa_r+0x7f0>
 800bb12:	9b04      	ldr	r3, [sp, #16]
 800bb14:	3301      	adds	r3, #1
 800bb16:	9304      	str	r3, [sp, #16]
 800bb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb1e:	2301      	movs	r3, #1
 800bb20:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 81b8 	beq.w	800be9a <_dtoa_r+0xb6a>
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb30:	6918      	ldr	r0, [r3, #16]
 800bb32:	f000 fb77 	bl	800c224 <__hi0bits>
 800bb36:	f1c0 0020 	rsb	r0, r0, #32
 800bb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb3c:	4418      	add	r0, r3
 800bb3e:	f010 001f 	ands.w	r0, r0, #31
 800bb42:	f000 8082 	beq.w	800bc4a <_dtoa_r+0x91a>
 800bb46:	f1c0 0320 	rsb	r3, r0, #32
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	dd73      	ble.n	800bc36 <_dtoa_r+0x906>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	f1c0 001c 	rsb	r0, r0, #28
 800bb54:	4403      	add	r3, r0
 800bb56:	9304      	str	r3, [sp, #16]
 800bb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5a:	4406      	add	r6, r0
 800bb5c:	4403      	add	r3, r0
 800bb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb60:	9b04      	ldr	r3, [sp, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dd05      	ble.n	800bb72 <_dtoa_r+0x842>
 800bb66:	461a      	mov	r2, r3
 800bb68:	4648      	mov	r0, r9
 800bb6a:	9903      	ldr	r1, [sp, #12]
 800bb6c:	f000 fcb8 	bl	800c4e0 <__lshift>
 800bb70:	9003      	str	r0, [sp, #12]
 800bb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dd05      	ble.n	800bb84 <_dtoa_r+0x854>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f000 fcaf 	bl	800c4e0 <__lshift>
 800bb82:	4604      	mov	r4, r0
 800bb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d061      	beq.n	800bc4e <_dtoa_r+0x91e>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	9803      	ldr	r0, [sp, #12]
 800bb8e:	f000 fd13 	bl	800c5b8 <__mcmp>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	da5b      	bge.n	800bc4e <_dtoa_r+0x91e>
 800bb96:	2300      	movs	r3, #0
 800bb98:	220a      	movs	r2, #10
 800bb9a:	4648      	mov	r0, r9
 800bb9c:	9903      	ldr	r1, [sp, #12]
 800bb9e:	f000 fafb 	bl	800c198 <__multadd>
 800bba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba4:	f107 38ff 	add.w	r8, r7, #4294967295
 800bba8:	9003      	str	r0, [sp, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8177 	beq.w	800be9e <_dtoa_r+0xb6e>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	220a      	movs	r2, #10
 800bbb6:	4648      	mov	r0, r9
 800bbb8:	f000 faee 	bl	800c198 <__multadd>
 800bbbc:	f1bb 0f00 	cmp.w	fp, #0
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	dc6f      	bgt.n	800bca4 <_dtoa_r+0x974>
 800bbc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	dc49      	bgt.n	800bc5e <_dtoa_r+0x92e>
 800bbca:	e06b      	b.n	800bca4 <_dtoa_r+0x974>
 800bbcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bbce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bbd2:	e73c      	b.n	800ba4e <_dtoa_r+0x71e>
 800bbd4:	3fe00000 	.word	0x3fe00000
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	9b08      	ldr	r3, [sp, #32]
 800bbde:	1e5c      	subs	r4, r3, #1
 800bbe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	db09      	blt.n	800bbfa <_dtoa_r+0x8ca>
 800bbe6:	1b1c      	subs	r4, r3, r4
 800bbe8:	9b08      	ldr	r3, [sp, #32]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f6bf af30 	bge.w	800ba50 <_dtoa_r+0x720>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	9a08      	ldr	r2, [sp, #32]
 800bbf4:	1a9e      	subs	r6, r3, r2
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e72b      	b.n	800ba52 <_dtoa_r+0x722>
 800bbfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbfe:	1ae3      	subs	r3, r4, r3
 800bc00:	441a      	add	r2, r3
 800bc02:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc04:	9e04      	ldr	r6, [sp, #16]
 800bc06:	2400      	movs	r4, #0
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc0c:	e721      	b.n	800ba52 <_dtoa_r+0x722>
 800bc0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc10:	9e04      	ldr	r6, [sp, #16]
 800bc12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc14:	e728      	b.n	800ba68 <_dtoa_r+0x738>
 800bc16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc1a:	e751      	b.n	800bac0 <_dtoa_r+0x790>
 800bc1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc1e:	9903      	ldr	r1, [sp, #12]
 800bc20:	e750      	b.n	800bac4 <_dtoa_r+0x794>
 800bc22:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc26:	e751      	b.n	800bacc <_dtoa_r+0x79c>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e779      	b.n	800bb20 <_dtoa_r+0x7f0>
 800bc2c:	9b06      	ldr	r3, [sp, #24]
 800bc2e:	e777      	b.n	800bb20 <_dtoa_r+0x7f0>
 800bc30:	2300      	movs	r3, #0
 800bc32:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc34:	e779      	b.n	800bb2a <_dtoa_r+0x7fa>
 800bc36:	d093      	beq.n	800bb60 <_dtoa_r+0x830>
 800bc38:	9a04      	ldr	r2, [sp, #16]
 800bc3a:	331c      	adds	r3, #28
 800bc3c:	441a      	add	r2, r3
 800bc3e:	9204      	str	r2, [sp, #16]
 800bc40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc42:	441e      	add	r6, r3
 800bc44:	441a      	add	r2, r3
 800bc46:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc48:	e78a      	b.n	800bb60 <_dtoa_r+0x830>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	e7f4      	b.n	800bc38 <_dtoa_r+0x908>
 800bc4e:	9b08      	ldr	r3, [sp, #32]
 800bc50:	46b8      	mov	r8, r7
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dc20      	bgt.n	800bc98 <_dtoa_r+0x968>
 800bc56:	469b      	mov	fp, r3
 800bc58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	dd1e      	ble.n	800bc9c <_dtoa_r+0x96c>
 800bc5e:	f1bb 0f00 	cmp.w	fp, #0
 800bc62:	f47f adb1 	bne.w	800b7c8 <_dtoa_r+0x498>
 800bc66:	4621      	mov	r1, r4
 800bc68:	465b      	mov	r3, fp
 800bc6a:	2205      	movs	r2, #5
 800bc6c:	4648      	mov	r0, r9
 800bc6e:	f000 fa93 	bl	800c198 <__multadd>
 800bc72:	4601      	mov	r1, r0
 800bc74:	4604      	mov	r4, r0
 800bc76:	9803      	ldr	r0, [sp, #12]
 800bc78:	f000 fc9e 	bl	800c5b8 <__mcmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f77f ada3 	ble.w	800b7c8 <_dtoa_r+0x498>
 800bc82:	4656      	mov	r6, sl
 800bc84:	2331      	movs	r3, #49	@ 0x31
 800bc86:	f108 0801 	add.w	r8, r8, #1
 800bc8a:	f806 3b01 	strb.w	r3, [r6], #1
 800bc8e:	e59f      	b.n	800b7d0 <_dtoa_r+0x4a0>
 800bc90:	46b8      	mov	r8, r7
 800bc92:	9c08      	ldr	r4, [sp, #32]
 800bc94:	4625      	mov	r5, r4
 800bc96:	e7f4      	b.n	800bc82 <_dtoa_r+0x952>
 800bc98:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bc9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8101 	beq.w	800bea6 <_dtoa_r+0xb76>
 800bca4:	2e00      	cmp	r6, #0
 800bca6:	dd05      	ble.n	800bcb4 <_dtoa_r+0x984>
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4632      	mov	r2, r6
 800bcac:	4648      	mov	r0, r9
 800bcae:	f000 fc17 	bl	800c4e0 <__lshift>
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d05c      	beq.n	800bd74 <_dtoa_r+0xa44>
 800bcba:	4648      	mov	r0, r9
 800bcbc:	6869      	ldr	r1, [r5, #4]
 800bcbe:	f000 fa09 	bl	800c0d4 <_Balloc>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	b928      	cbnz	r0, 800bcd2 <_dtoa_r+0x9a2>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bccc:	4b80      	ldr	r3, [pc, #512]	@ (800bed0 <_dtoa_r+0xba0>)
 800bcce:	f7ff bb43 	b.w	800b358 <_dtoa_r+0x28>
 800bcd2:	692a      	ldr	r2, [r5, #16]
 800bcd4:	f105 010c 	add.w	r1, r5, #12
 800bcd8:	3202      	adds	r2, #2
 800bcda:	0092      	lsls	r2, r2, #2
 800bcdc:	300c      	adds	r0, #12
 800bcde:	f001 f961 	bl	800cfa4 <memcpy>
 800bce2:	2201      	movs	r2, #1
 800bce4:	4631      	mov	r1, r6
 800bce6:	4648      	mov	r0, r9
 800bce8:	f000 fbfa 	bl	800c4e0 <__lshift>
 800bcec:	462f      	mov	r7, r5
 800bcee:	4605      	mov	r5, r0
 800bcf0:	f10a 0301 	add.w	r3, sl, #1
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	eb0a 030b 	add.w	r3, sl, fp
 800bcfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcfc:	9b06      	ldr	r3, [sp, #24]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	4621      	mov	r1, r4
 800bd08:	9803      	ldr	r0, [sp, #12]
 800bd0a:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd0e:	f7ff fa86 	bl	800b21e <quorem>
 800bd12:	4603      	mov	r3, r0
 800bd14:	4639      	mov	r1, r7
 800bd16:	3330      	adds	r3, #48	@ 0x30
 800bd18:	9006      	str	r0, [sp, #24]
 800bd1a:	9803      	ldr	r0, [sp, #12]
 800bd1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd1e:	f000 fc4b 	bl	800c5b8 <__mcmp>
 800bd22:	462a      	mov	r2, r5
 800bd24:	9008      	str	r0, [sp, #32]
 800bd26:	4621      	mov	r1, r4
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f000 fc61 	bl	800c5f0 <__mdiff>
 800bd2e:	68c2      	ldr	r2, [r0, #12]
 800bd30:	4606      	mov	r6, r0
 800bd32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd34:	bb02      	cbnz	r2, 800bd78 <_dtoa_r+0xa48>
 800bd36:	4601      	mov	r1, r0
 800bd38:	9803      	ldr	r0, [sp, #12]
 800bd3a:	f000 fc3d 	bl	800c5b8 <__mcmp>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd42:	4631      	mov	r1, r6
 800bd44:	4648      	mov	r0, r9
 800bd46:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800bd4a:	f000 fa03 	bl	800c154 <_Bfree>
 800bd4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd52:	9e04      	ldr	r6, [sp, #16]
 800bd54:	ea42 0103 	orr.w	r1, r2, r3
 800bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5a:	4319      	orrs	r1, r3
 800bd5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd5e:	d10d      	bne.n	800bd7c <_dtoa_r+0xa4c>
 800bd60:	2b39      	cmp	r3, #57	@ 0x39
 800bd62:	d027      	beq.n	800bdb4 <_dtoa_r+0xa84>
 800bd64:	9a08      	ldr	r2, [sp, #32]
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	dd01      	ble.n	800bd6e <_dtoa_r+0xa3e>
 800bd6a:	9b06      	ldr	r3, [sp, #24]
 800bd6c:	3331      	adds	r3, #49	@ 0x31
 800bd6e:	f88b 3000 	strb.w	r3, [fp]
 800bd72:	e52e      	b.n	800b7d2 <_dtoa_r+0x4a2>
 800bd74:	4628      	mov	r0, r5
 800bd76:	e7b9      	b.n	800bcec <_dtoa_r+0x9bc>
 800bd78:	2201      	movs	r2, #1
 800bd7a:	e7e2      	b.n	800bd42 <_dtoa_r+0xa12>
 800bd7c:	9908      	ldr	r1, [sp, #32]
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	db04      	blt.n	800bd8c <_dtoa_r+0xa5c>
 800bd82:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800bd84:	4301      	orrs	r1, r0
 800bd86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd88:	4301      	orrs	r1, r0
 800bd8a:	d120      	bne.n	800bdce <_dtoa_r+0xa9e>
 800bd8c:	2a00      	cmp	r2, #0
 800bd8e:	ddee      	ble.n	800bd6e <_dtoa_r+0xa3e>
 800bd90:	2201      	movs	r2, #1
 800bd92:	9903      	ldr	r1, [sp, #12]
 800bd94:	4648      	mov	r0, r9
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	f000 fba2 	bl	800c4e0 <__lshift>
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	9003      	str	r0, [sp, #12]
 800bda0:	f000 fc0a 	bl	800c5b8 <__mcmp>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	dc02      	bgt.n	800bdb0 <_dtoa_r+0xa80>
 800bdaa:	d1e0      	bne.n	800bd6e <_dtoa_r+0xa3e>
 800bdac:	07da      	lsls	r2, r3, #31
 800bdae:	d5de      	bpl.n	800bd6e <_dtoa_r+0xa3e>
 800bdb0:	2b39      	cmp	r3, #57	@ 0x39
 800bdb2:	d1da      	bne.n	800bd6a <_dtoa_r+0xa3a>
 800bdb4:	2339      	movs	r3, #57	@ 0x39
 800bdb6:	f88b 3000 	strb.w	r3, [fp]
 800bdba:	4633      	mov	r3, r6
 800bdbc:	461e      	mov	r6, r3
 800bdbe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	2a39      	cmp	r2, #57	@ 0x39
 800bdc6:	d04e      	beq.n	800be66 <_dtoa_r+0xb36>
 800bdc8:	3201      	adds	r2, #1
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	e501      	b.n	800b7d2 <_dtoa_r+0x4a2>
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	dd03      	ble.n	800bdda <_dtoa_r+0xaaa>
 800bdd2:	2b39      	cmp	r3, #57	@ 0x39
 800bdd4:	d0ee      	beq.n	800bdb4 <_dtoa_r+0xa84>
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	e7c9      	b.n	800bd6e <_dtoa_r+0xa3e>
 800bdda:	9a04      	ldr	r2, [sp, #16]
 800bddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdde:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bde2:	428a      	cmp	r2, r1
 800bde4:	d028      	beq.n	800be38 <_dtoa_r+0xb08>
 800bde6:	2300      	movs	r3, #0
 800bde8:	220a      	movs	r2, #10
 800bdea:	9903      	ldr	r1, [sp, #12]
 800bdec:	4648      	mov	r0, r9
 800bdee:	f000 f9d3 	bl	800c198 <__multadd>
 800bdf2:	42af      	cmp	r7, r5
 800bdf4:	9003      	str	r0, [sp, #12]
 800bdf6:	f04f 0300 	mov.w	r3, #0
 800bdfa:	f04f 020a 	mov.w	r2, #10
 800bdfe:	4639      	mov	r1, r7
 800be00:	4648      	mov	r0, r9
 800be02:	d107      	bne.n	800be14 <_dtoa_r+0xae4>
 800be04:	f000 f9c8 	bl	800c198 <__multadd>
 800be08:	4607      	mov	r7, r0
 800be0a:	4605      	mov	r5, r0
 800be0c:	9b04      	ldr	r3, [sp, #16]
 800be0e:	3301      	adds	r3, #1
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	e777      	b.n	800bd04 <_dtoa_r+0x9d4>
 800be14:	f000 f9c0 	bl	800c198 <__multadd>
 800be18:	4629      	mov	r1, r5
 800be1a:	4607      	mov	r7, r0
 800be1c:	2300      	movs	r3, #0
 800be1e:	220a      	movs	r2, #10
 800be20:	4648      	mov	r0, r9
 800be22:	f000 f9b9 	bl	800c198 <__multadd>
 800be26:	4605      	mov	r5, r0
 800be28:	e7f0      	b.n	800be0c <_dtoa_r+0xadc>
 800be2a:	f1bb 0f00 	cmp.w	fp, #0
 800be2e:	bfcc      	ite	gt
 800be30:	465e      	movgt	r6, fp
 800be32:	2601      	movle	r6, #1
 800be34:	2700      	movs	r7, #0
 800be36:	4456      	add	r6, sl
 800be38:	2201      	movs	r2, #1
 800be3a:	9903      	ldr	r1, [sp, #12]
 800be3c:	4648      	mov	r0, r9
 800be3e:	9304      	str	r3, [sp, #16]
 800be40:	f000 fb4e 	bl	800c4e0 <__lshift>
 800be44:	4621      	mov	r1, r4
 800be46:	9003      	str	r0, [sp, #12]
 800be48:	f000 fbb6 	bl	800c5b8 <__mcmp>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	dcb4      	bgt.n	800bdba <_dtoa_r+0xa8a>
 800be50:	d102      	bne.n	800be58 <_dtoa_r+0xb28>
 800be52:	9b04      	ldr	r3, [sp, #16]
 800be54:	07db      	lsls	r3, r3, #31
 800be56:	d4b0      	bmi.n	800bdba <_dtoa_r+0xa8a>
 800be58:	4633      	mov	r3, r6
 800be5a:	461e      	mov	r6, r3
 800be5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be60:	2a30      	cmp	r2, #48	@ 0x30
 800be62:	d0fa      	beq.n	800be5a <_dtoa_r+0xb2a>
 800be64:	e4b5      	b.n	800b7d2 <_dtoa_r+0x4a2>
 800be66:	459a      	cmp	sl, r3
 800be68:	d1a8      	bne.n	800bdbc <_dtoa_r+0xa8c>
 800be6a:	2331      	movs	r3, #49	@ 0x31
 800be6c:	f108 0801 	add.w	r8, r8, #1
 800be70:	f88a 3000 	strb.w	r3, [sl]
 800be74:	e4ad      	b.n	800b7d2 <_dtoa_r+0x4a2>
 800be76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bed4 <_dtoa_r+0xba4>
 800be7c:	b11b      	cbz	r3, 800be86 <_dtoa_r+0xb56>
 800be7e:	f10a 0308 	add.w	r3, sl, #8
 800be82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	4650      	mov	r0, sl
 800be88:	b017      	add	sp, #92	@ 0x5c
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be90:	2b01      	cmp	r3, #1
 800be92:	f77f ae2e 	ble.w	800baf2 <_dtoa_r+0x7c2>
 800be96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be98:	930a      	str	r3, [sp, #40]	@ 0x28
 800be9a:	2001      	movs	r0, #1
 800be9c:	e64d      	b.n	800bb3a <_dtoa_r+0x80a>
 800be9e:	f1bb 0f00 	cmp.w	fp, #0
 800bea2:	f77f aed9 	ble.w	800bc58 <_dtoa_r+0x928>
 800bea6:	4656      	mov	r6, sl
 800bea8:	4621      	mov	r1, r4
 800beaa:	9803      	ldr	r0, [sp, #12]
 800beac:	f7ff f9b7 	bl	800b21e <quorem>
 800beb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800beb4:	f806 3b01 	strb.w	r3, [r6], #1
 800beb8:	eba6 020a 	sub.w	r2, r6, sl
 800bebc:	4593      	cmp	fp, r2
 800bebe:	ddb4      	ble.n	800be2a <_dtoa_r+0xafa>
 800bec0:	2300      	movs	r3, #0
 800bec2:	220a      	movs	r2, #10
 800bec4:	4648      	mov	r0, r9
 800bec6:	9903      	ldr	r1, [sp, #12]
 800bec8:	f000 f966 	bl	800c198 <__multadd>
 800becc:	9003      	str	r0, [sp, #12]
 800bece:	e7eb      	b.n	800bea8 <_dtoa_r+0xb78>
 800bed0:	0800d786 	.word	0x0800d786
 800bed4:	0800d70a 	.word	0x0800d70a

0800bed8 <_free_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4605      	mov	r5, r0
 800bedc:	2900      	cmp	r1, #0
 800bede:	d040      	beq.n	800bf62 <_free_r+0x8a>
 800bee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee4:	1f0c      	subs	r4, r1, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfb8      	it	lt
 800beea:	18e4      	addlt	r4, r4, r3
 800beec:	f000 f8e6 	bl	800c0bc <__malloc_lock>
 800bef0:	4a1c      	ldr	r2, [pc, #112]	@ (800bf64 <_free_r+0x8c>)
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	b933      	cbnz	r3, 800bf04 <_free_r+0x2c>
 800bef6:	6063      	str	r3, [r4, #4]
 800bef8:	6014      	str	r4, [r2, #0]
 800befa:	4628      	mov	r0, r5
 800befc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf00:	f000 b8e2 	b.w	800c0c8 <__malloc_unlock>
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	d908      	bls.n	800bf1a <_free_r+0x42>
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	1821      	adds	r1, r4, r0
 800bf0c:	428b      	cmp	r3, r1
 800bf0e:	bf01      	itttt	eq
 800bf10:	6819      	ldreq	r1, [r3, #0]
 800bf12:	685b      	ldreq	r3, [r3, #4]
 800bf14:	1809      	addeq	r1, r1, r0
 800bf16:	6021      	streq	r1, [r4, #0]
 800bf18:	e7ed      	b.n	800bef6 <_free_r+0x1e>
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b10b      	cbz	r3, 800bf24 <_free_r+0x4c>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d9fa      	bls.n	800bf1a <_free_r+0x42>
 800bf24:	6811      	ldr	r1, [r2, #0]
 800bf26:	1850      	adds	r0, r2, r1
 800bf28:	42a0      	cmp	r0, r4
 800bf2a:	d10b      	bne.n	800bf44 <_free_r+0x6c>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	4401      	add	r1, r0
 800bf30:	1850      	adds	r0, r2, r1
 800bf32:	4283      	cmp	r3, r0
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	d1e0      	bne.n	800befa <_free_r+0x22>
 800bf38:	6818      	ldr	r0, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	4408      	add	r0, r1
 800bf3e:	6010      	str	r0, [r2, #0]
 800bf40:	6053      	str	r3, [r2, #4]
 800bf42:	e7da      	b.n	800befa <_free_r+0x22>
 800bf44:	d902      	bls.n	800bf4c <_free_r+0x74>
 800bf46:	230c      	movs	r3, #12
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	e7d6      	b.n	800befa <_free_r+0x22>
 800bf4c:	6820      	ldr	r0, [r4, #0]
 800bf4e:	1821      	adds	r1, r4, r0
 800bf50:	428b      	cmp	r3, r1
 800bf52:	bf01      	itttt	eq
 800bf54:	6819      	ldreq	r1, [r3, #0]
 800bf56:	685b      	ldreq	r3, [r3, #4]
 800bf58:	1809      	addeq	r1, r1, r0
 800bf5a:	6021      	streq	r1, [r4, #0]
 800bf5c:	6063      	str	r3, [r4, #4]
 800bf5e:	6054      	str	r4, [r2, #4]
 800bf60:	e7cb      	b.n	800befa <_free_r+0x22>
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	200007f0 	.word	0x200007f0

0800bf68 <malloc>:
 800bf68:	4b02      	ldr	r3, [pc, #8]	@ (800bf74 <malloc+0xc>)
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	f000 b825 	b.w	800bfbc <_malloc_r>
 800bf72:	bf00      	nop
 800bf74:	20000074 	.word	0x20000074

0800bf78 <sbrk_aligned>:
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bfb8 <sbrk_aligned+0x40>)
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	6831      	ldr	r1, [r6, #0]
 800bf80:	4605      	mov	r5, r0
 800bf82:	b911      	cbnz	r1, 800bf8a <sbrk_aligned+0x12>
 800bf84:	f000 fffe 	bl	800cf84 <_sbrk_r>
 800bf88:	6030      	str	r0, [r6, #0]
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f000 fff9 	bl	800cf84 <_sbrk_r>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	d103      	bne.n	800bf9e <sbrk_aligned+0x26>
 800bf96:	f04f 34ff 	mov.w	r4, #4294967295
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	bd70      	pop	{r4, r5, r6, pc}
 800bf9e:	1cc4      	adds	r4, r0, #3
 800bfa0:	f024 0403 	bic.w	r4, r4, #3
 800bfa4:	42a0      	cmp	r0, r4
 800bfa6:	d0f8      	beq.n	800bf9a <sbrk_aligned+0x22>
 800bfa8:	1a21      	subs	r1, r4, r0
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 ffea 	bl	800cf84 <_sbrk_r>
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d1f2      	bne.n	800bf9a <sbrk_aligned+0x22>
 800bfb4:	e7ef      	b.n	800bf96 <sbrk_aligned+0x1e>
 800bfb6:	bf00      	nop
 800bfb8:	200007ec 	.word	0x200007ec

0800bfbc <_malloc_r>:
 800bfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	1ccd      	adds	r5, r1, #3
 800bfc2:	f025 0503 	bic.w	r5, r5, #3
 800bfc6:	3508      	adds	r5, #8
 800bfc8:	2d0c      	cmp	r5, #12
 800bfca:	bf38      	it	cc
 800bfcc:	250c      	movcc	r5, #12
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	db01      	blt.n	800bfd8 <_malloc_r+0x1c>
 800bfd4:	42a9      	cmp	r1, r5
 800bfd6:	d904      	bls.n	800bfe2 <_malloc_r+0x26>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	6033      	str	r3, [r6, #0]
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0b8 <_malloc_r+0xfc>
 800bfe6:	f000 f869 	bl	800c0bc <__malloc_lock>
 800bfea:	f8d8 3000 	ldr.w	r3, [r8]
 800bfee:	461c      	mov	r4, r3
 800bff0:	bb44      	cbnz	r4, 800c044 <_malloc_r+0x88>
 800bff2:	4629      	mov	r1, r5
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7ff ffbf 	bl	800bf78 <sbrk_aligned>
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	4604      	mov	r4, r0
 800bffe:	d158      	bne.n	800c0b2 <_malloc_r+0xf6>
 800c000:	f8d8 4000 	ldr.w	r4, [r8]
 800c004:	4627      	mov	r7, r4
 800c006:	2f00      	cmp	r7, #0
 800c008:	d143      	bne.n	800c092 <_malloc_r+0xd6>
 800c00a:	2c00      	cmp	r4, #0
 800c00c:	d04b      	beq.n	800c0a6 <_malloc_r+0xea>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	4639      	mov	r1, r7
 800c012:	4630      	mov	r0, r6
 800c014:	eb04 0903 	add.w	r9, r4, r3
 800c018:	f000 ffb4 	bl	800cf84 <_sbrk_r>
 800c01c:	4581      	cmp	r9, r0
 800c01e:	d142      	bne.n	800c0a6 <_malloc_r+0xea>
 800c020:	6821      	ldr	r1, [r4, #0]
 800c022:	4630      	mov	r0, r6
 800c024:	1a6d      	subs	r5, r5, r1
 800c026:	4629      	mov	r1, r5
 800c028:	f7ff ffa6 	bl	800bf78 <sbrk_aligned>
 800c02c:	3001      	adds	r0, #1
 800c02e:	d03a      	beq.n	800c0a6 <_malloc_r+0xea>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	442b      	add	r3, r5
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	f8d8 3000 	ldr.w	r3, [r8]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	bb62      	cbnz	r2, 800c098 <_malloc_r+0xdc>
 800c03e:	f8c8 7000 	str.w	r7, [r8]
 800c042:	e00f      	b.n	800c064 <_malloc_r+0xa8>
 800c044:	6822      	ldr	r2, [r4, #0]
 800c046:	1b52      	subs	r2, r2, r5
 800c048:	d420      	bmi.n	800c08c <_malloc_r+0xd0>
 800c04a:	2a0b      	cmp	r2, #11
 800c04c:	d917      	bls.n	800c07e <_malloc_r+0xc2>
 800c04e:	1961      	adds	r1, r4, r5
 800c050:	42a3      	cmp	r3, r4
 800c052:	6025      	str	r5, [r4, #0]
 800c054:	bf18      	it	ne
 800c056:	6059      	strne	r1, [r3, #4]
 800c058:	6863      	ldr	r3, [r4, #4]
 800c05a:	bf08      	it	eq
 800c05c:	f8c8 1000 	streq.w	r1, [r8]
 800c060:	5162      	str	r2, [r4, r5]
 800c062:	604b      	str	r3, [r1, #4]
 800c064:	4630      	mov	r0, r6
 800c066:	f000 f82f 	bl	800c0c8 <__malloc_unlock>
 800c06a:	f104 000b 	add.w	r0, r4, #11
 800c06e:	1d23      	adds	r3, r4, #4
 800c070:	f020 0007 	bic.w	r0, r0, #7
 800c074:	1ac2      	subs	r2, r0, r3
 800c076:	bf1c      	itt	ne
 800c078:	1a1b      	subne	r3, r3, r0
 800c07a:	50a3      	strne	r3, [r4, r2]
 800c07c:	e7af      	b.n	800bfde <_malloc_r+0x22>
 800c07e:	6862      	ldr	r2, [r4, #4]
 800c080:	42a3      	cmp	r3, r4
 800c082:	bf0c      	ite	eq
 800c084:	f8c8 2000 	streq.w	r2, [r8]
 800c088:	605a      	strne	r2, [r3, #4]
 800c08a:	e7eb      	b.n	800c064 <_malloc_r+0xa8>
 800c08c:	4623      	mov	r3, r4
 800c08e:	6864      	ldr	r4, [r4, #4]
 800c090:	e7ae      	b.n	800bff0 <_malloc_r+0x34>
 800c092:	463c      	mov	r4, r7
 800c094:	687f      	ldr	r7, [r7, #4]
 800c096:	e7b6      	b.n	800c006 <_malloc_r+0x4a>
 800c098:	461a      	mov	r2, r3
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	42a3      	cmp	r3, r4
 800c09e:	d1fb      	bne.n	800c098 <_malloc_r+0xdc>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	6053      	str	r3, [r2, #4]
 800c0a4:	e7de      	b.n	800c064 <_malloc_r+0xa8>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	6033      	str	r3, [r6, #0]
 800c0ac:	f000 f80c 	bl	800c0c8 <__malloc_unlock>
 800c0b0:	e794      	b.n	800bfdc <_malloc_r+0x20>
 800c0b2:	6005      	str	r5, [r0, #0]
 800c0b4:	e7d6      	b.n	800c064 <_malloc_r+0xa8>
 800c0b6:	bf00      	nop
 800c0b8:	200007f0 	.word	0x200007f0

0800c0bc <__malloc_lock>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	@ (800c0c4 <__malloc_lock+0x8>)
 800c0be:	f7ff b89e 	b.w	800b1fe <__retarget_lock_acquire_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	200007e8 	.word	0x200007e8

0800c0c8 <__malloc_unlock>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	@ (800c0d0 <__malloc_unlock+0x8>)
 800c0ca:	f7ff b899 	b.w	800b200 <__retarget_lock_release_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	200007e8 	.word	0x200007e8

0800c0d4 <_Balloc>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	69c6      	ldr	r6, [r0, #28]
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	b976      	cbnz	r6, 800c0fc <_Balloc+0x28>
 800c0de:	2010      	movs	r0, #16
 800c0e0:	f7ff ff42 	bl	800bf68 <malloc>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	61e0      	str	r0, [r4, #28]
 800c0e8:	b920      	cbnz	r0, 800c0f4 <_Balloc+0x20>
 800c0ea:	216b      	movs	r1, #107	@ 0x6b
 800c0ec:	4b17      	ldr	r3, [pc, #92]	@ (800c14c <_Balloc+0x78>)
 800c0ee:	4818      	ldr	r0, [pc, #96]	@ (800c150 <_Balloc+0x7c>)
 800c0f0:	f000 ff66 	bl	800cfc0 <__assert_func>
 800c0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f8:	6006      	str	r6, [r0, #0]
 800c0fa:	60c6      	str	r6, [r0, #12]
 800c0fc:	69e6      	ldr	r6, [r4, #28]
 800c0fe:	68f3      	ldr	r3, [r6, #12]
 800c100:	b183      	cbz	r3, 800c124 <_Balloc+0x50>
 800c102:	69e3      	ldr	r3, [r4, #28]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c10a:	b9b8      	cbnz	r0, 800c13c <_Balloc+0x68>
 800c10c:	2101      	movs	r1, #1
 800c10e:	fa01 f605 	lsl.w	r6, r1, r5
 800c112:	1d72      	adds	r2, r6, #5
 800c114:	4620      	mov	r0, r4
 800c116:	0092      	lsls	r2, r2, #2
 800c118:	f000 ff70 	bl	800cffc <_calloc_r>
 800c11c:	b160      	cbz	r0, 800c138 <_Balloc+0x64>
 800c11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c122:	e00e      	b.n	800c142 <_Balloc+0x6e>
 800c124:	2221      	movs	r2, #33	@ 0x21
 800c126:	2104      	movs	r1, #4
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 ff67 	bl	800cffc <_calloc_r>
 800c12e:	69e3      	ldr	r3, [r4, #28]
 800c130:	60f0      	str	r0, [r6, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e4      	bne.n	800c102 <_Balloc+0x2e>
 800c138:	2000      	movs	r0, #0
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	6802      	ldr	r2, [r0, #0]
 800c13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c142:	2300      	movs	r3, #0
 800c144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c148:	e7f7      	b.n	800c13a <_Balloc+0x66>
 800c14a:	bf00      	nop
 800c14c:	0800d717 	.word	0x0800d717
 800c150:	0800d797 	.word	0x0800d797

0800c154 <_Bfree>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	69c6      	ldr	r6, [r0, #28]
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b976      	cbnz	r6, 800c17c <_Bfree+0x28>
 800c15e:	2010      	movs	r0, #16
 800c160:	f7ff ff02 	bl	800bf68 <malloc>
 800c164:	4602      	mov	r2, r0
 800c166:	61e8      	str	r0, [r5, #28]
 800c168:	b920      	cbnz	r0, 800c174 <_Bfree+0x20>
 800c16a:	218f      	movs	r1, #143	@ 0x8f
 800c16c:	4b08      	ldr	r3, [pc, #32]	@ (800c190 <_Bfree+0x3c>)
 800c16e:	4809      	ldr	r0, [pc, #36]	@ (800c194 <_Bfree+0x40>)
 800c170:	f000 ff26 	bl	800cfc0 <__assert_func>
 800c174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c178:	6006      	str	r6, [r0, #0]
 800c17a:	60c6      	str	r6, [r0, #12]
 800c17c:	b13c      	cbz	r4, 800c18e <_Bfree+0x3a>
 800c17e:	69eb      	ldr	r3, [r5, #28]
 800c180:	6862      	ldr	r2, [r4, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c188:	6021      	str	r1, [r4, #0]
 800c18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	0800d717 	.word	0x0800d717
 800c194:	0800d797 	.word	0x0800d797

0800c198 <__multadd>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	4607      	mov	r7, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	461e      	mov	r6, r3
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	690d      	ldr	r5, [r1, #16]
 800c1a6:	f101 0c14 	add.w	ip, r1, #20
 800c1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	b299      	uxth	r1, r3
 800c1b2:	fb02 6101 	mla	r1, r2, r1, r6
 800c1b6:	0c1e      	lsrs	r6, r3, #16
 800c1b8:	0c0b      	lsrs	r3, r1, #16
 800c1ba:	fb02 3306 	mla	r3, r2, r6, r3
 800c1be:	b289      	uxth	r1, r1
 800c1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1c4:	4285      	cmp	r5, r0
 800c1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ce:	dcec      	bgt.n	800c1aa <__multadd+0x12>
 800c1d0:	b30e      	cbz	r6, 800c216 <__multadd+0x7e>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	42ab      	cmp	r3, r5
 800c1d6:	dc19      	bgt.n	800c20c <__multadd+0x74>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	4638      	mov	r0, r7
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f7ff ff79 	bl	800c0d4 <_Balloc>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	b928      	cbnz	r0, 800c1f2 <__multadd+0x5a>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	21ba      	movs	r1, #186	@ 0xba
 800c1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c21c <__multadd+0x84>)
 800c1ec:	480c      	ldr	r0, [pc, #48]	@ (800c220 <__multadd+0x88>)
 800c1ee:	f000 fee7 	bl	800cfc0 <__assert_func>
 800c1f2:	6922      	ldr	r2, [r4, #16]
 800c1f4:	f104 010c 	add.w	r1, r4, #12
 800c1f8:	3202      	adds	r2, #2
 800c1fa:	0092      	lsls	r2, r2, #2
 800c1fc:	300c      	adds	r0, #12
 800c1fe:	f000 fed1 	bl	800cfa4 <memcpy>
 800c202:	4621      	mov	r1, r4
 800c204:	4638      	mov	r0, r7
 800c206:	f7ff ffa5 	bl	800c154 <_Bfree>
 800c20a:	4644      	mov	r4, r8
 800c20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c210:	3501      	adds	r5, #1
 800c212:	615e      	str	r6, [r3, #20]
 800c214:	6125      	str	r5, [r4, #16]
 800c216:	4620      	mov	r0, r4
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	0800d786 	.word	0x0800d786
 800c220:	0800d797 	.word	0x0800d797

0800c224 <__hi0bits>:
 800c224:	4603      	mov	r3, r0
 800c226:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c22a:	bf3a      	itte	cc
 800c22c:	0403      	lslcc	r3, r0, #16
 800c22e:	2010      	movcc	r0, #16
 800c230:	2000      	movcs	r0, #0
 800c232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c236:	bf3c      	itt	cc
 800c238:	021b      	lslcc	r3, r3, #8
 800c23a:	3008      	addcc	r0, #8
 800c23c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c240:	bf3c      	itt	cc
 800c242:	011b      	lslcc	r3, r3, #4
 800c244:	3004      	addcc	r0, #4
 800c246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24a:	bf3c      	itt	cc
 800c24c:	009b      	lslcc	r3, r3, #2
 800c24e:	3002      	addcc	r0, #2
 800c250:	2b00      	cmp	r3, #0
 800c252:	db05      	blt.n	800c260 <__hi0bits+0x3c>
 800c254:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c258:	f100 0001 	add.w	r0, r0, #1
 800c25c:	bf08      	it	eq
 800c25e:	2020      	moveq	r0, #32
 800c260:	4770      	bx	lr

0800c262 <__lo0bits>:
 800c262:	6803      	ldr	r3, [r0, #0]
 800c264:	4602      	mov	r2, r0
 800c266:	f013 0007 	ands.w	r0, r3, #7
 800c26a:	d00b      	beq.n	800c284 <__lo0bits+0x22>
 800c26c:	07d9      	lsls	r1, r3, #31
 800c26e:	d421      	bmi.n	800c2b4 <__lo0bits+0x52>
 800c270:	0798      	lsls	r0, r3, #30
 800c272:	bf49      	itett	mi
 800c274:	085b      	lsrmi	r3, r3, #1
 800c276:	089b      	lsrpl	r3, r3, #2
 800c278:	2001      	movmi	r0, #1
 800c27a:	6013      	strmi	r3, [r2, #0]
 800c27c:	bf5c      	itt	pl
 800c27e:	2002      	movpl	r0, #2
 800c280:	6013      	strpl	r3, [r2, #0]
 800c282:	4770      	bx	lr
 800c284:	b299      	uxth	r1, r3
 800c286:	b909      	cbnz	r1, 800c28c <__lo0bits+0x2a>
 800c288:	2010      	movs	r0, #16
 800c28a:	0c1b      	lsrs	r3, r3, #16
 800c28c:	b2d9      	uxtb	r1, r3
 800c28e:	b909      	cbnz	r1, 800c294 <__lo0bits+0x32>
 800c290:	3008      	adds	r0, #8
 800c292:	0a1b      	lsrs	r3, r3, #8
 800c294:	0719      	lsls	r1, r3, #28
 800c296:	bf04      	itt	eq
 800c298:	091b      	lsreq	r3, r3, #4
 800c29a:	3004      	addeq	r0, #4
 800c29c:	0799      	lsls	r1, r3, #30
 800c29e:	bf04      	itt	eq
 800c2a0:	089b      	lsreq	r3, r3, #2
 800c2a2:	3002      	addeq	r0, #2
 800c2a4:	07d9      	lsls	r1, r3, #31
 800c2a6:	d403      	bmi.n	800c2b0 <__lo0bits+0x4e>
 800c2a8:	085b      	lsrs	r3, r3, #1
 800c2aa:	f100 0001 	add.w	r0, r0, #1
 800c2ae:	d003      	beq.n	800c2b8 <__lo0bits+0x56>
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	4770      	bx	lr
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4770      	bx	lr
 800c2b8:	2020      	movs	r0, #32
 800c2ba:	4770      	bx	lr

0800c2bc <__i2b>:
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	460c      	mov	r4, r1
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	f7ff ff07 	bl	800c0d4 <_Balloc>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	b928      	cbnz	r0, 800c2d6 <__i2b+0x1a>
 800c2ca:	f240 1145 	movw	r1, #325	@ 0x145
 800c2ce:	4b04      	ldr	r3, [pc, #16]	@ (800c2e0 <__i2b+0x24>)
 800c2d0:	4804      	ldr	r0, [pc, #16]	@ (800c2e4 <__i2b+0x28>)
 800c2d2:	f000 fe75 	bl	800cfc0 <__assert_func>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	6144      	str	r4, [r0, #20]
 800c2da:	6103      	str	r3, [r0, #16]
 800c2dc:	bd10      	pop	{r4, pc}
 800c2de:	bf00      	nop
 800c2e0:	0800d786 	.word	0x0800d786
 800c2e4:	0800d797 	.word	0x0800d797

0800c2e8 <__multiply>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	4617      	mov	r7, r2
 800c2ee:	690a      	ldr	r2, [r1, #16]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	bfa2      	ittt	ge
 800c2f8:	463b      	movge	r3, r7
 800c2fa:	460f      	movge	r7, r1
 800c2fc:	4699      	movge	r9, r3
 800c2fe:	693d      	ldr	r5, [r7, #16]
 800c300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	eb05 060a 	add.w	r6, r5, sl
 800c30c:	42b3      	cmp	r3, r6
 800c30e:	b085      	sub	sp, #20
 800c310:	bfb8      	it	lt
 800c312:	3101      	addlt	r1, #1
 800c314:	f7ff fede 	bl	800c0d4 <_Balloc>
 800c318:	b930      	cbnz	r0, 800c328 <__multiply+0x40>
 800c31a:	4602      	mov	r2, r0
 800c31c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c320:	4b40      	ldr	r3, [pc, #256]	@ (800c424 <__multiply+0x13c>)
 800c322:	4841      	ldr	r0, [pc, #260]	@ (800c428 <__multiply+0x140>)
 800c324:	f000 fe4c 	bl	800cfc0 <__assert_func>
 800c328:	f100 0414 	add.w	r4, r0, #20
 800c32c:	4623      	mov	r3, r4
 800c32e:	2200      	movs	r2, #0
 800c330:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c334:	4573      	cmp	r3, lr
 800c336:	d320      	bcc.n	800c37a <__multiply+0x92>
 800c338:	f107 0814 	add.w	r8, r7, #20
 800c33c:	f109 0114 	add.w	r1, r9, #20
 800c340:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c344:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	1beb      	subs	r3, r5, r7
 800c34c:	3b15      	subs	r3, #21
 800c34e:	f023 0303 	bic.w	r3, r3, #3
 800c352:	3304      	adds	r3, #4
 800c354:	3715      	adds	r7, #21
 800c356:	42bd      	cmp	r5, r7
 800c358:	bf38      	it	cc
 800c35a:	2304      	movcc	r3, #4
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	9b02      	ldr	r3, [sp, #8]
 800c360:	9103      	str	r1, [sp, #12]
 800c362:	428b      	cmp	r3, r1
 800c364:	d80c      	bhi.n	800c380 <__multiply+0x98>
 800c366:	2e00      	cmp	r6, #0
 800c368:	dd03      	ble.n	800c372 <__multiply+0x8a>
 800c36a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d055      	beq.n	800c41e <__multiply+0x136>
 800c372:	6106      	str	r6, [r0, #16]
 800c374:	b005      	add	sp, #20
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	f843 2b04 	str.w	r2, [r3], #4
 800c37e:	e7d9      	b.n	800c334 <__multiply+0x4c>
 800c380:	f8b1 a000 	ldrh.w	sl, [r1]
 800c384:	f1ba 0f00 	cmp.w	sl, #0
 800c388:	d01f      	beq.n	800c3ca <__multiply+0xe2>
 800c38a:	46c4      	mov	ip, r8
 800c38c:	46a1      	mov	r9, r4
 800c38e:	2700      	movs	r7, #0
 800c390:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c394:	f8d9 3000 	ldr.w	r3, [r9]
 800c398:	fa1f fb82 	uxth.w	fp, r2
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3a2:	443b      	add	r3, r7
 800c3a4:	f8d9 7000 	ldr.w	r7, [r9]
 800c3a8:	0c12      	lsrs	r2, r2, #16
 800c3aa:	0c3f      	lsrs	r7, r7, #16
 800c3ac:	fb0a 7202 	mla	r2, sl, r2, r7
 800c3b0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ba:	4565      	cmp	r5, ip
 800c3bc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c3c0:	f849 3b04 	str.w	r3, [r9], #4
 800c3c4:	d8e4      	bhi.n	800c390 <__multiply+0xa8>
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	50e7      	str	r7, [r4, r3]
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3104      	adds	r1, #4
 800c3ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c3d2:	f1b9 0f00 	cmp.w	r9, #0
 800c3d6:	d020      	beq.n	800c41a <__multiply+0x132>
 800c3d8:	4647      	mov	r7, r8
 800c3da:	46a4      	mov	ip, r4
 800c3dc:	f04f 0a00 	mov.w	sl, #0
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	f8b7 b000 	ldrh.w	fp, [r7]
 800c3e6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	fb09 220b 	mla	r2, r9, fp, r2
 800c3f0:	4452      	add	r2, sl
 800c3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3f6:	f84c 3b04 	str.w	r3, [ip], #4
 800c3fa:	f857 3b04 	ldr.w	r3, [r7], #4
 800c3fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c402:	f8bc 3000 	ldrh.w	r3, [ip]
 800c406:	42bd      	cmp	r5, r7
 800c408:	fb09 330a 	mla	r3, r9, sl, r3
 800c40c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c414:	d8e5      	bhi.n	800c3e2 <__multiply+0xfa>
 800c416:	9a01      	ldr	r2, [sp, #4]
 800c418:	50a3      	str	r3, [r4, r2]
 800c41a:	3404      	adds	r4, #4
 800c41c:	e79f      	b.n	800c35e <__multiply+0x76>
 800c41e:	3e01      	subs	r6, #1
 800c420:	e7a1      	b.n	800c366 <__multiply+0x7e>
 800c422:	bf00      	nop
 800c424:	0800d786 	.word	0x0800d786
 800c428:	0800d797 	.word	0x0800d797

0800c42c <__pow5mult>:
 800c42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c430:	4615      	mov	r5, r2
 800c432:	f012 0203 	ands.w	r2, r2, #3
 800c436:	4607      	mov	r7, r0
 800c438:	460e      	mov	r6, r1
 800c43a:	d007      	beq.n	800c44c <__pow5mult+0x20>
 800c43c:	4c25      	ldr	r4, [pc, #148]	@ (800c4d4 <__pow5mult+0xa8>)
 800c43e:	3a01      	subs	r2, #1
 800c440:	2300      	movs	r3, #0
 800c442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c446:	f7ff fea7 	bl	800c198 <__multadd>
 800c44a:	4606      	mov	r6, r0
 800c44c:	10ad      	asrs	r5, r5, #2
 800c44e:	d03d      	beq.n	800c4cc <__pow5mult+0xa0>
 800c450:	69fc      	ldr	r4, [r7, #28]
 800c452:	b97c      	cbnz	r4, 800c474 <__pow5mult+0x48>
 800c454:	2010      	movs	r0, #16
 800c456:	f7ff fd87 	bl	800bf68 <malloc>
 800c45a:	4602      	mov	r2, r0
 800c45c:	61f8      	str	r0, [r7, #28]
 800c45e:	b928      	cbnz	r0, 800c46c <__pow5mult+0x40>
 800c460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c464:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d8 <__pow5mult+0xac>)
 800c466:	481d      	ldr	r0, [pc, #116]	@ (800c4dc <__pow5mult+0xb0>)
 800c468:	f000 fdaa 	bl	800cfc0 <__assert_func>
 800c46c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c470:	6004      	str	r4, [r0, #0]
 800c472:	60c4      	str	r4, [r0, #12]
 800c474:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c47c:	b94c      	cbnz	r4, 800c492 <__pow5mult+0x66>
 800c47e:	f240 2171 	movw	r1, #625	@ 0x271
 800c482:	4638      	mov	r0, r7
 800c484:	f7ff ff1a 	bl	800c2bc <__i2b>
 800c488:	2300      	movs	r3, #0
 800c48a:	4604      	mov	r4, r0
 800c48c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c490:	6003      	str	r3, [r0, #0]
 800c492:	f04f 0900 	mov.w	r9, #0
 800c496:	07eb      	lsls	r3, r5, #31
 800c498:	d50a      	bpl.n	800c4b0 <__pow5mult+0x84>
 800c49a:	4631      	mov	r1, r6
 800c49c:	4622      	mov	r2, r4
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f7ff ff22 	bl	800c2e8 <__multiply>
 800c4a4:	4680      	mov	r8, r0
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff fe53 	bl	800c154 <_Bfree>
 800c4ae:	4646      	mov	r6, r8
 800c4b0:	106d      	asrs	r5, r5, #1
 800c4b2:	d00b      	beq.n	800c4cc <__pow5mult+0xa0>
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	b938      	cbnz	r0, 800c4c8 <__pow5mult+0x9c>
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f7ff ff13 	bl	800c2e8 <__multiply>
 800c4c2:	6020      	str	r0, [r4, #0]
 800c4c4:	f8c0 9000 	str.w	r9, [r0]
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	e7e4      	b.n	800c496 <__pow5mult+0x6a>
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800d848 	.word	0x0800d848
 800c4d8:	0800d717 	.word	0x0800d717
 800c4dc:	0800d797 	.word	0x0800d797

0800c4e0 <__lshift>:
 800c4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	4691      	mov	r9, r2
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	6849      	ldr	r1, [r1, #4]
 800c4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4f2:	68a3      	ldr	r3, [r4, #8]
 800c4f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4f8:	f108 0601 	add.w	r6, r8, #1
 800c4fc:	42b3      	cmp	r3, r6
 800c4fe:	db0b      	blt.n	800c518 <__lshift+0x38>
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff fde7 	bl	800c0d4 <_Balloc>
 800c506:	4605      	mov	r5, r0
 800c508:	b948      	cbnz	r0, 800c51e <__lshift+0x3e>
 800c50a:	4602      	mov	r2, r0
 800c50c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c510:	4b27      	ldr	r3, [pc, #156]	@ (800c5b0 <__lshift+0xd0>)
 800c512:	4828      	ldr	r0, [pc, #160]	@ (800c5b4 <__lshift+0xd4>)
 800c514:	f000 fd54 	bl	800cfc0 <__assert_func>
 800c518:	3101      	adds	r1, #1
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	e7ee      	b.n	800c4fc <__lshift+0x1c>
 800c51e:	2300      	movs	r3, #0
 800c520:	f100 0114 	add.w	r1, r0, #20
 800c524:	f100 0210 	add.w	r2, r0, #16
 800c528:	4618      	mov	r0, r3
 800c52a:	4553      	cmp	r3, sl
 800c52c:	db33      	blt.n	800c596 <__lshift+0xb6>
 800c52e:	6920      	ldr	r0, [r4, #16]
 800c530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c534:	f104 0314 	add.w	r3, r4, #20
 800c538:	f019 091f 	ands.w	r9, r9, #31
 800c53c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c544:	d02b      	beq.n	800c59e <__lshift+0xbe>
 800c546:	468a      	mov	sl, r1
 800c548:	2200      	movs	r2, #0
 800c54a:	f1c9 0e20 	rsb	lr, r9, #32
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	fa00 f009 	lsl.w	r0, r0, r9
 800c554:	4310      	orrs	r0, r2
 800c556:	f84a 0b04 	str.w	r0, [sl], #4
 800c55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c55e:	459c      	cmp	ip, r3
 800c560:	fa22 f20e 	lsr.w	r2, r2, lr
 800c564:	d8f3      	bhi.n	800c54e <__lshift+0x6e>
 800c566:	ebac 0304 	sub.w	r3, ip, r4
 800c56a:	3b15      	subs	r3, #21
 800c56c:	f023 0303 	bic.w	r3, r3, #3
 800c570:	3304      	adds	r3, #4
 800c572:	f104 0015 	add.w	r0, r4, #21
 800c576:	4560      	cmp	r0, ip
 800c578:	bf88      	it	hi
 800c57a:	2304      	movhi	r3, #4
 800c57c:	50ca      	str	r2, [r1, r3]
 800c57e:	b10a      	cbz	r2, 800c584 <__lshift+0xa4>
 800c580:	f108 0602 	add.w	r6, r8, #2
 800c584:	3e01      	subs	r6, #1
 800c586:	4638      	mov	r0, r7
 800c588:	4621      	mov	r1, r4
 800c58a:	612e      	str	r6, [r5, #16]
 800c58c:	f7ff fde2 	bl	800c154 <_Bfree>
 800c590:	4628      	mov	r0, r5
 800c592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c596:	f842 0f04 	str.w	r0, [r2, #4]!
 800c59a:	3301      	adds	r3, #1
 800c59c:	e7c5      	b.n	800c52a <__lshift+0x4a>
 800c59e:	3904      	subs	r1, #4
 800c5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a4:	459c      	cmp	ip, r3
 800c5a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5aa:	d8f9      	bhi.n	800c5a0 <__lshift+0xc0>
 800c5ac:	e7ea      	b.n	800c584 <__lshift+0xa4>
 800c5ae:	bf00      	nop
 800c5b0:	0800d786 	.word	0x0800d786
 800c5b4:	0800d797 	.word	0x0800d797

0800c5b8 <__mcmp>:
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	690a      	ldr	r2, [r1, #16]
 800c5bc:	6900      	ldr	r0, [r0, #16]
 800c5be:	b530      	push	{r4, r5, lr}
 800c5c0:	1a80      	subs	r0, r0, r2
 800c5c2:	d10e      	bne.n	800c5e2 <__mcmp+0x2a>
 800c5c4:	3314      	adds	r3, #20
 800c5c6:	3114      	adds	r1, #20
 800c5c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c5d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c5d8:	4295      	cmp	r5, r2
 800c5da:	d003      	beq.n	800c5e4 <__mcmp+0x2c>
 800c5dc:	d205      	bcs.n	800c5ea <__mcmp+0x32>
 800c5de:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e2:	bd30      	pop	{r4, r5, pc}
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	d3f3      	bcc.n	800c5d0 <__mcmp+0x18>
 800c5e8:	e7fb      	b.n	800c5e2 <__mcmp+0x2a>
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	e7f9      	b.n	800c5e2 <__mcmp+0x2a>
	...

0800c5f0 <__mdiff>:
 800c5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4689      	mov	r9, r1
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	f7ff ffdb 	bl	800c5b8 <__mcmp>
 800c602:	1e05      	subs	r5, r0, #0
 800c604:	d112      	bne.n	800c62c <__mdiff+0x3c>
 800c606:	4629      	mov	r1, r5
 800c608:	4630      	mov	r0, r6
 800c60a:	f7ff fd63 	bl	800c0d4 <_Balloc>
 800c60e:	4602      	mov	r2, r0
 800c610:	b928      	cbnz	r0, 800c61e <__mdiff+0x2e>
 800c612:	f240 2137 	movw	r1, #567	@ 0x237
 800c616:	4b3e      	ldr	r3, [pc, #248]	@ (800c710 <__mdiff+0x120>)
 800c618:	483e      	ldr	r0, [pc, #248]	@ (800c714 <__mdiff+0x124>)
 800c61a:	f000 fcd1 	bl	800cfc0 <__assert_func>
 800c61e:	2301      	movs	r3, #1
 800c620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c624:	4610      	mov	r0, r2
 800c626:	b003      	add	sp, #12
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	bfbc      	itt	lt
 800c62e:	464b      	movlt	r3, r9
 800c630:	46a1      	movlt	r9, r4
 800c632:	4630      	mov	r0, r6
 800c634:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c638:	bfba      	itte	lt
 800c63a:	461c      	movlt	r4, r3
 800c63c:	2501      	movlt	r5, #1
 800c63e:	2500      	movge	r5, #0
 800c640:	f7ff fd48 	bl	800c0d4 <_Balloc>
 800c644:	4602      	mov	r2, r0
 800c646:	b918      	cbnz	r0, 800c650 <__mdiff+0x60>
 800c648:	f240 2145 	movw	r1, #581	@ 0x245
 800c64c:	4b30      	ldr	r3, [pc, #192]	@ (800c710 <__mdiff+0x120>)
 800c64e:	e7e3      	b.n	800c618 <__mdiff+0x28>
 800c650:	f100 0b14 	add.w	fp, r0, #20
 800c654:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c658:	f109 0310 	add.w	r3, r9, #16
 800c65c:	60c5      	str	r5, [r0, #12]
 800c65e:	f04f 0c00 	mov.w	ip, #0
 800c662:	f109 0514 	add.w	r5, r9, #20
 800c666:	46d9      	mov	r9, fp
 800c668:	6926      	ldr	r6, [r4, #16]
 800c66a:	f104 0e14 	add.w	lr, r4, #20
 800c66e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c672:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	9b01      	ldr	r3, [sp, #4]
 800c67a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c67e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c682:	b281      	uxth	r1, r0
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	fa1f f38a 	uxth.w	r3, sl
 800c68a:	1a5b      	subs	r3, r3, r1
 800c68c:	0c00      	lsrs	r0, r0, #16
 800c68e:	4463      	add	r3, ip
 800c690:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c694:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c698:	b29b      	uxth	r3, r3
 800c69a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c69e:	4576      	cmp	r6, lr
 800c6a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6a4:	f849 3b04 	str.w	r3, [r9], #4
 800c6a8:	d8e6      	bhi.n	800c678 <__mdiff+0x88>
 800c6aa:	1b33      	subs	r3, r6, r4
 800c6ac:	3b15      	subs	r3, #21
 800c6ae:	f023 0303 	bic.w	r3, r3, #3
 800c6b2:	3415      	adds	r4, #21
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	42a6      	cmp	r6, r4
 800c6b8:	bf38      	it	cc
 800c6ba:	2304      	movcc	r3, #4
 800c6bc:	441d      	add	r5, r3
 800c6be:	445b      	add	r3, fp
 800c6c0:	461e      	mov	r6, r3
 800c6c2:	462c      	mov	r4, r5
 800c6c4:	4544      	cmp	r4, r8
 800c6c6:	d30e      	bcc.n	800c6e6 <__mdiff+0xf6>
 800c6c8:	f108 0103 	add.w	r1, r8, #3
 800c6cc:	1b49      	subs	r1, r1, r5
 800c6ce:	f021 0103 	bic.w	r1, r1, #3
 800c6d2:	3d03      	subs	r5, #3
 800c6d4:	45a8      	cmp	r8, r5
 800c6d6:	bf38      	it	cc
 800c6d8:	2100      	movcc	r1, #0
 800c6da:	440b      	add	r3, r1
 800c6dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6e0:	b199      	cbz	r1, 800c70a <__mdiff+0x11a>
 800c6e2:	6117      	str	r7, [r2, #16]
 800c6e4:	e79e      	b.n	800c624 <__mdiff+0x34>
 800c6e6:	46e6      	mov	lr, ip
 800c6e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6ec:	fa1f fc81 	uxth.w	ip, r1
 800c6f0:	44f4      	add	ip, lr
 800c6f2:	0c08      	lsrs	r0, r1, #16
 800c6f4:	4471      	add	r1, lr
 800c6f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6fa:	b289      	uxth	r1, r1
 800c6fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c704:	f846 1b04 	str.w	r1, [r6], #4
 800c708:	e7dc      	b.n	800c6c4 <__mdiff+0xd4>
 800c70a:	3f01      	subs	r7, #1
 800c70c:	e7e6      	b.n	800c6dc <__mdiff+0xec>
 800c70e:	bf00      	nop
 800c710:	0800d786 	.word	0x0800d786
 800c714:	0800d797 	.word	0x0800d797

0800c718 <__d2b>:
 800c718:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c71c:	2101      	movs	r1, #1
 800c71e:	4690      	mov	r8, r2
 800c720:	4699      	mov	r9, r3
 800c722:	9e08      	ldr	r6, [sp, #32]
 800c724:	f7ff fcd6 	bl	800c0d4 <_Balloc>
 800c728:	4604      	mov	r4, r0
 800c72a:	b930      	cbnz	r0, 800c73a <__d2b+0x22>
 800c72c:	4602      	mov	r2, r0
 800c72e:	f240 310f 	movw	r1, #783	@ 0x30f
 800c732:	4b23      	ldr	r3, [pc, #140]	@ (800c7c0 <__d2b+0xa8>)
 800c734:	4823      	ldr	r0, [pc, #140]	@ (800c7c4 <__d2b+0xac>)
 800c736:	f000 fc43 	bl	800cfc0 <__assert_func>
 800c73a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c73e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c742:	b10d      	cbz	r5, 800c748 <__d2b+0x30>
 800c744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c748:	9301      	str	r3, [sp, #4]
 800c74a:	f1b8 0300 	subs.w	r3, r8, #0
 800c74e:	d024      	beq.n	800c79a <__d2b+0x82>
 800c750:	4668      	mov	r0, sp
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	f7ff fd85 	bl	800c262 <__lo0bits>
 800c758:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c75c:	b1d8      	cbz	r0, 800c796 <__d2b+0x7e>
 800c75e:	f1c0 0320 	rsb	r3, r0, #32
 800c762:	fa02 f303 	lsl.w	r3, r2, r3
 800c766:	430b      	orrs	r3, r1
 800c768:	40c2      	lsrs	r2, r0
 800c76a:	6163      	str	r3, [r4, #20]
 800c76c:	9201      	str	r2, [sp, #4]
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	bf0c      	ite	eq
 800c774:	2201      	moveq	r2, #1
 800c776:	2202      	movne	r2, #2
 800c778:	61a3      	str	r3, [r4, #24]
 800c77a:	6122      	str	r2, [r4, #16]
 800c77c:	b1ad      	cbz	r5, 800c7aa <__d2b+0x92>
 800c77e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c782:	4405      	add	r5, r0
 800c784:	6035      	str	r5, [r6, #0]
 800c786:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c78c:	6018      	str	r0, [r3, #0]
 800c78e:	4620      	mov	r0, r4
 800c790:	b002      	add	sp, #8
 800c792:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c796:	6161      	str	r1, [r4, #20]
 800c798:	e7e9      	b.n	800c76e <__d2b+0x56>
 800c79a:	a801      	add	r0, sp, #4
 800c79c:	f7ff fd61 	bl	800c262 <__lo0bits>
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	6163      	str	r3, [r4, #20]
 800c7a6:	3020      	adds	r0, #32
 800c7a8:	e7e7      	b.n	800c77a <__d2b+0x62>
 800c7aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c7ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7b2:	6030      	str	r0, [r6, #0]
 800c7b4:	6918      	ldr	r0, [r3, #16]
 800c7b6:	f7ff fd35 	bl	800c224 <__hi0bits>
 800c7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7be:	e7e4      	b.n	800c78a <__d2b+0x72>
 800c7c0:	0800d786 	.word	0x0800d786
 800c7c4:	0800d797 	.word	0x0800d797

0800c7c8 <__ssputs_r>:
 800c7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7cc:	461f      	mov	r7, r3
 800c7ce:	688e      	ldr	r6, [r1, #8]
 800c7d0:	4682      	mov	sl, r0
 800c7d2:	42be      	cmp	r6, r7
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	4690      	mov	r8, r2
 800c7d8:	680b      	ldr	r3, [r1, #0]
 800c7da:	d82d      	bhi.n	800c838 <__ssputs_r+0x70>
 800c7dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7e4:	d026      	beq.n	800c834 <__ssputs_r+0x6c>
 800c7e6:	6965      	ldr	r5, [r4, #20]
 800c7e8:	6909      	ldr	r1, [r1, #16]
 800c7ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7ee:	eba3 0901 	sub.w	r9, r3, r1
 800c7f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7f6:	1c7b      	adds	r3, r7, #1
 800c7f8:	444b      	add	r3, r9
 800c7fa:	106d      	asrs	r5, r5, #1
 800c7fc:	429d      	cmp	r5, r3
 800c7fe:	bf38      	it	cc
 800c800:	461d      	movcc	r5, r3
 800c802:	0553      	lsls	r3, r2, #21
 800c804:	d527      	bpl.n	800c856 <__ssputs_r+0x8e>
 800c806:	4629      	mov	r1, r5
 800c808:	f7ff fbd8 	bl	800bfbc <_malloc_r>
 800c80c:	4606      	mov	r6, r0
 800c80e:	b360      	cbz	r0, 800c86a <__ssputs_r+0xa2>
 800c810:	464a      	mov	r2, r9
 800c812:	6921      	ldr	r1, [r4, #16]
 800c814:	f000 fbc6 	bl	800cfa4 <memcpy>
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c822:	81a3      	strh	r3, [r4, #12]
 800c824:	6126      	str	r6, [r4, #16]
 800c826:	444e      	add	r6, r9
 800c828:	6026      	str	r6, [r4, #0]
 800c82a:	463e      	mov	r6, r7
 800c82c:	6165      	str	r5, [r4, #20]
 800c82e:	eba5 0509 	sub.w	r5, r5, r9
 800c832:	60a5      	str	r5, [r4, #8]
 800c834:	42be      	cmp	r6, r7
 800c836:	d900      	bls.n	800c83a <__ssputs_r+0x72>
 800c838:	463e      	mov	r6, r7
 800c83a:	4632      	mov	r2, r6
 800c83c:	4641      	mov	r1, r8
 800c83e:	6820      	ldr	r0, [r4, #0]
 800c840:	f000 fb63 	bl	800cf0a <memmove>
 800c844:	2000      	movs	r0, #0
 800c846:	68a3      	ldr	r3, [r4, #8]
 800c848:	1b9b      	subs	r3, r3, r6
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	4433      	add	r3, r6
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c856:	462a      	mov	r2, r5
 800c858:	f000 fbf6 	bl	800d048 <_realloc_r>
 800c85c:	4606      	mov	r6, r0
 800c85e:	2800      	cmp	r0, #0
 800c860:	d1e0      	bne.n	800c824 <__ssputs_r+0x5c>
 800c862:	4650      	mov	r0, sl
 800c864:	6921      	ldr	r1, [r4, #16]
 800c866:	f7ff fb37 	bl	800bed8 <_free_r>
 800c86a:	230c      	movs	r3, #12
 800c86c:	f8ca 3000 	str.w	r3, [sl]
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f04f 30ff 	mov.w	r0, #4294967295
 800c876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	e7e9      	b.n	800c852 <__ssputs_r+0x8a>
	...

0800c880 <_svfiprintf_r>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	4698      	mov	r8, r3
 800c886:	898b      	ldrh	r3, [r1, #12]
 800c888:	4607      	mov	r7, r0
 800c88a:	061b      	lsls	r3, r3, #24
 800c88c:	460d      	mov	r5, r1
 800c88e:	4614      	mov	r4, r2
 800c890:	b09d      	sub	sp, #116	@ 0x74
 800c892:	d510      	bpl.n	800c8b6 <_svfiprintf_r+0x36>
 800c894:	690b      	ldr	r3, [r1, #16]
 800c896:	b973      	cbnz	r3, 800c8b6 <_svfiprintf_r+0x36>
 800c898:	2140      	movs	r1, #64	@ 0x40
 800c89a:	f7ff fb8f 	bl	800bfbc <_malloc_r>
 800c89e:	6028      	str	r0, [r5, #0]
 800c8a0:	6128      	str	r0, [r5, #16]
 800c8a2:	b930      	cbnz	r0, 800c8b2 <_svfiprintf_r+0x32>
 800c8a4:	230c      	movs	r3, #12
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	b01d      	add	sp, #116	@ 0x74
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	2340      	movs	r3, #64	@ 0x40
 800c8b4:	616b      	str	r3, [r5, #20]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ba:	2320      	movs	r3, #32
 800c8bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8c0:	2330      	movs	r3, #48	@ 0x30
 800c8c2:	f04f 0901 	mov.w	r9, #1
 800c8c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ca64 <_svfiprintf_r+0x1e4>
 800c8ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8da:	b10a      	cbz	r2, 800c8e0 <_svfiprintf_r+0x60>
 800c8dc:	2a25      	cmp	r2, #37	@ 0x25
 800c8de:	d1f9      	bne.n	800c8d4 <_svfiprintf_r+0x54>
 800c8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e4:	d00b      	beq.n	800c8fe <_svfiprintf_r+0x7e>
 800c8e6:	465b      	mov	r3, fp
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff6b 	bl	800c7c8 <__ssputs_r>
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f000 80a7 	beq.w	800ca46 <_svfiprintf_r+0x1c6>
 800c8f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8fa:	445a      	add	r2, fp
 800c8fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 809f 	beq.w	800ca46 <_svfiprintf_r+0x1c6>
 800c908:	2300      	movs	r3, #0
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295
 800c90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c912:	f10a 0a01 	add.w	sl, sl, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c91e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c920:	4654      	mov	r4, sl
 800c922:	2205      	movs	r2, #5
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	484e      	ldr	r0, [pc, #312]	@ (800ca64 <_svfiprintf_r+0x1e4>)
 800c92a:	f7fe fc6a 	bl	800b202 <memchr>
 800c92e:	9a04      	ldr	r2, [sp, #16]
 800c930:	b9d8      	cbnz	r0, 800c96a <_svfiprintf_r+0xea>
 800c932:	06d0      	lsls	r0, r2, #27
 800c934:	bf44      	itt	mi
 800c936:	2320      	movmi	r3, #32
 800c938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c93c:	0711      	lsls	r1, r2, #28
 800c93e:	bf44      	itt	mi
 800c940:	232b      	movmi	r3, #43	@ 0x2b
 800c942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c946:	f89a 3000 	ldrb.w	r3, [sl]
 800c94a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c94c:	d015      	beq.n	800c97a <_svfiprintf_r+0xfa>
 800c94e:	4654      	mov	r4, sl
 800c950:	2000      	movs	r0, #0
 800c952:	f04f 0c0a 	mov.w	ip, #10
 800c956:	9a07      	ldr	r2, [sp, #28]
 800c958:	4621      	mov	r1, r4
 800c95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95e:	3b30      	subs	r3, #48	@ 0x30
 800c960:	2b09      	cmp	r3, #9
 800c962:	d94b      	bls.n	800c9fc <_svfiprintf_r+0x17c>
 800c964:	b1b0      	cbz	r0, 800c994 <_svfiprintf_r+0x114>
 800c966:	9207      	str	r2, [sp, #28]
 800c968:	e014      	b.n	800c994 <_svfiprintf_r+0x114>
 800c96a:	eba0 0308 	sub.w	r3, r0, r8
 800c96e:	fa09 f303 	lsl.w	r3, r9, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	46a2      	mov	sl, r4
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	e7d2      	b.n	800c920 <_svfiprintf_r+0xa0>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9103      	str	r1, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfbb      	ittet	lt
 800c986:	425b      	neglt	r3, r3
 800c988:	f042 0202 	orrlt.w	r2, r2, #2
 800c98c:	9307      	strge	r3, [sp, #28]
 800c98e:	9307      	strlt	r3, [sp, #28]
 800c990:	bfb8      	it	lt
 800c992:	9204      	strlt	r2, [sp, #16]
 800c994:	7823      	ldrb	r3, [r4, #0]
 800c996:	2b2e      	cmp	r3, #46	@ 0x2e
 800c998:	d10a      	bne.n	800c9b0 <_svfiprintf_r+0x130>
 800c99a:	7863      	ldrb	r3, [r4, #1]
 800c99c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c99e:	d132      	bne.n	800ca06 <_svfiprintf_r+0x186>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	3402      	adds	r4, #2
 800c9a4:	1d1a      	adds	r2, r3, #4
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	9203      	str	r2, [sp, #12]
 800c9aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9ae:	9305      	str	r3, [sp, #20]
 800c9b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ca68 <_svfiprintf_r+0x1e8>
 800c9b4:	2203      	movs	r2, #3
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	7821      	ldrb	r1, [r4, #0]
 800c9ba:	f7fe fc22 	bl	800b202 <memchr>
 800c9be:	b138      	cbz	r0, 800c9d0 <_svfiprintf_r+0x150>
 800c9c0:	2240      	movs	r2, #64	@ 0x40
 800c9c2:	9b04      	ldr	r3, [sp, #16]
 800c9c4:	eba0 000a 	sub.w	r0, r0, sl
 800c9c8:	4082      	lsls	r2, r0
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	3401      	adds	r4, #1
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	2206      	movs	r2, #6
 800c9d6:	4825      	ldr	r0, [pc, #148]	@ (800ca6c <_svfiprintf_r+0x1ec>)
 800c9d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9dc:	f7fe fc11 	bl	800b202 <memchr>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d036      	beq.n	800ca52 <_svfiprintf_r+0x1d2>
 800c9e4:	4b22      	ldr	r3, [pc, #136]	@ (800ca70 <_svfiprintf_r+0x1f0>)
 800c9e6:	bb1b      	cbnz	r3, 800ca30 <_svfiprintf_r+0x1b0>
 800c9e8:	9b03      	ldr	r3, [sp, #12]
 800c9ea:	3307      	adds	r3, #7
 800c9ec:	f023 0307 	bic.w	r3, r3, #7
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f6:	4433      	add	r3, r6
 800c9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9fa:	e76a      	b.n	800c8d2 <_svfiprintf_r+0x52>
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	2001      	movs	r0, #1
 800ca00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca04:	e7a8      	b.n	800c958 <_svfiprintf_r+0xd8>
 800ca06:	2300      	movs	r3, #0
 800ca08:	f04f 0c0a 	mov.w	ip, #10
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	3401      	adds	r4, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	4620      	mov	r0, r4
 800ca14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca18:	3a30      	subs	r2, #48	@ 0x30
 800ca1a:	2a09      	cmp	r2, #9
 800ca1c:	d903      	bls.n	800ca26 <_svfiprintf_r+0x1a6>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0c6      	beq.n	800c9b0 <_svfiprintf_r+0x130>
 800ca22:	9105      	str	r1, [sp, #20]
 800ca24:	e7c4      	b.n	800c9b0 <_svfiprintf_r+0x130>
 800ca26:	4604      	mov	r4, r0
 800ca28:	2301      	movs	r3, #1
 800ca2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca2e:	e7f0      	b.n	800ca12 <_svfiprintf_r+0x192>
 800ca30:	ab03      	add	r3, sp, #12
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	462a      	mov	r2, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	4b0e      	ldr	r3, [pc, #56]	@ (800ca74 <_svfiprintf_r+0x1f4>)
 800ca3a:	a904      	add	r1, sp, #16
 800ca3c:	f7fd fd52 	bl	800a4e4 <_printf_float>
 800ca40:	1c42      	adds	r2, r0, #1
 800ca42:	4606      	mov	r6, r0
 800ca44:	d1d6      	bne.n	800c9f4 <_svfiprintf_r+0x174>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	065b      	lsls	r3, r3, #25
 800ca4a:	f53f af2d 	bmi.w	800c8a8 <_svfiprintf_r+0x28>
 800ca4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca50:	e72c      	b.n	800c8ac <_svfiprintf_r+0x2c>
 800ca52:	ab03      	add	r3, sp, #12
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	462a      	mov	r2, r5
 800ca58:	4638      	mov	r0, r7
 800ca5a:	4b06      	ldr	r3, [pc, #24]	@ (800ca74 <_svfiprintf_r+0x1f4>)
 800ca5c:	a904      	add	r1, sp, #16
 800ca5e:	f7fd ffdf 	bl	800aa20 <_printf_i>
 800ca62:	e7ed      	b.n	800ca40 <_svfiprintf_r+0x1c0>
 800ca64:	0800d7f0 	.word	0x0800d7f0
 800ca68:	0800d7f6 	.word	0x0800d7f6
 800ca6c:	0800d7fa 	.word	0x0800d7fa
 800ca70:	0800a4e5 	.word	0x0800a4e5
 800ca74:	0800c7c9 	.word	0x0800c7c9

0800ca78 <__sfputc_r>:
 800ca78:	6893      	ldr	r3, [r2, #8]
 800ca7a:	b410      	push	{r4}
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	6093      	str	r3, [r2, #8]
 800ca82:	da07      	bge.n	800ca94 <__sfputc_r+0x1c>
 800ca84:	6994      	ldr	r4, [r2, #24]
 800ca86:	42a3      	cmp	r3, r4
 800ca88:	db01      	blt.n	800ca8e <__sfputc_r+0x16>
 800ca8a:	290a      	cmp	r1, #10
 800ca8c:	d102      	bne.n	800ca94 <__sfputc_r+0x1c>
 800ca8e:	bc10      	pop	{r4}
 800ca90:	f7fe ba7d 	b.w	800af8e <__swbuf_r>
 800ca94:	6813      	ldr	r3, [r2, #0]
 800ca96:	1c58      	adds	r0, r3, #1
 800ca98:	6010      	str	r0, [r2, #0]
 800ca9a:	7019      	strb	r1, [r3, #0]
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	bc10      	pop	{r4}
 800caa0:	4770      	bx	lr

0800caa2 <__sfputs_r>:
 800caa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa4:	4606      	mov	r6, r0
 800caa6:	460f      	mov	r7, r1
 800caa8:	4614      	mov	r4, r2
 800caaa:	18d5      	adds	r5, r2, r3
 800caac:	42ac      	cmp	r4, r5
 800caae:	d101      	bne.n	800cab4 <__sfputs_r+0x12>
 800cab0:	2000      	movs	r0, #0
 800cab2:	e007      	b.n	800cac4 <__sfputs_r+0x22>
 800cab4:	463a      	mov	r2, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabc:	f7ff ffdc 	bl	800ca78 <__sfputc_r>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d1f3      	bne.n	800caac <__sfputs_r+0xa>
 800cac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cac8 <_vfiprintf_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	460d      	mov	r5, r1
 800cace:	4614      	mov	r4, r2
 800cad0:	4698      	mov	r8, r3
 800cad2:	4606      	mov	r6, r0
 800cad4:	b09d      	sub	sp, #116	@ 0x74
 800cad6:	b118      	cbz	r0, 800cae0 <_vfiprintf_r+0x18>
 800cad8:	6a03      	ldr	r3, [r0, #32]
 800cada:	b90b      	cbnz	r3, 800cae0 <_vfiprintf_r+0x18>
 800cadc:	f7fe f94a 	bl	800ad74 <__sinit>
 800cae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cae2:	07d9      	lsls	r1, r3, #31
 800cae4:	d405      	bmi.n	800caf2 <_vfiprintf_r+0x2a>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	059a      	lsls	r2, r3, #22
 800caea:	d402      	bmi.n	800caf2 <_vfiprintf_r+0x2a>
 800caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caee:	f7fe fb86 	bl	800b1fe <__retarget_lock_acquire_recursive>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	071b      	lsls	r3, r3, #28
 800caf6:	d501      	bpl.n	800cafc <_vfiprintf_r+0x34>
 800caf8:	692b      	ldr	r3, [r5, #16]
 800cafa:	b99b      	cbnz	r3, 800cb24 <_vfiprintf_r+0x5c>
 800cafc:	4629      	mov	r1, r5
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7fe fa84 	bl	800b00c <__swsetup_r>
 800cb04:	b170      	cbz	r0, 800cb24 <_vfiprintf_r+0x5c>
 800cb06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb08:	07dc      	lsls	r4, r3, #31
 800cb0a:	d504      	bpl.n	800cb16 <_vfiprintf_r+0x4e>
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	b01d      	add	sp, #116	@ 0x74
 800cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	0598      	lsls	r0, r3, #22
 800cb1a:	d4f7      	bmi.n	800cb0c <_vfiprintf_r+0x44>
 800cb1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb1e:	f7fe fb6f 	bl	800b200 <__retarget_lock_release_recursive>
 800cb22:	e7f3      	b.n	800cb0c <_vfiprintf_r+0x44>
 800cb24:	2300      	movs	r3, #0
 800cb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb28:	2320      	movs	r3, #32
 800cb2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb2e:	2330      	movs	r3, #48	@ 0x30
 800cb30:	f04f 0901 	mov.w	r9, #1
 800cb34:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb38:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cce4 <_vfiprintf_r+0x21c>
 800cb3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb40:	4623      	mov	r3, r4
 800cb42:	469a      	mov	sl, r3
 800cb44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb48:	b10a      	cbz	r2, 800cb4e <_vfiprintf_r+0x86>
 800cb4a:	2a25      	cmp	r2, #37	@ 0x25
 800cb4c:	d1f9      	bne.n	800cb42 <_vfiprintf_r+0x7a>
 800cb4e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb52:	d00b      	beq.n	800cb6c <_vfiprintf_r+0xa4>
 800cb54:	465b      	mov	r3, fp
 800cb56:	4622      	mov	r2, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7ff ffa1 	bl	800caa2 <__sfputs_r>
 800cb60:	3001      	adds	r0, #1
 800cb62:	f000 80a7 	beq.w	800ccb4 <_vfiprintf_r+0x1ec>
 800cb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb68:	445a      	add	r2, fp
 800cb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 809f 	beq.w	800ccb4 <_vfiprintf_r+0x1ec>
 800cb76:	2300      	movs	r3, #0
 800cb78:	f04f 32ff 	mov.w	r2, #4294967295
 800cb7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb80:	f10a 0a01 	add.w	sl, sl, #1
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	9307      	str	r3, [sp, #28]
 800cb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb8e:	4654      	mov	r4, sl
 800cb90:	2205      	movs	r2, #5
 800cb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb96:	4853      	ldr	r0, [pc, #332]	@ (800cce4 <_vfiprintf_r+0x21c>)
 800cb98:	f7fe fb33 	bl	800b202 <memchr>
 800cb9c:	9a04      	ldr	r2, [sp, #16]
 800cb9e:	b9d8      	cbnz	r0, 800cbd8 <_vfiprintf_r+0x110>
 800cba0:	06d1      	lsls	r1, r2, #27
 800cba2:	bf44      	itt	mi
 800cba4:	2320      	movmi	r3, #32
 800cba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbaa:	0713      	lsls	r3, r2, #28
 800cbac:	bf44      	itt	mi
 800cbae:	232b      	movmi	r3, #43	@ 0x2b
 800cbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbba:	d015      	beq.n	800cbe8 <_vfiprintf_r+0x120>
 800cbbc:	4654      	mov	r4, sl
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f04f 0c0a 	mov.w	ip, #10
 800cbc4:	9a07      	ldr	r2, [sp, #28]
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbcc:	3b30      	subs	r3, #48	@ 0x30
 800cbce:	2b09      	cmp	r3, #9
 800cbd0:	d94b      	bls.n	800cc6a <_vfiprintf_r+0x1a2>
 800cbd2:	b1b0      	cbz	r0, 800cc02 <_vfiprintf_r+0x13a>
 800cbd4:	9207      	str	r2, [sp, #28]
 800cbd6:	e014      	b.n	800cc02 <_vfiprintf_r+0x13a>
 800cbd8:	eba0 0308 	sub.w	r3, r0, r8
 800cbdc:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	46a2      	mov	sl, r4
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	e7d2      	b.n	800cb8e <_vfiprintf_r+0xc6>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	1d19      	adds	r1, r3, #4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	9103      	str	r1, [sp, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bfbb      	ittet	lt
 800cbf4:	425b      	neglt	r3, r3
 800cbf6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbfa:	9307      	strge	r3, [sp, #28]
 800cbfc:	9307      	strlt	r3, [sp, #28]
 800cbfe:	bfb8      	it	lt
 800cc00:	9204      	strlt	r2, [sp, #16]
 800cc02:	7823      	ldrb	r3, [r4, #0]
 800cc04:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc06:	d10a      	bne.n	800cc1e <_vfiprintf_r+0x156>
 800cc08:	7863      	ldrb	r3, [r4, #1]
 800cc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc0c:	d132      	bne.n	800cc74 <_vfiprintf_r+0x1ac>
 800cc0e:	9b03      	ldr	r3, [sp, #12]
 800cc10:	3402      	adds	r4, #2
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	9203      	str	r2, [sp, #12]
 800cc18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc1c:	9305      	str	r3, [sp, #20]
 800cc1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cce8 <_vfiprintf_r+0x220>
 800cc22:	2203      	movs	r2, #3
 800cc24:	4650      	mov	r0, sl
 800cc26:	7821      	ldrb	r1, [r4, #0]
 800cc28:	f7fe faeb 	bl	800b202 <memchr>
 800cc2c:	b138      	cbz	r0, 800cc3e <_vfiprintf_r+0x176>
 800cc2e:	2240      	movs	r2, #64	@ 0x40
 800cc30:	9b04      	ldr	r3, [sp, #16]
 800cc32:	eba0 000a 	sub.w	r0, r0, sl
 800cc36:	4082      	lsls	r2, r0
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	3401      	adds	r4, #1
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc42:	2206      	movs	r2, #6
 800cc44:	4829      	ldr	r0, [pc, #164]	@ (800ccec <_vfiprintf_r+0x224>)
 800cc46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc4a:	f7fe fada 	bl	800b202 <memchr>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d03f      	beq.n	800ccd2 <_vfiprintf_r+0x20a>
 800cc52:	4b27      	ldr	r3, [pc, #156]	@ (800ccf0 <_vfiprintf_r+0x228>)
 800cc54:	bb1b      	cbnz	r3, 800cc9e <_vfiprintf_r+0x1d6>
 800cc56:	9b03      	ldr	r3, [sp, #12]
 800cc58:	3307      	adds	r3, #7
 800cc5a:	f023 0307 	bic.w	r3, r3, #7
 800cc5e:	3308      	adds	r3, #8
 800cc60:	9303      	str	r3, [sp, #12]
 800cc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc64:	443b      	add	r3, r7
 800cc66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc68:	e76a      	b.n	800cb40 <_vfiprintf_r+0x78>
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc72:	e7a8      	b.n	800cbc6 <_vfiprintf_r+0xfe>
 800cc74:	2300      	movs	r3, #0
 800cc76:	f04f 0c0a 	mov.w	ip, #10
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	3401      	adds	r4, #1
 800cc7e:	9305      	str	r3, [sp, #20]
 800cc80:	4620      	mov	r0, r4
 800cc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc86:	3a30      	subs	r2, #48	@ 0x30
 800cc88:	2a09      	cmp	r2, #9
 800cc8a:	d903      	bls.n	800cc94 <_vfiprintf_r+0x1cc>
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0c6      	beq.n	800cc1e <_vfiprintf_r+0x156>
 800cc90:	9105      	str	r1, [sp, #20]
 800cc92:	e7c4      	b.n	800cc1e <_vfiprintf_r+0x156>
 800cc94:	4604      	mov	r4, r0
 800cc96:	2301      	movs	r3, #1
 800cc98:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc9c:	e7f0      	b.n	800cc80 <_vfiprintf_r+0x1b8>
 800cc9e:	ab03      	add	r3, sp, #12
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	462a      	mov	r2, r5
 800cca4:	4630      	mov	r0, r6
 800cca6:	4b13      	ldr	r3, [pc, #76]	@ (800ccf4 <_vfiprintf_r+0x22c>)
 800cca8:	a904      	add	r1, sp, #16
 800ccaa:	f7fd fc1b 	bl	800a4e4 <_printf_float>
 800ccae:	4607      	mov	r7, r0
 800ccb0:	1c78      	adds	r0, r7, #1
 800ccb2:	d1d6      	bne.n	800cc62 <_vfiprintf_r+0x19a>
 800ccb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccb6:	07d9      	lsls	r1, r3, #31
 800ccb8:	d405      	bmi.n	800ccc6 <_vfiprintf_r+0x1fe>
 800ccba:	89ab      	ldrh	r3, [r5, #12]
 800ccbc:	059a      	lsls	r2, r3, #22
 800ccbe:	d402      	bmi.n	800ccc6 <_vfiprintf_r+0x1fe>
 800ccc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccc2:	f7fe fa9d 	bl	800b200 <__retarget_lock_release_recursive>
 800ccc6:	89ab      	ldrh	r3, [r5, #12]
 800ccc8:	065b      	lsls	r3, r3, #25
 800ccca:	f53f af1f 	bmi.w	800cb0c <_vfiprintf_r+0x44>
 800ccce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccd0:	e71e      	b.n	800cb10 <_vfiprintf_r+0x48>
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4630      	mov	r0, r6
 800ccda:	4b06      	ldr	r3, [pc, #24]	@ (800ccf4 <_vfiprintf_r+0x22c>)
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	f7fd fe9f 	bl	800aa20 <_printf_i>
 800cce2:	e7e4      	b.n	800ccae <_vfiprintf_r+0x1e6>
 800cce4:	0800d7f0 	.word	0x0800d7f0
 800cce8:	0800d7f6 	.word	0x0800d7f6
 800ccec:	0800d7fa 	.word	0x0800d7fa
 800ccf0:	0800a4e5 	.word	0x0800a4e5
 800ccf4:	0800caa3 	.word	0x0800caa3

0800ccf8 <__sflush_r>:
 800ccf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	0716      	lsls	r6, r2, #28
 800cd00:	4605      	mov	r5, r0
 800cd02:	460c      	mov	r4, r1
 800cd04:	d454      	bmi.n	800cdb0 <__sflush_r+0xb8>
 800cd06:	684b      	ldr	r3, [r1, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc02      	bgt.n	800cd12 <__sflush_r+0x1a>
 800cd0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dd48      	ble.n	800cda4 <__sflush_r+0xac>
 800cd12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd14:	2e00      	cmp	r6, #0
 800cd16:	d045      	beq.n	800cda4 <__sflush_r+0xac>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd1e:	682f      	ldr	r7, [r5, #0]
 800cd20:	6a21      	ldr	r1, [r4, #32]
 800cd22:	602b      	str	r3, [r5, #0]
 800cd24:	d030      	beq.n	800cd88 <__sflush_r+0x90>
 800cd26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	0759      	lsls	r1, r3, #29
 800cd2c:	d505      	bpl.n	800cd3a <__sflush_r+0x42>
 800cd2e:	6863      	ldr	r3, [r4, #4]
 800cd30:	1ad2      	subs	r2, r2, r3
 800cd32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd34:	b10b      	cbz	r3, 800cd3a <__sflush_r+0x42>
 800cd36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd38:	1ad2      	subs	r2, r2, r3
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd40:	6a21      	ldr	r1, [r4, #32]
 800cd42:	47b0      	blx	r6
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	d106      	bne.n	800cd58 <__sflush_r+0x60>
 800cd4a:	6829      	ldr	r1, [r5, #0]
 800cd4c:	291d      	cmp	r1, #29
 800cd4e:	d82b      	bhi.n	800cda8 <__sflush_r+0xb0>
 800cd50:	4a28      	ldr	r2, [pc, #160]	@ (800cdf4 <__sflush_r+0xfc>)
 800cd52:	40ca      	lsrs	r2, r1
 800cd54:	07d6      	lsls	r6, r2, #31
 800cd56:	d527      	bpl.n	800cda8 <__sflush_r+0xb0>
 800cd58:	2200      	movs	r2, #0
 800cd5a:	6062      	str	r2, [r4, #4]
 800cd5c:	6922      	ldr	r2, [r4, #16]
 800cd5e:	04d9      	lsls	r1, r3, #19
 800cd60:	6022      	str	r2, [r4, #0]
 800cd62:	d504      	bpl.n	800cd6e <__sflush_r+0x76>
 800cd64:	1c42      	adds	r2, r0, #1
 800cd66:	d101      	bne.n	800cd6c <__sflush_r+0x74>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b903      	cbnz	r3, 800cd6e <__sflush_r+0x76>
 800cd6c:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd70:	602f      	str	r7, [r5, #0]
 800cd72:	b1b9      	cbz	r1, 800cda4 <__sflush_r+0xac>
 800cd74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	d002      	beq.n	800cd82 <__sflush_r+0x8a>
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	f7ff f8ab 	bl	800bed8 <_free_r>
 800cd82:	2300      	movs	r3, #0
 800cd84:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd86:	e00d      	b.n	800cda4 <__sflush_r+0xac>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b0      	blx	r6
 800cd8e:	4602      	mov	r2, r0
 800cd90:	1c50      	adds	r0, r2, #1
 800cd92:	d1c9      	bne.n	800cd28 <__sflush_r+0x30>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0c6      	beq.n	800cd28 <__sflush_r+0x30>
 800cd9a:	2b1d      	cmp	r3, #29
 800cd9c:	d001      	beq.n	800cda2 <__sflush_r+0xaa>
 800cd9e:	2b16      	cmp	r3, #22
 800cda0:	d11d      	bne.n	800cdde <__sflush_r+0xe6>
 800cda2:	602f      	str	r7, [r5, #0]
 800cda4:	2000      	movs	r0, #0
 800cda6:	e021      	b.n	800cdec <__sflush_r+0xf4>
 800cda8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdac:	b21b      	sxth	r3, r3
 800cdae:	e01a      	b.n	800cde6 <__sflush_r+0xee>
 800cdb0:	690f      	ldr	r7, [r1, #16]
 800cdb2:	2f00      	cmp	r7, #0
 800cdb4:	d0f6      	beq.n	800cda4 <__sflush_r+0xac>
 800cdb6:	0793      	lsls	r3, r2, #30
 800cdb8:	bf18      	it	ne
 800cdba:	2300      	movne	r3, #0
 800cdbc:	680e      	ldr	r6, [r1, #0]
 800cdbe:	bf08      	it	eq
 800cdc0:	694b      	ldreq	r3, [r1, #20]
 800cdc2:	1bf6      	subs	r6, r6, r7
 800cdc4:	600f      	str	r7, [r1, #0]
 800cdc6:	608b      	str	r3, [r1, #8]
 800cdc8:	2e00      	cmp	r6, #0
 800cdca:	ddeb      	ble.n	800cda4 <__sflush_r+0xac>
 800cdcc:	4633      	mov	r3, r6
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	6a21      	ldr	r1, [r4, #32]
 800cdd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cdd8:	47e0      	blx	ip
 800cdda:	2800      	cmp	r0, #0
 800cddc:	dc07      	bgt.n	800cdee <__sflush_r+0xf6>
 800cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	81a3      	strh	r3, [r4, #12]
 800cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdee:	4407      	add	r7, r0
 800cdf0:	1a36      	subs	r6, r6, r0
 800cdf2:	e7e9      	b.n	800cdc8 <__sflush_r+0xd0>
 800cdf4:	20400001 	.word	0x20400001

0800cdf8 <_fflush_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	690b      	ldr	r3, [r1, #16]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	b913      	cbnz	r3, 800ce08 <_fflush_r+0x10>
 800ce02:	2500      	movs	r5, #0
 800ce04:	4628      	mov	r0, r5
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	b118      	cbz	r0, 800ce12 <_fflush_r+0x1a>
 800ce0a:	6a03      	ldr	r3, [r0, #32]
 800ce0c:	b90b      	cbnz	r3, 800ce12 <_fflush_r+0x1a>
 800ce0e:	f7fd ffb1 	bl	800ad74 <__sinit>
 800ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0f3      	beq.n	800ce02 <_fflush_r+0xa>
 800ce1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce1c:	07d0      	lsls	r0, r2, #31
 800ce1e:	d404      	bmi.n	800ce2a <_fflush_r+0x32>
 800ce20:	0599      	lsls	r1, r3, #22
 800ce22:	d402      	bmi.n	800ce2a <_fflush_r+0x32>
 800ce24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce26:	f7fe f9ea 	bl	800b1fe <__retarget_lock_acquire_recursive>
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	f7ff ff63 	bl	800ccf8 <__sflush_r>
 800ce32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce34:	4605      	mov	r5, r0
 800ce36:	07da      	lsls	r2, r3, #31
 800ce38:	d4e4      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	059b      	lsls	r3, r3, #22
 800ce3e:	d4e1      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce42:	f7fe f9dd 	bl	800b200 <__retarget_lock_release_recursive>
 800ce46:	e7dd      	b.n	800ce04 <_fflush_r+0xc>

0800ce48 <__swhatbuf_r>:
 800ce48:	b570      	push	{r4, r5, r6, lr}
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce50:	4615      	mov	r5, r2
 800ce52:	2900      	cmp	r1, #0
 800ce54:	461e      	mov	r6, r3
 800ce56:	b096      	sub	sp, #88	@ 0x58
 800ce58:	da0c      	bge.n	800ce74 <__swhatbuf_r+0x2c>
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce62:	bf14      	ite	ne
 800ce64:	2340      	movne	r3, #64	@ 0x40
 800ce66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	6031      	str	r1, [r6, #0]
 800ce6e:	602b      	str	r3, [r5, #0]
 800ce70:	b016      	add	sp, #88	@ 0x58
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	466a      	mov	r2, sp
 800ce76:	f000 f863 	bl	800cf40 <_fstat_r>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	dbed      	blt.n	800ce5a <__swhatbuf_r+0x12>
 800ce7e:	9901      	ldr	r1, [sp, #4]
 800ce80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce88:	4259      	negs	r1, r3
 800ce8a:	4159      	adcs	r1, r3
 800ce8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce90:	e7eb      	b.n	800ce6a <__swhatbuf_r+0x22>

0800ce92 <__smakebuf_r>:
 800ce92:	898b      	ldrh	r3, [r1, #12]
 800ce94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce96:	079d      	lsls	r5, r3, #30
 800ce98:	4606      	mov	r6, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	d507      	bpl.n	800ceae <__smakebuf_r+0x1c>
 800ce9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	6123      	str	r3, [r4, #16]
 800cea6:	2301      	movs	r3, #1
 800cea8:	6163      	str	r3, [r4, #20]
 800ceaa:	b003      	add	sp, #12
 800ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceae:	466a      	mov	r2, sp
 800ceb0:	ab01      	add	r3, sp, #4
 800ceb2:	f7ff ffc9 	bl	800ce48 <__swhatbuf_r>
 800ceb6:	9f00      	ldr	r7, [sp, #0]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	4639      	mov	r1, r7
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff f87d 	bl	800bfbc <_malloc_r>
 800cec2:	b948      	cbnz	r0, 800ced8 <__smakebuf_r+0x46>
 800cec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec8:	059a      	lsls	r2, r3, #22
 800ceca:	d4ee      	bmi.n	800ceaa <__smakebuf_r+0x18>
 800cecc:	f023 0303 	bic.w	r3, r3, #3
 800ced0:	f043 0302 	orr.w	r3, r3, #2
 800ced4:	81a3      	strh	r3, [r4, #12]
 800ced6:	e7e2      	b.n	800ce9e <__smakebuf_r+0xc>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	6020      	str	r0, [r4, #0]
 800cee8:	b15b      	cbz	r3, 800cf02 <__smakebuf_r+0x70>
 800ceea:	4630      	mov	r0, r6
 800ceec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cef0:	f000 f838 	bl	800cf64 <_isatty_r>
 800cef4:	b128      	cbz	r0, 800cf02 <__smakebuf_r+0x70>
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	f043 0301 	orr.w	r3, r3, #1
 800cf00:	81a3      	strh	r3, [r4, #12]
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	431d      	orrs	r5, r3
 800cf06:	81a5      	strh	r5, [r4, #12]
 800cf08:	e7cf      	b.n	800ceaa <__smakebuf_r+0x18>

0800cf0a <memmove>:
 800cf0a:	4288      	cmp	r0, r1
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	eb01 0402 	add.w	r4, r1, r2
 800cf12:	d902      	bls.n	800cf1a <memmove+0x10>
 800cf14:	4284      	cmp	r4, r0
 800cf16:	4623      	mov	r3, r4
 800cf18:	d807      	bhi.n	800cf2a <memmove+0x20>
 800cf1a:	1e43      	subs	r3, r0, #1
 800cf1c:	42a1      	cmp	r1, r4
 800cf1e:	d008      	beq.n	800cf32 <memmove+0x28>
 800cf20:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf24:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf28:	e7f8      	b.n	800cf1c <memmove+0x12>
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4402      	add	r2, r0
 800cf2e:	428a      	cmp	r2, r1
 800cf30:	d100      	bne.n	800cf34 <memmove+0x2a>
 800cf32:	bd10      	pop	{r4, pc}
 800cf34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf3c:	e7f7      	b.n	800cf2e <memmove+0x24>
	...

0800cf40 <_fstat_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	2300      	movs	r3, #0
 800cf44:	4d06      	ldr	r5, [pc, #24]	@ (800cf60 <_fstat_r+0x20>)
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	4611      	mov	r1, r2
 800cf4c:	602b      	str	r3, [r5, #0]
 800cf4e:	f7f8 fc59 	bl	8005804 <_fstat>
 800cf52:	1c43      	adds	r3, r0, #1
 800cf54:	d102      	bne.n	800cf5c <_fstat_r+0x1c>
 800cf56:	682b      	ldr	r3, [r5, #0]
 800cf58:	b103      	cbz	r3, 800cf5c <_fstat_r+0x1c>
 800cf5a:	6023      	str	r3, [r4, #0]
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	200007e4 	.word	0x200007e4

0800cf64 <_isatty_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	2300      	movs	r3, #0
 800cf68:	4d05      	ldr	r5, [pc, #20]	@ (800cf80 <_isatty_r+0x1c>)
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	f7f8 fc57 	bl	8005822 <_isatty>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_isatty_r+0x1a>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_isatty_r+0x1a>
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	200007e4 	.word	0x200007e4

0800cf84 <_sbrk_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	2300      	movs	r3, #0
 800cf88:	4d05      	ldr	r5, [pc, #20]	@ (800cfa0 <_sbrk_r+0x1c>)
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	602b      	str	r3, [r5, #0]
 800cf90:	f7f8 fc5e 	bl	8005850 <_sbrk>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_sbrk_r+0x1a>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_sbrk_r+0x1a>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	200007e4 	.word	0x200007e4

0800cfa4 <memcpy>:
 800cfa4:	440a      	add	r2, r1
 800cfa6:	4291      	cmp	r1, r2
 800cfa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfac:	d100      	bne.n	800cfb0 <memcpy+0xc>
 800cfae:	4770      	bx	lr
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb6:	4291      	cmp	r1, r2
 800cfb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfbc:	d1f9      	bne.n	800cfb2 <memcpy+0xe>
 800cfbe:	bd10      	pop	{r4, pc}

0800cfc0 <__assert_func>:
 800cfc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfc2:	4614      	mov	r4, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b09      	ldr	r3, [pc, #36]	@ (800cfec <__assert_func+0x2c>)
 800cfc8:	4605      	mov	r5, r0
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68d8      	ldr	r0, [r3, #12]
 800cfce:	b14c      	cbz	r4, 800cfe4 <__assert_func+0x24>
 800cfd0:	4b07      	ldr	r3, [pc, #28]	@ (800cff0 <__assert_func+0x30>)
 800cfd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfd6:	9100      	str	r1, [sp, #0]
 800cfd8:	462b      	mov	r3, r5
 800cfda:	4906      	ldr	r1, [pc, #24]	@ (800cff4 <__assert_func+0x34>)
 800cfdc:	f000 f870 	bl	800d0c0 <fiprintf>
 800cfe0:	f000 f880 	bl	800d0e4 <abort>
 800cfe4:	4b04      	ldr	r3, [pc, #16]	@ (800cff8 <__assert_func+0x38>)
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	e7f3      	b.n	800cfd2 <__assert_func+0x12>
 800cfea:	bf00      	nop
 800cfec:	20000074 	.word	0x20000074
 800cff0:	0800d80b 	.word	0x0800d80b
 800cff4:	0800d818 	.word	0x0800d818
 800cff8:	0800d846 	.word	0x0800d846

0800cffc <_calloc_r>:
 800cffc:	b570      	push	{r4, r5, r6, lr}
 800cffe:	fba1 5402 	umull	r5, r4, r1, r2
 800d002:	b934      	cbnz	r4, 800d012 <_calloc_r+0x16>
 800d004:	4629      	mov	r1, r5
 800d006:	f7fe ffd9 	bl	800bfbc <_malloc_r>
 800d00a:	4606      	mov	r6, r0
 800d00c:	b928      	cbnz	r0, 800d01a <_calloc_r+0x1e>
 800d00e:	4630      	mov	r0, r6
 800d010:	bd70      	pop	{r4, r5, r6, pc}
 800d012:	220c      	movs	r2, #12
 800d014:	2600      	movs	r6, #0
 800d016:	6002      	str	r2, [r0, #0]
 800d018:	e7f9      	b.n	800d00e <_calloc_r+0x12>
 800d01a:	462a      	mov	r2, r5
 800d01c:	4621      	mov	r1, r4
 800d01e:	f7fe f84b 	bl	800b0b8 <memset>
 800d022:	e7f4      	b.n	800d00e <_calloc_r+0x12>

0800d024 <__ascii_mbtowc>:
 800d024:	b082      	sub	sp, #8
 800d026:	b901      	cbnz	r1, 800d02a <__ascii_mbtowc+0x6>
 800d028:	a901      	add	r1, sp, #4
 800d02a:	b142      	cbz	r2, 800d03e <__ascii_mbtowc+0x1a>
 800d02c:	b14b      	cbz	r3, 800d042 <__ascii_mbtowc+0x1e>
 800d02e:	7813      	ldrb	r3, [r2, #0]
 800d030:	600b      	str	r3, [r1, #0]
 800d032:	7812      	ldrb	r2, [r2, #0]
 800d034:	1e10      	subs	r0, r2, #0
 800d036:	bf18      	it	ne
 800d038:	2001      	movne	r0, #1
 800d03a:	b002      	add	sp, #8
 800d03c:	4770      	bx	lr
 800d03e:	4610      	mov	r0, r2
 800d040:	e7fb      	b.n	800d03a <__ascii_mbtowc+0x16>
 800d042:	f06f 0001 	mvn.w	r0, #1
 800d046:	e7f8      	b.n	800d03a <__ascii_mbtowc+0x16>

0800d048 <_realloc_r>:
 800d048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04c:	4607      	mov	r7, r0
 800d04e:	4614      	mov	r4, r2
 800d050:	460d      	mov	r5, r1
 800d052:	b921      	cbnz	r1, 800d05e <_realloc_r+0x16>
 800d054:	4611      	mov	r1, r2
 800d056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	f7fe bfaf 	b.w	800bfbc <_malloc_r>
 800d05e:	b92a      	cbnz	r2, 800d06c <_realloc_r+0x24>
 800d060:	f7fe ff3a 	bl	800bed8 <_free_r>
 800d064:	4625      	mov	r5, r4
 800d066:	4628      	mov	r0, r5
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	f000 f841 	bl	800d0f2 <_malloc_usable_size_r>
 800d070:	4284      	cmp	r4, r0
 800d072:	4606      	mov	r6, r0
 800d074:	d802      	bhi.n	800d07c <_realloc_r+0x34>
 800d076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d07a:	d8f4      	bhi.n	800d066 <_realloc_r+0x1e>
 800d07c:	4621      	mov	r1, r4
 800d07e:	4638      	mov	r0, r7
 800d080:	f7fe ff9c 	bl	800bfbc <_malloc_r>
 800d084:	4680      	mov	r8, r0
 800d086:	b908      	cbnz	r0, 800d08c <_realloc_r+0x44>
 800d088:	4645      	mov	r5, r8
 800d08a:	e7ec      	b.n	800d066 <_realloc_r+0x1e>
 800d08c:	42b4      	cmp	r4, r6
 800d08e:	4622      	mov	r2, r4
 800d090:	4629      	mov	r1, r5
 800d092:	bf28      	it	cs
 800d094:	4632      	movcs	r2, r6
 800d096:	f7ff ff85 	bl	800cfa4 <memcpy>
 800d09a:	4629      	mov	r1, r5
 800d09c:	4638      	mov	r0, r7
 800d09e:	f7fe ff1b 	bl	800bed8 <_free_r>
 800d0a2:	e7f1      	b.n	800d088 <_realloc_r+0x40>

0800d0a4 <__ascii_wctomb>:
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	4608      	mov	r0, r1
 800d0a8:	b141      	cbz	r1, 800d0bc <__ascii_wctomb+0x18>
 800d0aa:	2aff      	cmp	r2, #255	@ 0xff
 800d0ac:	d904      	bls.n	800d0b8 <__ascii_wctomb+0x14>
 800d0ae:	228a      	movs	r2, #138	@ 0x8a
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	4770      	bx	lr
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	700a      	strb	r2, [r1, #0]
 800d0bc:	4770      	bx	lr
	...

0800d0c0 <fiprintf>:
 800d0c0:	b40e      	push	{r1, r2, r3}
 800d0c2:	b503      	push	{r0, r1, lr}
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	ab03      	add	r3, sp, #12
 800d0c8:	4805      	ldr	r0, [pc, #20]	@ (800d0e0 <fiprintf+0x20>)
 800d0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ce:	6800      	ldr	r0, [r0, #0]
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	f7ff fcf9 	bl	800cac8 <_vfiprintf_r>
 800d0d6:	b002      	add	sp, #8
 800d0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0dc:	b003      	add	sp, #12
 800d0de:	4770      	bx	lr
 800d0e0:	20000074 	.word	0x20000074

0800d0e4 <abort>:
 800d0e4:	2006      	movs	r0, #6
 800d0e6:	b508      	push	{r3, lr}
 800d0e8:	f000 f834 	bl	800d154 <raise>
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	f7f8 fb3a 	bl	8005766 <_exit>

0800d0f2 <_malloc_usable_size_r>:
 800d0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f6:	1f18      	subs	r0, r3, #4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfbc      	itt	lt
 800d0fc:	580b      	ldrlt	r3, [r1, r0]
 800d0fe:	18c0      	addlt	r0, r0, r3
 800d100:	4770      	bx	lr

0800d102 <_raise_r>:
 800d102:	291f      	cmp	r1, #31
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4605      	mov	r5, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	d904      	bls.n	800d116 <_raise_r+0x14>
 800d10c:	2316      	movs	r3, #22
 800d10e:	6003      	str	r3, [r0, #0]
 800d110:	f04f 30ff 	mov.w	r0, #4294967295
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d118:	b112      	cbz	r2, 800d120 <_raise_r+0x1e>
 800d11a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d11e:	b94b      	cbnz	r3, 800d134 <_raise_r+0x32>
 800d120:	4628      	mov	r0, r5
 800d122:	f000 f831 	bl	800d188 <_getpid_r>
 800d126:	4622      	mov	r2, r4
 800d128:	4601      	mov	r1, r0
 800d12a:	4628      	mov	r0, r5
 800d12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d130:	f000 b818 	b.w	800d164 <_kill_r>
 800d134:	2b01      	cmp	r3, #1
 800d136:	d00a      	beq.n	800d14e <_raise_r+0x4c>
 800d138:	1c59      	adds	r1, r3, #1
 800d13a:	d103      	bne.n	800d144 <_raise_r+0x42>
 800d13c:	2316      	movs	r3, #22
 800d13e:	6003      	str	r3, [r0, #0]
 800d140:	2001      	movs	r0, #1
 800d142:	e7e7      	b.n	800d114 <_raise_r+0x12>
 800d144:	2100      	movs	r1, #0
 800d146:	4620      	mov	r0, r4
 800d148:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d14c:	4798      	blx	r3
 800d14e:	2000      	movs	r0, #0
 800d150:	e7e0      	b.n	800d114 <_raise_r+0x12>
	...

0800d154 <raise>:
 800d154:	4b02      	ldr	r3, [pc, #8]	@ (800d160 <raise+0xc>)
 800d156:	4601      	mov	r1, r0
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	f7ff bfd2 	b.w	800d102 <_raise_r>
 800d15e:	bf00      	nop
 800d160:	20000074 	.word	0x20000074

0800d164 <_kill_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	2300      	movs	r3, #0
 800d168:	4d06      	ldr	r5, [pc, #24]	@ (800d184 <_kill_r+0x20>)
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	602b      	str	r3, [r5, #0]
 800d172:	f7f8 fae8 	bl	8005746 <_kill>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d102      	bne.n	800d180 <_kill_r+0x1c>
 800d17a:	682b      	ldr	r3, [r5, #0]
 800d17c:	b103      	cbz	r3, 800d180 <_kill_r+0x1c>
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	bd38      	pop	{r3, r4, r5, pc}
 800d182:	bf00      	nop
 800d184:	200007e4 	.word	0x200007e4

0800d188 <_getpid_r>:
 800d188:	f7f8 bad6 	b.w	8005738 <_getpid>

0800d18c <_init>:
 800d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18e:	bf00      	nop
 800d190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d192:	bc08      	pop	{r3}
 800d194:	469e      	mov	lr, r3
 800d196:	4770      	bx	lr

0800d198 <_fini>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	bf00      	nop
 800d19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19e:	bc08      	pop	{r3}
 800d1a0:	469e      	mov	lr, r3
 800d1a2:	4770      	bx	lr
