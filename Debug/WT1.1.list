
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080058f4  080058f4  000068f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a14  08005a14  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a1c  08005a1c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a20  08005a20  00006a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08005a80  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005a80  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001061b  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b75  00000000  00000000  000176a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd6  00000000  00000000  0001b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193ff  00000000  00000000  0001bd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d82  00000000  00000000  00035135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfda  00000000  00000000  00048eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  000d6ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000db284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058dc 	.word	0x080058dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080058dc 	.word	0x080058dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f001 fa95 	bl	8001694 <HAL_ADCEx_Calibration_Start>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <ADC_Init+0x18>
    {
        Error_Handler();
 8000170:	f000 fd2a 	bl	8000bc8 <Error_Handler>
    }
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}

0800017c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af02      	add	r7, sp, #8
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	f023 030f 	bic.w	r3, r3, #15
 800018c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	011b      	lsls	r3, r3, #4
 8000192:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	f043 030c 	orr.w	r3, r3, #12
 800019a:	b2db      	uxtb	r3, r3
 800019c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	f043 0308 	orr.w	r3, r3, #8
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 030c 	orr.w	r3, r3, #12
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80001b2:	7bbb      	ldrb	r3, [r7, #14]
 80001b4:	f043 0308 	orr.w	r3, r3, #8
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001bc:	f107 0208 	add.w	r2, r7, #8
 80001c0:	2364      	movs	r3, #100	@ 0x64
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2304      	movs	r3, #4
 80001c6:	214e      	movs	r1, #78	@ 0x4e
 80001c8:	4803      	ldr	r0, [pc, #12]	@ (80001d8 <lcd_send_cmd+0x5c>)
 80001ca:	f001 feed 	bl	8001fa8 <HAL_I2C_Master_Transmit>
}
 80001ce:	bf00      	nop
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200000a8 	.word	0x200000a8

080001dc <lcd_send_data>:

void lcd_send_data (char data)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f023 030f 	bic.w	r3, r3, #15
 80001ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	011b      	lsls	r3, r3, #4
 80001f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f043 030d 	orr.w	r3, r3, #13
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0309 	orr.w	r3, r3, #9
 8000204:	b2db      	uxtb	r3, r3
 8000206:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000208:	7bbb      	ldrb	r3, [r7, #14]
 800020a:	f043 030d 	orr.w	r3, r3, #13
 800020e:	b2db      	uxtb	r3, r3
 8000210:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000212:	7bbb      	ldrb	r3, [r7, #14]
 8000214:	f043 0309 	orr.w	r3, r3, #9
 8000218:	b2db      	uxtb	r3, r3
 800021a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800021c:	f107 0208 	add.w	r2, r7, #8
 8000220:	2364      	movs	r3, #100	@ 0x64
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2304      	movs	r3, #4
 8000226:	214e      	movs	r1, #78	@ 0x4e
 8000228:	4803      	ldr	r0, [pc, #12]	@ (8000238 <lcd_send_data+0x5c>)
 800022a:	f001 febd 	bl	8001fa8 <HAL_I2C_Master_Transmit>
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	200000a8 	.word	0x200000a8

0800023c <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    switch (row)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d003      	beq.n	8000254 <lcd_put_cur+0x18>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d005      	beq.n	800025e <lcd_put_cur+0x22>
 8000252:	e009      	b.n	8000268 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800025a:	603b      	str	r3, [r7, #0]
            break;
 800025c:	e004      	b.n	8000268 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000264:	603b      	str	r3, [r7, #0]
            break;
 8000266:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	4618      	mov	r0, r3
 800026e:	f7ff ff85 	bl	800017c <lcd_send_cmd>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <lcd_init>:


void lcd_init (void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 800027e:	2032      	movs	r0, #50	@ 0x32
 8000280:	f000 ff78 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000284:	2030      	movs	r0, #48	@ 0x30
 8000286:	f7ff ff79 	bl	800017c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800028a:	2005      	movs	r0, #5
 800028c:	f000 ff72 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000290:	2030      	movs	r0, #48	@ 0x30
 8000292:	f7ff ff73 	bl	800017c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000296:	2001      	movs	r0, #1
 8000298:	f000 ff6c 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 800029c:	2030      	movs	r0, #48	@ 0x30
 800029e:	f7ff ff6d 	bl	800017c <lcd_send_cmd>
	HAL_Delay(10);
 80002a2:	200a      	movs	r0, #10
 80002a4:	f000 ff66 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 80002a8:	2020      	movs	r0, #32
 80002aa:	f7ff ff67 	bl	800017c <lcd_send_cmd>
	HAL_Delay(10);
 80002ae:	200a      	movs	r0, #10
 80002b0:	f000 ff60 	bl	8001174 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002b4:	2028      	movs	r0, #40	@ 0x28
 80002b6:	f7ff ff61 	bl	800017c <lcd_send_cmd>
	HAL_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 ff5a 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80002c0:	2008      	movs	r0, #8
 80002c2:	f7ff ff5b 	bl	800017c <lcd_send_cmd>
	HAL_Delay(1);
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 ff54 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ff55 	bl	800017c <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 80002d2:	2002      	movs	r0, #2
 80002d4:	f000 ff4e 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002d8:	2006      	movs	r0, #6
 80002da:	f7ff ff4f 	bl	800017c <lcd_send_cmd>
	HAL_Delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 ff48 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 80002e4:	200c      	movs	r0, #12
 80002e6:	f7ff ff49 	bl	800017c <lcd_send_cmd>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}

080002ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b082      	sub	sp, #8
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002f6:	e006      	b.n	8000306 <lcd_send_string+0x18>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	607a      	str	r2, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff6b 	bl	80001dc <lcd_send_data>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f4      	bne.n	80002f8 <lcd_send_string+0xa>
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <LoRa_Reset>:
// === Helper Macros ===
#define NSS_LOW()   HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_RESET)
#define NSS_HIGH()  HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_SET)

// === Reset LoRa chip ===
void LoRa_Reset(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	4807      	ldr	r0, [pc, #28]	@ (8000340 <LoRa_Reset+0x28>)
 8000322:	f001 fce4 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 ff24 	bl	8001174 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <LoRa_Reset+0x28>)
 8000332:	f001 fcdc 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000336:	200a      	movs	r0, #10
 8000338:	f000 ff1c 	bl	8001174 <HAL_Delay>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010c00 	.word	0x40010c00

08000344 <LoRa_WriteReg>:

// === Write single register ===
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	460a      	mov	r2, r1
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	4613      	mov	r3, r2
 8000352:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (addr | 0x80), data };
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800035a:	b2db      	uxtb	r3, r3
 800035c:	733b      	strb	r3, [r7, #12]
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8000362:	2200      	movs	r2, #0
 8000364:	2110      	movs	r1, #16
 8000366:	480a      	ldr	r0, [pc, #40]	@ (8000390 <LoRa_WriteReg+0x4c>)
 8000368:	f001 fcc1 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 800036c:	f107 010c 	add.w	r1, r7, #12
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	2202      	movs	r2, #2
 8000376:	4807      	ldr	r0, [pc, #28]	@ (8000394 <LoRa_WriteReg+0x50>)
 8000378:	f003 feb8 	bl	80040ec <HAL_SPI_Transmit>
    NSS_HIGH();
 800037c:	2201      	movs	r2, #1
 800037e:	2110      	movs	r1, #16
 8000380:	4803      	ldr	r0, [pc, #12]	@ (8000390 <LoRa_WriteReg+0x4c>)
 8000382:	f001 fcb4 	bl	8001cee <HAL_GPIO_WritePin>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010800 	.word	0x40010800
 8000394:	20000110 	.word	0x20000110

08000398 <LoRa_ReadReg>:

// === Read single register ===
uint8_t LoRa_ReadReg(uint8_t addr) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = (addr & 0x7F);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <LoRa_ReadReg+0x58>)
 80003b6:	f001 fc9a 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 80003ba:	f107 010f 	add.w	r1, r7, #15
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2201      	movs	r2, #1
 80003c4:	480b      	ldr	r0, [pc, #44]	@ (80003f4 <LoRa_ReadReg+0x5c>)
 80003c6:	f003 fe91 	bl	80040ec <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80003ca:	f107 010e 	add.w	r1, r7, #14
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295
 80003d2:	2201      	movs	r2, #1
 80003d4:	4807      	ldr	r0, [pc, #28]	@ (80003f4 <LoRa_ReadReg+0x5c>)
 80003d6:	f003 ffcd 	bl	8004374 <HAL_SPI_Receive>
    NSS_HIGH();
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <LoRa_ReadReg+0x58>)
 80003e0:	f001 fc85 	bl	8001cee <HAL_GPIO_WritePin>
    return rx;
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010800 	.word	0x40010800
 80003f4:	20000110 	.word	0x20000110

080003f8 <LoRa_WriteBuffer>:

// === Write multiple bytes ===
void LoRa_WriteBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	6039      	str	r1, [r7, #0]
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80;
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800040e:	b2db      	uxtb	r3, r3
 8000410:	71fb      	strb	r3, [r7, #7]
    NSS_LOW();
 8000412:	2200      	movs	r2, #0
 8000414:	2110      	movs	r1, #16
 8000416:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoRa_WriteBuffer+0x54>)
 8000418:	f001 fc69 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800041c:	1df9      	adds	r1, r7, #7
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
 8000422:	2201      	movs	r2, #1
 8000424:	480a      	ldr	r0, [pc, #40]	@ (8000450 <LoRa_WriteBuffer+0x58>)
 8000426:	f003 fe61 	bl	80040ec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	b29a      	uxth	r2, r3
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	6839      	ldr	r1, [r7, #0]
 8000434:	4806      	ldr	r0, [pc, #24]	@ (8000450 <LoRa_WriteBuffer+0x58>)
 8000436:	f003 fe59 	bl	80040ec <HAL_SPI_Transmit>
    NSS_HIGH();
 800043a:	2201      	movs	r2, #1
 800043c:	2110      	movs	r1, #16
 800043e:	4803      	ldr	r0, [pc, #12]	@ (800044c <LoRa_WriteBuffer+0x54>)
 8000440:	f001 fc55 	bl	8001cee <HAL_GPIO_WritePin>
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40010800 	.word	0x40010800
 8000450:	20000110 	.word	0x20000110

08000454 <LoRa_ReadBuffer>:

// === Read multiple bytes ===
void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	4613      	mov	r3, r2
 8000462:	71bb      	strb	r3, [r7, #6]
    addr &= 0x7F;
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800046a:	b2db      	uxtb	r3, r3
 800046c:	71fb      	strb	r3, [r7, #7]
    NSS_LOW();
 800046e:	2200      	movs	r2, #0
 8000470:	2110      	movs	r1, #16
 8000472:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <LoRa_ReadBuffer+0x54>)
 8000474:	f001 fc3b 	bl	8001cee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000478:	1df9      	adds	r1, r7, #7
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	2201      	movs	r2, #1
 8000480:	480a      	ldr	r0, [pc, #40]	@ (80004ac <LoRa_ReadBuffer+0x58>)
 8000482:	f003 fe33 	bl	80040ec <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	b29a      	uxth	r2, r3
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	6839      	ldr	r1, [r7, #0]
 8000490:	4806      	ldr	r0, [pc, #24]	@ (80004ac <LoRa_ReadBuffer+0x58>)
 8000492:	f003 ff6f 	bl	8004374 <HAL_SPI_Receive>
    NSS_HIGH();
 8000496:	2201      	movs	r2, #1
 8000498:	2110      	movs	r1, #16
 800049a:	4803      	ldr	r0, [pc, #12]	@ (80004a8 <LoRa_ReadBuffer+0x54>)
 800049c:	f001 fc27 	bl	8001cee <HAL_GPIO_WritePin>
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010800 	.word	0x40010800
 80004ac:	20000110 	.word	0x20000110

080004b0 <LoRa_Init>:

// === Initialize LoRa (433 MHz, SyncWord=0x22) ===
void LoRa_Init(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80004b4:	f7ff ff30 	bl	8000318 <LoRa_Reset>

    // Sleep (FSK)
    LoRa_WriteReg(0x01, 0x00);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2001      	movs	r0, #1
 80004bc:	f7ff ff42 	bl	8000344 <LoRa_WriteReg>
    HAL_Delay(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f000 fe57 	bl	8001174 <HAL_Delay>

    // LoRa mode + sleep
    LoRa_WriteReg(0x01, 0x80);
 80004c6:	2180      	movs	r1, #128	@ 0x80
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff ff3b 	bl	8000344 <LoRa_WriteReg>
    HAL_Delay(10);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f000 fe50 	bl	8001174 <HAL_Delay>

    // Frequency: 433 MHz
    LoRa_WriteReg(0x06, 0x6C); // RegFrfMsb
 80004d4:	216c      	movs	r1, #108	@ 0x6c
 80004d6:	2006      	movs	r0, #6
 80004d8:	f7ff ff34 	bl	8000344 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, 0x80); // RegFrfMid
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	2007      	movs	r0, #7
 80004e0:	f7ff ff30 	bl	8000344 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, 0x00); // RegFrfLsb
 80004e4:	2100      	movs	r1, #0
 80004e6:	2008      	movs	r0, #8
 80004e8:	f7ff ff2c 	bl	8000344 <LoRa_WriteReg>

    // PA_BOOST, max power
    LoRa_WriteReg(0x09, 0x8F);
 80004ec:	218f      	movs	r1, #143	@ 0x8f
 80004ee:	2009      	movs	r0, #9
 80004f0:	f7ff ff28 	bl	8000344 <LoRa_WriteReg>

    // LNA boost
    LoRa_WriteReg(0x0C, 0x23);
 80004f4:	2123      	movs	r1, #35	@ 0x23
 80004f6:	200c      	movs	r0, #12
 80004f8:	f7ff ff24 	bl	8000344 <LoRa_WriteReg>

    // BW=125kHz, CR=4/5, explicit header
    LoRa_WriteReg(0x1D, 0x72);
 80004fc:	2172      	movs	r1, #114	@ 0x72
 80004fe:	201d      	movs	r0, #29
 8000500:	f7ff ff20 	bl	8000344 <LoRa_WriteReg>

    // SF=7, CRC on
    LoRa_WriteReg(0x1E, 0x74);
 8000504:	2174      	movs	r1, #116	@ 0x74
 8000506:	201e      	movs	r0, #30
 8000508:	f7ff ff1c 	bl	8000344 <LoRa_WriteReg>

    // Preamble length = 8
    LoRa_WriteReg(0x20, 0x00);
 800050c:	2100      	movs	r1, #0
 800050e:	2020      	movs	r0, #32
 8000510:	f7ff ff18 	bl	8000344 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8000514:	2108      	movs	r1, #8
 8000516:	2021      	movs	r0, #33	@ 0x21
 8000518:	f7ff ff14 	bl	8000344 <LoRa_WriteReg>

    // Sync Word = 0x22 (must match ESP32)
    LoRa_WriteReg(0x39, 0x22);
 800051c:	2122      	movs	r1, #34	@ 0x22
 800051e:	2039      	movs	r0, #57	@ 0x39
 8000520:	f7ff ff10 	bl	8000344 <LoRa_WriteReg>

    // Continuous RX mode
    LoRa_WriteReg(0x01, 0x85);
 8000524:	2185      	movs	r1, #133	@ 0x85
 8000526:	2001      	movs	r0, #1
 8000528:	f7ff ff0c 	bl	8000344 <LoRa_WriteReg>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <LoRa_SendPacket>:

// === Send packet ===
void LoRa_SendPacket(uint8_t *buffer, uint8_t size) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
    // Standby
    LoRa_WriteReg(0x01, 0x81);
 800053c:	2181      	movs	r1, #129	@ 0x81
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff ff00 	bl	8000344 <LoRa_WriteReg>

    // FIFO TX base addr
    LoRa_WriteReg(0x0E, 0x00);
 8000544:	2100      	movs	r1, #0
 8000546:	200e      	movs	r0, #14
 8000548:	f7ff fefc 	bl	8000344 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 800054c:	2100      	movs	r1, #0
 800054e:	200d      	movs	r0, #13
 8000550:	f7ff fef8 	bl	8000344 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	461a      	mov	r2, r3
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ff4c 	bl	80003f8 <LoRa_WriteBuffer>

    // Payload length
    LoRa_WriteReg(0x22, size);
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	4619      	mov	r1, r3
 8000564:	2022      	movs	r0, #34	@ 0x22
 8000566:	f7ff feed 	bl	8000344 <LoRa_WriteReg>

    // TX mode
    LoRa_WriteReg(0x01, 0x83);
 800056a:	2183      	movs	r1, #131	@ 0x83
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff fee9 	bl	8000344 <LoRa_WriteReg>

    // Wait for TxDone (DIO0 high)
    while (HAL_GPIO_ReadPin(LORA_DIO0_PORT, LORA_DIO0_PIN) == GPIO_PIN_RESET);
 8000572:	bf00      	nop
 8000574:	2102      	movs	r1, #2
 8000576:	4809      	ldr	r0, [pc, #36]	@ (800059c <LoRa_SendPacket+0x6c>)
 8000578:	f001 fba2 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f8      	beq.n	8000574 <LoRa_SendPacket+0x44>

    // Clear IRQ flags
    LoRa_WriteReg(0x12, 0xFF);
 8000582:	21ff      	movs	r1, #255	@ 0xff
 8000584:	2012      	movs	r0, #18
 8000586:	f7ff fedd 	bl	8000344 <LoRa_WriteReg>

    // Back to continuous RX
    LoRa_WriteReg(0x01, 0x85);
 800058a:	2185      	movs	r1, #133	@ 0x85
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff fed9 	bl	8000344 <LoRa_WriteReg>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010c00 	.word	0x40010c00

080005a0 <LoRa_ReceivePacket>:

// === Receive packet (returns size, 0 if none) ===
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    uint8_t size = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

    if (HAL_GPIO_ReadPin(LORA_DIO0_PORT, LORA_DIO0_PIN) == GPIO_PIN_SET) {
 80005ac:	2102      	movs	r1, #2
 80005ae:	4811      	ldr	r0, [pc, #68]	@ (80005f4 <LoRa_ReceivePacket+0x54>)
 80005b0:	f001 fb86 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d116      	bne.n	80005e8 <LoRa_ReceivePacket+0x48>
        // Bytes received
        size = LoRa_ReadReg(0x13);                  // RegRxNbBytes
 80005ba:	2013      	movs	r0, #19
 80005bc:	f7ff feec 	bl	8000398 <LoRa_ReadReg>
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
        LoRa_WriteReg(0x0D, LoRa_ReadReg(0x10));    // FifoAddrPtr = FifoRxCurrentAddr
 80005c4:	2010      	movs	r0, #16
 80005c6:	f7ff fee7 	bl	8000398 <LoRa_ReadReg>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4619      	mov	r1, r3
 80005ce:	200d      	movs	r0, #13
 80005d0:	f7ff feb8 	bl	8000344 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, size);        // Read FIFO
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	461a      	mov	r2, r3
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff3a 	bl	8000454 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF);                  // Clear IRQs
 80005e0:	21ff      	movs	r1, #255	@ 0xff
 80005e2:	2012      	movs	r0, #18
 80005e4:	f7ff feae 	bl	8000344 <LoRa_WriteReg>
    }
    return size;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static uint8_t z = 0;

/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fda3 	bl	800014c <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <Debug_Print+0x28>)
 8000612:	f004 facc 	bl	8004bae <HAL_UART_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000168 	.word	0x20000168

08000624 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b092      	sub	sp, #72	@ 0x48
 8000628:	af02      	add	r7, sp, #8

  /* MCU Configuration */
  HAL_Init();
 800062a:	f000 fd41 	bl	80010b0 <HAL_Init>
  SystemClock_Config();
 800062e:	f000 f8d3 	bl	80007d8 <SystemClock_Config>

  MX_GPIO_Init();
 8000632:	f000 fa45 	bl	8000ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000636:	f000 f92d 	bl	8000894 <MX_ADC1_Init>
  MX_RTC_Init();
 800063a:	f000 f997 	bl	800096c <MX_RTC_Init>
  MX_SPI1_Init();
 800063e:	f000 f9df 	bl	8000a00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000642:	f000 fa13 	bl	8000a6c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000646:	f000 f963 	bl	8000910 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  lcd_init();
 800064a:	f7ff fe16 	bl	800027a <lcd_init>
  ADC_Init(&hadc1);
 800064e:	4852      	ldr	r0, [pc, #328]	@ (8000798 <main+0x174>)
 8000650:	f7ff fd84 	bl	800015c <ADC_Init>
  LoRa_Init();
 8000654:	f7ff ff2c 	bl	80004b0 <LoRa_Init>

  Debug_Print("System Initialized\r\n");
 8000658:	4850      	ldr	r0, [pc, #320]	@ (800079c <main+0x178>)
 800065a:	f7ff ffcd 	bl	80005f8 <Debug_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1) {
      // === Verify LoRa chip ===
      uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 800065e:	2042      	movs	r0, #66	@ 0x42
 8000660:	f7ff fe9a 	bl	8000398 <LoRa_ReadReg>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      if (version != 0x12) {
 800066a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800066e:	2b12      	cmp	r3, #18
 8000670:	d012      	beq.n	8000698 <main+0x74>
          z = 1;
 8000672:	4b4b      	ldr	r3, [pc, #300]	@ (80007a0 <main+0x17c>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
          char errMsg[50];
          sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8000678:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4949      	ldr	r1, [pc, #292]	@ (80007a4 <main+0x180>)
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fc69 	bl	8004f58 <siprintf>
          Debug_Print(errMsg);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffb5 	bl	80005f8 <Debug_Print>
          HAL_Delay(2000);
 800068e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000692:	f000 fd6f 	bl	8001174 <HAL_Delay>
          continue; // retry until chip responds
 8000696:	e07d      	b.n	8000794 <main+0x170>
      }

      // === Transmit ===
      uint8_t msg[] = "PING";
 8000698:	4b43      	ldr	r3, [pc, #268]	@ (80007a8 <main+0x184>)
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800069c:	2300      	movs	r3, #0
 800069e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
      LoRa_SendPacket(msg, sizeof(msg) - 1);
 80006a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff41 	bl	8000530 <LoRa_SendPacket>
      z = 2;
 80006ae:	4b3c      	ldr	r3, [pc, #240]	@ (80007a0 <main+0x17c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
      Debug_Print("Sent: PING\r\n");
 80006b4:	483d      	ldr	r0, [pc, #244]	@ (80007ac <main+0x188>)
 80006b6:	f7ff ff9f 	bl	80005f8 <Debug_Print>

      // === Receive ===
      uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80006ba:	483d      	ldr	r0, [pc, #244]	@ (80007b0 <main+0x18c>)
 80006bc:	f7ff ff70 	bl	80005a0 <LoRa_ReceivePacket>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
      if (len > 0) {
 80006c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d01e      	beq.n	800070c <main+0xe8>
          rxBuffer[len] = '\0'; // null terminate
 80006ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80006d2:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <main+0x18c>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	54d1      	strb	r1, [r2, r3]
          char dbg[50];
          sprintf(dbg, "Received: %s\r\n", rxBuffer);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4a35      	ldr	r2, [pc, #212]	@ (80007b0 <main+0x18c>)
 80006dc:	4935      	ldr	r1, [pc, #212]	@ (80007b4 <main+0x190>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fc3a 	bl	8004f58 <siprintf>
          Debug_Print(dbg);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff86 	bl	80005f8 <Debug_Print>

          if (strncmp((char*)rxBuffer, "ACK", 3) == 0) {
 80006ec:	2203      	movs	r2, #3
 80006ee:	4932      	ldr	r1, [pc, #200]	@ (80007b8 <main+0x194>)
 80006f0:	482f      	ldr	r0, [pc, #188]	@ (80007b0 <main+0x18c>)
 80006f2:	f004 fc5b 	bl	8004fac <strncmp>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <main+0xe0>
              connectionStatus = 1;
 80006fc:	4b2f      	ldr	r3, [pc, #188]	@ (80007bc <main+0x198>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e006      	b.n	8000712 <main+0xee>
          } else {
              connectionStatus = 0;
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <main+0x198>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e002      	b.n	8000712 <main+0xee>
          }
      } else {
          connectionStatus = 0;
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <main+0x198>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
      }

      // === Display RTC ===
      Get_Time();
 8000712:	f000 fa77 	bl	8000c04 <Get_Time>
      sprintf(lcdBuffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <main+0x19c>)
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	461a      	mov	r2, r3
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <main+0x19c>)
 800071e:	785b      	ldrb	r3, [r3, #1]
 8000720:	4619      	mov	r1, r3
 8000722:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <main+0x19c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	460b      	mov	r3, r1
 800072a:	4926      	ldr	r1, [pc, #152]	@ (80007c4 <main+0x1a0>)
 800072c:	4826      	ldr	r0, [pc, #152]	@ (80007c8 <main+0x1a4>)
 800072e:	f004 fc13 	bl	8004f58 <siprintf>
      lcd_put_cur(0, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fd81 	bl	800023c <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 800073a:	4823      	ldr	r0, [pc, #140]	@ (80007c8 <main+0x1a4>)
 800073c:	f7ff fdd7 	bl	80002ee <lcd_send_string>

      sprintf(lcdBuffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <main+0x19c>)
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	461a      	mov	r2, r3
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <main+0x19c>)
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	4619      	mov	r1, r3
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <main+0x19c>)
 800074e:	799b      	ldrb	r3, [r3, #6]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	460b      	mov	r3, r1
 8000754:	491d      	ldr	r1, [pc, #116]	@ (80007cc <main+0x1a8>)
 8000756:	481c      	ldr	r0, [pc, #112]	@ (80007c8 <main+0x1a4>)
 8000758:	f004 fbfe 	bl	8004f58 <siprintf>
      lcd_put_cur(1, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fd6c 	bl	800023c <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 8000764:	4818      	ldr	r0, [pc, #96]	@ (80007c8 <main+0x1a4>)
 8000766:	f7ff fdc2 	bl	80002ee <lcd_send_string>

      // === Debug connection ===
      if (connectionStatus) {
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <main+0x198>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <main+0x15c>
          Debug_Print("Connection: OK\r\n");
 8000772:	4817      	ldr	r0, [pc, #92]	@ (80007d0 <main+0x1ac>)
 8000774:	f7ff ff40 	bl	80005f8 <Debug_Print>
          z = 3;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <main+0x17c>)
 800077a:	2203      	movs	r2, #3
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e005      	b.n	800078c <main+0x168>
      } else {
          Debug_Print("Connection: LOST\r\n");
 8000780:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <main+0x1b0>)
 8000782:	f7ff ff39 	bl	80005f8 <Debug_Print>
          z = 4;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <main+0x17c>)
 8000788:	2204      	movs	r2, #4
 800078a:	701a      	strb	r2, [r3, #0]
      }

      HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000790:	f000 fcf0 	bl	8001174 <HAL_Delay>
  while (1) {
 8000794:	e763      	b.n	800065e <main+0x3a>
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078
 800079c:	080058f4 	.word	0x080058f4
 80007a0:	200001e5 	.word	0x200001e5
 80007a4:	0800590c 	.word	0x0800590c
 80007a8:	474e4950 	.word	0x474e4950
 80007ac:	08005930 	.word	0x08005930
 80007b0:	200001c4 	.word	0x200001c4
 80007b4:	08005940 	.word	0x08005940
 80007b8:	08005950 	.word	0x08005950
 80007bc:	200001e4 	.word	0x200001e4
 80007c0:	200001e8 	.word	0x200001e8
 80007c4:	08005954 	.word	0x08005954
 80007c8:	200001b0 	.word	0x200001b0
 80007cc:	08005964 	.word	0x08005964
 80007d0:	08005978 	.word	0x08005978
 80007d4:	0800598c 	.word	0x0800598c

080007d8 <SystemClock_Config>:
  }
}

/* =================== Peripheral Init =================== */

void SystemClock_Config(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e2:	2228      	movs	r2, #40	@ 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fbd8 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000824:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800082a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fad8 	bl	8002de4 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x66>
 800083a:	f000 f9c5 	bl	8000bc8 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	617b      	str	r3, [r7, #20]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fd44 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x92>
 8000866:	f000 f9af 	bl	8000bc8 <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 800086a:	2303      	movs	r3, #3
 800086c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800086e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000872:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000878:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fec1 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb4>
 8000888:	f000 f99e 	bl	8000bc8 <Error_Handler>
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	@ 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
  hadc1.Instance = ADC1;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	@ (800090c <MX_ADC1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008d2:	f000 fc73 	bl	80011bc <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x4c>
 80008dc:	f000 f974 	bl	8000bc8 <Error_Handler>

  sConfig.Channel = ADC_CHANNEL_0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_ADC1_Init+0x74>)
 80008f2:	f000 fd3b 	bl	800136c <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x6c>
 80008fc:	f000 f964 	bl	8000bc8 <Error_Handler>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	40012400 	.word	0x40012400

08000910 <MX_I2C2_Init>:

static void MX_I2C2_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <MX_I2C2_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C2_Init+0x50>)
 800091c:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <MX_I2C2_Init+0x58>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_I2C2_Init+0x50>)
 800092e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_I2C2_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_I2C2_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) { Error_Handler(); }
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_I2C2_Init+0x50>)
 800094e:	f001 f9e7 	bl	8001d20 <HAL_I2C_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C2_Init+0x4c>
 8000958:	f000 f936 	bl	8000bc8 <Error_Handler>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000a8 	.word	0x200000a8
 8000964:	40005800 	.word	0x40005800
 8000968:	000186a0 	.word	0x000186a0

0800096c <MX_RTC_Init>:

static void MX_RTC_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2100      	movs	r1, #0
 8000976:	460a      	mov	r2, r1
 8000978:	801a      	strh	r2, [r3, #0]
 800097a:	460a      	mov	r2, r1
 800097c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]

  hrtc.Instance = RTC;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_RTC_Init+0x8c>)
 8000984:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <MX_RTC_Init+0x90>)
 8000986:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_RTC_Init+0x8c>)
 800098a:	f04f 32ff 	mov.w	r2, #4294967295
 800098e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_RTC_Init+0x8c>)
 8000992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000996:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) { Error_Handler(); }
 8000998:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <MX_RTC_Init+0x8c>)
 800099a:	f002 ff9f 	bl	80038dc <HAL_RTC_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_RTC_Init+0x3c>
 80009a4:	f000 f910 	bl	8000bc8 <Error_Handler>

  sTime.Hours = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71bb      	strb	r3, [r7, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) { Error_Handler(); }
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	480f      	ldr	r0, [pc, #60]	@ (80009f8 <MX_RTC_Init+0x8c>)
 80009bc:	f003 f81a 	bl	80039f4 <HAL_RTC_SetTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_RTC_Init+0x5e>
 80009c6:	f000 f8ff 	bl	8000bc8 <Error_Handler>

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ca:	2301      	movs	r3, #1
 80009cc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) { Error_Handler(); }
 80009da:	463b      	mov	r3, r7
 80009dc:	2201      	movs	r2, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_RTC_Init+0x8c>)
 80009e2:	f003 f89f 	bl	8003b24 <HAL_RTC_SetDate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_RTC_Init+0x84>
 80009ec:	f000 f8ec 	bl	8000bc8 <Error_Handler>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000fc 	.word	0x200000fc
 80009fc:	40002800 	.word	0x40002800

08000a00 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <MX_SPI1_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a34:	2208      	movs	r2, #8
 8000a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) { Error_Handler(); }
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_SPI1_Init+0x64>)
 8000a52:	f003 fac7 	bl	8003fe4 <HAL_SPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_SPI1_Init+0x60>
 8000a5c:	f000 f8b4 	bl	8000bc8 <Error_Handler>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000110 	.word	0x20000110
 8000a68:	40013000 	.word	0x40013000

08000a6c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <MX_USART1_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) { Error_Handler(); }
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f004 f833 	bl	8004b0e <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART1_UART_Init+0x46>
 8000aae:	f000 f88b 	bl	8000bc8 <Error_Handler>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000168 	.word	0x20000168
 8000abc:	40013800 	.word	0x40013800

08000ac0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b38      	ldr	r3, [pc, #224]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a37      	ldr	r2, [pc, #220]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aec:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a31      	ldr	r2, [pc, #196]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a25      	ldr	r2, [pc, #148]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /* Example: LED PC13 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3a:	4820      	ldr	r0, [pc, #128]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b3c:	f001 f8d7 	bl	8001cee <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4818      	ldr	r0, [pc, #96]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b5a:	f000 ff2d 	bl	80019b8 <HAL_GPIO_Init>

  /* LoRa NSS, RESET, DIO0 config (define in lora.h) */
  GPIO_InitStruct.Pin = LORA_NSS_PIN;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_NSS_PORT, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <MX_GPIO_Init+0x100>)
 8000b72:	f000 ff21 	bl	80019b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <MX_GPIO_Init+0x100>)
 8000b7c:	f001 f8b7 	bl	8001cee <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LORA_RESET_PIN;
 8000b80:	2301      	movs	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LORA_RESET_PORT, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000b8c:	f000 ff14 	bl	80019b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000b96:	f001 f8aa 	bl	8001cee <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LORA_DIO0_PIN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_DIO0_PORT, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000baa:	f000 ff05 	bl	80019b8 <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00

08000bc8 <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  __disable_irq();
  while (1) { }
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	4413      	add	r3, r2
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	2307      	movs	r3, #7
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	463b      	mov	r3, r7
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	21d0      	movs	r1, #208	@ 0xd0
 8000c1e:	481f      	ldr	r0, [pc, #124]	@ (8000c9c <Get_Time+0x98>)
 8000c20:	f001 fac0 	bl	80021a4 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000c24:	783b      	ldrb	r3, [r7, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ffd4 	bl	8000bd4 <bcdToDec>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <Get_Time+0x9c>)
 8000c32:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffcc 	bl	8000bd4 <bcdToDec>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <Get_Time+0x9c>)
 8000c42:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000c44:	78bb      	ldrb	r3, [r7, #2]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ffc4 	bl	8000bd4 <bcdToDec>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <Get_Time+0x9c>)
 8000c52:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffbc 	bl	8000bd4 <bcdToDec>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <Get_Time+0x9c>)
 8000c62:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000c64:	793b      	ldrb	r3, [r7, #4]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffb4 	bl	8000bd4 <bcdToDec>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <Get_Time+0x9c>)
 8000c72:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffac 	bl	8000bd4 <bcdToDec>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Get_Time+0x9c>)
 8000c82:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffa4 	bl	8000bd4 <bcdToDec>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <Get_Time+0x9c>)
 8000c92:	719a      	strb	r2, [r3, #6]
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000a8 	.word	0x200000a8
 8000ca0:	200001e8 	.word	0x200001e8

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x5c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x60>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_MspInit+0x60>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_ADC_MspInit+0x6c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d121      	bne.n	8000d6c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d58:	233f      	movs	r3, #63	@ 0x3f
 8000d5a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_ADC_MspInit+0x74>)
 8000d68:	f000 fe26 	bl	80019b8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40012400 	.word	0x40012400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d124      	bne.n	8000dea <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000db8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <HAL_I2C_MspInit+0x7c>)
 8000dce:	f000 fdf3 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40005800 	.word	0x40005800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_RTC_MspInit+0x3c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d110      	bne.n	8000e34 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e12:	f001 ffdb 	bl	8002dcc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_RTC_MspInit+0x40>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <HAL_RTC_MspInit+0x40>)
 8000e1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <HAL_RTC_MspInit+0x40>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_RTC_MspInit+0x44>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40002800 	.word	0x40002800
 8000e40:	40021000 	.word	0x40021000
 8000e44:	4242043c 	.word	0x4242043c

08000e48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <HAL_SPI_MspInit+0xa4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13d      	bne.n	8000ee4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e68:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a20      	ldr	r2, [pc, #128]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_SPI_MspInit+0xa8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e98:	2328      	movs	r3, #40	@ 0x28
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <HAL_SPI_MspInit+0xac>)
 8000eac:	f000 fd84 	bl	80019b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <HAL_SPI_MspInit+0xac>)
 8000ec4:	f000 fd78 	bl	80019b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_SPI_MspInit+0xb0>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ede:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_SPI_MspInit+0xb0>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	@ 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_UART_MspInit+0x8c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d131      	bne.n	8000f80 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_UART_MspInit+0x90>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <HAL_UART_MspInit+0x94>)
 8000f62:	f000 fd29 	bl	80019b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_UART_MspInit+0x94>)
 8000f7c:	f000 fd1c 	bl	80019b8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010800 	.word	0x40010800

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f8aa 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f003 ffd8 	bl	8004fd0 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20005000 	.word	0x20005000
 800104c:	00000400 	.word	0x00000400
 8001050:	200001f0 	.word	0x200001f0
 8001054:	20000340 	.word	0x20000340

08001058 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001064:	f7ff fff8 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480b      	ldr	r0, [pc, #44]	@ (8001098 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106a:	490c      	ldr	r1, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800106c:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001080:	4c09      	ldr	r4, [pc, #36]	@ (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f003 ffa5 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff fac7 	bl	8000624 <main>
  bx lr
 8001096:	4770      	bx	lr
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010a0:	08005a24 	.word	0x08005a24
  ldr r2, =_sbss
 80010a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a8:	20000340 	.word	0x20000340

080010ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_2_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x28>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x28>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 fc45 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fdea 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fc4f 	bl	800199e <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 fc25 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_IncTick+0x1c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a03      	ldr	r2, [pc, #12]	@ (800115c <HAL_IncTick+0x20>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000008 	.word	0x20000008
 800115c:	200001f4 	.word	0x200001f4

08001160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b02      	ldr	r3, [pc, #8]	@ (8001170 <HAL_GetTick+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	200001f4 	.word	0x200001f4

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fff0 	bl	8001160 <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffe0 	bl	8001160 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0be      	b.n	800135c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fd84 	bl	8000d08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fa05 	bl	8001610 <ADC_ConversionStop_Disable>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8099 	bne.w	800134a <HAL_ADC_Init+0x18e>
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8095 	bne.w	800134a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001228:	f023 0302 	bic.w	r3, r3, #2
 800122c:	f043 0202 	orr.w	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7b1b      	ldrb	r3, [r3, #12]
 8001242:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001244:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4313      	orrs	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001254:	d003      	beq.n	800125e <HAL_ADC_Init+0xa2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_ADC_Init+0xa8>
 800125e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001262:	e000      	b.n	8001266 <HAL_ADC_Init+0xaa>
 8001264:	2300      	movs	r3, #0
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7d1b      	ldrb	r3, [r3, #20]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d119      	bne.n	80012a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d109      	bne.n	8001290 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	3b01      	subs	r3, #1
 8001282:	035a      	lsls	r2, r3, #13
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	e00b      	b.n	80012a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_ADC_Init+0x1a8>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012d8:	d003      	beq.n	80012e2 <HAL_ADC_Init+0x126>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d104      	bne.n	80012ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	051b      	lsls	r3, r3, #20
 80012ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_ADC_Init+0x1ac>)
 8001308:	4013      	ands	r3, r2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d10b      	bne.n	8001328 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131a:	f023 0303 	bic.w	r3, r3, #3
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001326:	e018      	b.n	800135a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132c:	f023 0312 	bic.w	r3, r3, #18
 8001330:	f043 0210 	orr.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001348:	e007      	b.n	800135a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134e:	f043 0210 	orr.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800135a:	7dfb      	ldrb	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	ffe1f7fd 	.word	0xffe1f7fd
 8001368:	ff1f0efe 	.word	0xff1f0efe

0800136c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_ADC_ConfigChannel+0x20>
 8001388:	2302      	movs	r3, #2
 800138a:	e0dc      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1da>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b06      	cmp	r3, #6
 800139a:	d81c      	bhi.n	80013d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	221f      	movs	r2, #31
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b05      	subs	r3, #5
 80013c8:	fa00 f203 	lsl.w	r2, r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d4:	e03c      	b.n	8001450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d81c      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b23      	subs	r3, #35	@ 0x23
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4019      	ands	r1, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b23      	subs	r3, #35	@ 0x23
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
 8001416:	e01b      	b.n	8001450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b41      	subs	r3, #65	@ 0x41
 800142a:	221f      	movs	r2, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	4019      	ands	r1, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b41      	subs	r3, #65	@ 0x41
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d91c      	bls.n	8001492 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	3b1e      	subs	r3, #30
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6898      	ldr	r0, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	3b1e      	subs	r3, #30
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	e019      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6919      	ldr	r1, [r3, #16]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4019      	ands	r1, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d003      	beq.n	80014d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d2:	2b11      	cmp	r3, #17
 80014d4:	d132      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_ADC_ConfigChannel+0x1e4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d125      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d126      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80014fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b10      	cmp	r3, #16
 8001504:	d11a      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_ADC_ConfigChannel+0x1e8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a13      	ldr	r2, [pc, #76]	@ (8001558 <HAL_ADC_ConfigChannel+0x1ec>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	0c9a      	lsrs	r2, r3, #18
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151c:	e002      	b.n	8001524 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3b01      	subs	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f9      	bne.n	800151e <HAL_ADC_ConfigChannel+0x1b2>
 800152a:	e007      	b.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f043 0220 	orr.w	r2, r3, #32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40012400 	.word	0x40012400
 8001554:	20000000 	.word	0x20000000
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d040      	beq.n	80015fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <ADC_Enable+0xac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <ADC_Enable+0xb0>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001598:	e002      	b.n	80015a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015a6:	f7ff fddb 	bl	8001160 <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ac:	e01f      	b.n	80015ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015ae:	f7ff fdd7 	bl	8001160 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d918      	bls.n	80015ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d011      	beq.n	80015ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d1d8      	bne.n	80015ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d12e      	bne.n	8001688 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff fd91 	bl	8001160 <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001640:	e01b      	b.n	800167a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001642:	f7ff fd8d 	bl	8001160 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d914      	bls.n	800167a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d10d      	bne.n	800167a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e007      	b.n	800168a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d0dc      	beq.n	8001642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e097      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa8 	bl	8001610 <ADC_ConversionStop_Disable>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff49 	bl	800155c <ADC_Enable>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8081 	bne.w	80017d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <HAL_ADCEx_Calibration_Start+0x158>)
 80016ec:	681c      	ldr	r4, [r3, #0]
 80016ee:	2002      	movs	r0, #2
 80016f0:	f002 f83e 	bl	8003770 <HAL_RCCEx_GetPeriphCLKFreq>
 80016f4:	4603      	mov	r3, r0
 80016f6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016fa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016fc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016fe:	e002      	b.n	8001706 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800171c:	f7ff fd20 	bl	8001160 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001722:	e01b      	b.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001724:	f7ff fd1c 	bl	8001160 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d914      	bls.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f023 0312 	bic.w	r3, r3, #18
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e042      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1dc      	bne.n	8001724 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800177a:	f7ff fcf1 	bl	8001160 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001780:	e01b      	b.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001782:	f7ff fced 	bl	8001160 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b0a      	cmp	r3, #10
 800178e:	d914      	bls.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a2:	f023 0312 	bic.w	r3, r3, #18
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e013      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1dc      	bne.n	8001782 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f023 0303 	bic.w	r3, r3, #3
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000000 	.word	0x20000000

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff90 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff49 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff5e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb0 	bl	800190c <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	e169      	b.n	8001ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019cc:	2201      	movs	r2, #1
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8158 	bne.w	8001c9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001c58 <HAL_GPIO_Init+0x2a0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d05e      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 80019f4:	4a98      	ldr	r2, [pc, #608]	@ (8001c58 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d875      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 80019fa:	4a98      	ldr	r2, [pc, #608]	@ (8001c5c <HAL_GPIO_Init+0x2a4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d058      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a00:	4a96      	ldr	r2, [pc, #600]	@ (8001c5c <HAL_GPIO_Init+0x2a4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d86f      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a06:	4a96      	ldr	r2, [pc, #600]	@ (8001c60 <HAL_GPIO_Init+0x2a8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d052      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a0c:	4a94      	ldr	r2, [pc, #592]	@ (8001c60 <HAL_GPIO_Init+0x2a8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d869      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a12:	4a94      	ldr	r2, [pc, #592]	@ (8001c64 <HAL_GPIO_Init+0x2ac>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04c      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a18:	4a92      	ldr	r2, [pc, #584]	@ (8001c64 <HAL_GPIO_Init+0x2ac>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d863      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a1e:	4a92      	ldr	r2, [pc, #584]	@ (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d046      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a24:	4a90      	ldr	r2, [pc, #576]	@ (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d85d      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d82a      	bhi.n	8001a84 <HAL_GPIO_Init+0xcc>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d859      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a32:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <HAL_GPIO_Init+0x80>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001a8d 	.word	0x08001a8d
 8001a40:	08001a9f 	.word	0x08001a9f
 8001a44:	08001ae1 	.word	0x08001ae1
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001ae7 	.word	0x08001ae7
 8001a50:	08001ae7 	.word	0x08001ae7
 8001a54:	08001ae7 	.word	0x08001ae7
 8001a58:	08001ae7 	.word	0x08001ae7
 8001a5c:	08001ae7 	.word	0x08001ae7
 8001a60:	08001ae7 	.word	0x08001ae7
 8001a64:	08001ae7 	.word	0x08001ae7
 8001a68:	08001ae7 	.word	0x08001ae7
 8001a6c:	08001ae7 	.word	0x08001ae7
 8001a70:	08001ae7 	.word	0x08001ae7
 8001a74:	08001ae7 	.word	0x08001ae7
 8001a78:	08001ae7 	.word	0x08001ae7
 8001a7c:	08001a95 	.word	0x08001a95
 8001a80:	08001aa9 	.word	0x08001aa9
 8001a84:	4a79      	ldr	r2, [pc, #484]	@ (8001c6c <HAL_GPIO_Init+0x2b4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8a:	e02c      	b.n	8001ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e029      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e024      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e01f      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	330c      	adds	r3, #12
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e01a      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aba:	2304      	movs	r3, #4
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e013      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	611a      	str	r2, [r3, #16]
          break;
 8001ad2:	e009      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	615a      	str	r2, [r3, #20]
          break;
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          break;
 8001ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	@ 0xff
 8001aec:	d801      	bhi.n	8001af2 <HAL_GPIO_Init+0x13a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_Init+0x13e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2bff      	cmp	r3, #255	@ 0xff
 8001afc:	d802      	bhi.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x152>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	3b08      	subs	r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	210f      	movs	r1, #15
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80b1 	beq.w	8001c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b38:	4b4d      	ldr	r3, [pc, #308]	@ (8001c70 <HAL_GPIO_Init+0x2b8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c70 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <HAL_GPIO_Init+0x2b8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b50:	4a48      	ldr	r2, [pc, #288]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a40      	ldr	r2, [pc, #256]	@ (8001c78 <HAL_GPIO_Init+0x2c0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_GPIO_Init+0x1ec>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c7c <HAL_GPIO_Init+0x2c4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3e      	ldr	r2, [pc, #248]	@ (8001c80 <HAL_GPIO_Init+0x2c8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x1e4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_GPIO_Init+0x1e0>
 8001b94:	2303      	movs	r3, #3
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb6:	492f      	ldr	r1, [pc, #188]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	492c      	ldr	r1, [pc, #176]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bde:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4928      	ldr	r1, [pc, #160]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf8:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4922      	ldr	r1, [pc, #136]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	491e      	ldr	r1, [pc, #120]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4918      	ldr	r1, [pc, #96]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4914      	ldr	r1, [pc, #80]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d021      	beq.n	8001c8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	490e      	ldr	r1, [pc, #56]	@ (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e021      	b.n	8001c9a <HAL_GPIO_Init+0x2e2>
 8001c56:	bf00      	nop
 8001c58:	10320000 	.word	0x10320000
 8001c5c:	10310000 	.word	0x10310000
 8001c60:	10220000 	.word	0x10220000
 8001c64:	10210000 	.word	0x10210000
 8001c68:	10120000 	.word	0x10120000
 8001c6c:	10110000 	.word	0x10110000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	40011000 	.word	0x40011000
 8001c84:	40011400 	.word	0x40011400
 8001c88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_GPIO_Init+0x304>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4909      	ldr	r1, [pc, #36]	@ (8001cbc <HAL_GPIO_Init+0x304>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f47f ae8e 	bne.w	80019cc <HAL_GPIO_Init+0x14>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	372c      	adds	r7, #44	@ 0x2c
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfe:	787b      	ldrb	r3, [r7, #1]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d0a:	e003      	b.n	8001d14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	041a      	lsls	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e12b      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff f81a 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d84:	f001 fbf8 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a81      	ldr	r2, [pc, #516]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d807      	bhi.n	8001da4 <HAL_I2C_Init+0x84>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a80      	ldr	r2, [pc, #512]	@ (8001f98 <HAL_I2C_Init+0x278>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf94      	ite	ls
 8001d9c:	2301      	movls	r3, #1
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e006      	b.n	8001db2 <HAL_I2C_Init+0x92>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a7d      	ldr	r2, [pc, #500]	@ (8001f9c <HAL_I2C_Init+0x27c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf94      	ite	ls
 8001dac:	2301      	movls	r3, #1
 8001dae:	2300      	movhi	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0e7      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a78      	ldr	r2, [pc, #480]	@ (8001fa0 <HAL_I2C_Init+0x280>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d802      	bhi.n	8001df4 <HAL_I2C_Init+0xd4>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	e009      	b.n	8001e08 <HAL_I2C_Init+0xe8>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a69      	ldr	r2, [pc, #420]	@ (8001fa4 <HAL_I2C_Init+0x284>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	3301      	adds	r3, #1
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	495c      	ldr	r1, [pc, #368]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d819      	bhi.n	8001e5c <HAL_I2C_Init+0x13c>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e59      	subs	r1, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e3c:	400b      	ands	r3, r1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_I2C_Init+0x138>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e59      	subs	r1, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	e051      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e04f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d111      	bne.n	8001e88 <HAL_I2C_Init+0x168>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e012      	b.n	8001eae <HAL_I2C_Init+0x18e>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Init+0x196>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e022      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <HAL_I2C_Init+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e58      	subs	r0, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	440b      	add	r3, r1
 8001ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eda:	e00f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	6809      	ldr	r1, [r1, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6911      	ldr	r1, [r2, #16]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	000186a0 	.word	0x000186a0
 8001f98:	001e847f 	.word	0x001e847f
 8001f9c:	003d08ff 	.word	0x003d08ff
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	817b      	strh	r3, [r7, #10]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff f8d0 	bl	8001160 <HAL_GetTick>
 8001fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 80e0 	bne.w	8002190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2319      	movs	r3, #25
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4970      	ldr	r1, [pc, #448]	@ (800219c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fcc0 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0d3      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x50>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0cc      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d007      	beq.n	800201e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800202c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2221      	movs	r2, #33	@ 0x21
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2210      	movs	r2, #16
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	893a      	ldrh	r2, [r7, #8]
 800204e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a50      	ldr	r2, [pc, #320]	@ (80021a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fb10 	bl	800268c <I2C_MasterRequestWrite>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e08d      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800208c:	e066      	b.n	800215c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fd7e 	bl	8002b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d11b      	bne.n	8002130 <HAL_I2C_Master_Transmit+0x188>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d017      	beq.n	8002130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	6a39      	ldr	r1, [r7, #32]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fd75 	bl	8002c24 <I2C_WaitOnBTFFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e01a      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	d194      	bne.n	800208e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	00100002 	.word	0x00100002
 80021a0:	ffff0000 	.word	0xffff0000

080021a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c2:	f7fe ffcd 	bl	8001160 <HAL_GetTick>
 80021c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	f040 8250 	bne.w	8002676 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2319      	movs	r3, #25
 80021dc:	2201      	movs	r2, #1
 80021de:	4982      	ldr	r1, [pc, #520]	@ (80023e8 <HAL_I2C_Mem_Read+0x244>)
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fbbd 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
 80021ee:	e243      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Mem_Read+0x5a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e23c      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d007      	beq.n	8002224 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2222      	movs	r2, #34	@ 0x22
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a62      	ldr	r2, [pc, #392]	@ (80023ec <HAL_I2C_Mem_Read+0x248>)
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002266:	88f8      	ldrh	r0, [r7, #6]
 8002268:	893a      	ldrh	r2, [r7, #8]
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa8a 	bl	8002790 <I2C_RequestMemoryRead>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1f8      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d113      	bne.n	80022b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e1cc      	b.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d11e      	bne.n	80022fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ce:	b672      	cpsid	i
}
 80022d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022f8:	b662      	cpsie	i
}
 80022fa:	e035      	b.n	8002368 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	2b02      	cmp	r3, #2
 8002302:	d11e      	bne.n	8002342 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002312:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
}
 8002316:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800233e:	b662      	cpsie	i
}
 8002340:	e012      	b.n	8002368 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002350:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002368:	e172      	b.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236e:	2b03      	cmp	r3, #3
 8002370:	f200 811f 	bhi.w	80025b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	2b01      	cmp	r3, #1
 800237a:	d123      	bne.n	80023c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fc97 	bl	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e173      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023c2:	e145      	b.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d152      	bne.n	8002472 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d2:	2200      	movs	r2, #0
 80023d4:	4906      	ldr	r1, [pc, #24]	@ (80023f0 <HAL_I2C_Mem_Read+0x24c>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fac2 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e148      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
 80023e6:	bf00      	nop
 80023e8:	00100002 	.word	0x00100002
 80023ec:	ffff0000 	.word	0xffff0000
 80023f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
}
 80023f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800243a:	b662      	cpsie	i
}
 800243c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002470:	e0ee      	b.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002478:	2200      	movs	r2, #0
 800247a:	4981      	ldr	r1, [pc, #516]	@ (8002680 <HAL_I2C_Mem_Read+0x4dc>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fa6f 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0f5      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002684 <HAL_I2C_Mem_Read+0x4e0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	08db      	lsrs	r3, r3, #3
 80024d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <HAL_I2C_Mem_Read+0x4e4>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0a1a      	lsrs	r2, r3, #8
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d118      	bne.n	800252a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800251a:	b662      	cpsie	i
}
 800251c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0a6      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d1d9      	bne.n	80024ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800257a:	b662      	cpsie	i
}
 800257c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025b0:	e04e      	b.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb7c 	bl	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e058      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d124      	bne.n	8002650 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f ae88 	bne.w	800236a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	@ 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	00010004 	.word	0x00010004
 8002684:	20000000 	.word	0x20000000
 8002688:	14f8b589 	.word	0x14f8b589

0800268c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d006      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d003      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e00b      	b.n	80026e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d107      	bne.n	80026e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f937 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002706:	d103      	bne.n	8002710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e035      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800271c:	d108      	bne.n	8002730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e01b      	b.n	8002768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	11db      	asrs	r3, r3, #7
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 0306 	and.w	r3, r3, #6
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f063 030f 	orn	r3, r3, #15
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <I2C_MasterRequestWrite+0xfc>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f980 	bl	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e010      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <I2C_MasterRequestWrite+0x100>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f970 	bl	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	00010008 	.word	0x00010008
 800278c:	00010002 	.word	0x00010002

08002790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8c2 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f0:	d103      	bne.n	80027fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0aa      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800280c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	4952      	ldr	r1, [pc, #328]	@ (800295c <I2C_RequestMemoryRead+0x1cc>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f91d 	bl	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e097      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283c:	6a39      	ldr	r1, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f9a8 	bl	8002b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	2b04      	cmp	r3, #4
 8002850:	d107      	bne.n	8002862 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e076      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286c:	893b      	ldrh	r3, [r7, #8]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e021      	b.n	80028bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	b29b      	uxth	r3, r3
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f982 	bl	8002b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b04      	cmp	r3, #4
 800289c:	d107      	bne.n	80028ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e050      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b2:	893b      	ldrh	r3, [r7, #8]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f967 	bl	8002b94 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e035      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2200      	movs	r2, #0
 8002900:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f82b 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291e:	d103      	bne.n	8002928 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e013      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	4906      	ldr	r1, [pc, #24]	@ (800295c <I2C_RequestMemoryRead+0x1cc>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f886 	bl	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	00010002 	.word	0x00010002

08002960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002970:	e048      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d044      	beq.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7fe fbf1 	bl	8001160 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d302      	bcc.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d139      	bne.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10d      	bne.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	43da      	mvns	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	e00c      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	43da      	mvns	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d116      	bne.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e023      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10d      	bne.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	e00c      	b.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	43da      	mvns	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d093      	beq.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a62:	e071      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a72:	d123      	bne.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e067      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d041      	beq.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fb4c 	bl	8001160 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d136      	bne.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10c      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e00b      	b.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e021      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10c      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e00b      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f af6d 	bne.w	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba0:	e034      	b.n	8002c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8e3 	bl	8002d6e <I2C_IsAcknowledgeFailed>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e034      	b.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d028      	beq.n	8002c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7fe fad1 	bl	8001160 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11d      	bne.n	8002c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b80      	cmp	r3, #128	@ 0x80
 8002bdc:	d016      	beq.n	8002c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e007      	b.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b80      	cmp	r3, #128	@ 0x80
 8002c18:	d1c3      	bne.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c30:	e034      	b.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f89b 	bl	8002d6e <I2C_IsAcknowledgeFailed>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e034      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d028      	beq.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fa89 	bl	8001160 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d016      	beq.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d1c3      	bne.n	8002c32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc0:	e049      	b.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d119      	bne.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0210 	mvn.w	r2, #16
 8002cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e030      	b.n	8002d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fa2c 	bl	8001160 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11d      	bne.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d016      	beq.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e007      	b.n	8002d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b40      	cmp	r3, #64	@ 0x40
 8002d62:	d1ae      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d84:	d11b      	bne.n	8002dbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f043 0204 	orr.w	r2, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	420e0020 	.word	0x420e0020

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e272      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8087 	beq.w	8002f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e04:	4b92      	ldr	r3, [pc, #584]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d00c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e10:	4b8f      	ldr	r3, [pc, #572]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d112      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5e>
 8002e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e28:	d10b      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2a:	4b89      	ldr	r3, [pc, #548]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d06c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x12c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d168      	bne.n	8002f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e24c      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x76>
 8002e4c:	4b80      	ldr	r3, [pc, #512]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7f      	ldr	r2, [pc, #508]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	e02e      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b7b      	ldr	r3, [pc, #492]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7a      	ldr	r2, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b78      	ldr	r3, [pc, #480]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a77      	ldr	r2, [pc, #476]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xbc>
 8002e86:	4b72      	ldr	r3, [pc, #456]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a71      	ldr	r2, [pc, #452]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6e      	ldr	r2, [pc, #440]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b68      	ldr	r3, [pc, #416]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a67      	ldr	r2, [pc, #412]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f94e 	bl	8001160 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe f94a 	bl	8001160 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e200      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b5d      	ldr	r3, [pc, #372]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xe4>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f93a 	bl	8001160 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f936 	bl	8001160 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1ec      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x10c>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x18c>
 8002f36:	4b46      	ldr	r3, [pc, #280]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	4b43      	ldr	r3, [pc, #268]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x176>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1c0      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4939      	ldr	r1, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	e03a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f78:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f8ef 	bl	8001160 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fe f8eb 	bl	8001160 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e1a1      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4927      	ldr	r1, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f8ce 	bl	8001160 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fe f8ca 	bl	8001160 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e180      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03a      	beq.n	8003068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d019      	beq.n	800302e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe f8ae 	bl	8001160 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fe f8aa 	bl	8001160 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e160      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003026:	2001      	movs	r0, #1
 8003028:	f000 face 	bl	80035c8 <RCC_Delay>
 800302c:	e01c      	b.n	8003068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_RCC_OscConfig+0x274>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe f894 	bl	8001160 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303a:	e00f      	b.n	800305c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe f890 	bl	8001160 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d908      	bls.n	800305c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e146      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	42420000 	.word	0x42420000
 8003058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b92      	ldr	r3, [pc, #584]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e9      	bne.n	800303c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a6 	beq.w	80031c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b8b      	ldr	r3, [pc, #556]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b88      	ldr	r3, [pc, #544]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4a87      	ldr	r2, [pc, #540]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	61d3      	str	r3, [r2, #28]
 8003092:	4b85      	ldr	r3, [pc, #532]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b82      	ldr	r3, [pc, #520]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f851 	bl	8001160 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe f84d 	bl	8001160 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b64      	cmp	r3, #100	@ 0x64
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e103      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x312>
 80030e8:	4b6f      	ldr	r3, [pc, #444]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a6e      	ldr	r2, [pc, #440]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e02d      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x334>
 80030fe:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a69      	ldr	r2, [pc, #420]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a66      	ldr	r2, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	e01c      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x356>
 8003120:	4b61      	ldr	r3, [pc, #388]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a60      	ldr	r2, [pc, #384]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4b5e      	ldr	r3, [pc, #376]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a5d      	ldr	r2, [pc, #372]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e00b      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a5a      	ldr	r2, [pc, #360]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	4b58      	ldr	r3, [pc, #352]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a57      	ldr	r2, [pc, #348]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d015      	beq.n	8003186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe f801 	bl	8001160 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd fffd 	bl	8001160 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0b1      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	4b4b      	ldr	r3, [pc, #300]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ee      	beq.n	8003162 <HAL_RCC_OscConfig+0x37e>
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fd ffeb 	bl	8001160 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fd ffe7 	bl	8001160 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e09b      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a4:	4b40      	ldr	r3, [pc, #256]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b6:	4b3c      	ldr	r3, [pc, #240]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a3b      	ldr	r2, [pc, #236]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031cc:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d061      	beq.n	800329c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d146      	bne.n	800326e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b33      	ldr	r3, [pc, #204]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fd ffbb 	bl	8001160 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fd ffb7 	bl	8001160 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e06d      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d108      	bne.n	8003228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4921      	ldr	r1, [pc, #132]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003228:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a19      	ldr	r1, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	430b      	orrs	r3, r1
 800323a:	491b      	ldr	r1, [pc, #108]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fd ff8b 	bl	8001160 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fd ff87 	bl	8001160 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e03d      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x46a>
 800326c:	e035      	b.n	80032da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd ff74 	bl	8001160 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd ff70 	bl	8001160 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e026      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x498>
 800329a:	e01e      	b.n	80032da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e019      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_OscConfig+0x500>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0d0      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d910      	bls.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0207 	bic.w	r2, r3, #7
 8003312:	4965      	ldr	r1, [pc, #404]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b8      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003344:	4b59      	ldr	r3, [pc, #356]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800334e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800335c:	4b53      	ldr	r3, [pc, #332]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b50      	ldr	r3, [pc, #320]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	494d      	ldr	r1, [pc, #308]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d040      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d115      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e073      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06b      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b39      	ldr	r3, [pc, #228]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4936      	ldr	r1, [pc, #216]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fec2 	bl	8001160 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd febe 	bl	8001160 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e053      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b27      	ldr	r3, [pc, #156]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d210      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	4922      	ldr	r1, [pc, #136]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e032      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4916      	ldr	r1, [pc, #88]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003462:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	490e      	ldr	r1, [pc, #56]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003476:	f000 f821 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 800347a:	4602      	mov	r2, r0
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	490a      	ldr	r1, [pc, #40]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a09      	ldr	r2, [pc, #36]	@ (80034b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd fe20 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	080059a0 	.word	0x080059a0
 80034b4:	20000000 	.word	0x20000000
 80034b8:	20000004 	.word	0x20000004

080034bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x30>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ea:	e027      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ee:	613b      	str	r3, [r7, #16]
      break;
 80034f0:	e027      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0c5b      	lsrs	r3, r3, #17
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	4a11      	ldr	r2, [pc, #68]	@ (800355c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	fb03 f202 	mul.w	r2, r3, r2
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e004      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800353e:	613b      	str	r3, [r7, #16]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	693b      	ldr	r3, [r7, #16]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	007a1200 	.word	0x007a1200
 8003558:	080059b8 	.word	0x080059b8
 800355c:	080059c8 	.word	0x080059c8
 8003560:	003d0900 	.word	0x003d0900

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b02      	ldr	r3, [pc, #8]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x10>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	080059b0 	.word	0x080059b0

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffde 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	080059b0 	.word	0x080059b0

080035c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d0:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <RCC_Delay+0x34>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <RCC_Delay+0x38>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e4:	bf00      	nop
  }
  while (Delay --);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	60fa      	str	r2, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f9      	bne.n	80035e4 <RCC_Delay+0x1c>
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	20000000 	.word	0x20000000
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d07d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003624:	4b4f      	ldr	r3, [pc, #316]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10d      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	4b4c      	ldr	r3, [pc, #304]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4a4b      	ldr	r2, [pc, #300]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363a:	61d3      	str	r3, [r2, #28]
 800363c:	4b49      	ldr	r3, [pc, #292]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003648:	2301      	movs	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b46      	ldr	r3, [pc, #280]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d118      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003658:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a42      	ldr	r2, [pc, #264]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003664:	f7fd fd7c 	bl	8001160 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	e008      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fd fd78 	bl	8001160 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e06d      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b3a      	ldr	r3, [pc, #232]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800368a:	4b36      	ldr	r3, [pc, #216]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02e      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d027      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b2:	4b2e      	ldr	r3, [pc, #184]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036b8:	4b2c      	ldr	r3, [pc, #176]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036be:	4a29      	ldr	r2, [pc, #164]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fd47 	bl	8001160 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd fd43 	bl	8001160 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e036      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ee      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4917      	ldr	r1, [pc, #92]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	4313      	orrs	r3, r2
 8003708:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003728:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	490b      	ldr	r1, [pc, #44]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4904      	ldr	r1, [pc, #16]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	40007000 	.word	0x40007000
 800376c:	42420440 	.word	0x42420440

08003770 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b10      	cmp	r3, #16
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b10      	cmp	r3, #16
 8003796:	f200 808a 	bhi.w	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d045      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d075      	beq.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037a6:	e082      	b.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80037a8:	4b46      	ldr	r3, [pc, #280]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037ae:	4b45      	ldr	r3, [pc, #276]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d07b      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a41      	ldr	r2, [pc, #260]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d2:	4b3c      	ldr	r3, [pc, #240]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037ec:	4a38      	ldr	r2, [pc, #224]	@ (80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a34      	ldr	r2, [pc, #208]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003814:	d102      	bne.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	61bb      	str	r3, [r7, #24]
      break;
 800381a:	e04a      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4a2d      	ldr	r2, [pc, #180]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	61bb      	str	r3, [r7, #24]
      break;
 800382a:	e042      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800382c:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383c:	d108      	bne.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e01f      	b.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385a:	d109      	bne.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800385c:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003868:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e00f      	b.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800387a:	d11c      	bne.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003888:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800388c:	61bb      	str	r3, [r7, #24]
      break;
 800388e:	e012      	b.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003890:	e011      	b.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003892:	f7ff fe85 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0b9b      	lsrs	r3, r3, #14
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
      break;
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038b6:	bf00      	nop
    }
  }
  return (frequency);
 80038b8:	69bb      	ldr	r3, [r7, #24]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	080059cc 	.word	0x080059cc
 80038cc:	080059dc 	.word	0x080059dc
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	003d0900 	.word	0x003d0900
 80038d8:	aaaaaaab 	.word	0xaaaaaaab

080038dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07a      	b.n	80039e8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7c5b      	ldrb	r3, [r3, #17]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fa7c 	bl	8000e00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9be 	bl	8003c90 <HAL_RTC_WaitForSynchro>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e061      	b.n	80039e8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa77 	bl	8003e18 <RTC_EnterInitMode>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2204      	movs	r2, #4
 8003934:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e056      	b.n	80039e8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0207 	bic.w	r2, r2, #7
 8003948:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003952:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RTC_Init+0x114>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	4a26      	ldr	r2, [pc, #152]	@ (80039f0 <HAL_RTC_Init+0x114>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800395e:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RTC_Init+0x114>)
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4921      	ldr	r1, [pc, #132]	@ (80039f0 <HAL_RTC_Init+0x114>)
 800396c:	4313      	orrs	r3, r2
 800396e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d003      	beq.n	8003982 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e00e      	b.n	80039a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003982:	2001      	movs	r0, #1
 8003984:	f7ff fef4 	bl	8003770 <HAL_RCCEx_GetPeriphCLKFreq>
 8003988:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e026      	b.n	80039e8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0c1a      	lsrs	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 020f 	and.w	r2, r2, #15
 80039ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	b292      	uxth	r2, r2
 80039b6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa55 	bl	8003e68 <RTC_ExitInitMode>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00c      	b.n	80039e8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40006c00 	.word	0x40006c00

080039f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RTC_SetTime+0x20>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e080      	b.n	8003b1a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	7c1b      	ldrb	r3, [r3, #16]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_RTC_SetTime+0x30>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e07a      	b.n	8003b1a <HAL_RTC_SetTime+0x126>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a5b      	subs	r3, r3, r1
 8003a50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e01e      	b.n	8003a9c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fa28 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a70:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fa1d 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a8a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	789b      	ldrb	r3, [r3, #2]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fa11 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003a96:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a98:	4423      	add	r3, r4
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a9c:	6979      	ldr	r1, [r7, #20]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f953 	bl	8003d4a <RTC_WriteTimeCounter>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2204      	movs	r2, #4
 8003aae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02f      	b.n	8003b1a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0205 	bic.w	r2, r2, #5
 8003ac8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f964 	bl	8003d98 <RTC_ReadAlarmCounter>
 8003ad0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d018      	beq.n	8003b0c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d214      	bcs.n	8003b0c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003ae8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003aec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f96a 	bl	8003dca <RTC_WriteAlarmCounter>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2204      	movs	r2, #4
 8003b00:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e006      	b.n	8003b1a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
	...

08003b24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RTC_SetDate+0x24>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e097      	b.n	8003c7c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	7c1b      	ldrb	r3, [r3, #16]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_RTC_SetDate+0x34>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e091      	b.n	8003c7c <HAL_RTC_SetDate+0x158>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10c      	bne.n	8003b84 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	78da      	ldrb	r2, [r3, #3]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785a      	ldrb	r2, [r3, #1]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	789a      	ldrb	r2, [r3, #2]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	739a      	strb	r2, [r3, #14]
 8003b82:	e01a      	b.n	8003bba <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	78db      	ldrb	r3, [r3, #3]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f995 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f98c 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	789b      	ldrb	r3, [r3, #2]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f983 	bl	8003eb8 <RTC_Bcd2ToByte>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	7bdb      	ldrb	r3, [r3, #15]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	7b59      	ldrb	r1, [r3, #13]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	7b9b      	ldrb	r3, [r3, #14]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f000 f993 	bl	8003ef4 <RTC_WeekDayNum>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	7b1a      	ldrb	r2, [r3, #12]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f883 	bl	8003cea <RTC_ReadTimeCounter>
 8003be4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4a26      	ldr	r2, [pc, #152]	@ (8003c84 <HAL_RTC_SetDate+0x160>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0adb      	lsrs	r3, r3, #11
 8003bf0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b18      	cmp	r3, #24
 8003bf6:	d93a      	bls.n	8003c6e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4a23      	ldr	r2, [pc, #140]	@ (8003c88 <HAL_RTC_SetDate+0x164>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_RTC_SetDate+0x168>)
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003c0e:	69f9      	ldr	r1, [r7, #28]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f89a 	bl	8003d4a <RTC_WriteTimeCounter>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e027      	b.n	8003c7c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f8b3 	bl	8003d98 <RTC_ReadAlarmCounter>
 8003c32:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d018      	beq.n	8003c6e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d214      	bcs.n	8003c6e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003c4a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003c4e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f8b9 	bl	8003dca <RTC_WriteAlarmCounter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2204      	movs	r2, #4
 8003c62:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e006      	b.n	8003c7c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	91a2b3c5 	.word	0x91a2b3c5
 8003c88:	aaaaaaab 	.word	0xaaaaaaab
 8003c8c:	00015180 	.word	0x00015180

08003c90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e01d      	b.n	8003ce2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0208 	bic.w	r2, r2, #8
 8003cb4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003cb6:	f7fd fa53 	bl	8001160 <HAL_GetTick>
 8003cba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003cbc:	e009      	b.n	8003cd2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003cbe:	f7fd fa4f 	bl	8001160 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e007      	b.n	8003ce2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	827b      	strh	r3, [r7, #18]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	823b      	strh	r3, [r7, #16]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003d1a:	8a7a      	ldrh	r2, [r7, #18]
 8003d1c:	8a3b      	ldrh	r3, [r7, #16]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d008      	beq.n	8003d34 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003d22:	8a3b      	ldrh	r3, [r7, #16]
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e004      	b.n	8003d3e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003d34:	8a7b      	ldrh	r3, [r7, #18]
 8003d36:	041a      	lsls	r2, r3, #16
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f85d 	bl	8003e18 <RTC_EnterInitMode>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e011      	b.n	8003d8e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	0c12      	lsrs	r2, r2, #16
 8003d72:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f872 	bl	8003e68 <RTC_ExitInitMode>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	81fb      	strh	r3, [r7, #14]
 8003da4:	2300      	movs	r3, #0
 8003da6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	041a      	lsls	r2, r3, #16
 8003dbc:	89bb      	ldrh	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f81d 	bl	8003e18 <RTC_EnterInitMode>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	e011      	b.n	8003e0e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	0c12      	lsrs	r2, r2, #16
 8003df2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f832 	bl	8003e68 <RTC_ExitInitMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003e24:	f7fd f99c 	bl	8001160 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e2a:	e009      	b.n	8003e40 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e2c:	f7fd f998 	bl	8001160 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e3a:	d901      	bls.n	8003e40 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e00f      	b.n	8003e60 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0210 	orr.w	r2, r2, #16
 8003e5c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e84:	f7fd f96c 	bl	8001160 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e8a:	e009      	b.n	8003ea0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e8c:	f7fd f968 	bl	8001160 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e9a:	d901      	bls.n	8003ea0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e007      	b.n	8003eb0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ee      	beq.n	8003e8c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	b2db      	uxtb	r3, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
	...

08003ef4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
 8003f00:	4613      	mov	r3, r2
 8003f02:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003f12:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d82d      	bhi.n	8003f76 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd8 <RTC_WeekDayNum+0xe4>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	085a      	lsrs	r2, r3, #1
 8003f2e:	78bb      	ldrb	r3, [r7, #2]
 8003f30:	441a      	add	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	441a      	add	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	4926      	ldr	r1, [pc, #152]	@ (8003fdc <RTC_WeekDayNum+0xe8>)
 8003f44:	fba1 1303 	umull	r1, r3, r1, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	4922      	ldr	r1, [pc, #136]	@ (8003fdc <RTC_WeekDayNum+0xe8>)
 8003f52:	fba1 1303 	umull	r1, r3, r1, r3
 8003f56:	09db      	lsrs	r3, r3, #7
 8003f58:	4413      	add	r3, r2
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <RTC_WeekDayNum+0xec>)
 8003f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f62:	1ad1      	subs	r1, r2, r3
 8003f64:	0849      	lsrs	r1, r1, #1
 8003f66:	440b      	add	r3, r1
 8003f68:	0899      	lsrs	r1, r3, #2
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	1a5b      	subs	r3, r3, r1
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e029      	b.n	8003fca <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <RTC_WeekDayNum+0xe4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	085a      	lsrs	r2, r3, #1
 8003f8a:	78bb      	ldrb	r3, [r7, #2]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	441a      	add	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4910      	ldr	r1, [pc, #64]	@ (8003fdc <RTC_WeekDayNum+0xe8>)
 8003f9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	490d      	ldr	r1, [pc, #52]	@ (8003fdc <RTC_WeekDayNum+0xe8>)
 8003fa8:	fba1 1303 	umull	r1, r3, r1, r3
 8003fac:	09db      	lsrs	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <RTC_WeekDayNum+0xec>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	1ad1      	subs	r1, r2, r3
 8003fba:	0849      	lsrs	r1, r1, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0899      	lsrs	r1, r3, #2
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a5b      	subs	r3, r3, r1
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	b2db      	uxtb	r3, r3
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	38e38e39 	.word	0x38e38e39
 8003fdc:	51eb851f 	.word	0x51eb851f
 8003fe0:	24924925 	.word	0x24924925

08003fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e076      	b.n	80040e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	e005      	b.n	800401c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc ff06 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0c1a      	lsrs	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 0204 	and.w	r2, r2, #4
 80040c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fd f830 	bl	8001160 <HAL_GetTick>
 8004100:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d001      	beq.n	8004116 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	e12a      	b.n	800436c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_SPI_Transmit+0x36>
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e122      	b.n	800436c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_SPI_Transmit+0x48>
 8004130:	2302      	movs	r3, #2
 8004132:	e11b      	b.n	800436c <HAL_SPI_Transmit+0x280>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2203      	movs	r2, #3
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004182:	d10f      	bne.n	80041a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b40      	cmp	r3, #64	@ 0x40
 80041b0:	d007      	beq.n	80041c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ca:	d152      	bne.n	8004272 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_Transmit+0xee>
 80041d4:	8b7b      	ldrh	r3, [r7, #26]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d145      	bne.n	8004266 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	1c9a      	adds	r2, r3, #2
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041fe:	e032      	b.n	8004266 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d112      	bne.n	8004234 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004232:	e018      	b.n	8004266 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004234:	f7fc ff94 	bl	8001160 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d803      	bhi.n	800424c <HAL_SPI_Transmit+0x160>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d102      	bne.n	8004252 <HAL_SPI_Transmit+0x166>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e082      	b.n	800436c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1c7      	bne.n	8004200 <HAL_SPI_Transmit+0x114>
 8004270:	e053      	b.n	800431a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x194>
 800427a:	8b7b      	ldrh	r3, [r7, #26]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d147      	bne.n	8004310 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042a6:	e033      	b.n	8004310 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d113      	bne.n	80042de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042dc:	e018      	b.n	8004310 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042de:	f7fc ff3f 	bl	8001160 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d803      	bhi.n	80042f6 <HAL_SPI_Transmit+0x20a>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d102      	bne.n	80042fc <HAL_SPI_Transmit+0x210>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e02d      	b.n	800436c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1c6      	bne.n	80042a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fbc4 	bl	8004aac <SPI_EndRxTxTransaction>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
 8004392:	e104      	b.n	800459e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800439c:	d112      	bne.n	80043c4 <HAL_SPI_Receive+0x50>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10e      	bne.n	80043c4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2204      	movs	r2, #4
 80043aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8f3 	bl	80045a6 <HAL_SPI_TransmitReceive>
 80043c0:	4603      	mov	r3, r0
 80043c2:	e0ec      	b.n	800459e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c4:	f7fc fecc 	bl	8001160 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_Receive+0x62>
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0e1      	b.n	800459e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_SPI_Receive+0x74>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0da      	b.n	800459e <HAL_SPI_Receive+0x22a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2204      	movs	r2, #4
 80043f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004436:	d10f      	bne.n	8004458 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d007      	beq.n	8004476 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d170      	bne.n	8004560 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800447e:	e035      	b.n	80044ec <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d115      	bne.n	80044ba <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f103 020c 	add.w	r2, r3, #12
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044b8:	e018      	b.n	80044ec <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ba:	f7fc fe51 	bl	8001160 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d803      	bhi.n	80044d2 <HAL_SPI_Receive+0x15e>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Receive+0x164>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e058      	b.n	800459e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1c4      	bne.n	8004480 <HAL_SPI_Receive+0x10c>
 80044f6:	e038      	b.n	800456a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d113      	bne.n	800452e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	b292      	uxth	r2, r2
 8004512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800452c:	e018      	b.n	8004560 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800452e:	f7fc fe17 	bl	8001160 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d803      	bhi.n	8004546 <HAL_SPI_Receive+0x1d2>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d102      	bne.n	800454c <HAL_SPI_Receive+0x1d8>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e01e      	b.n	800459e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1c6      	bne.n	80044f8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa4a 	bl	8004a08 <SPI_EndRxTransaction>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800459c:	2300      	movs	r3, #0
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08a      	sub	sp, #40	@ 0x28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b8:	f7fc fdd2 	bl	8001160 <HAL_GetTick>
 80045bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d00c      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x4a>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045dc:	d106      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x46>
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d001      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
 80045ee:	e17f      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x5c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x5c>
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e174      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x6e>
 8004610:	2302      	movs	r3, #2
 8004612:	e16d      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b04      	cmp	r3, #4
 8004626:	d003      	beq.n	8004630 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2205      	movs	r2, #5
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468c:	d17e      	bne.n	800478c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_TransmitReceive+0xf6>
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d16c      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c0:	e059      	b.n	8004776 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d11b      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x162>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x162>
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d113      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d119      	bne.n	800474a <HAL_SPI_TransmitReceive+0x1a4>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472a:	b292      	uxth	r2, r2
 800472c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004746:	2301      	movs	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800474a:	f7fc fd09 	bl	8001160 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004756:	429a      	cmp	r2, r3
 8004758:	d80d      	bhi.n	8004776 <HAL_SPI_TransmitReceive+0x1d0>
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d009      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0bc      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1a0      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x11c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d19b      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x11c>
 800478a:	e082      	b.n	8004892 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_TransmitReceive+0x1f4>
 8004794:	8afb      	ldrh	r3, [r7, #22]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d171      	bne.n	800487e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c0:	e05d      	b.n	800487e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d11c      	bne.n	800480a <HAL_SPI_TransmitReceive+0x264>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d017      	beq.n	800480a <HAL_SPI_TransmitReceive+0x264>
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d114      	bne.n	800480a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d119      	bne.n	800484c <HAL_SPI_TransmitReceive+0x2a6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484c:	f7fc fc88 	bl	8001160 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004858:	429a      	cmp	r2, r3
 800485a:	d803      	bhi.n	8004864 <HAL_SPI_TransmitReceive+0x2be>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d102      	bne.n	800486a <HAL_SPI_TransmitReceive+0x2c4>
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e038      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d19c      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x21c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d197      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004892:	6a3a      	ldr	r2, [r7, #32]
 8004894:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f908 	bl	8004aac <SPI_EndRxTxTransaction>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e01d      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	@ 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004908:	f7fc fc2a 	bl	8001160 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	4413      	add	r3, r2
 8004916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004918:	f7fc fc22 	bl	8001160 <HAL_GetTick>
 800491c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800491e:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	015b      	lsls	r3, r3, #5
 8004924:	0d1b      	lsrs	r3, r3, #20
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800492e:	e054      	b.n	80049da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d050      	beq.n	80049da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004938:	f7fc fc12 	bl	8001160 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	429a      	cmp	r2, r3
 8004946:	d902      	bls.n	800494e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d13d      	bne.n	80049ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800495c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004966:	d111      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004970:	d004      	beq.n	800497c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d107      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800498a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004994:	d10f      	bne.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e017      	b.n	80049fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d19b      	bne.n	8004930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000

08004a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1c:	d111      	bne.n	8004a42 <SPI_EndRxTransaction+0x3a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a26:	d004      	beq.n	8004a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d107      	bne.n	8004a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a40:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4a:	d117      	bne.n	8004a7c <SPI_EndRxTransaction+0x74>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a54:	d112      	bne.n	8004a7c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2101      	movs	r1, #1
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff ff49 	bl	80048f8 <SPI_WaitFlagStateUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01a      	beq.n	8004aa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e013      	b.n	8004aa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2180      	movs	r1, #128	@ 0x80
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff36 	bl	80048f8 <SPI_WaitFlagStateUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e000      	b.n	8004aa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff ff18 	bl	80048f8 <SPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e013      	b.n	8004b06 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ff05 	bl	80048f8 <SPI_WaitFlagStateUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e000      	b.n	8004b06 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e042      	b.n	8004ba6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc f9e1 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2224      	movs	r2, #36	@ 0x24
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f972 	bl	8004e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b08a      	sub	sp, #40	@ 0x28
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d175      	bne.n	8004cba <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_UART_Transmit+0x2c>
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06e      	b.n	8004cbc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2221      	movs	r2, #33	@ 0x21
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bec:	f7fc fab8 	bl	8001160 <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c06:	d108      	bne.n	8004c1a <HAL_UART_Transmit+0x6c>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e003      	b.n	8004c22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c22:	e02e      	b.n	8004c82 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2180      	movs	r1, #128	@ 0x80
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f848 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03a      	b.n	8004cbc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e007      	b.n	8004c74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1cb      	bne.n	8004c24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f814 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e006      	b.n	8004cbc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd4:	e03b      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d037      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fc fa3f 	bl	8001160 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e03a      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d023      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b80      	cmp	r3, #128	@ 0x80
 8004d0a:	d020      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b40      	cmp	r3, #64	@ 0x40
 8004d10:	d01d      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d116      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f81d 	bl	8004d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00f      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d0b4      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b095      	sub	sp, #84	@ 0x54
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3314      	adds	r3, #20
 8004dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d119      	bne.n	8004e22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e0e:	61ba      	str	r2, [r7, #24]
 8004e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e30:	bf00      	nop
 8004e32:	3754      	adds	r7, #84	@ 0x54
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
	...

08004e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e76:	f023 030c 	bic.w	r3, r3, #12
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f50 <UART_SetConfig+0x114>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fb7c 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	e002      	b.n	8004eb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fb64 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009a      	lsls	r2, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <UART_SetConfig+0x118>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	0119      	lsls	r1, r3, #4
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f54 <UART_SetConfig+0x118>)
 8004eea:	fba3 0302 	umull	r0, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2064      	movs	r0, #100	@ 0x64
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <UART_SetConfig+0x118>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f08:	4419      	add	r1, r3
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009a      	lsls	r2, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <UART_SetConfig+0x118>)
 8004f22:	fba3 0302 	umull	r0, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2064      	movs	r0, #100	@ 0x64
 8004f2a:	fb00 f303 	mul.w	r3, r0, r3
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	@ 0x32
 8004f34:	4a07      	ldr	r2, [pc, #28]	@ (8004f54 <UART_SetConfig+0x118>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	440a      	add	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40013800 	.word	0x40013800
 8004f54:	51eb851f 	.word	0x51eb851f

08004f58 <siprintf>:
 8004f58:	b40e      	push	{r1, r2, r3}
 8004f5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	2400      	movs	r4, #0
 8004f62:	b09d      	sub	sp, #116	@ 0x74
 8004f64:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004f66:	9002      	str	r0, [sp, #8]
 8004f68:	9006      	str	r0, [sp, #24]
 8004f6a:	9107      	str	r1, [sp, #28]
 8004f6c:	9104      	str	r1, [sp, #16]
 8004f6e:	4809      	ldr	r0, [pc, #36]	@ (8004f94 <siprintf+0x3c>)
 8004f70:	4909      	ldr	r1, [pc, #36]	@ (8004f98 <siprintf+0x40>)
 8004f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f76:	9105      	str	r1, [sp, #20]
 8004f78:	6800      	ldr	r0, [r0, #0]
 8004f7a:	a902      	add	r1, sp, #8
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004f80:	f000 f9a4 	bl	80052cc <_svfiprintf_r>
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	701c      	strb	r4, [r3, #0]
 8004f88:	b01d      	add	sp, #116	@ 0x74
 8004f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f8e:	b003      	add	sp, #12
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	ffff0208 	.word	0xffff0208

08004f9c <memset>:
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <strncmp>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	b16a      	cbz	r2, 8004fcc <strncmp+0x20>
 8004fb0:	3901      	subs	r1, #1
 8004fb2:	1884      	adds	r4, r0, r2
 8004fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d103      	bne.n	8004fc8 <strncmp+0x1c>
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d001      	beq.n	8004fc8 <strncmp+0x1c>
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d1f5      	bne.n	8004fb4 <strncmp+0x8>
 8004fc8:	1ad0      	subs	r0, r2, r3
 8004fca:	bd10      	pop	{r4, pc}
 8004fcc:	4610      	mov	r0, r2
 8004fce:	e7fc      	b.n	8004fca <strncmp+0x1e>

08004fd0 <__errno>:
 8004fd0:	4b01      	ldr	r3, [pc, #4]	@ (8004fd8 <__errno+0x8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2000000c 	.word	0x2000000c

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	2600      	movs	r6, #0
 8004fe0:	4d0c      	ldr	r5, [pc, #48]	@ (8005014 <__libc_init_array+0x38>)
 8004fe2:	4c0d      	ldr	r4, [pc, #52]	@ (8005018 <__libc_init_array+0x3c>)
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	f000 fc76 	bl	80058dc <_init>
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	4d0a      	ldr	r5, [pc, #40]	@ (800501c <__libc_init_array+0x40>)
 8004ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8005020 <__libc_init_array+0x44>)
 8004ff6:	1b64      	subs	r4, r4, r5
 8004ff8:	10a4      	asrs	r4, r4, #2
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	08005a1c 	.word	0x08005a1c
 8005018:	08005a1c 	.word	0x08005a1c
 800501c:	08005a1c 	.word	0x08005a1c
 8005020:	08005a20 	.word	0x08005a20

08005024 <__retarget_lock_acquire_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_release_recursive>:
 8005026:	4770      	bx	lr

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d040      	beq.n	80050b2 <_free_r+0x8a>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 f8de 	bl	80051fc <__malloc_lock>
 8005040:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <_free_r+0x8c>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	b933      	cbnz	r3, 8005054 <_free_r+0x2c>
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005050:	f000 b8da 	b.w	8005208 <__malloc_unlock>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d908      	bls.n	800506a <_free_r+0x42>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	1821      	adds	r1, r4, r0
 800505c:	428b      	cmp	r3, r1
 800505e:	bf01      	itttt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	1809      	addeq	r1, r1, r0
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	e7ed      	b.n	8005046 <_free_r+0x1e>
 800506a:	461a      	mov	r2, r3
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b10b      	cbz	r3, 8005074 <_free_r+0x4c>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d9fa      	bls.n	800506a <_free_r+0x42>
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	1850      	adds	r0, r2, r1
 8005078:	42a0      	cmp	r0, r4
 800507a:	d10b      	bne.n	8005094 <_free_r+0x6c>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	4401      	add	r1, r0
 8005080:	1850      	adds	r0, r2, r1
 8005082:	4283      	cmp	r3, r0
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	d1e0      	bne.n	800504a <_free_r+0x22>
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4408      	add	r0, r1
 800508e:	6010      	str	r0, [r2, #0]
 8005090:	6053      	str	r3, [r2, #4]
 8005092:	e7da      	b.n	800504a <_free_r+0x22>
 8005094:	d902      	bls.n	800509c <_free_r+0x74>
 8005096:	230c      	movs	r3, #12
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	e7d6      	b.n	800504a <_free_r+0x22>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	1821      	adds	r1, r4, r0
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf01      	itttt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	1809      	addeq	r1, r1, r0
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	6054      	str	r4, [r2, #4]
 80050b0:	e7cb      	b.n	800504a <_free_r+0x22>
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	2000033c 	.word	0x2000033c

080050b8 <sbrk_aligned>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4e0f      	ldr	r6, [pc, #60]	@ (80050f8 <sbrk_aligned+0x40>)
 80050bc:	460c      	mov	r4, r1
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	4605      	mov	r5, r0
 80050c2:	b911      	cbnz	r1, 80050ca <sbrk_aligned+0x12>
 80050c4:	f000 fba8 	bl	8005818 <_sbrk_r>
 80050c8:	6030      	str	r0, [r6, #0]
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fba3 	bl	8005818 <_sbrk_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d103      	bne.n	80050de <sbrk_aligned+0x26>
 80050d6:	f04f 34ff 	mov.w	r4, #4294967295
 80050da:	4620      	mov	r0, r4
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	1cc4      	adds	r4, r0, #3
 80050e0:	f024 0403 	bic.w	r4, r4, #3
 80050e4:	42a0      	cmp	r0, r4
 80050e6:	d0f8      	beq.n	80050da <sbrk_aligned+0x22>
 80050e8:	1a21      	subs	r1, r4, r0
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fb94 	bl	8005818 <_sbrk_r>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d1f2      	bne.n	80050da <sbrk_aligned+0x22>
 80050f4:	e7ef      	b.n	80050d6 <sbrk_aligned+0x1e>
 80050f6:	bf00      	nop
 80050f8:	20000338 	.word	0x20000338

080050fc <_malloc_r>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	1ccd      	adds	r5, r1, #3
 8005102:	f025 0503 	bic.w	r5, r5, #3
 8005106:	3508      	adds	r5, #8
 8005108:	2d0c      	cmp	r5, #12
 800510a:	bf38      	it	cc
 800510c:	250c      	movcc	r5, #12
 800510e:	2d00      	cmp	r5, #0
 8005110:	4606      	mov	r6, r0
 8005112:	db01      	blt.n	8005118 <_malloc_r+0x1c>
 8005114:	42a9      	cmp	r1, r5
 8005116:	d904      	bls.n	8005122 <_malloc_r+0x26>
 8005118:	230c      	movs	r3, #12
 800511a:	6033      	str	r3, [r6, #0]
 800511c:	2000      	movs	r0, #0
 800511e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051f8 <_malloc_r+0xfc>
 8005126:	f000 f869 	bl	80051fc <__malloc_lock>
 800512a:	f8d8 3000 	ldr.w	r3, [r8]
 800512e:	461c      	mov	r4, r3
 8005130:	bb44      	cbnz	r4, 8005184 <_malloc_r+0x88>
 8005132:	4629      	mov	r1, r5
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff ffbf 	bl	80050b8 <sbrk_aligned>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	4604      	mov	r4, r0
 800513e:	d158      	bne.n	80051f2 <_malloc_r+0xf6>
 8005140:	f8d8 4000 	ldr.w	r4, [r8]
 8005144:	4627      	mov	r7, r4
 8005146:	2f00      	cmp	r7, #0
 8005148:	d143      	bne.n	80051d2 <_malloc_r+0xd6>
 800514a:	2c00      	cmp	r4, #0
 800514c:	d04b      	beq.n	80051e6 <_malloc_r+0xea>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	4639      	mov	r1, r7
 8005152:	4630      	mov	r0, r6
 8005154:	eb04 0903 	add.w	r9, r4, r3
 8005158:	f000 fb5e 	bl	8005818 <_sbrk_r>
 800515c:	4581      	cmp	r9, r0
 800515e:	d142      	bne.n	80051e6 <_malloc_r+0xea>
 8005160:	6821      	ldr	r1, [r4, #0]
 8005162:	4630      	mov	r0, r6
 8005164:	1a6d      	subs	r5, r5, r1
 8005166:	4629      	mov	r1, r5
 8005168:	f7ff ffa6 	bl	80050b8 <sbrk_aligned>
 800516c:	3001      	adds	r0, #1
 800516e:	d03a      	beq.n	80051e6 <_malloc_r+0xea>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	442b      	add	r3, r5
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	f8d8 3000 	ldr.w	r3, [r8]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	bb62      	cbnz	r2, 80051d8 <_malloc_r+0xdc>
 800517e:	f8c8 7000 	str.w	r7, [r8]
 8005182:	e00f      	b.n	80051a4 <_malloc_r+0xa8>
 8005184:	6822      	ldr	r2, [r4, #0]
 8005186:	1b52      	subs	r2, r2, r5
 8005188:	d420      	bmi.n	80051cc <_malloc_r+0xd0>
 800518a:	2a0b      	cmp	r2, #11
 800518c:	d917      	bls.n	80051be <_malloc_r+0xc2>
 800518e:	1961      	adds	r1, r4, r5
 8005190:	42a3      	cmp	r3, r4
 8005192:	6025      	str	r5, [r4, #0]
 8005194:	bf18      	it	ne
 8005196:	6059      	strne	r1, [r3, #4]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	bf08      	it	eq
 800519c:	f8c8 1000 	streq.w	r1, [r8]
 80051a0:	5162      	str	r2, [r4, r5]
 80051a2:	604b      	str	r3, [r1, #4]
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 f82f 	bl	8005208 <__malloc_unlock>
 80051aa:	f104 000b 	add.w	r0, r4, #11
 80051ae:	1d23      	adds	r3, r4, #4
 80051b0:	f020 0007 	bic.w	r0, r0, #7
 80051b4:	1ac2      	subs	r2, r0, r3
 80051b6:	bf1c      	itt	ne
 80051b8:	1a1b      	subne	r3, r3, r0
 80051ba:	50a3      	strne	r3, [r4, r2]
 80051bc:	e7af      	b.n	800511e <_malloc_r+0x22>
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	bf0c      	ite	eq
 80051c4:	f8c8 2000 	streq.w	r2, [r8]
 80051c8:	605a      	strne	r2, [r3, #4]
 80051ca:	e7eb      	b.n	80051a4 <_malloc_r+0xa8>
 80051cc:	4623      	mov	r3, r4
 80051ce:	6864      	ldr	r4, [r4, #4]
 80051d0:	e7ae      	b.n	8005130 <_malloc_r+0x34>
 80051d2:	463c      	mov	r4, r7
 80051d4:	687f      	ldr	r7, [r7, #4]
 80051d6:	e7b6      	b.n	8005146 <_malloc_r+0x4a>
 80051d8:	461a      	mov	r2, r3
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d1fb      	bne.n	80051d8 <_malloc_r+0xdc>
 80051e0:	2300      	movs	r3, #0
 80051e2:	6053      	str	r3, [r2, #4]
 80051e4:	e7de      	b.n	80051a4 <_malloc_r+0xa8>
 80051e6:	230c      	movs	r3, #12
 80051e8:	4630      	mov	r0, r6
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	f000 f80c 	bl	8005208 <__malloc_unlock>
 80051f0:	e794      	b.n	800511c <_malloc_r+0x20>
 80051f2:	6005      	str	r5, [r0, #0]
 80051f4:	e7d6      	b.n	80051a4 <_malloc_r+0xa8>
 80051f6:	bf00      	nop
 80051f8:	2000033c 	.word	0x2000033c

080051fc <__malloc_lock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <__malloc_lock+0x8>)
 80051fe:	f7ff bf11 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8005202:	bf00      	nop
 8005204:	20000334 	.word	0x20000334

08005208 <__malloc_unlock>:
 8005208:	4801      	ldr	r0, [pc, #4]	@ (8005210 <__malloc_unlock+0x8>)
 800520a:	f7ff bf0c 	b.w	8005026 <__retarget_lock_release_recursive>
 800520e:	bf00      	nop
 8005210:	20000334 	.word	0x20000334

08005214 <__ssputs_r>:
 8005214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	461f      	mov	r7, r3
 800521a:	688e      	ldr	r6, [r1, #8]
 800521c:	4682      	mov	sl, r0
 800521e:	42be      	cmp	r6, r7
 8005220:	460c      	mov	r4, r1
 8005222:	4690      	mov	r8, r2
 8005224:	680b      	ldr	r3, [r1, #0]
 8005226:	d82d      	bhi.n	8005284 <__ssputs_r+0x70>
 8005228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800522c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005230:	d026      	beq.n	8005280 <__ssputs_r+0x6c>
 8005232:	6965      	ldr	r5, [r4, #20]
 8005234:	6909      	ldr	r1, [r1, #16]
 8005236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800523a:	eba3 0901 	sub.w	r9, r3, r1
 800523e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005242:	1c7b      	adds	r3, r7, #1
 8005244:	444b      	add	r3, r9
 8005246:	106d      	asrs	r5, r5, #1
 8005248:	429d      	cmp	r5, r3
 800524a:	bf38      	it	cc
 800524c:	461d      	movcc	r5, r3
 800524e:	0553      	lsls	r3, r2, #21
 8005250:	d527      	bpl.n	80052a2 <__ssputs_r+0x8e>
 8005252:	4629      	mov	r1, r5
 8005254:	f7ff ff52 	bl	80050fc <_malloc_r>
 8005258:	4606      	mov	r6, r0
 800525a:	b360      	cbz	r0, 80052b6 <__ssputs_r+0xa2>
 800525c:	464a      	mov	r2, r9
 800525e:	6921      	ldr	r1, [r4, #16]
 8005260:	f000 faf8 	bl	8005854 <memcpy>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800526a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	6126      	str	r6, [r4, #16]
 8005272:	444e      	add	r6, r9
 8005274:	6026      	str	r6, [r4, #0]
 8005276:	463e      	mov	r6, r7
 8005278:	6165      	str	r5, [r4, #20]
 800527a:	eba5 0509 	sub.w	r5, r5, r9
 800527e:	60a5      	str	r5, [r4, #8]
 8005280:	42be      	cmp	r6, r7
 8005282:	d900      	bls.n	8005286 <__ssputs_r+0x72>
 8005284:	463e      	mov	r6, r7
 8005286:	4632      	mov	r2, r6
 8005288:	4641      	mov	r1, r8
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	f000 faaa 	bl	80057e4 <memmove>
 8005290:	2000      	movs	r0, #0
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	1b9b      	subs	r3, r3, r6
 8005296:	60a3      	str	r3, [r4, #8]
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	4433      	add	r3, r6
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a2:	462a      	mov	r2, r5
 80052a4:	f000 fae4 	bl	8005870 <_realloc_r>
 80052a8:	4606      	mov	r6, r0
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d1e0      	bne.n	8005270 <__ssputs_r+0x5c>
 80052ae:	4650      	mov	r0, sl
 80052b0:	6921      	ldr	r1, [r4, #16]
 80052b2:	f7ff feb9 	bl	8005028 <_free_r>
 80052b6:	230c      	movs	r3, #12
 80052b8:	f8ca 3000 	str.w	r3, [sl]
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c6:	81a3      	strh	r3, [r4, #12]
 80052c8:	e7e9      	b.n	800529e <__ssputs_r+0x8a>
	...

080052cc <_svfiprintf_r>:
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	4698      	mov	r8, r3
 80052d2:	898b      	ldrh	r3, [r1, #12]
 80052d4:	4607      	mov	r7, r0
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	460d      	mov	r5, r1
 80052da:	4614      	mov	r4, r2
 80052dc:	b09d      	sub	sp, #116	@ 0x74
 80052de:	d510      	bpl.n	8005302 <_svfiprintf_r+0x36>
 80052e0:	690b      	ldr	r3, [r1, #16]
 80052e2:	b973      	cbnz	r3, 8005302 <_svfiprintf_r+0x36>
 80052e4:	2140      	movs	r1, #64	@ 0x40
 80052e6:	f7ff ff09 	bl	80050fc <_malloc_r>
 80052ea:	6028      	str	r0, [r5, #0]
 80052ec:	6128      	str	r0, [r5, #16]
 80052ee:	b930      	cbnz	r0, 80052fe <_svfiprintf_r+0x32>
 80052f0:	230c      	movs	r3, #12
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	b01d      	add	sp, #116	@ 0x74
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	2340      	movs	r3, #64	@ 0x40
 8005300:	616b      	str	r3, [r5, #20]
 8005302:	2300      	movs	r3, #0
 8005304:	9309      	str	r3, [sp, #36]	@ 0x24
 8005306:	2320      	movs	r3, #32
 8005308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800530c:	2330      	movs	r3, #48	@ 0x30
 800530e:	f04f 0901 	mov.w	r9, #1
 8005312:	f8cd 800c 	str.w	r8, [sp, #12]
 8005316:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80054b0 <_svfiprintf_r+0x1e4>
 800531a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800531e:	4623      	mov	r3, r4
 8005320:	469a      	mov	sl, r3
 8005322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005326:	b10a      	cbz	r2, 800532c <_svfiprintf_r+0x60>
 8005328:	2a25      	cmp	r2, #37	@ 0x25
 800532a:	d1f9      	bne.n	8005320 <_svfiprintf_r+0x54>
 800532c:	ebba 0b04 	subs.w	fp, sl, r4
 8005330:	d00b      	beq.n	800534a <_svfiprintf_r+0x7e>
 8005332:	465b      	mov	r3, fp
 8005334:	4622      	mov	r2, r4
 8005336:	4629      	mov	r1, r5
 8005338:	4638      	mov	r0, r7
 800533a:	f7ff ff6b 	bl	8005214 <__ssputs_r>
 800533e:	3001      	adds	r0, #1
 8005340:	f000 80a7 	beq.w	8005492 <_svfiprintf_r+0x1c6>
 8005344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005346:	445a      	add	r2, fp
 8005348:	9209      	str	r2, [sp, #36]	@ 0x24
 800534a:	f89a 3000 	ldrb.w	r3, [sl]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 809f 	beq.w	8005492 <_svfiprintf_r+0x1c6>
 8005354:	2300      	movs	r3, #0
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800535e:	f10a 0a01 	add.w	sl, sl, #1
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	9307      	str	r3, [sp, #28]
 8005366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800536a:	931a      	str	r3, [sp, #104]	@ 0x68
 800536c:	4654      	mov	r4, sl
 800536e:	2205      	movs	r2, #5
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	484e      	ldr	r0, [pc, #312]	@ (80054b0 <_svfiprintf_r+0x1e4>)
 8005376:	f000 fa5f 	bl	8005838 <memchr>
 800537a:	9a04      	ldr	r2, [sp, #16]
 800537c:	b9d8      	cbnz	r0, 80053b6 <_svfiprintf_r+0xea>
 800537e:	06d0      	lsls	r0, r2, #27
 8005380:	bf44      	itt	mi
 8005382:	2320      	movmi	r3, #32
 8005384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005388:	0711      	lsls	r1, r2, #28
 800538a:	bf44      	itt	mi
 800538c:	232b      	movmi	r3, #43	@ 0x2b
 800538e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005392:	f89a 3000 	ldrb.w	r3, [sl]
 8005396:	2b2a      	cmp	r3, #42	@ 0x2a
 8005398:	d015      	beq.n	80053c6 <_svfiprintf_r+0xfa>
 800539a:	4654      	mov	r4, sl
 800539c:	2000      	movs	r0, #0
 800539e:	f04f 0c0a 	mov.w	ip, #10
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	4621      	mov	r1, r4
 80053a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053aa:	3b30      	subs	r3, #48	@ 0x30
 80053ac:	2b09      	cmp	r3, #9
 80053ae:	d94b      	bls.n	8005448 <_svfiprintf_r+0x17c>
 80053b0:	b1b0      	cbz	r0, 80053e0 <_svfiprintf_r+0x114>
 80053b2:	9207      	str	r2, [sp, #28]
 80053b4:	e014      	b.n	80053e0 <_svfiprintf_r+0x114>
 80053b6:	eba0 0308 	sub.w	r3, r0, r8
 80053ba:	fa09 f303 	lsl.w	r3, r9, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	46a2      	mov	sl, r4
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	e7d2      	b.n	800536c <_svfiprintf_r+0xa0>
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	1d19      	adds	r1, r3, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	9103      	str	r1, [sp, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfbb      	ittet	lt
 80053d2:	425b      	neglt	r3, r3
 80053d4:	f042 0202 	orrlt.w	r2, r2, #2
 80053d8:	9307      	strge	r3, [sp, #28]
 80053da:	9307      	strlt	r3, [sp, #28]
 80053dc:	bfb8      	it	lt
 80053de:	9204      	strlt	r2, [sp, #16]
 80053e0:	7823      	ldrb	r3, [r4, #0]
 80053e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053e4:	d10a      	bne.n	80053fc <_svfiprintf_r+0x130>
 80053e6:	7863      	ldrb	r3, [r4, #1]
 80053e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ea:	d132      	bne.n	8005452 <_svfiprintf_r+0x186>
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	3402      	adds	r4, #2
 80053f0:	1d1a      	adds	r2, r3, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	9203      	str	r2, [sp, #12]
 80053f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053fa:	9305      	str	r3, [sp, #20]
 80053fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80054b4 <_svfiprintf_r+0x1e8>
 8005400:	2203      	movs	r2, #3
 8005402:	4650      	mov	r0, sl
 8005404:	7821      	ldrb	r1, [r4, #0]
 8005406:	f000 fa17 	bl	8005838 <memchr>
 800540a:	b138      	cbz	r0, 800541c <_svfiprintf_r+0x150>
 800540c:	2240      	movs	r2, #64	@ 0x40
 800540e:	9b04      	ldr	r3, [sp, #16]
 8005410:	eba0 000a 	sub.w	r0, r0, sl
 8005414:	4082      	lsls	r2, r0
 8005416:	4313      	orrs	r3, r2
 8005418:	3401      	adds	r4, #1
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005420:	2206      	movs	r2, #6
 8005422:	4825      	ldr	r0, [pc, #148]	@ (80054b8 <_svfiprintf_r+0x1ec>)
 8005424:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005428:	f000 fa06 	bl	8005838 <memchr>
 800542c:	2800      	cmp	r0, #0
 800542e:	d036      	beq.n	800549e <_svfiprintf_r+0x1d2>
 8005430:	4b22      	ldr	r3, [pc, #136]	@ (80054bc <_svfiprintf_r+0x1f0>)
 8005432:	bb1b      	cbnz	r3, 800547c <_svfiprintf_r+0x1b0>
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	3307      	adds	r3, #7
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	3308      	adds	r3, #8
 800543e:	9303      	str	r3, [sp, #12]
 8005440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005442:	4433      	add	r3, r6
 8005444:	9309      	str	r3, [sp, #36]	@ 0x24
 8005446:	e76a      	b.n	800531e <_svfiprintf_r+0x52>
 8005448:	460c      	mov	r4, r1
 800544a:	2001      	movs	r0, #1
 800544c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005450:	e7a8      	b.n	80053a4 <_svfiprintf_r+0xd8>
 8005452:	2300      	movs	r3, #0
 8005454:	f04f 0c0a 	mov.w	ip, #10
 8005458:	4619      	mov	r1, r3
 800545a:	3401      	adds	r4, #1
 800545c:	9305      	str	r3, [sp, #20]
 800545e:	4620      	mov	r0, r4
 8005460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005464:	3a30      	subs	r2, #48	@ 0x30
 8005466:	2a09      	cmp	r2, #9
 8005468:	d903      	bls.n	8005472 <_svfiprintf_r+0x1a6>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0c6      	beq.n	80053fc <_svfiprintf_r+0x130>
 800546e:	9105      	str	r1, [sp, #20]
 8005470:	e7c4      	b.n	80053fc <_svfiprintf_r+0x130>
 8005472:	4604      	mov	r4, r0
 8005474:	2301      	movs	r3, #1
 8005476:	fb0c 2101 	mla	r1, ip, r1, r2
 800547a:	e7f0      	b.n	800545e <_svfiprintf_r+0x192>
 800547c:	ab03      	add	r3, sp, #12
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	462a      	mov	r2, r5
 8005482:	4638      	mov	r0, r7
 8005484:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <_svfiprintf_r+0x1f4>)
 8005486:	a904      	add	r1, sp, #16
 8005488:	f3af 8000 	nop.w
 800548c:	1c42      	adds	r2, r0, #1
 800548e:	4606      	mov	r6, r0
 8005490:	d1d6      	bne.n	8005440 <_svfiprintf_r+0x174>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	065b      	lsls	r3, r3, #25
 8005496:	f53f af2d 	bmi.w	80052f4 <_svfiprintf_r+0x28>
 800549a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800549c:	e72c      	b.n	80052f8 <_svfiprintf_r+0x2c>
 800549e:	ab03      	add	r3, sp, #12
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	462a      	mov	r2, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <_svfiprintf_r+0x1f4>)
 80054a8:	a904      	add	r1, sp, #16
 80054aa:	f000 f87d 	bl	80055a8 <_printf_i>
 80054ae:	e7ed      	b.n	800548c <_svfiprintf_r+0x1c0>
 80054b0:	080059de 	.word	0x080059de
 80054b4:	080059e4 	.word	0x080059e4
 80054b8:	080059e8 	.word	0x080059e8
 80054bc:	00000000 	.word	0x00000000
 80054c0:	08005215 	.word	0x08005215

080054c4 <_printf_common>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	4616      	mov	r6, r2
 80054ca:	4698      	mov	r8, r3
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	690b      	ldr	r3, [r1, #16]
 80054d0:	4607      	mov	r7, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfb8      	it	lt
 80054d6:	4613      	movlt	r3, r2
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054de:	460c      	mov	r4, r1
 80054e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e4:	b10a      	cbz	r2, 80054ea <_printf_common+0x26>
 80054e6:	3301      	adds	r3, #1
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0699      	lsls	r1, r3, #26
 80054ee:	bf42      	ittt	mi
 80054f0:	6833      	ldrmi	r3, [r6, #0]
 80054f2:	3302      	addmi	r3, #2
 80054f4:	6033      	strmi	r3, [r6, #0]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	f015 0506 	ands.w	r5, r5, #6
 80054fc:	d106      	bne.n	800550c <_printf_common+0x48>
 80054fe:	f104 0a19 	add.w	sl, r4, #25
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	6832      	ldr	r2, [r6, #0]
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	42ab      	cmp	r3, r5
 800550a:	dc2b      	bgt.n	8005564 <_printf_common+0xa0>
 800550c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	3b00      	subs	r3, #0
 8005514:	bf18      	it	ne
 8005516:	2301      	movne	r3, #1
 8005518:	0692      	lsls	r2, r2, #26
 800551a:	d430      	bmi.n	800557e <_printf_common+0xba>
 800551c:	4641      	mov	r1, r8
 800551e:	4638      	mov	r0, r7
 8005520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005524:	47c8      	blx	r9
 8005526:	3001      	adds	r0, #1
 8005528:	d023      	beq.n	8005572 <_printf_common+0xae>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	f003 0306 	and.w	r3, r3, #6
 8005532:	2b04      	cmp	r3, #4
 8005534:	bf14      	ite	ne
 8005536:	2500      	movne	r5, #0
 8005538:	6833      	ldreq	r3, [r6, #0]
 800553a:	f04f 0600 	mov.w	r6, #0
 800553e:	bf08      	it	eq
 8005540:	68e5      	ldreq	r5, [r4, #12]
 8005542:	f104 041a 	add.w	r4, r4, #26
 8005546:	bf08      	it	eq
 8005548:	1aed      	subeq	r5, r5, r3
 800554a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800554e:	bf08      	it	eq
 8005550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005554:	4293      	cmp	r3, r2
 8005556:	bfc4      	itt	gt
 8005558:	1a9b      	subgt	r3, r3, r2
 800555a:	18ed      	addgt	r5, r5, r3
 800555c:	42b5      	cmp	r5, r6
 800555e:	d11a      	bne.n	8005596 <_printf_common+0xd2>
 8005560:	2000      	movs	r0, #0
 8005562:	e008      	b.n	8005576 <_printf_common+0xb2>
 8005564:	2301      	movs	r3, #1
 8005566:	4652      	mov	r2, sl
 8005568:	4641      	mov	r1, r8
 800556a:	4638      	mov	r0, r7
 800556c:	47c8      	blx	r9
 800556e:	3001      	adds	r0, #1
 8005570:	d103      	bne.n	800557a <_printf_common+0xb6>
 8005572:	f04f 30ff 	mov.w	r0, #4294967295
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	3501      	adds	r5, #1
 800557c:	e7c1      	b.n	8005502 <_printf_common+0x3e>
 800557e:	2030      	movs	r0, #48	@ 0x30
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800558c:	4422      	add	r2, r4
 800558e:	3302      	adds	r3, #2
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005594:	e7c2      	b.n	800551c <_printf_common+0x58>
 8005596:	2301      	movs	r3, #1
 8005598:	4622      	mov	r2, r4
 800559a:	4641      	mov	r1, r8
 800559c:	4638      	mov	r0, r7
 800559e:	47c8      	blx	r9
 80055a0:	3001      	adds	r0, #1
 80055a2:	d0e6      	beq.n	8005572 <_printf_common+0xae>
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7d9      	b.n	800555c <_printf_common+0x98>

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	4691      	mov	r9, r2
 80055b0:	2f78      	cmp	r7, #120	@ 0x78
 80055b2:	4680      	mov	r8, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	469a      	mov	sl, r3
 80055b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	@ 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d1 	beq.w	800576c <_printf_i+0x1c4>
 80055ca:	2f58      	cmp	r7, #88	@ 0x58
 80055cc:	f000 80b8 	beq.w	8005740 <_printf_i+0x198>
 80055d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	@ (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005753 	.word	0x08005753
 8005618:	0800567f 	.word	0x0800567f
 800561c:	0800570d 	.word	0x0800570d
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005775 	.word	0x08005775
 800562c:	080055d1 	.word	0x080055d1
 8005630:	0800567f 	.word	0x0800567f
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	08005715 	.word	0x08005715
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09c      	b.n	800578e <_printf_i+0x1e6>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	0606      	lsls	r6, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xbc>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e003      	b.n	800566c <_printf_i+0xc4>
 8005664:	0645      	lsls	r5, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xb8>
 8005668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800566c:	2d00      	cmp	r5, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xd0>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	426d      	negs	r5, r5
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	230a      	movs	r3, #10
 800567a:	4858      	ldr	r0, [pc, #352]	@ (80057dc <_printf_i+0x234>)
 800567c:	e011      	b.n	80056a2 <_printf_i+0xfa>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	0608      	lsls	r0, r1, #24
 8005684:	f853 5b04 	ldr.w	r5, [r3], #4
 8005688:	d402      	bmi.n	8005690 <_printf_i+0xe8>
 800568a:	0649      	lsls	r1, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b2ad      	uxthmi	r5, r5
 8005690:	2f6f      	cmp	r7, #111	@ 0x6f
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	bf14      	ite	ne
 8005696:	230a      	movne	r3, #10
 8005698:	2308      	moveq	r3, #8
 800569a:	4850      	ldr	r0, [pc, #320]	@ (80057dc <_printf_i+0x234>)
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a2:	6866      	ldr	r6, [r4, #4]
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	60a6      	str	r6, [r4, #8]
 80056a8:	db05      	blt.n	80056b6 <_printf_i+0x10e>
 80056aa:	6821      	ldr	r1, [r4, #0]
 80056ac:	432e      	orrs	r6, r5
 80056ae:	f021 0104 	bic.w	r1, r1, #4
 80056b2:	6021      	str	r1, [r4, #0]
 80056b4:	d04b      	beq.n	800574e <_printf_i+0x1a6>
 80056b6:	4616      	mov	r6, r2
 80056b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80056bc:	fb03 5711 	mls	r7, r3, r1, r5
 80056c0:	5dc7      	ldrb	r7, [r0, r7]
 80056c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c6:	462f      	mov	r7, r5
 80056c8:	42bb      	cmp	r3, r7
 80056ca:	460d      	mov	r5, r1
 80056cc:	d9f4      	bls.n	80056b8 <_printf_i+0x110>
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d10b      	bne.n	80056ea <_printf_i+0x142>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	07df      	lsls	r7, r3, #31
 80056d6:	d508      	bpl.n	80056ea <_printf_i+0x142>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	6861      	ldr	r1, [r4, #4]
 80056dc:	4299      	cmp	r1, r3
 80056de:	bfde      	ittt	le
 80056e0:	2330      	movle	r3, #48	@ 0x30
 80056e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ea:	1b92      	subs	r2, r2, r6
 80056ec:	6122      	str	r2, [r4, #16]
 80056ee:	464b      	mov	r3, r9
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f8cd a000 	str.w	sl, [sp]
 80056f8:	aa03      	add	r2, sp, #12
 80056fa:	f7ff fee3 	bl	80054c4 <_printf_common>
 80056fe:	3001      	adds	r0, #1
 8005700:	d14a      	bne.n	8005798 <_printf_i+0x1f0>
 8005702:	f04f 30ff 	mov.w	r0, #4294967295
 8005706:	b004      	add	sp, #16
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	f043 0320 	orr.w	r3, r3, #32
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	2778      	movs	r7, #120	@ 0x78
 8005716:	4832      	ldr	r0, [pc, #200]	@ (80057e0 <_printf_i+0x238>)
 8005718:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	6831      	ldr	r1, [r6, #0]
 8005720:	061f      	lsls	r7, r3, #24
 8005722:	f851 5b04 	ldr.w	r5, [r1], #4
 8005726:	d402      	bmi.n	800572e <_printf_i+0x186>
 8005728:	065f      	lsls	r7, r3, #25
 800572a:	bf48      	it	mi
 800572c:	b2ad      	uxthmi	r5, r5
 800572e:	6031      	str	r1, [r6, #0]
 8005730:	07d9      	lsls	r1, r3, #31
 8005732:	bf44      	itt	mi
 8005734:	f043 0320 	orrmi.w	r3, r3, #32
 8005738:	6023      	strmi	r3, [r4, #0]
 800573a:	b11d      	cbz	r5, 8005744 <_printf_i+0x19c>
 800573c:	2310      	movs	r3, #16
 800573e:	e7ad      	b.n	800569c <_printf_i+0xf4>
 8005740:	4826      	ldr	r0, [pc, #152]	@ (80057dc <_printf_i+0x234>)
 8005742:	e7e9      	b.n	8005718 <_printf_i+0x170>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	f023 0320 	bic.w	r3, r3, #32
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	e7f6      	b.n	800573c <_printf_i+0x194>
 800574e:	4616      	mov	r6, r2
 8005750:	e7bd      	b.n	80056ce <_printf_i+0x126>
 8005752:	6833      	ldr	r3, [r6, #0]
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	1d18      	adds	r0, r3, #4
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	6030      	str	r0, [r6, #0]
 800575c:	062e      	lsls	r6, r5, #24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	d501      	bpl.n	8005766 <_printf_i+0x1be>
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x1c4>
 8005766:	0668      	lsls	r0, r5, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x1ba>
 800576a:	8019      	strh	r1, [r3, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	4616      	mov	r6, r2
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	e7bc      	b.n	80056ee <_printf_i+0x146>
 8005774:	6833      	ldr	r3, [r6, #0]
 8005776:	2100      	movs	r1, #0
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	6032      	str	r2, [r6, #0]
 800577c:	681e      	ldr	r6, [r3, #0]
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	4630      	mov	r0, r6
 8005782:	f000 f859 	bl	8005838 <memchr>
 8005786:	b108      	cbz	r0, 800578c <_printf_i+0x1e4>
 8005788:	1b80      	subs	r0, r0, r6
 800578a:	6060      	str	r0, [r4, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005796:	e7aa      	b.n	80056ee <_printf_i+0x146>
 8005798:	4632      	mov	r2, r6
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	47d0      	blx	sl
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0ad      	beq.n	8005702 <_printf_i+0x15a>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	079b      	lsls	r3, r3, #30
 80057aa:	d413      	bmi.n	80057d4 <_printf_i+0x22c>
 80057ac:	68e0      	ldr	r0, [r4, #12]
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	4298      	cmp	r0, r3
 80057b2:	bfb8      	it	lt
 80057b4:	4618      	movlt	r0, r3
 80057b6:	e7a6      	b.n	8005706 <_printf_i+0x15e>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4632      	mov	r2, r6
 80057bc:	4649      	mov	r1, r9
 80057be:	4640      	mov	r0, r8
 80057c0:	47d0      	blx	sl
 80057c2:	3001      	adds	r0, #1
 80057c4:	d09d      	beq.n	8005702 <_printf_i+0x15a>
 80057c6:	3501      	adds	r5, #1
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	9903      	ldr	r1, [sp, #12]
 80057cc:	1a5b      	subs	r3, r3, r1
 80057ce:	42ab      	cmp	r3, r5
 80057d0:	dcf2      	bgt.n	80057b8 <_printf_i+0x210>
 80057d2:	e7eb      	b.n	80057ac <_printf_i+0x204>
 80057d4:	2500      	movs	r5, #0
 80057d6:	f104 0619 	add.w	r6, r4, #25
 80057da:	e7f5      	b.n	80057c8 <_printf_i+0x220>
 80057dc:	080059ef 	.word	0x080059ef
 80057e0:	08005a00 	.word	0x08005a00

080057e4 <memmove>:
 80057e4:	4288      	cmp	r0, r1
 80057e6:	b510      	push	{r4, lr}
 80057e8:	eb01 0402 	add.w	r4, r1, r2
 80057ec:	d902      	bls.n	80057f4 <memmove+0x10>
 80057ee:	4284      	cmp	r4, r0
 80057f0:	4623      	mov	r3, r4
 80057f2:	d807      	bhi.n	8005804 <memmove+0x20>
 80057f4:	1e43      	subs	r3, r0, #1
 80057f6:	42a1      	cmp	r1, r4
 80057f8:	d008      	beq.n	800580c <memmove+0x28>
 80057fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005802:	e7f8      	b.n	80057f6 <memmove+0x12>
 8005804:	4601      	mov	r1, r0
 8005806:	4402      	add	r2, r0
 8005808:	428a      	cmp	r2, r1
 800580a:	d100      	bne.n	800580e <memmove+0x2a>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005816:	e7f7      	b.n	8005808 <memmove+0x24>

08005818 <_sbrk_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	2300      	movs	r3, #0
 800581c:	4d05      	ldr	r5, [pc, #20]	@ (8005834 <_sbrk_r+0x1c>)
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	f7fb fbe2 	bl	8000fec <_sbrk>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_sbrk_r+0x1a>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_sbrk_r+0x1a>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20000330 	.word	0x20000330

08005838 <memchr>:
 8005838:	4603      	mov	r3, r0
 800583a:	b510      	push	{r4, lr}
 800583c:	b2c9      	uxtb	r1, r1
 800583e:	4402      	add	r2, r0
 8005840:	4293      	cmp	r3, r2
 8005842:	4618      	mov	r0, r3
 8005844:	d101      	bne.n	800584a <memchr+0x12>
 8005846:	2000      	movs	r0, #0
 8005848:	e003      	b.n	8005852 <memchr+0x1a>
 800584a:	7804      	ldrb	r4, [r0, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	428c      	cmp	r4, r1
 8005850:	d1f6      	bne.n	8005840 <memchr+0x8>
 8005852:	bd10      	pop	{r4, pc}

08005854 <memcpy>:
 8005854:	440a      	add	r2, r1
 8005856:	4291      	cmp	r1, r2
 8005858:	f100 33ff 	add.w	r3, r0, #4294967295
 800585c:	d100      	bne.n	8005860 <memcpy+0xc>
 800585e:	4770      	bx	lr
 8005860:	b510      	push	{r4, lr}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	4291      	cmp	r1, r2
 8005868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586c:	d1f9      	bne.n	8005862 <memcpy+0xe>
 800586e:	bd10      	pop	{r4, pc}

08005870 <_realloc_r>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	4607      	mov	r7, r0
 8005876:	4614      	mov	r4, r2
 8005878:	460d      	mov	r5, r1
 800587a:	b921      	cbnz	r1, 8005886 <_realloc_r+0x16>
 800587c:	4611      	mov	r1, r2
 800587e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005882:	f7ff bc3b 	b.w	80050fc <_malloc_r>
 8005886:	b92a      	cbnz	r2, 8005894 <_realloc_r+0x24>
 8005888:	f7ff fbce 	bl	8005028 <_free_r>
 800588c:	4625      	mov	r5, r4
 800588e:	4628      	mov	r0, r5
 8005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005894:	f000 f81a 	bl	80058cc <_malloc_usable_size_r>
 8005898:	4284      	cmp	r4, r0
 800589a:	4606      	mov	r6, r0
 800589c:	d802      	bhi.n	80058a4 <_realloc_r+0x34>
 800589e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058a2:	d8f4      	bhi.n	800588e <_realloc_r+0x1e>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff fc28 	bl	80050fc <_malloc_r>
 80058ac:	4680      	mov	r8, r0
 80058ae:	b908      	cbnz	r0, 80058b4 <_realloc_r+0x44>
 80058b0:	4645      	mov	r5, r8
 80058b2:	e7ec      	b.n	800588e <_realloc_r+0x1e>
 80058b4:	42b4      	cmp	r4, r6
 80058b6:	4622      	mov	r2, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	bf28      	it	cs
 80058bc:	4632      	movcs	r2, r6
 80058be:	f7ff ffc9 	bl	8005854 <memcpy>
 80058c2:	4629      	mov	r1, r5
 80058c4:	4638      	mov	r0, r7
 80058c6:	f7ff fbaf 	bl	8005028 <_free_r>
 80058ca:	e7f1      	b.n	80058b0 <_realloc_r+0x40>

080058cc <_malloc_usable_size_r>:
 80058cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d0:	1f18      	subs	r0, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbc      	itt	lt
 80058d6:	580b      	ldrlt	r3, [r1, r0]
 80058d8:	18c0      	addlt	r0, r0, r3
 80058da:	4770      	bx	lr

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
